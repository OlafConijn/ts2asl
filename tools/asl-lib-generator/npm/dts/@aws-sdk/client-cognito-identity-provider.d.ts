// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client

declare module '@aws-sdk/client-cognito-identity-provider' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CognitoIdentityProviderClient } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AddCustomAttributesCommandInput, AddCustomAttributesCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AddCustomAttributesCommand";
    import { AdminAddUserToGroupCommandInput, AdminAddUserToGroupCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminAddUserToGroupCommand";
    import { AdminConfirmSignUpCommandInput, AdminConfirmSignUpCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminConfirmSignUpCommand";
    import { AdminCreateUserCommandInput, AdminCreateUserCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminCreateUserCommand";
    import { AdminDeleteUserAttributesCommandInput, AdminDeleteUserAttributesCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminDeleteUserAttributesCommand";
    import { AdminDeleteUserCommandInput, AdminDeleteUserCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminDeleteUserCommand";
    import { AdminDisableProviderForUserCommandInput, AdminDisableProviderForUserCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminDisableProviderForUserCommand";
    import { AdminDisableUserCommandInput, AdminDisableUserCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminDisableUserCommand";
    import { AdminEnableUserCommandInput, AdminEnableUserCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminEnableUserCommand";
    import { AdminForgetDeviceCommandInput, AdminForgetDeviceCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminForgetDeviceCommand";
    import { AdminGetDeviceCommandInput, AdminGetDeviceCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminGetDeviceCommand";
    import { AdminGetUserCommandInput, AdminGetUserCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminGetUserCommand";
    import { AdminInitiateAuthCommandInput, AdminInitiateAuthCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminInitiateAuthCommand";
    import { AdminLinkProviderForUserCommandInput, AdminLinkProviderForUserCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminLinkProviderForUserCommand";
    import { AdminListDevicesCommandInput, AdminListDevicesCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminListDevicesCommand";
    import { AdminListGroupsForUserCommandInput, AdminListGroupsForUserCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminListGroupsForUserCommand";
    import { AdminListUserAuthEventsCommandInput, AdminListUserAuthEventsCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminListUserAuthEventsCommand";
    import { AdminRemoveUserFromGroupCommandInput, AdminRemoveUserFromGroupCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminRemoveUserFromGroupCommand";
    import { AdminResetUserPasswordCommandInput, AdminResetUserPasswordCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminResetUserPasswordCommand";
    import { AdminRespondToAuthChallengeCommandInput, AdminRespondToAuthChallengeCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminRespondToAuthChallengeCommand";
    import { AdminSetUserMFAPreferenceCommandInput, AdminSetUserMFAPreferenceCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminSetUserMFAPreferenceCommand";
    import { AdminSetUserPasswordCommandInput, AdminSetUserPasswordCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminSetUserPasswordCommand";
    import { AdminSetUserSettingsCommandInput, AdminSetUserSettingsCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminSetUserSettingsCommand";
    import { AdminUpdateAuthEventFeedbackCommandInput, AdminUpdateAuthEventFeedbackCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminUpdateAuthEventFeedbackCommand";
    import { AdminUpdateDeviceStatusCommandInput, AdminUpdateDeviceStatusCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminUpdateDeviceStatusCommand";
    import { AdminUpdateUserAttributesCommandInput, AdminUpdateUserAttributesCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminUpdateUserAttributesCommand";
    import { AdminUserGlobalSignOutCommandInput, AdminUserGlobalSignOutCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminUserGlobalSignOutCommand";
    import { AssociateSoftwareTokenCommandInput, AssociateSoftwareTokenCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AssociateSoftwareTokenCommand";
    import { ChangePasswordCommandInput, ChangePasswordCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ChangePasswordCommand";
    import { ConfirmDeviceCommandInput, ConfirmDeviceCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ConfirmDeviceCommand";
    import { ConfirmForgotPasswordCommandInput, ConfirmForgotPasswordCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ConfirmForgotPasswordCommand";
    import { ConfirmSignUpCommandInput, ConfirmSignUpCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ConfirmSignUpCommand";
    import { CreateGroupCommandInput, CreateGroupCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/CreateGroupCommand";
    import { CreateIdentityProviderCommandInput, CreateIdentityProviderCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/CreateIdentityProviderCommand";
    import { CreateResourceServerCommandInput, CreateResourceServerCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/CreateResourceServerCommand";
    import { CreateUserImportJobCommandInput, CreateUserImportJobCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/CreateUserImportJobCommand";
    import { CreateUserPoolClientCommandInput, CreateUserPoolClientCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/CreateUserPoolClientCommand";
    import { CreateUserPoolCommandInput, CreateUserPoolCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/CreateUserPoolCommand";
    import { CreateUserPoolDomainCommandInput, CreateUserPoolDomainCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/CreateUserPoolDomainCommand";
    import { DeleteGroupCommandInput, DeleteGroupCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteGroupCommand";
    import { DeleteIdentityProviderCommandInput, DeleteIdentityProviderCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteIdentityProviderCommand";
    import { DeleteResourceServerCommandInput, DeleteResourceServerCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteResourceServerCommand";
    import { DeleteUserAttributesCommandInput, DeleteUserAttributesCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteUserAttributesCommand";
    import { DeleteUserCommandInput, DeleteUserCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteUserCommand";
    import { DeleteUserPoolClientCommandInput, DeleteUserPoolClientCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteUserPoolClientCommand";
    import { DeleteUserPoolCommandInput, DeleteUserPoolCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteUserPoolCommand";
    import { DeleteUserPoolDomainCommandInput, DeleteUserPoolDomainCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteUserPoolDomainCommand";
    import { DescribeIdentityProviderCommandInput, DescribeIdentityProviderCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DescribeIdentityProviderCommand";
    import { DescribeResourceServerCommandInput, DescribeResourceServerCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DescribeResourceServerCommand";
    import { DescribeRiskConfigurationCommandInput, DescribeRiskConfigurationCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DescribeRiskConfigurationCommand";
    import { DescribeUserImportJobCommandInput, DescribeUserImportJobCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DescribeUserImportJobCommand";
    import { DescribeUserPoolClientCommandInput, DescribeUserPoolClientCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DescribeUserPoolClientCommand";
    import { DescribeUserPoolCommandInput, DescribeUserPoolCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DescribeUserPoolCommand";
    import { DescribeUserPoolDomainCommandInput, DescribeUserPoolDomainCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DescribeUserPoolDomainCommand";
    import { ForgetDeviceCommandInput, ForgetDeviceCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ForgetDeviceCommand";
    import { ForgotPasswordCommandInput, ForgotPasswordCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ForgotPasswordCommand";
    import { GetCSVHeaderCommandInput, GetCSVHeaderCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetCSVHeaderCommand";
    import { GetDeviceCommandInput, GetDeviceCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetDeviceCommand";
    import { GetGroupCommandInput, GetGroupCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetGroupCommand";
    import { GetIdentityProviderByIdentifierCommandInput, GetIdentityProviderByIdentifierCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetIdentityProviderByIdentifierCommand";
    import { GetSigningCertificateCommandInput, GetSigningCertificateCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetSigningCertificateCommand";
    import { GetUICustomizationCommandInput, GetUICustomizationCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetUICustomizationCommand";
    import { GetUserAttributeVerificationCodeCommandInput, GetUserAttributeVerificationCodeCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetUserAttributeVerificationCodeCommand";
    import { GetUserCommandInput, GetUserCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetUserCommand";
    import { GetUserPoolMfaConfigCommandInput, GetUserPoolMfaConfigCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetUserPoolMfaConfigCommand";
    import { GlobalSignOutCommandInput, GlobalSignOutCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GlobalSignOutCommand";
    import { InitiateAuthCommandInput, InitiateAuthCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/InitiateAuthCommand";
    import { ListDevicesCommandInput, ListDevicesCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListDevicesCommand";
    import { ListGroupsCommandInput, ListGroupsCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListGroupsCommand";
    import { ListIdentityProvidersCommandInput, ListIdentityProvidersCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListIdentityProvidersCommand";
    import { ListResourceServersCommandInput, ListResourceServersCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListResourceServersCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListTagsForResourceCommand";
    import { ListUserImportJobsCommandInput, ListUserImportJobsCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListUserImportJobsCommand";
    import { ListUserPoolClientsCommandInput, ListUserPoolClientsCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListUserPoolClientsCommand";
    import { ListUserPoolsCommandInput, ListUserPoolsCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListUserPoolsCommand";
    import { ListUsersCommandInput, ListUsersCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListUsersCommand";
    import { ListUsersInGroupCommandInput, ListUsersInGroupCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListUsersInGroupCommand";
    import { ResendConfirmationCodeCommandInput, ResendConfirmationCodeCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ResendConfirmationCodeCommand";
    import { RespondToAuthChallengeCommandInput, RespondToAuthChallengeCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/RespondToAuthChallengeCommand";
    import { RevokeTokenCommandInput, RevokeTokenCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/RevokeTokenCommand";
    import { SetRiskConfigurationCommandInput, SetRiskConfigurationCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/SetRiskConfigurationCommand";
    import { SetUICustomizationCommandInput, SetUICustomizationCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/SetUICustomizationCommand";
    import { SetUserMFAPreferenceCommandInput, SetUserMFAPreferenceCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/SetUserMFAPreferenceCommand";
    import { SetUserPoolMfaConfigCommandInput, SetUserPoolMfaConfigCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/SetUserPoolMfaConfigCommand";
    import { SetUserSettingsCommandInput, SetUserSettingsCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/SetUserSettingsCommand";
    import { SignUpCommandInput, SignUpCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/SignUpCommand";
    import { StartUserImportJobCommandInput, StartUserImportJobCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/StartUserImportJobCommand";
    import { StopUserImportJobCommandInput, StopUserImportJobCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/StopUserImportJobCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UntagResourceCommand";
    import { UpdateAuthEventFeedbackCommandInput, UpdateAuthEventFeedbackCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateAuthEventFeedbackCommand";
    import { UpdateDeviceStatusCommandInput, UpdateDeviceStatusCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateDeviceStatusCommand";
    import { UpdateGroupCommandInput, UpdateGroupCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateGroupCommand";
    import { UpdateIdentityProviderCommandInput, UpdateIdentityProviderCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateIdentityProviderCommand";
    import { UpdateResourceServerCommandInput, UpdateResourceServerCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateResourceServerCommand";
    import { UpdateUserAttributesCommandInput, UpdateUserAttributesCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateUserAttributesCommand";
    import { UpdateUserPoolClientCommandInput, UpdateUserPoolClientCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateUserPoolClientCommand";
    import { UpdateUserPoolCommandInput, UpdateUserPoolCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateUserPoolCommand";
    import { UpdateUserPoolDomainCommandInput, UpdateUserPoolDomainCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateUserPoolDomainCommand";
    import { VerifySoftwareTokenCommandInput, VerifySoftwareTokenCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/VerifySoftwareTokenCommand";
    import { VerifyUserAttributeCommandInput, VerifyUserAttributeCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/VerifyUserAttributeCommand";
    /**
        * <p>Using the Amazon Cognito user pools API, you can create a user pool to manage directories and
        *             users. You can authenticate a user to obtain tokens related to user identity and access
        *             policies.</p>
        *         <p>This API reference provides information about user pools in Amazon Cognito user pools.</p>
        *         <p>For more information, see the <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/what-is-amazon-cognito.html">Amazon Cognito
        *                 Documentation</a>.</p>
        */
    export class CognitoIdentityProvider extends CognitoIdentityProviderClient {
            /**
                * <p>Adds additional user attributes to the user pool schema.</p>
                */
            addCustomAttributes(args: AddCustomAttributesCommandInput, options?: __HttpHandlerOptions): Promise<AddCustomAttributesCommandOutput>;
            addCustomAttributes(args: AddCustomAttributesCommandInput, cb: (err: any, data?: AddCustomAttributesCommandOutput) => void): void;
            addCustomAttributes(args: AddCustomAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddCustomAttributesCommandOutput) => void): void;
            /**
                * <p>Adds the specified user to the specified group.</p>
                *         <p>Calling this action requires developer credentials.</p>
                */
            adminAddUserToGroup(args: AdminAddUserToGroupCommandInput, options?: __HttpHandlerOptions): Promise<AdminAddUserToGroupCommandOutput>;
            adminAddUserToGroup(args: AdminAddUserToGroupCommandInput, cb: (err: any, data?: AdminAddUserToGroupCommandOutput) => void): void;
            adminAddUserToGroup(args: AdminAddUserToGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminAddUserToGroupCommandOutput) => void): void;
            /**
                * <p>Confirms user registration as an admin without using a confirmation code. Works on any
                *             user.</p>
                *         <p>Calling this action requires developer credentials.</p>
                */
            adminConfirmSignUp(args: AdminConfirmSignUpCommandInput, options?: __HttpHandlerOptions): Promise<AdminConfirmSignUpCommandOutput>;
            adminConfirmSignUp(args: AdminConfirmSignUpCommandInput, cb: (err: any, data?: AdminConfirmSignUpCommandOutput) => void): void;
            adminConfirmSignUp(args: AdminConfirmSignUpCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminConfirmSignUpCommandOutput) => void): void;
            /**
                * <p>Creates a new user in the specified user pool.</p>
                *         <p>If <code>MessageAction</code> isn't set, the default is to send a welcome message via
                *             email or phone (SMS).</p>
                *
                *          <note>
                *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
                *                 require you to register an origination phone number before you can send SMS messages
                *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
                *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
                *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
                *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
                *                 in.</p>
                *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
                *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
                *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
                *                         mode</a>
                *                </i>, you can send messages only to verified phone
                *                 numbers. After you test your app while in the sandbox environment, you can move out
                *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
                *                     Developer Guide</i>.</p>
                *          </note>
                *
                *         <p>This message is based on a template that you configured in your call to create or
                *             update a user pool. This template includes your custom sign-up instructions and
                *             placeholders for user name and temporary password.</p>
                *         <p>Alternatively, you can call <code>AdminCreateUser</code> with <code>SUPPRESS</code>
                *             for the <code>MessageAction</code> parameter, and Amazon Cognito won't send any email. </p>
                *         <p>In either case, the user will be in the <code>FORCE_CHANGE_PASSWORD</code> state until
                *             they sign in and change their password.</p>
                *         <p>
                *             <code>AdminCreateUser</code> requires developer credentials.</p>
                */
            adminCreateUser(args: AdminCreateUserCommandInput, options?: __HttpHandlerOptions): Promise<AdminCreateUserCommandOutput>;
            adminCreateUser(args: AdminCreateUserCommandInput, cb: (err: any, data?: AdminCreateUserCommandOutput) => void): void;
            adminCreateUser(args: AdminCreateUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminCreateUserCommandOutput) => void): void;
            /**
                * <p>Deletes a user as an administrator. Works on any user.</p>
                *         <p>Calling this action requires developer credentials.</p>
                */
            adminDeleteUser(args: AdminDeleteUserCommandInput, options?: __HttpHandlerOptions): Promise<AdminDeleteUserCommandOutput>;
            adminDeleteUser(args: AdminDeleteUserCommandInput, cb: (err: any, data?: AdminDeleteUserCommandOutput) => void): void;
            adminDeleteUser(args: AdminDeleteUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminDeleteUserCommandOutput) => void): void;
            /**
                * <p>Deletes the user attributes in a user pool as an administrator. Works on any
                *             user.</p>
                *         <p>Calling this action requires developer credentials.</p>
                */
            adminDeleteUserAttributes(args: AdminDeleteUserAttributesCommandInput, options?: __HttpHandlerOptions): Promise<AdminDeleteUserAttributesCommandOutput>;
            adminDeleteUserAttributes(args: AdminDeleteUserAttributesCommandInput, cb: (err: any, data?: AdminDeleteUserAttributesCommandOutput) => void): void;
            adminDeleteUserAttributes(args: AdminDeleteUserAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminDeleteUserAttributesCommandOutput) => void): void;
            /**
                * <p>Prevents the user from signing in with the specified external (SAML or social)
                *             identity provider (IdP). If the user that you want to deactivate is a Amazon Cognito user pools
                *             native username + password user, they can't use their password to sign in. If the user
                *             to deactivate is a linked external IdP user, any link between that user and an existing
                *             user is removed. When the external user signs in again, and the user is no longer
                *             attached to the previously linked <code>DestinationUser</code>, the user must create a
                *             new user account. See <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminLinkProviderForUser.html">AdminLinkProviderForUser</a>.</p>
                *         <p>This action is enabled only for admin access and requires developer
                *             credentials.</p>
                *         <p>The <code>ProviderName</code> must match the value specified when creating an IdP for
                *             the pool. </p>
                *         <p>To deactivate a native username + password user, the <code>ProviderName</code> value
                *             must be <code>Cognito</code> and the <code>ProviderAttributeName</code> must be
                *                 <code>Cognito_Subject</code>. The <code>ProviderAttributeValue</code> must be the
                *             name that is used in the user pool for the user.</p>
                *         <p>The <code>ProviderAttributeName</code> must always be <code>Cognito_Subject</code> for
                *             social IdPs. The <code>ProviderAttributeValue</code> must always be the exact subject
                *             that was used when the user was originally linked as a source user.</p>
                *         <p>For de-linking a SAML identity, there are two scenarios. If the linked identity has
                *             not yet been used to sign in, the <code>ProviderAttributeName</code> and
                *                 <code>ProviderAttributeValue</code> must be the same values that were used for the
                *                 <code>SourceUser</code> when the identities were originally linked using <code>
                *                 AdminLinkProviderForUser</code> call. (If the linking was done with
                *                 <code>ProviderAttributeName</code> set to <code>Cognito_Subject</code>, the same
                *             applies here). However, if the user has already signed in, the
                *                 <code>ProviderAttributeName</code> must be <code>Cognito_Subject</code> and
                *                 <code>ProviderAttributeValue</code> must be the subject of the SAML
                *             assertion.</p>
                */
            adminDisableProviderForUser(args: AdminDisableProviderForUserCommandInput, options?: __HttpHandlerOptions): Promise<AdminDisableProviderForUserCommandOutput>;
            adminDisableProviderForUser(args: AdminDisableProviderForUserCommandInput, cb: (err: any, data?: AdminDisableProviderForUserCommandOutput) => void): void;
            adminDisableProviderForUser(args: AdminDisableProviderForUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminDisableProviderForUserCommandOutput) => void): void;
            /**
                * <p>Disables the specified user.</p>
                *         <p>Calling this action requires developer credentials.</p>
                */
            adminDisableUser(args: AdminDisableUserCommandInput, options?: __HttpHandlerOptions): Promise<AdminDisableUserCommandOutput>;
            adminDisableUser(args: AdminDisableUserCommandInput, cb: (err: any, data?: AdminDisableUserCommandOutput) => void): void;
            adminDisableUser(args: AdminDisableUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminDisableUserCommandOutput) => void): void;
            /**
                * <p>Enables the specified user as an administrator. Works on any user.</p>
                *         <p>Calling this action requires developer credentials.</p>
                */
            adminEnableUser(args: AdminEnableUserCommandInput, options?: __HttpHandlerOptions): Promise<AdminEnableUserCommandOutput>;
            adminEnableUser(args: AdminEnableUserCommandInput, cb: (err: any, data?: AdminEnableUserCommandOutput) => void): void;
            adminEnableUser(args: AdminEnableUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminEnableUserCommandOutput) => void): void;
            /**
                * <p>Forgets the device, as an administrator.</p>
                *         <p>Calling this action requires developer credentials.</p>
                */
            adminForgetDevice(args: AdminForgetDeviceCommandInput, options?: __HttpHandlerOptions): Promise<AdminForgetDeviceCommandOutput>;
            adminForgetDevice(args: AdminForgetDeviceCommandInput, cb: (err: any, data?: AdminForgetDeviceCommandOutput) => void): void;
            adminForgetDevice(args: AdminForgetDeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminForgetDeviceCommandOutput) => void): void;
            /**
                * <p>Gets the device, as an administrator.</p>
                *         <p>Calling this action requires developer credentials.</p>
                */
            adminGetDevice(args: AdminGetDeviceCommandInput, options?: __HttpHandlerOptions): Promise<AdminGetDeviceCommandOutput>;
            adminGetDevice(args: AdminGetDeviceCommandInput, cb: (err: any, data?: AdminGetDeviceCommandOutput) => void): void;
            adminGetDevice(args: AdminGetDeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminGetDeviceCommandOutput) => void): void;
            /**
                * <p>Gets the specified user by user name in a user pool as an administrator. Works on any
                *             user.</p>
                *         <p>Calling this action requires developer credentials.</p>
                */
            adminGetUser(args: AdminGetUserCommandInput, options?: __HttpHandlerOptions): Promise<AdminGetUserCommandOutput>;
            adminGetUser(args: AdminGetUserCommandInput, cb: (err: any, data?: AdminGetUserCommandOutput) => void): void;
            adminGetUser(args: AdminGetUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminGetUserCommandOutput) => void): void;
            /**
                * <p>Initiates the authentication flow, as an administrator.</p>
                *
                *          <note>
                *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
                *                 require you to register an origination phone number before you can send SMS messages
                *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
                *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
                *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
                *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
                *                 in.</p>
                *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
                *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
                *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
                *                         mode</a>
                *                </i>, you can send messages only to verified phone
                *                 numbers. After you test your app while in the sandbox environment, you can move out
                *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
                *                     Developer Guide</i>.</p>
                *          </note>
                *
                *         <p>Calling this action requires developer credentials.</p>
                */
            adminInitiateAuth(args: AdminInitiateAuthCommandInput, options?: __HttpHandlerOptions): Promise<AdminInitiateAuthCommandOutput>;
            adminInitiateAuth(args: AdminInitiateAuthCommandInput, cb: (err: any, data?: AdminInitiateAuthCommandOutput) => void): void;
            adminInitiateAuth(args: AdminInitiateAuthCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminInitiateAuthCommandOutput) => void): void;
            /**
                * <p>Links an existing user account in a user pool (<code>DestinationUser</code>) to an
                *             identity from an external IdP (<code>SourceUser</code>) based on a specified attribute
                *             name and value from the external IdP. This allows you to create a link from the existing
                *             user account to an external federated user identity that has not yet been used to sign
                *             in. You can then use the federated user identity to sign in as the existing user
                *             account. </p>
                *         <p> For example, if there is an existing user with a username and password, this API
                *             links that user to a federated user identity. When the user signs in with a federated
                *             user identity, they sign in as the existing user account.</p>
                *         <note>
                *             <p>The maximum number of federated identities linked to a user is five.</p>
                *         </note>
                *         <important>
                *             <p>Because this API allows a user with an external federated identity to sign in as
                *                 an existing user in the user pool, it is critical that it only be used with external
                *                 IdPs and provider attributes that have been trusted by the application owner.</p>
                *         </important>
                *
                *         <p>This action is administrative and requires developer credentials.</p>
                */
            adminLinkProviderForUser(args: AdminLinkProviderForUserCommandInput, options?: __HttpHandlerOptions): Promise<AdminLinkProviderForUserCommandOutput>;
            adminLinkProviderForUser(args: AdminLinkProviderForUserCommandInput, cb: (err: any, data?: AdminLinkProviderForUserCommandOutput) => void): void;
            adminLinkProviderForUser(args: AdminLinkProviderForUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminLinkProviderForUserCommandOutput) => void): void;
            /**
                * <p>Lists devices, as an administrator.</p>
                *         <p>Calling this action requires developer credentials.</p>
                */
            adminListDevices(args: AdminListDevicesCommandInput, options?: __HttpHandlerOptions): Promise<AdminListDevicesCommandOutput>;
            adminListDevices(args: AdminListDevicesCommandInput, cb: (err: any, data?: AdminListDevicesCommandOutput) => void): void;
            adminListDevices(args: AdminListDevicesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminListDevicesCommandOutput) => void): void;
            /**
                * <p>Lists the groups that the user belongs to.</p>
                *         <p>Calling this action requires developer credentials.</p>
                */
            adminListGroupsForUser(args: AdminListGroupsForUserCommandInput, options?: __HttpHandlerOptions): Promise<AdminListGroupsForUserCommandOutput>;
            adminListGroupsForUser(args: AdminListGroupsForUserCommandInput, cb: (err: any, data?: AdminListGroupsForUserCommandOutput) => void): void;
            adminListGroupsForUser(args: AdminListGroupsForUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminListGroupsForUserCommandOutput) => void): void;
            /**
                * <p>A history of user activity and any risks detected as part of Amazon Cognito advanced
                *             security.</p>
                */
            adminListUserAuthEvents(args: AdminListUserAuthEventsCommandInput, options?: __HttpHandlerOptions): Promise<AdminListUserAuthEventsCommandOutput>;
            adminListUserAuthEvents(args: AdminListUserAuthEventsCommandInput, cb: (err: any, data?: AdminListUserAuthEventsCommandOutput) => void): void;
            adminListUserAuthEvents(args: AdminListUserAuthEventsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminListUserAuthEventsCommandOutput) => void): void;
            /**
                * <p>Removes the specified user from the specified group.</p>
                *         <p>Calling this action requires developer credentials.</p>
                */
            adminRemoveUserFromGroup(args: AdminRemoveUserFromGroupCommandInput, options?: __HttpHandlerOptions): Promise<AdminRemoveUserFromGroupCommandOutput>;
            adminRemoveUserFromGroup(args: AdminRemoveUserFromGroupCommandInput, cb: (err: any, data?: AdminRemoveUserFromGroupCommandOutput) => void): void;
            adminRemoveUserFromGroup(args: AdminRemoveUserFromGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminRemoveUserFromGroupCommandOutput) => void): void;
            /**
                * <p>Resets the specified user's password in a user pool as an administrator. Works on any
                *             user.</p>
                *         <p>When a developer calls this API, the current password is invalidated, so it must be
                *             changed. If a user tries to sign in after the API is called, the app will get a
                *             PasswordResetRequiredException exception back and should direct the user down the flow
                *             to reset the password, which is the same as the forgot password flow. In addition, if
                *             the user pool has phone verification selected and a verified phone number exists for the
                *             user, or if email verification is selected and a verified email exists for the user,
                *             calling this API will also result in sending a message to the end user with the code to
                *             change their password.</p>
                *
                *          <note>
                *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
                *                 require you to register an origination phone number before you can send SMS messages
                *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
                *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
                *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
                *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
                *                 in.</p>
                *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
                *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
                *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
                *                         mode</a>
                *                </i>, you can send messages only to verified phone
                *                 numbers. After you test your app while in the sandbox environment, you can move out
                *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
                *                     Developer Guide</i>.</p>
                *          </note>
                *
                *         <p>Calling this action requires developer credentials.</p>
                */
            adminResetUserPassword(args: AdminResetUserPasswordCommandInput, options?: __HttpHandlerOptions): Promise<AdminResetUserPasswordCommandOutput>;
            adminResetUserPassword(args: AdminResetUserPasswordCommandInput, cb: (err: any, data?: AdminResetUserPasswordCommandOutput) => void): void;
            adminResetUserPassword(args: AdminResetUserPasswordCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminResetUserPasswordCommandOutput) => void): void;
            /**
                * <p>Responds to an authentication challenge, as an administrator.</p>
                *
                *          <note>
                *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
                *                 require you to register an origination phone number before you can send SMS messages
                *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
                *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
                *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
                *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
                *                 in.</p>
                *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
                *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
                *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
                *                         mode</a>
                *                </i>, you can send messages only to verified phone
                *                 numbers. After you test your app while in the sandbox environment, you can move out
                *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
                *                     Developer Guide</i>.</p>
                *          </note>
                *
                *         <p>Calling this action requires developer credentials.</p>
                */
            adminRespondToAuthChallenge(args: AdminRespondToAuthChallengeCommandInput, options?: __HttpHandlerOptions): Promise<AdminRespondToAuthChallengeCommandOutput>;
            adminRespondToAuthChallenge(args: AdminRespondToAuthChallengeCommandInput, cb: (err: any, data?: AdminRespondToAuthChallengeCommandOutput) => void): void;
            adminRespondToAuthChallenge(args: AdminRespondToAuthChallengeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminRespondToAuthChallengeCommandOutput) => void): void;
            /**
                * <p>The user's multi-factor authentication (MFA) preference, including which MFA options
                *             are activated, and if any are preferred. Only one factor can be set as preferred. The
                *             preferred MFA factor will be used to authenticate a user if multiple factors are
                *             activated. If multiple options are activated and no preference is set, a challenge to
                *             choose an MFA option will be returned during sign-in.</p>
                */
            adminSetUserMFAPreference(args: AdminSetUserMFAPreferenceCommandInput, options?: __HttpHandlerOptions): Promise<AdminSetUserMFAPreferenceCommandOutput>;
            adminSetUserMFAPreference(args: AdminSetUserMFAPreferenceCommandInput, cb: (err: any, data?: AdminSetUserMFAPreferenceCommandOutput) => void): void;
            adminSetUserMFAPreference(args: AdminSetUserMFAPreferenceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminSetUserMFAPreferenceCommandOutput) => void): void;
            /**
                * <p>Sets the specified user's password in a user pool as an administrator. Works on any
                *             user. </p>
                *         <p>The password can be temporary or permanent. If it is temporary, the user status enters
                *             the <code>FORCE_CHANGE_PASSWORD</code> state. When the user next tries to sign in, the
                *             InitiateAuth/AdminInitiateAuth response will contain the
                *                 <code>NEW_PASSWORD_REQUIRED</code> challenge. If the user doesn't sign in before it
                *             expires, the user won't be able to sign in, and an administrator must reset their
                *             password. </p>
                *         <p>Once the user has set a new password, or the password is permanent, the user status is
                *             set to <code>Confirmed</code>.</p>
                */
            adminSetUserPassword(args: AdminSetUserPasswordCommandInput, options?: __HttpHandlerOptions): Promise<AdminSetUserPasswordCommandOutput>;
            adminSetUserPassword(args: AdminSetUserPasswordCommandInput, cb: (err: any, data?: AdminSetUserPasswordCommandOutput) => void): void;
            adminSetUserPassword(args: AdminSetUserPasswordCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminSetUserPasswordCommandOutput) => void): void;
            /**
                * <p>
                *             <i>This action is no longer supported.</i> You can use it to configure
                *             only SMS MFA. You can't use it to configure time-based one-time password (TOTP) software
                *             token MFA. To configure either type of MFA, use <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminSetUserMFAPreference.html">AdminSetUserMFAPreference</a> instead.</p>
                */
            adminSetUserSettings(args: AdminSetUserSettingsCommandInput, options?: __HttpHandlerOptions): Promise<AdminSetUserSettingsCommandOutput>;
            adminSetUserSettings(args: AdminSetUserSettingsCommandInput, cb: (err: any, data?: AdminSetUserSettingsCommandOutput) => void): void;
            adminSetUserSettings(args: AdminSetUserSettingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminSetUserSettingsCommandOutput) => void): void;
            /**
                * <p>Provides feedback for an authentication event indicating if it was from a valid user.
                *             This feedback is used for improving the risk evaluation decision for the user pool as
                *             part of Amazon Cognito advanced security.</p>
                */
            adminUpdateAuthEventFeedback(args: AdminUpdateAuthEventFeedbackCommandInput, options?: __HttpHandlerOptions): Promise<AdminUpdateAuthEventFeedbackCommandOutput>;
            adminUpdateAuthEventFeedback(args: AdminUpdateAuthEventFeedbackCommandInput, cb: (err: any, data?: AdminUpdateAuthEventFeedbackCommandOutput) => void): void;
            adminUpdateAuthEventFeedback(args: AdminUpdateAuthEventFeedbackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminUpdateAuthEventFeedbackCommandOutput) => void): void;
            /**
                * <p>Updates the device status as an administrator.</p>
                *         <p>Calling this action requires developer credentials.</p>
                */
            adminUpdateDeviceStatus(args: AdminUpdateDeviceStatusCommandInput, options?: __HttpHandlerOptions): Promise<AdminUpdateDeviceStatusCommandOutput>;
            adminUpdateDeviceStatus(args: AdminUpdateDeviceStatusCommandInput, cb: (err: any, data?: AdminUpdateDeviceStatusCommandOutput) => void): void;
            adminUpdateDeviceStatus(args: AdminUpdateDeviceStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminUpdateDeviceStatusCommandOutput) => void): void;
            /**
                * <p>Updates the specified user's attributes, including developer attributes, as an
                *             administrator. Works on any user.</p>
                *         <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the
                *             attribute name.</p>
                *         <p>In addition to updating user attributes, this API can also be used to mark phone and
                *             email as verified.</p>
                *
                *          <note>
                *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
                *                 require you to register an origination phone number before you can send SMS messages
                *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
                *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
                *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
                *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
                *                 in.</p>
                *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
                *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
                *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
                *                         mode</a>
                *                </i>, you can send messages only to verified phone
                *                 numbers. After you test your app while in the sandbox environment, you can move out
                *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
                *                     Developer Guide</i>.</p>
                *          </note>
                *
                *         <p>Calling this action requires developer credentials.</p>
                */
            adminUpdateUserAttributes(args: AdminUpdateUserAttributesCommandInput, options?: __HttpHandlerOptions): Promise<AdminUpdateUserAttributesCommandOutput>;
            adminUpdateUserAttributes(args: AdminUpdateUserAttributesCommandInput, cb: (err: any, data?: AdminUpdateUserAttributesCommandOutput) => void): void;
            adminUpdateUserAttributes(args: AdminUpdateUserAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminUpdateUserAttributesCommandOutput) => void): void;
            /**
                * <p>Signs out a user from all devices. You must sign <code>AdminUserGlobalSignOut</code> requests
                *             with Amazon Web Services credentials. It also invalidates all refresh tokens that Amazon Cognito has issued to
                *             a user. The user's current access and ID tokens remain valid until they expire. By
                *             default, access and ID tokens expire one hour after they're issued. A user can still use
                *             a hosted UI cookie to retrieve new tokens for the duration of the cookie validity period
                *             of 1 hour.</p>
                *         <p>Calling this action requires developer credentials.</p>
                */
            adminUserGlobalSignOut(args: AdminUserGlobalSignOutCommandInput, options?: __HttpHandlerOptions): Promise<AdminUserGlobalSignOutCommandOutput>;
            adminUserGlobalSignOut(args: AdminUserGlobalSignOutCommandInput, cb: (err: any, data?: AdminUserGlobalSignOutCommandOutput) => void): void;
            adminUserGlobalSignOut(args: AdminUserGlobalSignOutCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AdminUserGlobalSignOutCommandOutput) => void): void;
            /**
                * <p>Begins setup of time-based one-time password multi-factor authentication (TOTP MFA)
                *             for a user, with a unique private key that Amazon Cognito generates and returns in the API
                *             response. You can authorize an <code>AssociateSoftwareToken</code> request with either
                *             the user's access token, or a session string from a challenge response that you received
                *             from Amazon Cognito.</p>
                *         <note>
                *             <p>Amazon Cognito disassociates an existing software token when you verify the new token in a
                *                     <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerifySoftwareToken.html"> VerifySoftwareToken</a> API request. If you don't verify the software
                *                 token and your user pool doesn't require MFA, the user can then authenticate with
                *                 user name and password credentials alone. If your user pool requires TOTP MFA, Amazon Cognito
                *                 generates an <code>MFA_SETUP</code> or <code>SOFTWARE_TOKEN_SETUP</code> challenge
                *                 each time your user signs. Complete setup with <code>AssociateSoftwareToken</code>
                *                 and <code>VerifySoftwareToken</code>.</p>
                *             <p>After you set up software token MFA for your user, Amazon Cognito generates a
                *                     <code>SOFTWARE_TOKEN_MFA</code> challenge when they authenticate. Respond to
                *                 this challenge with your user's TOTP.</p>
                *         </note>
                */
            associateSoftwareToken(args: AssociateSoftwareTokenCommandInput, options?: __HttpHandlerOptions): Promise<AssociateSoftwareTokenCommandOutput>;
            associateSoftwareToken(args: AssociateSoftwareTokenCommandInput, cb: (err: any, data?: AssociateSoftwareTokenCommandOutput) => void): void;
            associateSoftwareToken(args: AssociateSoftwareTokenCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateSoftwareTokenCommandOutput) => void): void;
            /**
                * <p>Changes the password for a specified user in a user pool.</p>
                */
            changePassword(args: ChangePasswordCommandInput, options?: __HttpHandlerOptions): Promise<ChangePasswordCommandOutput>;
            changePassword(args: ChangePasswordCommandInput, cb: (err: any, data?: ChangePasswordCommandOutput) => void): void;
            changePassword(args: ChangePasswordCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ChangePasswordCommandOutput) => void): void;
            /**
                * <p>Confirms tracking of the device. This API call is the call that begins device
                *             tracking.</p>
                */
            confirmDevice(args: ConfirmDeviceCommandInput, options?: __HttpHandlerOptions): Promise<ConfirmDeviceCommandOutput>;
            confirmDevice(args: ConfirmDeviceCommandInput, cb: (err: any, data?: ConfirmDeviceCommandOutput) => void): void;
            confirmDevice(args: ConfirmDeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ConfirmDeviceCommandOutput) => void): void;
            /**
                * <p>Allows a user to enter a confirmation code to reset a forgotten password.</p>
                */
            confirmForgotPassword(args: ConfirmForgotPasswordCommandInput, options?: __HttpHandlerOptions): Promise<ConfirmForgotPasswordCommandOutput>;
            confirmForgotPassword(args: ConfirmForgotPasswordCommandInput, cb: (err: any, data?: ConfirmForgotPasswordCommandOutput) => void): void;
            confirmForgotPassword(args: ConfirmForgotPasswordCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ConfirmForgotPasswordCommandOutput) => void): void;
            /**
                * <p>Confirms registration of a new user.</p>
                */
            confirmSignUp(args: ConfirmSignUpCommandInput, options?: __HttpHandlerOptions): Promise<ConfirmSignUpCommandOutput>;
            confirmSignUp(args: ConfirmSignUpCommandInput, cb: (err: any, data?: ConfirmSignUpCommandOutput) => void): void;
            confirmSignUp(args: ConfirmSignUpCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ConfirmSignUpCommandOutput) => void): void;
            /**
                * <p>Creates a new group in the specified user pool.</p>
                *         <p>Calling this action requires developer credentials.</p>
                */
            createGroup(args: CreateGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateGroupCommandOutput>;
            createGroup(args: CreateGroupCommandInput, cb: (err: any, data?: CreateGroupCommandOutput) => void): void;
            createGroup(args: CreateGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateGroupCommandOutput) => void): void;
            /**
                * <p>Creates an IdP for a user pool.</p>
                */
            createIdentityProvider(args: CreateIdentityProviderCommandInput, options?: __HttpHandlerOptions): Promise<CreateIdentityProviderCommandOutput>;
            createIdentityProvider(args: CreateIdentityProviderCommandInput, cb: (err: any, data?: CreateIdentityProviderCommandOutput) => void): void;
            createIdentityProvider(args: CreateIdentityProviderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateIdentityProviderCommandOutput) => void): void;
            /**
                * <p>Creates a new OAuth2.0 resource server and defines custom scopes within it.</p>
                */
            createResourceServer(args: CreateResourceServerCommandInput, options?: __HttpHandlerOptions): Promise<CreateResourceServerCommandOutput>;
            createResourceServer(args: CreateResourceServerCommandInput, cb: (err: any, data?: CreateResourceServerCommandOutput) => void): void;
            createResourceServer(args: CreateResourceServerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateResourceServerCommandOutput) => void): void;
            /**
                * <p>Creates the user import job.</p>
                */
            createUserImportJob(args: CreateUserImportJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateUserImportJobCommandOutput>;
            createUserImportJob(args: CreateUserImportJobCommandInput, cb: (err: any, data?: CreateUserImportJobCommandOutput) => void): void;
            createUserImportJob(args: CreateUserImportJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateUserImportJobCommandOutput) => void): void;
            /**
                * <p>Creates a new Amazon Cognito user pool and sets the password policy for the
                *             pool.</p>
                *
                *          <note>
                *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
                *                 require you to register an origination phone number before you can send SMS messages
                *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
                *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
                *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
                *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
                *                 in.</p>
                *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
                *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
                *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
                *                         mode</a>
                *                </i>, you can send messages only to verified phone
                *                 numbers. After you test your app while in the sandbox environment, you can move out
                *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
                *                     Developer Guide</i>.</p>
                *          </note>
                */
            createUserPool(args: CreateUserPoolCommandInput, options?: __HttpHandlerOptions): Promise<CreateUserPoolCommandOutput>;
            createUserPool(args: CreateUserPoolCommandInput, cb: (err: any, data?: CreateUserPoolCommandOutput) => void): void;
            createUserPool(args: CreateUserPoolCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateUserPoolCommandOutput) => void): void;
            /**
                * <p>Creates the user pool client.</p>
                *         <p>When you create a new user pool client, token revocation is automatically activated.
                *             For more information about revoking tokens, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html">RevokeToken</a>.</p>
                */
            createUserPoolClient(args: CreateUserPoolClientCommandInput, options?: __HttpHandlerOptions): Promise<CreateUserPoolClientCommandOutput>;
            createUserPoolClient(args: CreateUserPoolClientCommandInput, cb: (err: any, data?: CreateUserPoolClientCommandOutput) => void): void;
            createUserPoolClient(args: CreateUserPoolClientCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateUserPoolClientCommandOutput) => void): void;
            /**
                * <p>Creates a new domain for a user pool.</p>
                */
            createUserPoolDomain(args: CreateUserPoolDomainCommandInput, options?: __HttpHandlerOptions): Promise<CreateUserPoolDomainCommandOutput>;
            createUserPoolDomain(args: CreateUserPoolDomainCommandInput, cb: (err: any, data?: CreateUserPoolDomainCommandOutput) => void): void;
            createUserPoolDomain(args: CreateUserPoolDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateUserPoolDomainCommandOutput) => void): void;
            /**
                * <p>Deletes a group.</p>
                *         <p>Calling this action requires developer credentials.</p>
                */
            deleteGroup(args: DeleteGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteGroupCommandOutput>;
            deleteGroup(args: DeleteGroupCommandInput, cb: (err: any, data?: DeleteGroupCommandOutput) => void): void;
            deleteGroup(args: DeleteGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteGroupCommandOutput) => void): void;
            /**
                * <p>Deletes an IdP for a user pool.</p>
                */
            deleteIdentityProvider(args: DeleteIdentityProviderCommandInput, options?: __HttpHandlerOptions): Promise<DeleteIdentityProviderCommandOutput>;
            deleteIdentityProvider(args: DeleteIdentityProviderCommandInput, cb: (err: any, data?: DeleteIdentityProviderCommandOutput) => void): void;
            deleteIdentityProvider(args: DeleteIdentityProviderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteIdentityProviderCommandOutput) => void): void;
            /**
                * <p>Deletes a resource server.</p>
                */
            deleteResourceServer(args: DeleteResourceServerCommandInput, options?: __HttpHandlerOptions): Promise<DeleteResourceServerCommandOutput>;
            deleteResourceServer(args: DeleteResourceServerCommandInput, cb: (err: any, data?: DeleteResourceServerCommandOutput) => void): void;
            deleteResourceServer(args: DeleteResourceServerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteResourceServerCommandOutput) => void): void;
            /**
                * <p>Allows a user to delete himself or herself.</p>
                */
            deleteUser(args: DeleteUserCommandInput, options?: __HttpHandlerOptions): Promise<DeleteUserCommandOutput>;
            deleteUser(args: DeleteUserCommandInput, cb: (err: any, data?: DeleteUserCommandOutput) => void): void;
            deleteUser(args: DeleteUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteUserCommandOutput) => void): void;
            /**
                * <p>Deletes the attributes for a user.</p>
                */
            deleteUserAttributes(args: DeleteUserAttributesCommandInput, options?: __HttpHandlerOptions): Promise<DeleteUserAttributesCommandOutput>;
            deleteUserAttributes(args: DeleteUserAttributesCommandInput, cb: (err: any, data?: DeleteUserAttributesCommandOutput) => void): void;
            deleteUserAttributes(args: DeleteUserAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteUserAttributesCommandOutput) => void): void;
            /**
                * <p>Deletes the specified Amazon Cognito user pool.</p>
                */
            deleteUserPool(args: DeleteUserPoolCommandInput, options?: __HttpHandlerOptions): Promise<DeleteUserPoolCommandOutput>;
            deleteUserPool(args: DeleteUserPoolCommandInput, cb: (err: any, data?: DeleteUserPoolCommandOutput) => void): void;
            deleteUserPool(args: DeleteUserPoolCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteUserPoolCommandOutput) => void): void;
            /**
                * <p>Allows the developer to delete the user pool client.</p>
                */
            deleteUserPoolClient(args: DeleteUserPoolClientCommandInput, options?: __HttpHandlerOptions): Promise<DeleteUserPoolClientCommandOutput>;
            deleteUserPoolClient(args: DeleteUserPoolClientCommandInput, cb: (err: any, data?: DeleteUserPoolClientCommandOutput) => void): void;
            deleteUserPoolClient(args: DeleteUserPoolClientCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteUserPoolClientCommandOutput) => void): void;
            /**
                * <p>Deletes a domain for a user pool.</p>
                */
            deleteUserPoolDomain(args: DeleteUserPoolDomainCommandInput, options?: __HttpHandlerOptions): Promise<DeleteUserPoolDomainCommandOutput>;
            deleteUserPoolDomain(args: DeleteUserPoolDomainCommandInput, cb: (err: any, data?: DeleteUserPoolDomainCommandOutput) => void): void;
            deleteUserPoolDomain(args: DeleteUserPoolDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteUserPoolDomainCommandOutput) => void): void;
            /**
                * <p>Gets information about a specific IdP.</p>
                */
            describeIdentityProvider(args: DescribeIdentityProviderCommandInput, options?: __HttpHandlerOptions): Promise<DescribeIdentityProviderCommandOutput>;
            describeIdentityProvider(args: DescribeIdentityProviderCommandInput, cb: (err: any, data?: DescribeIdentityProviderCommandOutput) => void): void;
            describeIdentityProvider(args: DescribeIdentityProviderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeIdentityProviderCommandOutput) => void): void;
            /**
                * <p>Describes a resource server.</p>
                */
            describeResourceServer(args: DescribeResourceServerCommandInput, options?: __HttpHandlerOptions): Promise<DescribeResourceServerCommandOutput>;
            describeResourceServer(args: DescribeResourceServerCommandInput, cb: (err: any, data?: DescribeResourceServerCommandOutput) => void): void;
            describeResourceServer(args: DescribeResourceServerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeResourceServerCommandOutput) => void): void;
            /**
                * <p>Describes the risk configuration.</p>
                */
            describeRiskConfiguration(args: DescribeRiskConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DescribeRiskConfigurationCommandOutput>;
            describeRiskConfiguration(args: DescribeRiskConfigurationCommandInput, cb: (err: any, data?: DescribeRiskConfigurationCommandOutput) => void): void;
            describeRiskConfiguration(args: DescribeRiskConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeRiskConfigurationCommandOutput) => void): void;
            /**
                * <p>Describes the user import job.</p>
                */
            describeUserImportJob(args: DescribeUserImportJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeUserImportJobCommandOutput>;
            describeUserImportJob(args: DescribeUserImportJobCommandInput, cb: (err: any, data?: DescribeUserImportJobCommandOutput) => void): void;
            describeUserImportJob(args: DescribeUserImportJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeUserImportJobCommandOutput) => void): void;
            /**
                * <p>Returns the configuration information and metadata of the specified user pool.</p>
                */
            describeUserPool(args: DescribeUserPoolCommandInput, options?: __HttpHandlerOptions): Promise<DescribeUserPoolCommandOutput>;
            describeUserPool(args: DescribeUserPoolCommandInput, cb: (err: any, data?: DescribeUserPoolCommandOutput) => void): void;
            describeUserPool(args: DescribeUserPoolCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeUserPoolCommandOutput) => void): void;
            /**
                * <p>Client method for returning the configuration information and metadata of the
                *             specified user pool app client.</p>
                */
            describeUserPoolClient(args: DescribeUserPoolClientCommandInput, options?: __HttpHandlerOptions): Promise<DescribeUserPoolClientCommandOutput>;
            describeUserPoolClient(args: DescribeUserPoolClientCommandInput, cb: (err: any, data?: DescribeUserPoolClientCommandOutput) => void): void;
            describeUserPoolClient(args: DescribeUserPoolClientCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeUserPoolClientCommandOutput) => void): void;
            /**
                * <p>Gets information about a domain.</p>
                */
            describeUserPoolDomain(args: DescribeUserPoolDomainCommandInput, options?: __HttpHandlerOptions): Promise<DescribeUserPoolDomainCommandOutput>;
            describeUserPoolDomain(args: DescribeUserPoolDomainCommandInput, cb: (err: any, data?: DescribeUserPoolDomainCommandOutput) => void): void;
            describeUserPoolDomain(args: DescribeUserPoolDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeUserPoolDomainCommandOutput) => void): void;
            /**
                * <p>Forgets the specified device.</p>
                */
            forgetDevice(args: ForgetDeviceCommandInput, options?: __HttpHandlerOptions): Promise<ForgetDeviceCommandOutput>;
            forgetDevice(args: ForgetDeviceCommandInput, cb: (err: any, data?: ForgetDeviceCommandOutput) => void): void;
            forgetDevice(args: ForgetDeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ForgetDeviceCommandOutput) => void): void;
            /**
                * <p>Calling this API causes a message to be sent to the end user with a confirmation code
                *             that is required to change the user's password. For the <code>Username</code> parameter,
                *             you can use the username or user alias. The method used to send the confirmation code is
                *             sent according to the specified AccountRecoverySetting. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-recover-a-user-account.html">Recovering
                *                 User Accounts</a> in the <i>Amazon Cognito Developer Guide</i>. If
                *             neither a verified phone number nor a verified email exists, an
                *                 <code>InvalidParameterException</code> is thrown. To use the confirmation code for
                *             resetting the password, call <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ConfirmForgotPassword.html">ConfirmForgotPassword</a>. </p>
                *
                *          <note>
                *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
                *                 require you to register an origination phone number before you can send SMS messages
                *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
                *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
                *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
                *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
                *                 in.</p>
                *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
                *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
                *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
                *                         mode</a>
                *                </i>, you can send messages only to verified phone
                *                 numbers. After you test your app while in the sandbox environment, you can move out
                *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
                *                     Developer Guide</i>.</p>
                *          </note>
                */
            forgotPassword(args: ForgotPasswordCommandInput, options?: __HttpHandlerOptions): Promise<ForgotPasswordCommandOutput>;
            forgotPassword(args: ForgotPasswordCommandInput, cb: (err: any, data?: ForgotPasswordCommandOutput) => void): void;
            forgotPassword(args: ForgotPasswordCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ForgotPasswordCommandOutput) => void): void;
            /**
                * <p>Gets the header information for the comma-separated value (CSV) file to be used as
                *             input for the user import job.</p>
                */
            getCSVHeader(args: GetCSVHeaderCommandInput, options?: __HttpHandlerOptions): Promise<GetCSVHeaderCommandOutput>;
            getCSVHeader(args: GetCSVHeaderCommandInput, cb: (err: any, data?: GetCSVHeaderCommandOutput) => void): void;
            getCSVHeader(args: GetCSVHeaderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCSVHeaderCommandOutput) => void): void;
            /**
                * <p>Gets the device.</p>
                */
            getDevice(args: GetDeviceCommandInput, options?: __HttpHandlerOptions): Promise<GetDeviceCommandOutput>;
            getDevice(args: GetDeviceCommandInput, cb: (err: any, data?: GetDeviceCommandOutput) => void): void;
            getDevice(args: GetDeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeviceCommandOutput) => void): void;
            /**
                * <p>Gets a group.</p>
                *         <p>Calling this action requires developer credentials.</p>
                */
            getGroup(args: GetGroupCommandInput, options?: __HttpHandlerOptions): Promise<GetGroupCommandOutput>;
            getGroup(args: GetGroupCommandInput, cb: (err: any, data?: GetGroupCommandOutput) => void): void;
            getGroup(args: GetGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetGroupCommandOutput) => void): void;
            /**
                * <p>Gets the specified IdP.</p>
                */
            getIdentityProviderByIdentifier(args: GetIdentityProviderByIdentifierCommandInput, options?: __HttpHandlerOptions): Promise<GetIdentityProviderByIdentifierCommandOutput>;
            getIdentityProviderByIdentifier(args: GetIdentityProviderByIdentifierCommandInput, cb: (err: any, data?: GetIdentityProviderByIdentifierCommandOutput) => void): void;
            getIdentityProviderByIdentifier(args: GetIdentityProviderByIdentifierCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetIdentityProviderByIdentifierCommandOutput) => void): void;
            /**
                * <p>This method takes a user pool ID, and returns the signing certificate.</p>
                */
            getSigningCertificate(args: GetSigningCertificateCommandInput, options?: __HttpHandlerOptions): Promise<GetSigningCertificateCommandOutput>;
            getSigningCertificate(args: GetSigningCertificateCommandInput, cb: (err: any, data?: GetSigningCertificateCommandOutput) => void): void;
            getSigningCertificate(args: GetSigningCertificateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSigningCertificateCommandOutput) => void): void;
            /**
                * <p>Gets the user interface (UI) Customization information for a particular app client's
                *             app UI, if any such information exists for the client. If nothing is set for the
                *             particular client, but there is an existing pool level customization (the app
                *                 <code>clientId</code> is <code>ALL</code>), then that information is returned. If
                *             nothing is present, then an empty shape is returned.</p>
                */
            getUICustomization(args: GetUICustomizationCommandInput, options?: __HttpHandlerOptions): Promise<GetUICustomizationCommandOutput>;
            getUICustomization(args: GetUICustomizationCommandInput, cb: (err: any, data?: GetUICustomizationCommandOutput) => void): void;
            getUICustomization(args: GetUICustomizationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetUICustomizationCommandOutput) => void): void;
            /**
                * <p>Gets the user attributes and metadata for a user.</p>
                */
            getUser(args: GetUserCommandInput, options?: __HttpHandlerOptions): Promise<GetUserCommandOutput>;
            getUser(args: GetUserCommandInput, cb: (err: any, data?: GetUserCommandOutput) => void): void;
            getUser(args: GetUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetUserCommandOutput) => void): void;
            /**
                * <p>Generates a user attribute verification code for the specified attribute name. Sends a
                *             message to a user with a code that they must return in a VerifyUserAttribute
                *             request.</p>
                *
                *          <note>
                *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
                *                 require you to register an origination phone number before you can send SMS messages
                *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
                *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
                *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
                *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
                *                 in.</p>
                *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
                *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
                *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
                *                         mode</a>
                *                </i>, you can send messages only to verified phone
                *                 numbers. After you test your app while in the sandbox environment, you can move out
                *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
                *                     Developer Guide</i>.</p>
                *          </note>
                */
            getUserAttributeVerificationCode(args: GetUserAttributeVerificationCodeCommandInput, options?: __HttpHandlerOptions): Promise<GetUserAttributeVerificationCodeCommandOutput>;
            getUserAttributeVerificationCode(args: GetUserAttributeVerificationCodeCommandInput, cb: (err: any, data?: GetUserAttributeVerificationCodeCommandOutput) => void): void;
            getUserAttributeVerificationCode(args: GetUserAttributeVerificationCodeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetUserAttributeVerificationCodeCommandOutput) => void): void;
            /**
                * <p>Gets the user pool multi-factor authentication (MFA) configuration.</p>
                */
            getUserPoolMfaConfig(args: GetUserPoolMfaConfigCommandInput, options?: __HttpHandlerOptions): Promise<GetUserPoolMfaConfigCommandOutput>;
            getUserPoolMfaConfig(args: GetUserPoolMfaConfigCommandInput, cb: (err: any, data?: GetUserPoolMfaConfigCommandOutput) => void): void;
            getUserPoolMfaConfig(args: GetUserPoolMfaConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetUserPoolMfaConfigCommandOutput) => void): void;
            /**
                * <p>Signs out users from all devices. It also invalidates all refresh tokens that Amazon Cognito
                *             has issued to a user. The user's current access and ID tokens remain valid until their
                *             expiry. By default, access and ID tokens expire one hour after Amazon Cognito issues them. A user
                *             can still use a hosted UI cookie to retrieve new tokens for the duration of the cookie
                *             validity period of 1 hour.</p>
                */
            globalSignOut(args: GlobalSignOutCommandInput, options?: __HttpHandlerOptions): Promise<GlobalSignOutCommandOutput>;
            globalSignOut(args: GlobalSignOutCommandInput, cb: (err: any, data?: GlobalSignOutCommandOutput) => void): void;
            globalSignOut(args: GlobalSignOutCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GlobalSignOutCommandOutput) => void): void;
            /**
                * <p>Initiates sign-in for a user in the Amazon Cognito user directory. You can't sign in a user
                *             with a federated IdP with <code>InitiateAuth</code>. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation.html"> Adding user pool sign-in through a third party</a>.</p>
                *
                *          <note>
                *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
                *                 require you to register an origination phone number before you can send SMS messages
                *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
                *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
                *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
                *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
                *                 in.</p>
                *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
                *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
                *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
                *                         mode</a>
                *                </i>, you can send messages only to verified phone
                *                 numbers. After you test your app while in the sandbox environment, you can move out
                *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
                *                     Developer Guide</i>.</p>
                *          </note>
                */
            initiateAuth(args: InitiateAuthCommandInput, options?: __HttpHandlerOptions): Promise<InitiateAuthCommandOutput>;
            initiateAuth(args: InitiateAuthCommandInput, cb: (err: any, data?: InitiateAuthCommandOutput) => void): void;
            initiateAuth(args: InitiateAuthCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: InitiateAuthCommandOutput) => void): void;
            /**
                * <p>Lists the sign-in devices that Amazon Cognito has registered to the current user.</p>
                */
            listDevices(args: ListDevicesCommandInput, options?: __HttpHandlerOptions): Promise<ListDevicesCommandOutput>;
            listDevices(args: ListDevicesCommandInput, cb: (err: any, data?: ListDevicesCommandOutput) => void): void;
            listDevices(args: ListDevicesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDevicesCommandOutput) => void): void;
            /**
                * <p>Lists the groups associated with a user pool.</p>
                *         <p>Calling this action requires developer credentials.</p>
                */
            listGroups(args: ListGroupsCommandInput, options?: __HttpHandlerOptions): Promise<ListGroupsCommandOutput>;
            listGroups(args: ListGroupsCommandInput, cb: (err: any, data?: ListGroupsCommandOutput) => void): void;
            listGroups(args: ListGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListGroupsCommandOutput) => void): void;
            /**
                * <p>Lists information about all IdPs for a user pool.</p>
                */
            listIdentityProviders(args: ListIdentityProvidersCommandInput, options?: __HttpHandlerOptions): Promise<ListIdentityProvidersCommandOutput>;
            listIdentityProviders(args: ListIdentityProvidersCommandInput, cb: (err: any, data?: ListIdentityProvidersCommandOutput) => void): void;
            listIdentityProviders(args: ListIdentityProvidersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListIdentityProvidersCommandOutput) => void): void;
            /**
                * <p>Lists the resource servers for a user pool.</p>
                */
            listResourceServers(args: ListResourceServersCommandInput, options?: __HttpHandlerOptions): Promise<ListResourceServersCommandOutput>;
            listResourceServers(args: ListResourceServersCommandInput, cb: (err: any, data?: ListResourceServersCommandOutput) => void): void;
            listResourceServers(args: ListResourceServersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListResourceServersCommandOutput) => void): void;
            /**
                * <p>Lists the tags that are assigned to an Amazon Cognito user pool.</p>
                *         <p>A tag is a label that you can apply to user pools to categorize and manage them in
                *             different ways, such as by purpose, owner, environment, or other criteria.</p>
                *         <p>You can use this action up to 10 times per second, per account.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Lists the user import jobs.</p>
                */
            listUserImportJobs(args: ListUserImportJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListUserImportJobsCommandOutput>;
            listUserImportJobs(args: ListUserImportJobsCommandInput, cb: (err: any, data?: ListUserImportJobsCommandOutput) => void): void;
            listUserImportJobs(args: ListUserImportJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListUserImportJobsCommandOutput) => void): void;
            /**
                * <p>Lists the clients that have been created for the specified user pool.</p>
                */
            listUserPoolClients(args: ListUserPoolClientsCommandInput, options?: __HttpHandlerOptions): Promise<ListUserPoolClientsCommandOutput>;
            listUserPoolClients(args: ListUserPoolClientsCommandInput, cb: (err: any, data?: ListUserPoolClientsCommandOutput) => void): void;
            listUserPoolClients(args: ListUserPoolClientsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListUserPoolClientsCommandOutput) => void): void;
            /**
                * <p>Lists the user pools associated with an Amazon Web Services account.</p>
                */
            listUserPools(args: ListUserPoolsCommandInput, options?: __HttpHandlerOptions): Promise<ListUserPoolsCommandOutput>;
            listUserPools(args: ListUserPoolsCommandInput, cb: (err: any, data?: ListUserPoolsCommandOutput) => void): void;
            listUserPools(args: ListUserPoolsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListUserPoolsCommandOutput) => void): void;
            /**
                * <p>Lists the users in the Amazon Cognito user pool.</p>
                */
            listUsers(args: ListUsersCommandInput, options?: __HttpHandlerOptions): Promise<ListUsersCommandOutput>;
            listUsers(args: ListUsersCommandInput, cb: (err: any, data?: ListUsersCommandOutput) => void): void;
            listUsers(args: ListUsersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListUsersCommandOutput) => void): void;
            /**
                * <p>Lists the users in the specified group.</p>
                *         <p>Calling this action requires developer credentials.</p>
                */
            listUsersInGroup(args: ListUsersInGroupCommandInput, options?: __HttpHandlerOptions): Promise<ListUsersInGroupCommandOutput>;
            listUsersInGroup(args: ListUsersInGroupCommandInput, cb: (err: any, data?: ListUsersInGroupCommandOutput) => void): void;
            listUsersInGroup(args: ListUsersInGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListUsersInGroupCommandOutput) => void): void;
            /**
                * <p>Resends the confirmation (for confirmation of registration) to a specific user in the
                *             user pool.</p>
                *
                *          <note>
                *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
                *                 require you to register an origination phone number before you can send SMS messages
                *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
                *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
                *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
                *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
                *                 in.</p>
                *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
                *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
                *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
                *                         mode</a>
                *                </i>, you can send messages only to verified phone
                *                 numbers. After you test your app while in the sandbox environment, you can move out
                *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
                *                     Developer Guide</i>.</p>
                *          </note>
                */
            resendConfirmationCode(args: ResendConfirmationCodeCommandInput, options?: __HttpHandlerOptions): Promise<ResendConfirmationCodeCommandOutput>;
            resendConfirmationCode(args: ResendConfirmationCodeCommandInput, cb: (err: any, data?: ResendConfirmationCodeCommandOutput) => void): void;
            resendConfirmationCode(args: ResendConfirmationCodeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ResendConfirmationCodeCommandOutput) => void): void;
            /**
                * <p>Responds to the authentication challenge.</p>
                *
                *          <note>
                *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
                *                 require you to register an origination phone number before you can send SMS messages
                *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
                *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
                *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
                *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
                *                 in.</p>
                *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
                *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
                *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
                *                         mode</a>
                *                </i>, you can send messages only to verified phone
                *                 numbers. After you test your app while in the sandbox environment, you can move out
                *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
                *                     Developer Guide</i>.</p>
                *          </note>
                */
            respondToAuthChallenge(args: RespondToAuthChallengeCommandInput, options?: __HttpHandlerOptions): Promise<RespondToAuthChallengeCommandOutput>;
            respondToAuthChallenge(args: RespondToAuthChallengeCommandInput, cb: (err: any, data?: RespondToAuthChallengeCommandOutput) => void): void;
            respondToAuthChallenge(args: RespondToAuthChallengeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RespondToAuthChallengeCommandOutput) => void): void;
            /**
                * <p>Revokes all of the access tokens generated by the specified refresh token. After the
                *             token is revoked, you can't use the revoked token to access Amazon Cognito authenticated
                *             APIs.</p>
                */
            revokeToken(args: RevokeTokenCommandInput, options?: __HttpHandlerOptions): Promise<RevokeTokenCommandOutput>;
            revokeToken(args: RevokeTokenCommandInput, cb: (err: any, data?: RevokeTokenCommandOutput) => void): void;
            revokeToken(args: RevokeTokenCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RevokeTokenCommandOutput) => void): void;
            /**
                * <p>Configures actions on detected risks. To delete the risk configuration for
                *                 <code>UserPoolId</code> or <code>ClientId</code>, pass null values for all four
                *             configuration types.</p>
                *         <p>To activate Amazon Cognito advanced security features, update the user pool to include the
                *                 <code>UserPoolAddOns</code> key<code>AdvancedSecurityMode</code>.</p>
                */
            setRiskConfiguration(args: SetRiskConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<SetRiskConfigurationCommandOutput>;
            setRiskConfiguration(args: SetRiskConfigurationCommandInput, cb: (err: any, data?: SetRiskConfigurationCommandOutput) => void): void;
            setRiskConfiguration(args: SetRiskConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetRiskConfigurationCommandOutput) => void): void;
            /**
                * <p>Sets the user interface (UI) customization information for a user pool's built-in app
                *             UI.</p>
                *         <p>You can specify app UI customization settings for a single client (with a specific
                *                 <code>clientId</code>) or for all clients (by setting the <code>clientId</code> to
                *                 <code>ALL</code>). If you specify <code>ALL</code>, the default configuration is
                *             used for every client that has no previously set UI customization. If you specify UI
                *             customization settings for a particular client, it will no longer return to the
                *                 <code>ALL</code> configuration.</p>
                *         <note>
                *             <p>To use this API, your user pool must have a domain associated with it. Otherwise,
                *                 there is no place to host the app's pages, and the service will throw an
                *                 error.</p>
                *         </note>
                */
            setUICustomization(args: SetUICustomizationCommandInput, options?: __HttpHandlerOptions): Promise<SetUICustomizationCommandOutput>;
            setUICustomization(args: SetUICustomizationCommandInput, cb: (err: any, data?: SetUICustomizationCommandOutput) => void): void;
            setUICustomization(args: SetUICustomizationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetUICustomizationCommandOutput) => void): void;
            /**
                * <p>Set the user's multi-factor authentication (MFA) method preference, including which
                *             MFA factors are activated and if any are preferred. Only one factor can be set as
                *             preferred. The preferred MFA factor will be used to authenticate a user if multiple
                *             factors are activated. If multiple options are activated and no preference is set, a
                *             challenge to choose an MFA option will be returned during sign-in. If an MFA type is
                *             activated for a user, the user will be prompted for MFA during all sign-in attempts
                *             unless device tracking is turned on and the device has been trusted. If you want MFA to
                *             be applied selectively based on the assessed risk level of sign-in attempts, deactivate
                *             MFA for users and turn on Adaptive Authentication for the user pool.</p>
                */
            setUserMFAPreference(args: SetUserMFAPreferenceCommandInput, options?: __HttpHandlerOptions): Promise<SetUserMFAPreferenceCommandOutput>;
            setUserMFAPreference(args: SetUserMFAPreferenceCommandInput, cb: (err: any, data?: SetUserMFAPreferenceCommandOutput) => void): void;
            setUserMFAPreference(args: SetUserMFAPreferenceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetUserMFAPreferenceCommandOutput) => void): void;
            /**
                * <p>Sets the user pool multi-factor authentication (MFA) configuration.</p>
                *
                *          <note>
                *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
                *                 require you to register an origination phone number before you can send SMS messages
                *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
                *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
                *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
                *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
                *                 in.</p>
                *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
                *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
                *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
                *                         mode</a>
                *                </i>, you can send messages only to verified phone
                *                 numbers. After you test your app while in the sandbox environment, you can move out
                *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
                *                     Developer Guide</i>.</p>
                *          </note>
                */
            setUserPoolMfaConfig(args: SetUserPoolMfaConfigCommandInput, options?: __HttpHandlerOptions): Promise<SetUserPoolMfaConfigCommandOutput>;
            setUserPoolMfaConfig(args: SetUserPoolMfaConfigCommandInput, cb: (err: any, data?: SetUserPoolMfaConfigCommandOutput) => void): void;
            setUserPoolMfaConfig(args: SetUserPoolMfaConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetUserPoolMfaConfigCommandOutput) => void): void;
            /**
                * <p>
                *             <i>This action is no longer supported.</i> You can use it to configure
                *             only SMS MFA. You can't use it to configure time-based one-time password (TOTP) software
                *             token MFA. To configure either type of MFA, use <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SetUserMFAPreference.html">SetUserMFAPreference</a> instead.</p>
                */
            setUserSettings(args: SetUserSettingsCommandInput, options?: __HttpHandlerOptions): Promise<SetUserSettingsCommandOutput>;
            setUserSettings(args: SetUserSettingsCommandInput, cb: (err: any, data?: SetUserSettingsCommandOutput) => void): void;
            setUserSettings(args: SetUserSettingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetUserSettingsCommandOutput) => void): void;
            /**
                * <p>Registers the user in the specified user pool and creates a user name, password, and
                *             user attributes.</p>
                *
                *          <note>
                *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
                *                 require you to register an origination phone number before you can send SMS messages
                *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
                *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
                *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
                *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
                *                 in.</p>
                *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
                *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
                *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
                *                         mode</a>
                *                </i>, you can send messages only to verified phone
                *                 numbers. After you test your app while in the sandbox environment, you can move out
                *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
                *                     Developer Guide</i>.</p>
                *          </note>
                */
            signUp(args: SignUpCommandInput, options?: __HttpHandlerOptions): Promise<SignUpCommandOutput>;
            signUp(args: SignUpCommandInput, cb: (err: any, data?: SignUpCommandOutput) => void): void;
            signUp(args: SignUpCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SignUpCommandOutput) => void): void;
            /**
                * <p>Starts the user import.</p>
                */
            startUserImportJob(args: StartUserImportJobCommandInput, options?: __HttpHandlerOptions): Promise<StartUserImportJobCommandOutput>;
            startUserImportJob(args: StartUserImportJobCommandInput, cb: (err: any, data?: StartUserImportJobCommandOutput) => void): void;
            startUserImportJob(args: StartUserImportJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartUserImportJobCommandOutput) => void): void;
            /**
                * <p>Stops the user import job.</p>
                */
            stopUserImportJob(args: StopUserImportJobCommandInput, options?: __HttpHandlerOptions): Promise<StopUserImportJobCommandOutput>;
            stopUserImportJob(args: StopUserImportJobCommandInput, cb: (err: any, data?: StopUserImportJobCommandOutput) => void): void;
            stopUserImportJob(args: StopUserImportJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopUserImportJobCommandOutput) => void): void;
            /**
                * <p>Assigns a set of tags to an Amazon Cognito user pool. A tag is a label that you can use to
                *             categorize and manage user pools in different ways, such as by purpose, owner,
                *             environment, or other criteria.</p>
                *         <p>Each tag consists of a key and value, both of which you define. A key is a general
                *             category for more specific values. For example, if you have two versions of a user pool,
                *             one for testing and another for production, you might assign an <code>Environment</code>
                *             tag key to both user pools. The value of this key might be <code>Test</code> for one
                *             user pool, and <code>Production</code> for the other.</p>
                *         <p>Tags are useful for cost tracking and access control. You can activate your tags so
                *             that they appear on the Billing and Cost Management console, where you can track the
                *             costs associated with your user pools. In an Identity and Access Management policy, you can constrain
                *             permissions for user pools based on specific tags or tag values.</p>
                *         <p>You can use this action up to 5 times per second, per account. A user pool can have as
                *             many as 50 tags.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes the specified tags from an Amazon Cognito user pool. You can use this action up to 5
                *             times per second, per account.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Provides the feedback for an authentication event, whether it was from a valid user or
                *             not. This feedback is used for improving the risk evaluation decision for the user pool
                *             as part of Amazon Cognito advanced security.</p>
                */
            updateAuthEventFeedback(args: UpdateAuthEventFeedbackCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAuthEventFeedbackCommandOutput>;
            updateAuthEventFeedback(args: UpdateAuthEventFeedbackCommandInput, cb: (err: any, data?: UpdateAuthEventFeedbackCommandOutput) => void): void;
            updateAuthEventFeedback(args: UpdateAuthEventFeedbackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAuthEventFeedbackCommandOutput) => void): void;
            /**
                * <p>Updates the device status.</p>
                */
            updateDeviceStatus(args: UpdateDeviceStatusCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDeviceStatusCommandOutput>;
            updateDeviceStatus(args: UpdateDeviceStatusCommandInput, cb: (err: any, data?: UpdateDeviceStatusCommandOutput) => void): void;
            updateDeviceStatus(args: UpdateDeviceStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDeviceStatusCommandOutput) => void): void;
            /**
                * <p>Updates the specified group with the specified attributes.</p>
                *         <p>Calling this action requires developer credentials.</p>
                */
            updateGroup(args: UpdateGroupCommandInput, options?: __HttpHandlerOptions): Promise<UpdateGroupCommandOutput>;
            updateGroup(args: UpdateGroupCommandInput, cb: (err: any, data?: UpdateGroupCommandOutput) => void): void;
            updateGroup(args: UpdateGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateGroupCommandOutput) => void): void;
            /**
                * <p>Updates IdP information for a user pool.</p>
                */
            updateIdentityProvider(args: UpdateIdentityProviderCommandInput, options?: __HttpHandlerOptions): Promise<UpdateIdentityProviderCommandOutput>;
            updateIdentityProvider(args: UpdateIdentityProviderCommandInput, cb: (err: any, data?: UpdateIdentityProviderCommandOutput) => void): void;
            updateIdentityProvider(args: UpdateIdentityProviderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateIdentityProviderCommandOutput) => void): void;
            /**
                * <p>Updates the name and scopes of resource server. All other fields are read-only.</p>
                *         <important>
                *             <p>If you don't provide a value for an attribute, it is set to the default
                *                 value.</p>
                *         </important>
                */
            updateResourceServer(args: UpdateResourceServerCommandInput, options?: __HttpHandlerOptions): Promise<UpdateResourceServerCommandOutput>;
            updateResourceServer(args: UpdateResourceServerCommandInput, cb: (err: any, data?: UpdateResourceServerCommandOutput) => void): void;
            updateResourceServer(args: UpdateResourceServerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateResourceServerCommandOutput) => void): void;
            /**
                * <p>Allows a user to update a specific attribute (one at a time).</p>
                *
                *          <note>
                *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
                *                 require you to register an origination phone number before you can send SMS messages
                *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
                *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
                *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
                *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
                *                 in.</p>
                *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
                *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
                *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
                *                         mode</a>
                *                </i>, you can send messages only to verified phone
                *                 numbers. After you test your app while in the sandbox environment, you can move out
                *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
                *                     Developer Guide</i>.</p>
                *          </note>
                */
            updateUserAttributes(args: UpdateUserAttributesCommandInput, options?: __HttpHandlerOptions): Promise<UpdateUserAttributesCommandOutput>;
            updateUserAttributes(args: UpdateUserAttributesCommandInput, cb: (err: any, data?: UpdateUserAttributesCommandOutput) => void): void;
            updateUserAttributes(args: UpdateUserAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateUserAttributesCommandOutput) => void): void;
            /**
                * <p>Updates the specified user pool with the specified attributes. You can get a list of
                *             the current user pool settings using <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPool.html">DescribeUserPool</a>. If you don't provide a value for an attribute, it will be
                *             set to the default value.
                *         </p>
                *
                *          <note>
                *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
                *                 require you to register an origination phone number before you can send SMS messages
                *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
                *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
                *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
                *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
                *                 in.</p>
                *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
                *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
                *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
                *                         mode</a>
                *                </i>, you can send messages only to verified phone
                *                 numbers. After you test your app while in the sandbox environment, you can move out
                *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
                *                     Developer Guide</i>.</p>
                *          </note>
                */
            updateUserPool(args: UpdateUserPoolCommandInput, options?: __HttpHandlerOptions): Promise<UpdateUserPoolCommandOutput>;
            updateUserPool(args: UpdateUserPoolCommandInput, cb: (err: any, data?: UpdateUserPoolCommandOutput) => void): void;
            updateUserPool(args: UpdateUserPoolCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateUserPoolCommandOutput) => void): void;
            /**
                * <p>Updates the specified user pool app client with the specified attributes. You can get
                *             a list of the current user pool app client settings using <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPoolClient.html">DescribeUserPoolClient</a>.</p>
                *         <important>
                *             <p>If you don't provide a value for an attribute, it will be set to the default
                *                 value.</p>
                *         </important>
                *         <p>You can also use this operation to enable token revocation for user pool clients. For
                *             more information about revoking tokens, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html">RevokeToken</a>.</p>
                */
            updateUserPoolClient(args: UpdateUserPoolClientCommandInput, options?: __HttpHandlerOptions): Promise<UpdateUserPoolClientCommandOutput>;
            updateUserPoolClient(args: UpdateUserPoolClientCommandInput, cb: (err: any, data?: UpdateUserPoolClientCommandOutput) => void): void;
            updateUserPoolClient(args: UpdateUserPoolClientCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateUserPoolClientCommandOutput) => void): void;
            /**
                * <p>Updates the Secure Sockets Layer (SSL) certificate for the custom domain for your user
                *             pool.</p>
                *         <p>You can use this operation to provide the Amazon Resource Name (ARN) of a new
                *             certificate to Amazon Cognito. You can't use it to change the domain for a user pool.</p>
                *         <p>A custom domain is used to host the Amazon Cognito hosted UI, which provides sign-up and
                *             sign-in pages for your application. When you set up a custom domain, you provide a
                *             certificate that you manage with Certificate Manager (ACM). When necessary, you can use this
                *             operation to change the certificate that you applied to your custom domain.</p>
                *         <p>Usually, this is unnecessary following routine certificate renewal with ACM. When
                *             you renew your existing certificate in ACM, the ARN for your certificate remains the
                *             same, and your custom domain uses the new certificate automatically.</p>
                *         <p>However, if you replace your existing certificate with a new one, ACM gives the new
                *             certificate a new ARN. To apply the new certificate to your custom domain, you must
                *             provide this ARN to Amazon Cognito.</p>
                *         <p>When you add your new certificate in ACM, you must choose US East (N. Virginia) as
                *             the Amazon Web Services Region.</p>
                *         <p>After you submit your request, Amazon Cognito requires up to 1 hour to distribute your new
                *             certificate to your custom domain.</p>
                *         <p>For more information about adding a custom domain to your user pool, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html">Using Your Own Domain for the Hosted UI</a>.</p>
                */
            updateUserPoolDomain(args: UpdateUserPoolDomainCommandInput, options?: __HttpHandlerOptions): Promise<UpdateUserPoolDomainCommandOutput>;
            updateUserPoolDomain(args: UpdateUserPoolDomainCommandInput, cb: (err: any, data?: UpdateUserPoolDomainCommandOutput) => void): void;
            updateUserPoolDomain(args: UpdateUserPoolDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateUserPoolDomainCommandOutput) => void): void;
            /**
                * <p>Use this API to register a user's entered time-based one-time password (TOTP) code and
                *             mark the user's software token MFA status as "verified" if successful. The request takes
                *             an access token or a session string, but not both.</p>
                */
            verifySoftwareToken(args: VerifySoftwareTokenCommandInput, options?: __HttpHandlerOptions): Promise<VerifySoftwareTokenCommandOutput>;
            verifySoftwareToken(args: VerifySoftwareTokenCommandInput, cb: (err: any, data?: VerifySoftwareTokenCommandOutput) => void): void;
            verifySoftwareToken(args: VerifySoftwareTokenCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: VerifySoftwareTokenCommandOutput) => void): void;
            /**
                * <p>Verifies the specified user attributes in the user pool.</p>
                *         <p>
                *             If your user pool requires verification before Amazon Cognito updates the attribute value,
                *             VerifyUserAttribute updates the affected attribute to its pending value. For more information,
                *             see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UserAttributeUpdateSettingsType.html">
                *             UserAttributeUpdateSettingsType</a>.
                *         </p>
                */
            verifyUserAttribute(args: VerifyUserAttributeCommandInput, options?: __HttpHandlerOptions): Promise<VerifyUserAttributeCommandOutput>;
            verifyUserAttribute(args: VerifyUserAttributeCommandInput, cb: (err: any, data?: VerifyUserAttributeCommandOutput) => void): void;
            verifyUserAttribute(args: VerifyUserAttributeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: VerifyUserAttributeCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AddCustomAttributesCommandInput, AddCustomAttributesCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AddCustomAttributesCommand";
    import { AdminAddUserToGroupCommandInput, AdminAddUserToGroupCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminAddUserToGroupCommand";
    import { AdminConfirmSignUpCommandInput, AdminConfirmSignUpCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminConfirmSignUpCommand";
    import { AdminCreateUserCommandInput, AdminCreateUserCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminCreateUserCommand";
    import { AdminDeleteUserAttributesCommandInput, AdminDeleteUserAttributesCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminDeleteUserAttributesCommand";
    import { AdminDeleteUserCommandInput, AdminDeleteUserCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminDeleteUserCommand";
    import { AdminDisableProviderForUserCommandInput, AdminDisableProviderForUserCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminDisableProviderForUserCommand";
    import { AdminDisableUserCommandInput, AdminDisableUserCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminDisableUserCommand";
    import { AdminEnableUserCommandInput, AdminEnableUserCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminEnableUserCommand";
    import { AdminForgetDeviceCommandInput, AdminForgetDeviceCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminForgetDeviceCommand";
    import { AdminGetDeviceCommandInput, AdminGetDeviceCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminGetDeviceCommand";
    import { AdminGetUserCommandInput, AdminGetUserCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminGetUserCommand";
    import { AdminInitiateAuthCommandInput, AdminInitiateAuthCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminInitiateAuthCommand";
    import { AdminLinkProviderForUserCommandInput, AdminLinkProviderForUserCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminLinkProviderForUserCommand";
    import { AdminListDevicesCommandInput, AdminListDevicesCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminListDevicesCommand";
    import { AdminListGroupsForUserCommandInput, AdminListGroupsForUserCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminListGroupsForUserCommand";
    import { AdminListUserAuthEventsCommandInput, AdminListUserAuthEventsCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminListUserAuthEventsCommand";
    import { AdminRemoveUserFromGroupCommandInput, AdminRemoveUserFromGroupCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminRemoveUserFromGroupCommand";
    import { AdminResetUserPasswordCommandInput, AdminResetUserPasswordCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminResetUserPasswordCommand";
    import { AdminRespondToAuthChallengeCommandInput, AdminRespondToAuthChallengeCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminRespondToAuthChallengeCommand";
    import { AdminSetUserMFAPreferenceCommandInput, AdminSetUserMFAPreferenceCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminSetUserMFAPreferenceCommand";
    import { AdminSetUserPasswordCommandInput, AdminSetUserPasswordCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminSetUserPasswordCommand";
    import { AdminSetUserSettingsCommandInput, AdminSetUserSettingsCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminSetUserSettingsCommand";
    import { AdminUpdateAuthEventFeedbackCommandInput, AdminUpdateAuthEventFeedbackCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminUpdateAuthEventFeedbackCommand";
    import { AdminUpdateDeviceStatusCommandInput, AdminUpdateDeviceStatusCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminUpdateDeviceStatusCommand";
    import { AdminUpdateUserAttributesCommandInput, AdminUpdateUserAttributesCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminUpdateUserAttributesCommand";
    import { AdminUserGlobalSignOutCommandInput, AdminUserGlobalSignOutCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminUserGlobalSignOutCommand";
    import { AssociateSoftwareTokenCommandInput, AssociateSoftwareTokenCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AssociateSoftwareTokenCommand";
    import { ChangePasswordCommandInput, ChangePasswordCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ChangePasswordCommand";
    import { ConfirmDeviceCommandInput, ConfirmDeviceCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ConfirmDeviceCommand";
    import { ConfirmForgotPasswordCommandInput, ConfirmForgotPasswordCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ConfirmForgotPasswordCommand";
    import { ConfirmSignUpCommandInput, ConfirmSignUpCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ConfirmSignUpCommand";
    import { CreateGroupCommandInput, CreateGroupCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/CreateGroupCommand";
    import { CreateIdentityProviderCommandInput, CreateIdentityProviderCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/CreateIdentityProviderCommand";
    import { CreateResourceServerCommandInput, CreateResourceServerCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/CreateResourceServerCommand";
    import { CreateUserImportJobCommandInput, CreateUserImportJobCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/CreateUserImportJobCommand";
    import { CreateUserPoolClientCommandInput, CreateUserPoolClientCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/CreateUserPoolClientCommand";
    import { CreateUserPoolCommandInput, CreateUserPoolCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/CreateUserPoolCommand";
    import { CreateUserPoolDomainCommandInput, CreateUserPoolDomainCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/CreateUserPoolDomainCommand";
    import { DeleteGroupCommandInput, DeleteGroupCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteGroupCommand";
    import { DeleteIdentityProviderCommandInput, DeleteIdentityProviderCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteIdentityProviderCommand";
    import { DeleteResourceServerCommandInput, DeleteResourceServerCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteResourceServerCommand";
    import { DeleteUserAttributesCommandInput, DeleteUserAttributesCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteUserAttributesCommand";
    import { DeleteUserCommandInput, DeleteUserCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteUserCommand";
    import { DeleteUserPoolClientCommandInput, DeleteUserPoolClientCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteUserPoolClientCommand";
    import { DeleteUserPoolCommandInput, DeleteUserPoolCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteUserPoolCommand";
    import { DeleteUserPoolDomainCommandInput, DeleteUserPoolDomainCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteUserPoolDomainCommand";
    import { DescribeIdentityProviderCommandInput, DescribeIdentityProviderCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DescribeIdentityProviderCommand";
    import { DescribeResourceServerCommandInput, DescribeResourceServerCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DescribeResourceServerCommand";
    import { DescribeRiskConfigurationCommandInput, DescribeRiskConfigurationCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DescribeRiskConfigurationCommand";
    import { DescribeUserImportJobCommandInput, DescribeUserImportJobCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DescribeUserImportJobCommand";
    import { DescribeUserPoolClientCommandInput, DescribeUserPoolClientCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DescribeUserPoolClientCommand";
    import { DescribeUserPoolCommandInput, DescribeUserPoolCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DescribeUserPoolCommand";
    import { DescribeUserPoolDomainCommandInput, DescribeUserPoolDomainCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DescribeUserPoolDomainCommand";
    import { ForgetDeviceCommandInput, ForgetDeviceCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ForgetDeviceCommand";
    import { ForgotPasswordCommandInput, ForgotPasswordCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ForgotPasswordCommand";
    import { GetCSVHeaderCommandInput, GetCSVHeaderCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetCSVHeaderCommand";
    import { GetDeviceCommandInput, GetDeviceCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetDeviceCommand";
    import { GetGroupCommandInput, GetGroupCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetGroupCommand";
    import { GetIdentityProviderByIdentifierCommandInput, GetIdentityProviderByIdentifierCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetIdentityProviderByIdentifierCommand";
    import { GetSigningCertificateCommandInput, GetSigningCertificateCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetSigningCertificateCommand";
    import { GetUICustomizationCommandInput, GetUICustomizationCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetUICustomizationCommand";
    import { GetUserAttributeVerificationCodeCommandInput, GetUserAttributeVerificationCodeCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetUserAttributeVerificationCodeCommand";
    import { GetUserCommandInput, GetUserCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetUserCommand";
    import { GetUserPoolMfaConfigCommandInput, GetUserPoolMfaConfigCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetUserPoolMfaConfigCommand";
    import { GlobalSignOutCommandInput, GlobalSignOutCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GlobalSignOutCommand";
    import { InitiateAuthCommandInput, InitiateAuthCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/InitiateAuthCommand";
    import { ListDevicesCommandInput, ListDevicesCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListDevicesCommand";
    import { ListGroupsCommandInput, ListGroupsCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListGroupsCommand";
    import { ListIdentityProvidersCommandInput, ListIdentityProvidersCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListIdentityProvidersCommand";
    import { ListResourceServersCommandInput, ListResourceServersCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListResourceServersCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListTagsForResourceCommand";
    import { ListUserImportJobsCommandInput, ListUserImportJobsCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListUserImportJobsCommand";
    import { ListUserPoolClientsCommandInput, ListUserPoolClientsCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListUserPoolClientsCommand";
    import { ListUserPoolsCommandInput, ListUserPoolsCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListUserPoolsCommand";
    import { ListUsersCommandInput, ListUsersCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListUsersCommand";
    import { ListUsersInGroupCommandInput, ListUsersInGroupCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListUsersInGroupCommand";
    import { ResendConfirmationCodeCommandInput, ResendConfirmationCodeCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ResendConfirmationCodeCommand";
    import { RespondToAuthChallengeCommandInput, RespondToAuthChallengeCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/RespondToAuthChallengeCommand";
    import { RevokeTokenCommandInput, RevokeTokenCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/RevokeTokenCommand";
    import { SetRiskConfigurationCommandInput, SetRiskConfigurationCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/SetRiskConfigurationCommand";
    import { SetUICustomizationCommandInput, SetUICustomizationCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/SetUICustomizationCommand";
    import { SetUserMFAPreferenceCommandInput, SetUserMFAPreferenceCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/SetUserMFAPreferenceCommand";
    import { SetUserPoolMfaConfigCommandInput, SetUserPoolMfaConfigCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/SetUserPoolMfaConfigCommand";
    import { SetUserSettingsCommandInput, SetUserSettingsCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/SetUserSettingsCommand";
    import { SignUpCommandInput, SignUpCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/SignUpCommand";
    import { StartUserImportJobCommandInput, StartUserImportJobCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/StartUserImportJobCommand";
    import { StopUserImportJobCommandInput, StopUserImportJobCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/StopUserImportJobCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UntagResourceCommand";
    import { UpdateAuthEventFeedbackCommandInput, UpdateAuthEventFeedbackCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateAuthEventFeedbackCommand";
    import { UpdateDeviceStatusCommandInput, UpdateDeviceStatusCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateDeviceStatusCommand";
    import { UpdateGroupCommandInput, UpdateGroupCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateGroupCommand";
    import { UpdateIdentityProviderCommandInput, UpdateIdentityProviderCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateIdentityProviderCommand";
    import { UpdateResourceServerCommandInput, UpdateResourceServerCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateResourceServerCommand";
    import { UpdateUserAttributesCommandInput, UpdateUserAttributesCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateUserAttributesCommand";
    import { UpdateUserPoolClientCommandInput, UpdateUserPoolClientCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateUserPoolClientCommand";
    import { UpdateUserPoolCommandInput, UpdateUserPoolCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateUserPoolCommand";
    import { UpdateUserPoolDomainCommandInput, UpdateUserPoolDomainCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateUserPoolDomainCommand";
    import { VerifySoftwareTokenCommandInput, VerifySoftwareTokenCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/VerifySoftwareTokenCommand";
    import { VerifyUserAttributeCommandInput, VerifyUserAttributeCommandOutput } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/VerifyUserAttributeCommand";
    export type ServiceInputTypes = AddCustomAttributesCommandInput | AdminAddUserToGroupCommandInput | AdminConfirmSignUpCommandInput | AdminCreateUserCommandInput | AdminDeleteUserAttributesCommandInput | AdminDeleteUserCommandInput | AdminDisableProviderForUserCommandInput | AdminDisableUserCommandInput | AdminEnableUserCommandInput | AdminForgetDeviceCommandInput | AdminGetDeviceCommandInput | AdminGetUserCommandInput | AdminInitiateAuthCommandInput | AdminLinkProviderForUserCommandInput | AdminListDevicesCommandInput | AdminListGroupsForUserCommandInput | AdminListUserAuthEventsCommandInput | AdminRemoveUserFromGroupCommandInput | AdminResetUserPasswordCommandInput | AdminRespondToAuthChallengeCommandInput | AdminSetUserMFAPreferenceCommandInput | AdminSetUserPasswordCommandInput | AdminSetUserSettingsCommandInput | AdminUpdateAuthEventFeedbackCommandInput | AdminUpdateDeviceStatusCommandInput | AdminUpdateUserAttributesCommandInput | AdminUserGlobalSignOutCommandInput | AssociateSoftwareTokenCommandInput | ChangePasswordCommandInput | ConfirmDeviceCommandInput | ConfirmForgotPasswordCommandInput | ConfirmSignUpCommandInput | CreateGroupCommandInput | CreateIdentityProviderCommandInput | CreateResourceServerCommandInput | CreateUserImportJobCommandInput | CreateUserPoolClientCommandInput | CreateUserPoolCommandInput | CreateUserPoolDomainCommandInput | DeleteGroupCommandInput | DeleteIdentityProviderCommandInput | DeleteResourceServerCommandInput | DeleteUserAttributesCommandInput | DeleteUserCommandInput | DeleteUserPoolClientCommandInput | DeleteUserPoolCommandInput | DeleteUserPoolDomainCommandInput | DescribeIdentityProviderCommandInput | DescribeResourceServerCommandInput | DescribeRiskConfigurationCommandInput | DescribeUserImportJobCommandInput | DescribeUserPoolClientCommandInput | DescribeUserPoolCommandInput | DescribeUserPoolDomainCommandInput | ForgetDeviceCommandInput | ForgotPasswordCommandInput | GetCSVHeaderCommandInput | GetDeviceCommandInput | GetGroupCommandInput | GetIdentityProviderByIdentifierCommandInput | GetSigningCertificateCommandInput | GetUICustomizationCommandInput | GetUserAttributeVerificationCodeCommandInput | GetUserCommandInput | GetUserPoolMfaConfigCommandInput | GlobalSignOutCommandInput | InitiateAuthCommandInput | ListDevicesCommandInput | ListGroupsCommandInput | ListIdentityProvidersCommandInput | ListResourceServersCommandInput | ListTagsForResourceCommandInput | ListUserImportJobsCommandInput | ListUserPoolClientsCommandInput | ListUserPoolsCommandInput | ListUsersCommandInput | ListUsersInGroupCommandInput | ResendConfirmationCodeCommandInput | RespondToAuthChallengeCommandInput | RevokeTokenCommandInput | SetRiskConfigurationCommandInput | SetUICustomizationCommandInput | SetUserMFAPreferenceCommandInput | SetUserPoolMfaConfigCommandInput | SetUserSettingsCommandInput | SignUpCommandInput | StartUserImportJobCommandInput | StopUserImportJobCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateAuthEventFeedbackCommandInput | UpdateDeviceStatusCommandInput | UpdateGroupCommandInput | UpdateIdentityProviderCommandInput | UpdateResourceServerCommandInput | UpdateUserAttributesCommandInput | UpdateUserPoolClientCommandInput | UpdateUserPoolCommandInput | UpdateUserPoolDomainCommandInput | VerifySoftwareTokenCommandInput | VerifyUserAttributeCommandInput;
    export type ServiceOutputTypes = AddCustomAttributesCommandOutput | AdminAddUserToGroupCommandOutput | AdminConfirmSignUpCommandOutput | AdminCreateUserCommandOutput | AdminDeleteUserAttributesCommandOutput | AdminDeleteUserCommandOutput | AdminDisableProviderForUserCommandOutput | AdminDisableUserCommandOutput | AdminEnableUserCommandOutput | AdminForgetDeviceCommandOutput | AdminGetDeviceCommandOutput | AdminGetUserCommandOutput | AdminInitiateAuthCommandOutput | AdminLinkProviderForUserCommandOutput | AdminListDevicesCommandOutput | AdminListGroupsForUserCommandOutput | AdminListUserAuthEventsCommandOutput | AdminRemoveUserFromGroupCommandOutput | AdminResetUserPasswordCommandOutput | AdminRespondToAuthChallengeCommandOutput | AdminSetUserMFAPreferenceCommandOutput | AdminSetUserPasswordCommandOutput | AdminSetUserSettingsCommandOutput | AdminUpdateAuthEventFeedbackCommandOutput | AdminUpdateDeviceStatusCommandOutput | AdminUpdateUserAttributesCommandOutput | AdminUserGlobalSignOutCommandOutput | AssociateSoftwareTokenCommandOutput | ChangePasswordCommandOutput | ConfirmDeviceCommandOutput | ConfirmForgotPasswordCommandOutput | ConfirmSignUpCommandOutput | CreateGroupCommandOutput | CreateIdentityProviderCommandOutput | CreateResourceServerCommandOutput | CreateUserImportJobCommandOutput | CreateUserPoolClientCommandOutput | CreateUserPoolCommandOutput | CreateUserPoolDomainCommandOutput | DeleteGroupCommandOutput | DeleteIdentityProviderCommandOutput | DeleteResourceServerCommandOutput | DeleteUserAttributesCommandOutput | DeleteUserCommandOutput | DeleteUserPoolClientCommandOutput | DeleteUserPoolCommandOutput | DeleteUserPoolDomainCommandOutput | DescribeIdentityProviderCommandOutput | DescribeResourceServerCommandOutput | DescribeRiskConfigurationCommandOutput | DescribeUserImportJobCommandOutput | DescribeUserPoolClientCommandOutput | DescribeUserPoolCommandOutput | DescribeUserPoolDomainCommandOutput | ForgetDeviceCommandOutput | ForgotPasswordCommandOutput | GetCSVHeaderCommandOutput | GetDeviceCommandOutput | GetGroupCommandOutput | GetIdentityProviderByIdentifierCommandOutput | GetSigningCertificateCommandOutput | GetUICustomizationCommandOutput | GetUserAttributeVerificationCodeCommandOutput | GetUserCommandOutput | GetUserPoolMfaConfigCommandOutput | GlobalSignOutCommandOutput | InitiateAuthCommandOutput | ListDevicesCommandOutput | ListGroupsCommandOutput | ListIdentityProvidersCommandOutput | ListResourceServersCommandOutput | ListTagsForResourceCommandOutput | ListUserImportJobsCommandOutput | ListUserPoolClientsCommandOutput | ListUserPoolsCommandOutput | ListUsersCommandOutput | ListUsersInGroupCommandOutput | ResendConfirmationCodeCommandOutput | RespondToAuthChallengeCommandOutput | RevokeTokenCommandOutput | SetRiskConfigurationCommandOutput | SetUICustomizationCommandOutput | SetUserMFAPreferenceCommandOutput | SetUserPoolMfaConfigCommandOutput | SetUserSettingsCommandOutput | SignUpCommandOutput | StartUserImportJobCommandOutput | StopUserImportJobCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateAuthEventFeedbackCommandOutput | UpdateDeviceStatusCommandOutput | UpdateGroupCommandOutput | UpdateIdentityProviderCommandOutput | UpdateResourceServerCommandOutput | UpdateUserAttributesCommandOutput | UpdateUserPoolClientCommandOutput | UpdateUserPoolCommandOutput | UpdateUserPoolDomainCommandOutput | VerifySoftwareTokenCommandOutput | VerifyUserAttributeCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type CognitoIdentityProviderClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of CognitoIdentityProviderClient class constructor that set the region, credentials and other options.
        */
    export interface CognitoIdentityProviderClientConfig extends CognitoIdentityProviderClientConfigType {
    }
    type CognitoIdentityProviderClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of CognitoIdentityProviderClient class. This is resolved and normalized from the {@link CognitoIdentityProviderClientConfig | constructor configuration interface}.
        */
    export interface CognitoIdentityProviderClientResolvedConfig extends CognitoIdentityProviderClientResolvedConfigType {
    }
    /**
        * <p>Using the Amazon Cognito user pools API, you can create a user pool to manage directories and
        *             users. You can authenticate a user to obtain tokens related to user identity and access
        *             policies.</p>
        *         <p>This API reference provides information about user pools in Amazon Cognito user pools.</p>
        *         <p>For more information, see the <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/what-is-amazon-cognito.html">Amazon Cognito
        *                 Documentation</a>.</p>
        */
    export class CognitoIdentityProviderClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, CognitoIdentityProviderClientResolvedConfig> {
            /**
                * The resolved configuration of CognitoIdentityProviderClient class. This is resolved and normalized from the {@link CognitoIdentityProviderClientConfig | constructor configuration interface}.
                */
            readonly config: CognitoIdentityProviderClientResolvedConfig;
            constructor(configuration: CognitoIdentityProviderClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AddCustomAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AddCustomAttributesRequest, AddCustomAttributesResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AddCustomAttributesCommandInput extends AddCustomAttributesRequest {
    }
    export interface AddCustomAttributesCommandOutput extends AddCustomAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Adds additional user attributes to the user pool schema.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AddCustomAttributesCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AddCustomAttributesCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AddCustomAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddCustomAttributesCommandInput} for command's `input` shape.
        * @see {@link AddCustomAttributesCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AddCustomAttributesCommand extends $Command<AddCustomAttributesCommandInput, AddCustomAttributesCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AddCustomAttributesCommandInput;
            constructor(input: AddCustomAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddCustomAttributesCommandInput, AddCustomAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminAddUserToGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminAddUserToGroupRequest } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminAddUserToGroupCommandInput extends AdminAddUserToGroupRequest {
    }
    export interface AdminAddUserToGroupCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds the specified user to the specified group.</p>
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminAddUserToGroupCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminAddUserToGroupCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminAddUserToGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminAddUserToGroupCommandInput} for command's `input` shape.
        * @see {@link AdminAddUserToGroupCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminAddUserToGroupCommand extends $Command<AdminAddUserToGroupCommandInput, AdminAddUserToGroupCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminAddUserToGroupCommandInput;
            constructor(input: AdminAddUserToGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminAddUserToGroupCommandInput, AdminAddUserToGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminConfirmSignUpCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminConfirmSignUpRequest, AdminConfirmSignUpResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminConfirmSignUpCommandInput extends AdminConfirmSignUpRequest {
    }
    export interface AdminConfirmSignUpCommandOutput extends AdminConfirmSignUpResponse, __MetadataBearer {
    }
    /**
        * <p>Confirms user registration as an admin without using a confirmation code. Works on any
        *             user.</p>
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminConfirmSignUpCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminConfirmSignUpCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminConfirmSignUpCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminConfirmSignUpCommandInput} for command's `input` shape.
        * @see {@link AdminConfirmSignUpCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminConfirmSignUpCommand extends $Command<AdminConfirmSignUpCommandInput, AdminConfirmSignUpCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminConfirmSignUpCommandInput;
            constructor(input: AdminConfirmSignUpCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminConfirmSignUpCommandInput, AdminConfirmSignUpCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminCreateUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminCreateUserRequest, AdminCreateUserResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminCreateUserCommandInput extends AdminCreateUserRequest {
    }
    export interface AdminCreateUserCommandOutput extends AdminCreateUserResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new user in the specified user pool.</p>
        *         <p>If <code>MessageAction</code> isn't set, the default is to send a welcome message via
        *             email or phone (SMS).</p>
        *
        *          <note>
        *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
        *                 require you to register an origination phone number before you can send SMS messages
        *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
        *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
        *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
        *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
        *                 in.</p>
        *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
        *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
        *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
        *                         mode</a>
        *                </i>, you can send messages only to verified phone
        *                 numbers. After you test your app while in the sandbox environment, you can move out
        *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
        *                     Developer Guide</i>.</p>
        *          </note>
        *
        *         <p>This message is based on a template that you configured in your call to create or
        *             update a user pool. This template includes your custom sign-up instructions and
        *             placeholders for user name and temporary password.</p>
        *         <p>Alternatively, you can call <code>AdminCreateUser</code> with <code>SUPPRESS</code>
        *             for the <code>MessageAction</code> parameter, and Amazon Cognito won't send any email. </p>
        *         <p>In either case, the user will be in the <code>FORCE_CHANGE_PASSWORD</code> state until
        *             they sign in and change their password.</p>
        *         <p>
        *             <code>AdminCreateUser</code> requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminCreateUserCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminCreateUserCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminCreateUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminCreateUserCommandInput} for command's `input` shape.
        * @see {@link AdminCreateUserCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminCreateUserCommand extends $Command<AdminCreateUserCommandInput, AdminCreateUserCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminCreateUserCommandInput;
            constructor(input: AdminCreateUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminCreateUserCommandInput, AdminCreateUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminDeleteUserAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminDeleteUserAttributesRequest, AdminDeleteUserAttributesResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminDeleteUserAttributesCommandInput extends AdminDeleteUserAttributesRequest {
    }
    export interface AdminDeleteUserAttributesCommandOutput extends AdminDeleteUserAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the user attributes in a user pool as an administrator. Works on any
        *             user.</p>
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminDeleteUserAttributesCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminDeleteUserAttributesCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminDeleteUserAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminDeleteUserAttributesCommandInput} for command's `input` shape.
        * @see {@link AdminDeleteUserAttributesCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminDeleteUserAttributesCommand extends $Command<AdminDeleteUserAttributesCommandInput, AdminDeleteUserAttributesCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminDeleteUserAttributesCommandInput;
            constructor(input: AdminDeleteUserAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminDeleteUserAttributesCommandInput, AdminDeleteUserAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminDeleteUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminDeleteUserRequest } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminDeleteUserCommandInput extends AdminDeleteUserRequest {
    }
    export interface AdminDeleteUserCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a user as an administrator. Works on any user.</p>
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminDeleteUserCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminDeleteUserCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminDeleteUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminDeleteUserCommandInput} for command's `input` shape.
        * @see {@link AdminDeleteUserCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminDeleteUserCommand extends $Command<AdminDeleteUserCommandInput, AdminDeleteUserCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminDeleteUserCommandInput;
            constructor(input: AdminDeleteUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminDeleteUserCommandInput, AdminDeleteUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminDisableProviderForUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminDisableProviderForUserRequest, AdminDisableProviderForUserResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminDisableProviderForUserCommandInput extends AdminDisableProviderForUserRequest {
    }
    export interface AdminDisableProviderForUserCommandOutput extends AdminDisableProviderForUserResponse, __MetadataBearer {
    }
    /**
        * <p>Prevents the user from signing in with the specified external (SAML or social)
        *             identity provider (IdP). If the user that you want to deactivate is a Amazon Cognito user pools
        *             native username + password user, they can't use their password to sign in. If the user
        *             to deactivate is a linked external IdP user, any link between that user and an existing
        *             user is removed. When the external user signs in again, and the user is no longer
        *             attached to the previously linked <code>DestinationUser</code>, the user must create a
        *             new user account. See <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminLinkProviderForUser.html">AdminLinkProviderForUser</a>.</p>
        *         <p>This action is enabled only for admin access and requires developer
        *             credentials.</p>
        *         <p>The <code>ProviderName</code> must match the value specified when creating an IdP for
        *             the pool. </p>
        *         <p>To deactivate a native username + password user, the <code>ProviderName</code> value
        *             must be <code>Cognito</code> and the <code>ProviderAttributeName</code> must be
        *                 <code>Cognito_Subject</code>. The <code>ProviderAttributeValue</code> must be the
        *             name that is used in the user pool for the user.</p>
        *         <p>The <code>ProviderAttributeName</code> must always be <code>Cognito_Subject</code> for
        *             social IdPs. The <code>ProviderAttributeValue</code> must always be the exact subject
        *             that was used when the user was originally linked as a source user.</p>
        *         <p>For de-linking a SAML identity, there are two scenarios. If the linked identity has
        *             not yet been used to sign in, the <code>ProviderAttributeName</code> and
        *                 <code>ProviderAttributeValue</code> must be the same values that were used for the
        *                 <code>SourceUser</code> when the identities were originally linked using <code>
        *                 AdminLinkProviderForUser</code> call. (If the linking was done with
        *                 <code>ProviderAttributeName</code> set to <code>Cognito_Subject</code>, the same
        *             applies here). However, if the user has already signed in, the
        *                 <code>ProviderAttributeName</code> must be <code>Cognito_Subject</code> and
        *                 <code>ProviderAttributeValue</code> must be the subject of the SAML
        *             assertion.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminDisableProviderForUserCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminDisableProviderForUserCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminDisableProviderForUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminDisableProviderForUserCommandInput} for command's `input` shape.
        * @see {@link AdminDisableProviderForUserCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminDisableProviderForUserCommand extends $Command<AdminDisableProviderForUserCommandInput, AdminDisableProviderForUserCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminDisableProviderForUserCommandInput;
            constructor(input: AdminDisableProviderForUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminDisableProviderForUserCommandInput, AdminDisableProviderForUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminDisableUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminDisableUserRequest, AdminDisableUserResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminDisableUserCommandInput extends AdminDisableUserRequest {
    }
    export interface AdminDisableUserCommandOutput extends AdminDisableUserResponse, __MetadataBearer {
    }
    /**
        * <p>Disables the specified user.</p>
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminDisableUserCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminDisableUserCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminDisableUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminDisableUserCommandInput} for command's `input` shape.
        * @see {@link AdminDisableUserCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminDisableUserCommand extends $Command<AdminDisableUserCommandInput, AdminDisableUserCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminDisableUserCommandInput;
            constructor(input: AdminDisableUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminDisableUserCommandInput, AdminDisableUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminEnableUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminEnableUserRequest, AdminEnableUserResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminEnableUserCommandInput extends AdminEnableUserRequest {
    }
    export interface AdminEnableUserCommandOutput extends AdminEnableUserResponse, __MetadataBearer {
    }
    /**
        * <p>Enables the specified user as an administrator. Works on any user.</p>
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminEnableUserCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminEnableUserCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminEnableUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminEnableUserCommandInput} for command's `input` shape.
        * @see {@link AdminEnableUserCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminEnableUserCommand extends $Command<AdminEnableUserCommandInput, AdminEnableUserCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminEnableUserCommandInput;
            constructor(input: AdminEnableUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminEnableUserCommandInput, AdminEnableUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminForgetDeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminForgetDeviceRequest } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminForgetDeviceCommandInput extends AdminForgetDeviceRequest {
    }
    export interface AdminForgetDeviceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Forgets the device, as an administrator.</p>
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminForgetDeviceCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminForgetDeviceCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminForgetDeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminForgetDeviceCommandInput} for command's `input` shape.
        * @see {@link AdminForgetDeviceCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminForgetDeviceCommand extends $Command<AdminForgetDeviceCommandInput, AdminForgetDeviceCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminForgetDeviceCommandInput;
            constructor(input: AdminForgetDeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminForgetDeviceCommandInput, AdminForgetDeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminGetDeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminGetDeviceRequest, AdminGetDeviceResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminGetDeviceCommandInput extends AdminGetDeviceRequest {
    }
    export interface AdminGetDeviceCommandOutput extends AdminGetDeviceResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the device, as an administrator.</p>
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminGetDeviceCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminGetDeviceCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminGetDeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminGetDeviceCommandInput} for command's `input` shape.
        * @see {@link AdminGetDeviceCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminGetDeviceCommand extends $Command<AdminGetDeviceCommandInput, AdminGetDeviceCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminGetDeviceCommandInput;
            constructor(input: AdminGetDeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminGetDeviceCommandInput, AdminGetDeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminGetUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminGetUserRequest, AdminGetUserResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminGetUserCommandInput extends AdminGetUserRequest {
    }
    export interface AdminGetUserCommandOutput extends AdminGetUserResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the specified user by user name in a user pool as an administrator. Works on any
        *             user.</p>
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminGetUserCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminGetUserCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminGetUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminGetUserCommandInput} for command's `input` shape.
        * @see {@link AdminGetUserCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminGetUserCommand extends $Command<AdminGetUserCommandInput, AdminGetUserCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminGetUserCommandInput;
            constructor(input: AdminGetUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminGetUserCommandInput, AdminGetUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminInitiateAuthCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminInitiateAuthRequest, AdminInitiateAuthResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminInitiateAuthCommandInput extends AdminInitiateAuthRequest {
    }
    export interface AdminInitiateAuthCommandOutput extends AdminInitiateAuthResponse, __MetadataBearer {
    }
    /**
        * <p>Initiates the authentication flow, as an administrator.</p>
        *
        *          <note>
        *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
        *                 require you to register an origination phone number before you can send SMS messages
        *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
        *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
        *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
        *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
        *                 in.</p>
        *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
        *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
        *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
        *                         mode</a>
        *                </i>, you can send messages only to verified phone
        *                 numbers. After you test your app while in the sandbox environment, you can move out
        *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
        *                     Developer Guide</i>.</p>
        *          </note>
        *
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminInitiateAuthCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminInitiateAuthCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminInitiateAuthCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminInitiateAuthCommandInput} for command's `input` shape.
        * @see {@link AdminInitiateAuthCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminInitiateAuthCommand extends $Command<AdminInitiateAuthCommandInput, AdminInitiateAuthCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminInitiateAuthCommandInput;
            constructor(input: AdminInitiateAuthCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminInitiateAuthCommandInput, AdminInitiateAuthCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminLinkProviderForUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminLinkProviderForUserRequest, AdminLinkProviderForUserResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminLinkProviderForUserCommandInput extends AdminLinkProviderForUserRequest {
    }
    export interface AdminLinkProviderForUserCommandOutput extends AdminLinkProviderForUserResponse, __MetadataBearer {
    }
    /**
        * <p>Links an existing user account in a user pool (<code>DestinationUser</code>) to an
        *             identity from an external IdP (<code>SourceUser</code>) based on a specified attribute
        *             name and value from the external IdP. This allows you to create a link from the existing
        *             user account to an external federated user identity that has not yet been used to sign
        *             in. You can then use the federated user identity to sign in as the existing user
        *             account. </p>
        *         <p> For example, if there is an existing user with a username and password, this API
        *             links that user to a federated user identity. When the user signs in with a federated
        *             user identity, they sign in as the existing user account.</p>
        *         <note>
        *             <p>The maximum number of federated identities linked to a user is five.</p>
        *         </note>
        *         <important>
        *             <p>Because this API allows a user with an external federated identity to sign in as
        *                 an existing user in the user pool, it is critical that it only be used with external
        *                 IdPs and provider attributes that have been trusted by the application owner.</p>
        *         </important>
        *
        *         <p>This action is administrative and requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminLinkProviderForUserCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminLinkProviderForUserCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminLinkProviderForUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminLinkProviderForUserCommandInput} for command's `input` shape.
        * @see {@link AdminLinkProviderForUserCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminLinkProviderForUserCommand extends $Command<AdminLinkProviderForUserCommandInput, AdminLinkProviderForUserCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminLinkProviderForUserCommandInput;
            constructor(input: AdminLinkProviderForUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminLinkProviderForUserCommandInput, AdminLinkProviderForUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminListDevicesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminListDevicesRequest, AdminListDevicesResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminListDevicesCommandInput extends AdminListDevicesRequest {
    }
    export interface AdminListDevicesCommandOutput extends AdminListDevicesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists devices, as an administrator.</p>
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminListDevicesCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminListDevicesCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminListDevicesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminListDevicesCommandInput} for command's `input` shape.
        * @see {@link AdminListDevicesCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminListDevicesCommand extends $Command<AdminListDevicesCommandInput, AdminListDevicesCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminListDevicesCommandInput;
            constructor(input: AdminListDevicesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminListDevicesCommandInput, AdminListDevicesCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminListGroupsForUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminListGroupsForUserRequest, AdminListGroupsForUserResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminListGroupsForUserCommandInput extends AdminListGroupsForUserRequest {
    }
    export interface AdminListGroupsForUserCommandOutput extends AdminListGroupsForUserResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the groups that the user belongs to.</p>
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminListGroupsForUserCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminListGroupsForUserCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminListGroupsForUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminListGroupsForUserCommandInput} for command's `input` shape.
        * @see {@link AdminListGroupsForUserCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminListGroupsForUserCommand extends $Command<AdminListGroupsForUserCommandInput, AdminListGroupsForUserCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminListGroupsForUserCommandInput;
            constructor(input: AdminListGroupsForUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminListGroupsForUserCommandInput, AdminListGroupsForUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminListUserAuthEventsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminListUserAuthEventsRequest, AdminListUserAuthEventsResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminListUserAuthEventsCommandInput extends AdminListUserAuthEventsRequest {
    }
    export interface AdminListUserAuthEventsCommandOutput extends AdminListUserAuthEventsResponse, __MetadataBearer {
    }
    /**
        * <p>A history of user activity and any risks detected as part of Amazon Cognito advanced
        *             security.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminListUserAuthEventsCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminListUserAuthEventsCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminListUserAuthEventsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminListUserAuthEventsCommandInput} for command's `input` shape.
        * @see {@link AdminListUserAuthEventsCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminListUserAuthEventsCommand extends $Command<AdminListUserAuthEventsCommandInput, AdminListUserAuthEventsCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminListUserAuthEventsCommandInput;
            constructor(input: AdminListUserAuthEventsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminListUserAuthEventsCommandInput, AdminListUserAuthEventsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminRemoveUserFromGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminRemoveUserFromGroupRequest } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminRemoveUserFromGroupCommandInput extends AdminRemoveUserFromGroupRequest {
    }
    export interface AdminRemoveUserFromGroupCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the specified user from the specified group.</p>
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminRemoveUserFromGroupCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminRemoveUserFromGroupCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminRemoveUserFromGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminRemoveUserFromGroupCommandInput} for command's `input` shape.
        * @see {@link AdminRemoveUserFromGroupCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminRemoveUserFromGroupCommand extends $Command<AdminRemoveUserFromGroupCommandInput, AdminRemoveUserFromGroupCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminRemoveUserFromGroupCommandInput;
            constructor(input: AdminRemoveUserFromGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminRemoveUserFromGroupCommandInput, AdminRemoveUserFromGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminResetUserPasswordCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminResetUserPasswordRequest, AdminResetUserPasswordResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminResetUserPasswordCommandInput extends AdminResetUserPasswordRequest {
    }
    export interface AdminResetUserPasswordCommandOutput extends AdminResetUserPasswordResponse, __MetadataBearer {
    }
    /**
        * <p>Resets the specified user's password in a user pool as an administrator. Works on any
        *             user.</p>
        *         <p>When a developer calls this API, the current password is invalidated, so it must be
        *             changed. If a user tries to sign in after the API is called, the app will get a
        *             PasswordResetRequiredException exception back and should direct the user down the flow
        *             to reset the password, which is the same as the forgot password flow. In addition, if
        *             the user pool has phone verification selected and a verified phone number exists for the
        *             user, or if email verification is selected and a verified email exists for the user,
        *             calling this API will also result in sending a message to the end user with the code to
        *             change their password.</p>
        *
        *          <note>
        *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
        *                 require you to register an origination phone number before you can send SMS messages
        *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
        *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
        *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
        *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
        *                 in.</p>
        *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
        *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
        *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
        *                         mode</a>
        *                </i>, you can send messages only to verified phone
        *                 numbers. After you test your app while in the sandbox environment, you can move out
        *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
        *                     Developer Guide</i>.</p>
        *          </note>
        *
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminResetUserPasswordCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminResetUserPasswordCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminResetUserPasswordCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminResetUserPasswordCommandInput} for command's `input` shape.
        * @see {@link AdminResetUserPasswordCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminResetUserPasswordCommand extends $Command<AdminResetUserPasswordCommandInput, AdminResetUserPasswordCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminResetUserPasswordCommandInput;
            constructor(input: AdminResetUserPasswordCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminResetUserPasswordCommandInput, AdminResetUserPasswordCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminRespondToAuthChallengeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminRespondToAuthChallengeRequest, AdminRespondToAuthChallengeResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminRespondToAuthChallengeCommandInput extends AdminRespondToAuthChallengeRequest {
    }
    export interface AdminRespondToAuthChallengeCommandOutput extends AdminRespondToAuthChallengeResponse, __MetadataBearer {
    }
    /**
        * <p>Responds to an authentication challenge, as an administrator.</p>
        *
        *          <note>
        *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
        *                 require you to register an origination phone number before you can send SMS messages
        *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
        *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
        *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
        *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
        *                 in.</p>
        *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
        *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
        *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
        *                         mode</a>
        *                </i>, you can send messages only to verified phone
        *                 numbers. After you test your app while in the sandbox environment, you can move out
        *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
        *                     Developer Guide</i>.</p>
        *          </note>
        *
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminRespondToAuthChallengeCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminRespondToAuthChallengeCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminRespondToAuthChallengeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminRespondToAuthChallengeCommandInput} for command's `input` shape.
        * @see {@link AdminRespondToAuthChallengeCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminRespondToAuthChallengeCommand extends $Command<AdminRespondToAuthChallengeCommandInput, AdminRespondToAuthChallengeCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminRespondToAuthChallengeCommandInput;
            constructor(input: AdminRespondToAuthChallengeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminRespondToAuthChallengeCommandInput, AdminRespondToAuthChallengeCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminSetUserMFAPreferenceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminSetUserMFAPreferenceRequest, AdminSetUserMFAPreferenceResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminSetUserMFAPreferenceCommandInput extends AdminSetUserMFAPreferenceRequest {
    }
    export interface AdminSetUserMFAPreferenceCommandOutput extends AdminSetUserMFAPreferenceResponse, __MetadataBearer {
    }
    /**
        * <p>The user's multi-factor authentication (MFA) preference, including which MFA options
        *             are activated, and if any are preferred. Only one factor can be set as preferred. The
        *             preferred MFA factor will be used to authenticate a user if multiple factors are
        *             activated. If multiple options are activated and no preference is set, a challenge to
        *             choose an MFA option will be returned during sign-in.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminSetUserMFAPreferenceCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminSetUserMFAPreferenceCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminSetUserMFAPreferenceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminSetUserMFAPreferenceCommandInput} for command's `input` shape.
        * @see {@link AdminSetUserMFAPreferenceCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminSetUserMFAPreferenceCommand extends $Command<AdminSetUserMFAPreferenceCommandInput, AdminSetUserMFAPreferenceCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminSetUserMFAPreferenceCommandInput;
            constructor(input: AdminSetUserMFAPreferenceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminSetUserMFAPreferenceCommandInput, AdminSetUserMFAPreferenceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminSetUserPasswordCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminSetUserPasswordRequest, AdminSetUserPasswordResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminSetUserPasswordCommandInput extends AdminSetUserPasswordRequest {
    }
    export interface AdminSetUserPasswordCommandOutput extends AdminSetUserPasswordResponse, __MetadataBearer {
    }
    /**
        * <p>Sets the specified user's password in a user pool as an administrator. Works on any
        *             user. </p>
        *         <p>The password can be temporary or permanent. If it is temporary, the user status enters
        *             the <code>FORCE_CHANGE_PASSWORD</code> state. When the user next tries to sign in, the
        *             InitiateAuth/AdminInitiateAuth response will contain the
        *                 <code>NEW_PASSWORD_REQUIRED</code> challenge. If the user doesn't sign in before it
        *             expires, the user won't be able to sign in, and an administrator must reset their
        *             password. </p>
        *         <p>Once the user has set a new password, or the password is permanent, the user status is
        *             set to <code>Confirmed</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminSetUserPasswordCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminSetUserPasswordCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminSetUserPasswordCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminSetUserPasswordCommandInput} for command's `input` shape.
        * @see {@link AdminSetUserPasswordCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminSetUserPasswordCommand extends $Command<AdminSetUserPasswordCommandInput, AdminSetUserPasswordCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminSetUserPasswordCommandInput;
            constructor(input: AdminSetUserPasswordCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminSetUserPasswordCommandInput, AdminSetUserPasswordCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminSetUserSettingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminSetUserSettingsRequest, AdminSetUserSettingsResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminSetUserSettingsCommandInput extends AdminSetUserSettingsRequest {
    }
    export interface AdminSetUserSettingsCommandOutput extends AdminSetUserSettingsResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             <i>This action is no longer supported.</i> You can use it to configure
        *             only SMS MFA. You can't use it to configure time-based one-time password (TOTP) software
        *             token MFA. To configure either type of MFA, use <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminSetUserMFAPreference.html">AdminSetUserMFAPreference</a> instead.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminSetUserSettingsCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminSetUserSettingsCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminSetUserSettingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminSetUserSettingsCommandInput} for command's `input` shape.
        * @see {@link AdminSetUserSettingsCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminSetUserSettingsCommand extends $Command<AdminSetUserSettingsCommandInput, AdminSetUserSettingsCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminSetUserSettingsCommandInput;
            constructor(input: AdminSetUserSettingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminSetUserSettingsCommandInput, AdminSetUserSettingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminUpdateAuthEventFeedbackCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminUpdateAuthEventFeedbackRequest, AdminUpdateAuthEventFeedbackResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminUpdateAuthEventFeedbackCommandInput extends AdminUpdateAuthEventFeedbackRequest {
    }
    export interface AdminUpdateAuthEventFeedbackCommandOutput extends AdminUpdateAuthEventFeedbackResponse, __MetadataBearer {
    }
    /**
        * <p>Provides feedback for an authentication event indicating if it was from a valid user.
        *             This feedback is used for improving the risk evaluation decision for the user pool as
        *             part of Amazon Cognito advanced security.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminUpdateAuthEventFeedbackCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminUpdateAuthEventFeedbackCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminUpdateAuthEventFeedbackCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminUpdateAuthEventFeedbackCommandInput} for command's `input` shape.
        * @see {@link AdminUpdateAuthEventFeedbackCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminUpdateAuthEventFeedbackCommand extends $Command<AdminUpdateAuthEventFeedbackCommandInput, AdminUpdateAuthEventFeedbackCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminUpdateAuthEventFeedbackCommandInput;
            constructor(input: AdminUpdateAuthEventFeedbackCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminUpdateAuthEventFeedbackCommandInput, AdminUpdateAuthEventFeedbackCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminUpdateDeviceStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminUpdateDeviceStatusRequest, AdminUpdateDeviceStatusResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminUpdateDeviceStatusCommandInput extends AdminUpdateDeviceStatusRequest {
    }
    export interface AdminUpdateDeviceStatusCommandOutput extends AdminUpdateDeviceStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the device status as an administrator.</p>
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminUpdateDeviceStatusCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminUpdateDeviceStatusCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminUpdateDeviceStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminUpdateDeviceStatusCommandInput} for command's `input` shape.
        * @see {@link AdminUpdateDeviceStatusCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminUpdateDeviceStatusCommand extends $Command<AdminUpdateDeviceStatusCommandInput, AdminUpdateDeviceStatusCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminUpdateDeviceStatusCommandInput;
            constructor(input: AdminUpdateDeviceStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminUpdateDeviceStatusCommandInput, AdminUpdateDeviceStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminUpdateUserAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminUpdateUserAttributesRequest, AdminUpdateUserAttributesResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminUpdateUserAttributesCommandInput extends AdminUpdateUserAttributesRequest {
    }
    export interface AdminUpdateUserAttributesCommandOutput extends AdminUpdateUserAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the specified user's attributes, including developer attributes, as an
        *             administrator. Works on any user.</p>
        *         <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the
        *             attribute name.</p>
        *         <p>In addition to updating user attributes, this API can also be used to mark phone and
        *             email as verified.</p>
        *
        *          <note>
        *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
        *                 require you to register an origination phone number before you can send SMS messages
        *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
        *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
        *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
        *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
        *                 in.</p>
        *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
        *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
        *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
        *                         mode</a>
        *                </i>, you can send messages only to verified phone
        *                 numbers. After you test your app while in the sandbox environment, you can move out
        *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
        *                     Developer Guide</i>.</p>
        *          </note>
        *
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminUpdateUserAttributesCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminUpdateUserAttributesCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminUpdateUserAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminUpdateUserAttributesCommandInput} for command's `input` shape.
        * @see {@link AdminUpdateUserAttributesCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminUpdateUserAttributesCommand extends $Command<AdminUpdateUserAttributesCommandInput, AdminUpdateUserAttributesCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminUpdateUserAttributesCommandInput;
            constructor(input: AdminUpdateUserAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminUpdateUserAttributesCommandInput, AdminUpdateUserAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AdminUserGlobalSignOutCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AdminUserGlobalSignOutRequest, AdminUserGlobalSignOutResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AdminUserGlobalSignOutCommandInput extends AdminUserGlobalSignOutRequest {
    }
    export interface AdminUserGlobalSignOutCommandOutput extends AdminUserGlobalSignOutResponse, __MetadataBearer {
    }
    /**
        * <p>Signs out a user from all devices. You must sign <code>AdminUserGlobalSignOut</code> requests
        *             with Amazon Web Services credentials. It also invalidates all refresh tokens that Amazon Cognito has issued to
        *             a user. The user's current access and ID tokens remain valid until they expire. By
        *             default, access and ID tokens expire one hour after they're issued. A user can still use
        *             a hosted UI cookie to retrieve new tokens for the duration of the cookie validity period
        *             of 1 hour.</p>
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AdminUserGlobalSignOutCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AdminUserGlobalSignOutCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AdminUserGlobalSignOutCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AdminUserGlobalSignOutCommandInput} for command's `input` shape.
        * @see {@link AdminUserGlobalSignOutCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AdminUserGlobalSignOutCommand extends $Command<AdminUserGlobalSignOutCommandInput, AdminUserGlobalSignOutCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AdminUserGlobalSignOutCommandInput;
            constructor(input: AdminUserGlobalSignOutCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminUserGlobalSignOutCommandInput, AdminUserGlobalSignOutCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/AssociateSoftwareTokenCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { AssociateSoftwareTokenRequest, AssociateSoftwareTokenResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface AssociateSoftwareTokenCommandInput extends AssociateSoftwareTokenRequest {
    }
    export interface AssociateSoftwareTokenCommandOutput extends AssociateSoftwareTokenResponse, __MetadataBearer {
    }
    /**
        * <p>Begins setup of time-based one-time password multi-factor authentication (TOTP MFA)
        *             for a user, with a unique private key that Amazon Cognito generates and returns in the API
        *             response. You can authorize an <code>AssociateSoftwareToken</code> request with either
        *             the user's access token, or a session string from a challenge response that you received
        *             from Amazon Cognito.</p>
        *         <note>
        *             <p>Amazon Cognito disassociates an existing software token when you verify the new token in a
        *                     <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerifySoftwareToken.html"> VerifySoftwareToken</a> API request. If you don't verify the software
        *                 token and your user pool doesn't require MFA, the user can then authenticate with
        *                 user name and password credentials alone. If your user pool requires TOTP MFA, Amazon Cognito
        *                 generates an <code>MFA_SETUP</code> or <code>SOFTWARE_TOKEN_SETUP</code> challenge
        *                 each time your user signs. Complete setup with <code>AssociateSoftwareToken</code>
        *                 and <code>VerifySoftwareToken</code>.</p>
        *             <p>After you set up software token MFA for your user, Amazon Cognito generates a
        *                     <code>SOFTWARE_TOKEN_MFA</code> challenge when they authenticate. Respond to
        *                 this challenge with your user's TOTP.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, AssociateSoftwareTokenCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, AssociateSoftwareTokenCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new AssociateSoftwareTokenCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateSoftwareTokenCommandInput} for command's `input` shape.
        * @see {@link AssociateSoftwareTokenCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class AssociateSoftwareTokenCommand extends $Command<AssociateSoftwareTokenCommandInput, AssociateSoftwareTokenCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: AssociateSoftwareTokenCommandInput;
            constructor(input: AssociateSoftwareTokenCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateSoftwareTokenCommandInput, AssociateSoftwareTokenCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ChangePasswordCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { ChangePasswordRequest, ChangePasswordResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface ChangePasswordCommandInput extends ChangePasswordRequest {
    }
    export interface ChangePasswordCommandOutput extends ChangePasswordResponse, __MetadataBearer {
    }
    /**
        * <p>Changes the password for a specified user in a user pool.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, ChangePasswordCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, ChangePasswordCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new ChangePasswordCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ChangePasswordCommandInput} for command's `input` shape.
        * @see {@link ChangePasswordCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class ChangePasswordCommand extends $Command<ChangePasswordCommandInput, ChangePasswordCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: ChangePasswordCommandInput;
            constructor(input: ChangePasswordCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ChangePasswordCommandInput, ChangePasswordCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ConfirmDeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { ConfirmDeviceRequest, ConfirmDeviceResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface ConfirmDeviceCommandInput extends ConfirmDeviceRequest {
    }
    export interface ConfirmDeviceCommandOutput extends ConfirmDeviceResponse, __MetadataBearer {
    }
    /**
        * <p>Confirms tracking of the device. This API call is the call that begins device
        *             tracking.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, ConfirmDeviceCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, ConfirmDeviceCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new ConfirmDeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ConfirmDeviceCommandInput} for command's `input` shape.
        * @see {@link ConfirmDeviceCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class ConfirmDeviceCommand extends $Command<ConfirmDeviceCommandInput, ConfirmDeviceCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: ConfirmDeviceCommandInput;
            constructor(input: ConfirmDeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ConfirmDeviceCommandInput, ConfirmDeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ConfirmForgotPasswordCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { ConfirmForgotPasswordRequest, ConfirmForgotPasswordResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface ConfirmForgotPasswordCommandInput extends ConfirmForgotPasswordRequest {
    }
    export interface ConfirmForgotPasswordCommandOutput extends ConfirmForgotPasswordResponse, __MetadataBearer {
    }
    /**
        * <p>Allows a user to enter a confirmation code to reset a forgotten password.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, ConfirmForgotPasswordCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, ConfirmForgotPasswordCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new ConfirmForgotPasswordCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ConfirmForgotPasswordCommandInput} for command's `input` shape.
        * @see {@link ConfirmForgotPasswordCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class ConfirmForgotPasswordCommand extends $Command<ConfirmForgotPasswordCommandInput, ConfirmForgotPasswordCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: ConfirmForgotPasswordCommandInput;
            constructor(input: ConfirmForgotPasswordCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ConfirmForgotPasswordCommandInput, ConfirmForgotPasswordCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ConfirmSignUpCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { ConfirmSignUpRequest, ConfirmSignUpResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface ConfirmSignUpCommandInput extends ConfirmSignUpRequest {
    }
    export interface ConfirmSignUpCommandOutput extends ConfirmSignUpResponse, __MetadataBearer {
    }
    /**
        * <p>Confirms registration of a new user.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, ConfirmSignUpCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, ConfirmSignUpCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new ConfirmSignUpCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ConfirmSignUpCommandInput} for command's `input` shape.
        * @see {@link ConfirmSignUpCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class ConfirmSignUpCommand extends $Command<ConfirmSignUpCommandInput, ConfirmSignUpCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: ConfirmSignUpCommandInput;
            constructor(input: ConfirmSignUpCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ConfirmSignUpCommandInput, ConfirmSignUpCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/CreateGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { CreateGroupRequest, CreateGroupResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface CreateGroupCommandInput extends CreateGroupRequest {
    }
    export interface CreateGroupCommandOutput extends CreateGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new group in the specified user pool.</p>
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, CreateGroupCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, CreateGroupCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new CreateGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateGroupCommandInput} for command's `input` shape.
        * @see {@link CreateGroupCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class CreateGroupCommand extends $Command<CreateGroupCommandInput, CreateGroupCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: CreateGroupCommandInput;
            constructor(input: CreateGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateGroupCommandInput, CreateGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/CreateIdentityProviderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { CreateIdentityProviderRequest, CreateIdentityProviderResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface CreateIdentityProviderCommandInput extends CreateIdentityProviderRequest {
    }
    export interface CreateIdentityProviderCommandOutput extends CreateIdentityProviderResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an IdP for a user pool.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, CreateIdentityProviderCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, CreateIdentityProviderCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new CreateIdentityProviderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateIdentityProviderCommandInput} for command's `input` shape.
        * @see {@link CreateIdentityProviderCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class CreateIdentityProviderCommand extends $Command<CreateIdentityProviderCommandInput, CreateIdentityProviderCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: CreateIdentityProviderCommandInput;
            constructor(input: CreateIdentityProviderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateIdentityProviderCommandInput, CreateIdentityProviderCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/CreateResourceServerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { CreateResourceServerRequest, CreateResourceServerResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface CreateResourceServerCommandInput extends CreateResourceServerRequest {
    }
    export interface CreateResourceServerCommandOutput extends CreateResourceServerResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new OAuth2.0 resource server and defines custom scopes within it.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, CreateResourceServerCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, CreateResourceServerCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new CreateResourceServerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateResourceServerCommandInput} for command's `input` shape.
        * @see {@link CreateResourceServerCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class CreateResourceServerCommand extends $Command<CreateResourceServerCommandInput, CreateResourceServerCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: CreateResourceServerCommandInput;
            constructor(input: CreateResourceServerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateResourceServerCommandInput, CreateResourceServerCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/CreateUserImportJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { CreateUserImportJobRequest, CreateUserImportJobResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface CreateUserImportJobCommandInput extends CreateUserImportJobRequest {
    }
    export interface CreateUserImportJobCommandOutput extends CreateUserImportJobResponse, __MetadataBearer {
    }
    /**
        * <p>Creates the user import job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, CreateUserImportJobCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, CreateUserImportJobCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new CreateUserImportJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateUserImportJobCommandInput} for command's `input` shape.
        * @see {@link CreateUserImportJobCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class CreateUserImportJobCommand extends $Command<CreateUserImportJobCommandInput, CreateUserImportJobCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: CreateUserImportJobCommandInput;
            constructor(input: CreateUserImportJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateUserImportJobCommandInput, CreateUserImportJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/CreateUserPoolClientCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { CreateUserPoolClientRequest, CreateUserPoolClientResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface CreateUserPoolClientCommandInput extends CreateUserPoolClientRequest {
    }
    export interface CreateUserPoolClientCommandOutput extends CreateUserPoolClientResponse, __MetadataBearer {
    }
    /**
        * <p>Creates the user pool client.</p>
        *         <p>When you create a new user pool client, token revocation is automatically activated.
        *             For more information about revoking tokens, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html">RevokeToken</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, CreateUserPoolClientCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, CreateUserPoolClientCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new CreateUserPoolClientCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateUserPoolClientCommandInput} for command's `input` shape.
        * @see {@link CreateUserPoolClientCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class CreateUserPoolClientCommand extends $Command<CreateUserPoolClientCommandInput, CreateUserPoolClientCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: CreateUserPoolClientCommandInput;
            constructor(input: CreateUserPoolClientCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateUserPoolClientCommandInput, CreateUserPoolClientCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/CreateUserPoolCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { CreateUserPoolRequest, CreateUserPoolResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface CreateUserPoolCommandInput extends CreateUserPoolRequest {
    }
    export interface CreateUserPoolCommandOutput extends CreateUserPoolResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new Amazon Cognito user pool and sets the password policy for the
        *             pool.</p>
        *
        *          <note>
        *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
        *                 require you to register an origination phone number before you can send SMS messages
        *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
        *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
        *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
        *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
        *                 in.</p>
        *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
        *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
        *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
        *                         mode</a>
        *                </i>, you can send messages only to verified phone
        *                 numbers. After you test your app while in the sandbox environment, you can move out
        *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
        *                     Developer Guide</i>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, CreateUserPoolCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, CreateUserPoolCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new CreateUserPoolCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateUserPoolCommandInput} for command's `input` shape.
        * @see {@link CreateUserPoolCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class CreateUserPoolCommand extends $Command<CreateUserPoolCommandInput, CreateUserPoolCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: CreateUserPoolCommandInput;
            constructor(input: CreateUserPoolCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateUserPoolCommandInput, CreateUserPoolCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/CreateUserPoolDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { CreateUserPoolDomainRequest, CreateUserPoolDomainResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface CreateUserPoolDomainCommandInput extends CreateUserPoolDomainRequest {
    }
    export interface CreateUserPoolDomainCommandOutput extends CreateUserPoolDomainResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new domain for a user pool.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, CreateUserPoolDomainCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, CreateUserPoolDomainCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new CreateUserPoolDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateUserPoolDomainCommandInput} for command's `input` shape.
        * @see {@link CreateUserPoolDomainCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class CreateUserPoolDomainCommand extends $Command<CreateUserPoolDomainCommandInput, CreateUserPoolDomainCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: CreateUserPoolDomainCommandInput;
            constructor(input: CreateUserPoolDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateUserPoolDomainCommandInput, CreateUserPoolDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { DeleteGroupRequest } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface DeleteGroupCommandInput extends DeleteGroupRequest {
    }
    export interface DeleteGroupCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a group.</p>
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, DeleteGroupCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, DeleteGroupCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new DeleteGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteGroupCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class DeleteGroupCommand extends $Command<DeleteGroupCommandInput, DeleteGroupCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: DeleteGroupCommandInput;
            constructor(input: DeleteGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteGroupCommandInput, DeleteGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteIdentityProviderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { DeleteIdentityProviderRequest } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface DeleteIdentityProviderCommandInput extends DeleteIdentityProviderRequest {
    }
    export interface DeleteIdentityProviderCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an IdP for a user pool.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, DeleteIdentityProviderCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, DeleteIdentityProviderCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new DeleteIdentityProviderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteIdentityProviderCommandInput} for command's `input` shape.
        * @see {@link DeleteIdentityProviderCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class DeleteIdentityProviderCommand extends $Command<DeleteIdentityProviderCommandInput, DeleteIdentityProviderCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: DeleteIdentityProviderCommandInput;
            constructor(input: DeleteIdentityProviderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteIdentityProviderCommandInput, DeleteIdentityProviderCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteResourceServerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { DeleteResourceServerRequest } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface DeleteResourceServerCommandInput extends DeleteResourceServerRequest {
    }
    export interface DeleteResourceServerCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a resource server.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, DeleteResourceServerCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, DeleteResourceServerCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new DeleteResourceServerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteResourceServerCommandInput} for command's `input` shape.
        * @see {@link DeleteResourceServerCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class DeleteResourceServerCommand extends $Command<DeleteResourceServerCommandInput, DeleteResourceServerCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: DeleteResourceServerCommandInput;
            constructor(input: DeleteResourceServerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteResourceServerCommandInput, DeleteResourceServerCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteUserAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { DeleteUserAttributesRequest, DeleteUserAttributesResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface DeleteUserAttributesCommandInput extends DeleteUserAttributesRequest {
    }
    export interface DeleteUserAttributesCommandOutput extends DeleteUserAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the attributes for a user.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, DeleteUserAttributesCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, DeleteUserAttributesCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new DeleteUserAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteUserAttributesCommandInput} for command's `input` shape.
        * @see {@link DeleteUserAttributesCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class DeleteUserAttributesCommand extends $Command<DeleteUserAttributesCommandInput, DeleteUserAttributesCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: DeleteUserAttributesCommandInput;
            constructor(input: DeleteUserAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteUserAttributesCommandInput, DeleteUserAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { DeleteUserRequest } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface DeleteUserCommandInput extends DeleteUserRequest {
    }
    export interface DeleteUserCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Allows a user to delete himself or herself.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, DeleteUserCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, DeleteUserCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new DeleteUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteUserCommandInput} for command's `input` shape.
        * @see {@link DeleteUserCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class DeleteUserCommand extends $Command<DeleteUserCommandInput, DeleteUserCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: DeleteUserCommandInput;
            constructor(input: DeleteUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteUserCommandInput, DeleteUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteUserPoolClientCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { DeleteUserPoolClientRequest } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface DeleteUserPoolClientCommandInput extends DeleteUserPoolClientRequest {
    }
    export interface DeleteUserPoolClientCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Allows the developer to delete the user pool client.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, DeleteUserPoolClientCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, DeleteUserPoolClientCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new DeleteUserPoolClientCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteUserPoolClientCommandInput} for command's `input` shape.
        * @see {@link DeleteUserPoolClientCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class DeleteUserPoolClientCommand extends $Command<DeleteUserPoolClientCommandInput, DeleteUserPoolClientCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: DeleteUserPoolClientCommandInput;
            constructor(input: DeleteUserPoolClientCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteUserPoolClientCommandInput, DeleteUserPoolClientCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteUserPoolCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { DeleteUserPoolRequest } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface DeleteUserPoolCommandInput extends DeleteUserPoolRequest {
    }
    export interface DeleteUserPoolCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified Amazon Cognito user pool.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, DeleteUserPoolCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, DeleteUserPoolCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new DeleteUserPoolCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteUserPoolCommandInput} for command's `input` shape.
        * @see {@link DeleteUserPoolCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class DeleteUserPoolCommand extends $Command<DeleteUserPoolCommandInput, DeleteUserPoolCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: DeleteUserPoolCommandInput;
            constructor(input: DeleteUserPoolCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteUserPoolCommandInput, DeleteUserPoolCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DeleteUserPoolDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { DeleteUserPoolDomainRequest, DeleteUserPoolDomainResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface DeleteUserPoolDomainCommandInput extends DeleteUserPoolDomainRequest {
    }
    export interface DeleteUserPoolDomainCommandOutput extends DeleteUserPoolDomainResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a domain for a user pool.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, DeleteUserPoolDomainCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, DeleteUserPoolDomainCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new DeleteUserPoolDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteUserPoolDomainCommandInput} for command's `input` shape.
        * @see {@link DeleteUserPoolDomainCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class DeleteUserPoolDomainCommand extends $Command<DeleteUserPoolDomainCommandInput, DeleteUserPoolDomainCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: DeleteUserPoolDomainCommandInput;
            constructor(input: DeleteUserPoolDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteUserPoolDomainCommandInput, DeleteUserPoolDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DescribeIdentityProviderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { DescribeIdentityProviderRequest, DescribeIdentityProviderResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface DescribeIdentityProviderCommandInput extends DescribeIdentityProviderRequest {
    }
    export interface DescribeIdentityProviderCommandOutput extends DescribeIdentityProviderResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about a specific IdP.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, DescribeIdentityProviderCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, DescribeIdentityProviderCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new DescribeIdentityProviderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeIdentityProviderCommandInput} for command's `input` shape.
        * @see {@link DescribeIdentityProviderCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class DescribeIdentityProviderCommand extends $Command<DescribeIdentityProviderCommandInput, DescribeIdentityProviderCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: DescribeIdentityProviderCommandInput;
            constructor(input: DescribeIdentityProviderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeIdentityProviderCommandInput, DescribeIdentityProviderCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DescribeResourceServerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { DescribeResourceServerRequest, DescribeResourceServerResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface DescribeResourceServerCommandInput extends DescribeResourceServerRequest {
    }
    export interface DescribeResourceServerCommandOutput extends DescribeResourceServerResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a resource server.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, DescribeResourceServerCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, DescribeResourceServerCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new DescribeResourceServerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeResourceServerCommandInput} for command's `input` shape.
        * @see {@link DescribeResourceServerCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class DescribeResourceServerCommand extends $Command<DescribeResourceServerCommandInput, DescribeResourceServerCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: DescribeResourceServerCommandInput;
            constructor(input: DescribeResourceServerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeResourceServerCommandInput, DescribeResourceServerCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DescribeRiskConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { DescribeRiskConfigurationRequest, DescribeRiskConfigurationResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface DescribeRiskConfigurationCommandInput extends DescribeRiskConfigurationRequest {
    }
    export interface DescribeRiskConfigurationCommandOutput extends DescribeRiskConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the risk configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, DescribeRiskConfigurationCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, DescribeRiskConfigurationCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new DescribeRiskConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeRiskConfigurationCommandInput} for command's `input` shape.
        * @see {@link DescribeRiskConfigurationCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class DescribeRiskConfigurationCommand extends $Command<DescribeRiskConfigurationCommandInput, DescribeRiskConfigurationCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: DescribeRiskConfigurationCommandInput;
            constructor(input: DescribeRiskConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeRiskConfigurationCommandInput, DescribeRiskConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DescribeUserImportJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { DescribeUserImportJobRequest, DescribeUserImportJobResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface DescribeUserImportJobCommandInput extends DescribeUserImportJobRequest {
    }
    export interface DescribeUserImportJobCommandOutput extends DescribeUserImportJobResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the user import job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, DescribeUserImportJobCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, DescribeUserImportJobCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new DescribeUserImportJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeUserImportJobCommandInput} for command's `input` shape.
        * @see {@link DescribeUserImportJobCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class DescribeUserImportJobCommand extends $Command<DescribeUserImportJobCommandInput, DescribeUserImportJobCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: DescribeUserImportJobCommandInput;
            constructor(input: DescribeUserImportJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeUserImportJobCommandInput, DescribeUserImportJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DescribeUserPoolClientCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { DescribeUserPoolClientRequest, DescribeUserPoolClientResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface DescribeUserPoolClientCommandInput extends DescribeUserPoolClientRequest {
    }
    export interface DescribeUserPoolClientCommandOutput extends DescribeUserPoolClientResponse, __MetadataBearer {
    }
    /**
        * <p>Client method for returning the configuration information and metadata of the
        *             specified user pool app client.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, DescribeUserPoolClientCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, DescribeUserPoolClientCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new DescribeUserPoolClientCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeUserPoolClientCommandInput} for command's `input` shape.
        * @see {@link DescribeUserPoolClientCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class DescribeUserPoolClientCommand extends $Command<DescribeUserPoolClientCommandInput, DescribeUserPoolClientCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: DescribeUserPoolClientCommandInput;
            constructor(input: DescribeUserPoolClientCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeUserPoolClientCommandInput, DescribeUserPoolClientCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DescribeUserPoolCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { DescribeUserPoolRequest, DescribeUserPoolResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface DescribeUserPoolCommandInput extends DescribeUserPoolRequest {
    }
    export interface DescribeUserPoolCommandOutput extends DescribeUserPoolResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the configuration information and metadata of the specified user pool.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, DescribeUserPoolCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, DescribeUserPoolCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new DescribeUserPoolCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeUserPoolCommandInput} for command's `input` shape.
        * @see {@link DescribeUserPoolCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class DescribeUserPoolCommand extends $Command<DescribeUserPoolCommandInput, DescribeUserPoolCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: DescribeUserPoolCommandInput;
            constructor(input: DescribeUserPoolCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeUserPoolCommandInput, DescribeUserPoolCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/DescribeUserPoolDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { DescribeUserPoolDomainRequest, DescribeUserPoolDomainResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface DescribeUserPoolDomainCommandInput extends DescribeUserPoolDomainRequest {
    }
    export interface DescribeUserPoolDomainCommandOutput extends DescribeUserPoolDomainResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about a domain.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, DescribeUserPoolDomainCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, DescribeUserPoolDomainCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new DescribeUserPoolDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeUserPoolDomainCommandInput} for command's `input` shape.
        * @see {@link DescribeUserPoolDomainCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class DescribeUserPoolDomainCommand extends $Command<DescribeUserPoolDomainCommandInput, DescribeUserPoolDomainCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: DescribeUserPoolDomainCommandInput;
            constructor(input: DescribeUserPoolDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeUserPoolDomainCommandInput, DescribeUserPoolDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ForgetDeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { ForgetDeviceRequest } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface ForgetDeviceCommandInput extends ForgetDeviceRequest {
    }
    export interface ForgetDeviceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Forgets the specified device.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, ForgetDeviceCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, ForgetDeviceCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new ForgetDeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ForgetDeviceCommandInput} for command's `input` shape.
        * @see {@link ForgetDeviceCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class ForgetDeviceCommand extends $Command<ForgetDeviceCommandInput, ForgetDeviceCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: ForgetDeviceCommandInput;
            constructor(input: ForgetDeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ForgetDeviceCommandInput, ForgetDeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ForgotPasswordCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { ForgotPasswordRequest, ForgotPasswordResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface ForgotPasswordCommandInput extends ForgotPasswordRequest {
    }
    export interface ForgotPasswordCommandOutput extends ForgotPasswordResponse, __MetadataBearer {
    }
    /**
        * <p>Calling this API causes a message to be sent to the end user with a confirmation code
        *             that is required to change the user's password. For the <code>Username</code> parameter,
        *             you can use the username or user alias. The method used to send the confirmation code is
        *             sent according to the specified AccountRecoverySetting. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-recover-a-user-account.html">Recovering
        *                 User Accounts</a> in the <i>Amazon Cognito Developer Guide</i>. If
        *             neither a verified phone number nor a verified email exists, an
        *                 <code>InvalidParameterException</code> is thrown. To use the confirmation code for
        *             resetting the password, call <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ConfirmForgotPassword.html">ConfirmForgotPassword</a>. </p>
        *
        *          <note>
        *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
        *                 require you to register an origination phone number before you can send SMS messages
        *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
        *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
        *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
        *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
        *                 in.</p>
        *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
        *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
        *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
        *                         mode</a>
        *                </i>, you can send messages only to verified phone
        *                 numbers. After you test your app while in the sandbox environment, you can move out
        *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
        *                     Developer Guide</i>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, ForgotPasswordCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, ForgotPasswordCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new ForgotPasswordCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ForgotPasswordCommandInput} for command's `input` shape.
        * @see {@link ForgotPasswordCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class ForgotPasswordCommand extends $Command<ForgotPasswordCommandInput, ForgotPasswordCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: ForgotPasswordCommandInput;
            constructor(input: ForgotPasswordCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ForgotPasswordCommandInput, ForgotPasswordCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetCSVHeaderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { GetCSVHeaderRequest, GetCSVHeaderResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface GetCSVHeaderCommandInput extends GetCSVHeaderRequest {
    }
    export interface GetCSVHeaderCommandOutput extends GetCSVHeaderResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the header information for the comma-separated value (CSV) file to be used as
        *             input for the user import job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, GetCSVHeaderCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, GetCSVHeaderCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new GetCSVHeaderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCSVHeaderCommandInput} for command's `input` shape.
        * @see {@link GetCSVHeaderCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class GetCSVHeaderCommand extends $Command<GetCSVHeaderCommandInput, GetCSVHeaderCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: GetCSVHeaderCommandInput;
            constructor(input: GetCSVHeaderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCSVHeaderCommandInput, GetCSVHeaderCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetDeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { GetDeviceRequest, GetDeviceResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface GetDeviceCommandInput extends GetDeviceRequest {
    }
    export interface GetDeviceCommandOutput extends GetDeviceResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the device.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, GetDeviceCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, GetDeviceCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new GetDeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDeviceCommandInput} for command's `input` shape.
        * @see {@link GetDeviceCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class GetDeviceCommand extends $Command<GetDeviceCommandInput, GetDeviceCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: GetDeviceCommandInput;
            constructor(input: GetDeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDeviceCommandInput, GetDeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { GetGroupRequest, GetGroupResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface GetGroupCommandInput extends GetGroupRequest {
    }
    export interface GetGroupCommandOutput extends GetGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a group.</p>
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, GetGroupCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, GetGroupCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new GetGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetGroupCommandInput} for command's `input` shape.
        * @see {@link GetGroupCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class GetGroupCommand extends $Command<GetGroupCommandInput, GetGroupCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: GetGroupCommandInput;
            constructor(input: GetGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetGroupCommandInput, GetGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetIdentityProviderByIdentifierCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { GetIdentityProviderByIdentifierRequest, GetIdentityProviderByIdentifierResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface GetIdentityProviderByIdentifierCommandInput extends GetIdentityProviderByIdentifierRequest {
    }
    export interface GetIdentityProviderByIdentifierCommandOutput extends GetIdentityProviderByIdentifierResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the specified IdP.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, GetIdentityProviderByIdentifierCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, GetIdentityProviderByIdentifierCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new GetIdentityProviderByIdentifierCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetIdentityProviderByIdentifierCommandInput} for command's `input` shape.
        * @see {@link GetIdentityProviderByIdentifierCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class GetIdentityProviderByIdentifierCommand extends $Command<GetIdentityProviderByIdentifierCommandInput, GetIdentityProviderByIdentifierCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: GetIdentityProviderByIdentifierCommandInput;
            constructor(input: GetIdentityProviderByIdentifierCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetIdentityProviderByIdentifierCommandInput, GetIdentityProviderByIdentifierCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetSigningCertificateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { GetSigningCertificateRequest, GetSigningCertificateResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface GetSigningCertificateCommandInput extends GetSigningCertificateRequest {
    }
    export interface GetSigningCertificateCommandOutput extends GetSigningCertificateResponse, __MetadataBearer {
    }
    /**
        * <p>This method takes a user pool ID, and returns the signing certificate.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, GetSigningCertificateCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, GetSigningCertificateCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new GetSigningCertificateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSigningCertificateCommandInput} for command's `input` shape.
        * @see {@link GetSigningCertificateCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class GetSigningCertificateCommand extends $Command<GetSigningCertificateCommandInput, GetSigningCertificateCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: GetSigningCertificateCommandInput;
            constructor(input: GetSigningCertificateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSigningCertificateCommandInput, GetSigningCertificateCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetUICustomizationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { GetUICustomizationRequest, GetUICustomizationResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface GetUICustomizationCommandInput extends GetUICustomizationRequest {
    }
    export interface GetUICustomizationCommandOutput extends GetUICustomizationResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the user interface (UI) Customization information for a particular app client's
        *             app UI, if any such information exists for the client. If nothing is set for the
        *             particular client, but there is an existing pool level customization (the app
        *                 <code>clientId</code> is <code>ALL</code>), then that information is returned. If
        *             nothing is present, then an empty shape is returned.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, GetUICustomizationCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, GetUICustomizationCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new GetUICustomizationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetUICustomizationCommandInput} for command's `input` shape.
        * @see {@link GetUICustomizationCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class GetUICustomizationCommand extends $Command<GetUICustomizationCommandInput, GetUICustomizationCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: GetUICustomizationCommandInput;
            constructor(input: GetUICustomizationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetUICustomizationCommandInput, GetUICustomizationCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetUserAttributeVerificationCodeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { GetUserAttributeVerificationCodeRequest, GetUserAttributeVerificationCodeResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface GetUserAttributeVerificationCodeCommandInput extends GetUserAttributeVerificationCodeRequest {
    }
    export interface GetUserAttributeVerificationCodeCommandOutput extends GetUserAttributeVerificationCodeResponse, __MetadataBearer {
    }
    /**
        * <p>Generates a user attribute verification code for the specified attribute name. Sends a
        *             message to a user with a code that they must return in a VerifyUserAttribute
        *             request.</p>
        *
        *          <note>
        *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
        *                 require you to register an origination phone number before you can send SMS messages
        *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
        *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
        *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
        *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
        *                 in.</p>
        *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
        *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
        *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
        *                         mode</a>
        *                </i>, you can send messages only to verified phone
        *                 numbers. After you test your app while in the sandbox environment, you can move out
        *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
        *                     Developer Guide</i>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, GetUserAttributeVerificationCodeCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, GetUserAttributeVerificationCodeCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new GetUserAttributeVerificationCodeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetUserAttributeVerificationCodeCommandInput} for command's `input` shape.
        * @see {@link GetUserAttributeVerificationCodeCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class GetUserAttributeVerificationCodeCommand extends $Command<GetUserAttributeVerificationCodeCommandInput, GetUserAttributeVerificationCodeCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: GetUserAttributeVerificationCodeCommandInput;
            constructor(input: GetUserAttributeVerificationCodeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetUserAttributeVerificationCodeCommandInput, GetUserAttributeVerificationCodeCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { GetUserRequest, GetUserResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface GetUserCommandInput extends GetUserRequest {
    }
    export interface GetUserCommandOutput extends GetUserResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the user attributes and metadata for a user.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, GetUserCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, GetUserCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new GetUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetUserCommandInput} for command's `input` shape.
        * @see {@link GetUserCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class GetUserCommand extends $Command<GetUserCommandInput, GetUserCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: GetUserCommandInput;
            constructor(input: GetUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetUserCommandInput, GetUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GetUserPoolMfaConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { GetUserPoolMfaConfigRequest, GetUserPoolMfaConfigResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface GetUserPoolMfaConfigCommandInput extends GetUserPoolMfaConfigRequest {
    }
    export interface GetUserPoolMfaConfigCommandOutput extends GetUserPoolMfaConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the user pool multi-factor authentication (MFA) configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, GetUserPoolMfaConfigCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, GetUserPoolMfaConfigCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new GetUserPoolMfaConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetUserPoolMfaConfigCommandInput} for command's `input` shape.
        * @see {@link GetUserPoolMfaConfigCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class GetUserPoolMfaConfigCommand extends $Command<GetUserPoolMfaConfigCommandInput, GetUserPoolMfaConfigCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: GetUserPoolMfaConfigCommandInput;
            constructor(input: GetUserPoolMfaConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetUserPoolMfaConfigCommandInput, GetUserPoolMfaConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/GlobalSignOutCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { GlobalSignOutRequest, GlobalSignOutResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface GlobalSignOutCommandInput extends GlobalSignOutRequest {
    }
    export interface GlobalSignOutCommandOutput extends GlobalSignOutResponse, __MetadataBearer {
    }
    /**
        * <p>Signs out users from all devices. It also invalidates all refresh tokens that Amazon Cognito
        *             has issued to a user. The user's current access and ID tokens remain valid until their
        *             expiry. By default, access and ID tokens expire one hour after Amazon Cognito issues them. A user
        *             can still use a hosted UI cookie to retrieve new tokens for the duration of the cookie
        *             validity period of 1 hour.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, GlobalSignOutCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, GlobalSignOutCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new GlobalSignOutCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GlobalSignOutCommandInput} for command's `input` shape.
        * @see {@link GlobalSignOutCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class GlobalSignOutCommand extends $Command<GlobalSignOutCommandInput, GlobalSignOutCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: GlobalSignOutCommandInput;
            constructor(input: GlobalSignOutCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GlobalSignOutCommandInput, GlobalSignOutCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/InitiateAuthCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { InitiateAuthRequest, InitiateAuthResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface InitiateAuthCommandInput extends InitiateAuthRequest {
    }
    export interface InitiateAuthCommandOutput extends InitiateAuthResponse, __MetadataBearer {
    }
    /**
        * <p>Initiates sign-in for a user in the Amazon Cognito user directory. You can't sign in a user
        *             with a federated IdP with <code>InitiateAuth</code>. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation.html"> Adding user pool sign-in through a third party</a>.</p>
        *
        *          <note>
        *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
        *                 require you to register an origination phone number before you can send SMS messages
        *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
        *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
        *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
        *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
        *                 in.</p>
        *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
        *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
        *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
        *                         mode</a>
        *                </i>, you can send messages only to verified phone
        *                 numbers. After you test your app while in the sandbox environment, you can move out
        *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
        *                     Developer Guide</i>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, InitiateAuthCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, InitiateAuthCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new InitiateAuthCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link InitiateAuthCommandInput} for command's `input` shape.
        * @see {@link InitiateAuthCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class InitiateAuthCommand extends $Command<InitiateAuthCommandInput, InitiateAuthCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: InitiateAuthCommandInput;
            constructor(input: InitiateAuthCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<InitiateAuthCommandInput, InitiateAuthCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListDevicesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { ListDevicesRequest, ListDevicesResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface ListDevicesCommandInput extends ListDevicesRequest {
    }
    export interface ListDevicesCommandOutput extends ListDevicesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the sign-in devices that Amazon Cognito has registered to the current user.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, ListDevicesCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, ListDevicesCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new ListDevicesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDevicesCommandInput} for command's `input` shape.
        * @see {@link ListDevicesCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class ListDevicesCommand extends $Command<ListDevicesCommandInput, ListDevicesCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: ListDevicesCommandInput;
            constructor(input: ListDevicesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDevicesCommandInput, ListDevicesCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { ListGroupsRequest, ListGroupsResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface ListGroupsCommandInput extends ListGroupsRequest {
    }
    export interface ListGroupsCommandOutput extends ListGroupsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the groups associated with a user pool.</p>
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, ListGroupsCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, ListGroupsCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new ListGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListGroupsCommandInput} for command's `input` shape.
        * @see {@link ListGroupsCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class ListGroupsCommand extends $Command<ListGroupsCommandInput, ListGroupsCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: ListGroupsCommandInput;
            constructor(input: ListGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListGroupsCommandInput, ListGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListIdentityProvidersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { ListIdentityProvidersRequest, ListIdentityProvidersResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface ListIdentityProvidersCommandInput extends ListIdentityProvidersRequest {
    }
    export interface ListIdentityProvidersCommandOutput extends ListIdentityProvidersResponse, __MetadataBearer {
    }
    /**
        * <p>Lists information about all IdPs for a user pool.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, ListIdentityProvidersCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, ListIdentityProvidersCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new ListIdentityProvidersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListIdentityProvidersCommandInput} for command's `input` shape.
        * @see {@link ListIdentityProvidersCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class ListIdentityProvidersCommand extends $Command<ListIdentityProvidersCommandInput, ListIdentityProvidersCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: ListIdentityProvidersCommandInput;
            constructor(input: ListIdentityProvidersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListIdentityProvidersCommandInput, ListIdentityProvidersCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListResourceServersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { ListResourceServersRequest, ListResourceServersResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface ListResourceServersCommandInput extends ListResourceServersRequest {
    }
    export interface ListResourceServersCommandOutput extends ListResourceServersResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the resource servers for a user pool.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, ListResourceServersCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, ListResourceServersCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new ListResourceServersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListResourceServersCommandInput} for command's `input` shape.
        * @see {@link ListResourceServersCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class ListResourceServersCommand extends $Command<ListResourceServersCommandInput, ListResourceServersCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: ListResourceServersCommandInput;
            constructor(input: ListResourceServersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListResourceServersCommandInput, ListResourceServersCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the tags that are assigned to an Amazon Cognito user pool.</p>
        *         <p>A tag is a label that you can apply to user pools to categorize and manage them in
        *             different ways, such as by purpose, owner, environment, or other criteria.</p>
        *         <p>You can use this action up to 10 times per second, per account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, ListTagsForResourceCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, ListTagsForResourceCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListUserImportJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { ListUserImportJobsRequest, ListUserImportJobsResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface ListUserImportJobsCommandInput extends ListUserImportJobsRequest {
    }
    export interface ListUserImportJobsCommandOutput extends ListUserImportJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the user import jobs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, ListUserImportJobsCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, ListUserImportJobsCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new ListUserImportJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListUserImportJobsCommandInput} for command's `input` shape.
        * @see {@link ListUserImportJobsCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class ListUserImportJobsCommand extends $Command<ListUserImportJobsCommandInput, ListUserImportJobsCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: ListUserImportJobsCommandInput;
            constructor(input: ListUserImportJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListUserImportJobsCommandInput, ListUserImportJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListUserPoolClientsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { ListUserPoolClientsRequest, ListUserPoolClientsResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface ListUserPoolClientsCommandInput extends ListUserPoolClientsRequest {
    }
    export interface ListUserPoolClientsCommandOutput extends ListUserPoolClientsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the clients that have been created for the specified user pool.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, ListUserPoolClientsCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, ListUserPoolClientsCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new ListUserPoolClientsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListUserPoolClientsCommandInput} for command's `input` shape.
        * @see {@link ListUserPoolClientsCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class ListUserPoolClientsCommand extends $Command<ListUserPoolClientsCommandInput, ListUserPoolClientsCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: ListUserPoolClientsCommandInput;
            constructor(input: ListUserPoolClientsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListUserPoolClientsCommandInput, ListUserPoolClientsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListUserPoolsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { ListUserPoolsRequest, ListUserPoolsResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface ListUserPoolsCommandInput extends ListUserPoolsRequest {
    }
    export interface ListUserPoolsCommandOutput extends ListUserPoolsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the user pools associated with an Amazon Web Services account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, ListUserPoolsCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, ListUserPoolsCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new ListUserPoolsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListUserPoolsCommandInput} for command's `input` shape.
        * @see {@link ListUserPoolsCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class ListUserPoolsCommand extends $Command<ListUserPoolsCommandInput, ListUserPoolsCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: ListUserPoolsCommandInput;
            constructor(input: ListUserPoolsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListUserPoolsCommandInput, ListUserPoolsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListUsersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { ListUsersRequest, ListUsersResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface ListUsersCommandInput extends ListUsersRequest {
    }
    export interface ListUsersCommandOutput extends ListUsersResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the users in the Amazon Cognito user pool.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, ListUsersCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, ListUsersCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new ListUsersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListUsersCommandInput} for command's `input` shape.
        * @see {@link ListUsersCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class ListUsersCommand extends $Command<ListUsersCommandInput, ListUsersCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: ListUsersCommandInput;
            constructor(input: ListUsersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListUsersCommandInput, ListUsersCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ListUsersInGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { ListUsersInGroupRequest, ListUsersInGroupResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface ListUsersInGroupCommandInput extends ListUsersInGroupRequest {
    }
    export interface ListUsersInGroupCommandOutput extends ListUsersInGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the users in the specified group.</p>
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, ListUsersInGroupCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, ListUsersInGroupCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new ListUsersInGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListUsersInGroupCommandInput} for command's `input` shape.
        * @see {@link ListUsersInGroupCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class ListUsersInGroupCommand extends $Command<ListUsersInGroupCommandInput, ListUsersInGroupCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: ListUsersInGroupCommandInput;
            constructor(input: ListUsersInGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListUsersInGroupCommandInput, ListUsersInGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/ResendConfirmationCodeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { ResendConfirmationCodeRequest, ResendConfirmationCodeResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface ResendConfirmationCodeCommandInput extends ResendConfirmationCodeRequest {
    }
    export interface ResendConfirmationCodeCommandOutput extends ResendConfirmationCodeResponse, __MetadataBearer {
    }
    /**
        * <p>Resends the confirmation (for confirmation of registration) to a specific user in the
        *             user pool.</p>
        *
        *          <note>
        *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
        *                 require you to register an origination phone number before you can send SMS messages
        *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
        *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
        *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
        *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
        *                 in.</p>
        *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
        *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
        *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
        *                         mode</a>
        *                </i>, you can send messages only to verified phone
        *                 numbers. After you test your app while in the sandbox environment, you can move out
        *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
        *                     Developer Guide</i>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, ResendConfirmationCodeCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, ResendConfirmationCodeCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new ResendConfirmationCodeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ResendConfirmationCodeCommandInput} for command's `input` shape.
        * @see {@link ResendConfirmationCodeCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class ResendConfirmationCodeCommand extends $Command<ResendConfirmationCodeCommandInput, ResendConfirmationCodeCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: ResendConfirmationCodeCommandInput;
            constructor(input: ResendConfirmationCodeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ResendConfirmationCodeCommandInput, ResendConfirmationCodeCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/RespondToAuthChallengeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { RespondToAuthChallengeRequest, RespondToAuthChallengeResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface RespondToAuthChallengeCommandInput extends RespondToAuthChallengeRequest {
    }
    export interface RespondToAuthChallengeCommandOutput extends RespondToAuthChallengeResponse, __MetadataBearer {
    }
    /**
        * <p>Responds to the authentication challenge.</p>
        *
        *          <note>
        *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
        *                 require you to register an origination phone number before you can send SMS messages
        *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
        *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
        *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
        *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
        *                 in.</p>
        *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
        *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
        *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
        *                         mode</a>
        *                </i>, you can send messages only to verified phone
        *                 numbers. After you test your app while in the sandbox environment, you can move out
        *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
        *                     Developer Guide</i>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, RespondToAuthChallengeCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, RespondToAuthChallengeCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new RespondToAuthChallengeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RespondToAuthChallengeCommandInput} for command's `input` shape.
        * @see {@link RespondToAuthChallengeCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class RespondToAuthChallengeCommand extends $Command<RespondToAuthChallengeCommandInput, RespondToAuthChallengeCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: RespondToAuthChallengeCommandInput;
            constructor(input: RespondToAuthChallengeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RespondToAuthChallengeCommandInput, RespondToAuthChallengeCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/RevokeTokenCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { RevokeTokenRequest, RevokeTokenResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface RevokeTokenCommandInput extends RevokeTokenRequest {
    }
    export interface RevokeTokenCommandOutput extends RevokeTokenResponse, __MetadataBearer {
    }
    /**
        * <p>Revokes all of the access tokens generated by the specified refresh token. After the
        *             token is revoked, you can't use the revoked token to access Amazon Cognito authenticated
        *             APIs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, RevokeTokenCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, RevokeTokenCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new RevokeTokenCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RevokeTokenCommandInput} for command's `input` shape.
        * @see {@link RevokeTokenCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class RevokeTokenCommand extends $Command<RevokeTokenCommandInput, RevokeTokenCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: RevokeTokenCommandInput;
            constructor(input: RevokeTokenCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RevokeTokenCommandInput, RevokeTokenCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/SetRiskConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { SetRiskConfigurationRequest, SetRiskConfigurationResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface SetRiskConfigurationCommandInput extends SetRiskConfigurationRequest {
    }
    export interface SetRiskConfigurationCommandOutput extends SetRiskConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Configures actions on detected risks. To delete the risk configuration for
        *                 <code>UserPoolId</code> or <code>ClientId</code>, pass null values for all four
        *             configuration types.</p>
        *         <p>To activate Amazon Cognito advanced security features, update the user pool to include the
        *                 <code>UserPoolAddOns</code> key<code>AdvancedSecurityMode</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, SetRiskConfigurationCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, SetRiskConfigurationCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new SetRiskConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetRiskConfigurationCommandInput} for command's `input` shape.
        * @see {@link SetRiskConfigurationCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class SetRiskConfigurationCommand extends $Command<SetRiskConfigurationCommandInput, SetRiskConfigurationCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: SetRiskConfigurationCommandInput;
            constructor(input: SetRiskConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetRiskConfigurationCommandInput, SetRiskConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/SetUICustomizationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { SetUICustomizationRequest, SetUICustomizationResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface SetUICustomizationCommandInput extends SetUICustomizationRequest {
    }
    export interface SetUICustomizationCommandOutput extends SetUICustomizationResponse, __MetadataBearer {
    }
    /**
        * <p>Sets the user interface (UI) customization information for a user pool's built-in app
        *             UI.</p>
        *         <p>You can specify app UI customization settings for a single client (with a specific
        *                 <code>clientId</code>) or for all clients (by setting the <code>clientId</code> to
        *                 <code>ALL</code>). If you specify <code>ALL</code>, the default configuration is
        *             used for every client that has no previously set UI customization. If you specify UI
        *             customization settings for a particular client, it will no longer return to the
        *                 <code>ALL</code> configuration.</p>
        *         <note>
        *             <p>To use this API, your user pool must have a domain associated with it. Otherwise,
        *                 there is no place to host the app's pages, and the service will throw an
        *                 error.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, SetUICustomizationCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, SetUICustomizationCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new SetUICustomizationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetUICustomizationCommandInput} for command's `input` shape.
        * @see {@link SetUICustomizationCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class SetUICustomizationCommand extends $Command<SetUICustomizationCommandInput, SetUICustomizationCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: SetUICustomizationCommandInput;
            constructor(input: SetUICustomizationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetUICustomizationCommandInput, SetUICustomizationCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/SetUserMFAPreferenceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { SetUserMFAPreferenceRequest, SetUserMFAPreferenceResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface SetUserMFAPreferenceCommandInput extends SetUserMFAPreferenceRequest {
    }
    export interface SetUserMFAPreferenceCommandOutput extends SetUserMFAPreferenceResponse, __MetadataBearer {
    }
    /**
        * <p>Set the user's multi-factor authentication (MFA) method preference, including which
        *             MFA factors are activated and if any are preferred. Only one factor can be set as
        *             preferred. The preferred MFA factor will be used to authenticate a user if multiple
        *             factors are activated. If multiple options are activated and no preference is set, a
        *             challenge to choose an MFA option will be returned during sign-in. If an MFA type is
        *             activated for a user, the user will be prompted for MFA during all sign-in attempts
        *             unless device tracking is turned on and the device has been trusted. If you want MFA to
        *             be applied selectively based on the assessed risk level of sign-in attempts, deactivate
        *             MFA for users and turn on Adaptive Authentication for the user pool.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, SetUserMFAPreferenceCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, SetUserMFAPreferenceCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new SetUserMFAPreferenceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetUserMFAPreferenceCommandInput} for command's `input` shape.
        * @see {@link SetUserMFAPreferenceCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class SetUserMFAPreferenceCommand extends $Command<SetUserMFAPreferenceCommandInput, SetUserMFAPreferenceCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: SetUserMFAPreferenceCommandInput;
            constructor(input: SetUserMFAPreferenceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetUserMFAPreferenceCommandInput, SetUserMFAPreferenceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/SetUserPoolMfaConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { SetUserPoolMfaConfigRequest, SetUserPoolMfaConfigResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface SetUserPoolMfaConfigCommandInput extends SetUserPoolMfaConfigRequest {
    }
    export interface SetUserPoolMfaConfigCommandOutput extends SetUserPoolMfaConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Sets the user pool multi-factor authentication (MFA) configuration.</p>
        *
        *          <note>
        *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
        *                 require you to register an origination phone number before you can send SMS messages
        *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
        *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
        *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
        *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
        *                 in.</p>
        *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
        *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
        *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
        *                         mode</a>
        *                </i>, you can send messages only to verified phone
        *                 numbers. After you test your app while in the sandbox environment, you can move out
        *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
        *                     Developer Guide</i>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, SetUserPoolMfaConfigCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, SetUserPoolMfaConfigCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new SetUserPoolMfaConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetUserPoolMfaConfigCommandInput} for command's `input` shape.
        * @see {@link SetUserPoolMfaConfigCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class SetUserPoolMfaConfigCommand extends $Command<SetUserPoolMfaConfigCommandInput, SetUserPoolMfaConfigCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: SetUserPoolMfaConfigCommandInput;
            constructor(input: SetUserPoolMfaConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetUserPoolMfaConfigCommandInput, SetUserPoolMfaConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/SetUserSettingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { SetUserSettingsRequest, SetUserSettingsResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface SetUserSettingsCommandInput extends SetUserSettingsRequest {
    }
    export interface SetUserSettingsCommandOutput extends SetUserSettingsResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             <i>This action is no longer supported.</i> You can use it to configure
        *             only SMS MFA. You can't use it to configure time-based one-time password (TOTP) software
        *             token MFA. To configure either type of MFA, use <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SetUserMFAPreference.html">SetUserMFAPreference</a> instead.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, SetUserSettingsCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, SetUserSettingsCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new SetUserSettingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetUserSettingsCommandInput} for command's `input` shape.
        * @see {@link SetUserSettingsCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class SetUserSettingsCommand extends $Command<SetUserSettingsCommandInput, SetUserSettingsCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: SetUserSettingsCommandInput;
            constructor(input: SetUserSettingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetUserSettingsCommandInput, SetUserSettingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/SignUpCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { SignUpRequest, SignUpResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    export interface SignUpCommandInput extends SignUpRequest {
    }
    export interface SignUpCommandOutput extends SignUpResponse, __MetadataBearer {
    }
    /**
        * <p>Registers the user in the specified user pool and creates a user name, password, and
        *             user attributes.</p>
        *
        *          <note>
        *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
        *                 require you to register an origination phone number before you can send SMS messages
        *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
        *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
        *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
        *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
        *                 in.</p>
        *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
        *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
        *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
        *                         mode</a>
        *                </i>, you can send messages only to verified phone
        *                 numbers. After you test your app while in the sandbox environment, you can move out
        *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
        *                     Developer Guide</i>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, SignUpCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, SignUpCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new SignUpCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SignUpCommandInput} for command's `input` shape.
        * @see {@link SignUpCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class SignUpCommand extends $Command<SignUpCommandInput, SignUpCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: SignUpCommandInput;
            constructor(input: SignUpCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SignUpCommandInput, SignUpCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/StartUserImportJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { StartUserImportJobRequest, StartUserImportJobResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_1";
    export interface StartUserImportJobCommandInput extends StartUserImportJobRequest {
    }
    export interface StartUserImportJobCommandOutput extends StartUserImportJobResponse, __MetadataBearer {
    }
    /**
        * <p>Starts the user import.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, StartUserImportJobCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, StartUserImportJobCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new StartUserImportJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartUserImportJobCommandInput} for command's `input` shape.
        * @see {@link StartUserImportJobCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class StartUserImportJobCommand extends $Command<StartUserImportJobCommandInput, StartUserImportJobCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: StartUserImportJobCommandInput;
            constructor(input: StartUserImportJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartUserImportJobCommandInput, StartUserImportJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/StopUserImportJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { StopUserImportJobRequest, StopUserImportJobResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_1";
    export interface StopUserImportJobCommandInput extends StopUserImportJobRequest {
    }
    export interface StopUserImportJobCommandOutput extends StopUserImportJobResponse, __MetadataBearer {
    }
    /**
        * <p>Stops the user import job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, StopUserImportJobCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, StopUserImportJobCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new StopUserImportJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopUserImportJobCommandInput} for command's `input` shape.
        * @see {@link StopUserImportJobCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class StopUserImportJobCommand extends $Command<StopUserImportJobCommandInput, StopUserImportJobCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: StopUserImportJobCommandInput;
            constructor(input: StopUserImportJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopUserImportJobCommandInput, StopUserImportJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_1";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Assigns a set of tags to an Amazon Cognito user pool. A tag is a label that you can use to
        *             categorize and manage user pools in different ways, such as by purpose, owner,
        *             environment, or other criteria.</p>
        *         <p>Each tag consists of a key and value, both of which you define. A key is a general
        *             category for more specific values. For example, if you have two versions of a user pool,
        *             one for testing and another for production, you might assign an <code>Environment</code>
        *             tag key to both user pools. The value of this key might be <code>Test</code> for one
        *             user pool, and <code>Production</code> for the other.</p>
        *         <p>Tags are useful for cost tracking and access control. You can activate your tags so
        *             that they appear on the Billing and Cost Management console, where you can track the
        *             costs associated with your user pools. In an Identity and Access Management policy, you can constrain
        *             permissions for user pools based on specific tags or tag values.</p>
        *         <p>You can use this action up to 5 times per second, per account. A user pool can have as
        *             many as 50 tags.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, TagResourceCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, TagResourceCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_1";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes the specified tags from an Amazon Cognito user pool. You can use this action up to 5
        *             times per second, per account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, UntagResourceCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, UntagResourceCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateAuthEventFeedbackCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { UpdateAuthEventFeedbackRequest, UpdateAuthEventFeedbackResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_1";
    export interface UpdateAuthEventFeedbackCommandInput extends UpdateAuthEventFeedbackRequest {
    }
    export interface UpdateAuthEventFeedbackCommandOutput extends UpdateAuthEventFeedbackResponse, __MetadataBearer {
    }
    /**
        * <p>Provides the feedback for an authentication event, whether it was from a valid user or
        *             not. This feedback is used for improving the risk evaluation decision for the user pool
        *             as part of Amazon Cognito advanced security.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, UpdateAuthEventFeedbackCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, UpdateAuthEventFeedbackCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new UpdateAuthEventFeedbackCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAuthEventFeedbackCommandInput} for command's `input` shape.
        * @see {@link UpdateAuthEventFeedbackCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class UpdateAuthEventFeedbackCommand extends $Command<UpdateAuthEventFeedbackCommandInput, UpdateAuthEventFeedbackCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: UpdateAuthEventFeedbackCommandInput;
            constructor(input: UpdateAuthEventFeedbackCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAuthEventFeedbackCommandInput, UpdateAuthEventFeedbackCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateDeviceStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { UpdateDeviceStatusRequest, UpdateDeviceStatusResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_1";
    export interface UpdateDeviceStatusCommandInput extends UpdateDeviceStatusRequest {
    }
    export interface UpdateDeviceStatusCommandOutput extends UpdateDeviceStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the device status.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, UpdateDeviceStatusCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, UpdateDeviceStatusCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new UpdateDeviceStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDeviceStatusCommandInput} for command's `input` shape.
        * @see {@link UpdateDeviceStatusCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class UpdateDeviceStatusCommand extends $Command<UpdateDeviceStatusCommandInput, UpdateDeviceStatusCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: UpdateDeviceStatusCommandInput;
            constructor(input: UpdateDeviceStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDeviceStatusCommandInput, UpdateDeviceStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { UpdateGroupRequest, UpdateGroupResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_1";
    export interface UpdateGroupCommandInput extends UpdateGroupRequest {
    }
    export interface UpdateGroupCommandOutput extends UpdateGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the specified group with the specified attributes.</p>
        *         <p>Calling this action requires developer credentials.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, UpdateGroupCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, UpdateGroupCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new UpdateGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateGroupCommandInput} for command's `input` shape.
        * @see {@link UpdateGroupCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class UpdateGroupCommand extends $Command<UpdateGroupCommandInput, UpdateGroupCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: UpdateGroupCommandInput;
            constructor(input: UpdateGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateGroupCommandInput, UpdateGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateIdentityProviderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { UpdateIdentityProviderRequest, UpdateIdentityProviderResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_1";
    export interface UpdateIdentityProviderCommandInput extends UpdateIdentityProviderRequest {
    }
    export interface UpdateIdentityProviderCommandOutput extends UpdateIdentityProviderResponse, __MetadataBearer {
    }
    /**
        * <p>Updates IdP information for a user pool.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, UpdateIdentityProviderCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, UpdateIdentityProviderCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new UpdateIdentityProviderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateIdentityProviderCommandInput} for command's `input` shape.
        * @see {@link UpdateIdentityProviderCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class UpdateIdentityProviderCommand extends $Command<UpdateIdentityProviderCommandInput, UpdateIdentityProviderCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: UpdateIdentityProviderCommandInput;
            constructor(input: UpdateIdentityProviderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateIdentityProviderCommandInput, UpdateIdentityProviderCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateResourceServerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { UpdateResourceServerRequest, UpdateResourceServerResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_1";
    export interface UpdateResourceServerCommandInput extends UpdateResourceServerRequest {
    }
    export interface UpdateResourceServerCommandOutput extends UpdateResourceServerResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the name and scopes of resource server. All other fields are read-only.</p>
        *         <important>
        *             <p>If you don't provide a value for an attribute, it is set to the default
        *                 value.</p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, UpdateResourceServerCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, UpdateResourceServerCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new UpdateResourceServerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateResourceServerCommandInput} for command's `input` shape.
        * @see {@link UpdateResourceServerCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class UpdateResourceServerCommand extends $Command<UpdateResourceServerCommandInput, UpdateResourceServerCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: UpdateResourceServerCommandInput;
            constructor(input: UpdateResourceServerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateResourceServerCommandInput, UpdateResourceServerCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateUserAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { UpdateUserAttributesRequest, UpdateUserAttributesResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_1";
    export interface UpdateUserAttributesCommandInput extends UpdateUserAttributesRequest {
    }
    export interface UpdateUserAttributesCommandOutput extends UpdateUserAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Allows a user to update a specific attribute (one at a time).</p>
        *
        *          <note>
        *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
        *                 require you to register an origination phone number before you can send SMS messages
        *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
        *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
        *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
        *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
        *                 in.</p>
        *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
        *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
        *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
        *                         mode</a>
        *                </i>, you can send messages only to verified phone
        *                 numbers. After you test your app while in the sandbox environment, you can move out
        *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
        *                     Developer Guide</i>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, UpdateUserAttributesCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, UpdateUserAttributesCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new UpdateUserAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateUserAttributesCommandInput} for command's `input` shape.
        * @see {@link UpdateUserAttributesCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class UpdateUserAttributesCommand extends $Command<UpdateUserAttributesCommandInput, UpdateUserAttributesCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: UpdateUserAttributesCommandInput;
            constructor(input: UpdateUserAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateUserAttributesCommandInput, UpdateUserAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateUserPoolClientCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { UpdateUserPoolClientRequest, UpdateUserPoolClientResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_1";
    export interface UpdateUserPoolClientCommandInput extends UpdateUserPoolClientRequest {
    }
    export interface UpdateUserPoolClientCommandOutput extends UpdateUserPoolClientResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the specified user pool app client with the specified attributes. You can get
        *             a list of the current user pool app client settings using <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPoolClient.html">DescribeUserPoolClient</a>.</p>
        *         <important>
        *             <p>If you don't provide a value for an attribute, it will be set to the default
        *                 value.</p>
        *         </important>
        *         <p>You can also use this operation to enable token revocation for user pool clients. For
        *             more information about revoking tokens, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html">RevokeToken</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, UpdateUserPoolClientCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, UpdateUserPoolClientCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new UpdateUserPoolClientCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateUserPoolClientCommandInput} for command's `input` shape.
        * @see {@link UpdateUserPoolClientCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class UpdateUserPoolClientCommand extends $Command<UpdateUserPoolClientCommandInput, UpdateUserPoolClientCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: UpdateUserPoolClientCommandInput;
            constructor(input: UpdateUserPoolClientCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateUserPoolClientCommandInput, UpdateUserPoolClientCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateUserPoolCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { UpdateUserPoolRequest, UpdateUserPoolResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_1";
    export interface UpdateUserPoolCommandInput extends UpdateUserPoolRequest {
    }
    export interface UpdateUserPoolCommandOutput extends UpdateUserPoolResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the specified user pool with the specified attributes. You can get a list of
        *             the current user pool settings using <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPool.html">DescribeUserPool</a>. If you don't provide a value for an attribute, it will be
        *             set to the default value.
        *         </p>
        *
        *          <note>
        *             <p>This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers
        *                 require you to register an origination phone number before you can send SMS messages
        *                 to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a
        *                 phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint</a>.
        *                 Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must
        *                 receive SMS messages might not be able to sign up, activate their accounts, or sign
        *                 in.</p>
        *             <p>If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service,
        *                 Amazon Simple Notification Service might place your account in the SMS sandbox. In <i>
        *                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
        *                         mode</a>
        *                </i>, you can send messages only to verified phone
        *                 numbers. After you test your app while in the sandbox environment, you can move out
        *                 of the sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Amazon Cognito user pools</a> in the <i>Amazon Cognito
        *                     Developer Guide</i>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, UpdateUserPoolCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, UpdateUserPoolCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new UpdateUserPoolCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateUserPoolCommandInput} for command's `input` shape.
        * @see {@link UpdateUserPoolCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class UpdateUserPoolCommand extends $Command<UpdateUserPoolCommandInput, UpdateUserPoolCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: UpdateUserPoolCommandInput;
            constructor(input: UpdateUserPoolCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateUserPoolCommandInput, UpdateUserPoolCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/UpdateUserPoolDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { UpdateUserPoolDomainRequest, UpdateUserPoolDomainResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_1";
    export interface UpdateUserPoolDomainCommandInput extends UpdateUserPoolDomainRequest {
    }
    export interface UpdateUserPoolDomainCommandOutput extends UpdateUserPoolDomainResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the Secure Sockets Layer (SSL) certificate for the custom domain for your user
        *             pool.</p>
        *         <p>You can use this operation to provide the Amazon Resource Name (ARN) of a new
        *             certificate to Amazon Cognito. You can't use it to change the domain for a user pool.</p>
        *         <p>A custom domain is used to host the Amazon Cognito hosted UI, which provides sign-up and
        *             sign-in pages for your application. When you set up a custom domain, you provide a
        *             certificate that you manage with Certificate Manager (ACM). When necessary, you can use this
        *             operation to change the certificate that you applied to your custom domain.</p>
        *         <p>Usually, this is unnecessary following routine certificate renewal with ACM. When
        *             you renew your existing certificate in ACM, the ARN for your certificate remains the
        *             same, and your custom domain uses the new certificate automatically.</p>
        *         <p>However, if you replace your existing certificate with a new one, ACM gives the new
        *             certificate a new ARN. To apply the new certificate to your custom domain, you must
        *             provide this ARN to Amazon Cognito.</p>
        *         <p>When you add your new certificate in ACM, you must choose US East (N. Virginia) as
        *             the Amazon Web Services Region.</p>
        *         <p>After you submit your request, Amazon Cognito requires up to 1 hour to distribute your new
        *             certificate to your custom domain.</p>
        *         <p>For more information about adding a custom domain to your user pool, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html">Using Your Own Domain for the Hosted UI</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, UpdateUserPoolDomainCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, UpdateUserPoolDomainCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new UpdateUserPoolDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateUserPoolDomainCommandInput} for command's `input` shape.
        * @see {@link UpdateUserPoolDomainCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class UpdateUserPoolDomainCommand extends $Command<UpdateUserPoolDomainCommandInput, UpdateUserPoolDomainCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: UpdateUserPoolDomainCommandInput;
            constructor(input: UpdateUserPoolDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateUserPoolDomainCommandInput, UpdateUserPoolDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/VerifySoftwareTokenCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { VerifySoftwareTokenRequest, VerifySoftwareTokenResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_1";
    export interface VerifySoftwareTokenCommandInput extends VerifySoftwareTokenRequest {
    }
    export interface VerifySoftwareTokenCommandOutput extends VerifySoftwareTokenResponse, __MetadataBearer {
    }
    /**
        * <p>Use this API to register a user's entered time-based one-time password (TOTP) code and
        *             mark the user's software token MFA status as "verified" if successful. The request takes
        *             an access token or a session string, but not both.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, VerifySoftwareTokenCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, VerifySoftwareTokenCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new VerifySoftwareTokenCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link VerifySoftwareTokenCommandInput} for command's `input` shape.
        * @see {@link VerifySoftwareTokenCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class VerifySoftwareTokenCommand extends $Command<VerifySoftwareTokenCommandInput, VerifySoftwareTokenCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: VerifySoftwareTokenCommandInput;
            constructor(input: VerifySoftwareTokenCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<VerifySoftwareTokenCommandInput, VerifySoftwareTokenCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/commands/VerifyUserAttributeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/CognitoIdentityProviderClient";
    import { VerifyUserAttributeRequest, VerifyUserAttributeResponse } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_1";
    export interface VerifyUserAttributeCommandInput extends VerifyUserAttributeRequest {
    }
    export interface VerifyUserAttributeCommandOutput extends VerifyUserAttributeResponse, __MetadataBearer {
    }
    /**
        * <p>Verifies the specified user attributes in the user pool.</p>
        *         <p>
        *             If your user pool requires verification before Amazon Cognito updates the attribute value,
        *             VerifyUserAttribute updates the affected attribute to its pending value. For more information,
        *             see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UserAttributeUpdateSettingsType.html">
        *             UserAttributeUpdateSettingsType</a>.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CognitoIdentityProviderClient, VerifyUserAttributeCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
        * // const { CognitoIdentityProviderClient, VerifyUserAttributeCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
        * const client = new CognitoIdentityProviderClient(config);
        * const command = new VerifyUserAttributeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link VerifyUserAttributeCommandInput} for command's `input` shape.
        * @see {@link VerifyUserAttributeCommandOutput} for command's `response` shape.
        * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
        *
        */
    export class VerifyUserAttributeCommand extends $Command<VerifyUserAttributeCommandInput, VerifyUserAttributeCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
            readonly input: VerifyUserAttributeCommandInput;
            constructor(input: VerifyUserAttributeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<VerifyUserAttributeCommandInput, VerifyUserAttributeCommandOutput>;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { CognitoIdentityProviderServiceException as __BaseException } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/CognitoIdentityProviderServiceException";
    export enum RecoveryOptionNameType {
            ADMIN_ONLY = "admin_only",
            VERIFIED_EMAIL = "verified_email",
            VERIFIED_PHONE_NUMBER = "verified_phone_number"
    }
    /**
        * <p>A map containing a priority as a key, and recovery method name as a value.</p>
        */
    export interface RecoveryOptionType {
            /**
                * <p>A positive integer specifying priority of a method with 1 being the highest
                *             priority.</p>
                */
            Priority: number | undefined;
            /**
                * <p>The recovery method for a user.</p>
                */
            Name: RecoveryOptionNameType | string | undefined;
    }
    export namespace RecoveryOptionType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RecoveryOptionType) => any;
    }
    /**
        * <p>The data type for <code>AccountRecoverySetting</code>.</p>
        */
    export interface AccountRecoverySettingType {
            /**
                * <p>The list of <code>RecoveryOptionTypes</code>.</p>
                */
            RecoveryMechanisms?: RecoveryOptionType[];
    }
    export namespace AccountRecoverySettingType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountRecoverySettingType) => any;
    }
    export enum AccountTakeoverEventActionType {
            BLOCK = "BLOCK",
            MFA_IF_CONFIGURED = "MFA_IF_CONFIGURED",
            MFA_REQUIRED = "MFA_REQUIRED",
            NO_ACTION = "NO_ACTION"
    }
    /**
        * <p>Account takeover action type.</p>
        */
    export interface AccountTakeoverActionType {
            /**
                * <p>Flag specifying whether to send a notification.</p>
                */
            Notify: boolean | undefined;
            /**
                * <p>The action to take in response to the account takeover action. Valid values are as
                *             follows:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>BLOCK</code> Choosing this action will block the request.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>MFA_IF_CONFIGURED</code> Present an MFA challenge if user has configured
                *                     it, else allow the request.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>MFA_REQUIRED</code> Present an MFA challenge if user has configured it,
                *                     else block the request.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>NO_ACTION</code> Allow the user to sign in.</p>
                *             </li>
                *          </ul>
                */
            EventAction: AccountTakeoverEventActionType | string | undefined;
    }
    export namespace AccountTakeoverActionType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountTakeoverActionType) => any;
    }
    /**
        * <p>Account takeover actions type.</p>
        */
    export interface AccountTakeoverActionsType {
            /**
                * <p>Action to take for a low risk.</p>
                */
            LowAction?: AccountTakeoverActionType;
            /**
                * <p>Action to take for a medium risk.</p>
                */
            MediumAction?: AccountTakeoverActionType;
            /**
                * <p>Action to take for a high risk.</p>
                */
            HighAction?: AccountTakeoverActionType;
    }
    export namespace AccountTakeoverActionsType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountTakeoverActionsType) => any;
    }
    /**
        * <p>The notify email type.</p>
        */
    export interface NotifyEmailType {
            /**
                * <p>The email subject.</p>
                */
            Subject: string | undefined;
            /**
                * <p>The email HTML body.</p>
                */
            HtmlBody?: string;
            /**
                * <p>The email text body.</p>
                */
            TextBody?: string;
    }
    export namespace NotifyEmailType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotifyEmailType) => any;
    }
    /**
        * <p>The notify configuration type.</p>
        */
    export interface NotifyConfigurationType {
            /**
                * <p>The email address that is sending the email. The address must be either individually
                *             verified with Amazon Simple Email Service, or from a domain that has been verified with Amazon SES.</p>
                */
            From?: string;
            /**
                * <p>The destination to which the receiver of an email should reply to.</p>
                */
            ReplyTo?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the identity that is associated with the sending
                *             authorization policy. This identity permits Amazon Cognito to send for the email address
                *             specified in the <code>From</code> parameter.</p>
                */
            SourceArn: string | undefined;
            /**
                * <p>Email template used when a detected risk event is blocked.</p>
                */
            BlockEmail?: NotifyEmailType;
            /**
                * <p>The email template used when a detected risk event is allowed.</p>
                */
            NoActionEmail?: NotifyEmailType;
            /**
                * <p>The multi-factor authentication (MFA) email template used when MFA is challenged as
                *             part of a detected risk.</p>
                */
            MfaEmail?: NotifyEmailType;
    }
    export namespace NotifyConfigurationType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotifyConfigurationType) => any;
    }
    /**
        * <p>Configuration for mitigation actions and notification for different levels of risk
        *             detected for a potential account takeover.</p>
        */
    export interface AccountTakeoverRiskConfigurationType {
            /**
                * <p>The notify configuration used to construct email notifications.</p>
                */
            NotifyConfiguration?: NotifyConfigurationType;
            /**
                * <p>Account takeover risk configuration actions.</p>
                */
            Actions: AccountTakeoverActionsType | undefined;
    }
    export namespace AccountTakeoverRiskConfigurationType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountTakeoverRiskConfigurationType) => any;
    }
    export enum AttributeDataType {
            BOOLEAN = "Boolean",
            DATETIME = "DateTime",
            NUMBER = "Number",
            STRING = "String"
    }
    /**
        * <p>The minimum and maximum values of an attribute that is of the number data type.</p>
        */
    export interface NumberAttributeConstraintsType {
            /**
                * <p>The minimum value of an attribute that is of the number data type.</p>
                */
            MinValue?: string;
            /**
                * <p>The maximum value of an attribute that is of the number data type.</p>
                */
            MaxValue?: string;
    }
    export namespace NumberAttributeConstraintsType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NumberAttributeConstraintsType) => any;
    }
    /**
        * <p>The constraints associated with a string attribute.</p>
        */
    export interface StringAttributeConstraintsType {
            /**
                * <p>The minimum length.</p>
                */
            MinLength?: string;
            /**
                * <p>The maximum length.</p>
                */
            MaxLength?: string;
    }
    export namespace StringAttributeConstraintsType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StringAttributeConstraintsType) => any;
    }
    /**
        * <p>Contains information about the schema attribute.</p>
        */
    export interface SchemaAttributeType {
            /**
                * <p>A schema attribute of the name type.</p>
                */
            Name?: string;
            /**
                * <p>The attribute data type.</p>
                */
            AttributeDataType?: AttributeDataType | string;
            /**
                * <note>
                *             <p>You should use <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UserPoolClientType.html#CognitoUserPools-Type-UserPoolClientType-WriteAttributes">WriteAttributes</a> in the user pool client to control how attributes can
                *                 be mutated for new use cases instead of using
                *                 <code>DeveloperOnlyAttribute</code>.</p>
                *         </note>
                *         <p>Specifies whether the attribute type is developer only. This attribute can only be
                *             modified by an administrator. Users won't be able to modify this attribute using their
                *             access token. For example, <code>DeveloperOnlyAttribute</code> can be modified using
                *             AdminUpdateUserAttributes but can't be updated using UpdateUserAttributes.</p>
                */
            DeveloperOnlyAttribute?: boolean;
            /**
                * <p>Specifies whether the value of the attribute can be changed.</p>
                *         <p>For any user pool attribute that is mapped to an IdP attribute, you must set this
                *             parameter to <code>true</code>. Amazon Cognito updates mapped attributes when users sign in to
                *             your application through an IdP. If an attribute is immutable, Amazon Cognito throws an error
                *             when it attempts to update the attribute. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html">Specifying Identity Provider Attribute Mappings for Your User
                *                 Pool</a>.</p>
                */
            Mutable?: boolean;
            /**
                * <p>Specifies whether a user pool attribute is required. If the attribute is required and
                *             the user doesn't provide a value, registration or sign-in will fail.</p>
                */
            Required?: boolean;
            /**
                * <p>Specifies the constraints for an attribute of the number type.</p>
                */
            NumberAttributeConstraints?: NumberAttributeConstraintsType;
            /**
                * <p>Specifies the constraints for an attribute of the string type.</p>
                */
            StringAttributeConstraints?: StringAttributeConstraintsType;
    }
    export namespace SchemaAttributeType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SchemaAttributeType) => any;
    }
    /**
        * <p>Represents the request to add custom attributes.</p>
        */
    export interface AddCustomAttributesRequest {
            /**
                * <p>The user pool ID for the user pool where you want to add custom attributes.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>An array of custom attributes, such as Mutable and Name.</p>
                */
            CustomAttributes: SchemaAttributeType[] | undefined;
    }
    export namespace AddCustomAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddCustomAttributesRequest) => any;
    }
    /**
        * <p>Represents the response from the server for the request to add custom
        *             attributes.</p>
        */
    export interface AddCustomAttributesResponse {
    }
    export namespace AddCustomAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddCustomAttributesResponse) => any;
    }
    /**
        * <p>This exception is thrown when Amazon Cognito encounters an internal error.</p>
        */
    export class InternalErrorException extends __BaseException {
            readonly name: "InternalErrorException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalErrorException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the Amazon Cognito service encounters an invalid
        *             parameter.</p>
        */
    export class InvalidParameterException extends __BaseException {
            readonly name: "InvalidParameterException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidParameterException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when a user isn't authorized.</p>
        */
    export class NotAuthorizedException extends __BaseException {
            readonly name: "NotAuthorizedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotAuthorizedException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the Amazon Cognito service can't find the requested
        *             resource.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the user has made too many requests for a given
        *             operation.</p>
        */
    export class TooManyRequestsException extends __BaseException {
            readonly name: "TooManyRequestsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when you're trying to modify a user pool while a user import
        *             job is in progress for that pool.</p>
        */
    export class UserImportInProgressException extends __BaseException {
            readonly name: "UserImportInProgressException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UserImportInProgressException, __BaseException>);
    }
    export interface AdminAddUserToGroupRequest {
            /**
                * <p>The user pool ID for the user pool.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The username for the user.</p>
                */
            Username: string | undefined;
            /**
                * <p>The group name.</p>
                */
            GroupName: string | undefined;
    }
    export namespace AdminAddUserToGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminAddUserToGroupRequest) => any;
    }
    /**
        * <p>This exception is thrown when a user isn't found.</p>
        */
    export class UserNotFoundException extends __BaseException {
            readonly name: "UserNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UserNotFoundException, __BaseException>);
    }
    /**
        * <p>Represents the request to confirm user registration.</p>
        */
    export interface AdminConfirmSignUpRequest {
            /**
                * <p>The user pool ID for which you want to confirm user registration.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The user name for which you want to confirm user registration.</p>
                */
            Username: string | undefined;
            /**
                * <p>A map of custom key-value pairs that you can provide as input for any custom workflows
                *             that this action triggers.</p>
                *         <p>If your user pool configuration includes triggers, the AdminConfirmSignUp API action
                *             invokes the Lambda function that is specified for the <i>post
                *                 confirmation</i> trigger. When Amazon Cognito invokes this function, it passes a JSON
                *             payload, which the function receives as input. In this payload, the
                *                 <code>clientMetadata</code> attribute provides the data that you assigned to the
                *             ClientMetadata parameter in your AdminConfirmSignUp request. In your function code in
                *             Lambda, you can process the ClientMetadata value to enhance your workflow for your
                *             specific needs.</p>
                *
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
                * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
                *
                *         <note>
                *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the
                *                 following:</p>
                *             <ul>
                *                <li>
                *                     <p>Store the ClientMetadata value. This data is available only to Lambda
                *                         triggers that are assigned to a user pool to support custom workflows. If
                *                         your user pool configuration doesn't include triggers, the ClientMetadata
                *                         parameter serves no purpose.</p>
                *                 </li>
                *                <li>
                *                     <p>Validate the ClientMetadata value.</p>
                *                 </li>
                *                <li>
                *                     <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive
                *                         information.</p>
                *                 </li>
                *             </ul>
                *         </note>
                */
            ClientMetadata?: Record<string, string>;
    }
    export namespace AdminConfirmSignUpRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminConfirmSignUpRequest) => any;
    }
    /**
        * <p>Represents the response from the server for the request to confirm
        *             registration.</p>
        */
    export interface AdminConfirmSignUpResponse {
    }
    export namespace AdminConfirmSignUpResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminConfirmSignUpResponse) => any;
    }
    /**
        * <p>This exception is thrown when Amazon Cognito encounters an invalid Lambda response.</p>
        */
    export class InvalidLambdaResponseException extends __BaseException {
            readonly name: "InvalidLambdaResponseException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidLambdaResponseException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when a user exceeds the limit for a requested Amazon Web Services
        *             resource.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the user has made too many failed attempts for a given
        *             action, such as sign-in.</p>
        */
    export class TooManyFailedAttemptsException extends __BaseException {
            readonly name: "TooManyFailedAttemptsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyFailedAttemptsException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when Amazon Cognito encounters an unexpected exception with
        *             Lambda.</p>
        */
    export class UnexpectedLambdaException extends __BaseException {
            readonly name: "UnexpectedLambdaException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnexpectedLambdaException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the Amazon Cognito service encounters a user validation exception
        *             with the Lambda service.</p>
        */
    export class UserLambdaValidationException extends __BaseException {
            readonly name: "UserLambdaValidationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UserLambdaValidationException, __BaseException>);
    }
    export enum DeliveryMediumType {
            EMAIL = "EMAIL",
            SMS = "SMS"
    }
    export enum MessageActionType {
            RESEND = "RESEND",
            SUPPRESS = "SUPPRESS"
    }
    /**
        * <p>Specifies whether the attribute is standard or custom.</p>
        */
    export interface AttributeType {
            /**
                * <p>The name of the attribute.</p>
                */
            Name: string | undefined;
            /**
                * <p>The value of the attribute.</p>
                */
            Value?: string;
    }
    export namespace AttributeType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttributeType) => any;
    }
    /**
        * <p>Represents the request to create a user in the specified user pool.</p>
        */
    export interface AdminCreateUserRequest {
            /**
                * <p>The user pool ID for the user pool where the user will be created.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The username for the user. Must be unique within the user pool. Must be a UTF-8 string
                *             between 1 and 128 characters. After the user is created, the username can't be
                *             changed.</p>
                */
            Username: string | undefined;
            /**
                * <p>An array of name-value pairs that contain user attributes and attribute values to be
                *             set for the user to be created. You can create a user without specifying any attributes
                *             other than <code>Username</code>. However, any attributes that you specify as required
                *             (when creating a user pool or in the <b>Attributes</b> tab of
                *             the console) either you should supply (in your call to <code>AdminCreateUser</code>) or
                *             the user should supply (when they sign up in response to your welcome message).</p>
                *         <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the
                *             attribute name.</p>
                *         <p>To send a message inviting the user to sign up, you must specify the user's email
                *             address or phone number. You can do this in your call to AdminCreateUser or in the
                *                 <b>Users</b> tab of the Amazon Cognito console for managing your
                *             user pools.</p>
                *         <p>In your call to <code>AdminCreateUser</code>, you can set the
                *                 <code>email_verified</code> attribute to <code>True</code>, and you can set the
                *                 <code>phone_number_verified</code> attribute to <code>True</code>. You can also do
                *             this by calling <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminUpdateUserAttributes.html">AdminUpdateUserAttributes</a>.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <b>email</b>: The email address of the user to whom
                *                     the message that contains the code and username will be sent. Required if the
                *                         <code>email_verified</code> attribute is set to <code>True</code>, or if
                *                         <code>"EMAIL"</code> is specified in the <code>DesiredDeliveryMediums</code>
                *                     parameter.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <b>phone_number</b>: The phone number of the user to
                *                     whom the message that contains the code and username will be sent. Required if
                *                     the <code>phone_number_verified</code> attribute is set to <code>True</code>, or
                *                     if <code>"SMS"</code> is specified in the <code>DesiredDeliveryMediums</code>
                *                     parameter.</p>
                *             </li>
                *          </ul>
                */
            UserAttributes?: AttributeType[];
            /**
                * <p>The user's validation data. This is an array of name-value pairs that contain user
                *             attributes and attribute values that you can use for custom validation, such as
                *             restricting the types of user accounts that can be registered. For example, you might
                *             choose to allow or disallow user sign-up based on the user's domain.</p>
                *         <p>To configure custom validation, you must create a Pre Sign-up Lambda trigger for
                *             the user pool as described in the Amazon Cognito Developer Guide. The Lambda trigger receives the
                *             validation data and uses it in the validation process.</p>
                *         <p>The user's validation data isn't persisted.</p>
                */
            ValidationData?: AttributeType[];
            /**
                * <p>The user's temporary password. This password must conform to the password policy that
                *             you specified when you created the user pool.</p>
                *         <p>The temporary password is valid only once. To complete the Admin Create User flow, the
                *             user must enter the temporary password in the sign-in page, along with a new password to
                *             be used in all future sign-ins.</p>
                *         <p>This parameter isn't required. If you don't specify a value, Amazon Cognito generates one for
                *             you.</p>
                *         <p>The temporary password can only be used until the user account expiration limit that
                *             you specified when you created the user pool. To reset the account after that time
                *             limit, you must call <code>AdminCreateUser</code> again, specifying
                *                 <code>"RESEND"</code> for the <code>MessageAction</code> parameter.</p>
                */
            TemporaryPassword?: string;
            /**
                * <p>This parameter is used only if the <code>phone_number_verified</code> or
                *                 <code>email_verified</code> attribute is set to <code>True</code>. Otherwise, it is
                *             ignored.</p>
                *         <p>If this parameter is set to <code>True</code> and the phone number or email address
                *             specified in the UserAttributes parameter already exists as an alias with a different
                *             user, the API call will migrate the alias from the previous user to the newly created
                *             user. The previous user will no longer be able to log in using that alias.</p>
                *         <p>If this parameter is set to <code>False</code>, the API throws an
                *                 <code>AliasExistsException</code> error if the alias already exists. The default
                *             value is <code>False</code>.</p>
                */
            ForceAliasCreation?: boolean;
            /**
                * <p>Set to <code>RESEND</code> to resend the invitation message to a user that already
                *             exists and reset the expiration limit on the user's account. Set to
                *                 <code>SUPPRESS</code> to suppress sending the message. You can specify only one
                *             value.</p>
                */
            MessageAction?: MessageActionType | string;
            /**
                * <p>Specify <code>"EMAIL"</code> if email will be used to send the welcome message.
                *             Specify <code>"SMS"</code> if the phone number will be used. The default value is
                *                 <code>"SMS"</code>. You can specify more than one value.</p>
                */
            DesiredDeliveryMediums?: (DeliveryMediumType | string)[];
            /**
                * <p>A map of custom key-value pairs that you can provide as input for any custom workflows
                *             that this action triggers.</p>
                *         <p>You create custom workflows by assigning Lambda functions to user pool triggers.
                *             When you use the AdminCreateUser API action, Amazon Cognito invokes the function that is assigned
                *             to the <i>pre sign-up</i> trigger. When Amazon Cognito invokes this function, it
                *             passes a JSON payload, which the function receives as input. This payload contains a
                *                 <code>clientMetadata</code> attribute, which provides the data that you assigned to
                *             the ClientMetadata parameter in your AdminCreateUser request. In your function code in
                *             Lambda, you can process the <code>clientMetadata</code> value to enhance your
                *             workflow for your specific needs.</p>
                *
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
                * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
                *
                *         <note>
                *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the
                *                 following:</p>
                *             <ul>
                *                <li>
                *                     <p>Store the ClientMetadata value. This data is available only to Lambda
                *                         triggers that are assigned to a user pool to support custom workflows. If
                *                         your user pool configuration doesn't include triggers, the ClientMetadata
                *                         parameter serves no purpose.</p>
                *                 </li>
                *                <li>
                *                     <p>Validate the ClientMetadata value.</p>
                *                 </li>
                *                <li>
                *                     <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive
                *                         information.</p>
                *                 </li>
                *             </ul>
                *         </note>
                */
            ClientMetadata?: Record<string, string>;
    }
    export namespace AdminCreateUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminCreateUserRequest) => any;
    }
    /**
        * <p>
        *             <i>This data type is no longer supported.</i> Applies only to SMS
        *             multi-factor authentication (MFA) configurations. Does not apply to time-based one-time
        *             password (TOTP) software token MFA configurations.</p>
        */
    export interface MFAOptionType {
            /**
                * <p>The delivery medium to send the MFA code. You can use this parameter to set only the
                *                 <code>SMS</code> delivery medium value.</p>
                */
            DeliveryMedium?: DeliveryMediumType | string;
            /**
                * <p>The attribute name of the MFA option type. The only valid value is
                *                 <code>phone_number</code>.</p>
                */
            AttributeName?: string;
    }
    export namespace MFAOptionType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MFAOptionType) => any;
    }
    export enum UserStatusType {
            ARCHIVED = "ARCHIVED",
            COMPROMISED = "COMPROMISED",
            CONFIRMED = "CONFIRMED",
            FORCE_CHANGE_PASSWORD = "FORCE_CHANGE_PASSWORD",
            RESET_REQUIRED = "RESET_REQUIRED",
            UNCONFIRMED = "UNCONFIRMED",
            UNKNOWN = "UNKNOWN"
    }
    /**
        * <p>A user profile in a Amazon Cognito user pool.</p>
        */
    export interface UserType {
            /**
                * <p>The user name of the user you want to describe.</p>
                */
            Username?: string;
            /**
                * <p>A container with information about the user type attributes.</p>
                */
            Attributes?: AttributeType[];
            /**
                * <p>The creation date of the user.</p>
                */
            UserCreateDate?: Date;
            /**
                * <p>The last modified date of the user.</p>
                */
            UserLastModifiedDate?: Date;
            /**
                * <p>Specifies whether the user is enabled.</p>
                */
            Enabled?: boolean;
            /**
                * <p>The user status. This can be one of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>UNCONFIRMED - User has been created but not confirmed.</p>
                *             </li>
                *             <li>
                *                 <p>CONFIRMED - User has been confirmed.</p>
                *             </li>
                *             <li>
                *                 <p>EXTERNAL_PROVIDER - User signed in with a third-party IdP.</p>
                *             </li>
                *             <li>
                *                 <p>ARCHIVED - User is no longer active.</p>
                *             </li>
                *             <li>
                *                 <p>UNKNOWN - User status isn't known.</p>
                *             </li>
                *             <li>
                *                 <p>RESET_REQUIRED - User is confirmed, but the user must request a code and reset
                *                     their password before they can sign in.</p>
                *             </li>
                *             <li>
                *                 <p>FORCE_CHANGE_PASSWORD - The user is confirmed and the user can sign in using a
                *                     temporary password, but on first sign-in, the user must change their password to
                *                     a new value before doing anything else. </p>
                *             </li>
                *          </ul>
                */
            UserStatus?: UserStatusType | string;
            /**
                * <p>The MFA options for the user.</p>
                */
            MFAOptions?: MFAOptionType[];
    }
    export namespace UserType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserType) => any;
    }
    /**
        * <p>Represents the response from the server to the request to create the user.</p>
        */
    export interface AdminCreateUserResponse {
            /**
                * <p>The newly created user.</p>
                */
            User?: UserType;
    }
    export namespace AdminCreateUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminCreateUserResponse) => any;
    }
    /**
        * <p>This exception is thrown when a verification code fails to deliver
        *             successfully.</p>
        */
    export class CodeDeliveryFailureException extends __BaseException {
            readonly name: "CodeDeliveryFailureException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CodeDeliveryFailureException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when Amazon Cognito encounters an invalid password.</p>
        */
    export class InvalidPasswordException extends __BaseException {
            readonly name: "InvalidPasswordException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidPasswordException, __BaseException>);
    }
    /**
        * <p>This exception is returned when the role provided for SMS configuration doesn't have
        *             permission to publish using Amazon SNS.</p>
        */
    export class InvalidSmsRoleAccessPolicyException extends __BaseException {
            readonly name: "InvalidSmsRoleAccessPolicyException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSmsRoleAccessPolicyException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the trust relationship is not valid for the role
        *             provided for SMS configuration. This can happen if you don't trust
        *                 <code>cognito-idp.amazonaws.com</code> or the external ID provided in the role does
        *             not match what is provided in the SMS configuration for the user pool.</p>
        */
    export class InvalidSmsRoleTrustRelationshipException extends __BaseException {
            readonly name: "InvalidSmsRoleTrustRelationshipException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSmsRoleTrustRelationshipException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when a precondition is not met.</p>
        */
    export class PreconditionNotMetException extends __BaseException {
            readonly name: "PreconditionNotMetException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PreconditionNotMetException, __BaseException>);
    }
    /**
        * <p>The request failed because the user is in an unsupported state.</p>
        */
    export class UnsupportedUserStateException extends __BaseException {
            readonly name: "UnsupportedUserStateException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedUserStateException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when Amazon Cognito encounters a user name that already
        *             exists in the user pool.</p>
        */
    export class UsernameExistsException extends __BaseException {
            readonly name: "UsernameExistsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UsernameExistsException, __BaseException>);
    }
    /**
        * <p>The message template structure.</p>
        */
    export interface MessageTemplateType {
            /**
                * <p>The message template for SMS messages.</p>
                */
            SMSMessage?: string;
            /**
                * <p>The message template for email messages. EmailMessage is allowed only if <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount">EmailSendingAccount</a> is DEVELOPER. </p>
                */
            EmailMessage?: string;
            /**
                * <p>The subject line for email messages. EmailSubject is allowed only if <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount">EmailSendingAccount</a> is DEVELOPER. </p>
                */
            EmailSubject?: string;
    }
    export namespace MessageTemplateType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MessageTemplateType) => any;
    }
    /**
        * <p>The configuration for creating a new user profile.</p>
        */
    export interface AdminCreateUserConfigType {
            /**
                * <p>Set to <code>True</code> if only the administrator is allowed to create user profiles.
                *             Set to <code>False</code> if users can sign themselves up via an app.</p>
                */
            AllowAdminCreateUserOnly?: boolean;
            /**
                * <p>The user account expiration limit, in days, after which a new account that hasn't
                *             signed in is no longer usable. To reset the account after that time limit, you must call
                *                 <code>AdminCreateUser</code> again, specifying <code>"RESEND"</code> for the
                *                 <code>MessageAction</code> parameter. The default value for this parameter is 7. </p>
                *         <note>
                *             <p>If you set a value for <code>TemporaryPasswordValidityDays</code> in
                *                     <code>PasswordPolicy</code>, that value will be used, and
                *                     <code>UnusedAccountValidityDays</code> will be no longer be an available
                *                 parameter for that user pool.</p>
                *         </note>
                */
            UnusedAccountValidityDays?: number;
            /**
                * <p>The message template to be used for the welcome message to new users.</p>
                *         <p>See also <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization">Customizing User Invitation Messages</a>.</p>
                */
            InviteMessageTemplate?: MessageTemplateType;
    }
    export namespace AdminCreateUserConfigType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminCreateUserConfigType) => any;
    }
    /**
        * <p>Represents the request to delete a user as an administrator.</p>
        */
    export interface AdminDeleteUserRequest {
            /**
                * <p>The user pool ID for the user pool where you want to delete the user.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The user name of the user you want to delete.</p>
                */
            Username: string | undefined;
    }
    export namespace AdminDeleteUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminDeleteUserRequest) => any;
    }
    /**
        * <p>Represents the request to delete user attributes as an administrator.</p>
        */
    export interface AdminDeleteUserAttributesRequest {
            /**
                * <p>The user pool ID for the user pool where you want to delete user attributes.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The user name of the user from which you would like to delete attributes.</p>
                */
            Username: string | undefined;
            /**
                * <p>An array of strings representing the user attribute names you want to delete.</p>
                *         <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the
                *             attribute name.</p>
                */
            UserAttributeNames: string[] | undefined;
    }
    export namespace AdminDeleteUserAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminDeleteUserAttributesRequest) => any;
    }
    /**
        * <p>Represents the response received from the server for a request to delete user
        *             attributes.</p>
        */
    export interface AdminDeleteUserAttributesResponse {
    }
    export namespace AdminDeleteUserAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminDeleteUserAttributesResponse) => any;
    }
    /**
        * <p>A container for information about an IdP for a user pool.</p>
        */
    export interface ProviderUserIdentifierType {
            /**
                * <p>The name of the provider, such as Facebook, Google, or Login with Amazon.</p>
                */
            ProviderName?: string;
            /**
                * <p>The name of the provider attribute to link to, such as <code>NameID</code>.</p>
                */
            ProviderAttributeName?: string;
            /**
                * <p>The value of the provider attribute to link to, such as
                *             <code>xxxxx_account</code>.</p>
                */
            ProviderAttributeValue?: string;
    }
    export namespace ProviderUserIdentifierType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProviderUserIdentifierType) => any;
    }
    export interface AdminDisableProviderForUserRequest {
            /**
                * <p>The user pool ID for the user pool.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The user to be disabled.</p>
                */
            User: ProviderUserIdentifierType | undefined;
    }
    export namespace AdminDisableProviderForUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminDisableProviderForUserRequest) => any;
    }
    export interface AdminDisableProviderForUserResponse {
    }
    export namespace AdminDisableProviderForUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminDisableProviderForUserResponse) => any;
    }
    /**
        * <p>This exception is thrown when a user tries to confirm the account with an email
        *             address or phone number that has already been supplied as an alias for a different
        *             user profile. This exception indicates that an account with this email address or phone
        *             already exists in a user pool that you've configured to use email address or phone
        *             number as a sign-in alias.</p>
        */
    export class AliasExistsException extends __BaseException {
            readonly name: "AliasExistsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AliasExistsException, __BaseException>);
    }
    /**
        * <p>Represents the request to disable the user as an administrator.</p>
        */
    export interface AdminDisableUserRequest {
            /**
                * <p>The user pool ID for the user pool where you want to disable the user.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The user name of the user you want to disable.</p>
                */
            Username: string | undefined;
    }
    export namespace AdminDisableUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminDisableUserRequest) => any;
    }
    /**
        * <p>Represents the response received from the server to disable the user as an
        *             administrator.</p>
        */
    export interface AdminDisableUserResponse {
    }
    export namespace AdminDisableUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminDisableUserResponse) => any;
    }
    /**
        * <p>Represents the request that enables the user as an administrator.</p>
        */
    export interface AdminEnableUserRequest {
            /**
                * <p>The user pool ID for the user pool where you want to enable the user.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The user name of the user you want to enable.</p>
                */
            Username: string | undefined;
    }
    export namespace AdminEnableUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminEnableUserRequest) => any;
    }
    /**
        * <p>Represents the response from the server for the request to enable a user as an
        *             administrator.</p>
        */
    export interface AdminEnableUserResponse {
    }
    export namespace AdminEnableUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminEnableUserResponse) => any;
    }
    /**
        * <p>Sends the forgot device request, as an administrator.</p>
        */
    export interface AdminForgetDeviceRequest {
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The user name.</p>
                */
            Username: string | undefined;
            /**
                * <p>The device key.</p>
                */
            DeviceKey: string | undefined;
    }
    export namespace AdminForgetDeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminForgetDeviceRequest) => any;
    }
    /**
        * <p>This exception is thrown when the user pool configuration is not valid.</p>
        */
    export class InvalidUserPoolConfigurationException extends __BaseException {
            readonly name: "InvalidUserPoolConfigurationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidUserPoolConfigurationException, __BaseException>);
    }
    /**
        * <p>Represents the request to get the device, as an administrator.</p>
        */
    export interface AdminGetDeviceRequest {
            /**
                * <p>The device key.</p>
                */
            DeviceKey: string | undefined;
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The user name.</p>
                */
            Username: string | undefined;
    }
    export namespace AdminGetDeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminGetDeviceRequest) => any;
    }
    /**
        * <p>The device type.</p>
        */
    export interface DeviceType {
            /**
                * <p>The device key.</p>
                */
            DeviceKey?: string;
            /**
                * <p>The device attributes.</p>
                */
            DeviceAttributes?: AttributeType[];
            /**
                * <p>The creation date of the device.</p>
                */
            DeviceCreateDate?: Date;
            /**
                * <p>The last modified date of the device.</p>
                */
            DeviceLastModifiedDate?: Date;
            /**
                * <p>The date when the device was last authenticated.</p>
                */
            DeviceLastAuthenticatedDate?: Date;
    }
    export namespace DeviceType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeviceType) => any;
    }
    /**
        * <p>Gets the device response, as an administrator.</p>
        */
    export interface AdminGetDeviceResponse {
            /**
                * <p>The device.</p>
                */
            Device: DeviceType | undefined;
    }
    export namespace AdminGetDeviceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminGetDeviceResponse) => any;
    }
    /**
        * <p>Represents the request to get the specified user as an administrator.</p>
        */
    export interface AdminGetUserRequest {
            /**
                * <p>The user pool ID for the user pool where you want to get information about the
                *             user.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The user name of the user you want to retrieve.</p>
                */
            Username: string | undefined;
    }
    export namespace AdminGetUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminGetUserRequest) => any;
    }
    /**
        * <p>Represents the response from the server from the request to get the specified user as
        *             an administrator.</p>
        */
    export interface AdminGetUserResponse {
            /**
                * <p>The user name of the user about whom you're receiving information.</p>
                */
            Username: string | undefined;
            /**
                * <p>An array of name-value pairs representing user attributes.</p>
                */
            UserAttributes?: AttributeType[];
            /**
                * <p>The date the user was created.</p>
                */
            UserCreateDate?: Date;
            /**
                * <p>The date the user was last modified.</p>
                */
            UserLastModifiedDate?: Date;
            /**
                * <p>Indicates that the status is <code>enabled</code>.</p>
                */
            Enabled?: boolean;
            /**
                * <p>The user status. Can be one of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>UNCONFIRMED - User has been created but not confirmed.</p>
                *             </li>
                *             <li>
                *                 <p>CONFIRMED - User has been confirmed.</p>
                *             </li>
                *             <li>
                *                 <p>ARCHIVED - User is no longer active.</p>
                *             </li>
                *             <li>
                *                 <p>UNKNOWN - User status isn't known.</p>
                *             </li>
                *             <li>
                *                 <p>RESET_REQUIRED - User is confirmed, but the user must request a code and reset
                *                     their password before they can sign in.</p>
                *             </li>
                *             <li>
                *                 <p>FORCE_CHANGE_PASSWORD - The user is confirmed and the user can sign in using a
                *                     temporary password, but on first sign-in, the user must change their password to
                *                     a new value before doing anything else. </p>
                *             </li>
                *          </ul>
                */
            UserStatus?: UserStatusType | string;
            /**
                * <p>
                *             <i>This response parameter is no longer supported.</i> It provides
                *             information only about SMS MFA configurations. It doesn't provide information about
                *             time-based one-time password (TOTP) software token MFA configurations. To look up
                *             information about either type of MFA configuration, use UserMFASettingList
                *             instead.</p>
                */
            MFAOptions?: MFAOptionType[];
            /**
                * <p>The user's preferred MFA setting.</p>
                */
            PreferredMfaSetting?: string;
            /**
                * <p>The MFA options that are activated for the user. The possible values in this list are
                *                 <code>SMS_MFA</code> and <code>SOFTWARE_TOKEN_MFA</code>.</p>
                */
            UserMFASettingList?: string[];
    }
    export namespace AdminGetUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminGetUserResponse) => any;
    }
    /**
        * <p>An Amazon Pinpoint analytics endpoint.</p>
        *         <p>An endpoint uniquely identifies a mobile device, email address, or phone number that
        *             can receive messages from Amazon Pinpoint analytics. For more information about Amazon Web Services Regions that
        *             can contain Amazon Pinpoint resources for use with Amazon Cognito user pools, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-pinpoint-integration.html">Using Amazon Pinpoint analytics with Amazon Cognito user pools</a>.</p>
        */
    export interface AnalyticsMetadataType {
            /**
                * <p>The endpoint ID.</p>
                */
            AnalyticsEndpointId?: string;
    }
    export namespace AnalyticsMetadataType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AnalyticsMetadataType) => any;
    }
    export enum AuthFlowType {
            ADMIN_NO_SRP_AUTH = "ADMIN_NO_SRP_AUTH",
            ADMIN_USER_PASSWORD_AUTH = "ADMIN_USER_PASSWORD_AUTH",
            CUSTOM_AUTH = "CUSTOM_AUTH",
            REFRESH_TOKEN = "REFRESH_TOKEN",
            REFRESH_TOKEN_AUTH = "REFRESH_TOKEN_AUTH",
            USER_PASSWORD_AUTH = "USER_PASSWORD_AUTH",
            USER_SRP_AUTH = "USER_SRP_AUTH"
    }
    /**
        * <p>The HTTP header.</p>
        */
    export interface HttpHeader {
            /**
                * <p>The header name.</p>
                */
            headerName?: string;
            /**
                * <p>The header value.</p>
                */
            headerValue?: string;
    }
    export namespace HttpHeader {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HttpHeader) => any;
    }
    /**
        * <p>Contextual user data type used for evaluating the risk of an unexpected event by Amazon Cognito
        *             advanced security.</p>
        */
    export interface ContextDataType {
            /**
                * <p>The source IP address of your user's device.</p>
                */
            IpAddress: string | undefined;
            /**
                * <p>Your server endpoint where this API is invoked.</p>
                */
            ServerName: string | undefined;
            /**
                * <p>Your server path where this API is invoked.</p>
                */
            ServerPath: string | undefined;
            /**
                * <p>HttpHeaders received on your server in same order.</p>
                */
            HttpHeaders: HttpHeader[] | undefined;
            /**
                * <p>Encoded device-fingerprint details that your app collected with the Amazon Cognito
                *             context data collection library. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-adaptive-authentication.html#user-pool-settings-adaptive-authentication-device-fingerprint">Adding user device and session data to API requests</a>.</p>
                */
            EncodedData?: string;
    }
    export namespace ContextDataType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContextDataType) => any;
    }
    /**
        * <p>Initiates the authorization request, as an administrator.</p>
        */
    export interface AdminInitiateAuthRequest {
            /**
                * <p>The ID of the Amazon Cognito user pool.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The app client ID.</p>
                */
            ClientId: string | undefined;
            /**
                * <p>The authentication flow for this call to run. The API action will depend on this
                *             value. For example:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>REFRESH_TOKEN_AUTH</code> will take in a valid refresh token and return
                *                     new tokens.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>USER_SRP_AUTH</code> will take in <code>USERNAME</code> and
                *                         <code>SRP_A</code> and return the Secure Remote Password (SRP) protocol
                *                     variables to be used for next challenge execution.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ADMIN_USER_PASSWORD_AUTH</code> will take in <code>USERNAME</code> and
                *                         <code>PASSWORD</code> and return the next challenge or tokens.</p>
                *             </li>
                *          </ul>
                *         <p>Valid values include:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>USER_SRP_AUTH</code>: Authentication flow for the Secure Remote Password
                *                     (SRP) protocol.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>REFRESH_TOKEN_AUTH</code>/<code>REFRESH_TOKEN</code>: Authentication
                *                     flow for refreshing the access token and ID token by supplying a valid refresh
                *                     token.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>CUSTOM_AUTH</code>: Custom authentication flow.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ADMIN_NO_SRP_AUTH</code>: Non-SRP authentication flow; you can pass in
                *                     the USERNAME and PASSWORD directly if the flow is enabled for calling the app
                *                     client.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ADMIN_USER_PASSWORD_AUTH</code>: Admin-based user password
                *                     authentication. This replaces the <code>ADMIN_NO_SRP_AUTH</code> authentication
                *                     flow. In this flow, Amazon Cognito receives the password in the request instead of using
                *                     the SRP process to verify passwords.</p>
                *             </li>
                *          </ul>
                */
            AuthFlow: AuthFlowType | string | undefined;
            /**
                * <p>The authentication parameters. These are inputs corresponding to the
                *                 <code>AuthFlow</code> that you're invoking. The required values depend on the value
                *             of <code>AuthFlow</code>:</p>
                *         <ul>
                *             <li>
                *                 <p>For <code>USER_SRP_AUTH</code>: <code>USERNAME</code> (required),
                *                         <code>SRP_A</code> (required), <code>SECRET_HASH</code> (required if the app
                *                     client is configured with a client secret), <code>DEVICE_KEY</code>.</p>
                *             </li>
                *             <li>
                *                 <p>For <code>REFRESH_TOKEN_AUTH/REFRESH_TOKEN</code>: <code>REFRESH_TOKEN</code>
                *                     (required), <code>SECRET_HASH</code> (required if the app client is configured
                *                     with a client secret), <code>DEVICE_KEY</code>.</p>
                *             </li>
                *             <li>
                *                 <p>For <code>ADMIN_NO_SRP_AUTH</code>: <code>USERNAME</code> (required),
                *                         <code>SECRET_HASH</code> (if app client is configured with client secret),
                *                         <code>PASSWORD</code> (required), <code>DEVICE_KEY</code>.</p>
                *             </li>
                *             <li>
                *                 <p>For <code>CUSTOM_AUTH</code>: <code>USERNAME</code> (required),
                *                         <code>SECRET_HASH</code> (if app client is configured with client secret),
                *                         <code>DEVICE_KEY</code>. To start the authentication flow with password
                *                     verification, include <code>ChallengeName: SRP_A</code> and <code>SRP_A: (The
                *                         SRP_A Value)</code>.</p>
                *             </li>
                *          </ul>
                */
            AuthParameters?: Record<string, string>;
            /**
                * <p>A map of custom key-value pairs that you can provide as input for certain custom
                *             workflows that this action triggers.</p>
                *         <p>You create custom workflows by assigning Lambda functions to user pool triggers.
                *             When you use the AdminInitiateAuth API action, Amazon Cognito invokes the Lambda functions that
                *             are specified for various triggers. The ClientMetadata value is passed as input to the
                *             functions for only the following triggers:</p>
                *         <ul>
                *             <li>
                *                 <p>Pre signup</p>
                *             </li>
                *             <li>
                *                 <p>Pre authentication</p>
                *             </li>
                *             <li>
                *                 <p>User migration</p>
                *             </li>
                *          </ul>
                *         <p>When Amazon Cognito invokes the functions for these triggers, it passes a JSON payload, which
                *             the function receives as input. This payload contains a <code>validationData</code>
                *             attribute, which provides the data that you assigned to the ClientMetadata parameter in
                *             your AdminInitiateAuth request. In your function code in Lambda, you can process the
                *                 <code>validationData</code> value to enhance your workflow for your specific
                *             needs.</p>
                *         <p>When you use the AdminInitiateAuth API action, Amazon Cognito also invokes the functions for
                *             the following triggers, but it doesn't provide the ClientMetadata value as input:</p>
                *         <ul>
                *             <li>
                *                 <p>Post authentication</p>
                *             </li>
                *             <li>
                *                 <p>Custom message</p>
                *             </li>
                *             <li>
                *                 <p>Pre token generation</p>
                *             </li>
                *             <li>
                *                 <p>Create auth challenge</p>
                *             </li>
                *             <li>
                *                 <p>Define auth challenge</p>
                *             </li>
                *             <li>
                *                 <p>Verify auth challenge</p>
                *             </li>
                *          </ul>
                *
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
                * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
                *
                *         <note>
                *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the
                *                 following:</p>
                *             <ul>
                *                <li>
                *                     <p>Store the ClientMetadata value. This data is available only to Lambda
                *                         triggers that are assigned to a user pool to support custom workflows. If
                *                         your user pool configuration doesn't include triggers, the ClientMetadata
                *                         parameter serves no purpose.</p>
                *                 </li>
                *                <li>
                *                     <p>Validate the ClientMetadata value.</p>
                *                 </li>
                *                <li>
                *                     <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive
                *                         information.</p>
                *                 </li>
                *             </ul>
                *         </note>
                */
            ClientMetadata?: Record<string, string>;
            /**
                * <p>The analytics metadata for collecting Amazon Pinpoint metrics for
                *                 <code>AdminInitiateAuth</code> calls.</p>
                */
            AnalyticsMetadata?: AnalyticsMetadataType;
            /**
                * <p>Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced
                * security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito
                * when it makes API requests.</p>
                */
            ContextData?: ContextDataType;
    }
    export namespace AdminInitiateAuthRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminInitiateAuthRequest) => any;
    }
    /**
        * <p>The new device metadata type.</p>
        */
    export interface NewDeviceMetadataType {
            /**
                * <p>The device key.</p>
                */
            DeviceKey?: string;
            /**
                * <p>The device group key.</p>
                */
            DeviceGroupKey?: string;
    }
    export namespace NewDeviceMetadataType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NewDeviceMetadataType) => any;
    }
    /**
        * <p>The authentication result.</p>
        */
    export interface AuthenticationResultType {
            /**
                * <p>A valid access token that Amazon Cognito issued to the user who you want to
                *             authenticate.</p>
                */
            AccessToken?: string;
            /**
                * <p>The expiration period of the authentication result in seconds.</p>
                */
            ExpiresIn?: number;
            /**
                * <p>The token type.</p>
                */
            TokenType?: string;
            /**
                * <p>The refresh token.</p>
                */
            RefreshToken?: string;
            /**
                * <p>The ID token.</p>
                */
            IdToken?: string;
            /**
                * <p>The new device metadata from an authentication result.</p>
                */
            NewDeviceMetadata?: NewDeviceMetadataType;
    }
    export namespace AuthenticationResultType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AuthenticationResultType) => any;
    }
    export enum ChallengeNameType {
            ADMIN_NO_SRP_AUTH = "ADMIN_NO_SRP_AUTH",
            CUSTOM_CHALLENGE = "CUSTOM_CHALLENGE",
            DEVICE_PASSWORD_VERIFIER = "DEVICE_PASSWORD_VERIFIER",
            DEVICE_SRP_AUTH = "DEVICE_SRP_AUTH",
            MFA_SETUP = "MFA_SETUP",
            NEW_PASSWORD_REQUIRED = "NEW_PASSWORD_REQUIRED",
            PASSWORD_VERIFIER = "PASSWORD_VERIFIER",
            SELECT_MFA_TYPE = "SELECT_MFA_TYPE",
            SMS_MFA = "SMS_MFA",
            SOFTWARE_TOKEN_MFA = "SOFTWARE_TOKEN_MFA"
    }
    /**
        * <p>Initiates the authentication response, as an administrator.</p>
        */
    export interface AdminInitiateAuthResponse {
            /**
                * <p>The name of the challenge that you're responding to with this call. This is returned
                *             in the <code>AdminInitiateAuth</code> response if you must pass another
                *             challenge.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>MFA_SETUP</code>: If MFA is required, users who don't have at least one
                *                     of the MFA methods set up are presented with an <code>MFA_SETUP</code>
                *                     challenge. The user must set up at least one MFA type to continue to
                *                     authenticate.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SELECT_MFA_TYPE</code>: Selects the MFA type. Valid MFA options are
                *                         <code>SMS_MFA</code> for text SMS MFA, and <code>SOFTWARE_TOKEN_MFA</code>
                *                     for time-based one-time password (TOTP) software token MFA.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SMS_MFA</code>: Next challenge is to supply an
                *                     <code>SMS_MFA_CODE</code>, delivered via SMS.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>PASSWORD_VERIFIER</code>: Next challenge is to supply
                *                         <code>PASSWORD_CLAIM_SIGNATURE</code>,
                *                         <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, and <code>TIMESTAMP</code> after
                *                     the client-side SRP calculations.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>CUSTOM_CHALLENGE</code>: This is returned if your custom authentication
                *                     flow determines that the user should pass another challenge before tokens are
                *                     issued.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DEVICE_SRP_AUTH</code>: If device tracking was activated in your user
                *                     pool and the previous challenges were passed, this challenge is returned so that
                *                     Amazon Cognito can start tracking this device.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DEVICE_PASSWORD_VERIFIER</code>: Similar to
                *                         <code>PASSWORD_VERIFIER</code>, but for devices only.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ADMIN_NO_SRP_AUTH</code>: This is returned if you must authenticate with
                *                         <code>USERNAME</code> and <code>PASSWORD</code> directly. An app client must
                *                     be enabled to use this flow.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>NEW_PASSWORD_REQUIRED</code>: For users who are required to change their
                *                     passwords after successful first login. Respond to this challenge with
                *                         <code>NEW_PASSWORD</code> and any required attributes that Amazon Cognito returned in
                *                     the <code>requiredAttributes</code> parameter. You can also set values for
                *                     attributes that aren't required by your user pool and that your app client can
                *                     write. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminRespondToAuthChallenge.html">AdminRespondToAuthChallenge</a>.</p>
                *
                *                <note>
                *                   <p>In a <code>NEW_PASSWORD_REQUIRED</code> challenge response, you can't modify a required attribute that already has a value.
                * In <code>AdminRespondToAuthChallenge</code>, set a value for any keys that Amazon Cognito returned in the <code>requiredAttributes</code> parameter,
                * then use the <code>AdminUpdateUserAttributes</code> API operation to modify the value of any additional attributes.</p>
                *                </note>
                *
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>MFA_SETUP</code>: For users who are required to set up an MFA factor
                *                     before they can sign in. The MFA types activated for the user pool will be
                *                     listed in the challenge parameters <code>MFA_CAN_SETUP</code> value. </p>
                *                 <p> To set up software token MFA, use the session returned here from
                *                         <code>InitiateAuth</code> as an input to
                *                     <code>AssociateSoftwareToken</code>, and use the session returned by
                *                         <code>VerifySoftwareToken</code> as an input to
                *                         <code>RespondToAuthChallenge</code> with challenge name
                *                         <code>MFA_SETUP</code> to complete sign-in. To set up SMS MFA, users will
                *                     need help from an administrator to add a phone number to their account and then
                *                     call <code>InitiateAuth</code> again to restart sign-in.</p>
                *             </li>
                *          </ul>
                */
            ChallengeName?: ChallengeNameType | string;
            /**
                * <p>The session that should be passed both ways in challenge-response calls to the
                *             service. If <code>AdminInitiateAuth</code> or <code>AdminRespondToAuthChallenge</code>
                *             API call determines that the caller must pass another challenge, they return a session
                *             with other challenge parameters. This session should be passed as it is to the next
                *                 <code>AdminRespondToAuthChallenge</code> API call.</p>
                */
            Session?: string;
            /**
                * <p>The challenge parameters. These are returned to you in the
                *                 <code>AdminInitiateAuth</code> response if you must pass another challenge. The
                *             responses in this parameter should be used to compute inputs to the next call
                *                 (<code>AdminRespondToAuthChallenge</code>).</p>
                *         <p>All challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if
                *             applicable).</p>
                *         <p>The value of the <code>USER_ID_FOR_SRP</code> attribute is the user's actual username,
                *             not an alias (such as email address or phone number), even if you specified an alias in
                *             your call to <code>AdminInitiateAuth</code>. This happens because, in the
                *                 <code>AdminRespondToAuthChallenge</code> API <code>ChallengeResponses</code>, the
                *                 <code>USERNAME</code> attribute can't be an alias.</p>
                */
            ChallengeParameters?: Record<string, string>;
            /**
                * <p>The result of the authentication response. This is only returned if the caller doesn't
                *             need to pass another challenge. If the caller does need to pass another challenge before
                *             it gets tokens, <code>ChallengeName</code>, <code>ChallengeParameters</code>, and
                *                 <code>Session</code> are returned.</p>
                */
            AuthenticationResult?: AuthenticationResultType;
    }
    export namespace AdminInitiateAuthResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminInitiateAuthResponse) => any;
    }
    /**
        * <p>This exception is thrown when Amazon Cognito can't find a multi-factor authentication
        *             (MFA) method.</p>
        */
    export class MFAMethodNotFoundException extends __BaseException {
            readonly name: "MFAMethodNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MFAMethodNotFoundException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when a password reset is required.</p>
        */
    export class PasswordResetRequiredException extends __BaseException {
            readonly name: "PasswordResetRequiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PasswordResetRequiredException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when a user isn't confirmed successfully.</p>
        */
    export class UserNotConfirmedException extends __BaseException {
            readonly name: "UserNotConfirmedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UserNotConfirmedException, __BaseException>);
    }
    export interface AdminLinkProviderForUserRequest {
            /**
                * <p>The user pool ID for the user pool.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The existing user in the user pool that you want to assign to the external IdP user
                *             account. This user can be a native (Username + Password) Amazon Cognito user pools user or a
                *             federated user (for example, a SAML or Facebook user). If the user doesn't exist, Amazon Cognito
                *             generates an exception. Amazon Cognito returns this user when the new user (with the linked IdP
                *             attribute) signs in.</p>
                *         <p>For a native username + password user, the <code>ProviderAttributeValue</code> for the
                *                 <code>DestinationUser</code> should be the username in the user pool. For a
                *             federated user, it should be the provider-specific <code>user_id</code>.</p>
                *         <p>The <code>ProviderAttributeName</code> of the <code>DestinationUser</code> is
                *             ignored.</p>
                *         <p>The <code>ProviderName</code> should be set to <code>Cognito</code> for users in
                *             Cognito user pools.</p>
                *         <important>
                *             <p>All attributes in the DestinationUser profile must be mutable. If you have
                *                 assigned the user any immutable custom attributes, the operation won't
                *                 succeed.</p>
                *         </important>
                */
            DestinationUser: ProviderUserIdentifierType | undefined;
            /**
                * <p>An external IdP account for a user who doesn't exist yet in the user pool. This user
                *             must be a federated user (for example, a SAML or Facebook user), not another native
                *             user.</p>
                *         <p>If the <code>SourceUser</code> is using a federated social IdP, such as Facebook,
                *             Google, or Login with Amazon, you must set the <code>ProviderAttributeName</code> to
                *                 <code>Cognito_Subject</code>. For social IdPs, the <code>ProviderName</code> will be
                *                 <code>Facebook</code>, <code>Google</code>, or <code>LoginWithAmazon</code>, and
                *             Amazon Cognito will automatically parse the Facebook, Google, and Login with Amazon tokens for
                *                 <code>id</code>, <code>sub</code>, and <code>user_id</code>, respectively. The
                *                 <code>ProviderAttributeValue</code> for the user must be the same value as the
                *                 <code>id</code>, <code>sub</code>, or <code>user_id</code> value found in the social
                *             IdP token.</p>
                *         <p></p>
                *         <p>For SAML, the <code>ProviderAttributeName</code> can be any value that matches a claim
                *             in the SAML assertion. If you want to link SAML users based on the subject of the SAML
                *             assertion, you should map the subject to a claim through the SAML IdP and submit that
                *             claim name as the <code>ProviderAttributeName</code>. If you set
                *                 <code>ProviderAttributeName</code> to <code>Cognito_Subject</code>, Amazon Cognito will
                *             automatically parse the default unique identifier found in the subject from the SAML
                *             token.</p>
                */
            SourceUser: ProviderUserIdentifierType | undefined;
    }
    export namespace AdminLinkProviderForUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminLinkProviderForUserRequest) => any;
    }
    export interface AdminLinkProviderForUserResponse {
    }
    export namespace AdminLinkProviderForUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminLinkProviderForUserResponse) => any;
    }
    /**
        * <p>Represents the request to list devices, as an administrator.</p>
        */
    export interface AdminListDevicesRequest {
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The user name.</p>
                */
            Username: string | undefined;
            /**
                * <p>The limit of the devices request.</p>
                */
            Limit?: number;
            /**
                * <p>The pagination token.</p>
                */
            PaginationToken?: string;
    }
    export namespace AdminListDevicesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminListDevicesRequest) => any;
    }
    /**
        * <p>Lists the device's response, as an administrator.</p>
        */
    export interface AdminListDevicesResponse {
            /**
                * <p>The devices in the list of devices response.</p>
                */
            Devices?: DeviceType[];
            /**
                * <p>The pagination token.</p>
                */
            PaginationToken?: string;
    }
    export namespace AdminListDevicesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminListDevicesResponse) => any;
    }
    export interface AdminListGroupsForUserRequest {
            /**
                * <p>The username for the user.</p>
                */
            Username: string | undefined;
            /**
                * <p>The user pool ID for the user pool.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The limit of the request to list groups.</p>
                */
            Limit?: number;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can be
                *             used to return the next set of items in the list.</p>
                */
            NextToken?: string;
    }
    export namespace AdminListGroupsForUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminListGroupsForUserRequest) => any;
    }
    /**
        * <p>The group type.</p>
        */
    export interface GroupType {
            /**
                * <p>The name of the group.</p>
                */
            GroupName?: string;
            /**
                * <p>The user pool ID for the user pool.</p>
                */
            UserPoolId?: string;
            /**
                * <p>A string containing the description of the group.</p>
                */
            Description?: string;
            /**
                * <p>The role Amazon Resource Name (ARN) for the group.</p>
                */
            RoleArn?: string;
            /**
                * <p>A non-negative integer value that specifies the precedence of this group relative to
                *             the other groups that a user can belong to in the user pool. Zero is the highest
                *             precedence value. Groups with lower <code>Precedence</code> values take precedence over
                *             groups with higher ornull <code>Precedence</code> values. If a user belongs to two or
                *             more groups, it is the group with the lowest precedence value whose role ARN is given in
                *             the user's tokens for the <code>cognito:roles</code> and
                *                 <code>cognito:preferred_role</code> claims.</p>
                *         <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither
                *             group takes precedence over the other. If two groups with the same
                *                 <code>Precedence</code> have the same role ARN, that role is used in the
                *                 <code>cognito:preferred_role</code> claim in tokens for users in each group. If the
                *             two groups have different role ARNs, the <code>cognito:preferred_role</code> claim isn't
                *             set in users' tokens.</p>
                *         <p>The default <code>Precedence</code> value is null.</p>
                */
            Precedence?: number;
            /**
                * <p>The date the group was last modified.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>The date the group was created.</p>
                */
            CreationDate?: Date;
    }
    export namespace GroupType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupType) => any;
    }
    export interface AdminListGroupsForUserResponse {
            /**
                * <p>The groups that the user belongs to.</p>
                */
            Groups?: GroupType[];
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can be
                *             used to return the next set of items in the list.</p>
                */
            NextToken?: string;
    }
    export namespace AdminListGroupsForUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminListGroupsForUserResponse) => any;
    }
    export interface AdminListUserAuthEventsRequest {
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The user pool username or an alias.</p>
                */
            Username: string | undefined;
            /**
                * <p>The maximum number of authentication events to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>A pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace AdminListUserAuthEventsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminListUserAuthEventsRequest) => any;
    }
    export enum ChallengeName {
            Mfa = "Mfa",
            Password = "Password"
    }
    export enum ChallengeResponse {
            Failure = "Failure",
            Success = "Success"
    }
    /**
        * <p>The challenge response type.</p>
        */
    export interface ChallengeResponseType {
            /**
                * <p>The challenge name.</p>
                */
            ChallengeName?: ChallengeName | string;
            /**
                * <p>The challenge response.</p>
                */
            ChallengeResponse?: ChallengeResponse | string;
    }
    export namespace ChallengeResponseType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChallengeResponseType) => any;
    }
    /**
        * <p>Specifies the user context data captured at the time of an event request.</p>
        */
    export interface EventContextDataType {
            /**
                * <p>The source IP address of your user's device.</p>
                */
            IpAddress?: string;
            /**
                * <p>The user's device name.</p>
                */
            DeviceName?: string;
            /**
                * <p>The user's time zone.</p>
                */
            Timezone?: string;
            /**
                * <p>The user's city.</p>
                */
            City?: string;
            /**
                * <p>The user's country.</p>
                */
            Country?: string;
    }
    export namespace EventContextDataType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventContextDataType) => any;
    }
    export enum FeedbackValueType {
            INVALID = "Invalid",
            VALID = "Valid"
    }
    /**
        * <p>Specifies the event feedback type.</p>
        */
    export interface EventFeedbackType {
            /**
                * <p>The event feedback value.</p>
                */
            FeedbackValue: FeedbackValueType | string | undefined;
            /**
                * <p>The provider.</p>
                */
            Provider: string | undefined;
            /**
                * <p>The event feedback date.</p>
                */
            FeedbackDate?: Date;
    }
    export namespace EventFeedbackType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventFeedbackType) => any;
    }
    export enum EventResponseType {
            Failure = "Failure",
            Success = "Success"
    }
    export enum RiskDecisionType {
            AccountTakeover = "AccountTakeover",
            Block = "Block",
            NoRisk = "NoRisk"
    }
    export enum RiskLevelType {
            High = "High",
            Low = "Low",
            Medium = "Medium"
    }
    /**
        * <p>The event risk type.</p>
        */
    export interface EventRiskType {
            /**
                * <p>The risk decision.</p>
                */
            RiskDecision?: RiskDecisionType | string;
            /**
                * <p>The risk level.</p>
                */
            RiskLevel?: RiskLevelType | string;
            /**
                * <p>Indicates whether compromised credentials were detected during an authentication
                *             event.</p>
                */
            CompromisedCredentialsDetected?: boolean;
    }
    export namespace EventRiskType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventRiskType) => any;
    }
    export enum EventType {
            ForgotPassword = "ForgotPassword",
            SignIn = "SignIn",
            SignUp = "SignUp"
    }
    /**
        * <p>The authentication event type.</p>
        */
    export interface AuthEventType {
            /**
                * <p>The event ID.</p>
                */
            EventId?: string;
            /**
                * <p>The event type.</p>
                */
            EventType?: EventType | string;
            /**
                * <p>The creation date</p>
                */
            CreationDate?: Date;
            /**
                * <p>The event response.</p>
                */
            EventResponse?: EventResponseType | string;
            /**
                * <p>The event risk.</p>
                */
            EventRisk?: EventRiskType;
            /**
                * <p>The challenge responses.</p>
                */
            ChallengeResponses?: ChallengeResponseType[];
            /**
                * <p>The user context data captured at the time of an event request. This value provides
                *             additional information about the client from which event the request is received.</p>
                */
            EventContextData?: EventContextDataType;
            /**
                * <p>A flag specifying the user feedback captured at the time of an event request is good
                *             or bad. </p>
                */
            EventFeedback?: EventFeedbackType;
    }
    export namespace AuthEventType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AuthEventType) => any;
    }
    export interface AdminListUserAuthEventsResponse {
            /**
                * <p>The response object. It includes the <code>EventID</code>, <code>EventType</code>,
                *                 <code>CreationDate</code>, <code>EventRisk</code>, and
                *             <code>EventResponse</code>.</p>
                */
            AuthEvents?: AuthEventType[];
            /**
                * <p>A pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace AdminListUserAuthEventsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminListUserAuthEventsResponse) => any;
    }
    /**
        * <p>This exception is thrown when user pool add-ons aren't enabled.</p>
        */
    export class UserPoolAddOnNotEnabledException extends __BaseException {
            readonly name: "UserPoolAddOnNotEnabledException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UserPoolAddOnNotEnabledException, __BaseException>);
    }
    export interface AdminRemoveUserFromGroupRequest {
            /**
                * <p>The user pool ID for the user pool.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The username for the user.</p>
                */
            Username: string | undefined;
            /**
                * <p>The group name.</p>
                */
            GroupName: string | undefined;
    }
    export namespace AdminRemoveUserFromGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminRemoveUserFromGroupRequest) => any;
    }
    /**
        * <p>Represents the request to reset a user's password as an administrator.</p>
        */
    export interface AdminResetUserPasswordRequest {
            /**
                * <p>The user pool ID for the user pool where you want to reset the user's password.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The user name of the user whose password you want to reset.</p>
                */
            Username: string | undefined;
            /**
                * <p>A map of custom key-value pairs that you can provide as input for any custom workflows
                *             that this action triggers.</p>
                *         <p>You create custom workflows by assigning Lambda functions to user pool
                *             triggers. When you use the AdminResetUserPassword API action, Amazon Cognito invokes the function
                *             that is assigned to the <i>custom message</i> trigger. When Amazon Cognito invokes
                *             this function, it passes a JSON payload, which the function receives as input. This
                *             payload contains a <code>clientMetadata</code> attribute, which provides the data that
                *             you assigned to the ClientMetadata parameter in your AdminResetUserPassword request. In
                *             your function code in Lambda, you can process the
                *                 <code>clientMetadata</code> value to enhance your workflow for your specific needs. </p>
                *
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
                * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
                *
                *         <note>
                *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the
                *                 following:</p>
                *             <ul>
                *                <li>
                *                     <p>Store the ClientMetadata value. This data is available only to Lambda
                *                         triggers that are assigned to a user pool to support custom workflows. If
                *                         your user pool configuration doesn't include triggers, the ClientMetadata
                *                         parameter serves no purpose.</p>
                *                 </li>
                *                <li>
                *                     <p>Validate the ClientMetadata value.</p>
                *                 </li>
                *                <li>
                *                     <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive
                *                         information.</p>
                *                 </li>
                *             </ul>
                *         </note>
                */
            ClientMetadata?: Record<string, string>;
    }
    export namespace AdminResetUserPasswordRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminResetUserPasswordRequest) => any;
    }
    /**
        * <p>Represents the response from the server to reset a user password as an
        *             administrator.</p>
        */
    export interface AdminResetUserPasswordResponse {
    }
    export namespace AdminResetUserPasswordResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminResetUserPasswordResponse) => any;
    }
    /**
        * <p>This exception is thrown when Amazon Cognito isn't allowed to use your email identity. HTTP
        *             status code: 400.</p>
        */
    export class InvalidEmailRoleAccessPolicyException extends __BaseException {
            readonly name: "InvalidEmailRoleAccessPolicyException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidEmailRoleAccessPolicyException, __BaseException>);
    }
    /**
        * <p>The request to respond to the authentication challenge, as an administrator.</p>
        */
    export interface AdminRespondToAuthChallengeRequest {
            /**
                * <p>The ID of the Amazon Cognito user pool.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The app client ID.</p>
                */
            ClientId: string | undefined;
            /**
                * <p>The challenge name. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminInitiateAuth.html">AdminInitiateAuth</a>.</p>
                */
            ChallengeName: ChallengeNameType | string | undefined;
            /**
                * <p>The challenge responses. These are inputs corresponding to the value of
                *                 <code>ChallengeName</code>, for example:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>,
                *                         <code>SECRET_HASH</code> (if app client is configured with client
                *                     secret).</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>,
                *                         <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>,
                *                         <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured
                *                     with client secret).</p>
                *                 <note>
                *                     <p>
                *                      <code>PASSWORD_VERIFIER</code> requires <code>DEVICE_KEY</code> when
                *                         signing in with a remembered device.</p>
                *                 </note>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>ADMIN_NO_SRP_AUTH</code>: <code>PASSWORD</code>, <code>USERNAME</code>,
                *                         <code>SECRET_HASH</code> (if app client is configured with client secret).
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>,
                *                         <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured
                *                     with client secret). To set any required attributes that Amazon Cognito returned as
                *                         <code>requiredAttributes</code> in the <code>AdminInitiateAuth</code>
                *                     response, add a <code>userAttributes.<i>attributename</i>
                *                   </code>
                *                     parameter. This parameter can also set values for writable attributes that
                *                     aren't required by your user pool.</p>
                *
                *                <note>
                *                   <p>In a <code>NEW_PASSWORD_REQUIRED</code> challenge response, you can't modify a required attribute that already has a value.
                * In <code>AdminRespondToAuthChallenge</code>, set a value for any keys that Amazon Cognito returned in the <code>requiredAttributes</code> parameter,
                * then use the <code>AdminUpdateUserAttributes</code> API operation to modify the value of any additional attributes.</p>
                *                </note>
                *
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>MFA_SETUP</code> requires <code>USERNAME</code>, plus you must use the
                *                     session value returned by <code>VerifySoftwareToken</code> in the
                *                         <code>Session</code> parameter.</p>
                *             </li>
                *          </ul>
                *         <p>The value of the <code>USERNAME</code> attribute must be the user's actual username,
                *             not an alias (such as an email address or phone number). To make this simpler, the
                *                 <code>AdminInitiateAuth</code> response includes the actual username value in the
                *                 <code>USERNAMEUSER_ID_FOR_SRP</code> attribute. This happens even if you specified
                *             an alias in your call to <code>AdminInitiateAuth</code>.</p>
                */
            ChallengeResponses?: Record<string, string>;
            /**
                * <p>The session that should be passed both ways in challenge-response calls to the
                *             service. If an <code>InitiateAuth</code> or <code>RespondToAuthChallenge</code> API call
                *             determines that the caller must pass another challenge, it returns a session with other
                *             challenge parameters. This session should be passed as it is to the next
                *                 <code>RespondToAuthChallenge</code> API call.</p>
                */
            Session?: string;
            /**
                * <p>The analytics metadata for collecting Amazon Pinpoint metrics for
                *                 <code>AdminRespondToAuthChallenge</code> calls.</p>
                */
            AnalyticsMetadata?: AnalyticsMetadataType;
            /**
                * <p>Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced
                * security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito
                * when it makes API requests.</p>
                */
            ContextData?: ContextDataType;
            /**
                * <p>A map of custom key-value pairs that you can provide as input for any custom workflows
                *             that this action triggers.</p>
                *         <p>You create custom workflows by assigning Lambda functions to user pool triggers.
                *             When you use the AdminRespondToAuthChallenge API action, Amazon Cognito invokes any functions
                *             that you have assigned to the following triggers: </p>
                *         <ul>
                *             <li>
                *                 <p>pre sign-up</p>
                *             </li>
                *             <li>
                *                 <p>custom message</p>
                *             </li>
                *             <li>
                *                 <p>post authentication</p>
                *             </li>
                *             <li>
                *                 <p>user migration</p>
                *             </li>
                *             <li>
                *                 <p>pre token generation</p>
                *             </li>
                *             <li>
                *                 <p>define auth challenge</p>
                *             </li>
                *             <li>
                *                 <p>create auth challenge</p>
                *             </li>
                *             <li>
                *                 <p>verify auth challenge response</p>
                *             </li>
                *          </ul>
                *         <p>When Amazon Cognito invokes any of these functions, it passes a JSON payload, which the
                *             function receives as input. This payload contains a <code>clientMetadata</code>
                *             attribute that provides the data that you assigned to the ClientMetadata parameter in
                *             your AdminRespondToAuthChallenge request. In your function code in Lambda, you can
                *             process the <code>clientMetadata</code> value to enhance your workflow for your specific
                *             needs.</p>
                *
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
                * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
                *
                *         <note>
                *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the
                *                 following:</p>
                *             <ul>
                *                <li>
                *                     <p>Store the ClientMetadata value. This data is available only to Lambda
                *                         triggers that are assigned to a user pool to support custom workflows. If
                *                         your user pool configuration doesn't include triggers, the ClientMetadata
                *                         parameter serves no purpose.</p>
                *                 </li>
                *                <li>
                *                     <p>Validate the ClientMetadata value.</p>
                *                 </li>
                *                <li>
                *                     <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive
                *                         information.</p>
                *                 </li>
                *             </ul>
                *         </note>
                */
            ClientMetadata?: Record<string, string>;
    }
    export namespace AdminRespondToAuthChallengeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminRespondToAuthChallengeRequest) => any;
    }
    /**
        * <p>Responds to the authentication challenge, as an administrator.</p>
        */
    export interface AdminRespondToAuthChallengeResponse {
            /**
                * <p>The name of the challenge. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminInitiateAuth.html">AdminInitiateAuth</a>.</p>
                */
            ChallengeName?: ChallengeNameType | string;
            /**
                * <p>The session that should be passed both ways in challenge-response calls to the
                *             service. If the caller must pass another challenge, they return a session with other
                *             challenge parameters. This session should be passed as it is to the next
                *                 <code>RespondToAuthChallenge</code> API call.</p>
                */
            Session?: string;
            /**
                * <p>The challenge parameters. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminInitiateAuth.html">AdminInitiateAuth</a>.</p>
                */
            ChallengeParameters?: Record<string, string>;
            /**
                * <p>The result returned by the server in response to the authentication request.</p>
                */
            AuthenticationResult?: AuthenticationResultType;
    }
    export namespace AdminRespondToAuthChallengeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminRespondToAuthChallengeResponse) => any;
    }
    /**
        * <p>This exception is thrown if the provided code doesn't match what the server was
        *             expecting.</p>
        */
    export class CodeMismatchException extends __BaseException {
            readonly name: "CodeMismatchException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CodeMismatchException, __BaseException>);
    }
    /**
        * <p>This exception is thrown if a code has expired.</p>
        */
    export class ExpiredCodeException extends __BaseException {
            readonly name: "ExpiredCodeException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ExpiredCodeException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the software token time-based one-time password (TOTP)
        *             multi-factor authentication (MFA) isn't activated for the user pool.</p>
        */
    export class SoftwareTokenMFANotFoundException extends __BaseException {
            readonly name: "SoftwareTokenMFANotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SoftwareTokenMFANotFoundException, __BaseException>);
    }
    /**
        * <p>The type used for enabling SMS multi-factor authentication (MFA) at the user level.
        *             Phone numbers don't need to be verified to be used for SMS MFA. If an MFA type is
        *             activated for a user, the user will be prompted for MFA during all sign-in attempts,
        *             unless device tracking is turned on and the device has been trusted. If you would like
        *             MFA to be applied selectively based on the assessed risk level of sign-in attempts,
        *             deactivate MFA for users and turn on Adaptive Authentication for the user pool.</p>
        */
    export interface SMSMfaSettingsType {
            /**
                * <p>Specifies whether SMS text message MFA is activated. If an MFA type is activated for a
                *             user, the user will be prompted for MFA during all sign-in attempts, unless device
                *             tracking is turned on and the device has been trusted.</p>
                */
            Enabled?: boolean;
            /**
                * <p>Specifies whether SMS is the preferred MFA method.</p>
                */
            PreferredMfa?: boolean;
    }
    export namespace SMSMfaSettingsType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SMSMfaSettingsType) => any;
    }
    /**
        * <p>The type used for enabling software token MFA at the user level. If an MFA type is
        *             activated for a user, the user will be prompted for MFA during all sign-in attempts,
        *             unless device tracking is turned on and the device has been trusted. If you want MFA to
        *             be applied selectively based on the assessed risk level of sign-in attempts, deactivate
        *             MFA for users and turn on Adaptive Authentication for the user pool.</p>
        */
    export interface SoftwareTokenMfaSettingsType {
            /**
                * <p>Specifies whether software token MFA is activated. If an MFA type is activated for a
                *             user, the user will be prompted for MFA during all sign-in attempts, unless device
                *             tracking is turned on and the device has been trusted.</p>
                */
            Enabled?: boolean;
            /**
                * <p>Specifies whether software token MFA is the preferred MFA method.</p>
                */
            PreferredMfa?: boolean;
    }
    export namespace SoftwareTokenMfaSettingsType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SoftwareTokenMfaSettingsType) => any;
    }
    export interface AdminSetUserMFAPreferenceRequest {
            /**
                * <p>The SMS text message MFA settings.</p>
                */
            SMSMfaSettings?: SMSMfaSettingsType;
            /**
                * <p>The time-based one-time password software token MFA settings.</p>
                */
            SoftwareTokenMfaSettings?: SoftwareTokenMfaSettingsType;
            /**
                * <p>The user pool username or alias.</p>
                */
            Username: string | undefined;
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId: string | undefined;
    }
    export namespace AdminSetUserMFAPreferenceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminSetUserMFAPreferenceRequest) => any;
    }
    export interface AdminSetUserMFAPreferenceResponse {
    }
    export namespace AdminSetUserMFAPreferenceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminSetUserMFAPreferenceResponse) => any;
    }
    export interface AdminSetUserPasswordRequest {
            /**
                * <p>The user pool ID for the user pool where you want to set the user's password.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The user name of the user whose password you want to set.</p>
                */
            Username: string | undefined;
            /**
                * <p>The password for the user.</p>
                */
            Password: string | undefined;
            /**
                * <p>
                *             <code>True</code> if the password is permanent, <code>False</code> if it is
                *             temporary.</p>
                */
            Permanent?: boolean;
    }
    export namespace AdminSetUserPasswordRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminSetUserPasswordRequest) => any;
    }
    export interface AdminSetUserPasswordResponse {
    }
    export namespace AdminSetUserPasswordResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminSetUserPasswordResponse) => any;
    }
    /**
        * <p>You can use this parameter to set an MFA configuration that uses the SMS delivery
        *             medium.</p>
        */
    export interface AdminSetUserSettingsRequest {
            /**
                * <p>The ID of the user pool that contains the user whose options you're setting.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The user name of the user whose options you're setting.</p>
                */
            Username: string | undefined;
            /**
                * <p>You can use this parameter only to set an SMS configuration that uses SMS for
                *             delivery.</p>
                */
            MFAOptions: MFAOptionType[] | undefined;
    }
    export namespace AdminSetUserSettingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminSetUserSettingsRequest) => any;
    }
    /**
        * <p>Represents the response from the server to set user settings as an
        *             administrator.</p>
        */
    export interface AdminSetUserSettingsResponse {
    }
    export namespace AdminSetUserSettingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminSetUserSettingsResponse) => any;
    }
    export interface AdminUpdateAuthEventFeedbackRequest {
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The user pool username.</p>
                */
            Username: string | undefined;
            /**
                * <p>The authentication event ID.</p>
                */
            EventId: string | undefined;
            /**
                * <p>The authentication event feedback value.</p>
                */
            FeedbackValue: FeedbackValueType | string | undefined;
    }
    export namespace AdminUpdateAuthEventFeedbackRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminUpdateAuthEventFeedbackRequest) => any;
    }
    export interface AdminUpdateAuthEventFeedbackResponse {
    }
    export namespace AdminUpdateAuthEventFeedbackResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminUpdateAuthEventFeedbackResponse) => any;
    }
    export enum DeviceRememberedStatusType {
            NOT_REMEMBERED = "not_remembered",
            REMEMBERED = "remembered"
    }
    /**
        * <p>The request to update the device status, as an administrator.</p>
        */
    export interface AdminUpdateDeviceStatusRequest {
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The user name.</p>
                */
            Username: string | undefined;
            /**
                * <p>The device key.</p>
                */
            DeviceKey: string | undefined;
            /**
                * <p>The status indicating whether a device has been remembered or not.</p>
                */
            DeviceRememberedStatus?: DeviceRememberedStatusType | string;
    }
    export namespace AdminUpdateDeviceStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminUpdateDeviceStatusRequest) => any;
    }
    /**
        * <p>The status response to the request to update the device, as an administrator.</p>
        */
    export interface AdminUpdateDeviceStatusResponse {
    }
    export namespace AdminUpdateDeviceStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminUpdateDeviceStatusResponse) => any;
    }
    /**
        * <p>Represents the request to update the user's attributes as an administrator.</p>
        */
    export interface AdminUpdateUserAttributesRequest {
            /**
                * <p>The user pool ID for the user pool where you want to update user attributes.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The user name of the user for whom you want to update user attributes.</p>
                */
            Username: string | undefined;
            /**
                * <p>An array of name-value pairs representing user attributes.</p>
                *         <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the
                *             attribute name.</p>
                *         <p>If your user pool requires verification before Amazon Cognito updates an attribute value that
                *             you specify in this request, Amazon Cognito doesn’t immediately update the value of that
                *             attribute. After your user receives and responds to a verification message to verify the
                *             new value, Amazon Cognito updates the attribute value. Your user can sign in and receive messages
                *             with the original attribute value until they verify the new value.</p>
                *         <p>To update the value of an attribute that requires verification in the same API
                *             request, include the <code>email_verified</code> or <code>phone_number_verified</code>
                *             attribute, with a value of <code>true</code>. If you set the <code>email_verified</code>
                *             or <code>phone_number_verified</code> value for an <code>email</code> or
                *                 <code>phone_number</code> attribute that requires verification to <code>true</code>,
                *             Amazon Cognito doesn’t send a verification message to your user.</p>
                */
            UserAttributes: AttributeType[] | undefined;
            /**
                * <p>A map of custom key-value pairs that you can provide as input for any custom workflows
                *             that this action triggers.</p>
                *         <p>You create custom workflows by assigning Lambda functions to user pool
                *             triggers. When you use the AdminUpdateUserAttributes API action, Amazon Cognito invokes the
                *             function that is assigned to the <i>custom message</i> trigger. When Amazon Cognito
                *             invokes this function, it passes a JSON payload, which the function receives as input.
                *             This payload contains a <code>clientMetadata</code> attribute, which provides the data
                *             that you assigned to the ClientMetadata parameter in your AdminUpdateUserAttributes
                *             request. In your function code in Lambda, you can process the
                *                 <code>clientMetadata</code> value to enhance your workflow for your specific
                *             needs.</p>
                *
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
                * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
                *
                *         <note>
                *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the
                *                 following:</p>
                *             <ul>
                *                <li>
                *                     <p>Store the ClientMetadata value. This data is available only to Lambda
                *                         triggers that are assigned to a user pool to support custom workflows. If
                *                         your user pool configuration doesn't include triggers, the ClientMetadata
                *                         parameter serves no purpose.</p>
                *                 </li>
                *                <li>
                *                     <p>Validate the ClientMetadata value.</p>
                *                 </li>
                *                <li>
                *                     <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive
                *                         information.</p>
                *                 </li>
                *             </ul>
                *         </note>
                */
            ClientMetadata?: Record<string, string>;
    }
    export namespace AdminUpdateUserAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminUpdateUserAttributesRequest) => any;
    }
    /**
        * <p>Represents the response from the server for the request to update user attributes as
        *             an administrator.</p>
        */
    export interface AdminUpdateUserAttributesResponse {
    }
    export namespace AdminUpdateUserAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminUpdateUserAttributesResponse) => any;
    }
    /**
        * <p>The request to sign out of all devices, as an administrator.</p>
        */
    export interface AdminUserGlobalSignOutRequest {
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The user name.</p>
                */
            Username: string | undefined;
    }
    export namespace AdminUserGlobalSignOutRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminUserGlobalSignOutRequest) => any;
    }
    /**
        * <p>The global sign-out response, as an administrator.</p>
        */
    export interface AdminUserGlobalSignOutResponse {
    }
    export namespace AdminUserGlobalSignOutResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminUserGlobalSignOutResponse) => any;
    }
    export enum AdvancedSecurityModeType {
            AUDIT = "AUDIT",
            ENFORCED = "ENFORCED",
            OFF = "OFF"
    }
    export enum AliasAttributeType {
            EMAIL = "email",
            PHONE_NUMBER = "phone_number",
            PREFERRED_USERNAME = "preferred_username"
    }
    /**
        * <p>The Amazon Pinpoint analytics configuration necessary to collect metrics for a user
        *             pool.</p>
        *         <note>
        *             <p>In Regions where Amazon Pinpointisn't available, user pools only support sending events to
        *                 Amazon Pinpoint projects in us-east-1. In Regions where Amazon Pinpoint is available, user pools
        *                 support sending events to Amazon Pinpoint projects within that same Region.</p>
        *         </note>
        */
    export interface AnalyticsConfigurationType {
            /**
                * <p>The application ID for an Amazon Pinpoint application.</p>
                */
            ApplicationId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of an Amazon Pinpoint project. You can use the Amazon Pinpoint project
                *             to integrate with the chosen user pool Client. Amazon Cognito publishes events to the Amazon Pinpoint
                *             project that the app ARN declares.</p>
                */
            ApplicationArn?: string;
            /**
                * <p>The ARN of an Identity and Access Management role that authorizes Amazon Cognito to publish events to Amazon Pinpoint
                *             analytics.</p>
                */
            RoleArn?: string;
            /**
                * <p>The external ID.</p>
                */
            ExternalId?: string;
            /**
                * <p>If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito includes user data in the
                *             events that it publishes to Amazon Pinpoint analytics.</p>
                */
            UserDataShared?: boolean;
    }
    export namespace AnalyticsConfigurationType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AnalyticsConfigurationType) => any;
    }
    export interface AssociateSoftwareTokenRequest {
            /**
                * <p>A valid access token that Amazon Cognito issued to the user whose software token you want to
                *             generate.</p>
                */
            AccessToken?: string;
            /**
                * <p>The session that should be passed both ways in challenge-response calls to the
                *             service. This allows authentication of the user as part of the MFA setup process.</p>
                */
            Session?: string;
    }
    export namespace AssociateSoftwareTokenRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateSoftwareTokenRequest) => any;
    }
    export interface AssociateSoftwareTokenResponse {
            /**
                * <p>A unique generated shared secret code that is used in the time-based one-time password
                *             (TOTP) algorithm to generate a one-time code.</p>
                */
            SecretCode?: string;
            /**
                * <p>The session that should be passed both ways in challenge-response calls to the
                *             service. This allows authentication of the user as part of the MFA setup process.</p>
                */
            Session?: string;
    }
    export namespace AssociateSoftwareTokenResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateSoftwareTokenResponse) => any;
    }
    /**
        * <p>This exception is thrown if two or more modifications are happening
        *             concurrently.</p>
        */
    export class ConcurrentModificationException extends __BaseException {
            readonly name: "ConcurrentModificationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConcurrentModificationException, __BaseException>);
    }
    export enum VerifiedAttributeType {
            EMAIL = "email",
            PHONE_NUMBER = "phone_number"
    }
    /**
        * <p>Represents the request to change a user password.</p>
        */
    export interface ChangePasswordRequest {
            /**
                * <p>The old password.</p>
                */
            PreviousPassword: string | undefined;
            /**
                * <p>The new password.</p>
                */
            ProposedPassword: string | undefined;
            /**
                * <p>A valid access token that Amazon Cognito issued to the user whose password you want to
                *             change.</p>
                */
            AccessToken: string | undefined;
    }
    export namespace ChangePasswordRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChangePasswordRequest) => any;
    }
    /**
        * <p>The response from the server to the change password request.</p>
        */
    export interface ChangePasswordResponse {
    }
    export namespace ChangePasswordResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChangePasswordResponse) => any;
    }
    /**
        * <p>The device verifier against which it is authenticated.</p>
        */
    export interface DeviceSecretVerifierConfigType {
            /**
                * <p>The password verifier.</p>
                */
            PasswordVerifier?: string;
            /**
                * <p>The <a href="https://en.wikipedia.org/wiki/Salt_(cryptography)">salt</a>
                *          </p>
                */
            Salt?: string;
    }
    export namespace DeviceSecretVerifierConfigType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeviceSecretVerifierConfigType) => any;
    }
    /**
        * <p>Confirms the device request.</p>
        */
    export interface ConfirmDeviceRequest {
            /**
                * <p>A valid access token that Amazon Cognito issued to the user whose device you want to
                *             confirm.</p>
                */
            AccessToken: string | undefined;
            /**
                * <p>The device key.</p>
                */
            DeviceKey: string | undefined;
            /**
                * <p>The configuration of the device secret verifier.</p>
                */
            DeviceSecretVerifierConfig?: DeviceSecretVerifierConfigType;
            /**
                * <p>The device name.</p>
                */
            DeviceName?: string;
    }
    export namespace ConfirmDeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfirmDeviceRequest) => any;
    }
    /**
        * <p>Confirms the device response.</p>
        */
    export interface ConfirmDeviceResponse {
            /**
                * <p>Indicates whether the user confirmation must confirm the device response.</p>
                */
            UserConfirmationNecessary?: boolean;
    }
    export namespace ConfirmDeviceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfirmDeviceResponse) => any;
    }
    /**
        * <p>Contextual data, such as the user's device fingerprint, IP address, or location, used
        *             for evaluating the risk of an unexpected event by Amazon Cognito advanced
        *         security.</p>
        */
    export interface UserContextDataType {
            /**
                * <p>The source IP address of your user's device.</p>
                */
            IpAddress?: string;
            /**
                * <p>Encoded device-fingerprint details that your app collected with the Amazon Cognito
                *             context data collection library. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-adaptive-authentication.html#user-pool-settings-adaptive-authentication-device-fingerprint">Adding user device and session data to API requests</a>.</p>
                */
            EncodedData?: string;
    }
    export namespace UserContextDataType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserContextDataType) => any;
    }
    /**
        * <p>The request representing the confirmation for a password reset.</p>
        */
    export interface ConfirmForgotPasswordRequest {
            /**
                * <p>The app client ID of the app associated with the user pool.</p>
                */
            ClientId: string | undefined;
            /**
                * <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of a
                *             user pool client and username plus the client ID in the message.</p>
                */
            SecretHash?: string;
            /**
                * <p>The user name of the user for whom you want to enter a code to retrieve a forgotten
                *             password.</p>
                */
            Username: string | undefined;
            /**
                * <p>The confirmation code sent by a user's request to retrieve a forgotten password. For
                *             more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ForgotPassword.html">ForgotPassword</a>.</p>
                */
            ConfirmationCode: string | undefined;
            /**
                * <p>The password sent by a user's request to retrieve a forgotten password.</p>
                */
            Password: string | undefined;
            /**
                * <p>The Amazon Pinpoint analytics metadata for collecting metrics for
                *                 <code>ConfirmForgotPassword</code> calls.</p>
                */
            AnalyticsMetadata?: AnalyticsMetadataType;
            /**
                * <p>Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced
                * security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito
                * when it makes API requests.</p>
                */
            UserContextData?: UserContextDataType;
            /**
                * <p>A map of custom key-value pairs that you can provide as input for any custom workflows
                *             that this action triggers.</p>
                *         <p>You create custom workflows by assigning Lambda functions to user pool triggers.
                *             When you use the ConfirmForgotPassword API action, Amazon Cognito invokes the function that is
                *             assigned to the <i>post confirmation</i> trigger. When Amazon Cognito invokes this
                *             function, it passes a JSON payload, which the function receives as input. This payload
                *             contains a <code>clientMetadata</code> attribute, which provides the data that you
                *             assigned to the ClientMetadata parameter in your ConfirmForgotPassword request. In your
                *             function code in Lambda, you can process the <code>clientMetadata</code> value to
                *             enhance your workflow for your specific needs.</p>
                *
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
                * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
                *
                *         <note>
                *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the
                *                 following:</p>
                *             <ul>
                *                <li>
                *                     <p>Store the ClientMetadata value. This data is available only to Lambda
                *                         triggers that are assigned to a user pool to support custom workflows. If
                *                         your user pool configuration doesn't include triggers, the ClientMetadata
                *                         parameter serves no purpose.</p>
                *                 </li>
                *                <li>
                *                     <p>Validate the ClientMetadata value.</p>
                *                 </li>
                *                <li>
                *                     <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive
                *                         information.</p>
                *                 </li>
                *             </ul>
                *         </note>
                */
            ClientMetadata?: Record<string, string>;
    }
    export namespace ConfirmForgotPasswordRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfirmForgotPasswordRequest) => any;
    }
    /**
        * <p>The response from the server that results from a user's request to retrieve a
        *             forgotten password.</p>
        */
    export interface ConfirmForgotPasswordResponse {
    }
    export namespace ConfirmForgotPasswordResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfirmForgotPasswordResponse) => any;
    }
    /**
        * <p>Represents the request to confirm registration of a user.</p>
        */
    export interface ConfirmSignUpRequest {
            /**
                * <p>The ID of the app client associated with the user pool.</p>
                */
            ClientId: string | undefined;
            /**
                * <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of a
                *             user pool client and username plus the client ID in the message.</p>
                */
            SecretHash?: string;
            /**
                * <p>The user name of the user whose registration you want to confirm.</p>
                */
            Username: string | undefined;
            /**
                * <p>The confirmation code sent by a user's request to confirm registration.</p>
                */
            ConfirmationCode: string | undefined;
            /**
                * <p>Boolean to be specified to force user confirmation irrespective of existing alias. By
                *             default set to <code>False</code>. If this parameter is set to <code>True</code> and the
                *             phone number/email used for sign up confirmation already exists as an alias with a
                *             different user, the API call will migrate the alias from the previous user to the newly
                *             created user being confirmed. If set to <code>False</code>, the API will throw an
                *                 <b>AliasExistsException</b> error.</p>
                */
            ForceAliasCreation?: boolean;
            /**
                * <p>The Amazon Pinpoint analytics metadata for collecting metrics for <code>ConfirmSignUp</code>
                *             calls.</p>
                */
            AnalyticsMetadata?: AnalyticsMetadataType;
            /**
                * <p>Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced
                * security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito
                * when it makes API requests.</p>
                */
            UserContextData?: UserContextDataType;
            /**
                * <p>A map of custom key-value pairs that you can provide as input for any custom workflows
                *             that this action triggers.</p>
                *         <p>You create custom workflows by assigning Lambda functions to user pool
                *             triggers. When you use the ConfirmSignUp API action, Amazon Cognito invokes the function that is
                *             assigned to the <i>post confirmation</i> trigger. When Amazon Cognito invokes this
                *             function, it passes a JSON payload, which the function receives as input. This payload
                *             contains a <code>clientMetadata</code> attribute, which provides the data that you
                *             assigned to the ClientMetadata parameter in your ConfirmSignUp request. In your function
                *             code in Lambda, you can process the <code>clientMetadata</code> value to
                *             enhance your workflow for your specific needs.</p>
                *
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
                * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
                *
                *         <note>
                *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the
                *                 following:</p>
                *             <ul>
                *                <li>
                *                     <p>Store the ClientMetadata value. This data is available only to Lambda
                *                         triggers that are assigned to a user pool to support custom workflows. If
                *                         your user pool configuration doesn't include triggers, the ClientMetadata
                *                         parameter serves no purpose.</p>
                *                 </li>
                *                <li>
                *                     <p>Validate the ClientMetadata value.</p>
                *                 </li>
                *                <li>
                *                     <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive
                *                         information.</p>
                *                 </li>
                *             </ul>
                *         </note>
                */
            ClientMetadata?: Record<string, string>;
    }
    export namespace ConfirmSignUpRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfirmSignUpRequest) => any;
    }
    /**
        * <p>Represents the response from the server for the registration confirmation.</p>
        */
    export interface ConfirmSignUpResponse {
    }
    export namespace ConfirmSignUpResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfirmSignUpResponse) => any;
    }
    export interface CreateGroupRequest {
            /**
                * <p>The name of the group. Must be unique.</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The user pool ID for the user pool.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>A string containing the description of the group.</p>
                */
            Description?: string;
            /**
                * <p>The role Amazon Resource Name (ARN) for the group.</p>
                */
            RoleArn?: string;
            /**
                * <p>A non-negative integer value that specifies the precedence of this group relative to
                *             the other groups that a user can belong to in the user pool. Zero is the highest
                *             precedence value. Groups with lower <code>Precedence</code> values take precedence over
                *             groups with higher or null <code>Precedence</code> values. If a user belongs to two or
                *             more groups, it is the group with the lowest precedence value whose role ARN is given in
                *             the user's tokens for the <code>cognito:roles</code> and
                *                 <code>cognito:preferred_role</code> claims.</p>
                *         <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither
                *             group takes precedence over the other. If two groups with the same
                *                 <code>Precedence</code> have the same role ARN, that role is used in the
                *                 <code>cognito:preferred_role</code> claim in tokens for users in each group. If the
                *             two groups have different role ARNs, the <code>cognito:preferred_role</code> claim isn't
                *             set in users' tokens.</p>
                *         <p>The default <code>Precedence</code> value is null. The maximum <code>Precedence</code>
                *             value is <code>2^31-1</code>.</p>
                */
            Precedence?: number;
    }
    export namespace CreateGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGroupRequest) => any;
    }
    export interface CreateGroupResponse {
            /**
                * <p>The group object for the group.</p>
                */
            Group?: GroupType;
    }
    export namespace CreateGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGroupResponse) => any;
    }
    /**
        * <p>This exception is thrown when Amazon Cognito encounters a group that already exists in the user
        *             pool.</p>
        */
    export class GroupExistsException extends __BaseException {
            readonly name: "GroupExistsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<GroupExistsException, __BaseException>);
    }
    export enum IdentityProviderTypeType {
            Facebook = "Facebook",
            Google = "Google",
            LoginWithAmazon = "LoginWithAmazon",
            OIDC = "OIDC",
            SAML = "SAML",
            SignInWithApple = "SignInWithApple"
    }
    export interface CreateIdentityProviderRequest {
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The IdP name.</p>
                */
            ProviderName: string | undefined;
            /**
                * <p>The IdP type.</p>
                */
            ProviderType: IdentityProviderTypeType | string | undefined;
            /**
                * <p>The IdP details. The following list describes the provider detail keys for each IdP
                *             type.</p>
                *         <ul>
                *             <li>
                *                 <p>For Google and Login with Amazon:</p>
                *                 <ul>
                *                   <li>
                *                         <p>client_id</p>
                *                     </li>
                *                   <li>
                *                         <p>client_secret</p>
                *                     </li>
                *                   <li>
                *                         <p>authorize_scopes</p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>For Facebook:</p>
                *                 <ul>
                *                   <li>
                *                         <p>client_id</p>
                *                     </li>
                *                   <li>
                *                         <p>client_secret</p>
                *                     </li>
                *                   <li>
                *                         <p>authorize_scopes</p>
                *                     </li>
                *                   <li>
                *                         <p>api_version</p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>For Sign in with Apple:</p>
                *                 <ul>
                *                   <li>
                *                         <p>client_id</p>
                *                     </li>
                *                   <li>
                *                         <p>team_id</p>
                *                     </li>
                *                   <li>
                *                         <p>key_id</p>
                *                     </li>
                *                   <li>
                *                         <p>private_key</p>
                *                     </li>
                *                   <li>
                *                         <p>authorize_scopes</p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>For OpenID Connect (OIDC) providers:</p>
                *                 <ul>
                *                   <li>
                *                         <p>client_id</p>
                *                     </li>
                *                   <li>
                *                         <p>client_secret</p>
                *                     </li>
                *                   <li>
                *                         <p>attributes_request_method</p>
                *                     </li>
                *                   <li>
                *                         <p>oidc_issuer</p>
                *                     </li>
                *                   <li>
                *                         <p>authorize_scopes</p>
                *                     </li>
                *                   <li>
                *                         <p>The following keys are only present if Amazon Cognito didn't discover them at
                *                             the <code>oidc_issuer</code> URL.</p>
                *                         <ul>
                *                         <li>
                *                                 <p>authorize_url </p>
                *                             </li>
                *                         <li>
                *                                 <p>token_url </p>
                *                             </li>
                *                         <li>
                *                                 <p>attributes_url </p>
                *                             </li>
                *                         <li>
                *                                 <p>jwks_uri </p>
                *                             </li>
                *                      </ul>
                *                     </li>
                *                   <li>
                *                         <p>Amazon Cognito sets the value of the following keys automatically. They are
                *                             read-only.</p>
                *                         <ul>
                *                         <li>
                *                                 <p>attributes_url_add_attributes </p>
                *                             </li>
                *                      </ul>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>For SAML providers:</p>
                *                 <ul>
                *                   <li>
                *                         <p>MetadataFile or MetadataURL</p>
                *                     </li>
                *                   <li>
                *                         <p>IDPSignout <i>optional</i>
                *                      </p>
                *                     </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            ProviderDetails: Record<string, string> | undefined;
            /**
                * <p>A mapping of IdP attributes to standard and custom user pool attributes.</p>
                */
            AttributeMapping?: Record<string, string>;
            /**
                * <p>A list of IdP identifiers.</p>
                */
            IdpIdentifiers?: string[];
    }
    export namespace CreateIdentityProviderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateIdentityProviderRequest) => any;
    }
    /**
        * <p>A container for information about an IdP.</p>
        */
    export interface IdentityProviderType {
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId?: string;
            /**
                * <p>The IdP name.</p>
                */
            ProviderName?: string;
            /**
                * <p>The IdP type.</p>
                */
            ProviderType?: IdentityProviderTypeType | string;
            /**
                * <p>The IdP details. The following list describes the provider detail keys for each IdP
                *             type.</p>
                *         <ul>
                *             <li>
                *                 <p>For Google and Login with Amazon:</p>
                *                 <ul>
                *                   <li>
                *                         <p>client_id</p>
                *                     </li>
                *                   <li>
                *                         <p>client_secret</p>
                *                     </li>
                *                   <li>
                *                         <p>authorize_scopes</p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>For Facebook:</p>
                *                 <ul>
                *                   <li>
                *                         <p>client_id</p>
                *                     </li>
                *                   <li>
                *                         <p>client_secret</p>
                *                     </li>
                *                   <li>
                *                         <p>authorize_scopes</p>
                *                     </li>
                *                   <li>
                *                         <p>api_version</p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>For Sign in with Apple:</p>
                *                 <ul>
                *                   <li>
                *                         <p>client_id</p>
                *                     </li>
                *                   <li>
                *                         <p>team_id</p>
                *                     </li>
                *                   <li>
                *                         <p>key_id</p>
                *                     </li>
                *                   <li>
                *                         <p>private_key</p>
                *                         <p>
                *                         <i>You can submit a private_key when you add or update an IdP.
                *                                 Describe operations don't return the private key.</i>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>authorize_scopes</p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>For OIDC providers:</p>
                *                 <ul>
                *                   <li>
                *                         <p>client_id</p>
                *                     </li>
                *                   <li>
                *                         <p>client_secret</p>
                *                     </li>
                *                   <li>
                *                         <p>attributes_request_method</p>
                *                     </li>
                *                   <li>
                *                         <p>oidc_issuer</p>
                *                     </li>
                *                   <li>
                *                         <p>authorize_scopes</p>
                *                     </li>
                *                   <li>
                *                         <p>The following keys are only present if Amazon Cognito didn't discover them at
                *                             the <code>oidc_issuer</code> URL.</p>
                *                         <ul>
                *                         <li>
                *                                 <p>authorize_url </p>
                *                             </li>
                *                         <li>
                *                                 <p>token_url </p>
                *                             </li>
                *                         <li>
                *                                 <p>attributes_url </p>
                *                             </li>
                *                         <li>
                *                                 <p>jwks_uri </p>
                *                             </li>
                *                      </ul>
                *                     </li>
                *                   <li>
                *                         <p>Amazon Cognito sets the value of the following keys automatically. They are
                *                             read-only.</p>
                *                         <ul>
                *                         <li>
                *                                 <p>attributes_url_add_attributes </p>
                *                             </li>
                *                      </ul>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>For SAML providers:</p>
                *                 <ul>
                *                   <li>
                *                         <p>MetadataFile or MetadataURL</p>
                *                     </li>
                *                   <li>
                *                         <p>IDPSignout <i>optional</i>
                *                      </p>
                *                     </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            ProviderDetails?: Record<string, string>;
            /**
                * <p>A mapping of IdP attributes to standard and custom user pool attributes.</p>
                */
            AttributeMapping?: Record<string, string>;
            /**
                * <p>A list of IdP identifiers.</p>
                */
            IdpIdentifiers?: string[];
            /**
                * <p>The date the IdP was last modified.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>The date the IdP was created.</p>
                */
            CreationDate?: Date;
    }
    export namespace IdentityProviderType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IdentityProviderType) => any;
    }
    export interface CreateIdentityProviderResponse {
            /**
                * <p>The newly created IdP object.</p>
                */
            IdentityProvider: IdentityProviderType | undefined;
    }
    export namespace CreateIdentityProviderResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateIdentityProviderResponse) => any;
    }
    /**
        * <p>This exception is thrown when the provider is already supported by the user
        *             pool.</p>
        */
    export class DuplicateProviderException extends __BaseException {
            readonly name: "DuplicateProviderException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DuplicateProviderException, __BaseException>);
    }
    /**
        * <p>A resource server scope.</p>
        */
    export interface ResourceServerScopeType {
            /**
                * <p>The name of the scope.</p>
                */
            ScopeName: string | undefined;
            /**
                * <p>A description of the scope.</p>
                */
            ScopeDescription: string | undefined;
    }
    export namespace ResourceServerScopeType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceServerScopeType) => any;
    }
    export interface CreateResourceServerRequest {
            /**
                * <p>The user pool ID for the user pool.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>A unique resource server identifier for the resource server. This could be an HTTPS
                *             endpoint where the resource server is located, such as
                *                 <code>https://my-weather-api.example.com</code>.</p>
                */
            Identifier: string | undefined;
            /**
                * <p>A friendly name for the resource server.</p>
                */
            Name: string | undefined;
            /**
                * <p>A list of scopes. Each scope is a key-value map with the keys <code>name</code> and
                *                 <code>description</code>.</p>
                */
            Scopes?: ResourceServerScopeType[];
    }
    export namespace CreateResourceServerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateResourceServerRequest) => any;
    }
    /**
        * <p>A container for information about a resource server for a user pool.</p>
        */
    export interface ResourceServerType {
            /**
                * <p>The user pool ID for the user pool that hosts the resource server.</p>
                */
            UserPoolId?: string;
            /**
                * <p>The identifier for the resource server.</p>
                */
            Identifier?: string;
            /**
                * <p>The name of the resource server.</p>
                */
            Name?: string;
            /**
                * <p>A list of scopes that are defined for the resource server.</p>
                */
            Scopes?: ResourceServerScopeType[];
    }
    export namespace ResourceServerType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceServerType) => any;
    }
    export interface CreateResourceServerResponse {
            /**
                * <p>The newly created resource server.</p>
                */
            ResourceServer: ResourceServerType | undefined;
    }
    export namespace CreateResourceServerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateResourceServerResponse) => any;
    }
    /**
        * <p>Represents the request to create the user import job.</p>
        */
    export interface CreateUserImportJobRequest {
            /**
                * <p>The job name for the user import job.</p>
                */
            JobName: string | undefined;
            /**
                * <p>The user pool ID for the user pool that the users are being imported into.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The role ARN for the Amazon CloudWatch Logs Logging role for the user import job.</p>
                */
            CloudWatchLogsRoleArn: string | undefined;
    }
    export namespace CreateUserImportJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUserImportJobRequest) => any;
    }
    export enum UserImportJobStatusType {
            Created = "Created",
            Expired = "Expired",
            Failed = "Failed",
            InProgress = "InProgress",
            Pending = "Pending",
            Stopped = "Stopped",
            Stopping = "Stopping",
            Succeeded = "Succeeded"
    }
    /**
        * <p>The user import job type.</p>
        */
    export interface UserImportJobType {
            /**
                * <p>The job name for the user import job.</p>
                */
            JobName?: string;
            /**
                * <p>The job ID for the user import job.</p>
                */
            JobId?: string;
            /**
                * <p>The user pool ID for the user pool that the users are being imported into.</p>
                */
            UserPoolId?: string;
            /**
                * <p>The pre-signed URL to be used to upload the <code>.csv</code> file.</p>
                */
            PreSignedUrl?: string;
            /**
                * <p>The date the user import job was created.</p>
                */
            CreationDate?: Date;
            /**
                * <p>The date when the user import job was started.</p>
                */
            StartDate?: Date;
            /**
                * <p>The date when the user import job was completed.</p>
                */
            CompletionDate?: Date;
            /**
                * <p>The status of the user import job. One of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>Created</code> - The job was created but not started.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Pending</code> - A transition state. You have started the job, but it
                *                     has not begun importing users yet.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>InProgress</code> - The job has started, and users are being
                *                     imported.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Stopping</code> - You have stopped the job, but the job has not stopped
                *                     importing users yet.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Stopped</code> - You have stopped the job, and the job has stopped
                *                     importing users.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Succeeded</code> - The job has completed successfully.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Failed</code> - The job has stopped due to an error.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Expired</code> - You created a job, but did not start the job within
                *                     24-48 hours. All data associated with the job was deleted, and the job can't be
                *                     started.</p>
                *             </li>
                *          </ul>
                */
            Status?: UserImportJobStatusType | string;
            /**
                * <p>The role Amazon Resource Name (ARN) for the Amazon CloudWatch Logging role for the user import
                *             job. For more information, see "Creating the CloudWatch Logs IAM Role" in the Amazon Cognito Developer
                *             Guide.</p>
                */
            CloudWatchLogsRoleArn?: string;
            /**
                * <p>The number of users that were successfully imported.</p>
                */
            ImportedUsers?: number;
            /**
                * <p>The number of users that were skipped.</p>
                */
            SkippedUsers?: number;
            /**
                * <p>The number of users that couldn't be imported.</p>
                */
            FailedUsers?: number;
            /**
                * <p>The message returned when the user import job is completed.</p>
                */
            CompletionMessage?: string;
    }
    export namespace UserImportJobType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserImportJobType) => any;
    }
    /**
        * <p>Represents the response from the server to the request to create the user import
        *             job.</p>
        */
    export interface CreateUserImportJobResponse {
            /**
                * <p>The job object that represents the user import job.</p>
                */
            UserImportJob?: UserImportJobType;
    }
    export namespace CreateUserImportJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUserImportJobResponse) => any;
    }
    /**
        * <p>The device tracking configuration for a user pool. A user pool with device tracking
        *             deactivated returns a null value.</p>
        *         <note>
        *             <p>When you provide values for any DeviceConfiguration field, you activate device
        *                 tracking.</p>
        *         </note>
        */
    export interface DeviceConfigurationType {
            /**
                * <p>When true, device authentication can replace SMS and time-based one-time password
                *             (TOTP) factors for multi-factor authentication (MFA).</p>
                *         <note>
                *             <p>Users that sign in with devices that have not been confirmed or remembered will
                *                 still have to provide a second factor, whether or not ChallengeRequiredOnNewDevice
                *                 is true, when your user pool requires MFA.</p>
                *         </note>
                */
            ChallengeRequiredOnNewDevice?: boolean;
            /**
                * <p>When true, users can opt in to remembering their device. Your app code must use
                *             callback functions to return the user's choice.</p>
                */
            DeviceOnlyRememberedOnUserPrompt?: boolean;
    }
    export namespace DeviceConfigurationType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeviceConfigurationType) => any;
    }
    export enum EmailSendingAccountType {
            COGNITO_DEFAULT = "COGNITO_DEFAULT",
            DEVELOPER = "DEVELOPER"
    }
    /**
        * <p>The email configuration of your user pool. The email configuration type sets your
        *             preferred sending method, Amazon Web Services Region, and sender for messages from your user
        *             pool.</p>
        *         <note>
        *             <p>Amazon Cognito can send email messages with Amazon Simple Email Service resources in the Amazon Web Services Region where
        *                 you created your user pool, and in alternate Regions in some cases. For more
        *                 information on the supported Regions, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-email.html">Email settings for Amazon Cognito user pools</a>.</p>
        *         </note>
        */
    export interface EmailConfigurationType {
            /**
                * <p>The ARN of a verified email address in Amazon SES. Amazon Cognito uses this email address in one of
                *             the following ways, depending on the value that you specify for the
                *                 <code>EmailSendingAccount</code> parameter:</p>
                *         <ul>
                *             <li>
                *                 <p>If you specify <code>COGNITO_DEFAULT</code>, Amazon Cognito uses this address as the
                *                     custom FROM address when it emails your users using its built-in email
                *                     account.</p>
                *             </li>
                *             <li>
                *                 <p>If you specify <code>DEVELOPER</code>, Amazon Cognito emails your users with this
                *                     address by calling Amazon SES on your behalf.</p>
                *             </li>
                *          </ul>
                *         <p>The Region value of the <code>SourceArn</code> parameter must indicate a supported
                *             Amazon Web Services Region of your user pool. Typically, the Region in the <code>SourceArn</code> and
                *             the user pool Region are the same. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-email.html#user-pool-email-developer-region-mapping">Amazon SES email configuration regions</a> in the <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">Amazon Cognito Developer
                *                 Guide</a>.</p>
                */
            SourceArn?: string;
            /**
                * <p>The destination to which the receiver of the email should reply.</p>
                */
            ReplyToEmailAddress?: string;
            /**
                * <p>Specifies whether Amazon Cognito uses its built-in functionality to send your users email
                *             messages, or uses your Amazon Simple Email Service email configuration. Specify one of the following
                *             values:</p>
                *         <dl>
                *             <dt>COGNITO_DEFAULT</dt>
                *             <dd>
                *                     <p>When Amazon Cognito emails your users, it uses its built-in email functionality.
                *                         When you use the default option, Amazon Cognito allows only a limited number of
                *                         emails each day for your user pool. For typical production environments, the
                *                         default email limit is less than the required delivery volume. To achieve a
                *                         higher delivery volume, specify DEVELOPER to use your Amazon SES email
                *                         configuration.</p>
                *                     <p>To look up the email delivery limit for the default option, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/limits.html">Limits in </a> in the <i> Developer Guide</i>.</p>
                *                     <p>The default FROM address is <code>no-reply@verificationemail.com</code>.
                *                         To customize the FROM address, provide the Amazon Resource Name (ARN) of an
                *                         Amazon SES verified email address for the <code>SourceArn</code>
                *                         parameter.</p>
                *
                *                 </dd>
                *             <dt>DEVELOPER</dt>
                *             <dd>
                *                     <p>When Amazon Cognito emails your users, it uses your Amazon SES configuration. Amazon Cognito
                *                         calls Amazon SES on your behalf to send email from your verified email address.
                *                         When you use this option, the email delivery limits are the same limits that
                *                         apply to your Amazon SES verified email address in your Amazon Web Services account.</p>
                *                     <p>If you use this option, provide the ARN of an Amazon SES verified email address
                *                         for the <code>SourceArn</code> parameter.</p>
                *                     <p>Before Amazon Cognito can email your users, it requires additional permissions to
                *                         call Amazon SES on your behalf. When you update your user pool with this option,
                *                         Amazon Cognito creates a <i>service-linked role</i>, which is a type of
                *                         role, in your Amazon Web Services account. This role contains the permissions
                *                         that allow to access Amazon SES and send email messages with your address. For
                *                         more information about the service-linked role that Amazon Cognito creates, see
                *                             <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/using-service-linked-roles.html">Using Service-Linked Roles for Amazon Cognito</a> in the
                *                             <i>Amazon Cognito Developer Guide</i>.</p>
                *                 </dd>
                *          </dl>
                */
            EmailSendingAccount?: EmailSendingAccountType | string;
            /**
                * <p>Either the sender’s email address or the sender’s name with their email address. For
                *             example, <code>testuser@example.com</code> or <code>Test User
                *                 <testuser@example.com></code>. This address appears before the body of the
                *             email.</p>
                */
            From?: string;
            /**
                * <p>The set of configuration rules that can be applied to emails sent using Amazon Simple Email Service. A
                *             configuration set is applied to an email by including a reference to the configuration
                *             set in the headers of the email. Once applied, all of the rules in that configuration
                *             set are applied to the email. Configuration sets can be used to apply the following
                *             types of rules to emails: </p>
                *         <dl>
                *             <dt>Event publishing</dt>
                *             <dd>
                *                     <p>Amazon Simple Email Service can track the number of send, delivery, open, click, bounce, and
                *                         complaint events for each email sent. Use event publishing to send
                *                         information about these events to other Amazon Web Services services such as and
                *                         Amazon CloudWatch</p>
                *                 </dd>
                *             <dt>IP pool management</dt>
                *             <dd>
                *                     <p>When leasing dedicated IP addresses with Amazon Simple Email Service, you can create groups
                *                         of IP addresses, called dedicated IP pools. You can then associate the
                *                         dedicated IP pools with configuration sets.</p>
                *                 </dd>
                *          </dl>
                */
            ConfigurationSet?: string;
    }
    export namespace EmailConfigurationType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EmailConfigurationType) => any;
    }
    export enum CustomEmailSenderLambdaVersionType {
            V1_0 = "V1_0"
    }
    /**
        * <p>A custom email sender Lambda configuration type.</p>
        */
    export interface CustomEmailLambdaVersionConfigType {
            /**
                * <p>Signature of the "request" attribute in the "event" information Amazon Cognito passes to your
                *             custom email Lambda function. The only supported value is <code>V1_0</code>.</p>
                */
            LambdaVersion: CustomEmailSenderLambdaVersionType | string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the Lambda function that Amazon Cognito activates to send
                *             email notifications to users.</p>
                */
            LambdaArn: string | undefined;
    }
    export namespace CustomEmailLambdaVersionConfigType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomEmailLambdaVersionConfigType) => any;
    }
    export enum CustomSMSSenderLambdaVersionType {
            V1_0 = "V1_0"
    }
    /**
        * <p>A custom SMS sender Lambda configuration type.</p>
        */
    export interface CustomSMSLambdaVersionConfigType {
            /**
                * <p>Signature of the "request" attribute in the "event" information that Amazon Cognito passes to
                *             your custom SMS Lambda function. The only supported value is <code>V1_0</code>.</p>
                */
            LambdaVersion: CustomSMSSenderLambdaVersionType | string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the Lambda function that Amazon Cognito activates to send SMS
                *             notifications to users.</p>
                */
            LambdaArn: string | undefined;
    }
    export namespace CustomSMSLambdaVersionConfigType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomSMSLambdaVersionConfigType) => any;
    }
    /**
        * <p>Specifies the configuration for Lambda triggers.</p>
        */
    export interface LambdaConfigType {
            /**
                * <p>A pre-registration Lambda trigger.</p>
                */
            PreSignUp?: string;
            /**
                * <p>A custom Message Lambda trigger.</p>
                */
            CustomMessage?: string;
            /**
                * <p>A post-confirmation Lambda trigger.</p>
                */
            PostConfirmation?: string;
            /**
                * <p>A pre-authentication Lambda trigger.</p>
                */
            PreAuthentication?: string;
            /**
                * <p>A post-authentication Lambda trigger.</p>
                */
            PostAuthentication?: string;
            /**
                * <p>Defines the authentication challenge.</p>
                */
            DefineAuthChallenge?: string;
            /**
                * <p>Creates an authentication challenge.</p>
                */
            CreateAuthChallenge?: string;
            /**
                * <p>Verifies the authentication challenge response.</p>
                */
            VerifyAuthChallengeResponse?: string;
            /**
                * <p>A Lambda trigger that is invoked before token generation.</p>
                */
            PreTokenGeneration?: string;
            /**
                * <p>The user migration Lambda config type.</p>
                */
            UserMigration?: string;
            /**
                * <p>A custom SMS sender Lambda trigger.</p>
                */
            CustomSMSSender?: CustomSMSLambdaVersionConfigType;
            /**
                * <p>A custom email sender Lambda trigger.</p>
                */
            CustomEmailSender?: CustomEmailLambdaVersionConfigType;
            /**
                * <p>The Amazon Resource Name (ARN) of an <a href="/kms/latest/developerguide/concepts.html#master_keys">KMS key</a>. Amazon Cognito
                *             uses the key to encrypt codes and temporary passwords sent to
                *                 <code>CustomEmailSender</code> and <code>CustomSMSSender</code>.</p>
                */
            KMSKeyID?: string;
    }
    export namespace LambdaConfigType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaConfigType) => any;
    }
    export enum UserPoolMfaType {
            OFF = "OFF",
            ON = "ON",
            OPTIONAL = "OPTIONAL"
    }
    /**
        * <p>The password policy type.</p>
        */
    export interface PasswordPolicyType {
            /**
                * <p>The minimum length of the password in the policy that you have set. This value can't
                *             be less than 6.</p>
                */
            MinimumLength?: number;
            /**
                * <p>In the password policy that you have set, refers to whether you have required users to
                *             use at least one uppercase letter in their password.</p>
                */
            RequireUppercase?: boolean;
            /**
                * <p>In the password policy that you have set, refers to whether you have required users to
                *             use at least one lowercase letter in their password.</p>
                */
            RequireLowercase?: boolean;
            /**
                * <p>In the password policy that you have set, refers to whether you have required users to
                *             use at least one number in their password.</p>
                */
            RequireNumbers?: boolean;
            /**
                * <p>In the password policy that you have set, refers to whether you have required users to
                *             use at least one symbol in their password.</p>
                */
            RequireSymbols?: boolean;
            /**
                * <p>The number of days a temporary password is valid in the password policy. If the user
                *             doesn't sign in during this time, an administrator must reset their password.</p>
                *         <note>
                *             <p>When you set <code>TemporaryPasswordValidityDays</code> for a user pool, you can
                *                 no longer set a value for the legacy <code>UnusedAccountValidityDays</code>
                *                 parameter in that user pool.</p>
                *         </note>
                */
            TemporaryPasswordValidityDays?: number;
    }
    export namespace PasswordPolicyType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PasswordPolicyType) => any;
    }
    /**
        * <p>The policy associated with a user pool.</p>
        */
    export interface UserPoolPolicyType {
            /**
                * <p>The password policy.</p>
                */
            PasswordPolicy?: PasswordPolicyType;
    }
    export namespace UserPoolPolicyType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserPoolPolicyType) => any;
    }
    /**
        * <p>The SMS configuration type is the settings that your Amazon Cognito user pool must use to send
        *             an SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS
        *             messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an
        *             Identity and Access Management (IAM) role in your Amazon Web Services account.</p>
        */
    export interface SmsConfigurationType {
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon SNS caller. This is the ARN of the IAM role
                *             in your Amazon Web Services account that Amazon Cognito will use to send SMS messages. SMS
                *             messages are subject to a <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html">spending limit</a>. </p>
                */
            SnsCallerArn: string | undefined;
            /**
                * <p>The external ID provides additional security for your IAM role. You can use an
                *                 <code>ExternalId</code> with the IAM role that you use with Amazon SNS to send SMS
                *             messages for your user pool. If you provide an <code>ExternalId</code>, your Amazon Cognito user
                *             pool includes it in the request to assume your IAM role. You can configure the role
                *             trust policy to require that Amazon Cognito, and any principal, provide the
                *                 <code>ExternalID</code>. If you use the Amazon Cognito Management Console to create a role
                *             for SMS multi-factor authentication (MFA), Amazon Cognito creates a role with the required
                *             permissions and a trust policy that demonstrates use of the
                *             <code>ExternalId</code>.</p>
                *         <p>For more information about the <code>ExternalId</code> of a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html">How to use an
                *                 external ID when granting access to your Amazon Web Services resources to a third
                *                 party</a>
                *          </p>
                */
            ExternalId?: string;
            /**
                * <p>The Amazon Web Services Region to use with Amazon SNS integration. You can choose the same Region as your
                *             user pool, or a supported <b>Legacy Amazon SNS alternate
                *             Region</b>. </p>
                *         <p>
                *             Amazon Cognito resources in the Asia Pacific (Seoul) Amazon Web Services Region must use your Amazon SNS
                *             configuration in the Asia Pacific (Tokyo) Region. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html">SMS message settings for Amazon Cognito user pools</a>.</p>
                */
            SnsRegion?: string;
    }
    export namespace SmsConfigurationType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SmsConfigurationType) => any;
    }
    /**
        * <p>The settings for updates to user attributes. These settings include the property <code>AttributesRequireVerificationBeforeUpdate</code>,
        * a user-pool setting that tells Amazon Cognito how to handle changes to the value of your users' email address and phone number attributes. For
        * more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html#user-pool-settings-verifications-verify-attribute-updates">
        * Verifying updates to to email addresses and phone numbers</a>.</p>
        */
    export interface UserAttributeUpdateSettingsType {
            /**
                * <p>Requires that your user verifies their email address, phone number, or both before
                *             Amazon Cognito updates the value of that attribute. When you update a user attribute that has
                *             this option activated, Amazon Cognito sends a verification message to the new phone number or
                *             email address. Amazon Cognito doesn’t change the value of the attribute until your user responds
                *             to the verification message and confirms the new value.</p>
                *         <p>You can verify an updated email address or phone number with a <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerifyUserAttribute.html">VerifyUserAttribute</a> API request. You can also call the <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UpdateUserAttributes.html">UpdateUserAttributes</a> or <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminUpdateUserAttributes.html">AdminUpdateUserAttributes</a> API and set <code>email_verified</code> or
                *                 <code>phone_number_verified</code> to true.</p>
                *         <p>When <code>AttributesRequireVerificationBeforeUpdate</code> is false, your user pool
                *             doesn't require that your users verify attribute changes before Amazon Cognito updates them. In a
                *             user pool where <code>AttributesRequireVerificationBeforeUpdate</code> is false, API
                *             operations that change attribute values can immediately update a user’s
                *                 <code>email</code> or <code>phone_number</code> attribute.</p>
                */
            AttributesRequireVerificationBeforeUpdate?: (VerifiedAttributeType | string)[];
    }
    export namespace UserAttributeUpdateSettingsType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserAttributeUpdateSettingsType) => any;
    }
    export enum UsernameAttributeType {
            EMAIL = "email",
            PHONE_NUMBER = "phone_number"
    }
    /**
        * <p>The username configuration type. </p>
        */
    export interface UsernameConfigurationType {
            /**
                * <p>Specifies whether user name case sensitivity will be applied for all users in the user
                *             pool through Amazon Cognito APIs.</p>
                *         <p>Valid values include:</p>
                *         <dl>
                *             <dt>True</dt>
                *             <dd>
                *                     <p>Enables case sensitivity for all username input. When this option is set
                *                         to <code>True</code>, users must sign in using the exact capitalization of
                *                         their given username, such as “UserName”. This is the default value.</p>
                *                 </dd>
                *             <dt>False</dt>
                *             <dd>
                *                     <p>Enables case insensitivity for all username input. For example, when this
                *                         option is set to <code>False</code>, users can sign in using either
                *                         "username" or "Username". This option also enables both
                *                             <code>preferred_username</code> and <code>email</code> alias to be case
                *                         insensitive, in addition to the <code>username</code> attribute.</p>
                *                 </dd>
                *          </dl>
                */
            CaseSensitive: boolean | undefined;
    }
    export namespace UsernameConfigurationType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UsernameConfigurationType) => any;
    }
    /**
        * <p>The user pool add-ons type.</p>
        */
    export interface UserPoolAddOnsType {
            /**
                * <p>The advanced security mode.</p>
                */
            AdvancedSecurityMode: AdvancedSecurityModeType | string | undefined;
    }
    export namespace UserPoolAddOnsType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserPoolAddOnsType) => any;
    }
    export enum DefaultEmailOptionType {
            CONFIRM_WITH_CODE = "CONFIRM_WITH_CODE",
            CONFIRM_WITH_LINK = "CONFIRM_WITH_LINK"
    }
    /**
        * <p>The template for verification messages.</p>
        */
    export interface VerificationMessageTemplateType {
            /**
                * <p>The template for SMS messages that Amazon Cognito sends to your users.</p>
                */
            SmsMessage?: string;
            /**
                * <p>The template for email messages that Amazon Cognito sends to your users. You can set an
                *                 <code>EmailMessage</code> template only if the value of <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount"> EmailSendingAccount</a> is <code>DEVELOPER</code>. When your <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount">EmailSendingAccount</a> is <code>DEVELOPER</code>, your user pool sends email
                *             messages with your own Amazon SES configuration.</p>
                */
            EmailMessage?: string;
            /**
                * <p>The subject line for the email message template. You can set an
                *                 <code>EmailSubject</code> template only if the value of <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount"> EmailSendingAccount</a> is <code>DEVELOPER</code>. When your <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount">EmailSendingAccount</a> is <code>DEVELOPER</code>, your user pool sends email
                *             messages with your own Amazon SES configuration.</p>
                */
            EmailSubject?: string;
            /**
                * <p>The email message template for sending a confirmation link to the user. You can set an
                *                 <code>EmailMessageByLink</code> template only if the value of <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount"> EmailSendingAccount</a> is <code>DEVELOPER</code>. When your <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount">EmailSendingAccount</a> is <code>DEVELOPER</code>, your user pool sends email
                *             messages with your own Amazon SES configuration.</p>
                */
            EmailMessageByLink?: string;
            /**
                * <p>The subject line for the email message template for sending a confirmation link to the
                *             user. You can set an <code>EmailSubjectByLink</code> template only if the value of
                *                 <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount"> EmailSendingAccount</a> is <code>DEVELOPER</code>. When your <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount">EmailSendingAccount</a> is <code>DEVELOPER</code>, your user pool sends email
                *             messages with your own Amazon SES configuration.</p>
                */
            EmailSubjectByLink?: string;
            /**
                * <p>The default email option.</p>
                */
            DefaultEmailOption?: DefaultEmailOptionType | string;
    }
    export namespace VerificationMessageTemplateType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VerificationMessageTemplateType) => any;
    }
    /**
        * <p>Represents the request to create a user pool.</p>
        */
    export interface CreateUserPoolRequest {
            /**
                * <p>A string used to name the user pool.</p>
                */
            PoolName: string | undefined;
            /**
                * <p>The policies associated with the new user pool.</p>
                */
            Policies?: UserPoolPolicyType;
            /**
                * <p>The Lambda trigger configuration information for the new user pool.</p>
                *         <note>
                *             <p>In a push model, event sources (such as Amazon S3 and custom applications) need
                *                 permission to invoke a function. So you must make an extra call to add permission
                *                 for these event sources to invoke your Lambda function.</p>
                *             <p></p>
                *             <p>For more information on using the Lambda API to add permission, see<a href="https://docs.aws.amazon.com/lambda/latest/dg/API_AddPermission.html">
                *                     AddPermission </a>. </p>
                *             <p>For adding permission using the CLI, see<a href="https://docs.aws.amazon.com/cli/latest/reference/lambda/add-permission.html"> add-permission
                *                 </a>.</p>
                *         </note>
                */
            LambdaConfig?: LambdaConfigType;
            /**
                * <p>The attributes to be auto-verified. Possible values: <b>email</b>, <b>phone_number</b>.</p>
                */
            AutoVerifiedAttributes?: (VerifiedAttributeType | string)[];
            /**
                * <p>Attributes supported as an alias for this user pool. Possible values: <b>phone_number</b>, <b>email</b>, or
                *                 <b>preferred_username</b>.</p>
                */
            AliasAttributes?: (AliasAttributeType | string)[];
            /**
                * <p>Specifies whether a user can use an email address or phone number as a username when
                *             they sign up.</p>
                */
            UsernameAttributes?: (UsernameAttributeType | string)[];
            /**
                * <p>A string representing the SMS verification message.</p>
                */
            SmsVerificationMessage?: string;
            /**
                * <p>A string representing the email verification message. EmailVerificationMessage is
                *             allowed only if <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount">EmailSendingAccount</a> is DEVELOPER. </p>
                */
            EmailVerificationMessage?: string;
            /**
                * <p>A string representing the email verification subject. EmailVerificationSubject is
                *             allowed only if <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount">EmailSendingAccount</a> is DEVELOPER. </p>
                */
            EmailVerificationSubject?: string;
            /**
                * <p>The template for the verification message that the user sees when the app requests
                *             permission to access the user's information.</p>
                */
            VerificationMessageTemplate?: VerificationMessageTemplateType;
            /**
                * <p>A string representing the SMS authentication message.</p>
                */
            SmsAuthenticationMessage?: string;
            /**
                * <p>Specifies MFA configuration details.</p>
                */
            MfaConfiguration?: UserPoolMfaType | string;
            /**
                * <p>The settings for updates to user attributes. These settings include the property <code>AttributesRequireVerificationBeforeUpdate</code>,
                * a user-pool setting that tells Amazon Cognito how to handle changes to the value of your users' email address and phone number attributes. For
                * more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html#user-pool-settings-verifications-verify-attribute-updates">
                * Verifying updates to to email addresses and phone numbers</a>.</p>
                */
            UserAttributeUpdateSettings?: UserAttributeUpdateSettingsType;
            /**
                * <p>The device configuration.</p>
                */
            DeviceConfiguration?: DeviceConfigurationType;
            /**
                * <p>The email configuration of your user pool. The email configuration type sets your
                *             preferred sending method, Amazon Web Services Region, and sender for messages from your user
                *             pool.</p>
                */
            EmailConfiguration?: EmailConfigurationType;
            /**
                * <p>The SMS configuration with the settings that your Amazon Cognito user pool must use to send an
                *             SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS messages
                *             with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management
                *             (IAM) role in your Amazon Web Services account.</p>
                */
            SmsConfiguration?: SmsConfigurationType;
            /**
                * <p>The tag keys and values to assign to the user pool. A tag is a label that you can use
                *             to categorize and manage user pools in different ways, such as by purpose, owner,
                *             environment, or other criteria.</p>
                */
            UserPoolTags?: Record<string, string>;
            /**
                * <p>The configuration for <code>AdminCreateUser</code> requests.</p>
                */
            AdminCreateUserConfig?: AdminCreateUserConfigType;
            /**
                * <p>An array of schema attributes for the new user pool. These attributes can be standard
                *             or custom attributes.</p>
                */
            Schema?: SchemaAttributeType[];
            /**
                * <p>Enables advanced security risk detection. Set the key
                *                 <code>AdvancedSecurityMode</code> to the value "AUDIT".</p>
                */
            UserPoolAddOns?: UserPoolAddOnsType;
            /**
                * <p>Case sensitivity on the username input for the selected sign-in option. For example,
                *             when case sensitivity is set to <code>False</code>, users can sign in using either
                *             "username" or "Username". This configuration is immutable once it has been set. For more
                *             information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html">UsernameConfigurationType</a>.</p>
                */
            UsernameConfiguration?: UsernameConfigurationType;
            /**
                * <p>The available verified method a user can use to recover their password when they call
                *                 <code>ForgotPassword</code>. You can use this setting to define a preferred method
                *             when a user has more than one method available. With this setting, SMS doesn't qualify
                *             for a valid password recovery mechanism if the user also has SMS multi-factor
                *             authentication (MFA) activated. In the absence of this setting, Amazon Cognito uses the legacy
                *             behavior to determine the recovery method where SMS is preferred through email.</p>
                */
            AccountRecoverySetting?: AccountRecoverySettingType;
    }
    export namespace CreateUserPoolRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUserPoolRequest) => any;
    }
    export enum StatusType {
            Disabled = "Disabled",
            Enabled = "Enabled"
    }
    /**
        * <p>A container for information about the user pool.</p>
        */
    export interface UserPoolType {
            /**
                * <p>The ID of the user pool.</p>
                */
            Id?: string;
            /**
                * <p>The name of the user pool.</p>
                */
            Name?: string;
            /**
                * <p>The policies associated with the user pool.</p>
                */
            Policies?: UserPoolPolicyType;
            /**
                * <p>The Lambda triggers associated with the user pool.</p>
                */
            LambdaConfig?: LambdaConfigType;
            /**
                * <p>The status of a user pool.</p>
                */
            Status?: StatusType | string;
            /**
                * <p>The date the user pool was last modified.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>The date the user pool was created.</p>
                */
            CreationDate?: Date;
            /**
                * <p>A container with the schema attributes of a user pool.</p>
                */
            SchemaAttributes?: SchemaAttributeType[];
            /**
                * <p>The attributes that are auto-verified in a user pool.</p>
                */
            AutoVerifiedAttributes?: (VerifiedAttributeType | string)[];
            /**
                * <p>The attributes that are aliased in a user pool.</p>
                */
            AliasAttributes?: (AliasAttributeType | string)[];
            /**
                * <p>Specifies whether a user can use an email address or phone number as a username when
                *             they sign up.</p>
                */
            UsernameAttributes?: (UsernameAttributeType | string)[];
            /**
                * <p>The contents of the SMS verification message.</p>
                */
            SmsVerificationMessage?: string;
            /**
                * <p>The contents of the email verification message.</p>
                */
            EmailVerificationMessage?: string;
            /**
                * <p>The subject of the email verification message.</p>
                */
            EmailVerificationSubject?: string;
            /**
                * <p>The template for verification messages.</p>
                */
            VerificationMessageTemplate?: VerificationMessageTemplateType;
            /**
                * <p>The contents of the SMS authentication message.</p>
                */
            SmsAuthenticationMessage?: string;
            /**
                * <p>The settings for updates to user attributes. These settings include the property <code>AttributesRequireVerificationBeforeUpdate</code>,
                * a user-pool setting that tells Amazon Cognito how to handle changes to the value of your users' email address and phone number attributes. For
                * more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html#user-pool-settings-verifications-verify-attribute-updates">
                * Verifying updates to to email addresses and phone numbers</a>.</p>
                */
            UserAttributeUpdateSettings?: UserAttributeUpdateSettingsType;
            /**
                * <p>Can be one of the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>OFF</code> - MFA tokens aren't required and can't be specified during user
                *                     registration.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>ON</code> - MFA tokens are required for all user registrations. You can
                *                     only specify required when you're initially creating a user pool.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>OPTIONAL</code> - Users have the option when registering to create an MFA
                *                     token.</p>
                *             </li>
                *          </ul>
                */
            MfaConfiguration?: UserPoolMfaType | string;
            /**
                * <p>The device configuration.</p>
                */
            DeviceConfiguration?: DeviceConfigurationType;
            /**
                * <p>A number estimating the size of the user pool.</p>
                */
            EstimatedNumberOfUsers?: number;
            /**
                * <p>The email configuration of your user pool. The email configuration type sets your
                *             preferred sending method, Amazon Web Services Region, and sender for messages tfrom your user
                *             pool.</p>
                */
            EmailConfiguration?: EmailConfigurationType;
            /**
                * <p>The SMS configuration with the settings that your Amazon Cognito user pool must use to send an
                *             SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS messages
                *             with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management
                *             (IAM) role in your Amazon Web Services account.</p>
                */
            SmsConfiguration?: SmsConfigurationType;
            /**
                * <p>The tags that are assigned to the user pool. A tag is a label that you can apply to
                *             user pools to categorize and manage them in different ways, such as by purpose, owner,
                *             environment, or other criteria.</p>
                */
            UserPoolTags?: Record<string, string>;
            /**
                * <p>The reason why the SMS configuration can't send the messages to your users.</p>
                *         <p>This message might include comma-separated values to describe why your SMS
                *             configuration can't send messages to user pool end users.</p>
                *         <dl>
                *             <dt>InvalidSmsRoleAccessPolicyException</dt>
                *             <dd>
                *                     <p>The Identity and Access Management role that Amazon Cognito uses to send SMS messages isn't properly
                *                         configured. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SmsConfigurationType.html">SmsConfigurationType</a>.</p>
                *                 </dd>
                *             <dt>SNSSandbox</dt>
                *             <dd>
                *                     <p>The Amazon Web Services account is in the SNS SMS Sandbox and messages will
                *                         only reach verified end users. This parameter won’t get populated with
                *                         SNSSandbox if the IAM user creating the user pool doesn’t have SNS
                *                         permissions. To learn how to move your Amazon Web Services account out of the
                *                         sandbox, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox-moving-to-production.html">Moving out
                *                             of the SMS sandbox</a>.</p>
                *                 </dd>
                *          </dl>
                */
            SmsConfigurationFailure?: string;
            /**
                * <p>Deprecated. Review error codes from API requests with
                *                 <code>EventSource:cognito-idp.amazonaws.com</code> in CloudTrail for
                *             information about problems with user pool email configuration.</p>
                */
            EmailConfigurationFailure?: string;
            /**
                * <p>The domain prefix, if the user pool has a domain associated with it.</p>
                */
            Domain?: string;
            /**
                * <p>A custom domain name that you provide to Amazon Cognito. This parameter applies only if you use
                *             a custom domain to host the sign-up and sign-in pages for your application. An example
                *             of a custom domain name might be <code>auth.example.com</code>.</p>
                *         <p>For more information about adding a custom domain to your user pool, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html">Using Your Own Domain for the Hosted UI</a>.</p>
                */
            CustomDomain?: string;
            /**
                * <p>The configuration for <code>AdminCreateUser</code> requests.</p>
                */
            AdminCreateUserConfig?: AdminCreateUserConfigType;
            /**
                * <p>The user pool add-ons.</p>
                */
            UserPoolAddOns?: UserPoolAddOnsType;
            /**
                * <p>Case sensitivity of the username input for the selected sign-in option. For example,
                *             when case sensitivity is set to <code>False</code>, users can sign in using either
                *             "username" or "Username". This configuration is immutable once it has been set. For more
                *             information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html">UsernameConfigurationType</a>.</p>
                */
            UsernameConfiguration?: UsernameConfigurationType;
            /**
                * <p>The Amazon Resource Name (ARN) for the user pool.</p>
                */
            Arn?: string;
            /**
                * <p>The available verified method a user can use to recover their password when they call
                *                 <code>ForgotPassword</code>. You can use this setting to define a preferred method
                *             when a user has more than one method available. With this setting, SMS doesn't qualify
                *             for a valid password recovery mechanism if the user also has SMS multi-factor
                *             authentication (MFA) activated. In the absence of this setting, Amazon Cognito uses the legacy
                *             behavior to determine the recovery method where SMS is preferred through email.</p>
                */
            AccountRecoverySetting?: AccountRecoverySettingType;
    }
    export namespace UserPoolType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserPoolType) => any;
    }
    /**
        * <p>Represents the response from the server for the request to create a user pool.</p>
        */
    export interface CreateUserPoolResponse {
            /**
                * <p>A container for the user pool details.</p>
                */
            UserPool?: UserPoolType;
    }
    export namespace CreateUserPoolResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUserPoolResponse) => any;
    }
    /**
        * <p>This exception is thrown when a user pool tag can't be set or updated.</p>
        */
    export class UserPoolTaggingException extends __BaseException {
            readonly name: "UserPoolTaggingException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UserPoolTaggingException, __BaseException>);
    }
    export enum OAuthFlowType {
            client_credentials = "client_credentials",
            code = "code",
            implicit = "implicit"
    }
    export enum ExplicitAuthFlowsType {
            ADMIN_NO_SRP_AUTH = "ADMIN_NO_SRP_AUTH",
            ALLOW_ADMIN_USER_PASSWORD_AUTH = "ALLOW_ADMIN_USER_PASSWORD_AUTH",
            ALLOW_CUSTOM_AUTH = "ALLOW_CUSTOM_AUTH",
            ALLOW_REFRESH_TOKEN_AUTH = "ALLOW_REFRESH_TOKEN_AUTH",
            ALLOW_USER_PASSWORD_AUTH = "ALLOW_USER_PASSWORD_AUTH",
            ALLOW_USER_SRP_AUTH = "ALLOW_USER_SRP_AUTH",
            CUSTOM_AUTH_FLOW_ONLY = "CUSTOM_AUTH_FLOW_ONLY",
            USER_PASSWORD_AUTH = "USER_PASSWORD_AUTH"
    }
    export enum PreventUserExistenceErrorTypes {
            ENABLED = "ENABLED",
            LEGACY = "LEGACY"
    }
    export enum TimeUnitsType {
            DAYS = "days",
            HOURS = "hours",
            MINUTES = "minutes",
            SECONDS = "seconds"
    }
    /**
        * <p>The data type TokenValidityUnits specifies the time units you use when you set the
        *             duration of ID, access, and refresh tokens.</p>
        */
    export interface TokenValidityUnitsType {
            /**
                * <p> A time unit of <code>seconds</code>, <code>minutes</code>, <code>hours</code>, or
                *                 <code>days</code> for the value that you set in the <code>AccessTokenValidity</code>
                *             parameter. The default <code>AccessTokenValidity</code> time unit is hours.</p>
                */
            AccessToken?: TimeUnitsType | string;
            /**
                * <p>A time unit of <code>seconds</code>, <code>minutes</code>, <code>hours</code>, or
                *                 <code>days</code> for the value that you set in the <code>IdTokenValidity</code>
                *             parameter. The default <code>IdTokenValidity</code> time unit is hours.</p>
                */
            IdToken?: TimeUnitsType | string;
            /**
                * <p>A time unit of <code>seconds</code>, <code>minutes</code>, <code>hours</code>, or
                *                 <code>days</code> for the value that you set in the
                *                 <code>RefreshTokenValidity</code> parameter. The default
                *                 <code>RefreshTokenValidity</code> time unit is days.</p>
                */
            RefreshToken?: TimeUnitsType | string;
    }
    export namespace TokenValidityUnitsType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TokenValidityUnitsType) => any;
    }
    /**
        * <p>Represents the request to create a user pool client.</p>
        */
    export interface CreateUserPoolClientRequest {
            /**
                * <p>The user pool ID for the user pool where you want to create a user pool client.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The client name for the user pool client you would like to create.</p>
                */
            ClientName: string | undefined;
            /**
                * <p>Boolean to specify whether you want to generate a secret for the user pool client
                *             being created.</p>
                */
            GenerateSecret?: boolean;
            /**
                * <p>The refresh token time limit. After this limit expires, your user can't use
                *         their refresh token. To specify the time unit for <code>RefreshTokenValidity</code> as
                *         <code>seconds</code>, <code>minutes</code>, <code>hours</code>, or <code>days</code>,
                *         set a <code>TokenValidityUnits</code> value in your API request.</p>
                *         <p>For example, when you set <code>RefreshTokenValidity</code> as <code>10</code> and
                *         <code>TokenValidityUnits</code> as <code>days</code>, your user can refresh their session
                *         and retrieve new access and ID tokens for 10 days.</p>
                *         <p>The default time unit for <code>RefreshTokenValidity</code> in an API request is days.
                *         You can't set <code>RefreshTokenValidity</code> to 0. If you do, Amazon Cognito overrides the
                *         value with the default value of 30 days. <i>Valid range</i> is displayed below
                *         in seconds.</p>
                */
            RefreshTokenValidity?: number;
            /**
                * <p>The access token time limit. After this limit expires, your user can't use
                *         their access token. To specify the time unit for <code>AccessTokenValidity</code> as
                *         <code>seconds</code>, <code>minutes</code>, <code>hours</code>, or <code>days</code>,
                *         set a <code>TokenValidityUnits</code> value in your API request.</p>
                *         <p>For example, when you set <code>AccessTokenValidity</code> to <code>10</code> and
                *         <code>TokenValidityUnits</code> to <code>hours</code>, your user can authorize access with
                *         their access token for 10 hours.</p>
                *         <p>The default time unit for <code>AccessTokenValidity</code> in an API request is hours.
                *         <i>Valid range</i> is displayed below in seconds.</p>
                */
            AccessTokenValidity?: number;
            /**
                * <p>The ID token time limit. After this limit expires, your user can't use
                *         their ID token. To specify the time unit for <code>IdTokenValidity</code> as
                *         <code>seconds</code>, <code>minutes</code>, <code>hours</code>, or <code>days</code>,
                *         set a <code>TokenValidityUnits</code> value in your API request.</p>
                *         <p>For example, when you set <code>IdTokenValidity</code> as <code>10</code> and
                *         <code>TokenValidityUnits</code> as <code>hours</code>, your user can authenticate their
                *         session with their ID token for 10 hours.</p>
                *         <p>The default time unit for <code>AccessTokenValidity</code> in an API request is hours.
                *         <i>Valid range</i> is displayed below in seconds.</p>
                */
            IdTokenValidity?: number;
            /**
                * <p>The units in which the validity times are represented. The default unit for
                *             RefreshToken is days, and default for ID and access tokens are hours.</p>
                */
            TokenValidityUnits?: TokenValidityUnitsType;
            /**
                * <p>The read attributes.</p>
                */
            ReadAttributes?: string[];
            /**
                * <p>The user pool attributes that the app client can write to.</p>
                *         <p>If your app client allows users to sign in through an IdP, this array must include all
                *             attributes that you have mapped to IdP attributes. Amazon Cognito updates mapped attributes when
                *             users sign in to your application through an IdP. If your app client does not have write
                *             access to a mapped attribute, Amazon Cognito throws an error when it tries to update the
                *             attribute. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html">Specifying IdP Attribute Mappings for Your user
                *             pool</a>.</p>
                */
            WriteAttributes?: string[];
            /**
                * <p>The authentication flows that are supported by the user pool clients. Flow names
                *             without the <code>ALLOW_</code> prefix are no longer supported, in favor of new names
                *             with the <code>ALLOW_</code> prefix.</p>
                *         <note>
                *             <p>Values with <code>ALLOW_</code> prefix must be used only along with the
                *                     <code>ALLOW_</code> prefix.</p>
                *         </note>
                *         <p>Valid values include:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>ALLOW_ADMIN_USER_PASSWORD_AUTH</code>: Enable admin based user password
                *                     authentication flow <code>ADMIN_USER_PASSWORD_AUTH</code>. This setting replaces
                *                     the <code>ADMIN_NO_SRP_AUTH</code> setting. With this authentication flow, Amazon Cognito
                *                     receives the password in the request instead of using the Secure Remote Password
                *                     (SRP) protocol to verify passwords.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ALLOW_CUSTOM_AUTH</code>: Enable Lambda trigger based
                *                     authentication.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ALLOW_USER_PASSWORD_AUTH</code>: Enable user password-based
                *                     authentication. In this flow, Amazon Cognito receives the password in the request instead
                *                     of using the SRP protocol to verify passwords.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ALLOW_USER_SRP_AUTH</code>: Enable SRP-based authentication.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ALLOW_REFRESH_TOKEN_AUTH</code>: Enable authflow to refresh
                *                     tokens.</p>
                *             </li>
                *          </ul>
                *         <p>If you don't specify a value for <code>ExplicitAuthFlows</code>, your app client
                *             activates the <code>ALLOW_USER_SRP_AUTH</code> and <code>ALLOW_CUSTOM_AUTH</code>
                *             authentication flows.</p>
                */
            ExplicitAuthFlows?: (ExplicitAuthFlowsType | string)[];
            /**
                * <p>A list of provider names for the IdPs that this client supports. The following are
                *             supported: <code>COGNITO</code>, <code>Facebook</code>, <code>Google</code>
                *             <code>LoginWithAmazon</code>, and the names of your own SAML and OIDC providers.</p>
                */
            SupportedIdentityProviders?: string[];
            /**
                * <p>A list of allowed redirect (callback) URLs for the IdPs.</p>
                *         <p>A redirect URI must:</p>
                *         <ul>
                *             <li>
                *                 <p>Be an absolute URI.</p>
                *             </li>
                *             <li>
                *                 <p>Be registered with the authorization server.</p>
                *             </li>
                *             <li>
                *                 <p>Not include a fragment component.</p>
                *             </li>
                *          </ul>
                *         <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 -
                *                 Redirection Endpoint</a>.</p>
                *         <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes
                *             only.</p>
                *         <p>App callback URLs such as myapp://example are also supported.</p>
                */
            CallbackURLs?: string[];
            /**
                * <p>A list of allowed logout URLs for the IdPs.</p>
                */
            LogoutURLs?: string[];
            /**
                * <p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p>
                *         <p>A redirect URI must:</p>
                *         <ul>
                *             <li>
                *                 <p>Be an absolute URI.</p>
                *             </li>
                *             <li>
                *                 <p>Be registered with the authorization server.</p>
                *             </li>
                *             <li>
                *                 <p>Not include a fragment component.</p>
                *             </li>
                *          </ul>
                *         <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 -
                *                 Redirection Endpoint</a>.</p>
                *         <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes
                *             only.</p>
                *         <p>App callback URLs such as myapp://example are also supported.</p>
                */
            DefaultRedirectURI?: string;
            /**
                * <p>The allowed OAuth flows.</p>
                *         <dl>
                *             <dt>code</dt>
                *             <dd>
                *                     <p>Use a code grant flow, which provides an authorization code as the
                *                         response. This code can be exchanged for access tokens with the
                *                             <code>/oauth2/token</code> endpoint.</p>
                *                 </dd>
                *             <dt>implicit</dt>
                *             <dd>
                *                     <p>Issue the access token (and, optionally, ID token, based on scopes)
                *                         directly to your user.</p>
                *                 </dd>
                *             <dt>client_credentials</dt>
                *             <dd>
                *                     <p>Issue the access token from the <code>/oauth2/token</code> endpoint
                *                         directly to a non-person user using a combination of the client ID and
                *                         client secret.</p>
                *                 </dd>
                *          </dl>
                */
            AllowedOAuthFlows?: (OAuthFlowType | string)[];
            /**
                * <p>The allowed OAuth scopes. Possible values provided by OAuth are <code>phone</code>,
                *                 <code>email</code>, <code>openid</code>, and <code>profile</code>. Possible values
                *             provided by Amazon Web Services are <code>aws.cognito.signin.user.admin</code>. Custom
                *             scopes created in Resource Servers are also supported.</p>
                */
            AllowedOAuthScopes?: string[];
            /**
                * <p>Set to true if the client is allowed to follow the OAuth protocol when interacting
                *             with Amazon Cognito user pools.</p>
                */
            AllowedOAuthFlowsUserPoolClient?: boolean;
            /**
                * <p>The user pool analytics configuration for collecting metrics and sending them to your
                *             Amazon Pinpoint campaign.</p>
                *         <note>
                *             <p>In Amazon Web Services Regions where Amazon Pinpoint isn't available, user pools only support sending
                *                 events to Amazon Pinpoint projects in Amazon Web Services Region us-east-1. In Regions where Amazon Pinpoint is
                *                 available, user pools support sending events to Amazon Pinpoint projects within that same
                *                 Region.</p>
                *         </note>
                */
            AnalyticsConfiguration?: AnalyticsConfigurationType;
            /**
                * <p>Errors and responses that you want Amazon Cognito APIs to return during authentication, account
                *             confirmation, and password recovery when the user doesn't exist in the user pool. When
                *             set to <code>ENABLED</code> and the user doesn't exist, authentication returns an error
                *             indicating either the username or password was incorrect. Account confirmation and
                *             password recovery return a response indicating a code was sent to a simulated
                *             destination. When set to <code>LEGACY</code>, those APIs return a
                *                 <code>UserNotFoundException</code> exception if the user doesn't exist in the user
                *             pool.</p>
                *         <p>Valid values include:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>ENABLED</code> - This prevents user existence-related errors.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>LEGACY</code> - This represents the early behavior of Amazon Cognito where user
                *                     existence related errors aren't prevented.</p>
                *             </li>
                *          </ul>
                */
            PreventUserExistenceErrors?: PreventUserExistenceErrorTypes | string;
            /**
                * <p>Activates or deactivates token revocation. For more information about revoking tokens,
                *             see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html">RevokeToken</a>.</p>
                *         <p>If you don't include this parameter, token revocation is automatically activated for
                *             the new user pool client.</p>
                */
            EnableTokenRevocation?: boolean;
            /**
                * <p>Activates the propagation of additional user context data. For more information about
                *             propagation of user context data, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html"> Adding advanced security to a user pool</a>. If you don’t include this
                *             parameter, you can't send device fingerprint information, including source IP address,
                *             to Amazon Cognito advanced security. You can only activate
                *                 <code>EnablePropagateAdditionalUserContextData</code> in an app client that has a
                *             client secret.</p>
                */
            EnablePropagateAdditionalUserContextData?: boolean;
    }
    export namespace CreateUserPoolClientRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUserPoolClientRequest) => any;
    }
    /**
        * <p>Contains information about a user pool client.</p>
        */
    export interface UserPoolClientType {
            /**
                * <p>The user pool ID for the user pool client.</p>
                */
            UserPoolId?: string;
            /**
                * <p>The client name from the user pool request of the client type.</p>
                */
            ClientName?: string;
            /**
                * <p>The ID of the client associated with the user pool.</p>
                */
            ClientId?: string;
            /**
                * <p>The client secret from the user pool request of the client type.</p>
                */
            ClientSecret?: string;
            /**
                * <p>The date the user pool client was last modified.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>The date the user pool client was created.</p>
                */
            CreationDate?: Date;
            /**
                * <p>The refresh token time limit. After this limit expires, your user can't use
                *         their refresh token. To specify the time unit for <code>RefreshTokenValidity</code> as
                *         <code>seconds</code>, <code>minutes</code>, <code>hours</code>, or <code>days</code>,
                *         set a <code>TokenValidityUnits</code> value in your API request.</p>
                *         <p>For example, when you set <code>RefreshTokenValidity</code> as <code>10</code> and
                *         <code>TokenValidityUnits</code> as <code>days</code>, your user can refresh their session
                *         and retrieve new access and ID tokens for 10 days.</p>
                *         <p>The default time unit for <code>RefreshTokenValidity</code> in an API request is days.
                *         You can't set <code>RefreshTokenValidity</code> to 0. If you do, Amazon Cognito overrides the
                *         value with the default value of 30 days. <i>Valid range</i> is displayed below
                *         in seconds.</p>
                */
            RefreshTokenValidity?: number;
            /**
                * <p>The access token time limit. After this limit expires, your user can't use
                *         their access token. To specify the time unit for <code>AccessTokenValidity</code> as
                *         <code>seconds</code>, <code>minutes</code>, <code>hours</code>, or <code>days</code>,
                *         set a <code>TokenValidityUnits</code> value in your API request.</p>
                *         <p>For example, when you set <code>AccessTokenValidity</code> to <code>10</code> and
                *         <code>TokenValidityUnits</code> to <code>hours</code>, your user can authorize access with
                *         their access token for 10 hours.</p>
                *         <p>The default time unit for <code>AccessTokenValidity</code> in an API request is hours.
                *         <i>Valid range</i> is displayed below in seconds.</p>
                */
            AccessTokenValidity?: number;
            /**
                * <p>The ID token time limit. After this limit expires, your user can't use
                *         their ID token. To specify the time unit for <code>IdTokenValidity</code> as
                *         <code>seconds</code>, <code>minutes</code>, <code>hours</code>, or <code>days</code>,
                *         set a <code>TokenValidityUnits</code> value in your API request.</p>
                *         <p>For example, when you set <code>IdTokenValidity</code> as <code>10</code> and
                *         <code>TokenValidityUnits</code> as <code>hours</code>, your user can authenticate their
                *         session with their ID token for 10 hours.</p>
                *         <p>The default time unit for <code>AccessTokenValidity</code> in an API request is hours.
                *         <i>Valid range</i> is displayed below in seconds.</p>
                */
            IdTokenValidity?: number;
            /**
                * <p>The time units used to specify the token validity times of each token type: ID,
                *             access, and refresh.</p>
                */
            TokenValidityUnits?: TokenValidityUnitsType;
            /**
                * <p>The Read-only attributes.</p>
                */
            ReadAttributes?: string[];
            /**
                * <p>The writeable attributes.</p>
                */
            WriteAttributes?: string[];
            /**
                * <p>The authentication flows that are supported by the user pool clients. Flow names
                *             without the <code>ALLOW_</code> prefix are no longer supported in favor of new names
                *             with the <code>ALLOW_</code> prefix. Note that values with <code>ALLOW_</code> prefix
                *             must be used only along with values including the <code>ALLOW_</code> prefix.</p>
                *         <p>Valid values include:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>ALLOW_ADMIN_USER_PASSWORD_AUTH</code>: Enable admin based user password
                *                     authentication flow <code>ADMIN_USER_PASSWORD_AUTH</code>. This setting replaces
                *                     the <code>ADMIN_NO_SRP_AUTH</code> setting. With this authentication flow, Amazon Cognito
                *                     receives the password in the request instead of using the Secure Remote Password
                *                     (SRP) protocol to verify passwords.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ALLOW_CUSTOM_AUTH</code>: Enable Lambda trigger based
                *                     authentication.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ALLOW_USER_PASSWORD_AUTH</code>: Enable user password-based
                *                     authentication. In this flow, Amazon Cognito receives the password in the request instead
                *                     of using the SRP protocol to verify passwords.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ALLOW_USER_SRP_AUTH</code>: Enable SRP-based authentication.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ALLOW_REFRESH_TOKEN_AUTH</code>: Enable authflow to refresh
                *                     tokens.</p>
                *             </li>
                *          </ul>
                */
            ExplicitAuthFlows?: (ExplicitAuthFlowsType | string)[];
            /**
                * <p>A list of provider names for the IdPs that this client supports. The following are
                *             supported: <code>COGNITO</code>, <code>Facebook</code>, <code>Google</code>
                *             <code>LoginWithAmazon</code>, and the names of your own SAML and OIDC providers.</p>
                */
            SupportedIdentityProviders?: string[];
            /**
                * <p>A list of allowed redirect (callback) URLs for the IdPs.</p>
                *         <p>A redirect URI must:</p>
                *         <ul>
                *             <li>
                *                 <p>Be an absolute URI.</p>
                *             </li>
                *             <li>
                *                 <p>Be registered with the authorization server.</p>
                *             </li>
                *             <li>
                *                 <p>Not include a fragment component.</p>
                *             </li>
                *          </ul>
                *         <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 -
                *                 Redirection Endpoint</a>.</p>
                *         <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes
                *             only.</p>
                *         <p>App callback URLs such as myapp://example are also supported.</p>
                */
            CallbackURLs?: string[];
            /**
                * <p>A list of allowed logout URLs for the IdPs.</p>
                */
            LogoutURLs?: string[];
            /**
                * <p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p>
                *         <p>A redirect URI must:</p>
                *         <ul>
                *             <li>
                *                 <p>Be an absolute URI.</p>
                *             </li>
                *             <li>
                *                 <p>Be registered with the authorization server.</p>
                *             </li>
                *             <li>
                *                 <p>Not include a fragment component.</p>
                *             </li>
                *          </ul>
                *         <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 -
                *                 Redirection Endpoint</a>.</p>
                *         <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes
                *             only.</p>
                *         <p>App callback URLs such as myapp://example are also supported.</p>
                */
            DefaultRedirectURI?: string;
            /**
                * <p>The allowed OAuth flows.</p>
                *         <dl>
                *             <dt>code</dt>
                *             <dd>
                *                     <p>Use a code grant flow, which provides an authorization code as the
                *                         response. This code can be exchanged for access tokens with the
                *                             <code>/oauth2/token</code> endpoint.</p>
                *                 </dd>
                *             <dt>implicit</dt>
                *             <dd>
                *                     <p>Issue the access token (and, optionally, ID token, based on scopes)
                *                         directly to your user.</p>
                *                 </dd>
                *             <dt>client_credentials</dt>
                *             <dd>
                *                     <p>Issue the access token from the <code>/oauth2/token</code> endpoint
                *                         directly to a non-person user using a combination of the client ID and
                *                         client secret.</p>
                *                 </dd>
                *          </dl>
                */
            AllowedOAuthFlows?: (OAuthFlowType | string)[];
            /**
                * <p>The OAuth scopes that your app client supports. Possible values that OAuth provides
                *             are <code>phone</code>, <code>email</code>, <code>openid</code>, and
                *                 <code>profile</code>. Possible values that Amazon Web Services provides are
                *                 <code>aws.cognito.signin.user.admin</code>. Amazon Cognito also supports custom scopes that
                *             you create in Resource Servers.</p>
                */
            AllowedOAuthScopes?: string[];
            /**
                * <p>Set to true if the client is allowed to follow the OAuth protocol when interacting
                *             with Amazon Cognito user pools.</p>
                */
            AllowedOAuthFlowsUserPoolClient?: boolean;
            /**
                * <p>The Amazon Pinpoint analytics configuration for the user pool client.</p>
                *         <note>
                *             <p>Amazon Cognito user pools only support sending events to Amazon Pinpoint projects in the US East
                *                 (N. Virginia) us-east-1 Region, regardless of the Region where the user pool
                *                 resides.</p>
                *         </note>
                */
            AnalyticsConfiguration?: AnalyticsConfigurationType;
            /**
                * <p>Errors and responses that you want Amazon Cognito APIs to return during authentication, account
                *             confirmation, and password recovery when the user doesn't exist in the user pool. When
                *             set to <code>ENABLED</code> and the user doesn't exist, authentication returns an error
                *             indicating either the username or password was incorrect. Account confirmation and
                *             password recovery return a response indicating a code was sent to a simulated
                *             destination. When set to <code>LEGACY</code>, those APIs return a
                *                 <code>UserNotFoundException</code> exception if the user doesn't exist in the user
                *             pool.</p>
                *         <p>Valid values include:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>ENABLED</code> - This prevents user existence-related errors.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>LEGACY</code> - This represents the old behavior of Amazon Cognito where user
                *                     existence related errors aren't prevented.</p>
                *             </li>
                *          </ul>
                */
            PreventUserExistenceErrors?: PreventUserExistenceErrorTypes | string;
            /**
                * <p>Indicates whether token revocation is activated for the user pool client. When you
                *             create a new user pool client, token revocation is activated by default. For more
                *             information about revoking tokens, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html">RevokeToken</a>.</p>
                */
            EnableTokenRevocation?: boolean;
            /**
                * <p>When <code>EnablePropagateAdditionalUserContextData</code> is true, Amazon Cognito accepts an
                *                 <code>IpAddress</code> value that you send in the <code>UserContextData</code>
                *             parameter. The <code>UserContextData</code> parameter sends information to Amazon Cognito
                *             advanced security for risk analysis. You can send <code>UserContextData</code> when you
                *             sign in Amazon Cognito native users with the <code>InitiateAuth</code> and
                *                 <code>RespondToAuthChallenge</code> API operations.</p>
                *         <p>When <code>EnablePropagateAdditionalUserContextData</code> is false, you can't send
                *             your user's source IP address to Amazon Cognito advanced security with unauthenticated API
                *             operations. <code>EnablePropagateAdditionalUserContextData</code> doesn't affect whether
                *             you can send a source IP address in a <code>ContextData</code> parameter with the
                *             authenticated API operations <code>AdminInitiateAuth</code> and
                *                 <code>AdminRespondToAuthChallenge</code>.</p>
                *         <p>You can only activate <code>EnablePropagateAdditionalUserContextData</code> in an app
                *             client that has a client secret. For more information about propagation of user context
                *             data, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-adaptive-authentication.html#user-pool-settings-adaptive-authentication-device-fingerprint">Adding user device and session data to API requests</a>.</p>
                */
            EnablePropagateAdditionalUserContextData?: boolean;
    }
    export namespace UserPoolClientType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserPoolClientType) => any;
    }
    /**
        * <p>Represents the response from the server to create a user pool client.</p>
        */
    export interface CreateUserPoolClientResponse {
            /**
                * <p>The user pool client that was just created.</p>
                */
            UserPoolClient?: UserPoolClientType;
    }
    export namespace CreateUserPoolClientResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUserPoolClientResponse) => any;
    }
    /**
        * <p>This exception is thrown when the specified OAuth flow is not valid.</p>
        */
    export class InvalidOAuthFlowException extends __BaseException {
            readonly name: "InvalidOAuthFlowException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidOAuthFlowException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the specified scope doesn't exist.</p>
        */
    export class ScopeDoesNotExistException extends __BaseException {
            readonly name: "ScopeDoesNotExistException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ScopeDoesNotExistException, __BaseException>);
    }
    /**
        * <p>The configuration for a custom domain that hosts the sign-up and sign-in webpages for
        *             your application.</p>
        */
    export interface CustomDomainConfigType {
            /**
                * <p>The Amazon Resource Name (ARN) of an Certificate Manager SSL certificate. You use
                *             this certificate for the subdomain of your custom domain.</p>
                */
            CertificateArn: string | undefined;
    }
    export namespace CustomDomainConfigType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomDomainConfigType) => any;
    }
    export interface CreateUserPoolDomainRequest {
            /**
                * <p>The domain string. For custom domains, this is the fully-qualified domain name, such
                *             as <code>auth.example.com</code>. For Amazon Cognito prefix domains, this is the prefix alone,
                *             such as <code>auth</code>.</p>
                */
            Domain: string | undefined;
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The configuration for a custom domain that hosts the sign-up and sign-in webpages for
                *             your application.</p>
                *         <p>Provide this parameter only if you want to use a custom domain for your user pool.
                *             Otherwise, you can exclude this parameter and use the Amazon Cognito hosted domain
                *             instead.</p>
                *         <p>For more information about the hosted domain and custom domains, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-assign-domain.html">Configuring a User Pool Domain</a>.</p>
                */
            CustomDomainConfig?: CustomDomainConfigType;
    }
    export namespace CreateUserPoolDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUserPoolDomainRequest) => any;
    }
    export interface CreateUserPoolDomainResponse {
            /**
                * <p>The Amazon CloudFront endpoint that you use as the target of the alias that you set up with
                *             your Domain Name Service (DNS) provider.</p>
                */
            CloudFrontDomain?: string;
    }
    export namespace CreateUserPoolDomainResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUserPoolDomainResponse) => any;
    }
    export interface DeleteGroupRequest {
            /**
                * <p>The name of the group.</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The user pool ID for the user pool.</p>
                */
            UserPoolId: string | undefined;
    }
    export namespace DeleteGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGroupRequest) => any;
    }
    export interface DeleteIdentityProviderRequest {
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The IdP name.</p>
                */
            ProviderName: string | undefined;
    }
    export namespace DeleteIdentityProviderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteIdentityProviderRequest) => any;
    }
    /**
        * <p>This exception is thrown when the specified identifier isn't supported.</p>
        */
    export class UnsupportedIdentityProviderException extends __BaseException {
            readonly name: "UnsupportedIdentityProviderException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedIdentityProviderException, __BaseException>);
    }
    export interface DeleteResourceServerRequest {
            /**
                * <p>The user pool ID for the user pool that hosts the resource server.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The identifier for the resource server.</p>
                */
            Identifier: string | undefined;
    }
    export namespace DeleteResourceServerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteResourceServerRequest) => any;
    }
    /**
        * <p>Represents the request to delete a user.</p>
        */
    export interface DeleteUserRequest {
            /**
                * <p>A valid access token that Amazon Cognito issued to the user whose user profile you want to
                *             delete.</p>
                */
            AccessToken: string | undefined;
    }
    export namespace DeleteUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserRequest) => any;
    }
    /**
        * <p>Represents the request to delete user attributes.</p>
        */
    export interface DeleteUserAttributesRequest {
            /**
                * <p>An array of strings representing the user attribute names you want to delete.</p>
                *         <p>For custom attributes, you must prependattach the <code>custom:</code> prefix to the
                *             front of the attribute name.</p>
                */
            UserAttributeNames: string[] | undefined;
            /**
                * <p>A valid access token that Amazon Cognito issued to the user whose attributes you want to
                *             delete.</p>
                */
            AccessToken: string | undefined;
    }
    export namespace DeleteUserAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserAttributesRequest) => any;
    }
    /**
        * <p>Represents the response from the server to delete user attributes.</p>
        */
    export interface DeleteUserAttributesResponse {
    }
    export namespace DeleteUserAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserAttributesResponse) => any;
    }
    /**
        * <p>Represents the request to delete a user pool.</p>
        */
    export interface DeleteUserPoolRequest {
            /**
                * <p>The user pool ID for the user pool you want to delete.</p>
                */
            UserPoolId: string | undefined;
    }
    export namespace DeleteUserPoolRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserPoolRequest) => any;
    }
    /**
        * <p>Represents the request to delete a user pool client.</p>
        */
    export interface DeleteUserPoolClientRequest {
            /**
                * <p>The user pool ID for the user pool where you want to delete the client.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The app client ID of the app associated with the user pool.</p>
                */
            ClientId: string | undefined;
    }
    export namespace DeleteUserPoolClientRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserPoolClientRequest) => any;
    }
    export interface DeleteUserPoolDomainRequest {
            /**
                * <p>The domain string. For custom domains, this is the fully-qualified domain name, such
                *             as <code>auth.example.com</code>. For Amazon Cognito prefix domains, this is the prefix alone,
                *             such as <code>auth</code>.</p>
                */
            Domain: string | undefined;
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId: string | undefined;
    }
    export namespace DeleteUserPoolDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserPoolDomainRequest) => any;
    }
    export interface DeleteUserPoolDomainResponse {
    }
    export namespace DeleteUserPoolDomainResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserPoolDomainResponse) => any;
    }
    export interface DescribeIdentityProviderRequest {
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The IdP name.</p>
                */
            ProviderName: string | undefined;
    }
    export namespace DescribeIdentityProviderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeIdentityProviderRequest) => any;
    }
    export interface DescribeIdentityProviderResponse {
            /**
                * <p>The IdP that was deleted.</p>
                */
            IdentityProvider: IdentityProviderType | undefined;
    }
    export namespace DescribeIdentityProviderResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeIdentityProviderResponse) => any;
    }
    export interface DescribeResourceServerRequest {
            /**
                * <p>The user pool ID for the user pool that hosts the resource server.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The identifier for the resource server</p>
                */
            Identifier: string | undefined;
    }
    export namespace DescribeResourceServerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeResourceServerRequest) => any;
    }
    export interface DescribeResourceServerResponse {
            /**
                * <p>The resource server.</p>
                */
            ResourceServer: ResourceServerType | undefined;
    }
    export namespace DescribeResourceServerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeResourceServerResponse) => any;
    }
    export interface DescribeRiskConfigurationRequest {
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The app client ID.</p>
                */
            ClientId?: string;
    }
    export namespace DescribeRiskConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRiskConfigurationRequest) => any;
    }
    export enum CompromisedCredentialsEventActionType {
            BLOCK = "BLOCK",
            NO_ACTION = "NO_ACTION"
    }
    /**
        * <p>The compromised credentials actions type.</p>
        */
    export interface CompromisedCredentialsActionsType {
            /**
                * <p>The event action.</p>
                */
            EventAction: CompromisedCredentialsEventActionType | string | undefined;
    }
    export namespace CompromisedCredentialsActionsType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CompromisedCredentialsActionsType) => any;
    }
    export enum EventFilterType {
            PASSWORD_CHANGE = "PASSWORD_CHANGE",
            SIGN_IN = "SIGN_IN",
            SIGN_UP = "SIGN_UP"
    }
    /**
        * <p>The compromised credentials risk configuration type.</p>
        */
    export interface CompromisedCredentialsRiskConfigurationType {
            /**
                * <p>Perform the action for these events. The default is to perform all events if no event
                *             filter is specified.</p>
                */
            EventFilter?: (EventFilterType | string)[];
            /**
                * <p>The compromised credentials risk configuration actions.</p>
                */
            Actions: CompromisedCredentialsActionsType | undefined;
    }
    export namespace CompromisedCredentialsRiskConfigurationType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CompromisedCredentialsRiskConfigurationType) => any;
    }
    /**
        * <p>The type of the configuration to override the risk decision.</p>
        */
    export interface RiskExceptionConfigurationType {
            /**
                * <p>Overrides the risk decision to always block the pre-authentication requests. The IP
                *             range is in CIDR notation, a compact representation of an IP address and its routing
                *             prefix.</p>
                */
            BlockedIPRangeList?: string[];
            /**
                * <p>Risk detection isn't performed on the IP addresses in this range list. The IP range is
                *             in CIDR notation.</p>
                */
            SkippedIPRangeList?: string[];
    }
    export namespace RiskExceptionConfigurationType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RiskExceptionConfigurationType) => any;
    }
    /**
        * <p>The risk configuration type.</p>
        */
    export interface RiskConfigurationType {
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId?: string;
            /**
                * <p>The app client ID.</p>
                */
            ClientId?: string;
            /**
                * <p>The compromised credentials risk configuration object, including the
                *                 <code>EventFilter</code> and the <code>EventAction</code>.</p>
                */
            CompromisedCredentialsRiskConfiguration?: CompromisedCredentialsRiskConfigurationType;
            /**
                * <p>The account takeover risk configuration object, including the
                *                 <code>NotifyConfiguration</code> object and <code>Actions</code> to take if there is
                *             an account takeover.</p>
                */
            AccountTakeoverRiskConfiguration?: AccountTakeoverRiskConfigurationType;
            /**
                * <p>The configuration to override the risk decision.</p>
                */
            RiskExceptionConfiguration?: RiskExceptionConfigurationType;
            /**
                * <p>The last modified date.</p>
                */
            LastModifiedDate?: Date;
    }
    export namespace RiskConfigurationType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RiskConfigurationType) => any;
    }
    export interface DescribeRiskConfigurationResponse {
            /**
                * <p>The risk configuration.</p>
                */
            RiskConfiguration: RiskConfigurationType | undefined;
    }
    export namespace DescribeRiskConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRiskConfigurationResponse) => any;
    }
    /**
        * <p>Represents the request to describe the user import job.</p>
        */
    export interface DescribeUserImportJobRequest {
            /**
                * <p>The user pool ID for the user pool that the users are being imported into.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The job ID for the user import job.</p>
                */
            JobId: string | undefined;
    }
    export namespace DescribeUserImportJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUserImportJobRequest) => any;
    }
    /**
        * <p>Represents the response from the server to the request to describe the user import
        *             job.</p>
        */
    export interface DescribeUserImportJobResponse {
            /**
                * <p>The job object that represents the user import job.</p>
                */
            UserImportJob?: UserImportJobType;
    }
    export namespace DescribeUserImportJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUserImportJobResponse) => any;
    }
    /**
        * <p>Represents the request to describe the user pool.</p>
        */
    export interface DescribeUserPoolRequest {
            /**
                * <p>The user pool ID for the user pool you want to describe.</p>
                */
            UserPoolId: string | undefined;
    }
    export namespace DescribeUserPoolRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUserPoolRequest) => any;
    }
    /**
        * <p>Represents the response to describe the user pool.</p>
        */
    export interface DescribeUserPoolResponse {
            /**
                * <p>The container of metadata returned by the server to describe the pool.</p>
                */
            UserPool?: UserPoolType;
    }
    export namespace DescribeUserPoolResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUserPoolResponse) => any;
    }
    /**
        * <p>Represents the request to describe a user pool client.</p>
        */
    export interface DescribeUserPoolClientRequest {
            /**
                * <p>The user pool ID for the user pool you want to describe.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The app client ID of the app associated with the user pool.</p>
                */
            ClientId: string | undefined;
    }
    export namespace DescribeUserPoolClientRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUserPoolClientRequest) => any;
    }
    /**
        * <p>Represents the response from the server from a request to describe the user pool
        *             client.</p>
        */
    export interface DescribeUserPoolClientResponse {
            /**
                * <p>The user pool client from a server response to describe the user pool client.</p>
                */
            UserPoolClient?: UserPoolClientType;
    }
    export namespace DescribeUserPoolClientResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUserPoolClientResponse) => any;
    }
    export interface DescribeUserPoolDomainRequest {
            /**
                * <p>The domain string. For custom domains, this is the fully-qualified domain name, such
                *             as <code>auth.example.com</code>. For Amazon Cognito prefix domains, this is the prefix alone,
                *             such as <code>auth</code>.</p>
                */
            Domain: string | undefined;
    }
    export namespace DescribeUserPoolDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUserPoolDomainRequest) => any;
    }
    export enum DomainStatusType {
            ACTIVE = "ACTIVE",
            CREATING = "CREATING",
            DELETING = "DELETING",
            FAILED = "FAILED",
            UPDATING = "UPDATING"
    }
    /**
        * <p>A container for information about a domain.</p>
        */
    export interface DomainDescriptionType {
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId?: string;
            /**
                * <p>The Amazon Web Services ID for the user pool owner.</p>
                */
            AWSAccountId?: string;
            /**
                * <p>The domain string. For custom domains, this is the fully-qualified domain name, such
                *             as <code>auth.example.com</code>. For Amazon Cognito prefix domains, this is the prefix alone,
                *             such as <code>auth</code>.</p>
                */
            Domain?: string;
            /**
                * <p>The Amazon S3 bucket where the static files for this domain are stored.</p>
                */
            S3Bucket?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon CloudFront distribution.</p>
                */
            CloudFrontDistribution?: string;
            /**
                * <p>The app version.</p>
                */
            Version?: string;
            /**
                * <p>The domain status.</p>
                */
            Status?: DomainStatusType | string;
            /**
                * <p>The configuration for a custom domain that hosts the sign-up and sign-in webpages for
                *             your application.</p>
                */
            CustomDomainConfig?: CustomDomainConfigType;
    }
    export namespace DomainDescriptionType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainDescriptionType) => any;
    }
    export interface DescribeUserPoolDomainResponse {
            /**
                * <p>A domain description object containing information about the domain.</p>
                */
            DomainDescription?: DomainDescriptionType;
    }
    export namespace DescribeUserPoolDomainResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUserPoolDomainResponse) => any;
    }
    /**
        * <p>Represents the request to forget the device.</p>
        */
    export interface ForgetDeviceRequest {
            /**
                * <p>A valid access token that Amazon Cognito issued to the user whose registered device you want to
                *             forget.</p>
                */
            AccessToken?: string;
            /**
                * <p>The device key.</p>
                */
            DeviceKey: string | undefined;
    }
    export namespace ForgetDeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ForgetDeviceRequest) => any;
    }
    /**
        * <p>Represents the request to reset a user's password.</p>
        */
    export interface ForgotPasswordRequest {
            /**
                * <p>The ID of the client associated with the user pool.</p>
                */
            ClientId: string | undefined;
            /**
                * <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of a
                *             user pool client and username plus the client ID in the message.</p>
                */
            SecretHash?: string;
            /**
                * <p>Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced
                * security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito
                * when it makes API requests.</p>
                */
            UserContextData?: UserContextDataType;
            /**
                * <p>The user name of the user for whom you want to enter a code to reset a forgotten
                *             password.</p>
                */
            Username: string | undefined;
            /**
                * <p>The Amazon Pinpoint analytics metadata that contributes to your metrics for
                *                 <code>ForgotPassword</code> calls.</p>
                */
            AnalyticsMetadata?: AnalyticsMetadataType;
            /**
                * <p>A map of custom key-value pairs that you can provide as input for any custom workflows
                *             that this action triggers.</p>
                *         <p>You create custom workflows by assigning Lambda functions to user pool
                *             triggers. When you use the ForgotPassword API action, Amazon Cognito invokes any
                *             functions that are assigned to the following triggers: <i>pre sign-up</i>,
                *                 <i>custom message</i>, and <i>user migration</i>. When
                *             Amazon Cognito invokes any of these functions, it passes a JSON payload, which the
                *             function receives as input. This payload contains a <code>clientMetadata</code>
                *             attribute, which provides the data that you assigned to the ClientMetadata parameter in
                *             your ForgotPassword request. In your function code in Lambda, you can
                *             process the <code>clientMetadata</code> value to enhance your workflow for your specific
                *             needs.</p>
                *
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
                * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
                *
                *         <note>
                *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the
                *                 following:</p>
                *             <ul>
                *                <li>
                *                     <p>Store the ClientMetadata value. This data is available only to Lambda
                *                         triggers that are assigned to a user pool to support custom workflows. If
                *                         your user pool configuration doesn't include triggers, the ClientMetadata
                *                         parameter serves no purpose.</p>
                *                 </li>
                *                <li>
                *                     <p>Validate the ClientMetadata value.</p>
                *                 </li>
                *                <li>
                *                     <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive
                *                         information.</p>
                *                 </li>
                *             </ul>
                *         </note>
                */
            ClientMetadata?: Record<string, string>;
    }
    export namespace ForgotPasswordRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ForgotPasswordRequest) => any;
    }
    /**
        * <p>The delivery details for an email or SMS message that Amazon Cognito sent for authentication or
        *             verification.</p>
        */
    export interface CodeDeliveryDetailsType {
            /**
                * <p>The email address or phone number destination where Amazon Cognito sent the code.</p>
                */
            Destination?: string;
            /**
                * <p>The method that Amazon Cognito used to send the code.</p>
                */
            DeliveryMedium?: DeliveryMediumType | string;
            /**
                * <p>The name of the attribute that Amazon Cognito verifies with the code.</p>
                */
            AttributeName?: string;
    }
    export namespace CodeDeliveryDetailsType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CodeDeliveryDetailsType) => any;
    }
    /**
        * <p>The response from Amazon Cognito to a request to reset a password.</p>
        */
    export interface ForgotPasswordResponse {
            /**
                * <p>The code delivery details returned by the server in response to the request to reset a
                *             password.</p>
                */
            CodeDeliveryDetails?: CodeDeliveryDetailsType;
    }
    export namespace ForgotPasswordResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ForgotPasswordResponse) => any;
    }
    /**
        * <p>Represents the request to get the header information of the CSV file for the user
        *             import job.</p>
        */
    export interface GetCSVHeaderRequest {
            /**
                * <p>The user pool ID for the user pool that the users are to be imported into.</p>
                */
            UserPoolId: string | undefined;
    }
    export namespace GetCSVHeaderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCSVHeaderRequest) => any;
    }
    /**
        * <p>Represents the response from the server to the request to get the header information
        *             of the CSV file for the user import job.</p>
        */
    export interface GetCSVHeaderResponse {
            /**
                * <p>The user pool ID for the user pool that the users are to be imported into.</p>
                */
            UserPoolId?: string;
            /**
                * <p>The header information of the CSV file for the user import job.</p>
                */
            CSVHeader?: string[];
    }
    export namespace GetCSVHeaderResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCSVHeaderResponse) => any;
    }
    /**
        * <p>Represents the request to get the device.</p>
        */
    export interface GetDeviceRequest {
            /**
                * <p>The device key.</p>
                */
            DeviceKey: string | undefined;
            /**
                * <p>A valid access token that Amazon Cognito issued to the user whose device information you want
                *             to request.</p>
                */
            AccessToken?: string;
    }
    export namespace GetDeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeviceRequest) => any;
    }
    /**
        * <p>Gets the device response.</p>
        */
    export interface GetDeviceResponse {
            /**
                * <p>The device.</p>
                */
            Device: DeviceType | undefined;
    }
    export namespace GetDeviceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeviceResponse) => any;
    }
    export interface GetGroupRequest {
            /**
                * <p>The name of the group.</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The user pool ID for the user pool.</p>
                */
            UserPoolId: string | undefined;
    }
    export namespace GetGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGroupRequest) => any;
    }
    export interface GetGroupResponse {
            /**
                * <p>The group object for the group.</p>
                */
            Group?: GroupType;
    }
    export namespace GetGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGroupResponse) => any;
    }
    export interface GetIdentityProviderByIdentifierRequest {
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The IdP identifier.</p>
                */
            IdpIdentifier: string | undefined;
    }
    export namespace GetIdentityProviderByIdentifierRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIdentityProviderByIdentifierRequest) => any;
    }
    export interface GetIdentityProviderByIdentifierResponse {
            /**
                * <p>The IdP object.</p>
                */
            IdentityProvider: IdentityProviderType | undefined;
    }
    export namespace GetIdentityProviderByIdentifierResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIdentityProviderByIdentifierResponse) => any;
    }
    /**
        * <p>Request to get a signing certificate from Amazon Cognito.</p>
        */
    export interface GetSigningCertificateRequest {
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId: string | undefined;
    }
    export namespace GetSigningCertificateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSigningCertificateRequest) => any;
    }
    /**
        * <p>Response from Amazon Cognito for a signing certificate request.</p>
        */
    export interface GetSigningCertificateResponse {
            /**
                * <p>The signing certificate.</p>
                */
            Certificate?: string;
    }
    export namespace GetSigningCertificateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSigningCertificateResponse) => any;
    }
    export interface GetUICustomizationRequest {
            /**
                * <p>The user pool ID for the user pool.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The client ID for the client app.</p>
                */
            ClientId?: string;
    }
    export namespace GetUICustomizationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUICustomizationRequest) => any;
    }
    /**
        * <p>A container for the UI customization information for a user pool's built-in app
        *             UI.</p>
        */
    export interface UICustomizationType {
            /**
                * <p>The user pool ID for the user pool.</p>
                */
            UserPoolId?: string;
            /**
                * <p>The client ID for the client app.</p>
                */
            ClientId?: string;
            /**
                * <p>The logo image for the UI customization.</p>
                */
            ImageUrl?: string;
            /**
                * <p>The CSS values in the UI customization.</p>
                */
            CSS?: string;
            /**
                * <p>The CSS version number.</p>
                */
            CSSVersion?: string;
            /**
                * <p>The last-modified date for the UI customization.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>The creation date for the UI customization.</p>
                */
            CreationDate?: Date;
    }
    export namespace UICustomizationType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UICustomizationType) => any;
    }
    export interface GetUICustomizationResponse {
            /**
                * <p>The UI customization information.</p>
                */
            UICustomization: UICustomizationType | undefined;
    }
    export namespace GetUICustomizationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUICustomizationResponse) => any;
    }
    /**
        * <p>Represents the request to get information about the user.</p>
        */
    export interface GetUserRequest {
            /**
                * <p>A non-expired access token for the user whose information you want to query.</p>
                */
            AccessToken: string | undefined;
    }
    export namespace GetUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUserRequest) => any;
    }
    /**
        * <p>Represents the response from the server from the request to get information about the
        *             user.</p>
        */
    export interface GetUserResponse {
            /**
                * <p>The user name of the user you want to retrieve from the get user request.</p>
                */
            Username: string | undefined;
            /**
                * <p>An array of name-value pairs representing user attributes.</p>
                *         <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the
                *             attribute name.</p>
                */
            UserAttributes: AttributeType[] | undefined;
            /**
                * <p>
                *             <i>This response parameter is no longer supported.</i> It provides
                *             information only about SMS MFA configurations. It doesn't provide information about
                *             time-based one-time password (TOTP) software token MFA configurations. To look up
                *             information about either type of MFA configuration, use UserMFASettingList
                *             instead.</p>
                */
            MFAOptions?: MFAOptionType[];
            /**
                * <p>The user's preferred MFA setting.</p>
                */
            PreferredMfaSetting?: string;
            /**
                * <p>The MFA options that are activated for the user. The possible values in this list are
                *                 <code>SMS_MFA</code> and <code>SOFTWARE_TOKEN_MFA</code>.</p>
                */
            UserMFASettingList?: string[];
    }
    export namespace GetUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUserResponse) => any;
    }
    /**
        * <p>Represents the request to get user attribute verification.</p>
        */
    export interface GetUserAttributeVerificationCodeRequest {
            /**
                * <p>A non-expired access token for the user whose attribute verification code you want to
                *             generate.</p>
                */
            AccessToken: string | undefined;
            /**
                * <p>The attribute name returned by the server response to get the user attribute
                *             verification code.</p>
                */
            AttributeName: string | undefined;
            /**
                * <p>A map of custom key-value pairs that you can provide as input for any custom workflows
                *             that this action triggers.</p>
                *         <p>You create custom workflows by assigning Lambda functions to user pool
                *             triggers. When you use the GetUserAttributeVerificationCode API action, Amazon Cognito invokes
                *             the function that is assigned to the <i>custom message</i> trigger. When
                *             Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as
                *             input. This payload contains a <code>clientMetadata</code> attribute, which provides the
                *             data that you assigned to the ClientMetadata parameter in your
                *             GetUserAttributeVerificationCode request. In your function code in Lambda, you can process the <code>clientMetadata</code> value to enhance your workflow for
                *             your specific needs.</p>
                *
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
                * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
                *
                *         <note>
                *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the
                *                 following:</p>
                *             <ul>
                *                <li>
                *                     <p>Store the ClientMetadata value. This data is available only to Lambda
                *                         triggers that are assigned to a user pool to support custom workflows. If
                *                         your user pool configuration doesn't include triggers, the ClientMetadata
                *                         parameter serves no purpose.</p>
                *                 </li>
                *                <li>
                *                     <p>Validate the ClientMetadata value.</p>
                *                 </li>
                *                <li>
                *                     <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive
                *                         information.</p>
                *                 </li>
                *             </ul>
                *         </note>
                */
            ClientMetadata?: Record<string, string>;
    }
    export namespace GetUserAttributeVerificationCodeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUserAttributeVerificationCodeRequest) => any;
    }
    /**
        * <p>The verification code response returned by the server response to get the user
        *             attribute verification code.</p>
        */
    export interface GetUserAttributeVerificationCodeResponse {
            /**
                * <p>The code delivery details returned by the server in response to the request to get the
                *             user attribute verification code.</p>
                */
            CodeDeliveryDetails?: CodeDeliveryDetailsType;
    }
    export namespace GetUserAttributeVerificationCodeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUserAttributeVerificationCodeResponse) => any;
    }
    export interface GetUserPoolMfaConfigRequest {
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId: string | undefined;
    }
    export namespace GetUserPoolMfaConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUserPoolMfaConfigRequest) => any;
    }
    /**
        * <p>The SMS text message multi-factor authentication (MFA) configuration type.</p>
        */
    export interface SmsMfaConfigType {
            /**
                * <p>The SMS authentication message that will be sent to users with the code they must sign
                *             in. The message must contain the ‘{####}’ placeholder, which is replaced with the code.
                *             If the message isn't included, and default message will be used.</p>
                */
            SmsAuthenticationMessage?: string;
            /**
                * <p>The SMS configuration with the settings that your Amazon Cognito user pool must use to send an
                *             SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To request Amazon SNS in
                *             the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role that
                *             you provide for your Amazon Web Services account.</p>
                */
            SmsConfiguration?: SmsConfigurationType;
    }
    export namespace SmsMfaConfigType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SmsMfaConfigType) => any;
    }
    /**
        * <p>The type used for enabling software token MFA at the user pool level.</p>
        */
    export interface SoftwareTokenMfaConfigType {
            /**
                * <p>Specifies whether software token MFA is activated.</p>
                */
            Enabled?: boolean;
    }
    export namespace SoftwareTokenMfaConfigType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SoftwareTokenMfaConfigType) => any;
    }
    export interface GetUserPoolMfaConfigResponse {
            /**
                * <p>The SMS text message multi-factor (MFA) configuration.</p>
                */
            SmsMfaConfiguration?: SmsMfaConfigType;
            /**
                * <p>The software token multi-factor (MFA) configuration.</p>
                */
            SoftwareTokenMfaConfiguration?: SoftwareTokenMfaConfigType;
            /**
                * <p>The multi-factor (MFA) configuration. Valid values include:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>OFF</code> MFA won't be used for any users.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ON</code> MFA is required for all users to sign in.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>OPTIONAL</code> MFA will be required only for individual users who have
                *                     an MFA factor activated.</p>
                *             </li>
                *          </ul>
                */
            MfaConfiguration?: UserPoolMfaType | string;
    }
    export namespace GetUserPoolMfaConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUserPoolMfaConfigResponse) => any;
    }
    /**
        * <p>Represents the request to sign out all devices.</p>
        */
    export interface GlobalSignOutRequest {
            /**
                * <p>A valid access token that Amazon Cognito issued to the user who you want to sign out.</p>
                */
            AccessToken: string | undefined;
    }
    export namespace GlobalSignOutRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GlobalSignOutRequest) => any;
    }
    /**
        * <p>The response to the request to sign out all devices.</p>
        */
    export interface GlobalSignOutResponse {
    }
    export namespace GlobalSignOutResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GlobalSignOutResponse) => any;
    }
    /**
        * <p>Initiates the authentication request.</p>
        */
    export interface InitiateAuthRequest {
            /**
                * <p>The authentication flow for this call to run. The API action will depend on this
                *             value. For example:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>REFRESH_TOKEN_AUTH</code> takes in a valid refresh token and returns new
                *                     tokens.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>USER_SRP_AUTH</code> takes in <code>USERNAME</code> and
                *                         <code>SRP_A</code> and returns the SRP variables to be used for next
                *                     challenge execution.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>USER_PASSWORD_AUTH</code> takes in <code>USERNAME</code> and
                *                         <code>PASSWORD</code> and returns the next challenge or tokens.</p>
                *             </li>
                *          </ul>
                *         <p>Valid values include:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>USER_SRP_AUTH</code>: Authentication flow for the Secure Remote Password
                *                     (SRP) protocol.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>REFRESH_TOKEN_AUTH</code>/<code>REFRESH_TOKEN</code>: Authentication
                *                     flow for refreshing the access token and ID token by supplying a valid refresh
                *                     token.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>CUSTOM_AUTH</code>: Custom authentication flow.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>USER_PASSWORD_AUTH</code>: Non-SRP authentication flow; user name and
                *                     password are passed directly. If a user migration Lambda trigger is set, this
                *                     flow will invoke the user migration Lambda if it doesn't find the user name in
                *                     the user pool. </p>
                *             </li>
                *          </ul>
                *         <p>
                *             <code>ADMIN_NO_SRP_AUTH</code> isn't a valid value.</p>
                */
            AuthFlow: AuthFlowType | string | undefined;
            /**
                * <p>The authentication parameters. These are inputs corresponding to the
                *                 <code>AuthFlow</code> that you're invoking. The required values depend on the value
                *             of <code>AuthFlow</code>:</p>
                *         <ul>
                *             <li>
                *                 <p>For <code>USER_SRP_AUTH</code>: <code>USERNAME</code> (required),
                *                         <code>SRP_A</code> (required), <code>SECRET_HASH</code> (required if the app
                *                     client is configured with a client secret), <code>DEVICE_KEY</code>.</p>
                *             </li>
                *             <li>
                *                 <p>For <code>REFRESH_TOKEN_AUTH/REFRESH_TOKEN</code>: <code>REFRESH_TOKEN</code>
                *                     (required), <code>SECRET_HASH</code> (required if the app client is configured
                *                     with a client secret), <code>DEVICE_KEY</code>.</p>
                *             </li>
                *             <li>
                *                 <p>For <code>CUSTOM_AUTH</code>: <code>USERNAME</code> (required),
                *                         <code>SECRET_HASH</code> (if app client is configured with client secret),
                *                         <code>DEVICE_KEY</code>. To start the authentication flow with password
                *                     verification, include <code>ChallengeName: SRP_A</code> and <code>SRP_A: (The
                *                         SRP_A Value)</code>.</p>
                *             </li>
                *          </ul>
                */
            AuthParameters?: Record<string, string>;
            /**
                * <p>A map of custom key-value pairs that you can provide as input for certain custom
                *             workflows that this action triggers.</p>
                *         <p>You create custom workflows by assigning Lambda functions to user pool triggers.
                *             When you use the InitiateAuth API action, Amazon Cognito invokes the Lambda functions that are
                *             specified for various triggers. The ClientMetadata value is passed as input to the
                *             functions for only the following triggers:</p>
                *         <ul>
                *             <li>
                *                 <p>Pre signup</p>
                *             </li>
                *             <li>
                *                 <p>Pre authentication</p>
                *             </li>
                *             <li>
                *                 <p>User migration</p>
                *             </li>
                *          </ul>
                *         <p>When Amazon Cognito invokes the functions for these triggers, it passes a JSON payload, which
                *             the function receives as input. This payload contains a <code>validationData</code>
                *             attribute, which provides the data that you assigned to the ClientMetadata parameter in
                *             your InitiateAuth request. In your function code in Lambda, you can process the
                *                 <code>validationData</code> value to enhance your workflow for your specific
                *             needs.</p>
                *         <p>When you use the InitiateAuth API action, Amazon Cognito also invokes the functions for the
                *             following triggers, but it doesn't provide the ClientMetadata value as input:</p>
                *         <ul>
                *             <li>
                *                 <p>Post authentication</p>
                *             </li>
                *             <li>
                *                 <p>Custom message</p>
                *             </li>
                *             <li>
                *                 <p>Pre token generation</p>
                *             </li>
                *             <li>
                *                 <p>Create auth challenge</p>
                *             </li>
                *             <li>
                *                 <p>Define auth challenge</p>
                *             </li>
                *             <li>
                *                 <p>Verify auth challenge</p>
                *             </li>
                *          </ul>
                *
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
                * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
                *
                *         <note>
                *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the
                *                 following:</p>
                *             <ul>
                *                <li>
                *                     <p>Store the ClientMetadata value. This data is available only to Lambda
                *                         triggers that are assigned to a user pool to support custom workflows. If
                *                         your user pool configuration doesn't include triggers, the ClientMetadata
                *                         parameter serves no purpose.</p>
                *                 </li>
                *                <li>
                *                     <p>Validate the ClientMetadata value.</p>
                *                 </li>
                *                <li>
                *                     <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive
                *                         information.</p>
                *                 </li>
                *             </ul>
                *         </note>
                */
            ClientMetadata?: Record<string, string>;
            /**
                * <p>The app client ID.</p>
                */
            ClientId: string | undefined;
            /**
                * <p>The Amazon Pinpoint analytics metadata that contributes to your metrics for
                *                 <code>InitiateAuth</code> calls.</p>
                */
            AnalyticsMetadata?: AnalyticsMetadataType;
            /**
                * <p>Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced
                * security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito
                * when it makes API requests.</p>
                */
            UserContextData?: UserContextDataType;
    }
    export namespace InitiateAuthRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InitiateAuthRequest) => any;
    }
    /**
        * <p>Initiates the authentication response.</p>
        */
    export interface InitiateAuthResponse {
            /**
                * <p>The name of the challenge that you're responding to with this call. This name is
                *             returned in the <code>AdminInitiateAuth</code> response if you must pass another
                *             challenge.</p>
                *         <p>Valid values include the following:</p>
                *         <note>
                *             <p>All of the following challenges require <code>USERNAME</code> and
                *                     <code>SECRET_HASH</code> (if applicable) in the parameters.</p>
                *         </note>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>SMS_MFA</code>: Next challenge is to supply an
                *                     <code>SMS_MFA_CODE</code>, delivered via SMS.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>PASSWORD_VERIFIER</code>: Next challenge is to supply
                *                         <code>PASSWORD_CLAIM_SIGNATURE</code>,
                *                         <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, and <code>TIMESTAMP</code> after
                *                     the client-side SRP calculations.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>CUSTOM_CHALLENGE</code>: This is returned if your custom authentication
                *                     flow determines that the user should pass another challenge before tokens are
                *                     issued.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DEVICE_SRP_AUTH</code>: If device tracking was activated on your user
                *                     pool and the previous challenges were passed, this challenge is returned so that
                *                     Amazon Cognito can start tracking this device.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DEVICE_PASSWORD_VERIFIER</code>: Similar to
                *                         <code>PASSWORD_VERIFIER</code>, but for devices only.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>NEW_PASSWORD_REQUIRED</code>: For users who are required to change their
                *                     passwords after successful first login. </p>
                *                 <p>Respond to this challenge with <code>NEW_PASSWORD</code> and any required
                *                     attributes that Amazon Cognito returned in the <code>requiredAttributes</code> parameter.
                *                     You can also set values for attributes that aren't required by your user pool
                *                     and that your app client can write. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RespondToAuthChallenge.html">RespondToAuthChallenge</a>.</p>
                *
                *                <note>
                *                   <p>In a <code>NEW_PASSWORD_REQUIRED</code> challenge response, you can't modify a required attribute that already has a value.
                * In <code>RespondToAuthChallenge</code>, set a value for any keys that Amazon Cognito returned in the <code>requiredAttributes</code> parameter,
                * then use the <code>UpdateUserAttributes</code> API operation to modify the value of any additional attributes.</p>
                *                </note>
                *
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>MFA_SETUP</code>: For users who are required to setup an MFA factor
                *                     before they can sign in. The MFA types activated for the user pool will be
                *                     listed in the challenge parameters <code>MFA_CAN_SETUP</code> value. </p>
                *                 <p> To set up software token MFA, use the session returned here from
                *                         <code>InitiateAuth</code> as an input to
                *                     <code>AssociateSoftwareToken</code>. Use the session returned by
                *                         <code>VerifySoftwareToken</code> as an input to
                *                         <code>RespondToAuthChallenge</code> with challenge name
                *                         <code>MFA_SETUP</code> to complete sign-in. To set up SMS MFA, an
                *                     administrator should help the user to add a phone number to their account, and
                *                     then the user should call <code>InitiateAuth</code> again to restart
                *                     sign-in.</p>
                *             </li>
                *          </ul>
                */
            ChallengeName?: ChallengeNameType | string;
            /**
                * <p>The session that should pass both ways in challenge-response calls to the service. If
                *             the caller must pass another challenge, they return a session with other challenge
                *             parameters. This session should be passed as it is to the next
                *                 <code>RespondToAuthChallenge</code> API call.</p>
                */
            Session?: string;
            /**
                * <p>The challenge parameters. These are returned in the <code>InitiateAuth</code> response
                *             if you must pass another challenge. The responses in this parameter should be used to
                *             compute inputs to the next call (<code>RespondToAuthChallenge</code>). </p>
                *         <p>All challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if
                *             applicable).</p>
                */
            ChallengeParameters?: Record<string, string>;
            /**
                * <p>The result of the authentication response. This result is only returned if the caller
                *             doesn't need to pass another challenge. If the caller does need to pass another
                *             challenge before it gets tokens, <code>ChallengeName</code>,
                *                 <code>ChallengeParameters</code>, and <code>Session</code> are returned.</p>
                */
            AuthenticationResult?: AuthenticationResultType;
    }
    export namespace InitiateAuthResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InitiateAuthResponse) => any;
    }
    /**
        * <p>Represents the request to list the devices.</p>
        */
    export interface ListDevicesRequest {
            /**
                * <p>A valid access token that Amazon Cognito issued to the user whose list of devices you want to
                *             view.</p>
                */
            AccessToken: string | undefined;
            /**
                * <p>The limit of the device request.</p>
                */
            Limit?: number;
            /**
                * <p>The pagination token for the list request.</p>
                */
            PaginationToken?: string;
    }
    export namespace ListDevicesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDevicesRequest) => any;
    }
    /**
        * <p>Represents the response to list devices.</p>
        */
    export interface ListDevicesResponse {
            /**
                * <p>The devices returned in the list devices response.</p>
                */
            Devices?: DeviceType[];
            /**
                * <p>The pagination token for the list device response.</p>
                */
            PaginationToken?: string;
    }
    export namespace ListDevicesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDevicesResponse) => any;
    }
    export interface ListGroupsRequest {
            /**
                * <p>The user pool ID for the user pool.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The limit of the request to list groups.</p>
                */
            Limit?: number;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can be
                *             used to return the next set of items in the list.</p>
                */
            NextToken?: string;
    }
    export namespace ListGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupsRequest) => any;
    }
    export interface ListGroupsResponse {
            /**
                * <p>The group objects for the groups.</p>
                */
            Groups?: GroupType[];
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can be
                *             used to return the next set of items in the list.</p>
                */
            NextToken?: string;
    }
    export namespace ListGroupsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupsResponse) => any;
    }
    export interface ListIdentityProvidersRequest {
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The maximum number of IdPs to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>A pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListIdentityProvidersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIdentityProvidersRequest) => any;
    }
    /**
        * <p>A container for IdP details.</p>
        */
    export interface ProviderDescription {
            /**
                * <p>The IdP name.</p>
                */
            ProviderName?: string;
            /**
                * <p>The IdP type.</p>
                */
            ProviderType?: IdentityProviderTypeType | string;
            /**
                * <p>The date the provider was last modified.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>The date the provider was added to the user pool.</p>
                */
            CreationDate?: Date;
    }
    export namespace ProviderDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProviderDescription) => any;
    }
    export interface ListIdentityProvidersResponse {
            /**
                * <p>A list of IdP objects.</p>
                */
            Providers: ProviderDescription[] | undefined;
            /**
                * <p>A pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListIdentityProvidersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIdentityProvidersResponse) => any;
    }
    export interface ListResourceServersRequest {
            /**
                * <p>The user pool ID for the user pool.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The maximum number of resource servers to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>A pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListResourceServersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListResourceServersRequest) => any;
    }
    export interface ListResourceServersResponse {
            /**
                * <p>The resource servers.</p>
                */
            ResourceServers: ResourceServerType[] | undefined;
            /**
                * <p>A pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListResourceServersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListResourceServersResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the user pool that the tags are assigned to.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The tags that are assigned to the user pool.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    /**
        * <p>Represents the request to list the user import jobs.</p>
        */
    export interface ListUserImportJobsRequest {
            /**
                * <p>The user pool ID for the user pool that the users are being imported into.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The maximum number of import jobs you want the request to return.</p>
                */
            MaxResults: number | undefined;
            /**
                * <p>An identifier that was returned from the previous call to
                *                 <code>ListUserImportJobs</code>, which can be used to return the next set of import
                *             jobs in the list.</p>
                */
            PaginationToken?: string;
    }
    export namespace ListUserImportJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUserImportJobsRequest) => any;
    }
    /**
        * <p>Represents the response from the server to the request to list the user import
        *             jobs.</p>
        */
    export interface ListUserImportJobsResponse {
            /**
                * <p>The user import jobs.</p>
                */
            UserImportJobs?: UserImportJobType[];
            /**
                * <p>An identifier that can be used to return the next set of user import jobs in the
                *             list.</p>
                */
            PaginationToken?: string;
    }
    export namespace ListUserImportJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUserImportJobsResponse) => any;
    }
    /**
        * <p>Represents the request to list the user pool clients.</p>
        */
    export interface ListUserPoolClientsRequest {
            /**
                * <p>The user pool ID for the user pool where you want to list user pool clients.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The maximum number of results you want the request to return when listing the user
                *             pool clients.</p>
                */
            MaxResults?: number;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can be
                *             used to return the next set of items in the list.</p>
                */
            NextToken?: string;
    }
    export namespace ListUserPoolClientsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUserPoolClientsRequest) => any;
    }
    /**
        * <p>The description of the user pool client.</p>
        */
    export interface UserPoolClientDescription {
            /**
                * <p>The ID of the client associated with the user pool.</p>
                */
            ClientId?: string;
            /**
                * <p>The user pool ID for the user pool where you want to describe the user pool
                *             client.</p>
                */
            UserPoolId?: string;
            /**
                * <p>The client name from the user pool client description.</p>
                */
            ClientName?: string;
    }
    export namespace UserPoolClientDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserPoolClientDescription) => any;
    }
    /**
        * <p>Represents the response from the server that lists user pool clients.</p>
        */
    export interface ListUserPoolClientsResponse {
            /**
                * <p>The user pool clients in the response that lists user pool clients.</p>
                */
            UserPoolClients?: UserPoolClientDescription[];
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can be
                *             used to return the next set of items in the list.</p>
                */
            NextToken?: string;
    }
    export namespace ListUserPoolClientsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUserPoolClientsResponse) => any;
    }
    /**
        * <p>Represents the request to list user pools.</p>
        */
    export interface ListUserPoolsRequest {
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can be
                *             used to return the next set of items in the list.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results you want the request to return when listing the user
                *             pools.</p>
                */
            MaxResults: number | undefined;
    }
    export namespace ListUserPoolsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUserPoolsRequest) => any;
    }
    /**
        * <p>A user pool description.</p>
        */
    export interface UserPoolDescriptionType {
            /**
                * <p>The ID in a user pool description.</p>
                */
            Id?: string;
            /**
                * <p>The name in a user pool description.</p>
                */
            Name?: string;
            /**
                * <p>The Lambda configuration information in a user pool description.</p>
                */
            LambdaConfig?: LambdaConfigType;
            /**
                * <p>The user pool status in a user pool description.</p>
                */
            Status?: StatusType | string;
            /**
                * <p>The date the user pool description was last modified.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>The date the user pool description was created.</p>
                */
            CreationDate?: Date;
    }
    export namespace UserPoolDescriptionType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserPoolDescriptionType) => any;
    }
    /**
        * <p>Represents the response to list user pools.</p>
        */
    export interface ListUserPoolsResponse {
            /**
                * <p>The user pools from the response to list users.</p>
                */
            UserPools?: UserPoolDescriptionType[];
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can be
                *             used to return the next set of items in the list.</p>
                */
            NextToken?: string;
    }
    export namespace ListUserPoolsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUserPoolsResponse) => any;
    }
    /**
        * <p>Represents the request to list users.</p>
        */
    export interface ListUsersRequest {
            /**
                * <p>The user pool ID for the user pool on which the search should be performed.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>An array of strings, where each string is the name of a user attribute to be returned
                *             for each user in the search results. If the array is null, all attributes are
                *             returned.</p>
                */
            AttributesToGet?: string[];
            /**
                * <p>Maximum number of users to be returned.</p>
                */
            Limit?: number;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can be
                *             used to return the next set of items in the list.</p>
                */
            PaginationToken?: string;
            /**
                * <p>A filter string of the form "<i>AttributeName</i>
                *             <i>Filter-Type</i> "<i>AttributeValue</i>"". Quotation marks
                *             within the filter string must be escaped using the backslash (\) character. For example,
                *                 "<code>family_name</code> = \"Reddy\"".</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <i>AttributeName</i>: The name of the attribute to search for.
                *                     You can only search for one attribute at a time.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <i>Filter-Type</i>: For an exact match, use =, for example,
                *                         "<code>given_name</code> = \"Jon\"". For a prefix ("starts with") match, use
                *                     ^=, for example, "<code>given_name</code> ^= \"Jon\"". </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <i>AttributeValue</i>: The attribute value that must be matched
                *                     for each user.</p>
                *             </li>
                *          </ul>
                *         <p>If the filter string is empty, <code>ListUsers</code> returns all users in the user
                *             pool.</p>
                *         <p>You can only search for the following standard attributes:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>username</code> (case-sensitive)</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>email</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>phone_number</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>name</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>given_name</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>family_name</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>preferred_username</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>cognito:user_status</code> (called <b>Status</b> in the Console) (case-insensitive)</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>status (called <b>Enabled</b> in the Console)
                *                         (case-sensitive)</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sub</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>Custom attributes aren't searchable.</p>
                *         <note>
                *             <p>You can also list users with a client-side filter. The server-side filter matches
                *                 no more than one attribute. For an advanced search, use a client-side filter with
                *                 the <code>--query</code> parameter of the <code>list-users</code> action in the
                *                 CLI. When you use a client-side filter, ListUsers returns a paginated list of zero
                *                 or more users. You can receive multiple pages in a row with zero results. Repeat the
                *                 query with each pagination token that is returned until you receive a null
                *                 pagination token value, and then review the combined result. </p>
                *             <p>For more information about server-side and client-side filtering, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html">FilteringCLI output</a> in the <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html">Command Line Interface
                *                     User Guide</a>. </p>
                *         </note>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api">Searching for Users Using the ListUsers API</a> and <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples">Examples of Using the ListUsers API</a> in the <i>Amazon Cognito Developer
                *                 Guide</i>.</p>
                */
            Filter?: string;
    }
    export namespace ListUsersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUsersRequest) => any;
    }
    /**
        * <p>The response from the request to list users.</p>
        */
    export interface ListUsersResponse {
            /**
                * <p>The users returned in the request to list users.</p>
                */
            Users?: UserType[];
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can be
                *             used to return the next set of items in the list.</p>
                */
            PaginationToken?: string;
    }
    export namespace ListUsersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUsersResponse) => any;
    }
    export interface ListUsersInGroupRequest {
            /**
                * <p>The user pool ID for the user pool.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The name of the group.</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The limit of the request to list users.</p>
                */
            Limit?: number;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can be
                *             used to return the next set of items in the list.</p>
                */
            NextToken?: string;
    }
    export namespace ListUsersInGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUsersInGroupRequest) => any;
    }
    export interface ListUsersInGroupResponse {
            /**
                * <p>The users returned in the request to list users.</p>
                */
            Users?: UserType[];
            /**
                * <p>An identifier that you can use in a later request to return the next set of items in
                *             the list.</p>
                */
            NextToken?: string;
    }
    export namespace ListUsersInGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUsersInGroupResponse) => any;
    }
    /**
        * <p>Represents the request to resend the confirmation code.</p>
        */
    export interface ResendConfirmationCodeRequest {
            /**
                * <p>The ID of the client associated with the user pool.</p>
                */
            ClientId: string | undefined;
            /**
                * <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of a
                *             user pool client and username plus the client ID in the message.</p>
                */
            SecretHash?: string;
            /**
                * <p>Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced
                * security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito
                * when it makes API requests.</p>
                */
            UserContextData?: UserContextDataType;
            /**
                * <p>The <code>username</code> attribute of the user to whom you want to resend a
                *             confirmation code.</p>
                */
            Username: string | undefined;
            /**
                * <p>The Amazon Pinpoint analytics metadata that contributes to your metrics for
                *                 <code>ResendConfirmationCode</code> calls.</p>
                */
            AnalyticsMetadata?: AnalyticsMetadataType;
            /**
                * <p>A map of custom key-value pairs that you can provide as input for any custom workflows
                *             that this action triggers.</p>
                *         <p>You create custom workflows by assigning Lambda functions to user pool triggers.
                *             When you use the ResendConfirmationCode API action, Amazon Cognito invokes the function that is
                *             assigned to the <i>custom message</i> trigger. When Amazon Cognito invokes this
                *             function, it passes a JSON payload, which the function receives as input. This payload
                *             contains a <code>clientMetadata</code> attribute, which provides the data that you
                *             assigned to the ClientMetadata parameter in your ResendConfirmationCode request. In your
                *             function code in Lambda, you can process the <code>clientMetadata</code> value to enhance
                *             your workflow for your specific needs.</p>
                *
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
                * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
                *
                *         <note>
                *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the
                *                 following:</p>
                *             <ul>
                *                <li>
                *                     <p>Store the ClientMetadata value. This data is available only to Lambda
                *                         triggers that are assigned to a user pool to support custom workflows. If
                *                         your user pool configuration doesn't include triggers, the ClientMetadata
                *                         parameter serves no purpose.</p>
                *                 </li>
                *                <li>
                *                     <p>Validate the ClientMetadata value.</p>
                *                 </li>
                *                <li>
                *                     <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive
                *                         information.</p>
                *                 </li>
                *             </ul>
                *         </note>
                */
            ClientMetadata?: Record<string, string>;
    }
    export namespace ResendConfirmationCodeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResendConfirmationCodeRequest) => any;
    }
    /**
        * <p>The response from the server when Amazon Cognito makes the request to resend a confirmation
        *             code.</p>
        */
    export interface ResendConfirmationCodeResponse {
            /**
                * <p>The code delivery details returned by the server in response to the request to resend
                *             the confirmation code.</p>
                */
            CodeDeliveryDetails?: CodeDeliveryDetailsType;
    }
    export namespace ResendConfirmationCodeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResendConfirmationCodeResponse) => any;
    }
    /**
        * <p>The request to respond to an authentication challenge.</p>
        */
    export interface RespondToAuthChallengeRequest {
            /**
                * <p>The app client ID.</p>
                */
            ClientId: string | undefined;
            /**
                * <p>The challenge name. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html">InitiateAuth</a>.</p>
                *         <p>
                *             <code>ADMIN_NO_SRP_AUTH</code> isn't a valid value.</p>
                */
            ChallengeName: ChallengeNameType | string | undefined;
            /**
                * <p>The session that should be passed both ways in challenge-response calls to the
                *             service. If <code>InitiateAuth</code> or <code>RespondToAuthChallenge</code> API call
                *             determines that the caller must pass another challenge, they return a session with other
                *             challenge parameters. This session should be passed as it is to the next
                *                 <code>RespondToAuthChallenge</code> API call.</p>
                */
            Session?: string;
            /**
                * <p>The challenge responses. These are inputs corresponding to the value of
                *                 <code>ChallengeName</code>, for example:</p>
                *         <note>
                *             <p>
                *                <code>SECRET_HASH</code> (if app client is configured with client secret) applies
                *                 to all of the inputs that follow (including <code>SOFTWARE_TOKEN_MFA</code>).</p>
                *         </note>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>,
                *                         <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>,
                *                         <code>USERNAME</code>.</p>
                *                 <note>
                *                     <p>
                *                      <code>PASSWORD_VERIFIER</code> requires <code>DEVICE_KEY</code> when you
                *                         sign in with a remembered device.</p>
                *                 </note>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>,
                *                     <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured
                *                     with client secret). To set any required attributes that Amazon Cognito returned as
                *                     <code>requiredAttributes</code> in the <code>InitiateAuth</code> response,
                *                     add a <code>userAttributes.<i>attributename</i>
                *                   </code> parameter.
                *                     This parameter can also set values for writable attributes that aren't required
                *                     by your user pool.</p>
                *
                *                <note>
                *                   <p>In a <code>NEW_PASSWORD_REQUIRED</code> challenge response, you can't modify a required attribute that already has a value.
                * In <code>RespondToAuthChallenge</code>, set a value for any keys that Amazon Cognito returned in the <code>requiredAttributes</code> parameter,
                * then use the <code>UpdateUserAttributes</code> API operation to modify the value of any additional attributes.</p>
                *                </note>
                *
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SOFTWARE_TOKEN_MFA</code>: <code>USERNAME</code> and
                *                         <code>SOFTWARE_TOKEN_MFA_CODE</code> are required attributes.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DEVICE_SRP_AUTH</code> requires <code>USERNAME</code>,
                *                         <code>DEVICE_KEY</code>, <code>SRP_A</code> (and
                *                     <code>SECRET_HASH</code>).</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DEVICE_PASSWORD_VERIFIER</code> requires everything that
                *                         <code>PASSWORD_VERIFIER</code> requires, plus
                *                     <code>DEVICE_KEY</code>.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>MFA_SETUP</code> requires <code>USERNAME</code>, plus you must use the
                *                     session value returned by <code>VerifySoftwareToken</code> in the
                *                         <code>Session</code> parameter.</p>
                *             </li>
                *          </ul>
                */
            ChallengeResponses?: Record<string, string>;
            /**
                * <p>The Amazon Pinpoint analytics metadata that contributes to your metrics for
                *                 <code>RespondToAuthChallenge</code> calls.</p>
                */
            AnalyticsMetadata?: AnalyticsMetadataType;
            /**
                * <p>Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced
                * security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito
                * when it makes API requests.</p>
                */
            UserContextData?: UserContextDataType;
            /**
                * <p>A map of custom key-value pairs that you can provide as input for any custom workflows
                *             that this action triggers.</p>
                *         <p>You create custom workflows by assigning Lambda functions to user pool
                *             triggers. When you use the RespondToAuthChallenge API action, Amazon Cognito invokes any
                *             functions that are assigned to the following triggers: <i>post
                *                 authentication</i>, <i>pre token generation</i>,
                *                 <i>define auth challenge</i>, <i>create auth
                *                 challenge</i>, and <i>verify auth challenge</i>. When Amazon Cognito
                *             invokes any of these functions, it passes a JSON payload, which the function receives as
                *             input. This payload contains a <code>clientMetadata</code> attribute, which provides the
                *             data that you assigned to the ClientMetadata parameter in your RespondToAuthChallenge
                *             request. In your function code in Lambda, you can process the
                *                 <code>clientMetadata</code> value to enhance your workflow for your specific
                *             needs.</p>
                *
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
                * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
                *
                *         <note>
                *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the
                *                 following:</p>
                *             <ul>
                *                <li>
                *                     <p>Store the ClientMetadata value. This data is available only to Lambda
                *                         triggers that are assigned to a user pool to support custom workflows. If
                *                         your user pool configuration doesn't include triggers, the ClientMetadata
                *                         parameter serves no purpose.</p>
                *                 </li>
                *                <li>
                *                     <p>Validate the ClientMetadata value.</p>
                *                 </li>
                *                <li>
                *                     <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive
                *                         information.</p>
                *                 </li>
                *             </ul>
                *         </note>
                */
            ClientMetadata?: Record<string, string>;
    }
    export namespace RespondToAuthChallengeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RespondToAuthChallengeRequest) => any;
    }
    /**
        * <p>The response to respond to the authentication challenge.</p>
        */
    export interface RespondToAuthChallengeResponse {
            /**
                * <p>The challenge name. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html">InitiateAuth</a>.</p>
                */
            ChallengeName?: ChallengeNameType | string;
            /**
                * <p>The session that should be passed both ways in challenge-response calls to the
                *             service. If the caller must pass another challenge, they return a session with other
                *             challenge parameters. This session should be passed as it is to the next
                *                 <code>RespondToAuthChallenge</code> API call.</p>
                */
            Session?: string;
            /**
                * <p>The challenge parameters. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html">InitiateAuth</a>.</p>
                */
            ChallengeParameters?: Record<string, string>;
            /**
                * <p>The result returned by the server in response to the request to respond to the
                *             authentication challenge.</p>
                */
            AuthenticationResult?: AuthenticationResultType;
    }
    export namespace RespondToAuthChallengeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RespondToAuthChallengeResponse) => any;
    }
    export interface RevokeTokenRequest {
            /**
                * <p>The refresh token that you want to revoke.</p>
                */
            Token: string | undefined;
            /**
                * <p>The client ID for the token that you want to revoke.</p>
                */
            ClientId: string | undefined;
            /**
                * <p>The secret for the client ID. This is required only if the client ID has a
                *             secret.</p>
                */
            ClientSecret?: string;
    }
    export namespace RevokeTokenRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RevokeTokenRequest) => any;
    }
    export interface RevokeTokenResponse {
    }
    export namespace RevokeTokenResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RevokeTokenResponse) => any;
    }
    /**
        * <p>Exception that is thrown when the request isn't authorized. This can happen due to an
        *             invalid access token in the request.</p>
        */
    export class UnauthorizedException extends __BaseException {
            readonly name: "UnauthorizedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnauthorizedException, __BaseException>);
    }
    /**
        * <p>Exception that is thrown when you attempt to perform an operation that isn't enabled
        *             for the user pool client.</p>
        */
    export class UnsupportedOperationException extends __BaseException {
            readonly name: "UnsupportedOperationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedOperationException, __BaseException>);
    }
    /**
        * <p>Exception that is thrown when an unsupported token is passed to an operation.</p>
        */
    export class UnsupportedTokenTypeException extends __BaseException {
            readonly name: "UnsupportedTokenTypeException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedTokenTypeException, __BaseException>);
    }
    export interface SetRiskConfigurationRequest {
            /**
                * <p>The user pool ID. </p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The app client ID. If <code>ClientId</code> is null, then the risk configuration is
                *             mapped to <code>userPoolId</code>. When the client ID is null, the same risk
                *             configuration is applied to all the clients in the userPool.</p>
                *         <p>Otherwise, <code>ClientId</code> is mapped to the client. When the client ID isn't
                *             null, the user pool configuration is overridden and the risk configuration for the
                *             client is used instead.</p>
                */
            ClientId?: string;
            /**
                * <p>The compromised credentials risk configuration.</p>
                */
            CompromisedCredentialsRiskConfiguration?: CompromisedCredentialsRiskConfigurationType;
            /**
                * <p>The account takeover risk configuration.</p>
                */
            AccountTakeoverRiskConfiguration?: AccountTakeoverRiskConfigurationType;
            /**
                * <p>The configuration to override the risk decision.</p>
                */
            RiskExceptionConfiguration?: RiskExceptionConfigurationType;
    }
    export namespace SetRiskConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetRiskConfigurationRequest) => any;
    }
    export interface SetRiskConfigurationResponse {
            /**
                * <p>The risk configuration.</p>
                */
            RiskConfiguration: RiskConfigurationType | undefined;
    }
    export namespace SetRiskConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetRiskConfigurationResponse) => any;
    }
    export interface SetUICustomizationRequest {
            /**
                * <p>The user pool ID for the user pool.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The client ID for the client app.</p>
                */
            ClientId?: string;
            /**
                * <p>The CSS values in the UI customization.</p>
                */
            CSS?: string;
            /**
                * <p>The uploaded logo image for the UI customization.</p>
                */
            ImageFile?: Uint8Array;
    }
    export namespace SetUICustomizationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetUICustomizationRequest) => any;
    }
    export interface SetUICustomizationResponse {
            /**
                * <p>The UI customization information.</p>
                */
            UICustomization: UICustomizationType | undefined;
    }
    export namespace SetUICustomizationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetUICustomizationResponse) => any;
    }
    export interface SetUserMFAPreferenceRequest {
            /**
                * <p>The SMS text message multi-factor authentication (MFA) settings.</p>
                */
            SMSMfaSettings?: SMSMfaSettingsType;
            /**
                * <p>The time-based one-time password software token MFA settings.</p>
                */
            SoftwareTokenMfaSettings?: SoftwareTokenMfaSettingsType;
            /**
                * <p>A valid access token that Amazon Cognito issued to the user whose MFA preference you want to
                *             set.</p>
                */
            AccessToken: string | undefined;
    }
    export namespace SetUserMFAPreferenceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetUserMFAPreferenceRequest) => any;
    }
    export interface SetUserMFAPreferenceResponse {
    }
    export namespace SetUserMFAPreferenceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetUserMFAPreferenceResponse) => any;
    }
    export interface SetUserPoolMfaConfigRequest {
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The SMS text message MFA configuration.</p>
                */
            SmsMfaConfiguration?: SmsMfaConfigType;
            /**
                * <p>The software token MFA configuration.</p>
                */
            SoftwareTokenMfaConfiguration?: SoftwareTokenMfaConfigType;
            /**
                * <p>The MFA configuration. If you set the MfaConfiguration value to ‘ON’, only users who
                *             have set up an MFA factor can sign in. To learn more, see <a href="cognito/latest/developerguide/user-pool-settings-mfa.html">Adding Multi-Factor
                *                 Authentication (MFA) to a user pool</a>. Valid values include:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>OFF</code> MFA won't be used for any users.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ON</code> MFA is required for all users to sign in.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>OPTIONAL</code> MFA will be required only for individual users who have
                *                     an MFA factor activated.</p>
                *             </li>
                *          </ul>
                */
            MfaConfiguration?: UserPoolMfaType | string;
    }
    export namespace SetUserPoolMfaConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetUserPoolMfaConfigRequest) => any;
    }
    export interface SetUserPoolMfaConfigResponse {
            /**
                * <p>The SMS text message MFA configuration.</p>
                */
            SmsMfaConfiguration?: SmsMfaConfigType;
            /**
                * <p>The software token MFA configuration.</p>
                */
            SoftwareTokenMfaConfiguration?: SoftwareTokenMfaConfigType;
            /**
                * <p>The MFA configuration. Valid values include:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>OFF</code> MFA won't be used for any users.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ON</code> MFA is required for all users to sign in.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>OPTIONAL</code> MFA will be required only for individual users who have
                *                     an MFA factor enabled.</p>
                *             </li>
                *          </ul>
                */
            MfaConfiguration?: UserPoolMfaType | string;
    }
    export namespace SetUserPoolMfaConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetUserPoolMfaConfigResponse) => any;
    }
    /**
        * <p>Represents the request to set user settings.</p>
        */
    export interface SetUserSettingsRequest {
            /**
                * <p>A valid access token that Amazon Cognito issued to the user whose user settings you want to
                *             configure.</p>
                */
            AccessToken: string | undefined;
            /**
                * <p>You can use this parameter only to set an SMS configuration that uses SMS for
                *             delivery.</p>
                */
            MFAOptions: MFAOptionType[] | undefined;
    }
    export namespace SetUserSettingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetUserSettingsRequest) => any;
    }
    /**
        * <p>The response from the server for a set user settings request.</p>
        */
    export interface SetUserSettingsResponse {
    }
    export namespace SetUserSettingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetUserSettingsResponse) => any;
    }
    /**
        * <p>Represents the request to register a user.</p>
        */
    export interface SignUpRequest {
            /**
                * <p>The ID of the client associated with the user pool.</p>
                */
            ClientId: string | undefined;
            /**
                * <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of a
                *             user pool client and username plus the client ID in the message.</p>
                */
            SecretHash?: string;
            /**
                * <p>The user name of the user you want to register.</p>
                */
            Username: string | undefined;
            /**
                * <p>The password of the user you want to register.</p>
                */
            Password: string | undefined;
            /**
                * <p>An array of name-value pairs representing user attributes.</p>
                *         <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the
                *             attribute name.</p>
                */
            UserAttributes?: AttributeType[];
            /**
                * <p>The validation data in the request to register a user.</p>
                */
            ValidationData?: AttributeType[];
            /**
                * <p>The Amazon Pinpoint analytics metadata that contributes to your metrics for
                *                 <code>SignUp</code> calls.</p>
                */
            AnalyticsMetadata?: AnalyticsMetadataType;
            /**
                * <p>Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced
                * security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito
                * when it makes API requests.</p>
                */
            UserContextData?: UserContextDataType;
            /**
                * <p>A map of custom key-value pairs that you can provide as input for any custom workflows
                *             that this action triggers.</p>
                *         <p>You create custom workflows by assigning Lambda functions to user pool triggers.
                *             When you use the SignUp API action, Amazon Cognito invokes any functions that are assigned to the
                *             following triggers: <i>pre sign-up</i>, <i>custom
                *                 message</i>, and <i>post confirmation</i>. When Amazon Cognito invokes
                *             any of these functions, it passes a JSON payload, which the function receives as input.
                *             This payload contains a <code>clientMetadata</code> attribute, which provides the data
                *             that you assigned to the ClientMetadata parameter in your SignUp request. In your
                *             function code in Lambda, you can process the <code>clientMetadata</code> value to enhance
                *             your workflow for your specific needs.</p>
                *
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
                * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
                *
                *         <note>
                *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the
                *                 following:</p>
                *             <ul>
                *                <li>
                *                     <p>Store the ClientMetadata value. This data is available only to Lambda
                *                         triggers that are assigned to a user pool to support custom workflows. If
                *                         your user pool configuration doesn't include triggers, the ClientMetadata
                *                         parameter serves no purpose.</p>
                *                 </li>
                *                <li>
                *                     <p>Validate the ClientMetadata value.</p>
                *                 </li>
                *                <li>
                *                     <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive
                *                         information.</p>
                *                 </li>
                *             </ul>
                *         </note>
                */
            ClientMetadata?: Record<string, string>;
    }
    export namespace SignUpRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SignUpRequest) => any;
    }
    /**
        * <p>The response from the server for a registration request.</p>
        */
    export interface SignUpResponse {
            /**
                * <p>A response from the server indicating that a user registration has been
                *             confirmed.</p>
                */
            UserConfirmed: boolean | undefined;
            /**
                * <p>The code delivery details returned by the server response to the user registration
                *             request.</p>
                */
            CodeDeliveryDetails?: CodeDeliveryDetailsType;
            /**
                * <p>The UUID of the authenticated user. This isn't the same as
                *             <code>username</code>.</p>
                */
            UserSub: string | undefined;
    }
    export namespace SignUpResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SignUpResponse) => any;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_1' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { CognitoIdentityProviderServiceException as __BaseException } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/CognitoIdentityProviderServiceException";
    import { AccountRecoverySettingType, AdminCreateUserConfigType, AnalyticsConfigurationType, AttributeType, CodeDeliveryDetailsType, CustomDomainConfigType, DeviceConfigurationType, DeviceRememberedStatusType, EmailConfigurationType, ExplicitAuthFlowsType, FeedbackValueType, GroupType, IdentityProviderType, LambdaConfigType, OAuthFlowType, PreventUserExistenceErrorTypes, ResourceServerScopeType, ResourceServerType, SmsConfigurationType, TokenValidityUnitsType, UserAttributeUpdateSettingsType, UserImportJobType, UserPoolAddOnsType, UserPoolClientType, UserPoolMfaType, UserPoolPolicyType, VerificationMessageTemplateType, VerifiedAttributeType } from "@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/models_0";
    /**
        * <p>Represents the request to start the user import job.</p>
        */
    export interface StartUserImportJobRequest {
            /**
                * <p>The user pool ID for the user pool that the users are being imported into.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The job ID for the user import job.</p>
                */
            JobId: string | undefined;
    }
    export namespace StartUserImportJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartUserImportJobRequest) => any;
    }
    /**
        * <p>Represents the response from the server to the request to start the user import
        *             job.</p>
        */
    export interface StartUserImportJobResponse {
            /**
                * <p>The job object that represents the user import job.</p>
                */
            UserImportJob?: UserImportJobType;
    }
    export namespace StartUserImportJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartUserImportJobResponse) => any;
    }
    /**
        * <p>Represents the request to stop the user import job.</p>
        */
    export interface StopUserImportJobRequest {
            /**
                * <p>The user pool ID for the user pool that the users are being imported into.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The job ID for the user import job.</p>
                */
            JobId: string | undefined;
    }
    export namespace StopUserImportJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopUserImportJobRequest) => any;
    }
    /**
        * <p>Represents the response from the server to the request to stop the user import
        *             job.</p>
        */
    export interface StopUserImportJobResponse {
            /**
                * <p>The job object that represents the user import job.</p>
                */
            UserImportJob?: UserImportJobType;
    }
    export namespace StopUserImportJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopUserImportJobResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the user pool to assign the tags to.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The tags to assign to the user pool.</p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the user pool that the tags are assigned to.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The keys of the tags to remove from the user pool.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateAuthEventFeedbackRequest {
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The user pool username.</p>
                */
            Username: string | undefined;
            /**
                * <p>The event ID.</p>
                */
            EventId: string | undefined;
            /**
                * <p>The feedback token.</p>
                */
            FeedbackToken: string | undefined;
            /**
                * <p>The authentication event feedback value.</p>
                */
            FeedbackValue: FeedbackValueType | string | undefined;
    }
    export namespace UpdateAuthEventFeedbackRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAuthEventFeedbackRequest) => any;
    }
    export interface UpdateAuthEventFeedbackResponse {
    }
    export namespace UpdateAuthEventFeedbackResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAuthEventFeedbackResponse) => any;
    }
    /**
        * <p>Represents the request to update the device status.</p>
        */
    export interface UpdateDeviceStatusRequest {
            /**
                * <p>A valid access token that Amazon Cognito issued to the user whose device status you want to
                *             update.</p>
                */
            AccessToken: string | undefined;
            /**
                * <p>The device key.</p>
                */
            DeviceKey: string | undefined;
            /**
                * <p>The status of whether a device is remembered.</p>
                */
            DeviceRememberedStatus?: DeviceRememberedStatusType | string;
    }
    export namespace UpdateDeviceStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDeviceStatusRequest) => any;
    }
    /**
        * <p>The response to the request to update the device status.</p>
        */
    export interface UpdateDeviceStatusResponse {
    }
    export namespace UpdateDeviceStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDeviceStatusResponse) => any;
    }
    export interface UpdateGroupRequest {
            /**
                * <p>The name of the group.</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The user pool ID for the user pool.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>A string containing the new description of the group.</p>
                */
            Description?: string;
            /**
                * <p>The new role Amazon Resource Name (ARN) for the group. This is used for setting the
                *                 <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the
                *             token.</p>
                */
            RoleArn?: string;
            /**
                * <p>The new precedence value for the group. For more information about this parameter, see
                *                 <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_CreateGroup.html">CreateGroup</a>.</p>
                */
            Precedence?: number;
    }
    export namespace UpdateGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateGroupRequest) => any;
    }
    export interface UpdateGroupResponse {
            /**
                * <p>The group object for the group.</p>
                */
            Group?: GroupType;
    }
    export namespace UpdateGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateGroupResponse) => any;
    }
    export interface UpdateIdentityProviderRequest {
            /**
                * <p>The user pool ID.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The IdP name.</p>
                */
            ProviderName: string | undefined;
            /**
                * <p>The IdP details to be updated, such as <code>MetadataURL</code> and
                *                 <code>MetadataFile</code>.</p>
                */
            ProviderDetails?: Record<string, string>;
            /**
                * <p>The IdP attribute mapping to be changed.</p>
                */
            AttributeMapping?: Record<string, string>;
            /**
                * <p>A list of IdP identifiers.</p>
                */
            IdpIdentifiers?: string[];
    }
    export namespace UpdateIdentityProviderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateIdentityProviderRequest) => any;
    }
    export interface UpdateIdentityProviderResponse {
            /**
                * <p>The IdP object.</p>
                */
            IdentityProvider: IdentityProviderType | undefined;
    }
    export namespace UpdateIdentityProviderResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateIdentityProviderResponse) => any;
    }
    export interface UpdateResourceServerRequest {
            /**
                * <p>The user pool ID for the user pool.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The identifier for the resource server.</p>
                */
            Identifier: string | undefined;
            /**
                * <p>The name of the resource server.</p>
                */
            Name: string | undefined;
            /**
                * <p>The scope values to be set for the resource server.</p>
                */
            Scopes?: ResourceServerScopeType[];
    }
    export namespace UpdateResourceServerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateResourceServerRequest) => any;
    }
    export interface UpdateResourceServerResponse {
            /**
                * <p>The resource server.</p>
                */
            ResourceServer: ResourceServerType | undefined;
    }
    export namespace UpdateResourceServerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateResourceServerResponse) => any;
    }
    /**
        * <p>Represents the request to update user attributes.</p>
        */
    export interface UpdateUserAttributesRequest {
            /**
                * <p>An array of name-value pairs representing user attributes.</p>
                *         <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the
                *             attribute name.</p>
                *         <p>If you have set an attribute to require verification before Amazon Cognito updates its value,
                *             this request doesn’t immediately update the value of that attribute. After your user
                *             receives and responds to a verification message to verify the new value, Amazon Cognito updates
                *             the attribute value. Your user can sign in and receive messages with the original
                *             attribute value until they verify the new value.</p>
                */
            UserAttributes: AttributeType[] | undefined;
            /**
                * <p>A valid access token that Amazon Cognito issued to the user whose user attributes you want to
                *             update.</p>
                */
            AccessToken: string | undefined;
            /**
                * <p>A map of custom key-value pairs that you can provide as input for any custom workflows
                *             that this action initiates. </p>
                *         <p>You create custom workflows by assigning Lambda functions to user pool triggers. When
                *             you use the UpdateUserAttributes API action, Amazon Cognito invokes the function that is assigned
                *             to the <i>custom message</i> trigger. When Amazon Cognito invokes this function, it
                *             passes a JSON payload, which the function receives as input. This payload contains a
                *                 <code>clientMetadata</code> attribute, which provides the data that you assigned to
                *             the ClientMetadata parameter in your UpdateUserAttributes request. In your function code
                *             in Lambda, you can process the <code>clientMetadata</code> value to enhance your workflow
                *             for your specific needs.</p>
                *
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">
                * Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
                *
                *         <note>
                *             <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the
                *                 following:</p>
                *             <ul>
                *                <li>
                *                     <p>Store the ClientMetadata value. This data is available only to Lambda
                *                         triggers that are assigned to a user pool to support custom workflows. If
                *                         your user pool configuration doesn't include triggers, the ClientMetadata
                *                         parameter serves no purpose.</p>
                *                 </li>
                *                <li>
                *                     <p>Validate the ClientMetadata value.</p>
                *                 </li>
                *                <li>
                *                     <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive
                *                         information.</p>
                *                 </li>
                *             </ul>
                *         </note>
                */
            ClientMetadata?: Record<string, string>;
    }
    export namespace UpdateUserAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUserAttributesRequest) => any;
    }
    /**
        * <p>Represents the response from the server for the request to update user
        *             attributes.</p>
        */
    export interface UpdateUserAttributesResponse {
            /**
                * <p>The code delivery details list from the server for the request to update user
                *             attributes.</p>
                */
            CodeDeliveryDetailsList?: CodeDeliveryDetailsType[];
    }
    export namespace UpdateUserAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUserAttributesResponse) => any;
    }
    /**
        * <p>Represents the request to update the user pool.</p>
        */
    export interface UpdateUserPoolRequest {
            /**
                * <p>The user pool ID for the user pool you want to update.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>A container with the policies you want to update in a user pool.</p>
                */
            Policies?: UserPoolPolicyType;
            /**
                * <p>The Lambda configuration information from the request to update the user pool.</p>
                */
            LambdaConfig?: LambdaConfigType;
            /**
                * <p>The attributes that are automatically verified when Amazon Cognito requests to update user
                *             pools.</p>
                */
            AutoVerifiedAttributes?: (VerifiedAttributeType | string)[];
            /**
                * <p>A container with information about the SMS verification message.</p>
                */
            SmsVerificationMessage?: string;
            /**
                * <p>The contents of the email verification message.</p>
                */
            EmailVerificationMessage?: string;
            /**
                * <p>The subject of the email verification message.</p>
                */
            EmailVerificationSubject?: string;
            /**
                * <p>The template for verification messages.</p>
                */
            VerificationMessageTemplate?: VerificationMessageTemplateType;
            /**
                * <p>The contents of the SMS authentication message.</p>
                */
            SmsAuthenticationMessage?: string;
            /**
                * <p>The settings for updates to user attributes. These settings include the property <code>AttributesRequireVerificationBeforeUpdate</code>,
                * a user-pool setting that tells Amazon Cognito how to handle changes to the value of your users' email address and phone number attributes. For
                * more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html#user-pool-settings-verifications-verify-attribute-updates">
                * Verifying updates to to email addresses and phone numbers</a>.</p>
                */
            UserAttributeUpdateSettings?: UserAttributeUpdateSettingsType;
            /**
                * <p>Possible values include:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>OFF</code> - MFA tokens aren't required and can't be specified during user
                *                     registration.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>ON</code> - MFA tokens are required for all user registrations. You can
                *                     only specify ON when you're initially creating a user pool. You can use the
                *                         <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SetUserPoolMfaConfig.html">SetUserPoolMfaConfig</a> API operation to turn MFA "ON" for existing
                *                     user pools. </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>OPTIONAL</code> - Users have the option when registering to create an MFA
                *                     token.</p>
                *             </li>
                *          </ul>
                */
            MfaConfiguration?: UserPoolMfaType | string;
            /**
                * <p>Device configuration.</p>
                */
            DeviceConfiguration?: DeviceConfigurationType;
            /**
                * <p>The email configuration of your user pool. The email configuration type sets your
                *             preferred sending method, Amazon Web Services Region, and sender for email invitation and verification
                *             messages from your user pool.</p>
                */
            EmailConfiguration?: EmailConfigurationType;
            /**
                * <p>The SMS configuration with the settings that your Amazon Cognito user pool must use to send an
                *             SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS messages
                *             with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management
                *             (IAM) role in your Amazon Web Services account.</p>
                */
            SmsConfiguration?: SmsConfigurationType;
            /**
                * <p>The tag keys and values to assign to the user pool. A tag is a label that you can use
                *             to categorize and manage user pools in different ways, such as by purpose, owner,
                *             environment, or other criteria.</p>
                */
            UserPoolTags?: Record<string, string>;
            /**
                * <p>The configuration for <code>AdminCreateUser</code> requests.</p>
                */
            AdminCreateUserConfig?: AdminCreateUserConfigType;
            /**
                * <p>Enables advanced security risk detection. Set the key
                *                 <code>AdvancedSecurityMode</code> to the value "AUDIT".</p>
                */
            UserPoolAddOns?: UserPoolAddOnsType;
            /**
                * <p>The available verified method a user can use to recover their password when they call
                *                 <code>ForgotPassword</code>. You can use this setting to define a preferred method
                *             when a user has more than one method available. With this setting, SMS doesn't qualify
                *             for a valid password recovery mechanism if the user also has SMS multi-factor
                *             authentication (MFA) activated. In the absence of this setting, Amazon Cognito uses the legacy
                *             behavior to determine the recovery method where SMS is preferred through email.</p>
                */
            AccountRecoverySetting?: AccountRecoverySettingType;
    }
    export namespace UpdateUserPoolRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUserPoolRequest) => any;
    }
    /**
        * <p>Represents the response from the server when you make a request to update the user
        *             pool.</p>
        */
    export interface UpdateUserPoolResponse {
    }
    export namespace UpdateUserPoolResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUserPoolResponse) => any;
    }
    /**
        * <p>Represents the request to update the user pool client.</p>
        */
    export interface UpdateUserPoolClientRequest {
            /**
                * <p>The user pool ID for the user pool where you want to update the user pool
                *             client.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The ID of the client associated with the user pool.</p>
                */
            ClientId: string | undefined;
            /**
                * <p>The client name from the update user pool client request.</p>
                */
            ClientName?: string;
            /**
                * <p>The refresh token time limit. After this limit expires, your user can't use
                *         their refresh token. To specify the time unit for <code>RefreshTokenValidity</code> as
                *         <code>seconds</code>, <code>minutes</code>, <code>hours</code>, or <code>days</code>,
                *         set a <code>TokenValidityUnits</code> value in your API request.</p>
                *         <p>For example, when you set <code>RefreshTokenValidity</code> as <code>10</code> and
                *         <code>TokenValidityUnits</code> as <code>days</code>, your user can refresh their session
                *         and retrieve new access and ID tokens for 10 days.</p>
                *         <p>The default time unit for <code>RefreshTokenValidity</code> in an API request is days.
                *         You can't set <code>RefreshTokenValidity</code> to 0. If you do, Amazon Cognito overrides the
                *         value with the default value of 30 days. <i>Valid range</i> is displayed below
                *         in seconds.</p>
                */
            RefreshTokenValidity?: number;
            /**
                * <p>The access token time limit. After this limit expires, your user can't use
                *         their access token. To specify the time unit for <code>AccessTokenValidity</code> as
                *         <code>seconds</code>, <code>minutes</code>, <code>hours</code>, or <code>days</code>,
                *         set a <code>TokenValidityUnits</code> value in your API request.</p>
                *         <p>For example, when you set <code>AccessTokenValidity</code> to <code>10</code> and
                *         <code>TokenValidityUnits</code> to <code>hours</code>, your user can authorize access with
                *         their access token for 10 hours.</p>
                *         <p>The default time unit for <code>AccessTokenValidity</code> in an API request is hours.
                *         <i>Valid range</i> is displayed below in seconds.</p>
                */
            AccessTokenValidity?: number;
            /**
                * <p>The ID token time limit. After this limit expires, your user can't use
                *         their ID token. To specify the time unit for <code>IdTokenValidity</code> as
                *         <code>seconds</code>, <code>minutes</code>, <code>hours</code>, or <code>days</code>,
                *         set a <code>TokenValidityUnits</code> value in your API request.</p>
                *         <p>For example, when you set <code>IdTokenValidity</code> as <code>10</code> and
                *         <code>TokenValidityUnits</code> as <code>hours</code>, your user can authenticate their
                *         session with their ID token for 10 hours.</p>
                *         <p>The default time unit for <code>AccessTokenValidity</code> in an API request is hours.
                *         <i>Valid range</i> is displayed below in seconds.</p>
                */
            IdTokenValidity?: number;
            /**
                * <p>The units in which the validity times are represented. The default unit for
                *             RefreshToken is days, and the default for ID and access tokens is hours.</p>
                */
            TokenValidityUnits?: TokenValidityUnitsType;
            /**
                * <p>The read-only attributes of the user pool.</p>
                */
            ReadAttributes?: string[];
            /**
                * <p>The writeable attributes of the user pool.</p>
                */
            WriteAttributes?: string[];
            /**
                * <p>The authentication flows that are supported by the user pool clients. Flow names
                *             without the <code>ALLOW_</code> prefix are no longer supported in favor of new names
                *             with the <code>ALLOW_</code> prefix. Note that values with <code>ALLOW_</code> prefix
                *             must be used only along with values with the <code>ALLOW_</code> prefix.</p>
                *         <p>Valid values include:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>ALLOW_ADMIN_USER_PASSWORD_AUTH</code>: Enable admin based user password
                *                     authentication flow <code>ADMIN_USER_PASSWORD_AUTH</code>. This setting replaces
                *                     the <code>ADMIN_NO_SRP_AUTH</code> setting. With this authentication flow, Amazon Cognito
                *                     receives the password in the request instead of using the Secure Remote Password
                *                     (SRP) protocol to verify passwords.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ALLOW_CUSTOM_AUTH</code>: Enable Lambda trigger based
                *                     authentication.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ALLOW_USER_PASSWORD_AUTH</code>: Enable user password-based
                *                     authentication. In this flow, Amazon Cognito receives the password in the request instead
                *                     of using the SRP protocol to verify passwords.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ALLOW_USER_SRP_AUTH</code>: Enable SRP-based authentication.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ALLOW_REFRESH_TOKEN_AUTH</code>: Enable authflow to refresh
                *                     tokens.</p>
                *             </li>
                *          </ul>
                */
            ExplicitAuthFlows?: (ExplicitAuthFlowsType | string)[];
            /**
                * <p>A list of provider names for the IdPs that this client supports. The following are
                *             supported: <code>COGNITO</code>, <code>Facebook</code>, <code>Google</code>
                *             <code>LoginWithAmazon</code>, and the names of your own SAML and OIDC providers.</p>
                */
            SupportedIdentityProviders?: string[];
            /**
                * <p>A list of allowed redirect (callback) URLs for the IdPs.</p>
                *         <p>A redirect URI must:</p>
                *         <ul>
                *             <li>
                *                 <p>Be an absolute URI.</p>
                *             </li>
                *             <li>
                *                 <p>Be registered with the authorization server.</p>
                *             </li>
                *             <li>
                *                 <p>Not include a fragment component.</p>
                *             </li>
                *          </ul>
                *         <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 -
                *                 Redirection Endpoint</a>.</p>
                *         <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes
                *             only.</p>
                *         <p>App callback URLs such as <code>myapp://example</code> are also supported.</p>
                */
            CallbackURLs?: string[];
            /**
                * <p>A list of allowed logout URLs for the IdPs.</p>
                */
            LogoutURLs?: string[];
            /**
                * <p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p>
                *         <p>A redirect URI must:</p>
                *         <ul>
                *             <li>
                *                 <p>Be an absolute URI.</p>
                *             </li>
                *             <li>
                *                 <p>Be registered with the authorization server.</p>
                *             </li>
                *             <li>
                *                 <p>Not include a fragment component.</p>
                *             </li>
                *          </ul>
                *         <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 -
                *                 Redirection Endpoint</a>.</p>
                *         <p>Amazon Cognito requires HTTPS over HTTP except for <code>http://localhost</code> for testing
                *             purposes only.</p>
                *         <p>App callback URLs such as <code>myapp://example</code> are also supported.</p>
                */
            DefaultRedirectURI?: string;
            /**
                * <p>The allowed OAuth flows.</p>
                *         <dl>
                *             <dt>code</dt>
                *             <dd>
                *                     <p>Use a code grant flow, which provides an authorization code as the
                *                         response. This code can be exchanged for access tokens with the
                *                             <code>/oauth2/token</code> endpoint.</p>
                *                 </dd>
                *             <dt>implicit</dt>
                *             <dd>
                *                     <p>Issue the access token (and, optionally, ID token, based on scopes)
                *                         directly to your user.</p>
                *                 </dd>
                *             <dt>client_credentials</dt>
                *             <dd>
                *                     <p>Issue the access token from the <code>/oauth2/token</code> endpoint
                *                         directly to a non-person user using a combination of the client ID and
                *                         client secret.</p>
                *                 </dd>
                *          </dl>
                */
            AllowedOAuthFlows?: (OAuthFlowType | string)[];
            /**
                * <p>The allowed OAuth scopes. Possible values provided by OAuth are <code>phone</code>,
                *                 <code>email</code>, <code>openid</code>, and <code>profile</code>. Possible values
                *             provided by Amazon Web Services are <code>aws.cognito.signin.user.admin</code>. Custom scopes created
                *             in Resource Servers are also supported.</p>
                */
            AllowedOAuthScopes?: string[];
            /**
                * <p>Set to true if the client is allowed to follow the OAuth protocol when interacting
                *             with Amazon Cognito user pools.</p>
                */
            AllowedOAuthFlowsUserPoolClient?: boolean;
            /**
                * <p>The Amazon Pinpoint analytics configuration necessary to collect metrics for this user
                *             pool.</p>
                *         <note>
                *             <p>In Amazon Web Services Regions where Amazon Pinpoint isn't available, user pools only support sending
                *                 events to Amazon Pinpoint projects in us-east-1. In Regions where Amazon Pinpoint is available, user
                *                 pools support sending events to Amazon Pinpoint projects within that same Region.</p>
                *         </note>
                */
            AnalyticsConfiguration?: AnalyticsConfigurationType;
            /**
                * <p>Errors and responses that you want Amazon Cognito APIs to return during authentication, account
                *             confirmation, and password recovery when the user doesn't exist in the user pool. When
                *             set to <code>ENABLED</code> and the user doesn't exist, authentication returns an error
                *             indicating either the username or password was incorrect. Account confirmation and
                *             password recovery return a response indicating a code was sent to a simulated
                *             destination. When set to <code>LEGACY</code>, those APIs return a
                *                 <code>UserNotFoundException</code> exception if the user doesn't exist in the user
                *             pool.</p>
                *         <p>Valid values include:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>ENABLED</code> - This prevents user existence-related errors.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>LEGACY</code> - This represents the early behavior of Amazon Cognito where user
                *                     existence related errors aren't prevented.</p>
                *             </li>
                *          </ul>
                */
            PreventUserExistenceErrors?: PreventUserExistenceErrorTypes | string;
            /**
                * <p>Activates or deactivates token revocation. For more information about revoking tokens,
                *             see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html">RevokeToken</a>.</p>
                */
            EnableTokenRevocation?: boolean;
            /**
                * <p>Activates the propagation of additional user context data. For more information about
                *             propagation of user context data, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html"> Adding advanced security to a user pool</a>. If you don’t include this
                *             parameter, you can't send device fingerprint information, including source IP address,
                *             to Amazon Cognito advanced security. You can only activate
                *                 <code>EnablePropagateAdditionalUserContextData</code> in an app client that has a
                *             client secret.</p>
                */
            EnablePropagateAdditionalUserContextData?: boolean;
    }
    export namespace UpdateUserPoolClientRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUserPoolClientRequest) => any;
    }
    /**
        * <p>Represents the response from the server to the request to update the user pool
        *             client.</p>
        */
    export interface UpdateUserPoolClientResponse {
            /**
                * <p>The user pool client value from the response from the server when you request to
                *             update the user pool client.</p>
                */
            UserPoolClient?: UserPoolClientType;
    }
    export namespace UpdateUserPoolClientResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUserPoolClientResponse) => any;
    }
    /**
        * <p>The UpdateUserPoolDomain request input.</p>
        */
    export interface UpdateUserPoolDomainRequest {
            /**
                * <p>The domain name for the custom domain that hosts the sign-up and sign-in pages for
                *             your application. One example might be <code>auth.example.com</code>. </p>
                *         <p>This string can include only lowercase letters, numbers, and hyphens. Don't use a
                *             hyphen for the first or last character. Use periods to separate subdomain names.</p>
                */
            Domain: string | undefined;
            /**
                * <p>The ID of the user pool that is associated with the custom domain whose certificate
                *             you're updating.</p>
                */
            UserPoolId: string | undefined;
            /**
                * <p>The configuration for a custom domain that hosts the sign-up and sign-in pages for
                *             your application. Use this object to specify an SSL certificate that is managed by
                *             ACM.</p>
                */
            CustomDomainConfig: CustomDomainConfigType | undefined;
    }
    export namespace UpdateUserPoolDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUserPoolDomainRequest) => any;
    }
    /**
        * <p>The UpdateUserPoolDomain response output.</p>
        */
    export interface UpdateUserPoolDomainResponse {
            /**
                * <p>The Amazon CloudFront endpoint that Amazon Cognito set up when you added the custom domain to your user
                *             pool.</p>
                */
            CloudFrontDomain?: string;
    }
    export namespace UpdateUserPoolDomainResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUserPoolDomainResponse) => any;
    }
    /**
        * <p>This exception is thrown when there is a code mismatch and the service fails to
        *             configure the software token TOTP multi-factor authentication (MFA).</p>
        */
    export class EnableSoftwareTokenMFAException extends __BaseException {
            readonly name: "EnableSoftwareTokenMFAException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EnableSoftwareTokenMFAException, __BaseException>);
    }
    export interface VerifySoftwareTokenRequest {
            /**
                * <p>A valid access token that Amazon Cognito issued to the user whose software token you want to
                *             verify.</p>
                */
            AccessToken?: string;
            /**
                * <p>The session that should be passed both ways in challenge-response calls to the
                *             service.</p>
                */
            Session?: string;
            /**
                * <p>The one- time password computed using the secret code returned by <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AssociateSoftwareToken.html">AssociateSoftwareToken</a>.</p>
                */
            UserCode: string | undefined;
            /**
                * <p>The friendly device name.</p>
                */
            FriendlyDeviceName?: string;
    }
    export namespace VerifySoftwareTokenRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VerifySoftwareTokenRequest) => any;
    }
    export enum VerifySoftwareTokenResponseType {
            ERROR = "ERROR",
            SUCCESS = "SUCCESS"
    }
    export interface VerifySoftwareTokenResponse {
            /**
                * <p>The status of the verify software token.</p>
                */
            Status?: VerifySoftwareTokenResponseType | string;
            /**
                * <p>The session that should be passed both ways in challenge-response calls to the
                *             service.</p>
                */
            Session?: string;
    }
    export namespace VerifySoftwareTokenResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VerifySoftwareTokenResponse) => any;
    }
    /**
        * <p>Represents the request to verify user attributes.</p>
        */
    export interface VerifyUserAttributeRequest {
            /**
                * <p>A valid access token that Amazon Cognito issued to the user whose user attributes you want to
                *             verify.</p>
                */
            AccessToken: string | undefined;
            /**
                * <p>The attribute name in the request to verify user attributes.</p>
                */
            AttributeName: string | undefined;
            /**
                * <p>The verification code in the request to verify user attributes.</p>
                */
            Code: string | undefined;
    }
    export namespace VerifyUserAttributeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VerifyUserAttributeRequest) => any;
    }
    /**
        * <p>A container representing the response from the server from the request to verify user
        *             attributes.</p>
        */
    export interface VerifyUserAttributeResponse {
    }
    export namespace VerifyUserAttributeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VerifyUserAttributeResponse) => any;
    }
}

declare module '@aws-sdk/client-cognito-identity-provider/node_modules/@aws-sdk/client-cognito-identity-provider/dist-types/models/CognitoIdentityProviderServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from CognitoIdentityProvider service.
        */
    export class CognitoIdentityProviderServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

