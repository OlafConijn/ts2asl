// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-transcribe' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CreateCallAnalyticsCategoryCommandInput, CreateCallAnalyticsCategoryCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/CreateCallAnalyticsCategoryCommand";
    import { CreateLanguageModelCommandInput, CreateLanguageModelCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/CreateLanguageModelCommand";
    import { CreateMedicalVocabularyCommandInput, CreateMedicalVocabularyCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/CreateMedicalVocabularyCommand";
    import { CreateVocabularyCommandInput, CreateVocabularyCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/CreateVocabularyCommand";
    import { CreateVocabularyFilterCommandInput, CreateVocabularyFilterCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/CreateVocabularyFilterCommand";
    import { DeleteCallAnalyticsCategoryCommandInput, DeleteCallAnalyticsCategoryCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteCallAnalyticsCategoryCommand";
    import { DeleteCallAnalyticsJobCommandInput, DeleteCallAnalyticsJobCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteCallAnalyticsJobCommand";
    import { DeleteLanguageModelCommandInput, DeleteLanguageModelCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteLanguageModelCommand";
    import { DeleteMedicalTranscriptionJobCommandInput, DeleteMedicalTranscriptionJobCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteMedicalTranscriptionJobCommand";
    import { DeleteMedicalVocabularyCommandInput, DeleteMedicalVocabularyCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteMedicalVocabularyCommand";
    import { DeleteTranscriptionJobCommandInput, DeleteTranscriptionJobCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteTranscriptionJobCommand";
    import { DeleteVocabularyCommandInput, DeleteVocabularyCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteVocabularyCommand";
    import { DeleteVocabularyFilterCommandInput, DeleteVocabularyFilterCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteVocabularyFilterCommand";
    import { DescribeLanguageModelCommandInput, DescribeLanguageModelCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DescribeLanguageModelCommand";
    import { GetCallAnalyticsCategoryCommandInput, GetCallAnalyticsCategoryCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/GetCallAnalyticsCategoryCommand";
    import { GetCallAnalyticsJobCommandInput, GetCallAnalyticsJobCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/GetCallAnalyticsJobCommand";
    import { GetMedicalTranscriptionJobCommandInput, GetMedicalTranscriptionJobCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/GetMedicalTranscriptionJobCommand";
    import { GetMedicalVocabularyCommandInput, GetMedicalVocabularyCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/GetMedicalVocabularyCommand";
    import { GetTranscriptionJobCommandInput, GetTranscriptionJobCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/GetTranscriptionJobCommand";
    import { GetVocabularyCommandInput, GetVocabularyCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/GetVocabularyCommand";
    import { GetVocabularyFilterCommandInput, GetVocabularyFilterCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/GetVocabularyFilterCommand";
    import { ListCallAnalyticsCategoriesCommandInput, ListCallAnalyticsCategoriesCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListCallAnalyticsCategoriesCommand";
    import { ListCallAnalyticsJobsCommandInput, ListCallAnalyticsJobsCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListCallAnalyticsJobsCommand";
    import { ListLanguageModelsCommandInput, ListLanguageModelsCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListLanguageModelsCommand";
    import { ListMedicalTranscriptionJobsCommandInput, ListMedicalTranscriptionJobsCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListMedicalTranscriptionJobsCommand";
    import { ListMedicalVocabulariesCommandInput, ListMedicalVocabulariesCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListMedicalVocabulariesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListTagsForResourceCommand";
    import { ListTranscriptionJobsCommandInput, ListTranscriptionJobsCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListTranscriptionJobsCommand";
    import { ListVocabulariesCommandInput, ListVocabulariesCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListVocabulariesCommand";
    import { ListVocabularyFiltersCommandInput, ListVocabularyFiltersCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListVocabularyFiltersCommand";
    import { StartCallAnalyticsJobCommandInput, StartCallAnalyticsJobCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/StartCallAnalyticsJobCommand";
    import { StartMedicalTranscriptionJobCommandInput, StartMedicalTranscriptionJobCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/StartMedicalTranscriptionJobCommand";
    import { StartTranscriptionJobCommandInput, StartTranscriptionJobCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/StartTranscriptionJobCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/UntagResourceCommand";
    import { UpdateCallAnalyticsCategoryCommandInput, UpdateCallAnalyticsCategoryCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/UpdateCallAnalyticsCategoryCommand";
    import { UpdateMedicalVocabularyCommandInput, UpdateMedicalVocabularyCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/UpdateMedicalVocabularyCommand";
    import { UpdateVocabularyCommandInput, UpdateVocabularyCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/UpdateVocabularyCommand";
    import { UpdateVocabularyFilterCommandInput, UpdateVocabularyFilterCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/UpdateVocabularyFilterCommand";
    import { TranscribeClient } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    /**
        * <p>Amazon Transcribe offers three main types of batch transcription:
        *             <b>Standard</b>, <b>Medical</b>, and
        *             <b>Call Analytics</b>.</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <b>Standard transcriptions</b> are the most common
        *                     option. Refer to  for details.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <b>Medical transcriptions</b> are tailored to medical
        *                     professionals and incorporate medical terms. A common use case for this service is
        *                     transcribing doctor-patient dialogue into after-visit notes. Refer to
        *                      for details.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <b>Call Analytics transcriptions</b> are designed for use
        *                     with call center audio on two different channels; if you're looking for insight into customer
        *                     service calls, use this option. Refer to  for
        *                     details.</p>
        *             </li>
        *          </ul>
        */
    export class Transcribe extends TranscribeClient {
            /**
                * <p>Creates a new Call Analytics category.</p>
                *         <p>All categories are automatically applied to your Call Analytics jobs. Note that in order to apply
                *             your categories to your jobs, you must create them before submitting your job request, as
                *             categories cannot be applied retroactively.</p>
                *         <p>Call Analytics categories are composed of rules. For each category, you must create
                *             between 1 and 20 rules. Rules can include these parameters: ,
                *             , , and
                *             .</p>
                *         <p>To update an existing category, see .</p>
                *         <p>To learn more about:</p>
                *             <ul>
                *             <li>
                *                     <p>Call Analytics categories, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics-create-categories.html">Creating categories</a>
                *                </p>
                *                 </li>
                *             <li>
                *                     <p>Using rules, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics-create-categories.html#call-analytics-create-categories-rules">Rule
                *             criteria</a> and refer to the  data type</p>
                *                 </li>
                *             <li>
                *                     <p>Call Analytics, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics.html">Analyzing call center audio with Call
                *             Analytics</a>
                *                </p>
                *                 </li>
                *          </ul>
                */
            createCallAnalyticsCategory(args: CreateCallAnalyticsCategoryCommandInput, options?: __HttpHandlerOptions): Promise<CreateCallAnalyticsCategoryCommandOutput>;
            createCallAnalyticsCategory(args: CreateCallAnalyticsCategoryCommandInput, cb: (err: any, data?: CreateCallAnalyticsCategoryCommandOutput) => void): void;
            createCallAnalyticsCategory(args: CreateCallAnalyticsCategoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateCallAnalyticsCategoryCommandOutput) => void): void;
            /**
                * <p>Creates a new custom language model.</p>
                *         <p>When creating a new language model, you must specify:</p>
                *         <ul>
                *             <li>
                *                 <p>If you want a Wideband (audio sample rates over 16,000 Hz) or Narrowband (audio sample
                *                     rates under 16,000 Hz) base model</p>
                *             </li>
                *             <li>
                *                 <p>The location of your training and tuning files (this must be an Amazon S3 URI)</p>
                *             </li>
                *             <li>
                *                 <p>The language of your model</p>
                *             </li>
                *             <li>
                *                 <p>A unique name for your model</p>
                *             </li>
                *          </ul>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/custom-language-models.html">Custom language models</a>.</p>
                */
            createLanguageModel(args: CreateLanguageModelCommandInput, options?: __HttpHandlerOptions): Promise<CreateLanguageModelCommandOutput>;
            createLanguageModel(args: CreateLanguageModelCommandInput, cb: (err: any, data?: CreateLanguageModelCommandOutput) => void): void;
            createLanguageModel(args: CreateLanguageModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLanguageModelCommandOutput) => void): void;
            /**
                * <p>Creates a new custom medical vocabulary.</p>
                *         <p>Prior to creating a new medical vocabulary, you must first upload a text file that contains
                *             your new entries, phrases, and terms into an Amazon S3 bucket. Note that this differs from
                *             , where you can include a list of terms within
                *             your request using the <code>Phrases</code> flag; <code>CreateMedicalVocabulary</code>
                *             does not support the <code>Phrases</code> flag.</p>
                *         <p>Each language has a character set that contains all allowed characters for that specific
                *             language. If you use unsupported characters, your vocabulary request fails. Refer to
                *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/charsets.html">Character Sets for
                *                 Custom Vocabularies</a> to get the character set for your language.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary-create.html">Creating a custom
                *             vocabulary</a>.</p>
                */
            createMedicalVocabulary(args: CreateMedicalVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<CreateMedicalVocabularyCommandOutput>;
            createMedicalVocabulary(args: CreateMedicalVocabularyCommandInput, cb: (err: any, data?: CreateMedicalVocabularyCommandOutput) => void): void;
            createMedicalVocabulary(args: CreateMedicalVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateMedicalVocabularyCommandOutput) => void): void;
            /**
                * <p>Creates a new custom vocabulary.</p>
                *         <p>When creating a new vocabulary, you can either upload a text file that contains your new
                *             entries, phrases, and terms into an Amazon S3 bucket and include the URI in your request, or
                *             you can include a list of terms directly in your request using the <code>Phrases</code> flag.</p>
                *         <p>Each language has a character set that contains all allowed characters for that specific
                *             language. If you use unsupported characters, your vocabulary request fails. Refer to
                *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/charsets.html">Character Sets for
                *                 Custom Vocabularies</a> to get the character set for your language.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary-create.html">Creating a custom
                *                 vocabulary</a>.</p>
                */
            createVocabulary(args: CreateVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<CreateVocabularyCommandOutput>;
            createVocabulary(args: CreateVocabularyCommandInput, cb: (err: any, data?: CreateVocabularyCommandOutput) => void): void;
            createVocabulary(args: CreateVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateVocabularyCommandOutput) => void): void;
            /**
                * <p>Creates a new custom vocabulary filter.</p>
                *         <p>You can use vocabulary filters to mask, delete, or flag specific words from your transcript.
                *             Vocabulary filters are commonly used to mask profanity in transcripts.</p>
                *         <p>Each language has a character set that contains all allowed characters for that specific
                *             language. If you use unsupported characters, your vocabulary filter request fails. Refer to
                *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/charsets.html">Character Sets for
                *                 Custom Vocabularies</a> to get the character set for your language.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/vocabulary-filtering.html">Using vocabulary filtering with unwanted
                *             words</a>.</p>
                */
            createVocabularyFilter(args: CreateVocabularyFilterCommandInput, options?: __HttpHandlerOptions): Promise<CreateVocabularyFilterCommandOutput>;
            createVocabularyFilter(args: CreateVocabularyFilterCommandInput, cb: (err: any, data?: CreateVocabularyFilterCommandOutput) => void): void;
            createVocabularyFilter(args: CreateVocabularyFilterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateVocabularyFilterCommandOutput) => void): void;
            /**
                * <p>Deletes a Call Analytics category. To use this operation, specify the name of the category
                *             you want to delete using <code>CategoryName</code>. Category names are case
                *             sensitive.</p>
                */
            deleteCallAnalyticsCategory(args: DeleteCallAnalyticsCategoryCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCallAnalyticsCategoryCommandOutput>;
            deleteCallAnalyticsCategory(args: DeleteCallAnalyticsCategoryCommandInput, cb: (err: any, data?: DeleteCallAnalyticsCategoryCommandOutput) => void): void;
            deleteCallAnalyticsCategory(args: DeleteCallAnalyticsCategoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCallAnalyticsCategoryCommandOutput) => void): void;
            /**
                * <p>Deletes a Call Analytics job. To use this operation, specify the name of the job you want to
                *             delete using <code>CallAnalyticsJobName</code>. Job names are case sensitive.</p>
                */
            deleteCallAnalyticsJob(args: DeleteCallAnalyticsJobCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCallAnalyticsJobCommandOutput>;
            deleteCallAnalyticsJob(args: DeleteCallAnalyticsJobCommandInput, cb: (err: any, data?: DeleteCallAnalyticsJobCommandOutput) => void): void;
            deleteCallAnalyticsJob(args: DeleteCallAnalyticsJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCallAnalyticsJobCommandOutput) => void): void;
            /**
                * <p>Deletes a custom language model. To use this operation, specify the name of the language
                *             model you want to delete using <code>ModelName</code>. Language model names are case
                *             sensitive.</p>
                */
            deleteLanguageModel(args: DeleteLanguageModelCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLanguageModelCommandOutput>;
            deleteLanguageModel(args: DeleteLanguageModelCommandInput, cb: (err: any, data?: DeleteLanguageModelCommandOutput) => void): void;
            deleteLanguageModel(args: DeleteLanguageModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLanguageModelCommandOutput) => void): void;
            /**
                * <p>Deletes a medical transcription job. To use this operation, specify the name of the job you
                *             want to delete using <code>MedicalTranscriptionJobName</code>. Job names are case
                *             sensitive.</p>
                */
            deleteMedicalTranscriptionJob(args: DeleteMedicalTranscriptionJobCommandInput, options?: __HttpHandlerOptions): Promise<DeleteMedicalTranscriptionJobCommandOutput>;
            deleteMedicalTranscriptionJob(args: DeleteMedicalTranscriptionJobCommandInput, cb: (err: any, data?: DeleteMedicalTranscriptionJobCommandOutput) => void): void;
            deleteMedicalTranscriptionJob(args: DeleteMedicalTranscriptionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteMedicalTranscriptionJobCommandOutput) => void): void;
            /**
                * <p>Deletes a custom medical vocabulary. To use this operation, specify the name of the
                *             vocabulary you want to delete using <code>VocabularyName</code>. Vocabulary names are
                *             case sensitive.</p>
                */
            deleteMedicalVocabulary(args: DeleteMedicalVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteMedicalVocabularyCommandOutput>;
            deleteMedicalVocabulary(args: DeleteMedicalVocabularyCommandInput, cb: (err: any, data?: DeleteMedicalVocabularyCommandOutput) => void): void;
            deleteMedicalVocabulary(args: DeleteMedicalVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteMedicalVocabularyCommandOutput) => void): void;
            /**
                * <p>Deletes a transcription job. To use this operation, specify the name of the job you want to
                *             delete using <code>TranscriptionJobName</code>. Job names are case sensitive.</p>
                */
            deleteTranscriptionJob(args: DeleteTranscriptionJobCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTranscriptionJobCommandOutput>;
            deleteTranscriptionJob(args: DeleteTranscriptionJobCommandInput, cb: (err: any, data?: DeleteTranscriptionJobCommandOutput) => void): void;
            deleteTranscriptionJob(args: DeleteTranscriptionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTranscriptionJobCommandOutput) => void): void;
            /**
                * <p>Deletes a custom vocabulary. To use this operation, specify the name of the vocabulary you
                *             want to delete using <code>VocabularyName</code>. Vocabulary names are case
                *             sensitive.</p>
                */
            deleteVocabulary(args: DeleteVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteVocabularyCommandOutput>;
            deleteVocabulary(args: DeleteVocabularyCommandInput, cb: (err: any, data?: DeleteVocabularyCommandOutput) => void): void;
            deleteVocabulary(args: DeleteVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteVocabularyCommandOutput) => void): void;
            /**
                * <p>Deletes a vocabulary filter. To use this operation, specify the name of the vocabulary filter
                *             you want to delete using <code>VocabularyFilterName</code>. Vocabulary filter names are
                *             case sensitive.</p>
                */
            deleteVocabularyFilter(args: DeleteVocabularyFilterCommandInput, options?: __HttpHandlerOptions): Promise<DeleteVocabularyFilterCommandOutput>;
            deleteVocabularyFilter(args: DeleteVocabularyFilterCommandInput, cb: (err: any, data?: DeleteVocabularyFilterCommandOutput) => void): void;
            deleteVocabularyFilter(args: DeleteVocabularyFilterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteVocabularyFilterCommandOutput) => void): void;
            /**
                * <p>Provides information about the specified custom language model.</p>
                *         <p>This operation also shows if the base language model you used to create your custom
                *             language model has been updated. If Amazon Transcribe has updated the base model, you
                *             can create a new custom language model using the updated base model.</p>
                *         <p>If you tried to create a new custom language model and the request wasn't successful,
                *             you can use <code>DescribeLanguageModel</code> to help identify the reason for this
                *             failure.</p>
                *         <p>To get a list of your custom language models, use the
                *              operation.</p>
                */
            describeLanguageModel(args: DescribeLanguageModelCommandInput, options?: __HttpHandlerOptions): Promise<DescribeLanguageModelCommandOutput>;
            describeLanguageModel(args: DescribeLanguageModelCommandInput, cb: (err: any, data?: DescribeLanguageModelCommandOutput) => void): void;
            describeLanguageModel(args: DescribeLanguageModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeLanguageModelCommandOutput) => void): void;
            /**
                * <p>Provides information about the specified Call Analytics category.</p>
                *         <p>To get a list of your Call Analytics categories, use the
                *              operation.</p>
                */
            getCallAnalyticsCategory(args: GetCallAnalyticsCategoryCommandInput, options?: __HttpHandlerOptions): Promise<GetCallAnalyticsCategoryCommandOutput>;
            getCallAnalyticsCategory(args: GetCallAnalyticsCategoryCommandInput, cb: (err: any, data?: GetCallAnalyticsCategoryCommandOutput) => void): void;
            getCallAnalyticsCategory(args: GetCallAnalyticsCategoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCallAnalyticsCategoryCommandOutput) => void): void;
            /**
                * <p>Provides information about the specified Call Analytics job.</p>
                *         <p>To view the job's status, refer to <code>CallAnalyticsJobStatus</code>. If the status is
                *             <code>COMPLETED</code>, the job is finished. You can find your completed transcript at
                *             the URI specified in <code>TranscriptFileUri</code>. If the status is <code>FAILED</code>,
                *             <code>FailureReason</code> provides details on why your transcription job failed.</p>
                *         <p>If you enabled personally identifiable information (PII) redaction, the redacted transcript
                *             appears at the location specified in <code>RedactedTranscriptFileUri</code>.</p>
                *          <p>If you chose to redact the audio in your media file, you can find your redacted media file
                *            at the location specified in <code>RedactedMediaFileUri</code>.</p>
                *         <p>To get a list of your Call Analytics jobs, use the
                *             operation.</p>
                */
            getCallAnalyticsJob(args: GetCallAnalyticsJobCommandInput, options?: __HttpHandlerOptions): Promise<GetCallAnalyticsJobCommandOutput>;
            getCallAnalyticsJob(args: GetCallAnalyticsJobCommandInput, cb: (err: any, data?: GetCallAnalyticsJobCommandOutput) => void): void;
            getCallAnalyticsJob(args: GetCallAnalyticsJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCallAnalyticsJobCommandOutput) => void): void;
            /**
                * <p>Provides information about the specified medical transcription job.</p>
                *         <p>To view the status of the specified medical transcription job, check the
                *             <code>TranscriptionJobStatus</code> field. If the status is <code>COMPLETED</code>, the
                *             job is finished and you can find the results at the location specified in
                *             <code>TranscriptFileUri</code>. If the status is <code>FAILED</code>,
                *             <code>FailureReason</code> provides details on why your transcription job failed.</p>
                *         <p>To get a list of your medical transcription jobs, use the
                *              operation.</p>
                */
            getMedicalTranscriptionJob(args: GetMedicalTranscriptionJobCommandInput, options?: __HttpHandlerOptions): Promise<GetMedicalTranscriptionJobCommandOutput>;
            getMedicalTranscriptionJob(args: GetMedicalTranscriptionJobCommandInput, cb: (err: any, data?: GetMedicalTranscriptionJobCommandOutput) => void): void;
            getMedicalTranscriptionJob(args: GetMedicalTranscriptionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMedicalTranscriptionJobCommandOutput) => void): void;
            /**
                * <p>Provides information about the specified custom medical vocabulary.</p>
                *         <p>To view the status of the specified medical vocabulary, check the
                *             <code>VocabularyState</code> field. If the status is <code>READY</code>, your vocabulary
                *             is available to use. If the status is <code>FAILED</code>, <code>FailureReason</code> provides
                *             details on why your vocabulary failed.</p>
                *         <p>To get a list of your custom medical vocabularies, use the
                *              operation.</p>
                */
            getMedicalVocabulary(args: GetMedicalVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<GetMedicalVocabularyCommandOutput>;
            getMedicalVocabulary(args: GetMedicalVocabularyCommandInput, cb: (err: any, data?: GetMedicalVocabularyCommandOutput) => void): void;
            getMedicalVocabulary(args: GetMedicalVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMedicalVocabularyCommandOutput) => void): void;
            /**
                * <p>Provides information about the specified transcription job.</p>
                *         <p>To view the status of the specified transcription job, check the
                *             <code>TranscriptionJobStatus</code> field. If the status is <code>COMPLETED</code>, the
                *             job is finished and you can find the results at the location specified in
                *             <code>TranscriptFileUri</code>. If the status is <code>FAILED</code>,
                *             <code>FailureReason</code> provides details on why your transcription job failed.</p>
                *         <p>If you enabled content redaction, the redacted transcript
                *             can be found at the location specified in <code>RedactedTranscriptFileUri</code>.</p>
                *         <p>To get a list of your transcription jobs, use the
                *             operation.</p>
                */
            getTranscriptionJob(args: GetTranscriptionJobCommandInput, options?: __HttpHandlerOptions): Promise<GetTranscriptionJobCommandOutput>;
            getTranscriptionJob(args: GetTranscriptionJobCommandInput, cb: (err: any, data?: GetTranscriptionJobCommandOutput) => void): void;
            getTranscriptionJob(args: GetTranscriptionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTranscriptionJobCommandOutput) => void): void;
            /**
                * <p>Provides information about the specified custom vocabulary.</p>
                *         <p>To view the status of the specified vocabulary, check the <code>VocabularyState</code>
                *             field. If the status is <code>READY</code>, your vocabulary is available to use. If the status
                *             is <code>FAILED</code>, <code>FailureReason</code> provides details on why your
                *             vocabulary failed.</p>
                *         <p>To get a list of your custom vocabularies, use the
                *             operation.</p>
                */
            getVocabulary(args: GetVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<GetVocabularyCommandOutput>;
            getVocabulary(args: GetVocabularyCommandInput, cb: (err: any, data?: GetVocabularyCommandOutput) => void): void;
            getVocabulary(args: GetVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetVocabularyCommandOutput) => void): void;
            /**
                * <p>Provides information about the specified custom vocabulary filter.</p>
                *         <p>To view the status of the specified vocabulary filter, check the <code>VocabularyState</code>
                *             field. If the status is <code>READY</code>, your vocabulary is available to use. If the status is
                *             <code>FAILED</code>, <code>FailureReason</code> provides details on why your vocabulary
                *             filter failed.</p>
                *         <p>To get a list of your custom vocabulary filters, use the
                *              operation.</p>
                */
            getVocabularyFilter(args: GetVocabularyFilterCommandInput, options?: __HttpHandlerOptions): Promise<GetVocabularyFilterCommandOutput>;
            getVocabularyFilter(args: GetVocabularyFilterCommandInput, cb: (err: any, data?: GetVocabularyFilterCommandOutput) => void): void;
            getVocabularyFilter(args: GetVocabularyFilterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetVocabularyFilterCommandOutput) => void): void;
            /**
                * <p>Provides a list of Call Analytics categories, including all rules that make up each category.</p>
                *         <p>To get detailed information about a specific Call Analytics category, use the
                *              operation.</p>
                */
            listCallAnalyticsCategories(args: ListCallAnalyticsCategoriesCommandInput, options?: __HttpHandlerOptions): Promise<ListCallAnalyticsCategoriesCommandOutput>;
            listCallAnalyticsCategories(args: ListCallAnalyticsCategoriesCommandInput, cb: (err: any, data?: ListCallAnalyticsCategoriesCommandOutput) => void): void;
            listCallAnalyticsCategories(args: ListCallAnalyticsCategoriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCallAnalyticsCategoriesCommandOutput) => void): void;
            /**
                * <p>Provides a list of Call Analytics jobs that match the specified criteria. If no criteria are
                *             specified, all Call Analytics jobs are returned.</p>
                *         <p>To get detailed information about a specific Call Analytics job, use the
                *              operation.</p>
                */
            listCallAnalyticsJobs(args: ListCallAnalyticsJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListCallAnalyticsJobsCommandOutput>;
            listCallAnalyticsJobs(args: ListCallAnalyticsJobsCommandInput, cb: (err: any, data?: ListCallAnalyticsJobsCommandOutput) => void): void;
            listCallAnalyticsJobs(args: ListCallAnalyticsJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCallAnalyticsJobsCommandOutput) => void): void;
            /**
                * <p>Provides a list of custom language models that match the specified criteria. If no criteria
                *             are specified, all language models are returned.</p>
                *         <p>To get detailed information about a specific custom language model, use the
                *              operation.</p>
                */
            listLanguageModels(args: ListLanguageModelsCommandInput, options?: __HttpHandlerOptions): Promise<ListLanguageModelsCommandOutput>;
            listLanguageModels(args: ListLanguageModelsCommandInput, cb: (err: any, data?: ListLanguageModelsCommandOutput) => void): void;
            listLanguageModels(args: ListLanguageModelsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLanguageModelsCommandOutput) => void): void;
            /**
                * <p>Provides a list of medical transcription jobs that match the specified criteria. If no criteria are
                *             specified, all medical transcription jobs are returned.</p>
                *         <p>To get detailed information about a specific medical transcription job, use the
                *              operation.</p>
                */
            listMedicalTranscriptionJobs(args: ListMedicalTranscriptionJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListMedicalTranscriptionJobsCommandOutput>;
            listMedicalTranscriptionJobs(args: ListMedicalTranscriptionJobsCommandInput, cb: (err: any, data?: ListMedicalTranscriptionJobsCommandOutput) => void): void;
            listMedicalTranscriptionJobs(args: ListMedicalTranscriptionJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListMedicalTranscriptionJobsCommandOutput) => void): void;
            /**
                * <p>Provides a list of custom medical vocabularies that match the specified criteria. If no
                *             criteria are specified, all custom medical vocabularies are returned.</p>
                *         <p>To get detailed information about a specific custom medical vocabulary, use the
                *              operation.</p>
                */
            listMedicalVocabularies(args: ListMedicalVocabulariesCommandInput, options?: __HttpHandlerOptions): Promise<ListMedicalVocabulariesCommandOutput>;
            listMedicalVocabularies(args: ListMedicalVocabulariesCommandInput, cb: (err: any, data?: ListMedicalVocabulariesCommandOutput) => void): void;
            listMedicalVocabularies(args: ListMedicalVocabulariesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListMedicalVocabulariesCommandOutput) => void): void;
            /**
                * <p>Lists all tags associated with the specified transcription job, vocabulary, model, or
                *             resource.</p>
                *         <p>To learn more about using tags with Amazon Transcribe, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html">Tagging resources</a>.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Provides a list of transcription jobs that match the specified criteria. If no criteria are
                *             specified, all transcription jobs are returned.</p>
                *         <p>To get detailed information about a specific transcription job, use the
                *              operation.</p>
                */
            listTranscriptionJobs(args: ListTranscriptionJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListTranscriptionJobsCommandOutput>;
            listTranscriptionJobs(args: ListTranscriptionJobsCommandInput, cb: (err: any, data?: ListTranscriptionJobsCommandOutput) => void): void;
            listTranscriptionJobs(args: ListTranscriptionJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTranscriptionJobsCommandOutput) => void): void;
            /**
                * <p>Provides a list of custom vocabularies that match the specified criteria. If no criteria are
                *             specified, all custom vocabularies are returned.</p>
                *         <p>To get detailed information about a specific custom vocabulary, use the
                *              operation.</p>
                */
            listVocabularies(args: ListVocabulariesCommandInput, options?: __HttpHandlerOptions): Promise<ListVocabulariesCommandOutput>;
            listVocabularies(args: ListVocabulariesCommandInput, cb: (err: any, data?: ListVocabulariesCommandOutput) => void): void;
            listVocabularies(args: ListVocabulariesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListVocabulariesCommandOutput) => void): void;
            /**
                * <p>Provides a list of custom vocabulary filters that match the specified criteria. If no
                *             criteria are specified, all custom vocabularies are returned.</p>
                *         <p>To get detailed information about a specific custom vocabulary filter, use the
                *              operation.</p>
                */
            listVocabularyFilters(args: ListVocabularyFiltersCommandInput, options?: __HttpHandlerOptions): Promise<ListVocabularyFiltersCommandOutput>;
            listVocabularyFilters(args: ListVocabularyFiltersCommandInput, cb: (err: any, data?: ListVocabularyFiltersCommandOutput) => void): void;
            listVocabularyFilters(args: ListVocabularyFiltersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListVocabularyFiltersCommandOutput) => void): void;
            /**
                * <p>Transcribes the audio from a customer service call and applies any additional Request
                *             Parameters you choose to include in your request.</p>
                *         <p>In addition to many of the standard transcription features, Call Analytics provides you with
                *             call characteristics, call summarization, speaker sentiment, and optional redaction of your text
                *             transcript and your audio file. You can also apply custom categories to flag specified conditions. To
                *             learn more about these features and insights, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics.html">Analyzing call center audio with Call
                *                 Analytics</a>.</p>
                *         <p>If you want to apply categories to your Call Analytics job, you must create them
                *             before submitting your job request. Categories cannot be retroactively applied to a job. To
                *             create a new category, use the  operation.
                *             To learn more about Call Analytics categories, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics-create-categories.html">Creating
                *                 categories</a>.</p>
                *         <p>To make a <code>StartCallAnalyticsJob</code> request, you must first upload your media file
                *             into an Amazon S3 bucket; you can then specify the Amazon S3 location of the file
                *             using the <code>Media</code> parameter.</p>
                *         <p>You must include the following parameters in your <code>StartCallAnalyticsJob</code>
                *             request:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>region</code>: The Amazon Web Services Region where you are making your
                *                     request. For a list of Amazon Web Services Regions supported with Amazon Transcribe, refer
                *                     to <a href="https://docs.aws.amazon.com/general/latest/gr/transcribe.html">Amazon Transcribe
                *                         endpoints and quotas</a>.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>CallAnalyticsJobName</code>: A custom name you create for your transcription job
                *                     that is unique within your Amazon Web Services account.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DataAccessRoleArn</code>: The Amazon Resource Name (ARN) of an IAM role that
                *                     has permissions to access the Amazon S3 bucket that contains your input files.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Media</code> (<code>MediaFileUri</code> or <code>RedactedMediaFileUri</code>):
                *                     The Amazon S3 location of your media file.</p>
                *             </li>
                *          </ul>
                *         <note>
                *             <p>With Call Analytics, you can redact the audio contained in your media file by including
                *                 <code>RedactedMediaFileUri</code>, instead of <code>MediaFileUri</code>, to specify the
                *                 location of your input audio. If you choose to redact your audio, you can find your redacted
                *                 media at the location specified in the <code>RedactedMediaFileUri</code> field of your
                *                 response.</p>
                *         </note>
                */
            startCallAnalyticsJob(args: StartCallAnalyticsJobCommandInput, options?: __HttpHandlerOptions): Promise<StartCallAnalyticsJobCommandOutput>;
            startCallAnalyticsJob(args: StartCallAnalyticsJobCommandInput, cb: (err: any, data?: StartCallAnalyticsJobCommandOutput) => void): void;
            startCallAnalyticsJob(args: StartCallAnalyticsJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartCallAnalyticsJobCommandOutput) => void): void;
            /**
                * <p>Transcribes the audio from a medical dictation or conversation and applies any additional
                *             Request Parameters you choose to include in your request.</p>
                *         <p>In addition to many of the standard transcription features, Amazon Transcribe Medical provides
                *             you with a robust medical vocabulary and, optionally, content identification, which adds flags to
                *             personal health information (PHI). To learn more about these features, refer to
                *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-it-works-med.html">How
                *                 Amazon Transcribe Medical works</a>.</p>
                *         <p>To make a <code>StartMedicalTranscriptionJob</code> request, you must first upload your media
                *             file into an Amazon S3 bucket; you can then specify the S3 location of the file using the
                *             <code>Media</code> parameter.</p>
                *         <p>You must include the following parameters in your <code>StartMedicalTranscriptionJob</code>
                *             request:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>region</code>: The Amazon Web Services Region where you are making your
                *                     request. For a list of Amazon Web Services Regions supported with Amazon Transcribe, refer
                *                     to <a href="https://docs.aws.amazon.com/general/latest/gr/transcribe.html">Amazon Transcribe
                *                         endpoints and quotas</a>.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>MedicalTranscriptionJobName</code>: A custom name you create for your
                *                     transcription job that is unique within your Amazon Web Services account.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Media</code> (<code>MediaFileUri</code>): The Amazon S3 location of
                *                     your media file.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>LanguageCode</code>: This must be <code>en-US</code>.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>OutputBucketName</code>: The Amazon S3 bucket where you want
                *                     your transcript stored. If you want your output stored in a sub-folder of this bucket, you must
                *                     also include <code>OutputKey</code>.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Specialty</code>: This must be <code>PRIMARYCARE</code>.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Type</code>: Choose whether your audio is a conversation or a dictation.</p>
                *             </li>
                *          </ul>
                */
            startMedicalTranscriptionJob(args: StartMedicalTranscriptionJobCommandInput, options?: __HttpHandlerOptions): Promise<StartMedicalTranscriptionJobCommandOutput>;
            startMedicalTranscriptionJob(args: StartMedicalTranscriptionJobCommandInput, cb: (err: any, data?: StartMedicalTranscriptionJobCommandOutput) => void): void;
            startMedicalTranscriptionJob(args: StartMedicalTranscriptionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartMedicalTranscriptionJobCommandOutput) => void): void;
            /**
                * <p>Transcribes the audio from a media file and applies any additional Request Parameters you
                *             choose to include in your request.</p>
                *         <p>To make a <code>StartTranscriptionJob</code> request, you must first upload your media file
                *             into an Amazon S3 bucket; you can then specify the Amazon S3 location of the file
                *             using the <code>Media</code> parameter.</p>
                *             <p>You must include the following parameters in your <code>StartTranscriptionJob</code>
                *                 request:</p>
                *             <ul>
                *             <li>
                *                     <p>
                *                   <code>region</code>: The Amazon Web Services Region where you are making your
                *                         request. For a list of Amazon Web Services Regions supported with Amazon Transcribe, refer
                *                         to <a href="https://docs.aws.amazon.com/general/latest/gr/transcribe.html">Amazon Transcribe
                *                             endpoints and quotas</a>.</p>
                *                 </li>
                *             <li>
                *                     <p>
                *                   <code>TranscriptionJobName</code>: A custom name you create for your transcription
                *                         job that is unique within your Amazon Web Services account.</p>
                *                 </li>
                *             <li>
                *                     <p>
                *                   <code>Media</code> (<code>MediaFileUri</code>): The Amazon S3 location of
                *                         your media file.</p>
                *                 </li>
                *             <li>
                *                     <p>One of <code>LanguageCode</code>, <code>IdentifyLanguage</code>, or
                *                         <code>IdentifyMultipleLanguages</code>: If you know the language of your media file,
                *                         specify it using the <code>LanguageCode</code> parameter; you can find all valid language
                *                         codes in the <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a> table.
                *                         If you don't know the languages spoken in your media, use either
                *                         <code>IdentifyLanguage</code> or <code>IdentifyMultipleLanguages</code> and let
                *                         Amazon Transcribe identify the languages for you.</p>
                *                 </li>
                *          </ul>
                */
            startTranscriptionJob(args: StartTranscriptionJobCommandInput, options?: __HttpHandlerOptions): Promise<StartTranscriptionJobCommandOutput>;
            startTranscriptionJob(args: StartTranscriptionJobCommandInput, cb: (err: any, data?: StartTranscriptionJobCommandOutput) => void): void;
            startTranscriptionJob(args: StartTranscriptionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartTranscriptionJobCommandOutput) => void): void;
            /**
                * <p>Adds one or more custom tags, each in the form of a key:value pair, to the specified
                *             resource.</p>
                *         <p>To learn more about using tags with Amazon Transcribe, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html">Tagging resources</a>.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes the specified tags from the specified Amazon Transcribe resource.</p>
                *         <p>If you include <code>UntagResource</code> in your request, you must also include
                *             <code>ResourceArn</code> and <code>TagKeys</code>.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates the specified Call Analytics category with new rules. Note that the
                *             <code>UpdateCallAnalyticsCategory</code> operation overwrites all existing rules contained in
                *             the specified category. You cannot append additional rules onto an existing category.</p>
                *         <p>To create a new category, see .</p>
                */
            updateCallAnalyticsCategory(args: UpdateCallAnalyticsCategoryCommandInput, options?: __HttpHandlerOptions): Promise<UpdateCallAnalyticsCategoryCommandOutput>;
            updateCallAnalyticsCategory(args: UpdateCallAnalyticsCategoryCommandInput, cb: (err: any, data?: UpdateCallAnalyticsCategoryCommandOutput) => void): void;
            updateCallAnalyticsCategory(args: UpdateCallAnalyticsCategoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateCallAnalyticsCategoryCommandOutput) => void): void;
            /**
                * <p>Updates an existing custom medical vocabulary with new values. This operation overwrites
                *             all existing information with your new values; you cannot append new terms onto an existing
                *             vocabulary.</p>
                */
            updateMedicalVocabulary(args: UpdateMedicalVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<UpdateMedicalVocabularyCommandOutput>;
            updateMedicalVocabulary(args: UpdateMedicalVocabularyCommandInput, cb: (err: any, data?: UpdateMedicalVocabularyCommandOutput) => void): void;
            updateMedicalVocabulary(args: UpdateMedicalVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateMedicalVocabularyCommandOutput) => void): void;
            /**
                * <p>Updates an existing custom vocabulary with new values. This operation overwrites all existing
                *             information with your new values; you cannot append new terms onto an existing vocabulary.</p>
                */
            updateVocabulary(args: UpdateVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<UpdateVocabularyCommandOutput>;
            updateVocabulary(args: UpdateVocabularyCommandInput, cb: (err: any, data?: UpdateVocabularyCommandOutput) => void): void;
            updateVocabulary(args: UpdateVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateVocabularyCommandOutput) => void): void;
            /**
                * <p>Updates an existing custom vocabulary filter with a new list of words. The new list you provide
                *             overwrites all previous entries; you cannot append new terms onto an existing vocabulary
                *             filter.</p>
                */
            updateVocabularyFilter(args: UpdateVocabularyFilterCommandInput, options?: __HttpHandlerOptions): Promise<UpdateVocabularyFilterCommandOutput>;
            updateVocabularyFilter(args: UpdateVocabularyFilterCommandInput, cb: (err: any, data?: UpdateVocabularyFilterCommandOutput) => void): void;
            updateVocabularyFilter(args: UpdateVocabularyFilterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateVocabularyFilterCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/CreateCallAnalyticsCategoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateCallAnalyticsCategoryRequest, CreateCallAnalyticsCategoryResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface CreateCallAnalyticsCategoryCommandInput extends CreateCallAnalyticsCategoryRequest {
    }
    export interface CreateCallAnalyticsCategoryCommandOutput extends CreateCallAnalyticsCategoryResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new Call Analytics category.</p>
        *         <p>All categories are automatically applied to your Call Analytics jobs. Note that in order to apply
        *             your categories to your jobs, you must create them before submitting your job request, as
        *             categories cannot be applied retroactively.</p>
        *         <p>Call Analytics categories are composed of rules. For each category, you must create
        *             between 1 and 20 rules. Rules can include these parameters: ,
        *             , , and
        *             .</p>
        *         <p>To update an existing category, see .</p>
        *         <p>To learn more about:</p>
        *             <ul>
        *             <li>
        *                     <p>Call Analytics categories, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics-create-categories.html">Creating categories</a>
        *                </p>
        *                 </li>
        *             <li>
        *                     <p>Using rules, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics-create-categories.html#call-analytics-create-categories-rules">Rule
        *             criteria</a> and refer to the  data type</p>
        *                 </li>
        *             <li>
        *                     <p>Call Analytics, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics.html">Analyzing call center audio with Call
        *             Analytics</a>
        *                </p>
        *                 </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, CreateCallAnalyticsCategoryCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, CreateCallAnalyticsCategoryCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new CreateCallAnalyticsCategoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateCallAnalyticsCategoryCommandInput} for command's `input` shape.
        * @see {@link CreateCallAnalyticsCategoryCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class CreateCallAnalyticsCategoryCommand extends $Command<CreateCallAnalyticsCategoryCommandInput, CreateCallAnalyticsCategoryCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: CreateCallAnalyticsCategoryCommandInput;
            constructor(input: CreateCallAnalyticsCategoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateCallAnalyticsCategoryCommandInput, CreateCallAnalyticsCategoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/CreateLanguageModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateLanguageModelRequest, CreateLanguageModelResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface CreateLanguageModelCommandInput extends CreateLanguageModelRequest {
    }
    export interface CreateLanguageModelCommandOutput extends CreateLanguageModelResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new custom language model.</p>
        *         <p>When creating a new language model, you must specify:</p>
        *         <ul>
        *             <li>
        *                 <p>If you want a Wideband (audio sample rates over 16,000 Hz) or Narrowband (audio sample
        *                     rates under 16,000 Hz) base model</p>
        *             </li>
        *             <li>
        *                 <p>The location of your training and tuning files (this must be an Amazon S3 URI)</p>
        *             </li>
        *             <li>
        *                 <p>The language of your model</p>
        *             </li>
        *             <li>
        *                 <p>A unique name for your model</p>
        *             </li>
        *          </ul>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/custom-language-models.html">Custom language models</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, CreateLanguageModelCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, CreateLanguageModelCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new CreateLanguageModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLanguageModelCommandInput} for command's `input` shape.
        * @see {@link CreateLanguageModelCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class CreateLanguageModelCommand extends $Command<CreateLanguageModelCommandInput, CreateLanguageModelCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: CreateLanguageModelCommandInput;
            constructor(input: CreateLanguageModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLanguageModelCommandInput, CreateLanguageModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/CreateMedicalVocabularyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateMedicalVocabularyRequest, CreateMedicalVocabularyResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface CreateMedicalVocabularyCommandInput extends CreateMedicalVocabularyRequest {
    }
    export interface CreateMedicalVocabularyCommandOutput extends CreateMedicalVocabularyResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new custom medical vocabulary.</p>
        *         <p>Prior to creating a new medical vocabulary, you must first upload a text file that contains
        *             your new entries, phrases, and terms into an Amazon S3 bucket. Note that this differs from
        *             , where you can include a list of terms within
        *             your request using the <code>Phrases</code> flag; <code>CreateMedicalVocabulary</code>
        *             does not support the <code>Phrases</code> flag.</p>
        *         <p>Each language has a character set that contains all allowed characters for that specific
        *             language. If you use unsupported characters, your vocabulary request fails. Refer to
        *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/charsets.html">Character Sets for
        *                 Custom Vocabularies</a> to get the character set for your language.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary-create.html">Creating a custom
        *             vocabulary</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, CreateMedicalVocabularyCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, CreateMedicalVocabularyCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new CreateMedicalVocabularyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateMedicalVocabularyCommandInput} for command's `input` shape.
        * @see {@link CreateMedicalVocabularyCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class CreateMedicalVocabularyCommand extends $Command<CreateMedicalVocabularyCommandInput, CreateMedicalVocabularyCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: CreateMedicalVocabularyCommandInput;
            constructor(input: CreateMedicalVocabularyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateMedicalVocabularyCommandInput, CreateMedicalVocabularyCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/CreateVocabularyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateVocabularyRequest, CreateVocabularyResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface CreateVocabularyCommandInput extends CreateVocabularyRequest {
    }
    export interface CreateVocabularyCommandOutput extends CreateVocabularyResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new custom vocabulary.</p>
        *         <p>When creating a new vocabulary, you can either upload a text file that contains your new
        *             entries, phrases, and terms into an Amazon S3 bucket and include the URI in your request, or
        *             you can include a list of terms directly in your request using the <code>Phrases</code> flag.</p>
        *         <p>Each language has a character set that contains all allowed characters for that specific
        *             language. If you use unsupported characters, your vocabulary request fails. Refer to
        *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/charsets.html">Character Sets for
        *                 Custom Vocabularies</a> to get the character set for your language.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary-create.html">Creating a custom
        *                 vocabulary</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, CreateVocabularyCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, CreateVocabularyCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new CreateVocabularyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateVocabularyCommandInput} for command's `input` shape.
        * @see {@link CreateVocabularyCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class CreateVocabularyCommand extends $Command<CreateVocabularyCommandInput, CreateVocabularyCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: CreateVocabularyCommandInput;
            constructor(input: CreateVocabularyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateVocabularyCommandInput, CreateVocabularyCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/CreateVocabularyFilterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateVocabularyFilterRequest, CreateVocabularyFilterResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface CreateVocabularyFilterCommandInput extends CreateVocabularyFilterRequest {
    }
    export interface CreateVocabularyFilterCommandOutput extends CreateVocabularyFilterResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new custom vocabulary filter.</p>
        *         <p>You can use vocabulary filters to mask, delete, or flag specific words from your transcript.
        *             Vocabulary filters are commonly used to mask profanity in transcripts.</p>
        *         <p>Each language has a character set that contains all allowed characters for that specific
        *             language. If you use unsupported characters, your vocabulary filter request fails. Refer to
        *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/charsets.html">Character Sets for
        *                 Custom Vocabularies</a> to get the character set for your language.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/vocabulary-filtering.html">Using vocabulary filtering with unwanted
        *             words</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, CreateVocabularyFilterCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, CreateVocabularyFilterCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new CreateVocabularyFilterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateVocabularyFilterCommandInput} for command's `input` shape.
        * @see {@link CreateVocabularyFilterCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class CreateVocabularyFilterCommand extends $Command<CreateVocabularyFilterCommandInput, CreateVocabularyFilterCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: CreateVocabularyFilterCommandInput;
            constructor(input: CreateVocabularyFilterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateVocabularyFilterCommandInput, CreateVocabularyFilterCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteCallAnalyticsCategoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteCallAnalyticsCategoryRequest, DeleteCallAnalyticsCategoryResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface DeleteCallAnalyticsCategoryCommandInput extends DeleteCallAnalyticsCategoryRequest {
    }
    export interface DeleteCallAnalyticsCategoryCommandOutput extends DeleteCallAnalyticsCategoryResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a Call Analytics category. To use this operation, specify the name of the category
        *             you want to delete using <code>CategoryName</code>. Category names are case
        *             sensitive.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, DeleteCallAnalyticsCategoryCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, DeleteCallAnalyticsCategoryCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new DeleteCallAnalyticsCategoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteCallAnalyticsCategoryCommandInput} for command's `input` shape.
        * @see {@link DeleteCallAnalyticsCategoryCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class DeleteCallAnalyticsCategoryCommand extends $Command<DeleteCallAnalyticsCategoryCommandInput, DeleteCallAnalyticsCategoryCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: DeleteCallAnalyticsCategoryCommandInput;
            constructor(input: DeleteCallAnalyticsCategoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteCallAnalyticsCategoryCommandInput, DeleteCallAnalyticsCategoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteCallAnalyticsJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteCallAnalyticsJobRequest, DeleteCallAnalyticsJobResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface DeleteCallAnalyticsJobCommandInput extends DeleteCallAnalyticsJobRequest {
    }
    export interface DeleteCallAnalyticsJobCommandOutput extends DeleteCallAnalyticsJobResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a Call Analytics job. To use this operation, specify the name of the job you want to
        *             delete using <code>CallAnalyticsJobName</code>. Job names are case sensitive.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, DeleteCallAnalyticsJobCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, DeleteCallAnalyticsJobCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new DeleteCallAnalyticsJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteCallAnalyticsJobCommandInput} for command's `input` shape.
        * @see {@link DeleteCallAnalyticsJobCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class DeleteCallAnalyticsJobCommand extends $Command<DeleteCallAnalyticsJobCommandInput, DeleteCallAnalyticsJobCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: DeleteCallAnalyticsJobCommandInput;
            constructor(input: DeleteCallAnalyticsJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteCallAnalyticsJobCommandInput, DeleteCallAnalyticsJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteLanguageModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteLanguageModelRequest } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface DeleteLanguageModelCommandInput extends DeleteLanguageModelRequest {
    }
    export interface DeleteLanguageModelCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a custom language model. To use this operation, specify the name of the language
        *             model you want to delete using <code>ModelName</code>. Language model names are case
        *             sensitive.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, DeleteLanguageModelCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, DeleteLanguageModelCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new DeleteLanguageModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLanguageModelCommandInput} for command's `input` shape.
        * @see {@link DeleteLanguageModelCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class DeleteLanguageModelCommand extends $Command<DeleteLanguageModelCommandInput, DeleteLanguageModelCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: DeleteLanguageModelCommandInput;
            constructor(input: DeleteLanguageModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLanguageModelCommandInput, DeleteLanguageModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteMedicalTranscriptionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteMedicalTranscriptionJobRequest } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface DeleteMedicalTranscriptionJobCommandInput extends DeleteMedicalTranscriptionJobRequest {
    }
    export interface DeleteMedicalTranscriptionJobCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a medical transcription job. To use this operation, specify the name of the job you
        *             want to delete using <code>MedicalTranscriptionJobName</code>. Job names are case
        *             sensitive.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, DeleteMedicalTranscriptionJobCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, DeleteMedicalTranscriptionJobCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new DeleteMedicalTranscriptionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteMedicalTranscriptionJobCommandInput} for command's `input` shape.
        * @see {@link DeleteMedicalTranscriptionJobCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class DeleteMedicalTranscriptionJobCommand extends $Command<DeleteMedicalTranscriptionJobCommandInput, DeleteMedicalTranscriptionJobCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: DeleteMedicalTranscriptionJobCommandInput;
            constructor(input: DeleteMedicalTranscriptionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteMedicalTranscriptionJobCommandInput, DeleteMedicalTranscriptionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteMedicalVocabularyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteMedicalVocabularyRequest } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface DeleteMedicalVocabularyCommandInput extends DeleteMedicalVocabularyRequest {
    }
    export interface DeleteMedicalVocabularyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a custom medical vocabulary. To use this operation, specify the name of the
        *             vocabulary you want to delete using <code>VocabularyName</code>. Vocabulary names are
        *             case sensitive.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, DeleteMedicalVocabularyCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, DeleteMedicalVocabularyCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new DeleteMedicalVocabularyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteMedicalVocabularyCommandInput} for command's `input` shape.
        * @see {@link DeleteMedicalVocabularyCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class DeleteMedicalVocabularyCommand extends $Command<DeleteMedicalVocabularyCommandInput, DeleteMedicalVocabularyCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: DeleteMedicalVocabularyCommandInput;
            constructor(input: DeleteMedicalVocabularyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteMedicalVocabularyCommandInput, DeleteMedicalVocabularyCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteTranscriptionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteTranscriptionJobRequest } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface DeleteTranscriptionJobCommandInput extends DeleteTranscriptionJobRequest {
    }
    export interface DeleteTranscriptionJobCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a transcription job. To use this operation, specify the name of the job you want to
        *             delete using <code>TranscriptionJobName</code>. Job names are case sensitive.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, DeleteTranscriptionJobCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, DeleteTranscriptionJobCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new DeleteTranscriptionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteTranscriptionJobCommandInput} for command's `input` shape.
        * @see {@link DeleteTranscriptionJobCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class DeleteTranscriptionJobCommand extends $Command<DeleteTranscriptionJobCommandInput, DeleteTranscriptionJobCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: DeleteTranscriptionJobCommandInput;
            constructor(input: DeleteTranscriptionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteTranscriptionJobCommandInput, DeleteTranscriptionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteVocabularyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteVocabularyRequest } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface DeleteVocabularyCommandInput extends DeleteVocabularyRequest {
    }
    export interface DeleteVocabularyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a custom vocabulary. To use this operation, specify the name of the vocabulary you
        *             want to delete using <code>VocabularyName</code>. Vocabulary names are case
        *             sensitive.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, DeleteVocabularyCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, DeleteVocabularyCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new DeleteVocabularyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteVocabularyCommandInput} for command's `input` shape.
        * @see {@link DeleteVocabularyCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class DeleteVocabularyCommand extends $Command<DeleteVocabularyCommandInput, DeleteVocabularyCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: DeleteVocabularyCommandInput;
            constructor(input: DeleteVocabularyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteVocabularyCommandInput, DeleteVocabularyCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteVocabularyFilterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteVocabularyFilterRequest } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface DeleteVocabularyFilterCommandInput extends DeleteVocabularyFilterRequest {
    }
    export interface DeleteVocabularyFilterCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a vocabulary filter. To use this operation, specify the name of the vocabulary filter
        *             you want to delete using <code>VocabularyFilterName</code>. Vocabulary filter names are
        *             case sensitive.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, DeleteVocabularyFilterCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, DeleteVocabularyFilterCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new DeleteVocabularyFilterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteVocabularyFilterCommandInput} for command's `input` shape.
        * @see {@link DeleteVocabularyFilterCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class DeleteVocabularyFilterCommand extends $Command<DeleteVocabularyFilterCommandInput, DeleteVocabularyFilterCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: DeleteVocabularyFilterCommandInput;
            constructor(input: DeleteVocabularyFilterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteVocabularyFilterCommandInput, DeleteVocabularyFilterCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DescribeLanguageModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeLanguageModelRequest, DescribeLanguageModelResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface DescribeLanguageModelCommandInput extends DescribeLanguageModelRequest {
    }
    export interface DescribeLanguageModelCommandOutput extends DescribeLanguageModelResponse, __MetadataBearer {
    }
    /**
        * <p>Provides information about the specified custom language model.</p>
        *         <p>This operation also shows if the base language model you used to create your custom
        *             language model has been updated. If Amazon Transcribe has updated the base model, you
        *             can create a new custom language model using the updated base model.</p>
        *         <p>If you tried to create a new custom language model and the request wasn't successful,
        *             you can use <code>DescribeLanguageModel</code> to help identify the reason for this
        *             failure.</p>
        *         <p>To get a list of your custom language models, use the
        *              operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, DescribeLanguageModelCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, DescribeLanguageModelCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new DescribeLanguageModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeLanguageModelCommandInput} for command's `input` shape.
        * @see {@link DescribeLanguageModelCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class DescribeLanguageModelCommand extends $Command<DescribeLanguageModelCommandInput, DescribeLanguageModelCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: DescribeLanguageModelCommandInput;
            constructor(input: DescribeLanguageModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeLanguageModelCommandInput, DescribeLanguageModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/GetCallAnalyticsCategoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetCallAnalyticsCategoryRequest, GetCallAnalyticsCategoryResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface GetCallAnalyticsCategoryCommandInput extends GetCallAnalyticsCategoryRequest {
    }
    export interface GetCallAnalyticsCategoryCommandOutput extends GetCallAnalyticsCategoryResponse, __MetadataBearer {
    }
    /**
        * <p>Provides information about the specified Call Analytics category.</p>
        *         <p>To get a list of your Call Analytics categories, use the
        *              operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, GetCallAnalyticsCategoryCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, GetCallAnalyticsCategoryCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new GetCallAnalyticsCategoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCallAnalyticsCategoryCommandInput} for command's `input` shape.
        * @see {@link GetCallAnalyticsCategoryCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class GetCallAnalyticsCategoryCommand extends $Command<GetCallAnalyticsCategoryCommandInput, GetCallAnalyticsCategoryCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: GetCallAnalyticsCategoryCommandInput;
            constructor(input: GetCallAnalyticsCategoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCallAnalyticsCategoryCommandInput, GetCallAnalyticsCategoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/GetCallAnalyticsJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetCallAnalyticsJobRequest, GetCallAnalyticsJobResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface GetCallAnalyticsJobCommandInput extends GetCallAnalyticsJobRequest {
    }
    export interface GetCallAnalyticsJobCommandOutput extends GetCallAnalyticsJobResponse, __MetadataBearer {
    }
    /**
        * <p>Provides information about the specified Call Analytics job.</p>
        *         <p>To view the job's status, refer to <code>CallAnalyticsJobStatus</code>. If the status is
        *             <code>COMPLETED</code>, the job is finished. You can find your completed transcript at
        *             the URI specified in <code>TranscriptFileUri</code>. If the status is <code>FAILED</code>,
        *             <code>FailureReason</code> provides details on why your transcription job failed.</p>
        *         <p>If you enabled personally identifiable information (PII) redaction, the redacted transcript
        *             appears at the location specified in <code>RedactedTranscriptFileUri</code>.</p>
        *          <p>If you chose to redact the audio in your media file, you can find your redacted media file
        *            at the location specified in <code>RedactedMediaFileUri</code>.</p>
        *         <p>To get a list of your Call Analytics jobs, use the
        *             operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, GetCallAnalyticsJobCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, GetCallAnalyticsJobCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new GetCallAnalyticsJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCallAnalyticsJobCommandInput} for command's `input` shape.
        * @see {@link GetCallAnalyticsJobCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class GetCallAnalyticsJobCommand extends $Command<GetCallAnalyticsJobCommandInput, GetCallAnalyticsJobCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: GetCallAnalyticsJobCommandInput;
            constructor(input: GetCallAnalyticsJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCallAnalyticsJobCommandInput, GetCallAnalyticsJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/GetMedicalTranscriptionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetMedicalTranscriptionJobRequest, GetMedicalTranscriptionJobResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface GetMedicalTranscriptionJobCommandInput extends GetMedicalTranscriptionJobRequest {
    }
    export interface GetMedicalTranscriptionJobCommandOutput extends GetMedicalTranscriptionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Provides information about the specified medical transcription job.</p>
        *         <p>To view the status of the specified medical transcription job, check the
        *             <code>TranscriptionJobStatus</code> field. If the status is <code>COMPLETED</code>, the
        *             job is finished and you can find the results at the location specified in
        *             <code>TranscriptFileUri</code>. If the status is <code>FAILED</code>,
        *             <code>FailureReason</code> provides details on why your transcription job failed.</p>
        *         <p>To get a list of your medical transcription jobs, use the
        *              operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, GetMedicalTranscriptionJobCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, GetMedicalTranscriptionJobCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new GetMedicalTranscriptionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMedicalTranscriptionJobCommandInput} for command's `input` shape.
        * @see {@link GetMedicalTranscriptionJobCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class GetMedicalTranscriptionJobCommand extends $Command<GetMedicalTranscriptionJobCommandInput, GetMedicalTranscriptionJobCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: GetMedicalTranscriptionJobCommandInput;
            constructor(input: GetMedicalTranscriptionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMedicalTranscriptionJobCommandInput, GetMedicalTranscriptionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/GetMedicalVocabularyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetMedicalVocabularyRequest, GetMedicalVocabularyResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface GetMedicalVocabularyCommandInput extends GetMedicalVocabularyRequest {
    }
    export interface GetMedicalVocabularyCommandOutput extends GetMedicalVocabularyResponse, __MetadataBearer {
    }
    /**
        * <p>Provides information about the specified custom medical vocabulary.</p>
        *         <p>To view the status of the specified medical vocabulary, check the
        *             <code>VocabularyState</code> field. If the status is <code>READY</code>, your vocabulary
        *             is available to use. If the status is <code>FAILED</code>, <code>FailureReason</code> provides
        *             details on why your vocabulary failed.</p>
        *         <p>To get a list of your custom medical vocabularies, use the
        *              operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, GetMedicalVocabularyCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, GetMedicalVocabularyCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new GetMedicalVocabularyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMedicalVocabularyCommandInput} for command's `input` shape.
        * @see {@link GetMedicalVocabularyCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class GetMedicalVocabularyCommand extends $Command<GetMedicalVocabularyCommandInput, GetMedicalVocabularyCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: GetMedicalVocabularyCommandInput;
            constructor(input: GetMedicalVocabularyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMedicalVocabularyCommandInput, GetMedicalVocabularyCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/GetTranscriptionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetTranscriptionJobRequest, GetTranscriptionJobResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface GetTranscriptionJobCommandInput extends GetTranscriptionJobRequest {
    }
    export interface GetTranscriptionJobCommandOutput extends GetTranscriptionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Provides information about the specified transcription job.</p>
        *         <p>To view the status of the specified transcription job, check the
        *             <code>TranscriptionJobStatus</code> field. If the status is <code>COMPLETED</code>, the
        *             job is finished and you can find the results at the location specified in
        *             <code>TranscriptFileUri</code>. If the status is <code>FAILED</code>,
        *             <code>FailureReason</code> provides details on why your transcription job failed.</p>
        *         <p>If you enabled content redaction, the redacted transcript
        *             can be found at the location specified in <code>RedactedTranscriptFileUri</code>.</p>
        *         <p>To get a list of your transcription jobs, use the
        *             operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, GetTranscriptionJobCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, GetTranscriptionJobCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new GetTranscriptionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTranscriptionJobCommandInput} for command's `input` shape.
        * @see {@link GetTranscriptionJobCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class GetTranscriptionJobCommand extends $Command<GetTranscriptionJobCommandInput, GetTranscriptionJobCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: GetTranscriptionJobCommandInput;
            constructor(input: GetTranscriptionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTranscriptionJobCommandInput, GetTranscriptionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/GetVocabularyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetVocabularyRequest, GetVocabularyResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface GetVocabularyCommandInput extends GetVocabularyRequest {
    }
    export interface GetVocabularyCommandOutput extends GetVocabularyResponse, __MetadataBearer {
    }
    /**
        * <p>Provides information about the specified custom vocabulary.</p>
        *         <p>To view the status of the specified vocabulary, check the <code>VocabularyState</code>
        *             field. If the status is <code>READY</code>, your vocabulary is available to use. If the status
        *             is <code>FAILED</code>, <code>FailureReason</code> provides details on why your
        *             vocabulary failed.</p>
        *         <p>To get a list of your custom vocabularies, use the
        *             operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, GetVocabularyCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, GetVocabularyCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new GetVocabularyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetVocabularyCommandInput} for command's `input` shape.
        * @see {@link GetVocabularyCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class GetVocabularyCommand extends $Command<GetVocabularyCommandInput, GetVocabularyCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: GetVocabularyCommandInput;
            constructor(input: GetVocabularyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetVocabularyCommandInput, GetVocabularyCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/GetVocabularyFilterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetVocabularyFilterRequest, GetVocabularyFilterResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface GetVocabularyFilterCommandInput extends GetVocabularyFilterRequest {
    }
    export interface GetVocabularyFilterCommandOutput extends GetVocabularyFilterResponse, __MetadataBearer {
    }
    /**
        * <p>Provides information about the specified custom vocabulary filter.</p>
        *         <p>To view the status of the specified vocabulary filter, check the <code>VocabularyState</code>
        *             field. If the status is <code>READY</code>, your vocabulary is available to use. If the status is
        *             <code>FAILED</code>, <code>FailureReason</code> provides details on why your vocabulary
        *             filter failed.</p>
        *         <p>To get a list of your custom vocabulary filters, use the
        *              operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, GetVocabularyFilterCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, GetVocabularyFilterCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new GetVocabularyFilterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetVocabularyFilterCommandInput} for command's `input` shape.
        * @see {@link GetVocabularyFilterCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class GetVocabularyFilterCommand extends $Command<GetVocabularyFilterCommandInput, GetVocabularyFilterCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: GetVocabularyFilterCommandInput;
            constructor(input: GetVocabularyFilterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetVocabularyFilterCommandInput, GetVocabularyFilterCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListCallAnalyticsCategoriesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListCallAnalyticsCategoriesRequest, ListCallAnalyticsCategoriesResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface ListCallAnalyticsCategoriesCommandInput extends ListCallAnalyticsCategoriesRequest {
    }
    export interface ListCallAnalyticsCategoriesCommandOutput extends ListCallAnalyticsCategoriesResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a list of Call Analytics categories, including all rules that make up each category.</p>
        *         <p>To get detailed information about a specific Call Analytics category, use the
        *              operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, ListCallAnalyticsCategoriesCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, ListCallAnalyticsCategoriesCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new ListCallAnalyticsCategoriesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListCallAnalyticsCategoriesCommandInput} for command's `input` shape.
        * @see {@link ListCallAnalyticsCategoriesCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class ListCallAnalyticsCategoriesCommand extends $Command<ListCallAnalyticsCategoriesCommandInput, ListCallAnalyticsCategoriesCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: ListCallAnalyticsCategoriesCommandInput;
            constructor(input: ListCallAnalyticsCategoriesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListCallAnalyticsCategoriesCommandInput, ListCallAnalyticsCategoriesCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListCallAnalyticsJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListCallAnalyticsJobsRequest, ListCallAnalyticsJobsResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface ListCallAnalyticsJobsCommandInput extends ListCallAnalyticsJobsRequest {
    }
    export interface ListCallAnalyticsJobsCommandOutput extends ListCallAnalyticsJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a list of Call Analytics jobs that match the specified criteria. If no criteria are
        *             specified, all Call Analytics jobs are returned.</p>
        *         <p>To get detailed information about a specific Call Analytics job, use the
        *              operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, ListCallAnalyticsJobsCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, ListCallAnalyticsJobsCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new ListCallAnalyticsJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListCallAnalyticsJobsCommandInput} for command's `input` shape.
        * @see {@link ListCallAnalyticsJobsCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class ListCallAnalyticsJobsCommand extends $Command<ListCallAnalyticsJobsCommandInput, ListCallAnalyticsJobsCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: ListCallAnalyticsJobsCommandInput;
            constructor(input: ListCallAnalyticsJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListCallAnalyticsJobsCommandInput, ListCallAnalyticsJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListLanguageModelsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListLanguageModelsRequest, ListLanguageModelsResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface ListLanguageModelsCommandInput extends ListLanguageModelsRequest {
    }
    export interface ListLanguageModelsCommandOutput extends ListLanguageModelsResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a list of custom language models that match the specified criteria. If no criteria
        *             are specified, all language models are returned.</p>
        *         <p>To get detailed information about a specific custom language model, use the
        *              operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, ListLanguageModelsCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, ListLanguageModelsCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new ListLanguageModelsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListLanguageModelsCommandInput} for command's `input` shape.
        * @see {@link ListLanguageModelsCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class ListLanguageModelsCommand extends $Command<ListLanguageModelsCommandInput, ListLanguageModelsCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: ListLanguageModelsCommandInput;
            constructor(input: ListLanguageModelsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListLanguageModelsCommandInput, ListLanguageModelsCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListMedicalTranscriptionJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListMedicalTranscriptionJobsRequest, ListMedicalTranscriptionJobsResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface ListMedicalTranscriptionJobsCommandInput extends ListMedicalTranscriptionJobsRequest {
    }
    export interface ListMedicalTranscriptionJobsCommandOutput extends ListMedicalTranscriptionJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a list of medical transcription jobs that match the specified criteria. If no criteria are
        *             specified, all medical transcription jobs are returned.</p>
        *         <p>To get detailed information about a specific medical transcription job, use the
        *              operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, ListMedicalTranscriptionJobsCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, ListMedicalTranscriptionJobsCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new ListMedicalTranscriptionJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListMedicalTranscriptionJobsCommandInput} for command's `input` shape.
        * @see {@link ListMedicalTranscriptionJobsCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class ListMedicalTranscriptionJobsCommand extends $Command<ListMedicalTranscriptionJobsCommandInput, ListMedicalTranscriptionJobsCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: ListMedicalTranscriptionJobsCommandInput;
            constructor(input: ListMedicalTranscriptionJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListMedicalTranscriptionJobsCommandInput, ListMedicalTranscriptionJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListMedicalVocabulariesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListMedicalVocabulariesRequest, ListMedicalVocabulariesResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface ListMedicalVocabulariesCommandInput extends ListMedicalVocabulariesRequest {
    }
    export interface ListMedicalVocabulariesCommandOutput extends ListMedicalVocabulariesResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a list of custom medical vocabularies that match the specified criteria. If no
        *             criteria are specified, all custom medical vocabularies are returned.</p>
        *         <p>To get detailed information about a specific custom medical vocabulary, use the
        *              operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, ListMedicalVocabulariesCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, ListMedicalVocabulariesCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new ListMedicalVocabulariesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListMedicalVocabulariesCommandInput} for command's `input` shape.
        * @see {@link ListMedicalVocabulariesCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class ListMedicalVocabulariesCommand extends $Command<ListMedicalVocabulariesCommandInput, ListMedicalVocabulariesCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: ListMedicalVocabulariesCommandInput;
            constructor(input: ListMedicalVocabulariesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListMedicalVocabulariesCommandInput, ListMedicalVocabulariesCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all tags associated with the specified transcription job, vocabulary, model, or
        *             resource.</p>
        *         <p>To learn more about using tags with Amazon Transcribe, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html">Tagging resources</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, ListTagsForResourceCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, ListTagsForResourceCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListTranscriptionJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTranscriptionJobsRequest, ListTranscriptionJobsResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface ListTranscriptionJobsCommandInput extends ListTranscriptionJobsRequest {
    }
    export interface ListTranscriptionJobsCommandOutput extends ListTranscriptionJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a list of transcription jobs that match the specified criteria. If no criteria are
        *             specified, all transcription jobs are returned.</p>
        *         <p>To get detailed information about a specific transcription job, use the
        *              operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, ListTranscriptionJobsCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, ListTranscriptionJobsCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new ListTranscriptionJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTranscriptionJobsCommandInput} for command's `input` shape.
        * @see {@link ListTranscriptionJobsCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class ListTranscriptionJobsCommand extends $Command<ListTranscriptionJobsCommandInput, ListTranscriptionJobsCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: ListTranscriptionJobsCommandInput;
            constructor(input: ListTranscriptionJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTranscriptionJobsCommandInput, ListTranscriptionJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListVocabulariesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListVocabulariesRequest, ListVocabulariesResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface ListVocabulariesCommandInput extends ListVocabulariesRequest {
    }
    export interface ListVocabulariesCommandOutput extends ListVocabulariesResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a list of custom vocabularies that match the specified criteria. If no criteria are
        *             specified, all custom vocabularies are returned.</p>
        *         <p>To get detailed information about a specific custom vocabulary, use the
        *              operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, ListVocabulariesCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, ListVocabulariesCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new ListVocabulariesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListVocabulariesCommandInput} for command's `input` shape.
        * @see {@link ListVocabulariesCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class ListVocabulariesCommand extends $Command<ListVocabulariesCommandInput, ListVocabulariesCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: ListVocabulariesCommandInput;
            constructor(input: ListVocabulariesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListVocabulariesCommandInput, ListVocabulariesCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListVocabularyFiltersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListVocabularyFiltersRequest, ListVocabularyFiltersResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface ListVocabularyFiltersCommandInput extends ListVocabularyFiltersRequest {
    }
    export interface ListVocabularyFiltersCommandOutput extends ListVocabularyFiltersResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a list of custom vocabulary filters that match the specified criteria. If no
        *             criteria are specified, all custom vocabularies are returned.</p>
        *         <p>To get detailed information about a specific custom vocabulary filter, use the
        *              operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, ListVocabularyFiltersCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, ListVocabularyFiltersCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new ListVocabularyFiltersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListVocabularyFiltersCommandInput} for command's `input` shape.
        * @see {@link ListVocabularyFiltersCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class ListVocabularyFiltersCommand extends $Command<ListVocabularyFiltersCommandInput, ListVocabularyFiltersCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: ListVocabularyFiltersCommandInput;
            constructor(input: ListVocabularyFiltersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListVocabularyFiltersCommandInput, ListVocabularyFiltersCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/StartCallAnalyticsJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartCallAnalyticsJobRequest, StartCallAnalyticsJobResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface StartCallAnalyticsJobCommandInput extends StartCallAnalyticsJobRequest {
    }
    export interface StartCallAnalyticsJobCommandOutput extends StartCallAnalyticsJobResponse, __MetadataBearer {
    }
    /**
        * <p>Transcribes the audio from a customer service call and applies any additional Request
        *             Parameters you choose to include in your request.</p>
        *         <p>In addition to many of the standard transcription features, Call Analytics provides you with
        *             call characteristics, call summarization, speaker sentiment, and optional redaction of your text
        *             transcript and your audio file. You can also apply custom categories to flag specified conditions. To
        *             learn more about these features and insights, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics.html">Analyzing call center audio with Call
        *                 Analytics</a>.</p>
        *         <p>If you want to apply categories to your Call Analytics job, you must create them
        *             before submitting your job request. Categories cannot be retroactively applied to a job. To
        *             create a new category, use the  operation.
        *             To learn more about Call Analytics categories, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics-create-categories.html">Creating
        *                 categories</a>.</p>
        *         <p>To make a <code>StartCallAnalyticsJob</code> request, you must first upload your media file
        *             into an Amazon S3 bucket; you can then specify the Amazon S3 location of the file
        *             using the <code>Media</code> parameter.</p>
        *         <p>You must include the following parameters in your <code>StartCallAnalyticsJob</code>
        *             request:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>region</code>: The Amazon Web Services Region where you are making your
        *                     request. For a list of Amazon Web Services Regions supported with Amazon Transcribe, refer
        *                     to <a href="https://docs.aws.amazon.com/general/latest/gr/transcribe.html">Amazon Transcribe
        *                         endpoints and quotas</a>.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>CallAnalyticsJobName</code>: A custom name you create for your transcription job
        *                     that is unique within your Amazon Web Services account.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>DataAccessRoleArn</code>: The Amazon Resource Name (ARN) of an IAM role that
        *                     has permissions to access the Amazon S3 bucket that contains your input files.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>Media</code> (<code>MediaFileUri</code> or <code>RedactedMediaFileUri</code>):
        *                     The Amazon S3 location of your media file.</p>
        *             </li>
        *          </ul>
        *         <note>
        *             <p>With Call Analytics, you can redact the audio contained in your media file by including
        *                 <code>RedactedMediaFileUri</code>, instead of <code>MediaFileUri</code>, to specify the
        *                 location of your input audio. If you choose to redact your audio, you can find your redacted
        *                 media at the location specified in the <code>RedactedMediaFileUri</code> field of your
        *                 response.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, StartCallAnalyticsJobCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, StartCallAnalyticsJobCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new StartCallAnalyticsJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartCallAnalyticsJobCommandInput} for command's `input` shape.
        * @see {@link StartCallAnalyticsJobCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class StartCallAnalyticsJobCommand extends $Command<StartCallAnalyticsJobCommandInput, StartCallAnalyticsJobCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: StartCallAnalyticsJobCommandInput;
            constructor(input: StartCallAnalyticsJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartCallAnalyticsJobCommandInput, StartCallAnalyticsJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/StartMedicalTranscriptionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartMedicalTranscriptionJobRequest, StartMedicalTranscriptionJobResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface StartMedicalTranscriptionJobCommandInput extends StartMedicalTranscriptionJobRequest {
    }
    export interface StartMedicalTranscriptionJobCommandOutput extends StartMedicalTranscriptionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Transcribes the audio from a medical dictation or conversation and applies any additional
        *             Request Parameters you choose to include in your request.</p>
        *         <p>In addition to many of the standard transcription features, Amazon Transcribe Medical provides
        *             you with a robust medical vocabulary and, optionally, content identification, which adds flags to
        *             personal health information (PHI). To learn more about these features, refer to
        *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-it-works-med.html">How
        *                 Amazon Transcribe Medical works</a>.</p>
        *         <p>To make a <code>StartMedicalTranscriptionJob</code> request, you must first upload your media
        *             file into an Amazon S3 bucket; you can then specify the S3 location of the file using the
        *             <code>Media</code> parameter.</p>
        *         <p>You must include the following parameters in your <code>StartMedicalTranscriptionJob</code>
        *             request:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>region</code>: The Amazon Web Services Region where you are making your
        *                     request. For a list of Amazon Web Services Regions supported with Amazon Transcribe, refer
        *                     to <a href="https://docs.aws.amazon.com/general/latest/gr/transcribe.html">Amazon Transcribe
        *                         endpoints and quotas</a>.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>MedicalTranscriptionJobName</code>: A custom name you create for your
        *                     transcription job that is unique within your Amazon Web Services account.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>Media</code> (<code>MediaFileUri</code>): The Amazon S3 location of
        *                     your media file.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>LanguageCode</code>: This must be <code>en-US</code>.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>OutputBucketName</code>: The Amazon S3 bucket where you want
        *                     your transcript stored. If you want your output stored in a sub-folder of this bucket, you must
        *                     also include <code>OutputKey</code>.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>Specialty</code>: This must be <code>PRIMARYCARE</code>.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>Type</code>: Choose whether your audio is a conversation or a dictation.</p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, StartMedicalTranscriptionJobCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, StartMedicalTranscriptionJobCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new StartMedicalTranscriptionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartMedicalTranscriptionJobCommandInput} for command's `input` shape.
        * @see {@link StartMedicalTranscriptionJobCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class StartMedicalTranscriptionJobCommand extends $Command<StartMedicalTranscriptionJobCommandInput, StartMedicalTranscriptionJobCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: StartMedicalTranscriptionJobCommandInput;
            constructor(input: StartMedicalTranscriptionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartMedicalTranscriptionJobCommandInput, StartMedicalTranscriptionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/StartTranscriptionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartTranscriptionJobRequest, StartTranscriptionJobResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface StartTranscriptionJobCommandInput extends StartTranscriptionJobRequest {
    }
    export interface StartTranscriptionJobCommandOutput extends StartTranscriptionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Transcribes the audio from a media file and applies any additional Request Parameters you
        *             choose to include in your request.</p>
        *         <p>To make a <code>StartTranscriptionJob</code> request, you must first upload your media file
        *             into an Amazon S3 bucket; you can then specify the Amazon S3 location of the file
        *             using the <code>Media</code> parameter.</p>
        *             <p>You must include the following parameters in your <code>StartTranscriptionJob</code>
        *                 request:</p>
        *             <ul>
        *             <li>
        *                     <p>
        *                   <code>region</code>: The Amazon Web Services Region where you are making your
        *                         request. For a list of Amazon Web Services Regions supported with Amazon Transcribe, refer
        *                         to <a href="https://docs.aws.amazon.com/general/latest/gr/transcribe.html">Amazon Transcribe
        *                             endpoints and quotas</a>.</p>
        *                 </li>
        *             <li>
        *                     <p>
        *                   <code>TranscriptionJobName</code>: A custom name you create for your transcription
        *                         job that is unique within your Amazon Web Services account.</p>
        *                 </li>
        *             <li>
        *                     <p>
        *                   <code>Media</code> (<code>MediaFileUri</code>): The Amazon S3 location of
        *                         your media file.</p>
        *                 </li>
        *             <li>
        *                     <p>One of <code>LanguageCode</code>, <code>IdentifyLanguage</code>, or
        *                         <code>IdentifyMultipleLanguages</code>: If you know the language of your media file,
        *                         specify it using the <code>LanguageCode</code> parameter; you can find all valid language
        *                         codes in the <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a> table.
        *                         If you don't know the languages spoken in your media, use either
        *                         <code>IdentifyLanguage</code> or <code>IdentifyMultipleLanguages</code> and let
        *                         Amazon Transcribe identify the languages for you.</p>
        *                 </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, StartTranscriptionJobCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, StartTranscriptionJobCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new StartTranscriptionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartTranscriptionJobCommandInput} for command's `input` shape.
        * @see {@link StartTranscriptionJobCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class StartTranscriptionJobCommand extends $Command<StartTranscriptionJobCommandInput, StartTranscriptionJobCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: StartTranscriptionJobCommandInput;
            constructor(input: StartTranscriptionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartTranscriptionJobCommandInput, StartTranscriptionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Adds one or more custom tags, each in the form of a key:value pair, to the specified
        *             resource.</p>
        *         <p>To learn more about using tags with Amazon Transcribe, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html">Tagging resources</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, TagResourceCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, TagResourceCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes the specified tags from the specified Amazon Transcribe resource.</p>
        *         <p>If you include <code>UntagResource</code> in your request, you must also include
        *             <code>ResourceArn</code> and <code>TagKeys</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, UntagResourceCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, UntagResourceCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/UpdateCallAnalyticsCategoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateCallAnalyticsCategoryRequest, UpdateCallAnalyticsCategoryResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface UpdateCallAnalyticsCategoryCommandInput extends UpdateCallAnalyticsCategoryRequest {
    }
    export interface UpdateCallAnalyticsCategoryCommandOutput extends UpdateCallAnalyticsCategoryResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the specified Call Analytics category with new rules. Note that the
        *             <code>UpdateCallAnalyticsCategory</code> operation overwrites all existing rules contained in
        *             the specified category. You cannot append additional rules onto an existing category.</p>
        *         <p>To create a new category, see .</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, UpdateCallAnalyticsCategoryCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, UpdateCallAnalyticsCategoryCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new UpdateCallAnalyticsCategoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateCallAnalyticsCategoryCommandInput} for command's `input` shape.
        * @see {@link UpdateCallAnalyticsCategoryCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class UpdateCallAnalyticsCategoryCommand extends $Command<UpdateCallAnalyticsCategoryCommandInput, UpdateCallAnalyticsCategoryCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: UpdateCallAnalyticsCategoryCommandInput;
            constructor(input: UpdateCallAnalyticsCategoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateCallAnalyticsCategoryCommandInput, UpdateCallAnalyticsCategoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/UpdateMedicalVocabularyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateMedicalVocabularyRequest, UpdateMedicalVocabularyResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface UpdateMedicalVocabularyCommandInput extends UpdateMedicalVocabularyRequest {
    }
    export interface UpdateMedicalVocabularyCommandOutput extends UpdateMedicalVocabularyResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an existing custom medical vocabulary with new values. This operation overwrites
        *             all existing information with your new values; you cannot append new terms onto an existing
        *             vocabulary.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, UpdateMedicalVocabularyCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, UpdateMedicalVocabularyCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new UpdateMedicalVocabularyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateMedicalVocabularyCommandInput} for command's `input` shape.
        * @see {@link UpdateMedicalVocabularyCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class UpdateMedicalVocabularyCommand extends $Command<UpdateMedicalVocabularyCommandInput, UpdateMedicalVocabularyCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: UpdateMedicalVocabularyCommandInput;
            constructor(input: UpdateMedicalVocabularyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateMedicalVocabularyCommandInput, UpdateMedicalVocabularyCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/UpdateVocabularyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateVocabularyRequest, UpdateVocabularyResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface UpdateVocabularyCommandInput extends UpdateVocabularyRequest {
    }
    export interface UpdateVocabularyCommandOutput extends UpdateVocabularyResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an existing custom vocabulary with new values. This operation overwrites all existing
        *             information with your new values; you cannot append new terms onto an existing vocabulary.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, UpdateVocabularyCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, UpdateVocabularyCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new UpdateVocabularyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateVocabularyCommandInput} for command's `input` shape.
        * @see {@link UpdateVocabularyCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class UpdateVocabularyCommand extends $Command<UpdateVocabularyCommandInput, UpdateVocabularyCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: UpdateVocabularyCommandInput;
            constructor(input: UpdateVocabularyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateVocabularyCommandInput, UpdateVocabularyCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/UpdateVocabularyFilterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateVocabularyFilterRequest, UpdateVocabularyFilterResponse } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient";
    export interface UpdateVocabularyFilterCommandInput extends UpdateVocabularyFilterRequest {
    }
    export interface UpdateVocabularyFilterCommandOutput extends UpdateVocabularyFilterResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an existing custom vocabulary filter with a new list of words. The new list you provide
        *             overwrites all previous entries; you cannot append new terms onto an existing vocabulary
        *             filter.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { TranscribeClient, UpdateVocabularyFilterCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
        * // const { TranscribeClient, UpdateVocabularyFilterCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
        * const client = new TranscribeClient(config);
        * const command = new UpdateVocabularyFilterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateVocabularyFilterCommandInput} for command's `input` shape.
        * @see {@link UpdateVocabularyFilterCommandOutput} for command's `response` shape.
        * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
        *
        */
    export class UpdateVocabularyFilterCommand extends $Command<UpdateVocabularyFilterCommandInput, UpdateVocabularyFilterCommandOutput, TranscribeClientResolvedConfig> {
            readonly input: UpdateVocabularyFilterCommandInput;
            constructor(input: UpdateVocabularyFilterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateVocabularyFilterCommandInput, UpdateVocabularyFilterCommandOutput>;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/TranscribeClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateCallAnalyticsCategoryCommandInput, CreateCallAnalyticsCategoryCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/CreateCallAnalyticsCategoryCommand";
    import { CreateLanguageModelCommandInput, CreateLanguageModelCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/CreateLanguageModelCommand";
    import { CreateMedicalVocabularyCommandInput, CreateMedicalVocabularyCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/CreateMedicalVocabularyCommand";
    import { CreateVocabularyCommandInput, CreateVocabularyCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/CreateVocabularyCommand";
    import { CreateVocabularyFilterCommandInput, CreateVocabularyFilterCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/CreateVocabularyFilterCommand";
    import { DeleteCallAnalyticsCategoryCommandInput, DeleteCallAnalyticsCategoryCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteCallAnalyticsCategoryCommand";
    import { DeleteCallAnalyticsJobCommandInput, DeleteCallAnalyticsJobCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteCallAnalyticsJobCommand";
    import { DeleteLanguageModelCommandInput, DeleteLanguageModelCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteLanguageModelCommand";
    import { DeleteMedicalTranscriptionJobCommandInput, DeleteMedicalTranscriptionJobCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteMedicalTranscriptionJobCommand";
    import { DeleteMedicalVocabularyCommandInput, DeleteMedicalVocabularyCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteMedicalVocabularyCommand";
    import { DeleteTranscriptionJobCommandInput, DeleteTranscriptionJobCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteTranscriptionJobCommand";
    import { DeleteVocabularyCommandInput, DeleteVocabularyCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteVocabularyCommand";
    import { DeleteVocabularyFilterCommandInput, DeleteVocabularyFilterCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DeleteVocabularyFilterCommand";
    import { DescribeLanguageModelCommandInput, DescribeLanguageModelCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/DescribeLanguageModelCommand";
    import { GetCallAnalyticsCategoryCommandInput, GetCallAnalyticsCategoryCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/GetCallAnalyticsCategoryCommand";
    import { GetCallAnalyticsJobCommandInput, GetCallAnalyticsJobCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/GetCallAnalyticsJobCommand";
    import { GetMedicalTranscriptionJobCommandInput, GetMedicalTranscriptionJobCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/GetMedicalTranscriptionJobCommand";
    import { GetMedicalVocabularyCommandInput, GetMedicalVocabularyCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/GetMedicalVocabularyCommand";
    import { GetTranscriptionJobCommandInput, GetTranscriptionJobCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/GetTranscriptionJobCommand";
    import { GetVocabularyCommandInput, GetVocabularyCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/GetVocabularyCommand";
    import { GetVocabularyFilterCommandInput, GetVocabularyFilterCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/GetVocabularyFilterCommand";
    import { ListCallAnalyticsCategoriesCommandInput, ListCallAnalyticsCategoriesCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListCallAnalyticsCategoriesCommand";
    import { ListCallAnalyticsJobsCommandInput, ListCallAnalyticsJobsCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListCallAnalyticsJobsCommand";
    import { ListLanguageModelsCommandInput, ListLanguageModelsCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListLanguageModelsCommand";
    import { ListMedicalTranscriptionJobsCommandInput, ListMedicalTranscriptionJobsCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListMedicalTranscriptionJobsCommand";
    import { ListMedicalVocabulariesCommandInput, ListMedicalVocabulariesCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListMedicalVocabulariesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListTagsForResourceCommand";
    import { ListTranscriptionJobsCommandInput, ListTranscriptionJobsCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListTranscriptionJobsCommand";
    import { ListVocabulariesCommandInput, ListVocabulariesCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListVocabulariesCommand";
    import { ListVocabularyFiltersCommandInput, ListVocabularyFiltersCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/ListVocabularyFiltersCommand";
    import { StartCallAnalyticsJobCommandInput, StartCallAnalyticsJobCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/StartCallAnalyticsJobCommand";
    import { StartMedicalTranscriptionJobCommandInput, StartMedicalTranscriptionJobCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/StartMedicalTranscriptionJobCommand";
    import { StartTranscriptionJobCommandInput, StartTranscriptionJobCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/StartTranscriptionJobCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/UntagResourceCommand";
    import { UpdateCallAnalyticsCategoryCommandInput, UpdateCallAnalyticsCategoryCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/UpdateCallAnalyticsCategoryCommand";
    import { UpdateMedicalVocabularyCommandInput, UpdateMedicalVocabularyCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/UpdateMedicalVocabularyCommand";
    import { UpdateVocabularyCommandInput, UpdateVocabularyCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/UpdateVocabularyCommand";
    import { UpdateVocabularyFilterCommandInput, UpdateVocabularyFilterCommandOutput } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/commands/UpdateVocabularyFilterCommand";
    export type ServiceInputTypes = CreateCallAnalyticsCategoryCommandInput | CreateLanguageModelCommandInput | CreateMedicalVocabularyCommandInput | CreateVocabularyCommandInput | CreateVocabularyFilterCommandInput | DeleteCallAnalyticsCategoryCommandInput | DeleteCallAnalyticsJobCommandInput | DeleteLanguageModelCommandInput | DeleteMedicalTranscriptionJobCommandInput | DeleteMedicalVocabularyCommandInput | DeleteTranscriptionJobCommandInput | DeleteVocabularyCommandInput | DeleteVocabularyFilterCommandInput | DescribeLanguageModelCommandInput | GetCallAnalyticsCategoryCommandInput | GetCallAnalyticsJobCommandInput | GetMedicalTranscriptionJobCommandInput | GetMedicalVocabularyCommandInput | GetTranscriptionJobCommandInput | GetVocabularyCommandInput | GetVocabularyFilterCommandInput | ListCallAnalyticsCategoriesCommandInput | ListCallAnalyticsJobsCommandInput | ListLanguageModelsCommandInput | ListMedicalTranscriptionJobsCommandInput | ListMedicalVocabulariesCommandInput | ListTagsForResourceCommandInput | ListTranscriptionJobsCommandInput | ListVocabulariesCommandInput | ListVocabularyFiltersCommandInput | StartCallAnalyticsJobCommandInput | StartMedicalTranscriptionJobCommandInput | StartTranscriptionJobCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateCallAnalyticsCategoryCommandInput | UpdateMedicalVocabularyCommandInput | UpdateVocabularyCommandInput | UpdateVocabularyFilterCommandInput;
    export type ServiceOutputTypes = CreateCallAnalyticsCategoryCommandOutput | CreateLanguageModelCommandOutput | CreateMedicalVocabularyCommandOutput | CreateVocabularyCommandOutput | CreateVocabularyFilterCommandOutput | DeleteCallAnalyticsCategoryCommandOutput | DeleteCallAnalyticsJobCommandOutput | DeleteLanguageModelCommandOutput | DeleteMedicalTranscriptionJobCommandOutput | DeleteMedicalVocabularyCommandOutput | DeleteTranscriptionJobCommandOutput | DeleteVocabularyCommandOutput | DeleteVocabularyFilterCommandOutput | DescribeLanguageModelCommandOutput | GetCallAnalyticsCategoryCommandOutput | GetCallAnalyticsJobCommandOutput | GetMedicalTranscriptionJobCommandOutput | GetMedicalVocabularyCommandOutput | GetTranscriptionJobCommandOutput | GetVocabularyCommandOutput | GetVocabularyFilterCommandOutput | ListCallAnalyticsCategoriesCommandOutput | ListCallAnalyticsJobsCommandOutput | ListLanguageModelsCommandOutput | ListMedicalTranscriptionJobsCommandOutput | ListMedicalVocabulariesCommandOutput | ListTagsForResourceCommandOutput | ListTranscriptionJobsCommandOutput | ListVocabulariesCommandOutput | ListVocabularyFiltersCommandOutput | StartCallAnalyticsJobCommandOutput | StartMedicalTranscriptionJobCommandOutput | StartTranscriptionJobCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateCallAnalyticsCategoryCommandOutput | UpdateMedicalVocabularyCommandOutput | UpdateVocabularyCommandOutput | UpdateVocabularyFilterCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type TranscribeClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of TranscribeClient class constructor that set the region, credentials and other options.
        */
    export interface TranscribeClientConfig extends TranscribeClientConfigType {
    }
    type TranscribeClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of TranscribeClient class. This is resolved and normalized from the {@link TranscribeClientConfig | constructor configuration interface}.
        */
    export interface TranscribeClientResolvedConfig extends TranscribeClientResolvedConfigType {
    }
    /**
        * <p>Amazon Transcribe offers three main types of batch transcription:
        *             <b>Standard</b>, <b>Medical</b>, and
        *             <b>Call Analytics</b>.</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <b>Standard transcriptions</b> are the most common
        *                     option. Refer to  for details.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <b>Medical transcriptions</b> are tailored to medical
        *                     professionals and incorporate medical terms. A common use case for this service is
        *                     transcribing doctor-patient dialogue into after-visit notes. Refer to
        *                      for details.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <b>Call Analytics transcriptions</b> are designed for use
        *                     with call center audio on two different channels; if you're looking for insight into customer
        *                     service calls, use this option. Refer to  for
        *                     details.</p>
        *             </li>
        *          </ul>
        */
    export class TranscribeClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig> {
            /**
                * The resolved configuration of TranscribeClient class. This is resolved and normalized from the {@link TranscribeClientConfig | constructor configuration interface}.
                */
            readonly config: TranscribeClientResolvedConfig;
            constructor(configuration: TranscribeClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { TranscribeServiceException as __BaseException } from "@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/TranscribeServiceException";
    /**
        * <p>A time range, in milliseconds, between two points in your media file.</p>
        *         <p>You can use <code>StartTime</code> and <code>EndTime</code> to search a custom
        *             segment. For example, setting <code>StartTime</code> to 10000 and <code>EndTime</code>
        *             to 50000 only searches for your specified criteria in the audio contained between the 10,000
        *             millisecond mark and the 50,000 millisecond mark of your media file. You must use
        *             <code>StartTime</code> and <code>EndTime</code> as a set; that is, if you include one,
        *             you must include both.</p>
        *         <p>You can use also <code>First</code> to search from the start of the audio until the time
        *             you specify, or <code>Last</code> to search from the time you specify until the end of the
        *             audio. For example, setting <code>First</code> to 50000 only searches for your specified
        *             criteria in the audio contained between the start of the media file to the 50,000 millisecond
        *             mark. You can use <code>First</code> and <code>Last</code> independently of each
        *             other.</p>
        *         <p>If you prefer to use percentage instead of milliseconds, see
        *             .</p>
        */
    export interface AbsoluteTimeRange {
            /**
                * <p>The time, in milliseconds, when Amazon Transcribe starts searching for the specified
                *             criteria in your audio. If you include <code>StartTime</code> in your request, you must also
                *             include <code>EndTime</code>.</p>
                */
            StartTime?: number;
            /**
                * <p>The time, in milliseconds, when Amazon Transcribe stops searching for the specified criteria
                *             in your audio. If you include <code>EndTime</code> in your request, you must also include
                *             <code>StartTime</code>.</p>
                */
            EndTime?: number;
            /**
                * <p>The time, in milliseconds, from the start of your media file until the value you specify in
                *             which Amazon Transcribe searches for your specified criteria.</p>
                */
            First?: number;
            /**
                * <p>The time, in milliseconds, from the value you specify until the end of your media file in
                *             which Amazon Transcribe searches for your specified criteria.</p>
                */
            Last?: number;
    }
    export namespace AbsoluteTimeRange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AbsoluteTimeRange) => any;
    }
    /**
        * <p>Your request didn't pass one or more validation tests. This can occur when the entity you're
        *             trying to delete doesn't exist or if it's in a non-terminal state (such as
        *             <code>IN PROGRESS</code>). See the exception message field for more information.</p>
        */
    export class BadRequestException extends __BaseException {
            readonly name: "BadRequestException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BadRequestException, __BaseException>);
    }
    export enum BaseModelName {
            NARROW_BAND = "NarrowBand",
            WIDE_BAND = "WideBand"
    }
    export enum CallAnalyticsJobStatus {
            COMPLETED = "COMPLETED",
            FAILED = "FAILED",
            IN_PROGRESS = "IN_PROGRESS",
            QUEUED = "QUEUED"
    }
    export enum ParticipantRole {
            AGENT = "AGENT",
            CUSTOMER = "CUSTOMER"
    }
    /**
        * <p>Allows you to specify which speaker is on which channel. For example, if your agent is the
        *             first participant to speak, you would set <code>ChannelId</code> to <code>0</code> (to
        *             indicate the first channel) and <code>ParticipantRole</code> to <code>AGENT</code> (to
        *             indicate that it's the agent speaking).</p>
        */
    export interface ChannelDefinition {
            /**
                * <p>Specify the audio channel you want to define.</p>
                */
            ChannelId?: number;
            /**
                * <p>Specify the speaker you want to define. Omitting this parameter is equivalent to specifying
                *             both participants.</p>
                */
            ParticipantRole?: ParticipantRole | string;
    }
    export namespace ChannelDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelDefinition) => any;
    }
    export enum LanguageCode {
            AF_ZA = "af-ZA",
            AR_AE = "ar-AE",
            AR_SA = "ar-SA",
            CY_GB = "cy-GB",
            DA_DK = "da-DK",
            DE_CH = "de-CH",
            DE_DE = "de-DE",
            EN_AB = "en-AB",
            EN_AU = "en-AU",
            EN_GB = "en-GB",
            EN_IE = "en-IE",
            EN_IN = "en-IN",
            EN_NZ = "en-NZ",
            EN_US = "en-US",
            EN_WL = "en-WL",
            EN_ZA = "en-ZA",
            ES_ES = "es-ES",
            ES_US = "es-US",
            FA_IR = "fa-IR",
            FR_CA = "fr-CA",
            FR_FR = "fr-FR",
            GA_IE = "ga-IE",
            GD_GB = "gd-GB",
            HE_IL = "he-IL",
            HI_IN = "hi-IN",
            ID_ID = "id-ID",
            IT_IT = "it-IT",
            JA_JP = "ja-JP",
            KO_KR = "ko-KR",
            MS_MY = "ms-MY",
            NL_NL = "nl-NL",
            PT_BR = "pt-BR",
            PT_PT = "pt-PT",
            RU_RU = "ru-RU",
            TA_IN = "ta-IN",
            TE_IN = "te-IN",
            TH_TH = "th-TH",
            TR_TR = "tr-TR",
            ZH_CN = "zh-CN",
            ZH_TW = "zh-TW"
    }
    /**
        * <p>Describes the Amazon S3 location of the media file you want to use in your
        *             request.</p>
        */
    export interface Media {
            /**
                * <p>The Amazon S3 location of the media file you want to transcribe. For
                *             example:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>s3://DOC-EXAMPLE-BUCKET/my-media-file.flac</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>s3://DOC-EXAMPLE-BUCKET/media-files/my-media-file.flac</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>Note that the Amazon S3 bucket that contains your input media must be located
                *             in the same Amazon Web Services Region where you're making your transcription
                *             request.</p>
                */
            MediaFileUri?: string;
            /**
                * <p>The Amazon S3 location of the media file you want to redact. For
                *             example:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>s3://DOC-EXAMPLE-BUCKET/my-media-file.flac</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>s3://DOC-EXAMPLE-BUCKET/media-files/my-media-file.flac</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>Note that the Amazon S3 bucket that contains your input media must be located
                *             in the same Amazon Web Services Region where you're making your transcription
                *             request.</p>
                *         <important>
                *             <p>
                *                <code>RedactedMediaFileUri</code> is only supported for Call Analytics
                *                 (<code>StartCallAnalyticsJob</code>) transcription requests.</p>
                *         </important>
                */
            RedactedMediaFileUri?: string;
    }
    export namespace Media {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Media) => any;
    }
    export enum MediaFormat {
            AMR = "amr",
            FLAC = "flac",
            MP3 = "mp3",
            MP4 = "mp4",
            OGG = "ogg",
            WAV = "wav",
            WEBM = "webm"
    }
    export enum PiiEntityType {
            ADDRESS = "ADDRESS",
            ALL = "ALL",
            BANK_ACCOUNT_NUMBER = "BANK_ACCOUNT_NUMBER",
            BANK_ROUTING = "BANK_ROUTING",
            CREDIT_DEBIT_CVV = "CREDIT_DEBIT_CVV",
            CREDIT_DEBIT_EXPIRY = "CREDIT_DEBIT_EXPIRY",
            CREDIT_DEBIT_NUMBER = "CREDIT_DEBIT_NUMBER",
            EMAIL = "EMAIL",
            NAME = "NAME",
            PHONE = "PHONE",
            PIN = "PIN",
            SSN = "SSN"
    }
    export enum RedactionOutput {
            REDACTED = "redacted",
            REDACTED_AND_UNREDACTED = "redacted_and_unredacted"
    }
    export enum RedactionType {
            PII = "PII"
    }
    /**
        * <p>Allows you to redact or flag specified personally identifiable information (PII) in your transcript. If
        *             you use <code>ContentRedaction</code>, you must also include the sub-parameters:
        *             <code>PiiEntityTypes</code>, <code>RedactionOutput</code>, and
        *             <code>RedactionType</code>.</p>
        */
    export interface ContentRedaction {
            /**
                * <p>Specify the category of information you want to redact; <code>PII</code> (personally
                *             identifiable information) is the only valid value. You can use <code>PiiEntityTypes</code> to
                *             choose which types of PII you want to redact.</p>
                */
            RedactionType: RedactionType | string | undefined;
            /**
                * <p>Specify if you want only a redacted transcript, or if you want a redacted and an unredacted
                *             transcript.</p>
                *         <p>When you choose <code>redacted</code> Amazon Transcribe creates only a redacted
                *             transcript.</p>
                *         <p>When you choose <code>redacted_and_unredacted</code> Amazon Transcribe creates
                *             a redacted and an unredacted transcript (as two separate files).</p>
                */
            RedactionOutput: RedactionOutput | string | undefined;
            /**
                * <p>Specify which types of personally identifiable information (PII) you want to redact in your
                *             transcript. You can include as many types as you'd like, or you can select
                *             <code>ALL</code>.</p>
                */
            PiiEntityTypes?: (PiiEntityType | string)[];
    }
    export namespace ContentRedaction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContentRedaction) => any;
    }
    /**
        * <p>If using automatic language identification (<code>IdentifyLanguage</code>) in your request
        *             and you want to apply a custom language model, a custom vocabulary, or a custom vocabulary
        *             filter, include <code>LanguageIdSettings</code> with the relevant sub-parameters
        *             (<code>VocabularyName</code>, <code>LanguageModelName</code>, and
        *             <code>VocabularyFilterName</code>).</p>
        *         <p>You can specify two or more language codes that represent the languages you think may be
        *             present in your media; including more than five is not recommended. Each language code you
        *             include can have an associated custom language model, custom vocabulary, and custom
        *             vocabulary filter. The languages you specify must match the languages of the specified custom
        *             language models, custom vocabularies, and custom vocabulary filters.</p>
        *         <p>To include language options using <code>IdentifyLanguage</code>
        *             <b>without</b> including a custom language model, a custom
        *             vocabulary, or a custom vocabulary filter, use <code>LanguageOptions</code> instead of
        *             <code>LanguageIdSettings</code>. Including language options can improve the accuracy of
        *             automatic language identification.</p>
        *         <p>If you want to include a custom language model with your request but
        *             <b>do not</b> want to use automatic language identification,
        *             use instead the <code></code> parameter with the
        *             <code>LanguageModelName</code> sub-parameter.</p>
        *         <p>If you want to include a custom vocabulary or a custom vocabulary filter (or both) with
        *             your request but <b>do not</b> want to use automatic
        *             language identification, use instead the <code></code>
        *             parameter with the <code>VocabularyName</code> or
        *             <code>VocabularyFilterName</code> (or both) sub-parameter.</p>
        */
    export interface LanguageIdSettings {
            /**
                * <p>The name of the custom vocabulary you want to use when processing your transcription job.
                *             Vocabulary names are case sensitive.</p>
                *         <p>The language of the specified vocabulary must match the language code you specify in
                *             your transcription request. If the languages don't match, the vocabulary isn't applied. There
                *             are no errors or warnings associated with a language mismatch.</p>
                */
            VocabularyName?: string;
            /**
                * <p>The name of the custom vocabulary filter you want to use when processing your
                *             transcription job. Vocabulary filter names are case sensitive.</p>
                *         <p>The language of the specified vocabulary filter must match the language code you specify
                *             in your transcription request. If the languages don't match, the vocabulary filter isn't applied.
                *             There are no errors or warnings associated with a language mismatch.</p>
                *         <p>Note that if you include <code>VocabularyFilterName</code> in your request, you must
                *             also include <code>VocabularyFilterMethod</code>.</p>
                */
            VocabularyFilterName?: string;
            /**
                * <p>The name of the custom language model you want to use when processing your
                *             transcription job. Note that language model names are case sensitive.</p>
                *         <p>The language of the specified language model must match the language code you specify
                *             in your transcription request. If the languages don't match, the language model isn't applied.
                *             There are no errors or warnings associated with a language mismatch.</p>
                */
            LanguageModelName?: string;
    }
    export namespace LanguageIdSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LanguageIdSettings) => any;
    }
    export enum VocabularyFilterMethod {
            MASK = "mask",
            REMOVE = "remove",
            TAG = "tag"
    }
    /**
        * <p>Provides additional optional settings for your
        *             request, including content redaction, automatic language identification; allows you to apply
        *             custom language models, vocabulary filters, and custom vocabularies.</p>
        */
    export interface CallAnalyticsJobSettings {
            /**
                * <p>The name of the custom vocabulary you want to include in your Call Analytics
                *             transcription request. Vocabulary names are case sensitive.</p>
                */
            VocabularyName?: string;
            /**
                * <p>The name of the custom vocabulary filter you want to include in your Call Analytics
                *             transcription request. Vocabulary filter names are case sensitive.</p>
                *         <p>Note that if you include <code>VocabularyFilterName</code> in your request, you must
                *             also include <code>VocabularyFilterMethod</code>.</p>
                */
            VocabularyFilterName?: string;
            /**
                * <p>Specify how you want your vocabulary filter applied to your transcript.</p>
                *         <p>To replace words with <code>***</code>, choose <code>mask</code>.</p>
                *         <p>To delete words, choose <code>remove</code>.</p>
                *         <p>To flag words without changing them, choose <code>tag</code>.</p>
                */
            VocabularyFilterMethod?: VocabularyFilterMethod | string;
            /**
                * <p>The name of the custom language model you want to use when processing your
                *             Call Analytics job. Note that language model names are case sensitive.</p>
                *         <p>The language of the specified language model must match the language code you specify
                *             in your transcription request. If the languages don't match, the language model isn't applied.
                *             There are no errors or warnings associated with a language mismatch.</p>
                */
            LanguageModelName?: string;
            /**
                * <p>Allows you to redact or flag specified personally identifiable information (PII) in your transcript. If
                *             you use <code>ContentRedaction</code>, you must also include the sub-parameters:
                *             <code>PiiEntityTypes</code>, <code>RedactionOutput</code>, and
                *             <code>RedactionType</code>.</p>
                */
            ContentRedaction?: ContentRedaction;
            /**
                * <p>You can specify two or more language codes that represent the languages you think may
                *             be present in your media; including more than five is not recommended. If you're unsure what
                *             languages are present, do not include this parameter.</p>
                *         <p>Including language options can improve the accuracy of language identification.</p>
                *         <p>For a list of languages supported with Call Analytics, refer to the <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a> table.</p>
                */
            LanguageOptions?: (LanguageCode | string)[];
            /**
                * <p>If using automatic language identification (<code>IdentifyLanguage</code>) in your request
                *             and you want to apply a custom language model, a custom vocabulary, or a custom vocabulary
                *             filter, include <code>LanguageIdSettings</code> with the relevant sub-parameters
                *             (<code>VocabularyName</code>, <code>LanguageModelName</code>, and
                *             <code>VocabularyFilterName</code>).</p>
                *         <p>You can specify two or more language codes that represent the languages you think may
                *             be present in your media; including more than five is not recommended. Each language code you
                *             include can have an associated custom language model, custom vocabulary, and custom
                *             vocabulary filter. The languages you specify must match the languages of the specified custom
                *             language models, custom vocabularies, and custom vocabulary filters.</p>
                *         <p>To include language options using <code>IdentifyLanguage</code>
                *             <b>without</b> including a custom language model, a custom
                *             vocabulary, or a custom vocabulary filter, use <code>LanguageOptions</code> instead of
                *             <code>LanguageIdSettings</code>. Including language options can improve the accuracy of
                *             automatic language identification.</p>
                *         <p>If you want to include a custom language model with your request but
                *             <b>do not</b> want to use automatic language identification,
                *             use instead the <code></code> parameter with the
                *             <code>LanguageModelName</code> sub-parameter.</p>
                *         <p>If you want to include a custom vocabulary or a custom vocabulary filter (or both) with
                *             your request but <b>do not</b> want to use automatic
                *             language identification, use instead the <code></code>
                *             parameter with the <code>VocabularyName</code> or
                *             <code>VocabularyFilterName</code> (or both) sub-parameter.</p>
                */
            LanguageIdSettings?: Record<string, LanguageIdSettings>;
    }
    export namespace CallAnalyticsJobSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CallAnalyticsJobSettings) => any;
    }
    /**
        * <p>Provides you with the Amazon S3 URI you can use to access your transcript.</p>
        */
    export interface Transcript {
            /**
                * <p>The Amazon S3 location of your transcript. You can use this URI to access or
                *             download your transcript.</p>
                *         <p>If you included <code>OutputBucketName</code> in your transcription job request, this is
                *             the URI of that bucket. If you also included <code>OutputKey</code> in your request, your
                *             output is located in the path you specified in your request.</p>
                *         <p>If you didn't include <code>OutputBucketName</code> in your transcription job request,
                *             your transcript is stored in a service-managed bucket, and <code>TranscriptFileUri</code>
                *             provides you with a temporary URI you can use for secure access to your transcript.</p>
                *         <note>
                *             <p>Temporary URIs for service-managed Amazon S3 buckets are only valid for 15
                *                 minutes. If you get an <code>AccesDenied</code> error, you can get a new temporary
                *                 URI by running a <code>GetTranscriptionJob</code> or
                *                 <code>ListTranscriptionJob</code> request.</p>
                *         </note>
                */
            TranscriptFileUri?: string;
            /**
                * <p>The Amazon S3 location of your redacted transcript. You can use this URI to access
                *             or download your transcript.</p>
                *         <p>If you included <code>OutputBucketName</code> in your transcription job request, this is
                *             the URI of that bucket. If you also included <code>OutputKey</code> in your request, your
                *             output is located in the path you specified in your request.</p>
                *         <p>If you didn't include <code>OutputBucketName</code> in your transcription job request,
                *             your transcript is stored in a service-managed bucket, and
                *             <code>RedactedTranscriptFileUri</code> provides you with a temporary URI you can use for
                *             secure access to your transcript.</p>
                *         <note>
                *             <p>Temporary URIs for service-managed Amazon S3 buckets are only valid for 15
                *                 minutes. If you get an <code>AccesDenied</code> error, you can get a new temporary
                *                 URI by running a <code>GetTranscriptionJob</code> or
                *                 <code>ListTranscriptionJob</code> request.</p>
                *         </note>
                */
            RedactedTranscriptFileUri?: string;
    }
    export namespace Transcript {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Transcript) => any;
    }
    /**
        * <p>Provides detailed information about a Call Analytics job.</p>
        *         <p>To view the job's status, refer to <code>CallAnalyticsJobStatus</code>. If the status is
        *             <code>COMPLETED</code>, the job is finished. You can find your completed transcript at
        *             the URI specified in <code>TranscriptFileUri</code>. If the status is <code>FAILED</code>,
        *             <code>FailureReason</code> provides details on why your transcription job failed.</p>
        *         <p>If you enabled personally identifiable information (PII) redaction, the redacted transcript
        *             appears at the location specified in <code>RedactedTranscriptFileUri</code>.</p>
        *         <p>If you chose to redact the audio in your media file, you can find your redacted media file
        *             at the location specified in the <code>RedactedMediaFileUri</code> field of your
        *             response.</p>
        */
    export interface CallAnalyticsJob {
            /**
                * <p>The name of the Call Analytics job. Job names are case sensitive and must be unique
                *             within an Amazon Web Services account.</p>
                */
            CallAnalyticsJobName?: string;
            /**
                * <p>Provides the status of the specified Call Analytics job.</p>
                *         <p>If the status is <code>COMPLETED</code>, the job is finished and you can find the results
                *             at the location specified in <code>TranscriptFileUri</code> (or
                *             <code>RedactedTranscriptFileUri</code>, if you requested transcript redaction). If the status is
                *             <code>FAILED</code>, <code>FailureReason</code> provides details on why your transcription
                *             job failed.</p>
                */
            CallAnalyticsJobStatus?: CallAnalyticsJobStatus | string;
            /**
                * <p>The language code used to create your Call Analytics job. For a list of supported languages
                *             and their associated language codes, refer to the
                *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported
                *                 languages</a> table.</p>
                *         <p>If you don't know the language spoken in your media file, you can omit this field and let
                *             Amazon Transcribe automatically identify the language of your media. To improve the accuracy
                *             of language identification, you can include several language codes and Amazon Transcribe
                *             chooses the closest match for your transcription.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The sample rate, in Hertz, of the audio track in your input media file.</p>
                */
            MediaSampleRateHertz?: number;
            /**
                * <p>The format of the input media file.</p>
                */
            MediaFormat?: MediaFormat | string;
            /**
                * <p>Describes the Amazon S3 location of the media file you want to use in your
                *             request.</p>
                */
            Media?: Media;
            /**
                * <p>Provides you with the Amazon S3 URI you can use to access your transcript.</p>
                */
            Transcript?: Transcript;
            /**
                * <p>The date and time the specified Call Analytics job began processing.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.789000-07:00</code> represents a transcription job
                *             that started processing at 12:32 PM UTC-7 on May 4, 2022.</p>
                */
            StartTime?: Date;
            /**
                * <p>The date and time the specified Call Analytics job request was made.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.761000-07:00</code> represents a transcription job
                *             that started processing at 12:32 PM UTC-7 on May 4, 2022.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The date and time the specified Call Analytics job finished processing.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:33:13.922000-07:00</code> represents a transcription job
                *             that started processing at 12:33 PM UTC-7 on May 4, 2022.</p>
                */
            CompletionTime?: Date;
            /**
                * <p>If <code>CallAnalyticsJobStatus</code> is <code>FAILED</code>,
                *             <code>FailureReason</code> contains information about why the Call Analytics job request
                *             failed.</p>
                *         <p>The <code>FailureReason</code> field contains one of the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>Unsupported media format</code>.</p>
                *                 <p>The media format specified in <code>MediaFormat</code> isn't valid. Refer to
                *                     <b>MediaFormat</b> for a list of supported formats.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>The media format provided does not match the detected media
                *                     format</code>.</p>
                *                 <p>The media format specified in <code>MediaFormat</code> doesn't match the
                *                     format of the input file. Check the media format of your media file and correct the
                *                     specified value.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Invalid sample rate for audio file</code>.</p>
                *                 <p>The sample rate specified in <code>MediaSampleRateHertz</code> isn't valid.
                *                     The sample rate must be between 8,000 and 48,000 Hertz.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>The sample rate provided does not match the detected sample
                *                     rate</code>.</p>
                *                 <p>The sample rate specified in <code>MediaSampleRateHertz</code> doesn't
                *                     match the sample rate detected in your input media file. Check the sample rate of
                *                     your media file and correct the specified value.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Invalid file size: file size too large</code>.</p>
                *                 <p>The size of your media file is larger than what Amazon Transcribe can process.
                *                     For more information, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/limits-guidelines.html#limits">Guidelines and
                *                         quotas</a>.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Invalid number of channels: number of channels too large</code>.</p>
                *                 <p>Your audio contains more channels than Amazon Transcribe is able to process.
                *                     For more information, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/limits-guidelines.html#limits">Guidelines and
                *                         quotas</a>.</p>
                *             </li>
                *          </ul>
                */
            FailureReason?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that has permissions to
                *             access the Amazon S3 bucket that contains your input files. If the role you specify doesn’t
                *             have the appropriate permissions to access the specified Amazon S3 location, your request
                *             fails.</p>
                *         <p>IAM role ARNs have the format
                *             <code>arn:partition:iam::account:role/role-name-with-path</code>. For example:
                *             <code>arn:aws:iam::111122223333:role/Admin</code>.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns">IAM ARNs</a>.</p>
                */
            DataAccessRoleArn?: string;
            /**
                * <p>The confidence score associated with the language identified in your media file.</p>
                *         <p>Confidence scores are values between 0 and 1; a larger value indicates a higher
                *             probability that the identified language correctly matches the language spoken in your
                *             media.</p>
                */
            IdentifiedLanguageScore?: number;
            /**
                * <p>Allows additional optional settings in your
                *             request, including content redaction; allows you to apply custom language models, vocabulary
                *             filters, and custom vocabularies to your Call Analytics job.</p>
                */
            Settings?: CallAnalyticsJobSettings;
            /**
                * <p>Allows you to specify which speaker is on which channel in your Call Analytics job request.
                *             For example, if your agent is the first participant to speak, you would set
                *             <code>ChannelId</code> to <code>0</code> (to indicate the first channel) and
                *             <code>ParticipantRole</code> to <code>AGENT</code> (to indicate that it's the agent
                *             speaking).</p>
                */
            ChannelDefinitions?: ChannelDefinition[];
    }
    export namespace CallAnalyticsJob {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CallAnalyticsJob) => any;
    }
    /**
        * <p>Provides detailed information about a specific Call Analytics job.</p>
        */
    export interface CallAnalyticsJobSummary {
            /**
                * <p>The name of the Call Analytics job. Job names are case sensitive and must be unique
                *             within an Amazon Web Services account.</p>
                */
            CallAnalyticsJobName?: string;
            /**
                * <p>The date and time the specified Call Analytics job request was made.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.761000-07:00</code> represents a transcription job
                *             that started processing at 12:32 PM UTC-7 on May 4, 2022.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The date and time your Call Analytics job began processing.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.789000-07:00</code> represents a transcription job
                *             that started processing at 12:32 PM UTC-7 on May 4, 2022.</p>
                */
            StartTime?: Date;
            /**
                * <p>The date and time the specified Call Analytics job finished processing.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:33:13.922000-07:00</code> represents a transcription job
                *             that started processing at 12:33 PM UTC-7 on May 4, 2022.</p>
                */
            CompletionTime?: Date;
            /**
                * <p>The language code used to create your Call Analytics transcription.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>Provides the status of your Call Analytics job.</p>
                *         <p>If the status is <code>COMPLETED</code>, the job is finished and you can find the results
                *             at the location specified in <code>TranscriptFileUri</code> (or
                *             <code>RedactedTranscriptFileUri</code>, if you requested transcript redaction). If the status is
                *             <code>FAILED</code>, <code>FailureReason</code> provides details on why your transcription
                *             job failed.</p>
                */
            CallAnalyticsJobStatus?: CallAnalyticsJobStatus | string;
            /**
                * <p>If <code>CallAnalyticsJobStatus</code> is <code>FAILED</code>,
                *             <code>FailureReason</code> contains information about why the Call Analytics job
                *             failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
                */
            FailureReason?: string;
    }
    export namespace CallAnalyticsJobSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CallAnalyticsJobSummary) => any;
    }
    /**
        * <p>A time range, in percentage, between two points in your media file.</p>
        *         <p>You can use <code>StartPercentage</code> and <code>EndPercentage</code> to
        *             search a custom segment. For example, setting <code>StartPercentage</code> to 10 and
        *             <code>EndPercentage</code> to 50 only searches for your specified criteria in the audio
        *             contained between the 10 percent mark and the 50 percent mark of your media file.</p>
        *         <p>You can use also <code>First</code> to search from the start of the media file until the
        *             time you specify, or <code>Last</code> to search from the time you specify until the end of
        *             the media file. For example, setting <code>First</code> to 10 only searches for your specified
        *             criteria in the audio contained in the first 10 percent of the media file.</p>
        *         <p>If you prefer to use milliseconds instead of percentage, see
        *             .</p>
        */
    export interface RelativeTimeRange {
            /**
                * <p>The time, in percentage, when Amazon Transcribe starts searching for the specified
                *             criteria in your media file. If you include <code>StartPercentage</code> in your request, you
                *             must also include <code>EndPercentage</code>.</p>
                */
            StartPercentage?: number;
            /**
                * <p>The time, in percentage, when Amazon Transcribe stops searching for the specified criteria
                *             in your media file. If you include <code>EndPercentage</code> in your request, you must also
                *             include <code>StartPercentage</code>.</p>
                */
            EndPercentage?: number;
            /**
                * <p>The time, in percentage, from the start of your media file until the value you specify in
                *             which Amazon Transcribe searches for your specified criteria.</p>
                */
            First?: number;
            /**
                * <p>The time, in percentage, from the value you specify until the end of your media file in
                *             which Amazon Transcribe searches for your specified criteria.</p>
                */
            Last?: number;
    }
    export namespace RelativeTimeRange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RelativeTimeRange) => any;
    }
    /**
        * <p>Flag the presence or absence of interruptions in your Call Analytics transcription output.</p>
        *         <p>Rules using <code>InterruptionFilter</code> are designed to match:</p>
        *         <ul>
        *             <li>
        *                 <p>Instances where an agent interrupts a customer</p>
        *             </li>
        *             <li>
        *                 <p>Instances where a customer interrupts an agent</p>
        *             </li>
        *             <li>
        *                 <p>Either participant interrupting the other</p>
        *             </li>
        *             <li>
        *                 <p>A lack of interruptions</p>
        *             </li>
        *          </ul>
        *                 <p>See <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics-create-categories.html#call-analytics-create-categories-rules">Rule
        *             criteria</a> for usage examples.</p>
        */
    export interface InterruptionFilter {
            /**
                * <p>Specify the duration of the interruptions in milliseconds. For example, you can flag speech that
                *             contains more than 10000 milliseconds of interruptions.</p>
                */
            Threshold?: number;
            /**
                * <p>Specify the interrupter you want to flag. Omitting this parameter is equivalent to specifying
                *             both participants.</p>
                */
            ParticipantRole?: ParticipantRole | string;
            /**
                * <p>Allows you to specify a time range (in milliseconds) in your audio, during which you want
                *             to search for an interruption. See  for more
                *             detail.</p>
                */
            AbsoluteTimeRange?: AbsoluteTimeRange;
            /**
                * <p>Allows you to specify a time range (in percentage) in your media file, during which you
                *             want to search for an interruption. See  for more
                *             detail.</p>
                */
            RelativeTimeRange?: RelativeTimeRange;
            /**
                * <p>Set to <code>TRUE</code> to flag speech that does not contain interruptions. Set to
                *             <code>FALSE</code> to flag speech that contains interruptions.</p>
                */
            Negate?: boolean;
    }
    export namespace InterruptionFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InterruptionFilter) => any;
    }
    /**
        * <p>Flag the presence or absence of periods of silence in your Call Analytics transcription
        *             output.</p>
        *         <p>Rules using <code>NonTalkTimeFilter</code> are designed to match:</p>
        *         <ul>
        *             <li>
        *                 <p>The presence of silence at specified periods throughout the call</p>
        *             </li>
        *             <li>
        *                 <p>The presence of speech at specified periods throughout the call</p>
        *             </li>
        *          </ul>
        *         <p>See <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics-create-categories.html#call-analytics-create-categories-rules">Rule
        *             criteria</a> for usage examples.</p>
        */
    export interface NonTalkTimeFilter {
            /**
                * <p>Specify the duration, in milliseconds, of the period of silence you want to flag. For
                *             example, you can flag a silent period that lasts 30000 milliseconds.</p>
                */
            Threshold?: number;
            /**
                * <p>Allows you to specify a time range (in milliseconds) in your audio, during which you want
                *             to search for a period of silence. See  for more
                *             detail.</p>
                */
            AbsoluteTimeRange?: AbsoluteTimeRange;
            /**
                * <p>Allows you to specify a time range (in percentage) in your media file, during which you
                *             want to search for a period of silence. See  for more
                *             detail.</p>
                */
            RelativeTimeRange?: RelativeTimeRange;
            /**
                * <p>Set to <code>TRUE</code> to flag periods of speech. Set to <code>FALSE</code> to flag
                *             periods of silence</p>
                */
            Negate?: boolean;
    }
    export namespace NonTalkTimeFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NonTalkTimeFilter) => any;
    }
    export enum SentimentValue {
            MIXED = "MIXED",
            NEGATIVE = "NEGATIVE",
            NEUTRAL = "NEUTRAL",
            POSITIVE = "POSITIVE"
    }
    /**
        * <p>Flag the presence or absence of specific sentiments detected in your Call Analytics
        *             transcription output.</p>
        *         <p>Rules using <code>SentimentFilter</code> are designed to match:</p>
        *         <ul>
        *             <li>
        *                 <p>The presence or absence of a positive sentiment felt by the customer, agent,
        *                     or both at specified points in the call</p>
        *             </li>
        *             <li>
        *                 <p>The presence or absence of a negative sentiment felt by the customer, agent,
        *                     or both at specified points in the call</p>
        *             </li>
        *             <li>
        *                 <p>The presence or absence of a neutral sentiment felt by the customer, agent, or
        *                     both at specified points in the call</p>
        *             </li>
        *             <li>
        *                 <p>The presence or absence of a mixed sentiment felt by the customer, the agent,
        *                     or both at specified points in the call</p>
        *             </li>
        *          </ul>
        *         <p>See <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics-create-categories.html#call-analytics-create-categories-rules">Rule
        *             criteria</a> for examples.</p>
        */
    export interface SentimentFilter {
            /**
                * <p>Specify the sentiments you want to flag.</p>
                */
            Sentiments: (SentimentValue | string)[] | undefined;
            /**
                * <p>Allows you to specify a time range (in milliseconds) in your audio, during which you want
                *             to search for the specified sentiments. See  for more
                *             detail.</p>
                */
            AbsoluteTimeRange?: AbsoluteTimeRange;
            /**
                * <p>Allows you to specify a time range (in percentage) in your media file, during which you
                *             want to search for the specified sentiments. See
                *             for more detail.</p>
                */
            RelativeTimeRange?: RelativeTimeRange;
            /**
                * <p>Specify the participant you want to flag. Omitting this parameter is equivalent to specifying
                *             both participants.</p>
                */
            ParticipantRole?: ParticipantRole | string;
            /**
                * <p>Set to <code>TRUE</code> to flag the sentiments you didn't include in your request. Set to
                *             <code>FALSE</code> to flag the sentiments you specified in your request.</p>
                */
            Negate?: boolean;
    }
    export namespace SentimentFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SentimentFilter) => any;
    }
    export enum TranscriptFilterType {
            EXACT = "EXACT"
    }
    /**
        * <p>Flag the presence or absence of specific words or phrases detected in your Call Analytics
        *             transcription output.</p>
        *         <p>Rules using <code>TranscriptFilter</code> are designed to match:</p>
        *         <ul>
        *             <li>
        *                 <p>Custom words or phrases spoken by the agent, the customer, or both</p>
        *             </li>
        *             <li>
        *                 <p>Custom words or phrases <b>not</b> spoken by the
        *                     agent, the customer, or either</p>
        *             </li>
        *             <li>
        *                 <p>Custom words or phrases that occur at a specific time frame</p>
        *             </li>
        *          </ul>
        *         <p>See <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics-create-categories.html#call-analytics-create-categories-rules">Rule
        *             criteria</a> for examples.</p>
        */
    export interface TranscriptFilter {
            /**
                * <p>Flag the presence or absence of an exact match to the phrases you specify. For example, if you
                *             specify the phrase "speak to a manager" as your <code>Targets</code> value, only that exact
                *             phrase is flagged.</p>
                *         <p>Note that semantic matching is not supported. For example, if your customer says "speak to
                *             <i>the</i> manager", instead of "speak to <i>a</i>
                *             manager", your content is not flagged.</p>
                */
            TranscriptFilterType: TranscriptFilterType | string | undefined;
            /**
                * <p>Allows you to specify a time range (in milliseconds) in your audio, during which you want to
                *             search for the specified key words or phrases. See
                *             for more detail.</p>
                */
            AbsoluteTimeRange?: AbsoluteTimeRange;
            /**
                * <p>Allows you to specify a time range (in percentage) in your media file, during which you
                *             want to search for the specified key words or phrases. See
                *              for more detail.</p>
                */
            RelativeTimeRange?: RelativeTimeRange;
            /**
                * <p>Specify the participant you want to flag. Omitting this parameter is equivalent to specifying
                *             both participants.</p>
                */
            ParticipantRole?: ParticipantRole | string;
            /**
                * <p>Set to <code>TRUE</code> to flag the absence of the phrase you specified in your request.
                *             Set to <code>FALSE</code> to flag the presence of the phrase you specified in your request.</p>
                */
            Negate?: boolean;
            /**
                * <p>Specify the phrases you want to flag.</p>
                */
            Targets: string[] | undefined;
    }
    export namespace TranscriptFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TranscriptFilter) => any;
    }
    /**
        * <p>A rule is a set of criteria you can specify to flag an attribute in your Call Analytics output.
        *             Rules define a Call Analytics category.</p>
        *         <p>Rules can include these parameters: ,
        *             , , and
        *             . To learn more about these parameters, refer to
        *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics-create-categories.html#call-analytics-create-categories-rules">Rule
        *                 criteria</a>.</p>
        *         <p>To learn more about Call Analytics categories, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics-create-categories.html">Creating categories</a>.</p>
        *         <p>To learn more about Call Analytics, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics.html">Analyzing call center audio with Call
        *             Analytics</a>.</p>
        */
    export type Rule = Rule.InterruptionFilterMember | Rule.NonTalkTimeFilterMember | Rule.SentimentFilterMember | Rule.TranscriptFilterMember | Rule.$UnknownMember;
    export namespace Rule {
            /**
                * <p>Flag the presence or absence of periods of silence in your Call Analytics transcription
                *             output. Refer to  for more detail.</p>
                */
            interface NonTalkTimeFilterMember {
                    NonTalkTimeFilter: NonTalkTimeFilter;
                    InterruptionFilter?: never;
                    TranscriptFilter?: never;
                    SentimentFilter?: never;
                    $unknown?: never;
            }
            /**
                * <p>Flag the presence or absence of interruptions in your Call Analytics transcription output. Refer to
                *              for more detail.</p>
                */
            interface InterruptionFilterMember {
                    NonTalkTimeFilter?: never;
                    InterruptionFilter: InterruptionFilter;
                    TranscriptFilter?: never;
                    SentimentFilter?: never;
                    $unknown?: never;
            }
            /**
                * <p>Flag the presence or absence of specific words or phrases in your Call Analytics transcription
                *             output. Refer to  for more detail.</p>
                */
            interface TranscriptFilterMember {
                    NonTalkTimeFilter?: never;
                    InterruptionFilter?: never;
                    TranscriptFilter: TranscriptFilter;
                    SentimentFilter?: never;
                    $unknown?: never;
            }
            /**
                * <p>Flag the presence or absence of specific sentiments in your Call Analytics transcription output.
                *             Refer to  for more detail.</p>
                */
            interface SentimentFilterMember {
                    NonTalkTimeFilter?: never;
                    InterruptionFilter?: never;
                    TranscriptFilter?: never;
                    SentimentFilter: SentimentFilter;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    NonTalkTimeFilter?: never;
                    InterruptionFilter?: never;
                    TranscriptFilter?: never;
                    SentimentFilter?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    NonTalkTimeFilter: (value: NonTalkTimeFilter) => T;
                    InterruptionFilter: (value: InterruptionFilter) => T;
                    TranscriptFilter: (value: TranscriptFilter) => T;
                    SentimentFilter: (value: SentimentFilter) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: Rule, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Rule) => any;
    }
    /**
        * <p>Provides you with the properties of the Call Analytics category you specified in your
        *             request. This includes the list of rules that define the specified category.</p>
        */
    export interface CategoryProperties {
            /**
                * <p>The name of the Call Analytics category. Category names are case sensitive and must be
                *             unique within an Amazon Web Services account.</p>
                */
            CategoryName?: string;
            /**
                * <p>The rules used to define a Call Analytics category. Each category can have between 1 and 20
                *             rules.</p>
                */
            Rules?: Rule[];
            /**
                * <p>The date and time the specified Call Analytics category was created.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7
                *             on May 4, 2022.</p>
                */
            CreateTime?: Date;
            /**
                * <p>The date and time the specified Call Analytics category was last updated.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-05T12:45:32.691000-07:00</code> represents 12:45 PM UTC-7
                *             on May 5, 2022.</p>
                */
            LastUpdateTime?: Date;
    }
    export namespace CategoryProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CategoryProperties) => any;
    }
    export enum CLMLanguageCode {
            EN_AU = "en-AU",
            EN_GB = "en-GB",
            EN_US = "en-US",
            ES_US = "es-US",
            HI_IN = "hi-IN"
    }
    /**
        * <p>A resource already exists with this name. Resource names must be unique within an
        *             Amazon Web Services account.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    export interface CreateCallAnalyticsCategoryRequest {
            /**
                * <p>A unique name, chosen by you, for your Call Analytics category. It's helpful to use a detailed
                *             naming system that will make sense to you in the future. For example, it's better to use
                *             <code>sentiment-positive-last30seconds</code> for a category over a generic name like
                *             <code>test-category</code>.</p>
                *         <p>Category names are case sensitive.</p>
                */
            CategoryName: string | undefined;
            /**
                * <p>Rules define a Call Analytics category. When creating a new Call Analytics category, you must
                *             create between 1 and 20 rules for that category. For each rule, you specify a filter you want
                *             applied to the attributes of a call. For example, you can choose a sentiment filter that detects if a
                *             customer's sentiment was positive during the last 30 seconds of the call.</p>
                */
            Rules: Rule[] | undefined;
    }
    export namespace CreateCallAnalyticsCategoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCallAnalyticsCategoryRequest) => any;
    }
    export interface CreateCallAnalyticsCategoryResponse {
            /**
                * <p>Provides you with the properties of your new category, including its associated rules.</p>
                */
            CategoryProperties?: CategoryProperties;
    }
    export namespace CreateCallAnalyticsCategoryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCallAnalyticsCategoryResponse) => any;
    }
    /**
        * <p>There was an internal error. Check the error message, correct the issue, and try your
        *             request again.</p>
        */
    export class InternalFailureException extends __BaseException {
            readonly name: "InternalFailureException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalFailureException, __BaseException>);
    }
    /**
        * <p>You've either sent too many requests or your input file is too long. Wait before retrying
        *             your request, or use a smaller file and try your request again.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>Contains the Amazon S3 location of the training data you want to use to create a new
        *             custom language model, and permissions to access this location.</p>
        *         <p>When using <code>InputDataConfig</code>, you must include these sub-parameters:
        *             <code>S3Uri</code> and <code>DataAccessRoleArn</code>. You can optionally include
        *             <code>TuningDataS3Uri</code>.</p>
        */
    export interface InputDataConfig {
            /**
                * <p>The Amazon S3 location (URI) of the text files you want to use to train your custom
                *             language model.</p>
                *         <p>Here's an example URI path:
                *             <code>s3://DOC-EXAMPLE-BUCKET/my-model-training-data/</code>
                *          </p>
                */
            S3Uri: string | undefined;
            /**
                * <p>The Amazon S3 location (URI) of the text files you want to use to tune your custom
                *             language model.</p>
                *         <p>Here's an example URI path:
                *             <code>s3://DOC-EXAMPLE-BUCKET/my-model-tuning-data/</code>
                *          </p>
                */
            TuningDataS3Uri?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that has permissions to
                *             access the Amazon S3 bucket that contains your input files. If the role you specify doesn’t
                *             have the appropriate permissions to access the specified Amazon S3 location, your request
                *             fails.</p>
                *         <p>IAM role ARNs have the format
                *             <code>arn:partition:iam::account:role/role-name-with-path</code>. For example:
                *             <code>arn:aws:iam::111122223333:role/Admin</code>.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns">IAM ARNs</a>.</p>
                */
            DataAccessRoleArn: string | undefined;
    }
    export namespace InputDataConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InputDataConfig) => any;
    }
    /**
        * <p>Adds metadata, in the form of a key:value pair, to the specified resource.</p>
        *         <p>For example, you could add the tag <code>Department:Sales</code> to a
        *             resource to indicate that it pertains to your organization's sales department. You can also use
        *             tags for tag-based access control.</p>
        *         <p>To learn more about tagging, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html">Tagging resources</a>.</p>
        */
    export interface Tag {
            /**
                * <p>The first part of a key:value pair that forms a tag associated with a given resource. For
                *             example, in the tag <code>Department:Sales</code>, the key is 'Department'.</p>
                */
            Key: string | undefined;
            /**
                * <p>The second part of a key:value pair that forms a tag associated with a given resource.
                *             For example, in the tag <code>Department:Sales</code>, the value is 'Sales'.</p>
                *         <p>Note that you can set the value of a tag to an empty string, but you can't set the value of a
                *             tag to null. Omitting the tag value is the same as using an empty string.</p>
                */
            Value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface CreateLanguageModelRequest {
            /**
                * <p>The language code that represents the language of your model. Each language model must
                *             contain terms in only one language, and the language you select for your model must match the
                *             language of your training and tuning data.</p>
                *         <p>For a list of supported languages and their associated language codes, refer to the
                *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported
                *                 languages</a> table. Note that U.S. English (<code>en-US</code>) is the only language
                *             supported with Amazon Transcribe Medical.</p>
                *         <p>A custom language model can only be used to transcribe files in the same language as the
                *             model. For example, if you create a language model using US English (<code>en-US</code>), you
                *             can only apply this model to files that contain English audio.</p>
                */
            LanguageCode: CLMLanguageCode | string | undefined;
            /**
                * <p>The Amazon Transcribe standard language model, or base model, used to create your custom
                *             language model. Amazon Transcribe offers two options for base models: Wideband and
                *             Narrowband.</p>
                *         <p>If the audio you want to transcribe has a sample rate of 16,000 Hz or greater, choose
                *             <code>WideBand</code>. To transcribe audio with a sample rate less than 16,000 Hz, choose
                *             <code>NarrowBand</code>.</p>
                */
            BaseModelName: BaseModelName | string | undefined;
            /**
                * <p>A unique name, chosen by you, for your custom language model.</p>
                *         <p>This name is case sensitive, cannot contain spaces, and must be unique within an
                *             Amazon Web Services account. If you try to create a new language model with the same name
                *             as an existing language model, you get a <code>ConflictException</code> error.</p>
                */
            ModelName: string | undefined;
            /**
                * <p>Contains the Amazon S3 location of the training data you want to use to create a new
                *             custom language model, and permissions to access this location.</p>
                *         <p>When using <code>InputDataConfig</code>, you must include these sub-parameters:
                *             <code>S3Uri</code>, which is the Amazon S3 location of your training data, and
                *             <code>DataAccessRoleArn</code>, which is the Amazon Resource Name (ARN) of the role that
                *             has permission to access your specified Amazon S3 location. You can optionally include
                *             <code>TuningDataS3Uri</code>, which is the Amazon S3 location of your tuning data. If
                *             you specify different Amazon S3 locations for training and tuning data, the ARN you use
                *             must have permissions to access both locations.</p>
                */
            InputDataConfig: InputDataConfig | undefined;
            /**
                * <p>Adds one or more custom tags, each in the form of a key:value pair, to a new custom language
                *             model at the time you create this new model.</p>
                *         <p>To learn more about using tags with Amazon Transcribe, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html">Tagging resources</a>.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateLanguageModelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLanguageModelRequest) => any;
    }
    export enum ModelStatus {
            COMPLETED = "COMPLETED",
            FAILED = "FAILED",
            IN_PROGRESS = "IN_PROGRESS"
    }
    export interface CreateLanguageModelResponse {
            /**
                * <p>The language code you selected for your custom language model.</p>
                */
            LanguageCode?: CLMLanguageCode | string;
            /**
                * <p>The Amazon Transcribe standard language model, or base model, you specified when creating
                *             your custom language model.</p>
                */
            BaseModelName?: BaseModelName | string;
            /**
                * <p>The name of your custom language model.</p>
                */
            ModelName?: string;
            /**
                * <p>Lists your data access role ARN (Amazon Resource Name) and the Amazon S3
                *             locations you provided for your training (<code>S3Uri</code>) and tuning
                *             (<code>TuningDataS3Uri</code>) data.</p>
                */
            InputDataConfig?: InputDataConfig;
            /**
                * <p>The status of your custom language model. When the status displays as
                *             <code>COMPLETED</code>, your model is ready to use.</p>
                */
            ModelStatus?: ModelStatus | string;
    }
    export namespace CreateLanguageModelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLanguageModelResponse) => any;
    }
    export interface CreateMedicalVocabularyRequest {
            /**
                * <p>A unique name, chosen by you, for your new custom medical vocabulary.</p>
                *         <p>This name is case sensitive, cannot contain spaces, and must be unique within an
                *             Amazon Web Services account. If you try to create a new medical vocabulary with the same name
                *             as an existing medical vocabulary, you get a <code>ConflictException</code> error.</p>
                */
            VocabularyName: string | undefined;
            /**
                * <p>The language code that represents the language of the entries in your custom
                *             vocabulary. US English (<code>en-US</code>) is the only language supported with
                *             Amazon Transcribe Medical.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
            /**
                * <p>The Amazon S3 location (URI) of the text file that contains your custom medical
                *             vocabulary. The URI must be in the same Amazon Web Services Region as the resource you're
                *             calling.</p>
                *         <p>Here's an example URI path:
                *             <code>s3://DOC-EXAMPLE-BUCKET/my-vocab-file.txt</code>
                *          </p>
                */
            VocabularyFileUri: string | undefined;
            /**
                * <p>Adds one or more custom tags, each in the form of a key:value pair, to a new medical
                *             vocabulary at the time you create this new vocabulary.</p>
                *         <p>To learn more about using tags with Amazon Transcribe, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html">Tagging resources</a>.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateMedicalVocabularyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateMedicalVocabularyRequest) => any;
    }
    export enum VocabularyState {
            FAILED = "FAILED",
            PENDING = "PENDING",
            READY = "READY"
    }
    export interface CreateMedicalVocabularyResponse {
            /**
                * <p>The name you chose for your custom medical vocabulary.</p>
                */
            VocabularyName?: string;
            /**
                * <p>The language code you selected for your medical vocabulary. US English
                *             (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The processing state of your custom medical vocabulary. If the state is
                *             <code>READY</code>, you can use the vocabulary in a
                *             <code>StartMedicalTranscriptionJob</code> request.</p>
                */
            VocabularyState?: VocabularyState | string;
            /**
                * <p>The date and time you created your custom medical vocabulary.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7
                *             on May 4, 2022.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>If <code>VocabularyState</code> is <code>FAILED</code>,
                *             <code>FailureReason</code> contains information about why the medical transcription job
                *             request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
                */
            FailureReason?: string;
    }
    export namespace CreateMedicalVocabularyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateMedicalVocabularyResponse) => any;
    }
    export interface CreateVocabularyRequest {
            /**
                * <p>A unique name, chosen by you, for your new custom vocabulary.</p>
                *         <p>This name is case sensitive, cannot contain spaces, and must be unique within an
                *             Amazon Web Services account. If you try to create a new vocabulary with the same name as an
                *             existing vocabulary, you get a <code>ConflictException</code> error.</p>
                */
            VocabularyName: string | undefined;
            /**
                * <p>The language code that represents the language of the entries in your custom
                *             vocabulary. Each vocabulary must contain terms in only one language.</p>
                *         <p>A custom vocabulary can only be used to transcribe files in the same language as the
                *             vocabulary. For example, if you create a vocabulary using US English (<code>en-US</code>),
                *             you can only apply this vocabulary to files that contain English audio.</p>
                *         <p>For a list of supported languages and their associated language codes, refer to the
                *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported
                *                 languages</a> table.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
            /**
                * <p>Use this parameter if you want to create your vocabulary by including all desired terms, as
                *             comma-separated values, within your request. The other option for creating your vocabulary is to
                *             save your entries in a text file and upload them to an Amazon S3 bucket, then specify
                *             the location of your file using the <code>VocabularyFileUri</code> parameter.</p>
                *         <p>Note that if you include <code>Phrases</code> in your request, you cannot use
                *             <code>VocabularyFileUri</code>; you must choose one or the other.</p>
                *         <p>Each language has a character set that contains all allowed characters for that specific
                *             language. If you use unsupported characters, your vocabulary filter request fails. Refer to
                *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/charsets.html">Character Sets for
                *                 Custom Vocabularies</a> to get the character set for your language.</p>
                */
            Phrases?: string[];
            /**
                * <p>The Amazon S3 location of the text file that contains your custom vocabulary. The
                *             URI must be located in the same Amazon Web Services Region as the resource you're
                *             calling.</p>
                *         <p>Here's an example URI path:
                *             <code>s3://DOC-EXAMPLE-BUCKET/my-vocab-file.txt</code>
                *          </p>
                *         <p>Note that if you include <code>VocabularyFileUri</code> in your request, you
                *             cannot use the <code>Phrases</code> flag; you must choose one or the other.</p>
                */
            VocabularyFileUri?: string;
            /**
                * <p>Adds one or more custom tags, each in the form of a key:value pair, to a new custom
                *             vocabulary at the time you create this new vocabulary.</p>
                *         <p>To learn more about using tags with Amazon Transcribe, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html">Tagging resources</a>.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateVocabularyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateVocabularyRequest) => any;
    }
    export interface CreateVocabularyResponse {
            /**
                * <p>The name you chose for your custom vocabulary.</p>
                */
            VocabularyName?: string;
            /**
                * <p>The language code you selected for your custom vocabulary.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The processing state of your custom vocabulary. If the state is <code>READY</code>, you
                *             can use the vocabulary in a <code>StartTranscriptionJob</code> request.</p>
                */
            VocabularyState?: VocabularyState | string;
            /**
                * <p>The date and time you created your custom vocabulary.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7
                *             on May 4, 2022.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>If <code>VocabularyState</code> is <code>FAILED</code>,
                *             <code>FailureReason</code> contains information about why the vocabulary request
                *             failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
                */
            FailureReason?: string;
    }
    export namespace CreateVocabularyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateVocabularyResponse) => any;
    }
    export interface CreateVocabularyFilterRequest {
            /**
                * <p>A unique name, chosen by you, for your new custom vocabulary filter.</p>
                *         <p>This name is case sensitive, cannot contain spaces, and must be unique within an
                *             Amazon Web Services account. If you try to create a new vocabulary filter with the same name
                *             as an existing vocabulary filter, you get a <code>ConflictException</code> error.</p>
                */
            VocabularyFilterName: string | undefined;
            /**
                * <p>The language code that represents the language of the entries in your vocabulary
                *             filter. Each vocabulary filter must contain terms in only one language.</p>
                *         <p>A vocabulary filter can only be used to transcribe files in the same language as the
                *             filter. For example, if you create a vocabulary filter using US English (<code>en-US</code>), you
                *             can only apply this filter to files that contain English audio.</p>
                *         <p>For a list of supported languages and their associated language codes, refer to the
                *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported
                *                 languages</a> table.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
            /**
                * <p>Use this parameter if you want to create your vocabulary filter by including all desired terms,
                *             as comma-separated values, within your request. The other option for creating your vocabulary
                *             filter is to save your entries in a text file and upload them to an Amazon S3 bucket, then
                *             specify the location of your file using the <code>VocabularyFilterFileUri</code>
                *             parameter.</p>
                *         <p>Note that if you include <code>Words</code> in your request, you cannot use
                *             <code>VocabularyFilterFileUri</code>; you must choose one or the other.</p>
                *         <p>Each language has a character set that contains all allowed characters for that specific
                *             language. If you use unsupported characters, your vocabulary filter request fails. Refer to
                *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/charsets.html">Character Sets for
                *                 Custom Vocabularies</a> to get the character set for your language.</p>
                */
            Words?: string[];
            /**
                * <p>The Amazon S3 location of the text file that contains your custom vocabulary filter
                *             terms. The URI must be located in the same Amazon Web Services Region as the resource you're
                *             calling.</p>
                *         <p>Here's an example URI path:
                *             <code>s3://DOC-EXAMPLE-BUCKET/my-vocab-filter-file.txt</code>
                *          </p>
                *         <p>Note that if you include <code>VocabularyFilterFileUri</code> in your request, you
                *             cannot use <code>Words</code>; you must choose one or the other.</p>
                */
            VocabularyFilterFileUri?: string;
            /**
                * <p>Adds one or more custom tags, each in the form of a key:value pair, to a new custom
                *             vocabulary filter at the time you create this new filter.</p>
                *         <p>To learn more about using tags with Amazon Transcribe, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html">Tagging resources</a>.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateVocabularyFilterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateVocabularyFilterRequest) => any;
    }
    export interface CreateVocabularyFilterResponse {
            /**
                * <p>The name you chose for your custom vocabulary filter.</p>
                */
            VocabularyFilterName?: string;
            /**
                * <p>The language code you selected for your vocabulary filter.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The date and time you created your vocabulary filter.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7
                *             on May 4, 2022.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace CreateVocabularyFilterResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateVocabularyFilterResponse) => any;
    }
    export interface DeleteCallAnalyticsCategoryRequest {
            /**
                * <p>The name of the Call Analytics category you want to delete. Category names are
                *             case sensitive.</p>
                */
            CategoryName: string | undefined;
    }
    export namespace DeleteCallAnalyticsCategoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCallAnalyticsCategoryRequest) => any;
    }
    export interface DeleteCallAnalyticsCategoryResponse {
    }
    export namespace DeleteCallAnalyticsCategoryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCallAnalyticsCategoryResponse) => any;
    }
    /**
        * <p>We can't find the requested resource. Check that the specified name is correct and try your
        *             request again.</p>
        */
    export class NotFoundException extends __BaseException {
            readonly name: "NotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
    }
    export interface DeleteCallAnalyticsJobRequest {
            /**
                * <p>The name of the Call Analytics job you want to delete. Job names are case sensitive.</p>
                */
            CallAnalyticsJobName: string | undefined;
    }
    export namespace DeleteCallAnalyticsJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCallAnalyticsJobRequest) => any;
    }
    export interface DeleteCallAnalyticsJobResponse {
    }
    export namespace DeleteCallAnalyticsJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCallAnalyticsJobResponse) => any;
    }
    export interface DeleteLanguageModelRequest {
            /**
                * <p>The name of the custom language model you want to delete. Model names are
                *             case sensitive.</p>
                */
            ModelName: string | undefined;
    }
    export namespace DeleteLanguageModelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLanguageModelRequest) => any;
    }
    export interface DeleteMedicalTranscriptionJobRequest {
            /**
                * <p>The name of the medical transcription job you want to delete. Job names are case
                *             sensitive.</p>
                */
            MedicalTranscriptionJobName: string | undefined;
    }
    export namespace DeleteMedicalTranscriptionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteMedicalTranscriptionJobRequest) => any;
    }
    export interface DeleteMedicalVocabularyRequest {
            /**
                * <p>The name of the custom medical vocabulary you want to delete. Vocabulary names are
                *             case sensitive.</p>
                */
            VocabularyName: string | undefined;
    }
    export namespace DeleteMedicalVocabularyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteMedicalVocabularyRequest) => any;
    }
    export interface DeleteTranscriptionJobRequest {
            /**
                * <p>The name of the transcription job you want to delete. Job names are case sensitive.</p>
                */
            TranscriptionJobName: string | undefined;
    }
    export namespace DeleteTranscriptionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTranscriptionJobRequest) => any;
    }
    export interface DeleteVocabularyRequest {
            /**
                * <p>The name of the custom vocabulary you want to delete. Vocabulary names are
                *             case sensitive.</p>
                */
            VocabularyName: string | undefined;
    }
    export namespace DeleteVocabularyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteVocabularyRequest) => any;
    }
    export interface DeleteVocabularyFilterRequest {
            /**
                * <p>The name of the custom vocabulary filter you want to delete. Vocabulary filter names
                *             are case sensitive.</p>
                */
            VocabularyFilterName: string | undefined;
    }
    export namespace DeleteVocabularyFilterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteVocabularyFilterRequest) => any;
    }
    export interface DescribeLanguageModelRequest {
            /**
                * <p>The name of the custom language model you want information about. Model names are
                *             case sensitive.</p>
                */
            ModelName: string | undefined;
    }
    export namespace DescribeLanguageModelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLanguageModelRequest) => any;
    }
    /**
        * <p>Provides information about a custom language model, including the base model name, when
        *             the model was created, the location of the files used to train the model, when the model was last
        *             modified, the name you chose for the model, its language, its processing state, and if there is an
        *             upgrade available for the base model.</p>
        */
    export interface LanguageModel {
            /**
                * <p>A unique name, chosen by you, for your custom language model.</p>
                *         <p>This name is case sensitive, cannot contain spaces, and must be unique within an
                *             Amazon Web Services account.</p>
                */
            ModelName?: string;
            /**
                * <p>The date and time the specified custom language model was created.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7
                *             on May 4, 2022.</p>
                */
            CreateTime?: Date;
            /**
                * <p>The date and time the specified language model was last modified.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7
                *             on May 4, 2022.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The language code used to create your custom language model. Each language model must
                *             contain terms in only one language, and the language you select for your model must match
                *             the language of your training and tuning data.</p>
                *         <p>For a list of supported languages and their associated language codes, refer to the
                *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported
                *                 languages</a> table. Note that U.S. English (<code>en-US</code>) is the only language
                *             supported with Amazon Transcribe Medical.</p>
                */
            LanguageCode?: CLMLanguageCode | string;
            /**
                * <p>The Amazon Transcribe standard language model, or base model, used to create your custom
                *             language model.</p>
                */
            BaseModelName?: BaseModelName | string;
            /**
                * <p>The status of the specified custom language model. When the status displays as
                *             <code>COMPLETED</code> the model is ready for use.</p>
                */
            ModelStatus?: ModelStatus | string;
            /**
                * <p>Shows if a more current base model is available for use with the specified custom language
                *             model.</p>
                *         <p>If <code>false</code>, your language model is using the most up-to-date base model.</p>
                *         <p>If <code>true</code>, there is a newer base model available than the one your language
                *             model is using.</p>
                *         <p>Note that to update a base model, you must recreate the custom language model using the
                *             new base model. Base model upgrades for existing custom language models are not
                *             supported.</p>
                */
            UpgradeAvailability?: boolean;
            /**
                * <p>If <code>ModelStatus</code> is <code>FAILED</code>, <code>FailureReason</code>
                *             contains information about why the custom language model request failed. See also:
                *             <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
                */
            FailureReason?: string;
            /**
                * <p>The Amazon S3 location of the input files used to train and tune your custom language
                *             model, in addition to the data access role ARN (Amazon Resource Name) that has permissions to
                *             access these data.</p>
                */
            InputDataConfig?: InputDataConfig;
    }
    export namespace LanguageModel {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LanguageModel) => any;
    }
    export interface DescribeLanguageModelResponse {
            /**
                * <p>Provides information about the specified custom language model.</p>
                *         <p>This parameter also shows if the base language model you used to create your custom
                *             language model has been updated. If Amazon Transcribe has updated the base model, you can
                *             create a new custom language model using the updated base model.</p>
                *         <p>If you tried to create a new custom language model and the request wasn't successful,
                *             you can use this <code>DescribeLanguageModel</code> to help identify the reason for this
                *             failure.</p>
                */
            LanguageModel?: LanguageModel;
    }
    export namespace DescribeLanguageModelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLanguageModelResponse) => any;
    }
    export interface GetCallAnalyticsCategoryRequest {
            /**
                * <p>The name of the Call Analytics category you want information about. Category names are
                *             case sensitive.</p>
                */
            CategoryName: string | undefined;
    }
    export namespace GetCallAnalyticsCategoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCallAnalyticsCategoryRequest) => any;
    }
    export interface GetCallAnalyticsCategoryResponse {
            /**
                * <p>Provides you with the properties of the Call Analytics category you specified in your
                *             <code>GetCallAnalyticsCategory</code> request.</p>
                */
            CategoryProperties?: CategoryProperties;
    }
    export namespace GetCallAnalyticsCategoryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCallAnalyticsCategoryResponse) => any;
    }
    export interface GetCallAnalyticsJobRequest {
            /**
                * <p>The name of the Call Analytics job you want information about. Job names are case
                *             sensitive.</p>
                */
            CallAnalyticsJobName: string | undefined;
    }
    export namespace GetCallAnalyticsJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCallAnalyticsJobRequest) => any;
    }
    export interface GetCallAnalyticsJobResponse {
            /**
                * <p>Provides detailed information about the specified Call Analytics job, including job status
                *             and, if applicable, failure reason.</p>
                */
            CallAnalyticsJob?: CallAnalyticsJob;
    }
    export namespace GetCallAnalyticsJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCallAnalyticsJobResponse) => any;
    }
    export interface GetMedicalTranscriptionJobRequest {
            /**
                * <p>The name of the medical transcription job you want information about. Job names are case
                *             sensitive.</p>
                */
            MedicalTranscriptionJobName: string | undefined;
    }
    export namespace GetMedicalTranscriptionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMedicalTranscriptionJobRequest) => any;
    }
    export enum MedicalContentIdentificationType {
            PHI = "PHI"
    }
    /**
        * <p>Allows additional optional settings in your
        *             request, including channel identification, alternative transcriptions, and speaker labeling; allows
        *             you to apply custom vocabularies to your medical transcription job.</p>
        */
    export interface MedicalTranscriptionSetting {
            /**
                * <p>Enables speaker identification (diarization) in your transcription output. Speaker identification
                *             labels the speech from individual speakers in your media file.</p>
                *         <p>If you enable <code>ShowSpeakerLabels</code> in your request, you must also include
                *             <code>MaxSpeakerLabels</code>.</p>
                *         <p>You can't include both <code>ShowSpeakerLabels</code> and
                *             <code>ChannelIdentification</code> in the same request. Including both parameters
                *             returns a <code>BadRequestException</code>.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/diarization.html">Identifying speakers (diarization)</a>.</p>
                */
            ShowSpeakerLabels?: boolean;
            /**
                * <p>Specify the maximum number of speakers you want to identify in your media.</p>
                *         <p>Note that if your media contains more speakers than the specified number, multiple speakers
                *             will be identified as a single speaker.</p>
                *         <p>If you specify the <code>MaxSpeakerLabels</code> field, you must set the
                *             <code>ShowSpeakerLabels</code> field to true.</p>
                */
            MaxSpeakerLabels?: number;
            /**
                * <p>Enables channel identification in multi-channel audio.</p>
                *         <p>Channel identification transcribes the audio on each channel independently, then appends the
                *             output for each channel into one transcript.</p>
                *         <p>If you have multi-channel audio and do not enable channel identification, your audio is
                *             transcribed in a continuous manner and your transcript does not separate the speech by channel.</p>
                *         <p>You can't include both <code>ShowSpeakerLabels</code> and
                *             <code>ChannelIdentification</code> in the same request. Including both parameters
                *             returns a <code>BadRequestException</code>.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/channel-id.html">Transcribing multi-channel audio</a>.</p>
                */
            ChannelIdentification?: boolean;
            /**
                * <p>To include alternative transcriptions within your transcription output, include
                *             <code>ShowAlternatives</code> in your transcription request.</p>
                *         <p>If you include <code>ShowAlternatives</code>, you must also include
                *             <code>MaxAlternatives</code>, which is the maximum number of alternative transcriptions
                *             you want Amazon Transcribe Medical to generate.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-alternatives.html">Alternative transcriptions</a>.</p>
                */
            ShowAlternatives?: boolean;
            /**
                * <p>Indicate the maximum number of alternative transcriptions you want Amazon Transcribe
                *             Medical to include in your transcript.</p>
                *         <p>If you select a number greater than the number of alternative transcriptions generated by
                *             Amazon Transcribe Medical, only the actual number of alternative transcriptions are
                *             included.</p>
                *         <p>If you include <code>MaxAlternatives</code> in your request, you must also include
                *             <code>ShowAlternatives</code> with a value of <code>true</code>.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-alternatives.html">Alternative transcriptions</a>.</p>
                */
            MaxAlternatives?: number;
            /**
                * <p>The name of the custom vocabulary you want to use when processing your medical
                *             transcription job. Vocabulary names are case sensitive.</p>
                *         <p>The language of the specified vocabulary must match the language code you specify in
                *             your transcription request. If the languages don't match, the vocabulary isn't applied. There
                *             are no errors or warnings associated with a language mismatch. US English
                *             (<code>en-US</code>) is the only valid language for Amazon Transcribe Medical.</p>
                */
            VocabularyName?: string;
    }
    export namespace MedicalTranscriptionSetting {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MedicalTranscriptionSetting) => any;
    }
    export enum Specialty {
            PRIMARYCARE = "PRIMARYCARE"
    }
    /**
        * <p>Provides you with the Amazon S3 URI you can use to access your transcript.</p>
        */
    export interface MedicalTranscript {
            /**
                * <p>The Amazon S3 location of your transcript. You can use this URI to access or
                *             download your transcript.</p>
                *         <p>If you included <code>OutputBucketName</code> in your transcription job request, this is
                *             the URI of that bucket. If you also included <code>OutputKey</code> in your request, your
                *             output is located in the path you specified in your request.</p>
                *         <p>If you didn't include <code>OutputBucketName</code> in your transcription job request,
                *             your transcript is stored in a service-managed bucket, and <code>TranscriptFileUri</code>
                *             provides you with a temporary URI you can use for secure access to your transcript.</p>
                *         <note>
                *             <p>Temporary URIs for service-managed Amazon S3 buckets are only valid for 15
                *                 minutes. If you get an <code>AccesDenied</code> error, you can get a new temporary
                *                 URI by running a <code>GetTranscriptionJob</code> or
                *                 <code>ListTranscriptionJob</code> request.</p>
                *         </note>
                */
            TranscriptFileUri?: string;
    }
    export namespace MedicalTranscript {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MedicalTranscript) => any;
    }
    export enum TranscriptionJobStatus {
            COMPLETED = "COMPLETED",
            FAILED = "FAILED",
            IN_PROGRESS = "IN_PROGRESS",
            QUEUED = "QUEUED"
    }
    export enum Type {
            CONVERSATION = "CONVERSATION",
            DICTATION = "DICTATION"
    }
    /**
        * <p>Provides detailed information about a medical transcription job.</p>
        *         <p>To view the status of the specified medical transcription job, check the
        *             <code>TranscriptionJobStatus</code> field. If the status is <code>COMPLETED</code>, the
        *             job is finished and you can find the results at the location specified in
        *             <code>TranscriptFileUri</code>. If the status is <code>FAILED</code>,
        *             <code>FailureReason</code> provides details on why your transcription job failed.</p>
        */
    export interface MedicalTranscriptionJob {
            /**
                * <p>The name of the medical transcription job. Job names are case sensitive and must be unique
                *             within an Amazon Web Services account.</p>
                */
            MedicalTranscriptionJobName?: string;
            /**
                * <p>Provides the status of the specified medical transcription job.</p>
                *         <p>If the status is <code>COMPLETED</code>, the job is finished and you can find the results
                *             at the location specified in <code>TranscriptFileUri</code>. If the status is
                *             <code>FAILED</code>, <code>FailureReason</code> provides details on why your transcription
                *             job failed.</p>
                */
            TranscriptionJobStatus?: TranscriptionJobStatus | string;
            /**
                * <p>The language code used to create your medical transcription job. US English
                *             (<code>en-US</code>) is the only supported language for medical transcriptions.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The sample rate, in Hertz, of the audio track in your input media file.</p>
                */
            MediaSampleRateHertz?: number;
            /**
                * <p>The format of the input media file.</p>
                */
            MediaFormat?: MediaFormat | string;
            /**
                * <p>Describes the Amazon S3 location of the media file you want to use in your
                *             request.</p>
                */
            Media?: Media;
            /**
                * <p>Provides you with the Amazon S3 URI you can use to access your transcript.</p>
                */
            Transcript?: MedicalTranscript;
            /**
                * <p>The date and time the specified medical transcription job began processing.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.789000-07:00</code> represents a transcription job
                *             that started processing at 12:32 PM UTC-7 on May 4, 2022.</p>
                */
            StartTime?: Date;
            /**
                * <p>The date and time the specified medical transcription job request was made.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.761000-07:00</code> represents a transcription job
                *             that started processing at 12:32 PM UTC-7 on May 4, 2022.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The date and time the specified medical transcription job finished processing.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:33:13.922000-07:00</code> represents a transcription job
                *             that started processing at 12:33 PM UTC-7 on May 4, 2022.</p>
                */
            CompletionTime?: Date;
            /**
                * <p>If <code>TranscriptionJobStatus</code> is <code>FAILED</code>,
                *             <code>FailureReason</code> contains information about why the transcription job request
                *             failed.</p>
                *         <p>The <code>FailureReason</code> field contains one of the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>Unsupported media format</code>.</p>
                *                 <p>The media format specified in <code>MediaFormat</code> isn't valid. Refer to
                *                     <b>MediaFormat</b> for a list of supported formats.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>The media format provided does not match the detected media
                *                     format</code>.</p>
                *                 <p>The media format specified in <code>MediaFormat</code> doesn't match the
                *                     format of the input file. Check the media format of your media file and correct the
                *                     specified value.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Invalid sample rate for audio file</code>.</p>
                *                 <p>The sample rate specified in <code>MediaSampleRateHertz</code> isn't valid.
                *                     The sample rate must be between 16,000 and 48,000 Hertz.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>The sample rate provided does not match the detected sample
                *                     rate</code>.</p>
                *                 <p>The sample rate specified in <code>MediaSampleRateHertz</code> doesn't
                *                     match the sample rate detected in your input media file. Check the sample rate of
                *                     your media file and correct the specified value.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Invalid file size: file size too large</code>.</p>
                *                 <p>The size of your media file is larger than what Amazon Transcribe can process.
                *                     For more information, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/limits-guidelines.html#limits">Guidelines and
                *                         quotas</a>.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Invalid number of channels: number of channels too large</code>.</p>
                *                 <p>Your audio contains more channels than Amazon Transcribe is able to process.
                *                     For more information, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/limits-guidelines.html#limits">Guidelines and
                *                         quotas</a>.</p>
                *             </li>
                *          </ul>
                */
            FailureReason?: string;
            /**
                * <p>Specify additional optional settings in your
                *             request, including channel identification, alternative transcriptions, and speaker labeling; allows
                *             you to apply custom vocabularies to your medical transcription job.</p>
                */
            Settings?: MedicalTranscriptionSetting;
            /**
                * <p>Labels all personal health information (PHI) identified in your transcript. For more information,
                *             see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/phi-id.html">Identifying personal health
                *                 information (PHI) in a transcription</a>.</p>
                */
            ContentIdentificationType?: MedicalContentIdentificationType | string;
            /**
                * <p>Describes the medical specialty represented in your media.</p>
                */
            Specialty?: Specialty | string;
            /**
                * <p>Indicates whether the input media is a dictation or a conversation, as specified in the
                *             <code>StartMedicalTranscriptionJob</code> request.</p>
                */
            Type?: Type | string;
            /**
                * <p>The tags, each in the form of a key:value pair, assigned to the specified medical
                *             transcription job.</p>
                */
            Tags?: Tag[];
    }
    export namespace MedicalTranscriptionJob {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MedicalTranscriptionJob) => any;
    }
    export interface GetMedicalTranscriptionJobResponse {
            /**
                * <p>Provides detailed information about the specified medical transcription job, including job
                *             status and, if applicable, failure reason.</p>
                */
            MedicalTranscriptionJob?: MedicalTranscriptionJob;
    }
    export namespace GetMedicalTranscriptionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMedicalTranscriptionJobResponse) => any;
    }
    export interface GetMedicalVocabularyRequest {
            /**
                * <p>The name of the custom medical vocabulary you want information about. Vocabulary names
                *             are case sensitive.</p>
                */
            VocabularyName: string | undefined;
    }
    export namespace GetMedicalVocabularyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMedicalVocabularyRequest) => any;
    }
    export interface GetMedicalVocabularyResponse {
            /**
                * <p>The name of the custom medical vocabulary you requested information about.</p>
                */
            VocabularyName?: string;
            /**
                * <p>The language code you selected for your medical vocabulary. US English
                *             (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The processing state of your custom medical vocabulary. If the state is
                *             <code>READY</code>, you can use the vocabulary in a
                *             <code>StartMedicalTranscriptionJob</code> request.</p>
                */
            VocabularyState?: VocabularyState | string;
            /**
                * <p>The date and time the specified custom medical vocabulary was last modified.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7
                *             on May 4, 2022.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>If <code>VocabularyState</code> is <code>FAILED</code>,
                *             <code>FailureReason</code> contains information about why the medical vocabulary
                *             request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
                */
            FailureReason?: string;
            /**
                * <p>The S3 location where the specified medical vocabulary is stored; use this URI to view or
                *             download the vocabulary.</p>
                */
            DownloadUri?: string;
    }
    export namespace GetMedicalVocabularyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMedicalVocabularyResponse) => any;
    }
    export interface GetTranscriptionJobRequest {
            /**
                * <p>The name of the transcription job you want information about. Job names are case
                *             sensitive.</p>
                */
            TranscriptionJobName: string | undefined;
    }
    export namespace GetTranscriptionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTranscriptionJobRequest) => any;
    }
    /**
        * <p>Allows you to control how your transcription job is processed. Currently, the only
        *             <code>JobExecutionSettings</code> modification you can choose is enabling job queueing using
        *             the <code>AllowDeferredExecution</code> sub-parameter.</p>
        *         <p>If you include <code>JobExecutionSettings</code> in your request, you must also include
        *             the sub-parameters: <code>AllowDeferredExecution</code> and
        *             <code>DataAccessRoleArn</code>.</p>
        */
    export interface JobExecutionSettings {
            /**
                * <p>Allows you to enable job queuing when your concurrent request limit is exceeded. When
                *             <code>AllowDeferredExecution</code> is set to <code>true</code>, transcription job requests are
                *             placed in a queue until the number of jobs falls below the concurrent request limit. If
                *             <code>AllowDeferredExecution</code> is set to <code>false</code> and the number of transcription
                *             job requests exceed the concurrent request limit, you get a <code>LimitExceededException</code>
                *             error.</p>
                *         <p>Note that job queuing is enabled by default for Call Analytics jobs.</p>
                *         <p>If you include <code>AllowDeferredExecution</code> in your request, you must also include
                *             <code>DataAccessRoleArn</code>.</p>
                */
            AllowDeferredExecution?: boolean;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that has permissions to
                *             access the Amazon S3 bucket that contains your input files. If the role you specify doesn’t
                *             have the appropriate permissions to access the specified Amazon S3 location, your request
                *             fails.</p>
                *         <p>IAM role ARNs have the format
                *             <code>arn:partition:iam::account:role/role-name-with-path</code>. For example:
                *             <code>arn:aws:iam::111122223333:role/Admin</code>. For more information, see
                *             <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns">IAM ARNs</a>.</p>
                *         <p>Note that if you include <code>DataAccessRoleArn</code> in your request, you must also include
                *             <code>AllowDeferredExecution</code>.</p>
                */
            DataAccessRoleArn?: string;
    }
    export namespace JobExecutionSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JobExecutionSettings) => any;
    }
    /**
        * <p>Provides information on the speech contained in a discreet utterance when
        *             multi-language identification is enabled in your request. This utterance represents a block
        *             of speech consisting of one language, preceded or followed by a block of speech in a different
        *             language.</p>
        */
    export interface LanguageCodeItem {
            /**
                * <p>Provides the language code for each language identified in your media.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>Provides the total time, in seconds, each identified language is spoken in your media.</p>
                */
            DurationInSeconds?: number;
    }
    export namespace LanguageCodeItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LanguageCodeItem) => any;
    }
    /**
        * <p>Provides the name of the custom language model that was included in the specified
        *             transcription job.</p>
        *         <p>Only use <code>ModelSettings</code> with the <code>LanguageModelName</code>
        *             sub-parameter if you're <b>not</b> using automatic language
        *             identification (<code></code>).
        *             If using <code>LanguageIdSettings</code> in your request, this parameter contains a
        *             <code>LanguageModelName</code> sub-parameter.</p>
        */
    export interface ModelSettings {
            /**
                * <p>The name of the custom language model you want to use when processing your
                *             transcription job. Note that language model names are case sensitive.</p>
                *         <p>The language of the specified language model must match the language code you specify
                *             in your transcription request. If the languages don't match, the language model isn't applied.
                *             There are no errors or warnings associated with a language mismatch.</p>
                */
            LanguageModelName?: string;
    }
    export namespace ModelSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelSettings) => any;
    }
    /**
        * <p>Allows additional optional settings in your
        *             request, including channel identification, alternative transcriptions, and speaker labeling; allows
        *             you to apply custom vocabularies to your transcription job.</p>
        */
    export interface Settings {
            /**
                * <p>The name of the custom vocabulary you want to use in your transcription job request. This
                *             name is case sensitive, cannot contain spaces, and must be unique within an
                *             Amazon Web Services account.</p>
                */
            VocabularyName?: string;
            /**
                * <p>Enables speaker identification (diarization) in your transcription output. Speaker identification
                *             labels the speech from individual speakers in your media file.</p>
                *         <p>If you enable <code>ShowSpeakerLabels</code> in your request, you must also include
                *             <code>MaxSpeakerLabels</code>.</p>
                *         <p>You can't include both <code>ShowSpeakerLabels</code> and
                *             <code>ChannelIdentification</code> in the same request. Including both parameters
                *             returns a <code>BadRequestException</code>.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/diarization.html">Identifying speakers (diarization)</a>.</p>
                */
            ShowSpeakerLabels?: boolean;
            /**
                * <p>Specify the maximum number of speakers you want to identify in your media.</p>
                *         <p>Note that if your media contains more speakers than the specified number, multiple speakers
                *             will be identified as a single speaker.</p>
                *         <p>If you specify the <code>MaxSpeakerLabels</code> field, you must set the
                *             <code>ShowSpeakerLabels</code> field to true.</p>
                */
            MaxSpeakerLabels?: number;
            /**
                * <p>Enables channel identification in multi-channel audio.</p>
                *         <p>Channel identification transcribes the audio on each channel independently, then appends the
                *             output for each channel into one transcript.</p>
                *         <p>You can't include both <code>ShowSpeakerLabels</code> and
                *             <code>ChannelIdentification</code> in the same request. Including both parameters
                *             returns a <code>BadRequestException</code>.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/channel-id.html">Transcribing multi-channel audio</a>.</p>
                */
            ChannelIdentification?: boolean;
            /**
                * <p>To include alternative transcriptions within your transcription output, include
                *             <code>ShowAlternatives</code> in your transcription request.</p>
                *         <p>If you have multi-channel audio and do not enable channel identification, your audio is
                *             transcribed in a continuous manner and your transcript does not separate the speech by channel.</p>
                *         <p>If you include <code>ShowAlternatives</code>, you must also include
                *             <code>MaxAlternatives</code>, which is the maximum number of alternative transcriptions
                *             you want Amazon Transcribe to generate.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-alternatives.html">Alternative transcriptions</a>.</p>
                */
            ShowAlternatives?: boolean;
            /**
                * <p>Indicate the maximum number of alternative transcriptions you want Amazon Transcribe
                *             to include in your transcript.</p>
                *         <p>If you select a number greater than the number of alternative transcriptions generated by
                *             Amazon Transcribe, only the actual number of alternative transcriptions are included.</p>
                *         <p>If you include <code>MaxAlternatives</code> in your request, you must also include
                *             <code>ShowAlternatives</code> with a value of <code>true</code>.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-alternatives.html">Alternative transcriptions</a>.</p>
                */
            MaxAlternatives?: number;
            /**
                * <p>The name of the custom vocabulary filter you want to use in your transcription job request.
                *             This name is case sensitive, cannot contain spaces, and must be unique within an
                *             Amazon Web Services account.</p>
                *         <p>Note that if you include <code>VocabularyFilterName</code> in your request, you must
                *             also include <code>VocabularyFilterMethod</code>.</p>
                */
            VocabularyFilterName?: string;
            /**
                * <p>Specify how you want your vocabulary filter applied to your transcript.</p>
                *         <p>To replace words with <code>***</code>, choose <code>mask</code>.</p>
                *         <p>To delete words, choose <code>remove</code>.</p>
                *         <p>To flag words without changing them, choose <code>tag</code>.</p>
                */
            VocabularyFilterMethod?: VocabularyFilterMethod | string;
    }
    export namespace Settings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Settings) => any;
    }
    export enum SubtitleFormat {
            SRT = "srt",
            VTT = "vtt"
    }
    /**
        * <p>Provides information about your subtitle file, including format, start index, and
        *             Amazon S3 location.</p>
        */
    export interface SubtitlesOutput {
            /**
                * <p>Provides the format of your subtitle files. If your request included both WebVTT
                *             (<code>vtt</code>) and SubRip (<code>srt</code>) formats, both formats are
                *             shown.</p>
                */
            Formats?: (SubtitleFormat | string)[];
            /**
                * <p>The Amazon S3 location of your transcript. You can use this URI to access or
                *             download your subtitle file. Your subtitle file is stored in the same location as your
                *             transcript. If you specified both WebVTT and SubRip subtitle formats, two URIs are
                *             provided.</p>
                *         <p>If you included <code>OutputBucketName</code> in your transcription job request, this is
                *             the URI of that bucket. If you also included <code>OutputKey</code> in your request, your
                *             output is located in the path you specified in your request.</p>
                *         <p>If you didn't include <code>OutputBucketName</code> in your transcription job request,
                *             your subtitle file is stored in a service-managed bucket, and <code>TranscriptFileUri</code>
                *             provides you with a temporary URI you can use for secure access to your subtitle file.</p>
                *         <note>
                *             <p>Temporary URIs for service-managed Amazon S3 buckets are only valid for 15
                *                 minutes. If you get an <code>AccesDenied</code> error, you can get a new temporary
                *                 URI by running a <code>GetTranscriptionJob</code> or
                *                 <code>ListTranscriptionJob</code> request.</p>
                *         </note>
                */
            SubtitleFileUris?: string[];
            /**
                * <p>Provides the start index value for your subtitle files. If you did not specify a value
                *             in your request, the default value of <code>0</code> is used.</p>
                */
            OutputStartIndex?: number;
    }
    export namespace SubtitlesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SubtitlesOutput) => any;
    }
    /**
        * <p>Provides detailed information about a transcription job.</p>
        *         <p>To view the status of the specified transcription job, check the
        *             <code>TranscriptionJobStatus</code> field. If the status is <code>COMPLETED</code>, the
        *             job is finished and you can find the results at the location specified in
        *             <code>TranscriptFileUri</code>. If the status is <code>FAILED</code>,
        *             <code>FailureReason</code> provides details on why your transcription job failed.</p>
        *         <p>If you enabled content redaction, the redacted transcript
        *             can be found at the location specified in <code>RedactedTranscriptFileUri</code>.</p>
        */
    export interface TranscriptionJob {
            /**
                * <p>The name of the transcription job. Job names are case sensitive and must be unique
                *             within an Amazon Web Services account.</p>
                */
            TranscriptionJobName?: string;
            /**
                * <p>Provides the status of the specified transcription job.</p>
                *         <p>If the status is <code>COMPLETED</code>, the job is finished and you can find the results
                *             at the location specified in <code>TranscriptFileUri</code> (or
                *             <code>RedactedTranscriptFileUri</code>, if you requested transcript redaction). If the status is
                *             <code>FAILED</code>, <code>FailureReason</code> provides details on why your transcription
                *             job failed.</p>
                */
            TranscriptionJobStatus?: TranscriptionJobStatus | string;
            /**
                * <p>The language code used to create your transcription job. For a list of supported languages
                *             and their associated language codes, refer to the <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a>
                *             table.</p>
                *         <p>Note that you must include one of <code>LanguageCode</code>,
                *             <code>IdentifyLanguage</code>, or <code>IdentifyMultipleLanguages</code> in your
                *             request. If you include more than one of these parameters, your transcription job
                *             fails.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The sample rate, in Hertz, of the audio track in your input media file.</p>
                */
            MediaSampleRateHertz?: number;
            /**
                * <p>The format of the input media file.</p>
                */
            MediaFormat?: MediaFormat | string;
            /**
                * <p>Describes the Amazon S3 location of the media file you want to use in your
                *             request.</p>
                */
            Media?: Media;
            /**
                * <p>Provides you with the Amazon S3 URI you can use to access your transcript.</p>
                */
            Transcript?: Transcript;
            /**
                * <p>The date and time the specified transcription job began processing.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.789000-07:00</code> represents a transcription job
                *             that started processing at 12:32 PM UTC-7 on May 4, 2022.</p>
                */
            StartTime?: Date;
            /**
                * <p>The date and time the specified transcription job request was made.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.761000-07:00</code> represents a transcription job
                *             that started processing at 12:32 PM UTC-7 on May 4, 2022.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The date and time the specified transcription job finished processing.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:33:13.922000-07:00</code> represents a transcription job
                *             that started processing at 12:33 PM UTC-7 on May 4, 2022.</p>
                */
            CompletionTime?: Date;
            /**
                * <p>If <code>TranscriptionJobStatus</code> is <code>FAILED</code>,
                *             <code>FailureReason</code> contains information about why the transcription job request
                *             failed.</p>
                *         <p>The <code>FailureReason</code> field contains one of the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>Unsupported media format</code>.</p>
                *                 <p>The media format specified in <code>MediaFormat</code> isn't valid. Refer to
                *                     <b>MediaFormat</b> for a list of supported formats.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>The media format provided does not match the detected media
                *                     format</code>.</p>
                *                 <p>The media format specified in <code>MediaFormat</code> doesn't match the
                *                     format of the input file. Check the media format of your media file and correct the
                *                     specified value.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Invalid sample rate for audio file</code>.</p>
                *                 <p>The sample rate specified in <code>MediaSampleRateHertz</code> isn't valid.
                *                     The sample rate must be between 8,000 and 48,000 Hertz.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>The sample rate provided does not match the detected sample
                *                     rate</code>.</p>
                *                 <p>The sample rate specified in <code>MediaSampleRateHertz</code> doesn't
                *                     match the sample rate detected in your input media file. Check the sample rate of
                *                     your media file and correct the specified value.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Invalid file size: file size too large</code>.</p>
                *                 <p>The size of your media file is larger than what Amazon Transcribe can process.
                *                     For more information, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/limits-guidelines.html#limits">Guidelines and
                *                         quotas</a>.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Invalid number of channels: number of channels too large</code>.</p>
                *                 <p>Your audio contains more channels than Amazon Transcribe is able to process.
                *                     For more information, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/limits-guidelines.html#limits">Guidelines and
                *                         quotas</a>.</p>
                *             </li>
                *          </ul>
                */
            FailureReason?: string;
            /**
                * <p>Specify additional optional settings in your
                *             request, including channel identification, alternative transcriptions, speaker labeling; allows you
                *             to apply custom vocabularies and vocabulary filters.</p>
                *         <p>If you want to include a custom vocabulary or a custom vocabulary filter (or both) with
                *             your request but <b>do not</b> want to use automatic
                *             language identification, use <code>Settings</code> with the <code>VocabularyName</code>
                *             or <code>VocabularyFilterName</code> (or both) sub-parameter.</p>
                *         <p>If you're using automatic language identification with your request and want to include a
                *             custom language model, a custom vocabulary, or a custom vocabulary filter, do not use the
                *             <code>Settings</code> parameter; use instead the
                *             <code></code>
                *             parameter with the <code>LanguageModelName</code>, <code>VocabularyName</code>
                *             or <code>VocabularyFilterName</code> sub-parameters.</p>
                */
            Settings?: Settings;
            /**
                * <p>The custom language model you want to include with your transcription job. If you include
                *             <code>ModelSettings</code> in your request, you must include the
                *             <code>LanguageModelName</code> sub-parameter.</p>
                */
            ModelSettings?: ModelSettings;
            /**
                * <p>Provides information about how your transcription job is being processed. This parameter shows
                *             if your request is queued and what data access role is being used.</p>
                */
            JobExecutionSettings?: JobExecutionSettings;
            /**
                * <p>Redacts or flags specified personally identifiable information (PII) in your transcript.</p>
                */
            ContentRedaction?: ContentRedaction;
            /**
                * <p>Indicates whether automatic language identification was enabled (<code>TRUE</code>)
                *             for the specified transcription job.</p>
                */
            IdentifyLanguage?: boolean;
            /**
                * <p>Indicates whether automatic multi-language identification was enabled
                *             (<code>TRUE</code>) for the specified transcription job.</p>
                */
            IdentifyMultipleLanguages?: boolean;
            /**
                * <p>You can specify two or more language codes that represent the languages you think may
                *             be present in your media; including more than five is not recommended. If you're unsure what
                *             languages are present, do not include this parameter.</p>
                *         <p>If you include <code>LanguageOptions</code> in your request, you must also include
                *             <code>IdentifyLanguage</code>.</p>
                *         <p>For more information, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a>.</p>
                *         <p>To transcribe speech in Modern Standard Arabic (<code>ar-SA</code>), your media file
                *             must be encoded at a sample rate of 16,000 Hz or higher.</p>
                */
            LanguageOptions?: (LanguageCode | string)[];
            /**
                * <p>The confidence score associated with the language identified in your media file.</p>
                *         <p>Confidence scores are values between 0 and 1; a larger value indicates a higher
                *             probability that the identified language correctly matches the language spoken in your
                *             media.</p>
                */
            IdentifiedLanguageScore?: number;
            /**
                * <p>The language codes used to create your transcription job. This parameter is used with
                *             multi-language identification. For single-language identification requests, refer to the singular
                *             version of this parameter, <code>LanguageCode</code>.</p>
                *         <p>For a list of supported languages and their associated language codes, refer to the
                *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a>
                *             table.</p>
                */
            LanguageCodes?: LanguageCodeItem[];
            /**
                * <p>Adds one or more custom tags, each in the form of a key:value pair, to a new transcription
                *             job at the time you start this new job.</p>
                *         <p>To learn more about using tags with Amazon Transcribe, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html">Tagging resources</a>.</p>
                */
            Tags?: Tag[];
            /**
                * <p>Generate subtitles for your media file with your transcription request.</p>
                */
            Subtitles?: SubtitlesOutput;
            /**
                * <p>If using automatic language identification (<code>IdentifyLanguage</code>) in your request
                *             and you want to apply a custom language model, a custom vocabulary, or a custom vocabulary
                *             filter, include <code>LanguageIdSettings</code> with the relevant sub-parameters
                *             (<code>VocabularyName</code>, <code>LanguageModelName</code>, and
                *             <code>VocabularyFilterName</code>).</p>
                *         <p>You can specify two or more language codes that represent the languages you think may be
                *             present in your media; including more than five is not recommended. Each language code you
                *             include can have an associated custom language model, custom vocabulary, and custom
                *             vocabulary filter. The languages you specify must match the languages of the specified custom
                *             language models, custom vocabularies, and custom vocabulary filters.</p>
                *         <p>To include language options using <code>IdentifyLanguage</code>
                *             <b>without</b> including a custom language model, a custom
                *             vocabulary, or a custom vocabulary filter, use <code>LanguageOptions</code> instead of
                *             <code>LanguageIdSettings</code>. Including language options can improve the accuracy of
                *             automatic language identification.</p>
                *         <p>If you want to include a custom language model with your request but
                *             <b>do not</b> want to use automatic language identification,
                *             use instead the <code></code> parameter with the
                *             <code>LanguageModelName</code> sub-parameter.</p>
                *         <p>If you want to include a custom vocabulary or a custom vocabulary filter (or both) with
                *             your request but <b>do not</b> want to use automatic
                *             language identification, use instead the <code></code>
                *             parameter with the <code>VocabularyName</code> or
                *             <code>VocabularyFilterName</code> (or both) sub-parameter.</p>
                */
            LanguageIdSettings?: Record<string, LanguageIdSettings>;
    }
    export namespace TranscriptionJob {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TranscriptionJob) => any;
    }
    export interface GetTranscriptionJobResponse {
            /**
                * <p>Provides detailed information about the specified transcription job, including job status
                *             and, if applicable, failure reason.</p>
                */
            TranscriptionJob?: TranscriptionJob;
    }
    export namespace GetTranscriptionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTranscriptionJobResponse) => any;
    }
    export interface GetVocabularyRequest {
            /**
                * <p>The name of the custom vocabulary you want information about. Vocabulary names are
                *             case sensitive.</p>
                */
            VocabularyName: string | undefined;
    }
    export namespace GetVocabularyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetVocabularyRequest) => any;
    }
    export interface GetVocabularyResponse {
            /**
                * <p>The name of the custom vocabulary you requested information about.</p>
                */
            VocabularyName?: string;
            /**
                * <p>The language code you selected for your custom vocabulary.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The processing state of your custom vocabulary. If the state is <code>READY</code>, you
                *             can use the vocabulary in a <code>StartTranscriptionJob</code> request.</p>
                */
            VocabularyState?: VocabularyState | string;
            /**
                * <p>The date and time the specified vocabulary was last modified.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7
                *             on May 4, 2022.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>If <code>VocabularyState</code> is <code>FAILED</code>,
                *             <code>FailureReason</code> contains information about why the vocabulary request failed.
                *             See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
                */
            FailureReason?: string;
            /**
                * <p>The S3 location where the vocabulary is stored; use this URI to view or download the
                *             vocabulary.</p>
                */
            DownloadUri?: string;
    }
    export namespace GetVocabularyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetVocabularyResponse) => any;
    }
    export interface GetVocabularyFilterRequest {
            /**
                * <p>The name of the custom vocabulary filter you want information about. Vocabulary filter
                *             names are case sensitive.</p>
                */
            VocabularyFilterName: string | undefined;
    }
    export namespace GetVocabularyFilterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetVocabularyFilterRequest) => any;
    }
    export interface GetVocabularyFilterResponse {
            /**
                * <p>The name of the custom vocabulary filter you requested information about.</p>
                */
            VocabularyFilterName?: string;
            /**
                * <p>The language code you selected for your vocabulary filter.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The date and time the specified vocabulary filter was last modified.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7
                *             on May 4, 2022.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The Amazon S3 location where the vocabulary filter is stored; use this URI to view or
                *             download the vocabulary filter.</p>
                */
            DownloadUri?: string;
    }
    export namespace GetVocabularyFilterResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetVocabularyFilterResponse) => any;
    }
    export interface ListCallAnalyticsCategoriesRequest {
            /**
                * <p>If your <code>ListCallAnalyticsCategories</code> request returns more results than can
                *             be displayed, <code>NextToken</code> is displayed in the response with an associated string.
                *             To get the next page of results, copy this string and repeat your request, including
                *             <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your
                *             results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of Call Analytics categories to return in each page of results. If there
                *             are fewer results than the value you specify, only the actual results are returned. If you don't
                *             specify a value, a default of 5 is used.</p>
                */
            MaxResults?: number;
    }
    export namespace ListCallAnalyticsCategoriesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCallAnalyticsCategoriesRequest) => any;
    }
    export interface ListCallAnalyticsCategoriesResponse {
            /**
                * <p>If <code>NextToken</code> is present in your response, it indicates that not all results
                *             are displayed. To view the next set of results, copy the string associated with the
                *             <code>NextToken</code> parameter in your results output, then run your request again
                *             including <code>NextToken</code> with the value of the copied string. Repeat as needed to
                *             view all your results.</p>
                */
            NextToken?: string;
            /**
                * <p>Provides detailed information about your Call Analytics categories, including all the rules
                *             associated with each category.</p>
                */
            Categories?: CategoryProperties[];
    }
    export namespace ListCallAnalyticsCategoriesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCallAnalyticsCategoriesResponse) => any;
    }
    export interface ListCallAnalyticsJobsRequest {
            /**
                * <p>Returns only Call Analytics jobs with the specified status. Jobs are ordered by creation
                *             date, with the newest job first. If you don't include <code>Status</code>, all Call Analytics
                *             jobs are returned.</p>
                */
            Status?: CallAnalyticsJobStatus | string;
            /**
                * <p>Returns only the Call Analytics jobs that contain the specified string. The search is not
                *             case sensitive.</p>
                */
            JobNameContains?: string;
            /**
                * <p>If your <code>ListCallAnalyticsJobs</code> request returns more results than can be
                *             displayed, <code>NextToken</code> is displayed in the response with an associated string. To
                *             get the next page of results, copy this string and repeat your request, including
                *             <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your
                *             results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of Call Analytics jobs to return in each page of results. If there are
                *             fewer results than the value you specify, only the actual results are returned. If you don't
                *             specify a value, a default of 5 is used.</p>
                */
            MaxResults?: number;
    }
    export namespace ListCallAnalyticsJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCallAnalyticsJobsRequest) => any;
    }
    export interface ListCallAnalyticsJobsResponse {
            /**
                * <p>Lists all Call Analytics jobs that have the status specified in your request. Jobs are
                *             ordered by creation date, with the newest job first.</p>
                */
            Status?: CallAnalyticsJobStatus | string;
            /**
                * <p>If <code>NextToken</code> is present in your response, it indicates that not all results
                *             are displayed. To view the next set of results, copy the string associated with the
                *             <code>NextToken</code> parameter in your results output, then run your request again
                *             including <code>NextToken</code> with the value of the copied string. Repeat as needed to
                *             view all your results.</p>
                */
            NextToken?: string;
            /**
                * <p>Provides a summary of information about each result.</p>
                */
            CallAnalyticsJobSummaries?: CallAnalyticsJobSummary[];
    }
    export namespace ListCallAnalyticsJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCallAnalyticsJobsResponse) => any;
    }
    export interface ListLanguageModelsRequest {
            /**
                * <p>Returns only custom language models with the specified status. Language
                *             models are ordered by creation date, with the newest model first. If you don't include
                *             <code>StatusEquals</code>, all custom language models are returned.</p>
                */
            StatusEquals?: ModelStatus | string;
            /**
                * <p>Returns only the custom language models that contain the specified string. The search
                *             is not case sensitive.</p>
                */
            NameContains?: string;
            /**
                * <p>If your <code>ListLanguageModels</code> request returns more results than can be
                *             displayed, <code>NextToken</code> is displayed in the response with an associated string. To
                *             get the next page of results, copy this string and repeat your request, including
                *             <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your
                *             results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of custom language models to return in each page of results. If there
                *             are fewer results than the value you specify, only the actual results are returned. If you don't
                *             specify a value, a default of 5 is used.</p>
                */
            MaxResults?: number;
    }
    export namespace ListLanguageModelsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLanguageModelsRequest) => any;
    }
    export interface ListLanguageModelsResponse {
            /**
                * <p>If <code>NextToken</code> is present in your response, it indicates that not all results
                *             are displayed. To view the next set of results, copy the string associated with the
                *             <code>NextToken</code> parameter in your results output, then run your request again
                *             including <code>NextToken</code> with the value of the copied string.  Repeat as needed to
                *             view all your results.</p>
                */
            NextToken?: string;
            /**
                * <p>Provides information about the custom language models that match the criteria specified
                *             in your request.</p>
                */
            Models?: LanguageModel[];
    }
    export namespace ListLanguageModelsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLanguageModelsResponse) => any;
    }
    export interface ListMedicalTranscriptionJobsRequest {
            /**
                * <p>Returns only medical transcription jobs with the specified status. Jobs are ordered by
                *             creation date, with the newest job first. If you don't include <code>Status</code>, all
                *             medical transcription jobs are returned.</p>
                */
            Status?: TranscriptionJobStatus | string;
            /**
                * <p>Returns only the medical transcription jobs that contain the specified string. The search
                *             is not case sensitive.</p>
                */
            JobNameContains?: string;
            /**
                * <p>If your <code>ListMedicalTranscriptionJobs</code> request returns more results than can
                *             be displayed, <code>NextToken</code> is displayed in the response with an associated string.
                *             To get the next page of results, copy this string and repeat your request, including
                *             <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your
                *             results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of medical transcription jobs to return in each page of results. If there
                *             are fewer results than the value you specify, only the actual results are returned. If you don't
                *             specify a value, a default of 5 is used.</p>
                */
            MaxResults?: number;
    }
    export namespace ListMedicalTranscriptionJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMedicalTranscriptionJobsRequest) => any;
    }
    export enum OutputLocationType {
            CUSTOMER_BUCKET = "CUSTOMER_BUCKET",
            SERVICE_BUCKET = "SERVICE_BUCKET"
    }
    /**
        * <p>Provides detailed information about a specific medical transcription job.</p>
        */
    export interface MedicalTranscriptionJobSummary {
            /**
                * <p>The name of the medical transcription job. Job names are case sensitive and must be unique
                *             within an Amazon Web Services account.</p>
                */
            MedicalTranscriptionJobName?: string;
            /**
                * <p>The date and time the specified medical transcription job request was made.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.761000-07:00</code> represents a transcription job
                *             that started processing at 12:32 PM UTC-7 on May 4, 2022.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The date and time your medical transcription job began processing.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.789000-07:00</code> represents a transcription job
                *             that started processing at 12:32 PM UTC-7 on May 4, 2022.</p>
                */
            StartTime?: Date;
            /**
                * <p>The date and time the specified medical transcription job finished processing.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:33:13.922000-07:00</code> represents a transcription job
                *             that started processing at 12:33 PM UTC-7 on May 4, 2022.</p>
                */
            CompletionTime?: Date;
            /**
                * <p>The language code used to create your medical transcription. US English
                *             (<code>en-US</code>) is the only supported language for medical transcriptions.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>Provides the status of your medical transcription job.</p>
                *         <p>If the status is <code>COMPLETED</code>, the job is finished and you can find the results
                *             at the location specified in <code>TranscriptFileUri</code>. If the status is
                *             <code>FAILED</code>, <code>FailureReason</code> provides details on why your transcription
                *             job failed.</p>
                */
            TranscriptionJobStatus?: TranscriptionJobStatus | string;
            /**
                * <p>If <code>TranscriptionJobStatus</code> is <code>FAILED</code>,
                *             <code>FailureReason</code> contains information about why the transcription job
                *             failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
                */
            FailureReason?: string;
            /**
                * <p>Indicates where the specified medical transcription output is stored.</p>
                *         <p>If the value is <code>CUSTOMER_BUCKET</code>, the location is the Amazon S3
                *             bucket you specified using the <code>OutputBucketName</code> parameter in your
                *              request. If you also included
                *             <code>OutputKey</code> in your request, your output is located in the path you specified in your
                *             request.</p>
                *         <p>If the value is <code>SERVICE_BUCKET</code>, the location is a service-managed
                *             Amazon S3 bucket. To access a transcript stored in a service-managed bucket, use
                *             the URI shown in the <code>TranscriptFileUri</code> field.</p>
                */
            OutputLocationType?: OutputLocationType | string;
            /**
                * <p>Provides the medical specialty represented in your media.</p>
                */
            Specialty?: Specialty | string;
            /**
                * <p>Labels all personal health information (PHI) identified in your transcript. For more information,
                *             see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/phi-id.html">Identifying personal health
                *                 information (PHI) in a transcription</a>.</p>
                */
            ContentIdentificationType?: MedicalContentIdentificationType | string;
            /**
                * <p>Indicates whether the input media is a dictation or a conversation, as specified in the
                *             <code>StartMedicalTranscriptionJob</code> request.</p>
                */
            Type?: Type | string;
    }
    export namespace MedicalTranscriptionJobSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MedicalTranscriptionJobSummary) => any;
    }
    export interface ListMedicalTranscriptionJobsResponse {
            /**
                * <p>Lists all medical transcription jobs that have the status specified in your request. Jobs are
                *             ordered by creation date, with the newest job first.</p>
                */
            Status?: TranscriptionJobStatus | string;
            /**
                * <p>If <code>NextToken</code> is present in your response, it indicates that not all results
                *             are displayed. To view the next set of results, copy the string associated with the
                *             <code>NextToken</code> parameter in your results output, then run your request again
                *             including <code>NextToken</code> with the value of the copied string. Repeat as needed to
                *             view all your results.</p>
                */
            NextToken?: string;
            /**
                * <p>Provides a summary of information about each result.</p>
                */
            MedicalTranscriptionJobSummaries?: MedicalTranscriptionJobSummary[];
    }
    export namespace ListMedicalTranscriptionJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMedicalTranscriptionJobsResponse) => any;
    }
    export interface ListMedicalVocabulariesRequest {
            /**
                * <p>If your <code>ListMedicalVocabularies</code> request returns more results than can be
                *             displayed, <code>NextToken</code> is displayed in the response with an associated string. To
                *             get the next page of results, copy this string and repeat your request, including
                *             <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your
                *             results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of custom medical vocabularies to return in each page of results. If
                *             there are fewer results than the value you specify, only the actual results are returned. If you
                *             don't specify a value, a default of 5 is used.</p>
                */
            MaxResults?: number;
            /**
                * <p>Returns only custom medical vocabularies with the specified state. Vocabularies are
                *             ordered by creation date, with the newest vocabulary first. If you don't include
                *             <code>StateEquals</code>, all custom medical vocabularies are returned.</p>
                */
            StateEquals?: VocabularyState | string;
            /**
                * <p>Returns only the custom medical vocabularies that contain the specified string. The search
                *             is not case sensitive.</p>
                */
            NameContains?: string;
    }
    export namespace ListMedicalVocabulariesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMedicalVocabulariesRequest) => any;
    }
    /**
        * <p>Provides information about a custom vocabulary, including the language of the vocabulary,
        *             when it was last modified, its name, and the processing state.</p>
        */
    export interface VocabularyInfo {
            /**
                * <p>A unique name, chosen by you, for your custom vocabulary. This name is case sensitive,
                *             cannot contain spaces, and must be unique within an Amazon Web Services account.</p>
                */
            VocabularyName?: string;
            /**
                * <p>The language code used to create your custom vocabulary. Each vocabulary must contain
                *             terms in only one language.</p>
                *         <p>A custom vocabulary can only be used to transcribe files in the same language as the
                *             vocabulary. For example, if you create a vocabulary using US English (<code>en-US</code>),
                *             you can only apply this vocabulary to files that contain English audio.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The date and time the specified vocabulary was last modified.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7
                *             on May 4, 2022.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The processing state of your custom vocabulary. If the state is <code>READY</code>, you
                *             can use the vocabulary in a <code>StartTranscriptionJob</code> request.</p>
                */
            VocabularyState?: VocabularyState | string;
    }
    export namespace VocabularyInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VocabularyInfo) => any;
    }
    export interface ListMedicalVocabulariesResponse {
            /**
                * <p>Lists all custom medical vocabularies that have the status specified in your request.
                *             Vocabularies are ordered by creation date, with the newest vocabulary first.</p>
                */
            Status?: VocabularyState | string;
            /**
                * <p>If <code>NextToken</code> is present in your response, it indicates that not all results
                *             are displayed. To view the next set of results, copy the string associated with the
                *             <code>NextToken</code> parameter in your results output, then run your request again
                *             including <code>NextToken</code> with the value of the copied string. Repeat as needed to
                *             view all your results.</p>
                */
            NextToken?: string;
            /**
                * <p>Provides information about the custom medical vocabularies that match the criteria specified
                *             in your request.</p>
                */
            Vocabularies?: VocabularyInfo[];
    }
    export namespace ListMedicalVocabulariesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMedicalVocabulariesResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>Returns a list of all tags associated with the specified Amazon Resource Name (ARN). ARNs
                *             have the format <code>arn:partition:service:region:account-id:resource-type/resource-id</code>.</p>
                *         <p>For example,
                *             <code>arn:aws:transcribe:us-west-2:account-id:transcription-job/transcription-job-name</code>.</p>
                *         <p>Valid values for <code>resource-type</code> are: <code>transcription-job</code>,
                *             <code>medical-transcription-job</code>, <code>vocabulary</code>,
                *             <code>medical-vocabulary</code>, <code>vocabulary-filter</code>, and
                *             <code>language-model</code>.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The Amazon Resource Name (ARN) specified in your request.</p>
                */
            ResourceArn?: string;
            /**
                * <p>Lists all tags associated with the given transcription job, vocabulary, model, or
                *             resource.</p>
                */
            Tags?: Tag[];
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface ListTranscriptionJobsRequest {
            /**
                * <p>Returns only transcription jobs with the specified status. Jobs are ordered by creation
                *             date, with the newest job first. If you don't include <code>Status</code>, all transcription
                *             jobs are returned.</p>
                */
            Status?: TranscriptionJobStatus | string;
            /**
                * <p>Returns only the transcription jobs that contain the specified string. The search is not
                *             case sensitive.</p>
                */
            JobNameContains?: string;
            /**
                * <p>If your <code>ListTranscriptionJobs</code> request returns more results than can be
                *             displayed, <code>NextToken</code> is displayed in the response with an associated string. To
                *             get the next page of results, copy this string and repeat your request, including
                *             <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your
                *             results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of transcription jobs to return in each page of results. If there are
                *             fewer results than the value you specify, only the actual results are returned. If you don't
                *             specify a value, a default of 5 is used.</p>
                */
            MaxResults?: number;
    }
    export namespace ListTranscriptionJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTranscriptionJobsRequest) => any;
    }
    /**
        * <p>Provides detailed information about a specific transcription job.</p>
        */
    export interface TranscriptionJobSummary {
            /**
                * <p>The name of the transcription job. Job names are case sensitive and must be unique
                *             within an Amazon Web Services account.</p>
                */
            TranscriptionJobName?: string;
            /**
                * <p>The date and time the specified transcription job request was made.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.761000-07:00</code> represents a transcription job
                *             that started processing at 12:32 PM UTC-7 on May 4, 2022.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The date and time your transcription job began processing.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.789000-07:00</code> represents a transcription job
                *             that started processing at 12:32 PM UTC-7 on May 4, 2022.</p>
                */
            StartTime?: Date;
            /**
                * <p>The date and time the specified transcription job finished processing.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:33:13.922000-07:00</code> represents a transcription job
                *             that started processing at 12:33 PM UTC-7 on May 4, 2022.</p>
                */
            CompletionTime?: Date;
            /**
                * <p>The language code used to create your transcription.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>Provides the status of your transcription job.</p>
                *         <p>If the status is <code>COMPLETED</code>, the job is finished and you can find the results
                *             at the location specified in <code>TranscriptFileUri</code> (or
                *             <code>RedactedTranscriptFileUri</code>, if you requested transcript redaction). If the status is
                *             <code>FAILED</code>, <code>FailureReason</code> provides details on why your transcription
                *             job failed.</p>
                */
            TranscriptionJobStatus?: TranscriptionJobStatus | string;
            /**
                * <p>If <code>TranscriptionJobStatus</code> is <code>FAILED</code>,
                *             <code>FailureReason</code> contains information about why the transcription job
                *             failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
                */
            FailureReason?: string;
            /**
                * <p>Indicates where the specified transcription output is stored.</p>
                *         <p>If the value is <code>CUSTOMER_BUCKET</code>, the location is the Amazon S3
                *             bucket you specified using the <code>OutputBucketName</code> parameter in your
                *              request. If you also included
                *             <code>OutputKey</code> in your request, your output is located in the path you specified in your
                *             request.</p>
                *         <p>If the value is <code>SERVICE_BUCKET</code>, the location is a service-managed
                *             Amazon S3 bucket. To access a transcript stored in a service-managed bucket, use
                *             the URI shown in the <code>TranscriptFileUri</code> or <code>RedactedTranscriptFileUri</code>
                *             field.</p>
                */
            OutputLocationType?: OutputLocationType | string;
            /**
                * <p>The content redaction settings of the transcription job.</p>
                */
            ContentRedaction?: ContentRedaction;
            /**
                * <p>Provides the name of the custom language model that was included in the specified
                *             transcription job.</p>
                *         <p>Only use <code>ModelSettings</code> with the <code>LanguageModelName</code>
                *             sub-parameter if you're <b>not</b> using automatic language
                *             identification (<code></code>).
                *             If using <code>LanguageIdSettings</code> in your request, this parameter contains a
                *             <code>LanguageModelName</code> sub-parameter.</p>
                */
            ModelSettings?: ModelSettings;
            /**
                * <p>Indicates whether automatic language identification was enabled (<code>TRUE</code>)
                *             for the specified transcription job.</p>
                */
            IdentifyLanguage?: boolean;
            /**
                * <p>Indicates whether automatic multi-language identification was enabled
                *             (<code>TRUE</code>) for the specified transcription job.</p>
                */
            IdentifyMultipleLanguages?: boolean;
            /**
                * <p>The confidence score associated with the language identified in your media file.</p>
                *         <p>Confidence scores are values between 0 and 1; a larger value indicates a higher
                *             probability that the identified language correctly matches the language spoken in your
                *             media.</p>
                */
            IdentifiedLanguageScore?: number;
            /**
                * <p>The language codes used to create your transcription job. This parameter is used with
                *             multi-language identification. For single-language identification, the singular version of this
                *             parameter, <code>LanguageCode</code>, is present.</p>
                */
            LanguageCodes?: LanguageCodeItem[];
    }
    export namespace TranscriptionJobSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TranscriptionJobSummary) => any;
    }
    export interface ListTranscriptionJobsResponse {
            /**
                * <p>Lists all transcription jobs that have the status specified in your request. Jobs are
                *             ordered by creation date, with the newest job first.</p>
                */
            Status?: TranscriptionJobStatus | string;
            /**
                * <p>If <code>NextToken</code> is present in your response, it indicates that not all results
                *             are displayed. To view the next set of results, copy the string associated with the
                *             <code>NextToken</code> parameter in your results output, then run your request again
                *             including <code>NextToken</code> with the value of the copied string. Repeat as needed to
                *             view all your results.</p>
                */
            NextToken?: string;
            /**
                * <p>Provides a summary of information about each result.</p>
                */
            TranscriptionJobSummaries?: TranscriptionJobSummary[];
    }
    export namespace ListTranscriptionJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTranscriptionJobsResponse) => any;
    }
    export interface ListVocabulariesRequest {
            /**
                * <p>If your <code>ListVocabularies</code> request returns more results than can be displayed,
                *             <code>NextToken</code> is displayed in the response with an associated string. To get the
                *             next page of results, copy this string and repeat your request, including
                *             <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your
                *             results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of custom vocabularies to return in each page of results. If there
                *             are fewer results than the value you specify, only the actual results are returned. If you
                *             don't specify a value, a default of 5 is used.</p>
                */
            MaxResults?: number;
            /**
                * <p>Returns only custom vocabularies with the specified state. Vocabularies are ordered by
                *             creation date, with the newest vocabulary first. If you don't include
                *             <code>StateEquals</code>, all custom medical vocabularies are returned.</p>
                */
            StateEquals?: VocabularyState | string;
            /**
                * <p>Returns only the custom vocabularies that contain the specified string. The search is not
                *             case sensitive.</p>
                */
            NameContains?: string;
    }
    export namespace ListVocabulariesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListVocabulariesRequest) => any;
    }
    export interface ListVocabulariesResponse {
            /**
                * <p>Lists all custom vocabularies that have the status specified in your request. Vocabularies
                *             are ordered by creation date, with the newest vocabulary first.</p>
                */
            Status?: VocabularyState | string;
            /**
                * <p>If <code>NextToken</code> is present in your response, it indicates that not all results
                *             are displayed. To view the next set of results, copy the string associated with the
                *             <code>NextToken</code> parameter in your results output, then run your request again
                *             including <code>NextToken</code> with the value of the copied string. Repeat as needed to
                *             view all your results.</p>
                */
            NextToken?: string;
            /**
                * <p>Provides information about the custom vocabularies that match the criteria specified in your
                *             request.</p>
                */
            Vocabularies?: VocabularyInfo[];
    }
    export namespace ListVocabulariesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListVocabulariesResponse) => any;
    }
    export interface ListVocabularyFiltersRequest {
            /**
                * <p>If your <code>ListVocabularyFilters</code> request returns more results than can
                *             be displayed, <code>NextToken</code> is displayed in the response with an associated string.
                *             To get the next page of results, copy this string and repeat your request, including
                *             <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your
                *             results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of custom vocabulary filters to return in each page of results. If
                *             there are fewer results than the value you specify, only the actual results are returned. If you
                *             don't specify a value, a default of 5 is used.</p>
                */
            MaxResults?: number;
            /**
                * <p>Returns only the custom vocabulary filters that contain the specified string. The search
                *             is not case sensitive.</p>
                */
            NameContains?: string;
    }
    export namespace ListVocabularyFiltersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListVocabularyFiltersRequest) => any;
    }
    /**
        * <p>Provides information about a vocabulary filter, including the language of the filter, when it
        *             was last modified, and its name.</p>
        */
    export interface VocabularyFilterInfo {
            /**
                * <p>A unique name, chosen by you, for your custom vocabulary filter. This name is case
                *             sensitive, cannot contain spaces, and must be unique within an
                *             Amazon Web Services account.</p>
                */
            VocabularyFilterName?: string;
            /**
                * <p>The language code that represents the language of the entries in your vocabulary
                *             filter. Each vocabulary filter must contain terms in only one language.</p>
                *         <p>A vocabulary filter can only be used to transcribe files in the same language as the
                *             filter. For example, if you create a vocabulary filter using US English (<code>en-US</code>), you
                *             can only apply this filter to files that contain English audio.</p>
                *         <p>For a list of supported languages and their associated language codes, refer to the
                *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported
                *                 languages</a> table.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The date and time the specified vocabulary filter was last modified.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7
                *             on May 4, 2022.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace VocabularyFilterInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VocabularyFilterInfo) => any;
    }
    export interface ListVocabularyFiltersResponse {
            /**
                * <p>If <code>NextToken</code> is present in your response, it indicates that not all results
                *             are displayed. To view the next set of results, copy the string associated with the
                *             <code>NextToken</code> parameter in your results output, then run your request again
                *             including <code>NextToken</code> with the value of the copied string. Repeat as needed to
                *             view all your results.</p>
                */
            NextToken?: string;
            /**
                * <p>Provides information about the custom vocabulary filters that match the criteria specified
                *             in your request.</p>
                */
            VocabularyFilters?: VocabularyFilterInfo[];
    }
    export namespace ListVocabularyFiltersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListVocabularyFiltersResponse) => any;
    }
    export interface StartCallAnalyticsJobRequest {
            /**
                * <p>A unique name, chosen by you, for your Call Analytics job.</p>
                *         <p>This name is case sensitive, cannot contain spaces, and must be unique within an
                *             Amazon Web Services account. If you try to create a new job with the same name as an
                *             existing job, you get a <code>ConflictException</code> error.</p>
                */
            CallAnalyticsJobName: string | undefined;
            /**
                * <p>Describes the Amazon S3 location of the media file you want to use in your
                *             request.</p>
                */
            Media: Media | undefined;
            /**
                * <p>The Amazon S3 location where you want your Call Analytics transcription output
                *             stored. You can use any of the following formats to specify the output location:</p>
                *         <ol>
                *             <li>
                *                 <p>s3://DOC-EXAMPLE-BUCKET</p>
                *             </li>
                *             <li>
                *                 <p>s3://DOC-EXAMPLE-BUCKET/my-output-folder/</p>
                *             </li>
                *             <li>
                *                 <p>s3://DOC-EXAMPLE-BUCKET/my-output-folder/my-call-analytics-job.json</p>
                *             </li>
                *          </ol>
                *         <p>Unless you specify a file name (option 3), the name of your output file has a default
                *             value that matches the name you specified for your transcription job using the
                *             <code>CallAnalyticsJobName</code> parameter.</p>
                *         <p>You can specify a KMS key to encrypt your output using the
                *             <code>OutputEncryptionKMSKeyId</code> parameter. If you don't specify a
                *             KMS key, Amazon Transcribe uses the default Amazon S3 key for
                *             server-side encryption.</p>
                *         <p>If you don't specify <code>OutputLocation</code>, your transcript is placed in a
                *             service-managed Amazon S3 bucket and you are provided with a URI to access your
                *             transcript.</p>
                */
            OutputLocation?: string;
            /**
                * <p>The KMS key you want to use to encrypt your Call Analytics output.</p>
                *         <p>If using a key located in the <b>current</b>
                *             Amazon Web Services account, you can specify your KMS key in one of
                *             four ways:</p>
                *         <ol>
                *             <li>
                *                 <p>Use the KMS key ID itself. For example,
                *                     <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Use an alias for the KMS key ID. For example,
                *                     <code>alias/ExampleAlias</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Use the Amazon Resource Name (ARN) for the KMS key ID. For
                *                     example,
                *                     <code>arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Use the ARN for the KMS key alias. For example,
                *                     <code>arn:aws:kms:region:account-ID:alias/ExampleAlias</code>.</p>
                *             </li>
                *          </ol>
                *         <p>If using a key located in a <b>different</b>
                *             Amazon Web Services account than the current Amazon Web Services account, you can
                *             specify your KMS key in one of two ways:</p>
                *         <ol>
                *             <li>
                *                 <p>Use the ARN for the KMS key ID. For example,
                *                     <code>arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Use the ARN for the KMS key alias. For example,
                *                     <code>arn:aws:kms:region:account-ID:alias/ExampleAlias</code>.</p>
                *             </li>
                *          </ol>
                *         <p>If you don't specify an encryption key, your output is encrypted with the default
                *             Amazon S3 key (SSE-S3).</p>
                *         <p>If you specify a KMS key to encrypt your output, you must also specify
                *             an output location using the <code>OutputLocation</code> parameter.</p>
                *         <p>Note that the user making the
                *             request must have permission to use the specified KMS key.</p>
                */
            OutputEncryptionKMSKeyId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that has permissions to
                *             access the Amazon S3 bucket that contains your input files. If the role you specify doesn’t
                *             have the appropriate permissions to access the specified Amazon S3 location, your request
                *             fails.</p>
                *         <p>IAM role ARNs have the format
                *             <code>arn:partition:iam::account:role/role-name-with-path</code>. For example:
                *             <code>arn:aws:iam::111122223333:role/Admin</code>.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns">IAM ARNs</a>.</p>
                */
            DataAccessRoleArn?: string;
            /**
                * <p>Specify additional optional settings in your
                *             request, including content redaction; allows you to apply custom language models, vocabulary
                *             filters, and custom vocabularies to your Call Analytics job.</p>
                */
            Settings?: CallAnalyticsJobSettings;
            /**
                * <p>Allows you to specify which speaker is on which channel. For example, if your agent is the
                *             first participant to speak, you would set <code>ChannelId</code> to <code>0</code> (to
                *             indicate the first channel) and <code>ParticipantRole</code> to <code>AGENT</code> (to
                *             indicate that it's the agent speaking).</p>
                */
            ChannelDefinitions?: ChannelDefinition[];
    }
    export namespace StartCallAnalyticsJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartCallAnalyticsJobRequest) => any;
    }
    export interface StartCallAnalyticsJobResponse {
            /**
                * <p>Provides detailed information about the current Call Analytics job, including job status
                *             and, if applicable, failure reason.</p>
                */
            CallAnalyticsJob?: CallAnalyticsJob;
    }
    export namespace StartCallAnalyticsJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartCallAnalyticsJobResponse) => any;
    }
    export interface StartMedicalTranscriptionJobRequest {
            /**
                * <p>A unique name, chosen by you, for your medical transcription job. The name you specify is
                *             also used as the default name of your transcription output file. If you want to specify a different
                *             name for your transcription output, use the <code>OutputKey</code> parameter.</p>
                *         <p>This name is case sensitive, cannot contain spaces, and must be unique within an
                *             Amazon Web Services account. If you try to create a new job with the same name as an
                *             existing job, you get a <code>ConflictException</code> error.</p>
                */
            MedicalTranscriptionJobName: string | undefined;
            /**
                * <p>The language code that represents the language spoken in the input media file. US English
                *             (<code>en-US</code>) is the only valid value for medical transcription jobs. Any other value
                *             you enter for language code results in a <code>BadRequestException</code> error.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
            /**
                * <p>The sample rate, in Hertz, of the audio track in your input media file.</p>
                *         <p>If you don't specify the media sample rate, Amazon Transcribe Medical determines it for
                *             you. If you specify the sample rate, it must match the rate detected by Amazon Transcribe
                *             Medical; if there's a mismatch between the value you specify and the value detected, your job
                *             fails. Therefore, in most cases, it's advised to omit <code>MediaSampleRateHertz</code> and let
                *             Amazon Transcribe Medical determine the sample rate.</p>
                */
            MediaSampleRateHertz?: number;
            /**
                * <p>Specify the format of your input media file.</p>
                */
            MediaFormat?: MediaFormat | string;
            /**
                * <p>Describes the Amazon S3 location of the media file you want to use in your
                *             request.</p>
                */
            Media: Media | undefined;
            /**
                * <p>The name of the Amazon S3 bucket where you want your medical transcription
                *             output stored. Do not include the <code>S3://</code> prefix of the specified bucket.</p>
                *         <p>If you want your output to go to a sub-folder of this bucket, specify it using the
                *             <code>OutputKey</code> parameter; <code>OutputBucketName</code> only accepts the
                *             name of a bucket.</p>
                *         <p>For example, if you want your output stored in <code>S3://DOC-EXAMPLE-BUCKET</code>,
                *             set <code>OutputBucketName</code> to <code>DOC-EXAMPLE-BUCKET</code>. However, if
                *             you want your output stored in <code>S3://DOC-EXAMPLE-BUCKET/test-files/</code>, set
                *             <code>OutputBucketName</code> to <code>DOC-EXAMPLE-BUCKET</code> and
                *             <code>OutputKey</code> to <code>test-files/</code>.</p>
                *         <p>Note that Amazon Transcribe must have permission to use the specified location. You
                *             can change Amazon S3 permissions using the <a href="https://console.aws.amazon.com/s3">Amazon Web Services Management Console</a>. See also <a href="https://docs.aws.amazon.com/transcribe/latest/dg/security_iam_id-based-policy-examples.html#auth-role-iam-user">Permissions
                *                 Required for IAM User Roles</a>.</p>
                *         <p>If you don't specify <code>OutputBucketName</code>, your transcript is placed in a
                *             service-managed Amazon S3 bucket and you are provided with a URI to access your
                *             transcript.</p>
                */
            OutputBucketName: string | undefined;
            /**
                * <p>Use in combination with <code>OutputBucketName</code> to specify the output location of
                *             your transcript and, optionally, a unique name for your output file. The default name for your
                *             transcription output is the same as the name you specified for your medical transcription job
                *             (<code>MedicalTranscriptionJobName</code>).</p>
                *         <p>Here are some examples of how you can use <code>OutputKey</code>:</p>
                *         <ul>
                *             <li>
                *                 <p>If you specify 'DOC-EXAMPLE-BUCKET' as the <code>OutputBucketName</code>
                *                     and 'my-transcript.json' as the <code>OutputKey</code>, your transcription output
                *                     path is <code>s3://DOC-EXAMPLE-BUCKET/my-transcript.json</code>.</p>
                *             </li>
                *             <li>
                *                 <p>If you specify 'my-first-transcription' as the <code>MedicalTranscriptionJobName</code>,
                *                     'DOC-EXAMPLE-BUCKET' as the <code>OutputBucketName</code>, and
                *                     'my-transcript' as the <code>OutputKey</code>, your transcription output path is
                *                     <code>s3://DOC-EXAMPLE-BUCKET/my-transcript/my-first-transcription.json</code>.</p>
                *             </li>
                *             <li>
                *                 <p>If you specify 'DOC-EXAMPLE-BUCKET' as the <code>OutputBucketName</code>
                *                     and 'test-files/my-transcript.json' as the <code>OutputKey</code>, your transcription output
                *                     path is <code>s3://DOC-EXAMPLE-BUCKET/test-files/my-transcript.json</code>.</p>
                *             </li>
                *             <li>
                *                 <p>If you specify 'my-first-transcription' as the <code>MedicalTranscriptionJobName</code>,
                *                     'DOC-EXAMPLE-BUCKET' as the <code>OutputBucketName</code>, and
                *                     'test-files/my-transcript' as the <code>OutputKey</code>, your transcription output path is
                *                     <code>s3://DOC-EXAMPLE-BUCKET/test-files/my-transcript/my-first-transcription.json</code>.</p>
                *             </li>
                *          </ul>
                *         <p>If you specify the name of an Amazon S3 bucket sub-folder that doesn't exist, one is
                *             created for you.</p>
                */
            OutputKey?: string;
            /**
                * <p>The KMS key you want to use to encrypt your medical transcription
                *             output.</p>
                *         <p>If using a key located in the <b>current</b>
                *             Amazon Web Services account, you can specify your KMS key in one of
                *             four ways:</p>
                *         <ol>
                *             <li>
                *                 <p>Use the KMS key ID itself. For example,
                *                     <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Use an alias for the KMS key ID. For example,
                *                     <code>alias/ExampleAlias</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Use the Amazon Resource Name (ARN) for the KMS key ID. For
                *                     example,                    <code>arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Use the ARN for the KMS key alias. For example,
                *                     <code>arn:aws:kms:region:account-ID:alias/ExampleAlias</code>.</p>
                *             </li>
                *          </ol>
                *         <p>If using a key located in a <b>different</b>
                *             Amazon Web Services account than the current Amazon Web Services account, you can
                *             specify your KMS key in one of two ways:</p>
                *         <ol>
                *             <li>
                *                 <p>Use the ARN for the KMS key ID. For example,                     <code>arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Use the ARN for the KMS key alias. For example,
                *                     <code>arn:aws:kms:region:account-ID:alias/ExampleAlias</code>.</p>
                *             </li>
                *          </ol>
                *         <p>If you don't specify an encryption key, your output is encrypted with the default
                *             Amazon S3 key (SSE-S3).</p>
                *         <p>If you specify a KMS key to encrypt your output, you must also specify
                *             an output location using the <code>OutputLocation</code> parameter.</p>
                *         <p>Note that the user making the
                *             request must have permission to use the specified KMS key.</p>
                */
            OutputEncryptionKMSKeyId?: string;
            /**
                * <p>A map of plain text, non-secret key:value pairs, known as encryption context pairs, that
                *             provide an added layer of security for your data. For more information, see
                *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/key-management.html#kms-context">KMS
                *                 encryption context</a> and <a href="https://docs.aws.amazon.com/transcribe/latest/dg/symmetric-asymmetric.html">Asymmetric keys in
                *                     KMS</a>.</p>
                */
            KMSEncryptionContext?: Record<string, string>;
            /**
                * <p>Specify additional optional settings in your
                *             request, including channel identification, alternative transcriptions, and speaker labeling; allows
                *             you to apply custom vocabularies to your transcription job.</p>
                */
            Settings?: MedicalTranscriptionSetting;
            /**
                * <p>Labels all personal health information (PHI) identified in your transcript. For more information,
                *             see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/phi-id.html">Identifying personal health
                *                 information (PHI) in a transcription</a>.</p>
                */
            ContentIdentificationType?: MedicalContentIdentificationType | string;
            /**
                * <p>Specify the predominant medical specialty represented in your media. For batch
                *             transcriptions, <code>PRIMARYCARE</code> is the only valid value. If you require additional
                *             specialties, refer to .</p>
                */
            Specialty: Specialty | string | undefined;
            /**
                * <p>Specify whether your input media contains only one person (<code>DICTATION</code>) or
                *             contains a conversation between two people (<code>CONVERSATION</code>).</p>
                *         <p>For example, <code>DICTATION</code> could be used for a medical professional wanting to
                *             transcribe voice memos; <code>CONVERSATION</code> could be used for transcribing the
                *             doctor-patient dialogue during the patient's office visit.</p>
                */
            Type: Type | string | undefined;
            /**
                * <p>Adds one or more custom tags, each in the form of a key:value pair, to a new medical
                *             transcription job at the time you start this new job.</p>
                *         <p>To learn more about using tags with Amazon Transcribe, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html">Tagging resources</a>.</p>
                */
            Tags?: Tag[];
    }
    export namespace StartMedicalTranscriptionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartMedicalTranscriptionJobRequest) => any;
    }
    export interface StartMedicalTranscriptionJobResponse {
            /**
                * <p>Provides detailed information about the current medical transcription job, including job
                *             status and, if applicable, failure reason.</p>
                */
            MedicalTranscriptionJob?: MedicalTranscriptionJob;
    }
    export namespace StartMedicalTranscriptionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartMedicalTranscriptionJobResponse) => any;
    }
    /**
        * <p>Generate subtitles for your media file with your transcription request.</p>
        *         <p>You can choose a start index of 0 or 1, and you can specify either WebVTT or SubRip (or
        *             both) as your output format.</p>
        *         <p>Note that your subtitle files are placed in the same location as your transcription
        *             output.</p>
        */
    export interface Subtitles {
            /**
                * <p>Specify the output format for your subtitle file; if you select both WebVTT
                *             (<code>vtt</code>) and SubRip (<code>srt</code>) formats, two output files are
                *             generated.</p>
                */
            Formats?: (SubtitleFormat | string)[];
            /**
                * <p>Specify the starting value that is assigned to the first subtitle segment.</p>
                *         <p>The default start index for Amazon Transcribe is <code>0</code>, which differs from
                *             the more widely used standard of <code>1</code>. If you're uncertain which value to use,
                *             we recommend choosing <code>1</code>, as this may improve compatibility with other
                *             services.</p>
                */
            OutputStartIndex?: number;
    }
    export namespace Subtitles {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Subtitles) => any;
    }
    export interface StartTranscriptionJobRequest {
            /**
                * <p>A unique name, chosen by you, for your transcription job. The name you specify is
                *             also used as the default name of your transcription output file. If you want to specify a different
                *             name for your transcription output, use the <code>OutputKey</code> parameter.</p>
                *         <p>This name is case sensitive, cannot contain spaces, and must be unique within an
                *             Amazon Web Services account. If you try to create a new job with the same name as an
                *             existing job, you get a <code>ConflictException</code> error.</p>
                */
            TranscriptionJobName: string | undefined;
            /**
                * <p>The language code that represents the language spoken in the input media file.</p>
                *         <p>If you're unsure of the language spoken in your media file, consider using
                *             <code>IdentifyLanguage</code> or <code>IdentifyMultipleLanguages</code> to enable
                *             automatic language identification.</p>
                *         <p>Note that you must include one of <code>LanguageCode</code>,
                *             <code>IdentifyLanguage</code>, or <code>IdentifyMultipleLanguages</code> in your
                *             request. If you include more than one of these parameters, your transcription job
                *             fails.</p>
                *         <p>For a list of supported languages and their associated language codes, refer to the
                *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported
                *                 languages</a> table.</p>
                *         <note>
                *             <p>To transcribe speech in Modern Standard Arabic (<code>ar-SA</code>), your media file
                *             must be encoded at a sample rate of 16,000 Hz or higher.</p>
                *         </note>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The sample rate, in Hertz, of the audio track in your input media file.</p>
                *         <p>If you don't specify the media sample rate, Amazon Transcribe determines it for you. If you
                *             specify the sample rate, it must match the rate detected by Amazon Transcribe; if there's a
                *             mismatch between the value you specify and the value detected, your job fails. Therefore, in most
                *             cases, it's advised to omit <code>MediaSampleRateHertz</code> and let Amazon Transcribe
                *             determine the sample rate.</p>
                */
            MediaSampleRateHertz?: number;
            /**
                * <p>Specify the format of your input media file.</p>
                */
            MediaFormat?: MediaFormat | string;
            /**
                * <p>Describes the Amazon S3 location of the media file you want to use in your
                *             request.</p>
                */
            Media: Media | undefined;
            /**
                * <p>The name of the Amazon S3 bucket where you want your transcription output
                *             stored. Do not include the <code>S3://</code> prefix of the specified bucket.</p>
                *         <p>If you want your output to go to a sub-folder of this bucket, specify it using the
                *             <code>OutputKey</code> parameter; <code>OutputBucketName</code> only accepts the
                *             name of a bucket.</p>
                *         <p>For example, if you want your output stored in <code>S3://DOC-EXAMPLE-BUCKET</code>,
                *             set <code>OutputBucketName</code> to <code>DOC-EXAMPLE-BUCKET</code>. However, if
                *             you want your output stored in <code>S3://DOC-EXAMPLE-BUCKET/test-files/</code>, set
                *             <code>OutputBucketName</code> to <code>DOC-EXAMPLE-BUCKET</code> and
                *             <code>OutputKey</code> to <code>test-files/</code>.</p>
                *         <p>Note that Amazon Transcribe must have permission to use the specified location. You
                *             can change Amazon S3 permissions using the <a href="https://console.aws.amazon.com/s3">Amazon Web Services Management Console</a>. See also <a href="https://docs.aws.amazon.com/transcribe/latest/dg/security_iam_id-based-policy-examples.html#auth-role-iam-user">Permissions
                *                     Required for IAM User Roles</a>.</p>
                *         <p>If you don't specify <code>OutputBucketName</code>, your transcript is placed in a
                *             service-managed Amazon S3 bucket and you are provided with a URI to access your
                *             transcript.</p>
                */
            OutputBucketName?: string;
            /**
                * <p>Use in combination with <code>OutputBucketName</code> to specify the output location of
                *             your transcript and, optionally, a unique name for your output file. The default name for your
                *             transcription output is the same as the name you specified for your transcription job
                *             (<code>TranscriptionJobName</code>).</p>
                *         <p>Here are some examples of how you can use <code>OutputKey</code>:</p>
                *         <ul>
                *             <li>
                *                 <p>If you specify 'DOC-EXAMPLE-BUCKET' as the <code>OutputBucketName</code>
                *                     and 'my-transcript.json' as the <code>OutputKey</code>, your transcription output
                *                     path is <code>s3://DOC-EXAMPLE-BUCKET/my-transcript.json</code>.</p>
                *             </li>
                *             <li>
                *                 <p>If you specify 'my-first-transcription' as the <code>TranscriptionJobName</code>,
                *                     'DOC-EXAMPLE-BUCKET' as the <code>OutputBucketName</code>, and
                *                     'my-transcript' as the <code>OutputKey</code>, your transcription output path is
                *                     <code>s3://DOC-EXAMPLE-BUCKET/my-transcript/my-first-transcription.json</code>.</p>
                *             </li>
                *             <li>
                *                 <p>If you specify 'DOC-EXAMPLE-BUCKET' as the <code>OutputBucketName</code>
                *                     and 'test-files/my-transcript.json' as the <code>OutputKey</code>, your transcription
                *                     output path is
                *                     <code>s3://DOC-EXAMPLE-BUCKET/test-files/my-transcript.json</code>.</p>
                *             </li>
                *             <li>
                *                 <p>If you specify 'my-first-transcription' as the <code>TranscriptionJobName</code>,
                *                     'DOC-EXAMPLE-BUCKET' as the <code>OutputBucketName</code>, and
                *                     'test-files/my-transcript' as the <code>OutputKey</code>, your transcription output
                *                     path is
                *                     <code>s3://DOC-EXAMPLE-BUCKET/test-files/my-transcript/my-first-transcription.json</code>.</p>
                *             </li>
                *          </ul>
                *         <p>If you specify the name of an Amazon S3 bucket sub-folder that doesn't exist, one is
                *             created for you.</p>
                */
            OutputKey?: string;
            /**
                * <p>The KMS key you want to use to encrypt your transcription output.</p>
                *         <p>If using a key located in the <b>current</b>
                *             Amazon Web Services account, you can specify your KMS key in one of
                *             four ways:</p>
                *         <ol>
                *             <li>
                *                 <p>Use the KMS key ID itself. For example,
                *                     <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Use an alias for the KMS key ID. For example,
                *                     <code>alias/ExampleAlias</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Use the Amazon Resource Name (ARN) for the KMS key ID. For
                *                     example,                    <code>arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Use the ARN for the KMS key alias. For example,
                *                     <code>arn:aws:kms:region:account-ID:alias/ExampleAlias</code>.</p>
                *             </li>
                *          </ol>
                *         <p>If using a key located in a <b>different</b>
                *             Amazon Web Services account than the current Amazon Web Services account, you can
                *             specify your KMS key in one of two ways:</p>
                *         <ol>
                *             <li>
                *                 <p>Use the ARN for the KMS key ID. For example,                     <code>arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Use the ARN for the KMS key alias. For example,
                *                     <code>arn:aws:kms:region:account-ID:alias/ExampleAlias</code>.</p>
                *             </li>
                *          </ol>
                *         <p>If you don't specify an encryption key, your output is encrypted with the default
                *             Amazon S3 key (SSE-S3).</p>
                *         <p>If you specify a KMS key to encrypt your output, you must also specify
                *             an output location using the <code>OutputLocation</code> parameter.</p>
                *         <p>Note that the user making the
                *             request must have permission to use the specified KMS key.</p>
                */
            OutputEncryptionKMSKeyId?: string;
            /**
                * <p>A map of plain text, non-secret key:value pairs, known as encryption context pairs, that
                *             provide an added layer of security for your data. For more information, see
                *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/key-management.html#kms-context">KMS
                *                 encryption context</a> and <a href="https://docs.aws.amazon.com/transcribe/latest/dg/symmetric-asymmetric.html">Asymmetric keys in
                *                     KMS</a>.</p>
                */
            KMSEncryptionContext?: Record<string, string>;
            /**
                * <p>Specify additional optional settings in your
                *             request, including channel identification, alternative transcriptions, speaker labeling; allows
                *             you to apply custom vocabularies and vocabulary filters.</p>
                *         <p>If you want to include a custom vocabulary or a custom vocabulary filter (or both) with
                *             your request but <b>do not</b> want to use automatic
                *             language identification, use <code>Settings</code> with the <code>VocabularyName</code>
                *             or <code>VocabularyFilterName</code> (or both) sub-parameter.</p>
                *         <p>If you're using automatic language identification with your request and want to include a
                *             custom language model, a custom vocabulary, or a custom vocabulary filter, use instead the
                *             <code></code> parameter with the
                *             <code>LanguageModelName</code>, <code>VocabularyName</code>
                *             or <code>VocabularyFilterName</code> sub-parameters.</p>
                */
            Settings?: Settings;
            /**
                * <p>Specify the custom language model you want to include with your transcription job. If you
                *             include <code>ModelSettings</code> in your request, you must include the
                *             <code>LanguageModelName</code> sub-parameter.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/custom-language-models.html">Custom language
                *             models</a>.</p>
                */
            ModelSettings?: ModelSettings;
            /**
                * <p>Allows you to control how your transcription job is processed. Currently, the only
                *             <code>JobExecutionSettings</code> modification you can choose is enabling job queueing using
                *             the <code>AllowDeferredExecution</code> sub-parameter.</p>
                *         <p>If you include <code>JobExecutionSettings</code> in your request, you must also include
                *             the sub-parameters: <code>AllowDeferredExecution</code> and
                *             <code>DataAccessRoleArn</code>.</p>
                */
            JobExecutionSettings?: JobExecutionSettings;
            /**
                * <p>Allows you to redact or flag specified personally identifiable information (PII) in your transcript. If
                *             you use <code>ContentRedaction</code>, you must also include the sub-parameters:
                *             <code>PiiEntityTypes</code>, <code>RedactionOutput</code>, and
                *             <code>RedactionType</code>.</p>
                */
            ContentRedaction?: ContentRedaction;
            /**
                * <p>Enables automatic language identification in your transcription job request.</p>
                *         <p>If you include <code>IdentifyLanguage</code>, you can optionally include a list of
                *             language codes, using <code>LanguageOptions</code>, that you think may be present in
                *             your media file. Including language options can improve transcription accuracy.</p>
                *         <p>If you want to apply a custom language model, a custom vocabulary, or a custom
                *             vocabulary filter to your automatic language identification request, include
                *             <code>LanguageIdSettings</code> with the relevant sub-parameters
                *             (<code>VocabularyName</code>, <code>LanguageModelName</code>, and
                *             <code>VocabularyFilterName</code>).</p>
                *         <p>Note that you must include one of <code>LanguageCode</code>,
                *             <code>IdentifyLanguage</code>, or <code>IdentifyMultipleLanguages</code> in your
                *             request. If you include more than one of these parameters, your transcription job
                *             fails.</p>
                */
            IdentifyLanguage?: boolean;
            /**
                * <p>Enables automatic multi-language identification in your transcription job request. Use this
                *             parameter if your media file contains more than one language.</p>
                *         <p>If you include <code>IdentifyMultipleLanguages</code>, you can optionally include a list
                *             of language codes, using <code>LanguageOptions</code>, that you think may be present in
                *             your media file. Including language options can improve transcription accuracy.</p>
                *         <p>If you want to apply a custom vocabulary or a custom vocabulary filter to your automatic
                *             language identification request, include <code>LanguageIdSettings</code> with the relevant
                *             sub-parameters (<code>VocabularyName</code> and
                *             <code>VocabularyFilterName</code>).</p>
                *         <p>Note that you must include one of <code>LanguageCode</code>,
                *             <code>IdentifyLanguage</code>, or <code>IdentifyMultipleLanguages</code> in your
                *             request. If you include more than one of these parameters, your transcription job fails.</p>
                */
            IdentifyMultipleLanguages?: boolean;
            /**
                * <p>You can specify two or more language codes that represent the languages you think may
                *             be present in your media; including more than five is not recommended. If you're unsure what
                *             languages are present, do not include this parameter.</p>
                *         <p>If you include <code>LanguageOptions</code> in your request, you must also include
                *             <code>IdentifyLanguage</code>.</p>
                *         <p>For more information, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a>.</p>
                *         <p>To transcribe speech in Modern Standard Arabic (<code>ar-SA</code>), your media file
                *             must be encoded at a sample rate of 16,000 Hz or higher.</p>
                */
            LanguageOptions?: (LanguageCode | string)[];
            /**
                * <p>Produces subtitle files for your input media. You can specify WebVTT (*.vtt) and SubRip
                *             (*.srt) formats.</p>
                */
            Subtitles?: Subtitles;
            /**
                * <p>Adds one or more custom tags, each in the form of a key:value pair, to a new transcription
                *             job at the time you start this new job.</p>
                *         <p>To learn more about using tags with Amazon Transcribe, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html">Tagging resources</a>.</p>
                */
            Tags?: Tag[];
            /**
                * <p>If using automatic language identification (<code>IdentifyLanguage</code>) in your request
                *             and you want to apply a custom language model, a custom vocabulary, or a custom vocabulary
                *             filter, include <code>LanguageIdSettings</code> with the relevant sub-parameters
                *             (<code>VocabularyName</code>, <code>LanguageModelName</code>, and
                *             <code>VocabularyFilterName</code>).</p>
                *         <p>You can specify two or more language codes that represent the languages you think may be
                *             present in your media; including more than five is not recommended. Each language code you
                *             include can have an associated custom language model, custom vocabulary, and custom
                *             vocabulary filter. The languages you specify must match the languages of the specified custom
                *             language models, custom vocabularies, and custom vocabulary filters.</p>
                *         <p>To include language options using <code>IdentifyLanguage</code>
                *             <b>without</b> including a custom language model, a custom
                *             vocabulary, or a custom vocabulary filter, use <code>LanguageOptions</code> instead of
                *             <code>LanguageIdSettings</code>. Including language options can improve the accuracy of
                *             automatic language identification.</p>
                *         <p>If you want to include a custom language model with your request but
                *             <b>do not</b> want to use automatic language identification,
                *             use instead the <code></code> parameter with the
                *             <code>LanguageModelName</code> sub-parameter.</p>
                *         <p>If you want to include a custom vocabulary or a custom vocabulary filter (or both) with
                *             your request but <b>do not</b> want to use automatic
                *             language identification, use instead the <code></code>
                *             parameter with the <code>VocabularyName</code> or
                *             <code>VocabularyFilterName</code> (or both) sub-parameter.</p>
                */
            LanguageIdSettings?: Record<string, LanguageIdSettings>;
    }
    export namespace StartTranscriptionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartTranscriptionJobRequest) => any;
    }
    export interface StartTranscriptionJobResponse {
            /**
                * <p>Provides detailed information about the current transcription job, including job status
                *             and, if applicable, failure reason.</p>
                */
            TranscriptionJob?: TranscriptionJob;
    }
    export namespace StartTranscriptionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartTranscriptionJobResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource you want to tag. ARNs have the format
                *             <code>arn:partition:service:region:account-id:resource-type/resource-id</code>.</p>
                *         <p>For example,
                *             <code>arn:aws:transcribe:us-west-2:account-id:transcription-job/transcription-job-name</code>.</p>
                *         <p>Valid values for <code>resource-type</code> are: <code>transcription-job</code>,
                *             <code>medical-transcription-job</code>, <code>vocabulary</code>,
                *             <code>medical-vocabulary</code>, <code>vocabulary-filter</code>, and
                *             <code>language-model</code>.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>Adds one or more custom tags, each in the form of a key:value pair, to the specified
                *             resource.</p>
                *         <p>To learn more about using tags with Amazon Transcribe, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html">Tagging resources</a>.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon Transcribe resource you want to remove
                *             tags from. ARNs have the format
                *             <code>arn:partition:service:region:account-id:resource-type/resource-id</code>.</p>
                *         <p>For example,
                *             <code>arn:aws:transcribe:us-west-2:account-id:transcription-job/transcription-job-name</code>.</p>
                *         <p>Valid values for <code>resource-type</code> are: <code>transcription-job</code>,
                *             <code>medical-transcription-job</code>, <code>vocabulary</code>,
                *             <code>medical-vocabulary</code>, <code>vocabulary-filter</code>, and
                *             <code>language-model</code>.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>Removes the specified tag keys from the specified Amazon Transcribe resource.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateCallAnalyticsCategoryRequest {
            /**
                * <p>The name of the Call Analytics category you want to update. Category names are case
                *             sensitive.</p>
                */
            CategoryName: string | undefined;
            /**
                * <p>The rules used for the updated Call Analytics category. The rules you provide in this field
                *             replace the ones that are currently being used in the specified category.</p>
                */
            Rules: Rule[] | undefined;
    }
    export namespace UpdateCallAnalyticsCategoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateCallAnalyticsCategoryRequest) => any;
    }
    export interface UpdateCallAnalyticsCategoryResponse {
            /**
                * <p>Provides you with the properties of the Call Analytics category you specified in your
                *             <code>UpdateCallAnalyticsCategory</code> request.</p>
                */
            CategoryProperties?: CategoryProperties;
    }
    export namespace UpdateCallAnalyticsCategoryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateCallAnalyticsCategoryResponse) => any;
    }
    export interface UpdateMedicalVocabularyRequest {
            /**
                * <p>The name of the custom medical vocabulary you want to update. Vocabulary names are
                *             case sensitive.</p>
                */
            VocabularyName: string | undefined;
            /**
                * <p>The language code that represents the language of the entries in the custom vocabulary
                *             you want to update. US English (<code>en-US</code>) is the only language supported with
                *             Amazon Transcribe Medical.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
            /**
                * <p>The Amazon S3 location of the text file that contains your custom medical
                *             vocabulary. The URI must be located in the same Amazon Web Services Region as the resource
                *             you're calling.</p>
                *         <p>Here's an example URI path:
                *             <code>s3://DOC-EXAMPLE-BUCKET/my-vocab-file.txt</code>
                *          </p>
                */
            VocabularyFileUri?: string;
    }
    export namespace UpdateMedicalVocabularyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateMedicalVocabularyRequest) => any;
    }
    export interface UpdateMedicalVocabularyResponse {
            /**
                * <p>The name of the updated custom medical vocabulary.</p>
                */
            VocabularyName?: string;
            /**
                * <p>The language code you selected for your medical vocabulary. US English
                *             (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The date and time the specified custom medical vocabulary was last updated.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7
                *             on May 4, 2022.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The processing state of your custom medical vocabulary. If the state is
                *             <code>READY</code>, you can use the vocabulary in a
                *             <code>StartMedicalTranscriptionJob</code> request.</p>
                */
            VocabularyState?: VocabularyState | string;
    }
    export namespace UpdateMedicalVocabularyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateMedicalVocabularyResponse) => any;
    }
    export interface UpdateVocabularyRequest {
            /**
                * <p>The name of the custom vocabulary you want to update. Vocabulary names are
                *             case sensitive.</p>
                */
            VocabularyName: string | undefined;
            /**
                * <p>The language code that represents the language of the entries in the custom vocabulary
                *             you want to update. Each vocabulary must contain terms in only one language.</p>
                *         <p>A custom vocabulary can only be used to transcribe files in the same language as the
                *             vocabulary. For example, if you create a vocabulary using US English (<code>en-US</code>),
                *             you can only apply this vocabulary to files that contain English audio.</p>
                *         <p>For a list of supported languages and their associated language codes, refer to the
                *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported
                *                 languages</a> table.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
            /**
                * <p>Use this parameter if you want to update your vocabulary by including all desired terms, as
                *             comma-separated values, within your request. The other option for updating your vocabulary is to
                *             save your entries in a text file and upload them to an Amazon S3 bucket, then specify
                *             the location of your file using the <code>VocabularyFileUri</code> parameter.</p>
                *         <p>Note that if you include <code>Phrases</code> in your request, you cannot use
                *             <code>VocabularyFileUri</code>; you must choose one or the other.</p>
                *         <p>Each language has a character set that contains all allowed characters for that specific
                *             language. If you use unsupported characters, your vocabulary filter request fails. Refer to
                *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/charsets.html">Character Sets for
                *                 Custom Vocabularies</a> to get the character set for your language.</p>
                */
            Phrases?: string[];
            /**
                * <p>The Amazon S3 location of the text file that contains your custom vocabulary. The
                *             URI must be located in the same Amazon Web Services Region as the resource you're
                *             calling.</p>
                *         <p>Here's an example URI path:
                *             <code>s3://DOC-EXAMPLE-BUCKET/my-vocab-file.txt</code>
                *          </p>
                *         <p>Note that if you include <code>VocabularyFileUri</code> in your request, you
                *             cannot use the <code>Phrases</code> flag; you must choose one or the other.</p>
                */
            VocabularyFileUri?: string;
    }
    export namespace UpdateVocabularyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateVocabularyRequest) => any;
    }
    export interface UpdateVocabularyResponse {
            /**
                * <p>The name of the updated custom vocabulary.</p>
                */
            VocabularyName?: string;
            /**
                * <p>The language code you selected for your custom vocabulary.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The date and time the specified vocabulary was last updated.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7
                *             on May 4, 2022.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The processing state of your custom vocabulary. If the state is <code>READY</code>, you
                *             can use the vocabulary in a <code>StartTranscriptionJob</code> request.</p>
                */
            VocabularyState?: VocabularyState | string;
    }
    export namespace UpdateVocabularyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateVocabularyResponse) => any;
    }
    export interface UpdateVocabularyFilterRequest {
            /**
                * <p>The name of the custom vocabulary filter you want to update. Vocabulary filter names
                *             are case sensitive.</p>
                */
            VocabularyFilterName: string | undefined;
            /**
                * <p>Use this parameter if you want to update your vocabulary filter by including all desired terms,
                *             as comma-separated values, within your request. The other option for updating your vocabulary
                *             filter is to save your entries in a text file and upload them to an Amazon S3 bucket, then
                *             specify the location of your file using the <code>VocabularyFilterFileUri</code>
                *             parameter.</p>
                *         <p>Note that if you include <code>Words</code> in your request, you cannot use
                *             <code>VocabularyFilterFileUri</code>; you must choose one or the other.</p>
                *         <p>Each language has a character set that contains all allowed characters for that specific
                *             language. If you use unsupported characters, your vocabulary filter request fails. Refer to
                *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/charsets.html">Character Sets for
                *                 Custom Vocabularies</a> to get the character set for your language.</p>
                */
            Words?: string[];
            /**
                * <p>The Amazon S3 location of the text file that contains your custom vocabulary filter
                *             terms. The URI must be located in the same Amazon Web Services Region as the resource you're
                *             calling.</p>
                *         <p>Here's an example URI path:
                *             <code>s3://DOC-EXAMPLE-BUCKET/my-vocab-filter-file.txt</code>
                *          </p>
                *         <p>Note that if you include <code>VocabularyFilterFileUri</code> in your request, you
                *             cannot use <code>Words</code>; you must choose one or the other.</p>
                */
            VocabularyFilterFileUri?: string;
    }
    export namespace UpdateVocabularyFilterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateVocabularyFilterRequest) => any;
    }
    export interface UpdateVocabularyFilterResponse {
            /**
                * <p>The name of the updated custom vocabulary filter.</p>
                */
            VocabularyFilterName?: string;
            /**
                * <p>The language code you selected for your vocabulary filter.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The date and time the specified vocabulary filter was last updated.</p>
                *         <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For
                *             example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7
                *             on May 4, 2022.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace UpdateVocabularyFilterResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateVocabularyFilterResponse) => any;
    }
}

declare module '@aws-sdk/client-transcribe/node_modules/@aws-sdk/client-transcribe/dist-types/models/TranscribeServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Transcribe service.
        */
    export class TranscribeServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

