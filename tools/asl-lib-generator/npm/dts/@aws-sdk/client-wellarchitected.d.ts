// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-wellarchitected' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AssociateLensesCommandInput, AssociateLensesCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/AssociateLensesCommand";
    import { CreateLensShareCommandInput, CreateLensShareCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/CreateLensShareCommand";
    import { CreateLensVersionCommandInput, CreateLensVersionCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/CreateLensVersionCommand";
    import { CreateMilestoneCommandInput, CreateMilestoneCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/CreateMilestoneCommand";
    import { CreateWorkloadCommandInput, CreateWorkloadCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/CreateWorkloadCommand";
    import { CreateWorkloadShareCommandInput, CreateWorkloadShareCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/CreateWorkloadShareCommand";
    import { DeleteLensCommandInput, DeleteLensCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/DeleteLensCommand";
    import { DeleteLensShareCommandInput, DeleteLensShareCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/DeleteLensShareCommand";
    import { DeleteWorkloadCommandInput, DeleteWorkloadCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/DeleteWorkloadCommand";
    import { DeleteWorkloadShareCommandInput, DeleteWorkloadShareCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/DeleteWorkloadShareCommand";
    import { DisassociateLensesCommandInput, DisassociateLensesCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/DisassociateLensesCommand";
    import { ExportLensCommandInput, ExportLensCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ExportLensCommand";
    import { GetAnswerCommandInput, GetAnswerCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/GetAnswerCommand";
    import { GetLensCommandInput, GetLensCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/GetLensCommand";
    import { GetLensReviewCommandInput, GetLensReviewCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/GetLensReviewCommand";
    import { GetLensReviewReportCommandInput, GetLensReviewReportCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/GetLensReviewReportCommand";
    import { GetLensVersionDifferenceCommandInput, GetLensVersionDifferenceCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/GetLensVersionDifferenceCommand";
    import { GetMilestoneCommandInput, GetMilestoneCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/GetMilestoneCommand";
    import { GetWorkloadCommandInput, GetWorkloadCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/GetWorkloadCommand";
    import { ImportLensCommandInput, ImportLensCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ImportLensCommand";
    import { ListAnswersCommandInput, ListAnswersCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListAnswersCommand";
    import { ListLensesCommandInput, ListLensesCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListLensesCommand";
    import { ListLensReviewImprovementsCommandInput, ListLensReviewImprovementsCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListLensReviewImprovementsCommand";
    import { ListLensReviewsCommandInput, ListLensReviewsCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListLensReviewsCommand";
    import { ListLensSharesCommandInput, ListLensSharesCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListLensSharesCommand";
    import { ListMilestonesCommandInput, ListMilestonesCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListMilestonesCommand";
    import { ListNotificationsCommandInput, ListNotificationsCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListNotificationsCommand";
    import { ListShareInvitationsCommandInput, ListShareInvitationsCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListShareInvitationsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListTagsForResourceCommand";
    import { ListWorkloadsCommandInput, ListWorkloadsCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListWorkloadsCommand";
    import { ListWorkloadSharesCommandInput, ListWorkloadSharesCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListWorkloadSharesCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UntagResourceCommand";
    import { UpdateAnswerCommandInput, UpdateAnswerCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UpdateAnswerCommand";
    import { UpdateGlobalSettingsCommandInput, UpdateGlobalSettingsCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UpdateGlobalSettingsCommand";
    import { UpdateLensReviewCommandInput, UpdateLensReviewCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UpdateLensReviewCommand";
    import { UpdateShareInvitationCommandInput, UpdateShareInvitationCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UpdateShareInvitationCommand";
    import { UpdateWorkloadCommandInput, UpdateWorkloadCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UpdateWorkloadCommand";
    import { UpdateWorkloadShareCommandInput, UpdateWorkloadShareCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UpdateWorkloadShareCommand";
    import { UpgradeLensReviewCommandInput, UpgradeLensReviewCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UpgradeLensReviewCommand";
    import { WellArchitectedClient } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    /**
        * <fullname>Well-Architected Tool</fullname>
        *
        *          <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the
        *             <a href="http://aws.amazon.com/well-architected-tool">Well-Architected Tool</a> in the
        *            <a href="https://console.aws.amazon.com/wellarchitected">Amazon Web Services Management Console</a>. For information
        *             about the Well-Architected Tool, see the
        *            <a href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html">Well-Architected Tool User Guide</a>.</p>
        */
    export class WellArchitected extends WellArchitectedClient {
            /**
                * <p>Associate a lens to a workload.</p>
                *         <p>Up to 10 lenses can be associated with a workload in a single API operation. A
                *         maximum of 20 lenses can be associated with a workload.</p>
                *         <note>
                *             <p>
                *                <b>Disclaimer</b>
                *             </p>
                *             <p>By accessing and/or applying custom lenses created by another Amazon Web Services user or account,
                *             you acknowledge that custom lenses created by other users and shared with you are
                *             Third Party Content as defined in the Amazon Web Services Customer Agreement.    </p>
                *          </note>
                */
            associateLenses(args: AssociateLensesCommandInput, options?: __HttpHandlerOptions): Promise<AssociateLensesCommandOutput>;
            associateLenses(args: AssociateLensesCommandInput, cb: (err: any, data?: AssociateLensesCommandOutput) => void): void;
            associateLenses(args: AssociateLensesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateLensesCommandOutput) => void): void;
            /**
                * <p>Create a lens share.</p>
                *         <p>The owner of a lens can share it with other Amazon Web Services accounts and IAM users in the same Amazon Web Services Region.
                *             Shared access to a lens is not removed until the lens invitation is deleted.</p>
                *         <note>
                *             <p>
                *                <b>Disclaimer</b>
                *             </p>
                *             <p>By sharing your custom lenses with other Amazon Web Services accounts,
                *                 you acknowledge that Amazon Web Services will make your custom lenses available to those
                *                 other accounts. Those other accounts may continue to access and use your
                *                 shared custom lenses even if you delete the custom lenses
                *                 from your own Amazon Web Services account or terminate
                *                 your Amazon Web Services account.</p>
                *          </note>
                */
            createLensShare(args: CreateLensShareCommandInput, options?: __HttpHandlerOptions): Promise<CreateLensShareCommandOutput>;
            createLensShare(args: CreateLensShareCommandInput, cb: (err: any, data?: CreateLensShareCommandOutput) => void): void;
            createLensShare(args: CreateLensShareCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLensShareCommandOutput) => void): void;
            /**
                * <p>Create a new lens version.</p>
                *         <p>A lens can have up to 100 versions.</p>
                *         <p>After a lens has been imported, create a new lens version to publish it.  The owner of a lens can share the lens with other
                *             Amazon Web Services accounts and IAM users in the same Amazon Web Services Region. Only the owner of a lens can delete it.
                *         </p>
                */
            createLensVersion(args: CreateLensVersionCommandInput, options?: __HttpHandlerOptions): Promise<CreateLensVersionCommandOutput>;
            createLensVersion(args: CreateLensVersionCommandInput, cb: (err: any, data?: CreateLensVersionCommandOutput) => void): void;
            createLensVersion(args: CreateLensVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLensVersionCommandOutput) => void): void;
            /**
                * <p>Create a milestone for an existing workload.</p>
                */
            createMilestone(args: CreateMilestoneCommandInput, options?: __HttpHandlerOptions): Promise<CreateMilestoneCommandOutput>;
            createMilestone(args: CreateMilestoneCommandInput, cb: (err: any, data?: CreateMilestoneCommandOutput) => void): void;
            createMilestone(args: CreateMilestoneCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateMilestoneCommandOutput) => void): void;
            /**
                * <p>Create a new workload.</p>
                *         <p>The owner of a workload can share the workload with other Amazon Web Services accounts and IAM users
                *             in the same Amazon Web Services Region. Only the owner of a workload can delete it.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/define-workload.html">Defining a Workload</a> in the
                *                 <i>Well-Architected Tool User Guide</i>.</p>
                */
            createWorkload(args: CreateWorkloadCommandInput, options?: __HttpHandlerOptions): Promise<CreateWorkloadCommandOutput>;
            createWorkload(args: CreateWorkloadCommandInput, cb: (err: any, data?: CreateWorkloadCommandOutput) => void): void;
            createWorkload(args: CreateWorkloadCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateWorkloadCommandOutput) => void): void;
            /**
                * <p>Create a workload share.</p>
                *         <p>The owner of a workload can share it with other Amazon Web Services accounts and IAM users in the same
                *             Amazon Web Services Region. Shared access to a workload is not removed until the workload invitation is
                *             deleted.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/workloads-sharing.html">Sharing a Workload</a> in the
                *                 <i>Well-Architected Tool User Guide</i>.</p>
                */
            createWorkloadShare(args: CreateWorkloadShareCommandInput, options?: __HttpHandlerOptions): Promise<CreateWorkloadShareCommandOutput>;
            createWorkloadShare(args: CreateWorkloadShareCommandInput, cb: (err: any, data?: CreateWorkloadShareCommandOutput) => void): void;
            createWorkloadShare(args: CreateWorkloadShareCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateWorkloadShareCommandOutput) => void): void;
            /**
                * <p>Delete an existing lens.</p>
                *         <p>Only the owner of a lens can delete it.  After the lens is deleted,  Amazon Web Services accounts and IAM users
                *               that you shared the lens with can continue to use it, but they will no longer be able to apply it to new workloads.
                *         </p>
                *         <note>
                *             <p>
                *                <b>Disclaimer</b>
                *             </p>
                *             <p>By sharing your custom lenses with other Amazon Web Services accounts,
                *                 you acknowledge that Amazon Web Services will make your custom lenses available to those
                *                 other accounts. Those other accounts may continue to access and use your
                *                 shared custom lenses even if you delete the custom lenses
                *                 from your own Amazon Web Services account or terminate
                *                 your Amazon Web Services account.</p>
                *          </note>
                */
            deleteLens(args: DeleteLensCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLensCommandOutput>;
            deleteLens(args: DeleteLensCommandInput, cb: (err: any, data?: DeleteLensCommandOutput) => void): void;
            deleteLens(args: DeleteLensCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLensCommandOutput) => void): void;
            /**
                * <p>Delete a lens share.</p>
                *         <p>After the lens share is deleted,  Amazon Web Services accounts and IAM users
                *             that you shared the lens with can continue to use it, but they will no longer be able to apply it to new workloads.</p>
                *         <note>
                *             <p>
                *                <b>Disclaimer</b>
                *             </p>
                *             <p>By sharing your custom lenses with other Amazon Web Services accounts,
                *                 you acknowledge that Amazon Web Services will make your custom lenses available to those
                *                 other accounts. Those other accounts may continue to access and use your
                *                 shared custom lenses even if you delete the custom lenses
                *                 from your own Amazon Web Services account or terminate
                *                 your Amazon Web Services account.</p>
                *          </note>
                */
            deleteLensShare(args: DeleteLensShareCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLensShareCommandOutput>;
            deleteLensShare(args: DeleteLensShareCommandInput, cb: (err: any, data?: DeleteLensShareCommandOutput) => void): void;
            deleteLensShare(args: DeleteLensShareCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLensShareCommandOutput) => void): void;
            /**
                * <p>Delete an existing workload.</p>
                */
            deleteWorkload(args: DeleteWorkloadCommandInput, options?: __HttpHandlerOptions): Promise<DeleteWorkloadCommandOutput>;
            deleteWorkload(args: DeleteWorkloadCommandInput, cb: (err: any, data?: DeleteWorkloadCommandOutput) => void): void;
            deleteWorkload(args: DeleteWorkloadCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteWorkloadCommandOutput) => void): void;
            /**
                * <p>Delete a workload share.</p>
                */
            deleteWorkloadShare(args: DeleteWorkloadShareCommandInput, options?: __HttpHandlerOptions): Promise<DeleteWorkloadShareCommandOutput>;
            deleteWorkloadShare(args: DeleteWorkloadShareCommandInput, cb: (err: any, data?: DeleteWorkloadShareCommandOutput) => void): void;
            deleteWorkloadShare(args: DeleteWorkloadShareCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteWorkloadShareCommandOutput) => void): void;
            /**
                * <p>Disassociate a lens from a workload.</p>
                *         <p>Up to 10 lenses can be disassociated from a workload in a single API operation.</p>
                *         <note>
                *             <p>The Amazon Web Services Well-Architected Framework lens (<code>wellarchitected</code>) cannot be
                *                 removed from a workload.</p>
                *         </note>
                */
            disassociateLenses(args: DisassociateLensesCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateLensesCommandOutput>;
            disassociateLenses(args: DisassociateLensesCommandInput, cb: (err: any, data?: DisassociateLensesCommandOutput) => void): void;
            disassociateLenses(args: DisassociateLensesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateLensesCommandOutput) => void): void;
            /**
                * <p>Export an existing lens.</p>
                *         <p>Lenses are defined in JSON. For more information, see <a href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/lenses-format-specification.html">JSON format specification</a>
                *             in the <i>Well-Architected Tool User Guide</i>. Only the owner of a lens can export it.
                *         </p>
                *         <note>
                *             <p>
                *                <b>Disclaimer</b>
                *             </p>
                *             <p>Do not include or gather personal identifiable information (PII) of end users or
                *                 other identifiable individuals in or via your custom lenses. If your custom
                *                 lens or those shared with you and used in your account do include or collect
                *                 PII you are responsible for: ensuring that the included PII is processed in accordance
                *                 with applicable law, providing adequate privacy notices, and obtaining necessary
                *                 consents for processing such data.</p>
                *          </note>
                */
            exportLens(args: ExportLensCommandInput, options?: __HttpHandlerOptions): Promise<ExportLensCommandOutput>;
            exportLens(args: ExportLensCommandInput, cb: (err: any, data?: ExportLensCommandOutput) => void): void;
            exportLens(args: ExportLensCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ExportLensCommandOutput) => void): void;
            /**
                * <p>Get the answer to a specific question in a workload review.</p>
                */
            getAnswer(args: GetAnswerCommandInput, options?: __HttpHandlerOptions): Promise<GetAnswerCommandOutput>;
            getAnswer(args: GetAnswerCommandInput, cb: (err: any, data?: GetAnswerCommandOutput) => void): void;
            getAnswer(args: GetAnswerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAnswerCommandOutput) => void): void;
            /**
                * <p>Get an existing lens.</p>
                */
            getLens(args: GetLensCommandInput, options?: __HttpHandlerOptions): Promise<GetLensCommandOutput>;
            getLens(args: GetLensCommandInput, cb: (err: any, data?: GetLensCommandOutput) => void): void;
            getLens(args: GetLensCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLensCommandOutput) => void): void;
            /**
                * <p>Get lens review.</p>
                */
            getLensReview(args: GetLensReviewCommandInput, options?: __HttpHandlerOptions): Promise<GetLensReviewCommandOutput>;
            getLensReview(args: GetLensReviewCommandInput, cb: (err: any, data?: GetLensReviewCommandOutput) => void): void;
            getLensReview(args: GetLensReviewCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLensReviewCommandOutput) => void): void;
            /**
                * <p>Get lens review report.</p>
                */
            getLensReviewReport(args: GetLensReviewReportCommandInput, options?: __HttpHandlerOptions): Promise<GetLensReviewReportCommandOutput>;
            getLensReviewReport(args: GetLensReviewReportCommandInput, cb: (err: any, data?: GetLensReviewReportCommandOutput) => void): void;
            getLensReviewReport(args: GetLensReviewReportCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLensReviewReportCommandOutput) => void): void;
            /**
                * <p>Get lens version differences.</p>
                */
            getLensVersionDifference(args: GetLensVersionDifferenceCommandInput, options?: __HttpHandlerOptions): Promise<GetLensVersionDifferenceCommandOutput>;
            getLensVersionDifference(args: GetLensVersionDifferenceCommandInput, cb: (err: any, data?: GetLensVersionDifferenceCommandOutput) => void): void;
            getLensVersionDifference(args: GetLensVersionDifferenceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLensVersionDifferenceCommandOutput) => void): void;
            /**
                * <p>Get a milestone for an existing workload.</p>
                */
            getMilestone(args: GetMilestoneCommandInput, options?: __HttpHandlerOptions): Promise<GetMilestoneCommandOutput>;
            getMilestone(args: GetMilestoneCommandInput, cb: (err: any, data?: GetMilestoneCommandOutput) => void): void;
            getMilestone(args: GetMilestoneCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMilestoneCommandOutput) => void): void;
            /**
                * <p>Get an existing workload.</p>
                */
            getWorkload(args: GetWorkloadCommandInput, options?: __HttpHandlerOptions): Promise<GetWorkloadCommandOutput>;
            getWorkload(args: GetWorkloadCommandInput, cb: (err: any, data?: GetWorkloadCommandOutput) => void): void;
            getWorkload(args: GetWorkloadCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetWorkloadCommandOutput) => void): void;
            /**
                * <p>Import a new lens.</p>
                *         <p>The lens cannot be applied to workloads or shared with other Amazon Web Services accounts
                *             until it's published with <a>CreateLensVersion</a>
                *          </p>
                *         <p>Lenses are defined in JSON. For more information, see <a href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/lenses-format-specification.html">JSON format specification</a>
                *             in the <i>Well-Architected Tool User Guide</i>.</p>
                *         <p>A custom lens cannot exceed 500 KB in size.</p>
                *
                *         <note>
                *             <p>
                *                <b>Disclaimer</b>
                *             </p>
                *             <p>Do not include or gather personal identifiable information (PII) of end users or
                *                 other identifiable individuals in or via your custom lenses. If your custom
                *                 lens or those shared with you and used in your account do include or collect
                *                 PII you are responsible for: ensuring that the included PII is processed in accordance
                *                 with applicable law, providing adequate privacy notices, and obtaining necessary
                *                 consents for processing such data.</p>
                *          </note>
                */
            importLens(args: ImportLensCommandInput, options?: __HttpHandlerOptions): Promise<ImportLensCommandOutput>;
            importLens(args: ImportLensCommandInput, cb: (err: any, data?: ImportLensCommandOutput) => void): void;
            importLens(args: ImportLensCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ImportLensCommandOutput) => void): void;
            /**
                * <p>List of answers.</p>
                */
            listAnswers(args: ListAnswersCommandInput, options?: __HttpHandlerOptions): Promise<ListAnswersCommandOutput>;
            listAnswers(args: ListAnswersCommandInput, cb: (err: any, data?: ListAnswersCommandOutput) => void): void;
            listAnswers(args: ListAnswersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAnswersCommandOutput) => void): void;
            /**
                * <p>List the available lenses.</p>
                */
            listLenses(args: ListLensesCommandInput, options?: __HttpHandlerOptions): Promise<ListLensesCommandOutput>;
            listLenses(args: ListLensesCommandInput, cb: (err: any, data?: ListLensesCommandOutput) => void): void;
            listLenses(args: ListLensesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLensesCommandOutput) => void): void;
            /**
                * <p>List lens review improvements.</p>
                */
            listLensReviewImprovements(args: ListLensReviewImprovementsCommandInput, options?: __HttpHandlerOptions): Promise<ListLensReviewImprovementsCommandOutput>;
            listLensReviewImprovements(args: ListLensReviewImprovementsCommandInput, cb: (err: any, data?: ListLensReviewImprovementsCommandOutput) => void): void;
            listLensReviewImprovements(args: ListLensReviewImprovementsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLensReviewImprovementsCommandOutput) => void): void;
            /**
                * <p>List lens reviews.</p>
                */
            listLensReviews(args: ListLensReviewsCommandInput, options?: __HttpHandlerOptions): Promise<ListLensReviewsCommandOutput>;
            listLensReviews(args: ListLensReviewsCommandInput, cb: (err: any, data?: ListLensReviewsCommandOutput) => void): void;
            listLensReviews(args: ListLensReviewsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLensReviewsCommandOutput) => void): void;
            /**
                * <p>List the lens shares associated with the lens.</p>
                */
            listLensShares(args: ListLensSharesCommandInput, options?: __HttpHandlerOptions): Promise<ListLensSharesCommandOutput>;
            listLensShares(args: ListLensSharesCommandInput, cb: (err: any, data?: ListLensSharesCommandOutput) => void): void;
            listLensShares(args: ListLensSharesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLensSharesCommandOutput) => void): void;
            /**
                * <p>List all milestones for an existing workload.</p>
                */
            listMilestones(args: ListMilestonesCommandInput, options?: __HttpHandlerOptions): Promise<ListMilestonesCommandOutput>;
            listMilestones(args: ListMilestonesCommandInput, cb: (err: any, data?: ListMilestonesCommandOutput) => void): void;
            listMilestones(args: ListMilestonesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListMilestonesCommandOutput) => void): void;
            /**
                * <p>List lens notifications.</p>
                */
            listNotifications(args: ListNotificationsCommandInput, options?: __HttpHandlerOptions): Promise<ListNotificationsCommandOutput>;
            listNotifications(args: ListNotificationsCommandInput, cb: (err: any, data?: ListNotificationsCommandOutput) => void): void;
            listNotifications(args: ListNotificationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListNotificationsCommandOutput) => void): void;
            /**
                * <p>List  the workload invitations.</p>
                */
            listShareInvitations(args: ListShareInvitationsCommandInput, options?: __HttpHandlerOptions): Promise<ListShareInvitationsCommandOutput>;
            listShareInvitations(args: ListShareInvitationsCommandInput, cb: (err: any, data?: ListShareInvitationsCommandOutput) => void): void;
            listShareInvitations(args: ListShareInvitationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListShareInvitationsCommandOutput) => void): void;
            /**
                * <p>List the tags for a resource.</p>
                *         <note>
                *             <p>The WorkloadArn parameter can be either a workload ARN or a custom lens ARN.</p>
                *          </note>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>List workloads. Paginated.</p>
                */
            listWorkloads(args: ListWorkloadsCommandInput, options?: __HttpHandlerOptions): Promise<ListWorkloadsCommandOutput>;
            listWorkloads(args: ListWorkloadsCommandInput, cb: (err: any, data?: ListWorkloadsCommandOutput) => void): void;
            listWorkloads(args: ListWorkloadsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListWorkloadsCommandOutput) => void): void;
            /**
                * <p>List the workload shares associated with the workload.</p>
                */
            listWorkloadShares(args: ListWorkloadSharesCommandInput, options?: __HttpHandlerOptions): Promise<ListWorkloadSharesCommandOutput>;
            listWorkloadShares(args: ListWorkloadSharesCommandInput, cb: (err: any, data?: ListWorkloadSharesCommandOutput) => void): void;
            listWorkloadShares(args: ListWorkloadSharesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListWorkloadSharesCommandOutput) => void): void;
            /**
                * <p>Adds one or more tags to the specified resource.</p>
                *         <note>
                *             <p>The WorkloadArn parameter can be either a workload ARN or a custom lens ARN.</p>
                *          </note>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Deletes specified tags from a resource.</p>
                *         <note>
                *             <p>The WorkloadArn parameter can be either a workload ARN or a custom lens ARN.</p>
                *          </note>
                *
                *         <p>To specify multiple tags, use separate <b>tagKeys</b> parameters, for example:</p>
                *         <p>
                *             <code>DELETE /tags/WorkloadArn?tagKeys=key1&tagKeys=key2</code>
                *          </p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Update the answer to a specific question in a workload review.</p>
                */
            updateAnswer(args: UpdateAnswerCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAnswerCommandOutput>;
            updateAnswer(args: UpdateAnswerCommandInput, cb: (err: any, data?: UpdateAnswerCommandOutput) => void): void;
            updateAnswer(args: UpdateAnswerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAnswerCommandOutput) => void): void;
            /**
                * <p>Updates whether the Amazon Web Services account is opted into organization sharing features.</p>
                */
            updateGlobalSettings(args: UpdateGlobalSettingsCommandInput, options?: __HttpHandlerOptions): Promise<UpdateGlobalSettingsCommandOutput>;
            updateGlobalSettings(args: UpdateGlobalSettingsCommandInput, cb: (err: any, data?: UpdateGlobalSettingsCommandOutput) => void): void;
            updateGlobalSettings(args: UpdateGlobalSettingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateGlobalSettingsCommandOutput) => void): void;
            /**
                * <p>Update lens review.</p>
                */
            updateLensReview(args: UpdateLensReviewCommandInput, options?: __HttpHandlerOptions): Promise<UpdateLensReviewCommandOutput>;
            updateLensReview(args: UpdateLensReviewCommandInput, cb: (err: any, data?: UpdateLensReviewCommandOutput) => void): void;
            updateLensReview(args: UpdateLensReviewCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateLensReviewCommandOutput) => void): void;
            /**
                * <p>Update a workload invitation.</p>
                */
            updateShareInvitation(args: UpdateShareInvitationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateShareInvitationCommandOutput>;
            updateShareInvitation(args: UpdateShareInvitationCommandInput, cb: (err: any, data?: UpdateShareInvitationCommandOutput) => void): void;
            updateShareInvitation(args: UpdateShareInvitationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateShareInvitationCommandOutput) => void): void;
            /**
                * <p>Update an existing workload.</p>
                */
            updateWorkload(args: UpdateWorkloadCommandInput, options?: __HttpHandlerOptions): Promise<UpdateWorkloadCommandOutput>;
            updateWorkload(args: UpdateWorkloadCommandInput, cb: (err: any, data?: UpdateWorkloadCommandOutput) => void): void;
            updateWorkload(args: UpdateWorkloadCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateWorkloadCommandOutput) => void): void;
            /**
                * <p>Update a workload share.</p>
                */
            updateWorkloadShare(args: UpdateWorkloadShareCommandInput, options?: __HttpHandlerOptions): Promise<UpdateWorkloadShareCommandOutput>;
            updateWorkloadShare(args: UpdateWorkloadShareCommandInput, cb: (err: any, data?: UpdateWorkloadShareCommandOutput) => void): void;
            updateWorkloadShare(args: UpdateWorkloadShareCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateWorkloadShareCommandOutput) => void): void;
            /**
                * <p>Upgrade lens review.</p>
                */
            upgradeLensReview(args: UpgradeLensReviewCommandInput, options?: __HttpHandlerOptions): Promise<UpgradeLensReviewCommandOutput>;
            upgradeLensReview(args: UpgradeLensReviewCommandInput, cb: (err: any, data?: UpgradeLensReviewCommandOutput) => void): void;
            upgradeLensReview(args: UpgradeLensReviewCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpgradeLensReviewCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/AssociateLensesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AssociateLensesInput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface AssociateLensesCommandInput extends AssociateLensesInput {
    }
    export interface AssociateLensesCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Associate a lens to a workload.</p>
        *         <p>Up to 10 lenses can be associated with a workload in a single API operation. A
        *         maximum of 20 lenses can be associated with a workload.</p>
        *         <note>
        *             <p>
        *                <b>Disclaimer</b>
        *             </p>
        *             <p>By accessing and/or applying custom lenses created by another Amazon Web Services user or account,
        *             you acknowledge that custom lenses created by other users and shared with you are
        *             Third Party Content as defined in the Amazon Web Services Customer Agreement.    </p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, AssociateLensesCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, AssociateLensesCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new AssociateLensesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateLensesCommandInput} for command's `input` shape.
        * @see {@link AssociateLensesCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class AssociateLensesCommand extends $Command<AssociateLensesCommandInput, AssociateLensesCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: AssociateLensesCommandInput;
            constructor(input: AssociateLensesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateLensesCommandInput, AssociateLensesCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/CreateLensShareCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateLensShareInput, CreateLensShareOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface CreateLensShareCommandInput extends CreateLensShareInput {
    }
    export interface CreateLensShareCommandOutput extends CreateLensShareOutput, __MetadataBearer {
    }
    /**
        * <p>Create a lens share.</p>
        *         <p>The owner of a lens can share it with other Amazon Web Services accounts and IAM users in the same Amazon Web Services Region.
        *             Shared access to a lens is not removed until the lens invitation is deleted.</p>
        *         <note>
        *             <p>
        *                <b>Disclaimer</b>
        *             </p>
        *             <p>By sharing your custom lenses with other Amazon Web Services accounts,
        *                 you acknowledge that Amazon Web Services will make your custom lenses available to those
        *                 other accounts. Those other accounts may continue to access and use your
        *                 shared custom lenses even if you delete the custom lenses
        *                 from your own Amazon Web Services account or terminate
        *                 your Amazon Web Services account.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, CreateLensShareCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, CreateLensShareCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new CreateLensShareCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLensShareCommandInput} for command's `input` shape.
        * @see {@link CreateLensShareCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class CreateLensShareCommand extends $Command<CreateLensShareCommandInput, CreateLensShareCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: CreateLensShareCommandInput;
            constructor(input: CreateLensShareCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLensShareCommandInput, CreateLensShareCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/CreateLensVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateLensVersionInput, CreateLensVersionOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface CreateLensVersionCommandInput extends CreateLensVersionInput {
    }
    export interface CreateLensVersionCommandOutput extends CreateLensVersionOutput, __MetadataBearer {
    }
    /**
        * <p>Create a new lens version.</p>
        *         <p>A lens can have up to 100 versions.</p>
        *         <p>After a lens has been imported, create a new lens version to publish it.  The owner of a lens can share the lens with other
        *             Amazon Web Services accounts and IAM users in the same Amazon Web Services Region. Only the owner of a lens can delete it.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, CreateLensVersionCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, CreateLensVersionCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new CreateLensVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLensVersionCommandInput} for command's `input` shape.
        * @see {@link CreateLensVersionCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class CreateLensVersionCommand extends $Command<CreateLensVersionCommandInput, CreateLensVersionCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: CreateLensVersionCommandInput;
            constructor(input: CreateLensVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLensVersionCommandInput, CreateLensVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/CreateMilestoneCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateMilestoneInput, CreateMilestoneOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface CreateMilestoneCommandInput extends CreateMilestoneInput {
    }
    export interface CreateMilestoneCommandOutput extends CreateMilestoneOutput, __MetadataBearer {
    }
    /**
        * <p>Create a milestone for an existing workload.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, CreateMilestoneCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, CreateMilestoneCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new CreateMilestoneCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateMilestoneCommandInput} for command's `input` shape.
        * @see {@link CreateMilestoneCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class CreateMilestoneCommand extends $Command<CreateMilestoneCommandInput, CreateMilestoneCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: CreateMilestoneCommandInput;
            constructor(input: CreateMilestoneCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateMilestoneCommandInput, CreateMilestoneCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/CreateWorkloadCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateWorkloadInput, CreateWorkloadOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface CreateWorkloadCommandInput extends CreateWorkloadInput {
    }
    export interface CreateWorkloadCommandOutput extends CreateWorkloadOutput, __MetadataBearer {
    }
    /**
        * <p>Create a new workload.</p>
        *         <p>The owner of a workload can share the workload with other Amazon Web Services accounts and IAM users
        *             in the same Amazon Web Services Region. Only the owner of a workload can delete it.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/define-workload.html">Defining a Workload</a> in the
        *                 <i>Well-Architected Tool User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, CreateWorkloadCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, CreateWorkloadCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new CreateWorkloadCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateWorkloadCommandInput} for command's `input` shape.
        * @see {@link CreateWorkloadCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class CreateWorkloadCommand extends $Command<CreateWorkloadCommandInput, CreateWorkloadCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: CreateWorkloadCommandInput;
            constructor(input: CreateWorkloadCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateWorkloadCommandInput, CreateWorkloadCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/CreateWorkloadShareCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateWorkloadShareInput, CreateWorkloadShareOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface CreateWorkloadShareCommandInput extends CreateWorkloadShareInput {
    }
    export interface CreateWorkloadShareCommandOutput extends CreateWorkloadShareOutput, __MetadataBearer {
    }
    /**
        * <p>Create a workload share.</p>
        *         <p>The owner of a workload can share it with other Amazon Web Services accounts and IAM users in the same
        *             Amazon Web Services Region. Shared access to a workload is not removed until the workload invitation is
        *             deleted.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/workloads-sharing.html">Sharing a Workload</a> in the
        *                 <i>Well-Architected Tool User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, CreateWorkloadShareCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, CreateWorkloadShareCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new CreateWorkloadShareCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateWorkloadShareCommandInput} for command's `input` shape.
        * @see {@link CreateWorkloadShareCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class CreateWorkloadShareCommand extends $Command<CreateWorkloadShareCommandInput, CreateWorkloadShareCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: CreateWorkloadShareCommandInput;
            constructor(input: CreateWorkloadShareCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateWorkloadShareCommandInput, CreateWorkloadShareCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/DeleteLensCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteLensInput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface DeleteLensCommandInput extends DeleteLensInput {
    }
    export interface DeleteLensCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Delete an existing lens.</p>
        *         <p>Only the owner of a lens can delete it.  After the lens is deleted,  Amazon Web Services accounts and IAM users
        *               that you shared the lens with can continue to use it, but they will no longer be able to apply it to new workloads.
        *         </p>
        *         <note>
        *             <p>
        *                <b>Disclaimer</b>
        *             </p>
        *             <p>By sharing your custom lenses with other Amazon Web Services accounts,
        *                 you acknowledge that Amazon Web Services will make your custom lenses available to those
        *                 other accounts. Those other accounts may continue to access and use your
        *                 shared custom lenses even if you delete the custom lenses
        *                 from your own Amazon Web Services account or terminate
        *                 your Amazon Web Services account.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, DeleteLensCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, DeleteLensCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new DeleteLensCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLensCommandInput} for command's `input` shape.
        * @see {@link DeleteLensCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class DeleteLensCommand extends $Command<DeleteLensCommandInput, DeleteLensCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: DeleteLensCommandInput;
            constructor(input: DeleteLensCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLensCommandInput, DeleteLensCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/DeleteLensShareCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteLensShareInput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface DeleteLensShareCommandInput extends DeleteLensShareInput {
    }
    export interface DeleteLensShareCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Delete a lens share.</p>
        *         <p>After the lens share is deleted,  Amazon Web Services accounts and IAM users
        *             that you shared the lens with can continue to use it, but they will no longer be able to apply it to new workloads.</p>
        *         <note>
        *             <p>
        *                <b>Disclaimer</b>
        *             </p>
        *             <p>By sharing your custom lenses with other Amazon Web Services accounts,
        *                 you acknowledge that Amazon Web Services will make your custom lenses available to those
        *                 other accounts. Those other accounts may continue to access and use your
        *                 shared custom lenses even if you delete the custom lenses
        *                 from your own Amazon Web Services account or terminate
        *                 your Amazon Web Services account.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, DeleteLensShareCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, DeleteLensShareCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new DeleteLensShareCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLensShareCommandInput} for command's `input` shape.
        * @see {@link DeleteLensShareCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class DeleteLensShareCommand extends $Command<DeleteLensShareCommandInput, DeleteLensShareCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: DeleteLensShareCommandInput;
            constructor(input: DeleteLensShareCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLensShareCommandInput, DeleteLensShareCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/DeleteWorkloadCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteWorkloadInput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface DeleteWorkloadCommandInput extends DeleteWorkloadInput {
    }
    export interface DeleteWorkloadCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Delete an existing workload.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, DeleteWorkloadCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, DeleteWorkloadCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new DeleteWorkloadCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteWorkloadCommandInput} for command's `input` shape.
        * @see {@link DeleteWorkloadCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class DeleteWorkloadCommand extends $Command<DeleteWorkloadCommandInput, DeleteWorkloadCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: DeleteWorkloadCommandInput;
            constructor(input: DeleteWorkloadCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteWorkloadCommandInput, DeleteWorkloadCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/DeleteWorkloadShareCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteWorkloadShareInput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface DeleteWorkloadShareCommandInput extends DeleteWorkloadShareInput {
    }
    export interface DeleteWorkloadShareCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Delete a workload share.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, DeleteWorkloadShareCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, DeleteWorkloadShareCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new DeleteWorkloadShareCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteWorkloadShareCommandInput} for command's `input` shape.
        * @see {@link DeleteWorkloadShareCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class DeleteWorkloadShareCommand extends $Command<DeleteWorkloadShareCommandInput, DeleteWorkloadShareCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: DeleteWorkloadShareCommandInput;
            constructor(input: DeleteWorkloadShareCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteWorkloadShareCommandInput, DeleteWorkloadShareCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/DisassociateLensesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisassociateLensesInput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface DisassociateLensesCommandInput extends DisassociateLensesInput {
    }
    export interface DisassociateLensesCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Disassociate a lens from a workload.</p>
        *         <p>Up to 10 lenses can be disassociated from a workload in a single API operation.</p>
        *         <note>
        *             <p>The Amazon Web Services Well-Architected Framework lens (<code>wellarchitected</code>) cannot be
        *                 removed from a workload.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, DisassociateLensesCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, DisassociateLensesCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new DisassociateLensesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateLensesCommandInput} for command's `input` shape.
        * @see {@link DisassociateLensesCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class DisassociateLensesCommand extends $Command<DisassociateLensesCommandInput, DisassociateLensesCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: DisassociateLensesCommandInput;
            constructor(input: DisassociateLensesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateLensesCommandInput, DisassociateLensesCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ExportLensCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ExportLensInput, ExportLensOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface ExportLensCommandInput extends ExportLensInput {
    }
    export interface ExportLensCommandOutput extends ExportLensOutput, __MetadataBearer {
    }
    /**
        * <p>Export an existing lens.</p>
        *         <p>Lenses are defined in JSON. For more information, see <a href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/lenses-format-specification.html">JSON format specification</a>
        *             in the <i>Well-Architected Tool User Guide</i>. Only the owner of a lens can export it.
        *         </p>
        *         <note>
        *             <p>
        *                <b>Disclaimer</b>
        *             </p>
        *             <p>Do not include or gather personal identifiable information (PII) of end users or
        *                 other identifiable individuals in or via your custom lenses. If your custom
        *                 lens or those shared with you and used in your account do include or collect
        *                 PII you are responsible for: ensuring that the included PII is processed in accordance
        *                 with applicable law, providing adequate privacy notices, and obtaining necessary
        *                 consents for processing such data.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, ExportLensCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, ExportLensCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new ExportLensCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ExportLensCommandInput} for command's `input` shape.
        * @see {@link ExportLensCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class ExportLensCommand extends $Command<ExportLensCommandInput, ExportLensCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: ExportLensCommandInput;
            constructor(input: ExportLensCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ExportLensCommandInput, ExportLensCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/GetAnswerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetAnswerInput, GetAnswerOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface GetAnswerCommandInput extends GetAnswerInput {
    }
    export interface GetAnswerCommandOutput extends GetAnswerOutput, __MetadataBearer {
    }
    /**
        * <p>Get the answer to a specific question in a workload review.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, GetAnswerCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, GetAnswerCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new GetAnswerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAnswerCommandInput} for command's `input` shape.
        * @see {@link GetAnswerCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class GetAnswerCommand extends $Command<GetAnswerCommandInput, GetAnswerCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: GetAnswerCommandInput;
            constructor(input: GetAnswerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAnswerCommandInput, GetAnswerCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/GetLensCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetLensInput, GetLensOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface GetLensCommandInput extends GetLensInput {
    }
    export interface GetLensCommandOutput extends GetLensOutput, __MetadataBearer {
    }
    /**
        * <p>Get an existing lens.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, GetLensCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, GetLensCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new GetLensCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLensCommandInput} for command's `input` shape.
        * @see {@link GetLensCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class GetLensCommand extends $Command<GetLensCommandInput, GetLensCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: GetLensCommandInput;
            constructor(input: GetLensCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLensCommandInput, GetLensCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/GetLensReviewCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetLensReviewInput, GetLensReviewOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface GetLensReviewCommandInput extends GetLensReviewInput {
    }
    export interface GetLensReviewCommandOutput extends GetLensReviewOutput, __MetadataBearer {
    }
    /**
        * <p>Get lens review.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, GetLensReviewCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, GetLensReviewCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new GetLensReviewCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLensReviewCommandInput} for command's `input` shape.
        * @see {@link GetLensReviewCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class GetLensReviewCommand extends $Command<GetLensReviewCommandInput, GetLensReviewCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: GetLensReviewCommandInput;
            constructor(input: GetLensReviewCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLensReviewCommandInput, GetLensReviewCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/GetLensReviewReportCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetLensReviewReportInput, GetLensReviewReportOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface GetLensReviewReportCommandInput extends GetLensReviewReportInput {
    }
    export interface GetLensReviewReportCommandOutput extends GetLensReviewReportOutput, __MetadataBearer {
    }
    /**
        * <p>Get lens review report.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, GetLensReviewReportCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, GetLensReviewReportCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new GetLensReviewReportCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLensReviewReportCommandInput} for command's `input` shape.
        * @see {@link GetLensReviewReportCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class GetLensReviewReportCommand extends $Command<GetLensReviewReportCommandInput, GetLensReviewReportCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: GetLensReviewReportCommandInput;
            constructor(input: GetLensReviewReportCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLensReviewReportCommandInput, GetLensReviewReportCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/GetLensVersionDifferenceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetLensVersionDifferenceInput, GetLensVersionDifferenceOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface GetLensVersionDifferenceCommandInput extends GetLensVersionDifferenceInput {
    }
    export interface GetLensVersionDifferenceCommandOutput extends GetLensVersionDifferenceOutput, __MetadataBearer {
    }
    /**
        * <p>Get lens version differences.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, GetLensVersionDifferenceCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, GetLensVersionDifferenceCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new GetLensVersionDifferenceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLensVersionDifferenceCommandInput} for command's `input` shape.
        * @see {@link GetLensVersionDifferenceCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class GetLensVersionDifferenceCommand extends $Command<GetLensVersionDifferenceCommandInput, GetLensVersionDifferenceCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: GetLensVersionDifferenceCommandInput;
            constructor(input: GetLensVersionDifferenceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLensVersionDifferenceCommandInput, GetLensVersionDifferenceCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/GetMilestoneCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetMilestoneInput, GetMilestoneOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface GetMilestoneCommandInput extends GetMilestoneInput {
    }
    export interface GetMilestoneCommandOutput extends GetMilestoneOutput, __MetadataBearer {
    }
    /**
        * <p>Get a milestone for an existing workload.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, GetMilestoneCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, GetMilestoneCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new GetMilestoneCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMilestoneCommandInput} for command's `input` shape.
        * @see {@link GetMilestoneCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class GetMilestoneCommand extends $Command<GetMilestoneCommandInput, GetMilestoneCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: GetMilestoneCommandInput;
            constructor(input: GetMilestoneCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMilestoneCommandInput, GetMilestoneCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/GetWorkloadCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetWorkloadInput, GetWorkloadOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface GetWorkloadCommandInput extends GetWorkloadInput {
    }
    export interface GetWorkloadCommandOutput extends GetWorkloadOutput, __MetadataBearer {
    }
    /**
        * <p>Get an existing workload.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, GetWorkloadCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, GetWorkloadCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new GetWorkloadCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetWorkloadCommandInput} for command's `input` shape.
        * @see {@link GetWorkloadCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class GetWorkloadCommand extends $Command<GetWorkloadCommandInput, GetWorkloadCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: GetWorkloadCommandInput;
            constructor(input: GetWorkloadCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetWorkloadCommandInput, GetWorkloadCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ImportLensCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ImportLensInput, ImportLensOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface ImportLensCommandInput extends ImportLensInput {
    }
    export interface ImportLensCommandOutput extends ImportLensOutput, __MetadataBearer {
    }
    /**
        * <p>Import a new lens.</p>
        *         <p>The lens cannot be applied to workloads or shared with other Amazon Web Services accounts
        *             until it's published with <a>CreateLensVersion</a>
        *          </p>
        *         <p>Lenses are defined in JSON. For more information, see <a href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/lenses-format-specification.html">JSON format specification</a>
        *             in the <i>Well-Architected Tool User Guide</i>.</p>
        *         <p>A custom lens cannot exceed 500 KB in size.</p>
        *
        *         <note>
        *             <p>
        *                <b>Disclaimer</b>
        *             </p>
        *             <p>Do not include or gather personal identifiable information (PII) of end users or
        *                 other identifiable individuals in or via your custom lenses. If your custom
        *                 lens or those shared with you and used in your account do include or collect
        *                 PII you are responsible for: ensuring that the included PII is processed in accordance
        *                 with applicable law, providing adequate privacy notices, and obtaining necessary
        *                 consents for processing such data.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, ImportLensCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, ImportLensCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new ImportLensCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ImportLensCommandInput} for command's `input` shape.
        * @see {@link ImportLensCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class ImportLensCommand extends $Command<ImportLensCommandInput, ImportLensCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: ImportLensCommandInput;
            constructor(input: ImportLensCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ImportLensCommandInput, ImportLensCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListAnswersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListAnswersInput, ListAnswersOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface ListAnswersCommandInput extends ListAnswersInput {
    }
    export interface ListAnswersCommandOutput extends ListAnswersOutput, __MetadataBearer {
    }
    /**
        * <p>List of answers.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, ListAnswersCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, ListAnswersCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new ListAnswersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAnswersCommandInput} for command's `input` shape.
        * @see {@link ListAnswersCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class ListAnswersCommand extends $Command<ListAnswersCommandInput, ListAnswersCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: ListAnswersCommandInput;
            constructor(input: ListAnswersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAnswersCommandInput, ListAnswersCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListLensesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListLensesInput, ListLensesOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface ListLensesCommandInput extends ListLensesInput {
    }
    export interface ListLensesCommandOutput extends ListLensesOutput, __MetadataBearer {
    }
    /**
        * <p>List the available lenses.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, ListLensesCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, ListLensesCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new ListLensesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListLensesCommandInput} for command's `input` shape.
        * @see {@link ListLensesCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class ListLensesCommand extends $Command<ListLensesCommandInput, ListLensesCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: ListLensesCommandInput;
            constructor(input: ListLensesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListLensesCommandInput, ListLensesCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListLensReviewImprovementsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListLensReviewImprovementsInput, ListLensReviewImprovementsOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface ListLensReviewImprovementsCommandInput extends ListLensReviewImprovementsInput {
    }
    export interface ListLensReviewImprovementsCommandOutput extends ListLensReviewImprovementsOutput, __MetadataBearer {
    }
    /**
        * <p>List lens review improvements.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, ListLensReviewImprovementsCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, ListLensReviewImprovementsCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new ListLensReviewImprovementsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListLensReviewImprovementsCommandInput} for command's `input` shape.
        * @see {@link ListLensReviewImprovementsCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class ListLensReviewImprovementsCommand extends $Command<ListLensReviewImprovementsCommandInput, ListLensReviewImprovementsCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: ListLensReviewImprovementsCommandInput;
            constructor(input: ListLensReviewImprovementsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListLensReviewImprovementsCommandInput, ListLensReviewImprovementsCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListLensReviewsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListLensReviewsInput, ListLensReviewsOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface ListLensReviewsCommandInput extends ListLensReviewsInput {
    }
    export interface ListLensReviewsCommandOutput extends ListLensReviewsOutput, __MetadataBearer {
    }
    /**
        * <p>List lens reviews.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, ListLensReviewsCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, ListLensReviewsCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new ListLensReviewsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListLensReviewsCommandInput} for command's `input` shape.
        * @see {@link ListLensReviewsCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class ListLensReviewsCommand extends $Command<ListLensReviewsCommandInput, ListLensReviewsCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: ListLensReviewsCommandInput;
            constructor(input: ListLensReviewsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListLensReviewsCommandInput, ListLensReviewsCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListLensSharesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListLensSharesInput, ListLensSharesOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface ListLensSharesCommandInput extends ListLensSharesInput {
    }
    export interface ListLensSharesCommandOutput extends ListLensSharesOutput, __MetadataBearer {
    }
    /**
        * <p>List the lens shares associated with the lens.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, ListLensSharesCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, ListLensSharesCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new ListLensSharesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListLensSharesCommandInput} for command's `input` shape.
        * @see {@link ListLensSharesCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class ListLensSharesCommand extends $Command<ListLensSharesCommandInput, ListLensSharesCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: ListLensSharesCommandInput;
            constructor(input: ListLensSharesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListLensSharesCommandInput, ListLensSharesCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListMilestonesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListMilestonesInput, ListMilestonesOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface ListMilestonesCommandInput extends ListMilestonesInput {
    }
    export interface ListMilestonesCommandOutput extends ListMilestonesOutput, __MetadataBearer {
    }
    /**
        * <p>List all milestones for an existing workload.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, ListMilestonesCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, ListMilestonesCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new ListMilestonesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListMilestonesCommandInput} for command's `input` shape.
        * @see {@link ListMilestonesCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class ListMilestonesCommand extends $Command<ListMilestonesCommandInput, ListMilestonesCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: ListMilestonesCommandInput;
            constructor(input: ListMilestonesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListMilestonesCommandInput, ListMilestonesCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListNotificationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListNotificationsInput, ListNotificationsOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface ListNotificationsCommandInput extends ListNotificationsInput {
    }
    export interface ListNotificationsCommandOutput extends ListNotificationsOutput, __MetadataBearer {
    }
    /**
        * <p>List lens notifications.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, ListNotificationsCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, ListNotificationsCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new ListNotificationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListNotificationsCommandInput} for command's `input` shape.
        * @see {@link ListNotificationsCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class ListNotificationsCommand extends $Command<ListNotificationsCommandInput, ListNotificationsCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: ListNotificationsCommandInput;
            constructor(input: ListNotificationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListNotificationsCommandInput, ListNotificationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListShareInvitationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListShareInvitationsInput, ListShareInvitationsOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface ListShareInvitationsCommandInput extends ListShareInvitationsInput {
    }
    export interface ListShareInvitationsCommandOutput extends ListShareInvitationsOutput, __MetadataBearer {
    }
    /**
        * <p>List  the workload invitations.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, ListShareInvitationsCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, ListShareInvitationsCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new ListShareInvitationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListShareInvitationsCommandInput} for command's `input` shape.
        * @see {@link ListShareInvitationsCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class ListShareInvitationsCommand extends $Command<ListShareInvitationsCommandInput, ListShareInvitationsCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: ListShareInvitationsCommandInput;
            constructor(input: ListShareInvitationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListShareInvitationsCommandInput, ListShareInvitationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceInput, ListTagsForResourceOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceInput {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceOutput, __MetadataBearer {
    }
    /**
        * <p>List the tags for a resource.</p>
        *         <note>
        *             <p>The WorkloadArn parameter can be either a workload ARN or a custom lens ARN.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, ListTagsForResourceCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, ListTagsForResourceCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListWorkloadsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListWorkloadsInput, ListWorkloadsOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface ListWorkloadsCommandInput extends ListWorkloadsInput {
    }
    export interface ListWorkloadsCommandOutput extends ListWorkloadsOutput, __MetadataBearer {
    }
    /**
        * <p>List workloads. Paginated.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, ListWorkloadsCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, ListWorkloadsCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new ListWorkloadsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListWorkloadsCommandInput} for command's `input` shape.
        * @see {@link ListWorkloadsCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class ListWorkloadsCommand extends $Command<ListWorkloadsCommandInput, ListWorkloadsCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: ListWorkloadsCommandInput;
            constructor(input: ListWorkloadsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListWorkloadsCommandInput, ListWorkloadsCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListWorkloadSharesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListWorkloadSharesInput, ListWorkloadSharesOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface ListWorkloadSharesCommandInput extends ListWorkloadSharesInput {
    }
    export interface ListWorkloadSharesCommandOutput extends ListWorkloadSharesOutput, __MetadataBearer {
    }
    /**
        * <p>List the workload shares associated with the workload.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, ListWorkloadSharesCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, ListWorkloadSharesCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new ListWorkloadSharesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListWorkloadSharesCommandInput} for command's `input` shape.
        * @see {@link ListWorkloadSharesCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class ListWorkloadSharesCommand extends $Command<ListWorkloadSharesCommandInput, ListWorkloadSharesCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: ListWorkloadSharesCommandInput;
            constructor(input: ListWorkloadSharesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListWorkloadSharesCommandInput, ListWorkloadSharesCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagResourceInput, TagResourceOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface TagResourceCommandInput extends TagResourceInput {
    }
    export interface TagResourceCommandOutput extends TagResourceOutput, __MetadataBearer {
    }
    /**
        * <p>Adds one or more tags to the specified resource.</p>
        *         <note>
        *             <p>The WorkloadArn parameter can be either a workload ARN or a custom lens ARN.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, TagResourceCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, TagResourceCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagResourceInput, UntagResourceOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface UntagResourceCommandInput extends UntagResourceInput {
    }
    export interface UntagResourceCommandOutput extends UntagResourceOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes specified tags from a resource.</p>
        *         <note>
        *             <p>The WorkloadArn parameter can be either a workload ARN or a custom lens ARN.</p>
        *          </note>
        *
        *         <p>To specify multiple tags, use separate <b>tagKeys</b> parameters, for example:</p>
        *         <p>
        *             <code>DELETE /tags/WorkloadArn?tagKeys=key1&tagKeys=key2</code>
        *          </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, UntagResourceCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, UntagResourceCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UpdateAnswerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateAnswerInput, UpdateAnswerOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface UpdateAnswerCommandInput extends UpdateAnswerInput {
    }
    export interface UpdateAnswerCommandOutput extends UpdateAnswerOutput, __MetadataBearer {
    }
    /**
        * <p>Update the answer to a specific question in a workload review.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, UpdateAnswerCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, UpdateAnswerCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new UpdateAnswerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAnswerCommandInput} for command's `input` shape.
        * @see {@link UpdateAnswerCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class UpdateAnswerCommand extends $Command<UpdateAnswerCommandInput, UpdateAnswerCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: UpdateAnswerCommandInput;
            constructor(input: UpdateAnswerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAnswerCommandInput, UpdateAnswerCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UpdateGlobalSettingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateGlobalSettingsInput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface UpdateGlobalSettingsCommandInput extends UpdateGlobalSettingsInput {
    }
    export interface UpdateGlobalSettingsCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Updates whether the Amazon Web Services account is opted into organization sharing features.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, UpdateGlobalSettingsCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, UpdateGlobalSettingsCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new UpdateGlobalSettingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateGlobalSettingsCommandInput} for command's `input` shape.
        * @see {@link UpdateGlobalSettingsCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class UpdateGlobalSettingsCommand extends $Command<UpdateGlobalSettingsCommandInput, UpdateGlobalSettingsCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: UpdateGlobalSettingsCommandInput;
            constructor(input: UpdateGlobalSettingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateGlobalSettingsCommandInput, UpdateGlobalSettingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UpdateLensReviewCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateLensReviewInput, UpdateLensReviewOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface UpdateLensReviewCommandInput extends UpdateLensReviewInput {
    }
    export interface UpdateLensReviewCommandOutput extends UpdateLensReviewOutput, __MetadataBearer {
    }
    /**
        * <p>Update lens review.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, UpdateLensReviewCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, UpdateLensReviewCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new UpdateLensReviewCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateLensReviewCommandInput} for command's `input` shape.
        * @see {@link UpdateLensReviewCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class UpdateLensReviewCommand extends $Command<UpdateLensReviewCommandInput, UpdateLensReviewCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: UpdateLensReviewCommandInput;
            constructor(input: UpdateLensReviewCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateLensReviewCommandInput, UpdateLensReviewCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UpdateShareInvitationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateShareInvitationInput, UpdateShareInvitationOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface UpdateShareInvitationCommandInput extends UpdateShareInvitationInput {
    }
    export interface UpdateShareInvitationCommandOutput extends UpdateShareInvitationOutput, __MetadataBearer {
    }
    /**
        * <p>Update a workload invitation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, UpdateShareInvitationCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, UpdateShareInvitationCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new UpdateShareInvitationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateShareInvitationCommandInput} for command's `input` shape.
        * @see {@link UpdateShareInvitationCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class UpdateShareInvitationCommand extends $Command<UpdateShareInvitationCommandInput, UpdateShareInvitationCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: UpdateShareInvitationCommandInput;
            constructor(input: UpdateShareInvitationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateShareInvitationCommandInput, UpdateShareInvitationCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UpdateWorkloadCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateWorkloadInput, UpdateWorkloadOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface UpdateWorkloadCommandInput extends UpdateWorkloadInput {
    }
    export interface UpdateWorkloadCommandOutput extends UpdateWorkloadOutput, __MetadataBearer {
    }
    /**
        * <p>Update an existing workload.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, UpdateWorkloadCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, UpdateWorkloadCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new UpdateWorkloadCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateWorkloadCommandInput} for command's `input` shape.
        * @see {@link UpdateWorkloadCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class UpdateWorkloadCommand extends $Command<UpdateWorkloadCommandInput, UpdateWorkloadCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: UpdateWorkloadCommandInput;
            constructor(input: UpdateWorkloadCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateWorkloadCommandInput, UpdateWorkloadCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UpdateWorkloadShareCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateWorkloadShareInput, UpdateWorkloadShareOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface UpdateWorkloadShareCommandInput extends UpdateWorkloadShareInput {
    }
    export interface UpdateWorkloadShareCommandOutput extends UpdateWorkloadShareOutput, __MetadataBearer {
    }
    /**
        * <p>Update a workload share.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, UpdateWorkloadShareCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, UpdateWorkloadShareCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new UpdateWorkloadShareCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateWorkloadShareCommandInput} for command's `input` shape.
        * @see {@link UpdateWorkloadShareCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class UpdateWorkloadShareCommand extends $Command<UpdateWorkloadShareCommandInput, UpdateWorkloadShareCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: UpdateWorkloadShareCommandInput;
            constructor(input: UpdateWorkloadShareCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateWorkloadShareCommandInput, UpdateWorkloadShareCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UpgradeLensReviewCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpgradeLensReviewInput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient";
    export interface UpgradeLensReviewCommandInput extends UpgradeLensReviewInput {
    }
    export interface UpgradeLensReviewCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Upgrade lens review.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WellArchitectedClient, UpgradeLensReviewCommand } from "@aws-sdk/client-wellarchitected"; // ES Modules import
        * // const { WellArchitectedClient, UpgradeLensReviewCommand } = require("@aws-sdk/client-wellarchitected"); // CommonJS import
        * const client = new WellArchitectedClient(config);
        * const command = new UpgradeLensReviewCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpgradeLensReviewCommandInput} for command's `input` shape.
        * @see {@link UpgradeLensReviewCommandOutput} for command's `response` shape.
        * @see {@link WellArchitectedClientResolvedConfig | config} for WellArchitectedClient's `config` shape.
        *
        */
    export class UpgradeLensReviewCommand extends $Command<UpgradeLensReviewCommandInput, UpgradeLensReviewCommandOutput, WellArchitectedClientResolvedConfig> {
            readonly input: UpgradeLensReviewCommandInput;
            constructor(input: UpgradeLensReviewCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WellArchitectedClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpgradeLensReviewCommandInput, UpgradeLensReviewCommandOutput>;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/WellArchitectedClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AssociateLensesCommandInput, AssociateLensesCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/AssociateLensesCommand";
    import { CreateLensShareCommandInput, CreateLensShareCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/CreateLensShareCommand";
    import { CreateLensVersionCommandInput, CreateLensVersionCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/CreateLensVersionCommand";
    import { CreateMilestoneCommandInput, CreateMilestoneCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/CreateMilestoneCommand";
    import { CreateWorkloadCommandInput, CreateWorkloadCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/CreateWorkloadCommand";
    import { CreateWorkloadShareCommandInput, CreateWorkloadShareCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/CreateWorkloadShareCommand";
    import { DeleteLensCommandInput, DeleteLensCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/DeleteLensCommand";
    import { DeleteLensShareCommandInput, DeleteLensShareCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/DeleteLensShareCommand";
    import { DeleteWorkloadCommandInput, DeleteWorkloadCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/DeleteWorkloadCommand";
    import { DeleteWorkloadShareCommandInput, DeleteWorkloadShareCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/DeleteWorkloadShareCommand";
    import { DisassociateLensesCommandInput, DisassociateLensesCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/DisassociateLensesCommand";
    import { ExportLensCommandInput, ExportLensCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ExportLensCommand";
    import { GetAnswerCommandInput, GetAnswerCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/GetAnswerCommand";
    import { GetLensCommandInput, GetLensCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/GetLensCommand";
    import { GetLensReviewCommandInput, GetLensReviewCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/GetLensReviewCommand";
    import { GetLensReviewReportCommandInput, GetLensReviewReportCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/GetLensReviewReportCommand";
    import { GetLensVersionDifferenceCommandInput, GetLensVersionDifferenceCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/GetLensVersionDifferenceCommand";
    import { GetMilestoneCommandInput, GetMilestoneCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/GetMilestoneCommand";
    import { GetWorkloadCommandInput, GetWorkloadCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/GetWorkloadCommand";
    import { ImportLensCommandInput, ImportLensCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ImportLensCommand";
    import { ListAnswersCommandInput, ListAnswersCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListAnswersCommand";
    import { ListLensesCommandInput, ListLensesCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListLensesCommand";
    import { ListLensReviewImprovementsCommandInput, ListLensReviewImprovementsCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListLensReviewImprovementsCommand";
    import { ListLensReviewsCommandInput, ListLensReviewsCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListLensReviewsCommand";
    import { ListLensSharesCommandInput, ListLensSharesCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListLensSharesCommand";
    import { ListMilestonesCommandInput, ListMilestonesCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListMilestonesCommand";
    import { ListNotificationsCommandInput, ListNotificationsCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListNotificationsCommand";
    import { ListShareInvitationsCommandInput, ListShareInvitationsCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListShareInvitationsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListTagsForResourceCommand";
    import { ListWorkloadsCommandInput, ListWorkloadsCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListWorkloadsCommand";
    import { ListWorkloadSharesCommandInput, ListWorkloadSharesCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/ListWorkloadSharesCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UntagResourceCommand";
    import { UpdateAnswerCommandInput, UpdateAnswerCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UpdateAnswerCommand";
    import { UpdateGlobalSettingsCommandInput, UpdateGlobalSettingsCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UpdateGlobalSettingsCommand";
    import { UpdateLensReviewCommandInput, UpdateLensReviewCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UpdateLensReviewCommand";
    import { UpdateShareInvitationCommandInput, UpdateShareInvitationCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UpdateShareInvitationCommand";
    import { UpdateWorkloadCommandInput, UpdateWorkloadCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UpdateWorkloadCommand";
    import { UpdateWorkloadShareCommandInput, UpdateWorkloadShareCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UpdateWorkloadShareCommand";
    import { UpgradeLensReviewCommandInput, UpgradeLensReviewCommandOutput } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/commands/UpgradeLensReviewCommand";
    export type ServiceInputTypes = AssociateLensesCommandInput | CreateLensShareCommandInput | CreateLensVersionCommandInput | CreateMilestoneCommandInput | CreateWorkloadCommandInput | CreateWorkloadShareCommandInput | DeleteLensCommandInput | DeleteLensShareCommandInput | DeleteWorkloadCommandInput | DeleteWorkloadShareCommandInput | DisassociateLensesCommandInput | ExportLensCommandInput | GetAnswerCommandInput | GetLensCommandInput | GetLensReviewCommandInput | GetLensReviewReportCommandInput | GetLensVersionDifferenceCommandInput | GetMilestoneCommandInput | GetWorkloadCommandInput | ImportLensCommandInput | ListAnswersCommandInput | ListLensReviewImprovementsCommandInput | ListLensReviewsCommandInput | ListLensSharesCommandInput | ListLensesCommandInput | ListMilestonesCommandInput | ListNotificationsCommandInput | ListShareInvitationsCommandInput | ListTagsForResourceCommandInput | ListWorkloadSharesCommandInput | ListWorkloadsCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateAnswerCommandInput | UpdateGlobalSettingsCommandInput | UpdateLensReviewCommandInput | UpdateShareInvitationCommandInput | UpdateWorkloadCommandInput | UpdateWorkloadShareCommandInput | UpgradeLensReviewCommandInput;
    export type ServiceOutputTypes = AssociateLensesCommandOutput | CreateLensShareCommandOutput | CreateLensVersionCommandOutput | CreateMilestoneCommandOutput | CreateWorkloadCommandOutput | CreateWorkloadShareCommandOutput | DeleteLensCommandOutput | DeleteLensShareCommandOutput | DeleteWorkloadCommandOutput | DeleteWorkloadShareCommandOutput | DisassociateLensesCommandOutput | ExportLensCommandOutput | GetAnswerCommandOutput | GetLensCommandOutput | GetLensReviewCommandOutput | GetLensReviewReportCommandOutput | GetLensVersionDifferenceCommandOutput | GetMilestoneCommandOutput | GetWorkloadCommandOutput | ImportLensCommandOutput | ListAnswersCommandOutput | ListLensReviewImprovementsCommandOutput | ListLensReviewsCommandOutput | ListLensSharesCommandOutput | ListLensesCommandOutput | ListMilestonesCommandOutput | ListNotificationsCommandOutput | ListShareInvitationsCommandOutput | ListTagsForResourceCommandOutput | ListWorkloadSharesCommandOutput | ListWorkloadsCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateAnswerCommandOutput | UpdateGlobalSettingsCommandOutput | UpdateLensReviewCommandOutput | UpdateShareInvitationCommandOutput | UpdateWorkloadCommandOutput | UpdateWorkloadShareCommandOutput | UpgradeLensReviewCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type WellArchitectedClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of WellArchitectedClient class constructor that set the region, credentials and other options.
        */
    export interface WellArchitectedClientConfig extends WellArchitectedClientConfigType {
    }
    type WellArchitectedClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of WellArchitectedClient class. This is resolved and normalized from the {@link WellArchitectedClientConfig | constructor configuration interface}.
        */
    export interface WellArchitectedClientResolvedConfig extends WellArchitectedClientResolvedConfigType {
    }
    /**
        * <fullname>Well-Architected Tool</fullname>
        *
        *          <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the
        *             <a href="http://aws.amazon.com/well-architected-tool">Well-Architected Tool</a> in the
        *            <a href="https://console.aws.amazon.com/wellarchitected">Amazon Web Services Management Console</a>. For information
        *             about the Well-Architected Tool, see the
        *            <a href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html">Well-Architected Tool User Guide</a>.</p>
        */
    export class WellArchitectedClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, WellArchitectedClientResolvedConfig> {
            /**
                * The resolved configuration of WellArchitectedClient class. This is resolved and normalized from the {@link WellArchitectedClientConfig | constructor configuration interface}.
                */
            readonly config: WellArchitectedClientResolvedConfig;
            constructor(configuration: WellArchitectedClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { WellArchitectedServiceException as __BaseException } from "@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/WellArchitectedServiceException";
    /**
        * <p>User does not have sufficient access to perform this action.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            /**
                * <p>Description of the error.</p>
                */
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>The choice content.</p>
        */
    export interface ChoiceContent {
            /**
                * <p>The display text for the choice content.</p>
                */
            DisplayText?: string;
            /**
                * <p>The URL for the choice content.</p>
                */
            Url?: string;
    }
    export namespace ChoiceContent {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChoiceContent) => any;
    }
    export enum AdditionalResourceType {
            HELPFUL_RESOURCE = "HELPFUL_RESOURCE",
            IMPROVEMENT_PLAN = "IMPROVEMENT_PLAN"
    }
    /**
        * <p>The choice level additional resources.</p>
        */
    export interface AdditionalResources {
            /**
                * <p>Type of additional resource.</p>
                */
            Type?: AdditionalResourceType | string;
            /**
                * <p>The URLs for additional resources, either helpful resources or improvement plans. Up to five additional URLs can be specified.</p>
                */
            Content?: ChoiceContent[];
    }
    export namespace AdditionalResources {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdditionalResources) => any;
    }
    export enum ChoiceReason {
            ARCHITECTURE_CONSTRAINTS = "ARCHITECTURE_CONSTRAINTS",
            BUSINESS_PRIORITIES = "BUSINESS_PRIORITIES",
            NONE = "NONE",
            OTHER = "OTHER",
            OUT_OF_SCOPE = "OUT_OF_SCOPE"
    }
    export enum ChoiceStatus {
            NOT_APPLICABLE = "NOT_APPLICABLE",
            SELECTED = "SELECTED",
            UNSELECTED = "UNSELECTED"
    }
    /**
        * <p>A choice that has been answered on a question in your workload.</p>
        */
    export interface ChoiceAnswer {
            /**
                * <p>The ID of a choice.</p>
                */
            ChoiceId?: string;
            /**
                * <p>The status of a choice.</p>
                */
            Status?: ChoiceStatus | string;
            /**
                * <p>The reason why a choice is non-applicable to a question in your workload.</p>
                */
            Reason?: ChoiceReason | string;
            /**
                * <p>The notes associated with a choice.</p>
                */
            Notes?: string;
    }
    export namespace ChoiceAnswer {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChoiceAnswer) => any;
    }
    /**
        * <p>A choice available to answer question.</p>
        */
    export interface Choice {
            /**
                * <p>The ID of a choice.</p>
                */
            ChoiceId?: string;
            /**
                * <p>The title of a choice.</p>
                */
            Title?: string;
            /**
                * <p>The description of a choice.</p>
                */
            Description?: string;
            /**
                * <p>The choice level helpful resource.</p>
                */
            HelpfulResource?: ChoiceContent;
            /**
                * <p>The choice level improvement plan.</p>
                */
            ImprovementPlan?: ChoiceContent;
            /**
                * <p>The additional resources for a choice. A choice can have up to two additional resources: one of type <code>HELPFUL_RESOURCE</code>,
                *             one of type <code>IMPROVEMENT_PLAN</code>, or both.</p>
                */
            AdditionalResources?: AdditionalResources[];
    }
    export namespace Choice {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Choice) => any;
    }
    export enum AnswerReason {
            ARCHITECTURE_CONSTRAINTS = "ARCHITECTURE_CONSTRAINTS",
            BUSINESS_PRIORITIES = "BUSINESS_PRIORITIES",
            NONE = "NONE",
            OTHER = "OTHER",
            OUT_OF_SCOPE = "OUT_OF_SCOPE"
    }
    export enum Risk {
            HIGH = "HIGH",
            MEDIUM = "MEDIUM",
            NONE = "NONE",
            NOT_APPLICABLE = "NOT_APPLICABLE",
            UNANSWERED = "UNANSWERED"
    }
    /**
        * <p>An answer of the question.</p>
        */
    export interface Answer {
            /**
                * <p>The ID of the question.</p>
                */
            QuestionId?: string;
            /**
                * <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
                *         <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
                */
            PillarId?: string;
            /**
                * <p>The title of the question.</p>
                */
            QuestionTitle?: string;
            /**
                * <p>The description of the question.</p>
                */
            QuestionDescription?: string;
            /**
                * <p>The improvement plan URL for a question.</p>
                *         <p>This value is only available if the question has been answered.</p>
                */
            ImprovementPlanUrl?: string;
            /**
                * <p>The helpful resource URL for a question.</p>
                */
            HelpfulResourceUrl?: string;
            /**
                * <p>The helpful resource text to be displayed.</p>
                */
            HelpfulResourceDisplayText?: string;
            /**
                * <p>List of choices available for a question.</p>
                */
            Choices?: Choice[];
            /**
                * <p>List of selected choice IDs in a question answer.</p>
                *         <p>The values entered replace the previously selected choices.</p>
                */
            SelectedChoices?: string[];
            /**
                * <p>A list of selected choices to a question in your workload.</p>
                */
            ChoiceAnswers?: ChoiceAnswer[];
            /**
                * <p>Defines whether this question is applicable to a lens review.</p>
                */
            IsApplicable?: boolean;
            /**
                * <p>The risk for a given workload, lens review, pillar, or question.</p>
                */
            Risk?: Risk | string;
            /**
                * <p>The notes associated with the workload.</p>
                */
            Notes?: string;
            /**
                * <p>The reason why the question is not applicable to your workload.</p>
                */
            Reason?: AnswerReason | string;
    }
    export namespace Answer {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Answer) => any;
    }
    /**
        * <p>A choice summary that has been answered on a question in your workload.</p>
        */
    export interface ChoiceAnswerSummary {
            /**
                * <p>The ID of a choice.</p>
                */
            ChoiceId?: string;
            /**
                * <p>The status of a choice.</p>
                */
            Status?: ChoiceStatus | string;
            /**
                * <p>The reason why a choice is non-applicable to a question in your workload.</p>
                */
            Reason?: ChoiceReason | string;
    }
    export namespace ChoiceAnswerSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChoiceAnswerSummary) => any;
    }
    /**
        * <p>An answer summary of a lens review in a workload.</p>
        */
    export interface AnswerSummary {
            /**
                * <p>The ID of the question.</p>
                */
            QuestionId?: string;
            /**
                * <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
                *         <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
                */
            PillarId?: string;
            /**
                * <p>The title of the question.</p>
                */
            QuestionTitle?: string;
            /**
                * <p>List of choices available for a question.</p>
                */
            Choices?: Choice[];
            /**
                * <p>List of selected choice IDs in a question answer.</p>
                *         <p>The values entered replace the previously selected choices.</p>
                */
            SelectedChoices?: string[];
            /**
                * <p>A list of selected choices to a question in your workload.</p>
                */
            ChoiceAnswerSummaries?: ChoiceAnswerSummary[];
            /**
                * <p>Defines whether this question is applicable to a lens review.</p>
                */
            IsApplicable?: boolean;
            /**
                * <p>The risk for a given workload, lens review, pillar, or question.</p>
                */
            Risk?: Risk | string;
            /**
                * <p>The reason why a choice is non-applicable to a question in your workload.</p>
                */
            Reason?: AnswerReason | string;
    }
    export namespace AnswerSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AnswerSummary) => any;
    }
    /**
        * <p>Input to associate lens reviews.</p>
        */
    export interface AssociateLensesInput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId: string | undefined;
            /**
                * <p>List of lens aliases to associate or disassociate with a workload. Up to 10 lenses can be specified.</p>
                *         <p>Identify a lens using its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAliases: string[] | undefined;
    }
    export namespace AssociateLensesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateLensesInput) => any;
    }
    /**
        * <p>The resource already exists.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * <p>Description of the error.</p>
                */
            Message: string | undefined;
            /**
                * <p>Identifier of the resource affected.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>Type of the resource affected.</p>
                */
            ResourceType: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>There is a problem with the Well-Architected Tool API service.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            /**
                * <p>Description of the error.</p>
                */
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>The requested resource was not found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * <p>Description of the error.</p>
                */
            Message: string | undefined;
            /**
                * <p>Identifier of the resource affected.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>Type of the resource affected.</p>
                */
            ResourceType: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>Request was denied due to request throttling.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            /**
                * <p>Description of the error.</p>
                */
            Message: string | undefined;
            /**
                * <p>Service Quotas requirement to identify originating quota.</p>
                */
            QuotaCode?: string;
            /**
                * <p>Service Quotas requirement to identify originating service.</p>
                */
            ServiceCode?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    /**
        * <p>Stores information about a field passed inside a request that resulted in an exception.</p>
        */
    export interface ValidationExceptionField {
            /**
                * <p>The field name for which validation failed.</p>
                */
            Name: string | undefined;
            /**
                * <p>Description of the error.</p>
                */
            Message: string | undefined;
    }
    export namespace ValidationExceptionField {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidationExceptionField) => any;
    }
    export enum ValidationExceptionReason {
            CANNOT_PARSE = "CANNOT_PARSE",
            FIELD_VALIDATION_FAILED = "FIELD_VALIDATION_FAILED",
            OTHER = "OTHER",
            UNKNOWN_OPERATION = "UNKNOWN_OPERATION"
    }
    /**
        * <p>The user input is not valid.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            /**
                * <p>Description of the error.</p>
                */
            Message: string | undefined;
            /**
                * <p>The reason why the request failed validation.</p>
                */
            Reason?: ValidationExceptionReason | string;
            /**
                * <p>The fields that caused the error, if applicable.</p>
                */
            Fields?: ValidationExceptionField[];
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    /**
        * <p>The choice level improvement plan.</p>
        */
    export interface ChoiceImprovementPlan {
            /**
                * <p>The ID of a choice.</p>
                */
            ChoiceId?: string;
            /**
                * <p>The display text for the improvement plan.</p>
                */
            DisplayText?: string;
            /**
                * <p>The improvement plan URL for a question.</p>
                *         <p>This value is only available if the question has been answered.</p>
                */
            ImprovementPlanUrl?: string;
    }
    export namespace ChoiceImprovementPlan {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChoiceImprovementPlan) => any;
    }
    /**
        * <p>A list of choices to be updated.</p>
        */
    export interface ChoiceUpdate {
            /**
                * <p>The status of a choice.</p>
                */
            Status: ChoiceStatus | string | undefined;
            /**
                * <p>The reason why a choice is non-applicable to a question in your workload.</p>
                */
            Reason?: ChoiceReason | string;
            /**
                * <p>The notes associated with a choice.</p>
                */
            Notes?: string;
    }
    export namespace ChoiceUpdate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChoiceUpdate) => any;
    }
    export interface CreateLensShareInput {
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias: string | undefined;
            /**
                * <p>The Amazon Web Services account ID or IAM role with which the workload is shared.</p>
                */
            SharedWith: string | undefined;
            /**
                * <p>A unique case-sensitive string used to ensure that this request is idempotent
                *             (executes only once).</p>
                *         <p>You should not reuse the same token for other requests. If you retry a request with
                *             the same client request token and the same parameters after it has completed
                *             successfully, the result of the original request is returned. </p>
                *         <important>
                *             <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs
                *                 automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI,
                *                 you must provide this token or the request will fail.</p>
                *         </important>
                */
            ClientRequestToken?: string;
    }
    export namespace CreateLensShareInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLensShareInput) => any;
    }
    export interface CreateLensShareOutput {
            /**
                * <p>The ID associated with the workload share.</p>
                */
            ShareId?: string;
    }
    export namespace CreateLensShareOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLensShareOutput) => any;
    }
    /**
        * <p>The user has reached their resource quota.</p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            /**
                * <p>Description of the error.</p>
                */
            Message: string | undefined;
            /**
                * <p>Identifier of the resource affected.</p>
                */
            ResourceId?: string;
            /**
                * <p>Type of the resource affected.</p>
                */
            ResourceType?: string;
            /**
                * <p>Service Quotas requirement to identify originating quota.</p>
                */
            QuotaCode: string | undefined;
            /**
                * <p>Service Quotas requirement to identify originating service.</p>
                */
            ServiceCode: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    export interface CreateLensVersionInput {
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias: string | undefined;
            /**
                * <p>The version of the lens being created.</p>
                */
            LensVersion: string | undefined;
            /**
                * <p>Set to true if this new major lens version.</p>
                */
            IsMajorVersion?: boolean;
            /**
                * <p>A unique case-sensitive string used to ensure that this request is idempotent
                *             (executes only once).</p>
                *         <p>You should not reuse the same token for other requests. If you retry a request with
                *             the same client request token and the same parameters after it has completed
                *             successfully, the result of the original request is returned. </p>
                *         <important>
                *             <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs
                *                 automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI,
                *                 you must provide this token or the request will fail.</p>
                *         </important>
                */
            ClientRequestToken?: string;
    }
    export namespace CreateLensVersionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLensVersionInput) => any;
    }
    export interface CreateLensVersionOutput {
            /**
                * <p>The ARN for the lens.</p>
                */
            LensArn?: string;
            /**
                * <p>The version of the lens.</p>
                */
            LensVersion?: string;
    }
    export namespace CreateLensVersionOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLensVersionOutput) => any;
    }
    /**
        * <p>Input for milestone creation.</p>
        */
    export interface CreateMilestoneInput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId: string | undefined;
            /**
                * <p>The name of the milestone in a workload.</p>
                *         <p>Milestone names must be unique within a workload.</p>
                */
            MilestoneName: string | undefined;
            /**
                * <p>A unique case-sensitive string used to ensure that this request is idempotent
                *             (executes only once).</p>
                *         <p>You should not reuse the same token for other requests. If you retry a request with
                *             the same client request token and the same parameters after it has completed
                *             successfully, the result of the original request is returned. </p>
                *         <important>
                *             <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs
                *                 automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI,
                *                 you must provide this token or the request will fail.</p>
                *         </important>
                */
            ClientRequestToken?: string;
    }
    export namespace CreateMilestoneInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateMilestoneInput) => any;
    }
    /**
        * <p>Output of a create milestone call.</p>
        */
    export interface CreateMilestoneOutput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId?: string;
            /**
                * <p>The milestone number.</p>
                *         <p>A workload can have a maximum of 100 milestones.</p>
                */
            MilestoneNumber?: number;
    }
    export namespace CreateMilestoneOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateMilestoneOutput) => any;
    }
    export enum WorkloadEnvironment {
            PREPRODUCTION = "PREPRODUCTION",
            PRODUCTION = "PRODUCTION"
    }
    /**
        * <p>Input for workload creation.</p>
        */
    export interface CreateWorkloadInput {
            /**
                * <p>The name of the workload.</p>
                *         <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization
                *             are ignored when checking for uniqueness.</p>
                */
            WorkloadName: string | undefined;
            /**
                * <p>The description for the workload.</p>
                */
            Description: string | undefined;
            /**
                * <p>The environment for the workload.</p>
                */
            Environment: WorkloadEnvironment | string | undefined;
            /**
                * <p>The list of Amazon Web Services account IDs associated with the workload.</p>
                */
            AccountIds?: string[];
            /**
                * <p>The list of Amazon Web Services Regions associated with the workload, for example,
                *                 <code>us-east-2</code>, or <code>ca-central-1</code>.</p>
                */
            AwsRegions?: string[];
            /**
                * <p> The list of non-Amazon Web Services Regions associated with the workload.</p>
                */
            NonAwsRegions?: string[];
            /**
                * <p>The priorities of the pillars, which are used to order items in the improvement plan.
                *             Each pillar is represented by its <a>PillarReviewSummary$PillarId</a>.</p>
                */
            PillarPriorities?: string[];
            /**
                * <p>The URL of the architectural design for the workload.</p>
                */
            ArchitecturalDesign?: string;
            /**
                * <p>The review owner of the workload. The name, email address, or identifier for the
                *             primary group or individual that owns the workload review process.</p>
                */
            ReviewOwner?: string;
            /**
                * <p>The industry type for the workload.</p>
                *         <p>If specified, must be one of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>Agriculture</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Automobile</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Defense</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Design and Engineering</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Digital Advertising</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Education</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Environmental Protection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Financial Services</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Gaming</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>General Public Services</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Healthcare</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Hospitality</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>InfoTech</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Justice and Public Safety</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Life Sciences</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Manufacturing</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Media & Entertainment</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Mining & Resources</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Oil & Gas</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Power & Utilities</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Professional Services</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Real Estate & Construction</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Retail & Wholesale</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Social Protection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Telecommunications</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Travel, Transportation & Logistics</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Other</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            IndustryType?: string;
            /**
                * <p>The industry for the workload.</p>
                */
            Industry?: string;
            /**
                * <p>The list of lenses associated with the workload. Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            Lenses: string[] | undefined;
            /**
                * <p>The notes associated with the workload.</p>
                */
            Notes?: string;
            /**
                * <p>A unique case-sensitive string used to ensure that this request is idempotent
                *             (executes only once).</p>
                *         <p>You should not reuse the same token for other requests. If you retry a request with
                *             the same client request token and the same parameters after it has completed
                *             successfully, the result of the original request is returned. </p>
                *         <important>
                *             <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs
                *                 automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI,
                *                 you must provide this token or the request will fail.</p>
                *         </important>
                */
            ClientRequestToken?: string;
            /**
                * <p>The tags to be associated with the workload.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateWorkloadInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkloadInput) => any;
    }
    /**
        * <p>Output of a create workload call.</p>
        */
    export interface CreateWorkloadOutput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId?: string;
            /**
                * <p>The ARN for the workload.</p>
                */
            WorkloadArn?: string;
    }
    export namespace CreateWorkloadOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkloadOutput) => any;
    }
    export enum PermissionType {
            CONTRIBUTOR = "CONTRIBUTOR",
            READONLY = "READONLY"
    }
    /**
        * <p>Input for Create Workload Share</p>
        */
    export interface CreateWorkloadShareInput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId: string | undefined;
            /**
                * <p>The Amazon Web Services account ID or IAM role with which the workload is shared.</p>
                */
            SharedWith: string | undefined;
            /**
                * <p>Permission granted on a workload share.</p>
                */
            PermissionType: PermissionType | string | undefined;
            /**
                * <p>A unique case-sensitive string used to ensure that this request is idempotent
                *             (executes only once).</p>
                *         <p>You should not reuse the same token for other requests. If you retry a request with
                *             the same client request token and the same parameters after it has completed
                *             successfully, the result of the original request is returned. </p>
                *         <important>
                *             <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs
                *                 automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI,
                *                 you must provide this token or the request will fail.</p>
                *         </important>
                */
            ClientRequestToken?: string;
    }
    export namespace CreateWorkloadShareInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkloadShareInput) => any;
    }
    /**
        * <p>Input for Create Workload Share</p>
        */
    export interface CreateWorkloadShareOutput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId?: string;
            /**
                * <p>The ID associated with the workload share.</p>
                */
            ShareId?: string;
    }
    export namespace CreateWorkloadShareOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkloadShareOutput) => any;
    }
    export enum LensStatusType {
            ALL = "ALL",
            DRAFT = "DRAFT",
            PUBLISHED = "PUBLISHED"
    }
    export interface DeleteLensInput {
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias: string | undefined;
            /**
                * <p>A unique case-sensitive string used to ensure that this request is idempotent
                *             (executes only once).</p>
                *         <p>You should not reuse the same token for other requests. If you retry a request with
                *             the same client request token and the same parameters after it has completed
                *             successfully, the result of the original request is returned. </p>
                *         <important>
                *             <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs
                *                 automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI,
                *                 you must provide this token or the request will fail.</p>
                *         </important>
                */
            ClientRequestToken?: string;
            /**
                * <p>The status of the lens to be deleted.</p>
                */
            LensStatus: LensStatusType | string | undefined;
    }
    export namespace DeleteLensInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLensInput) => any;
    }
    export interface DeleteLensShareInput {
            /**
                * <p>The ID associated with the workload share.</p>
                */
            ShareId: string | undefined;
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias: string | undefined;
            /**
                * <p>A unique case-sensitive string used to ensure that this request is idempotent
                *             (executes only once).</p>
                *         <p>You should not reuse the same token for other requests. If you retry a request with
                *             the same client request token and the same parameters after it has completed
                *             successfully, the result of the original request is returned. </p>
                *         <important>
                *             <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs
                *                 automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI,
                *                 you must provide this token or the request will fail.</p>
                *         </important>
                */
            ClientRequestToken?: string;
    }
    export namespace DeleteLensShareInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLensShareInput) => any;
    }
    /**
        * <p>Input for workload deletion.</p>
        */
    export interface DeleteWorkloadInput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId: string | undefined;
            /**
                * <p>A unique case-sensitive string used to ensure that this request is idempotent
                *             (executes only once).</p>
                *         <p>You should not reuse the same token for other requests. If you retry a request with
                *             the same client request token and the same parameters after it has completed
                *             successfully, the result of the original request is returned. </p>
                *         <important>
                *             <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs
                *                 automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI,
                *                 you must provide this token or the request will fail.</p>
                *         </important>
                */
            ClientRequestToken?: string;
    }
    export namespace DeleteWorkloadInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorkloadInput) => any;
    }
    /**
        * <p>Input for Delete Workload Share</p>
        */
    export interface DeleteWorkloadShareInput {
            /**
                * <p>The ID associated with the workload share.</p>
                */
            ShareId: string | undefined;
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId: string | undefined;
            /**
                * <p>A unique case-sensitive string used to ensure that this request is idempotent
                *             (executes only once).</p>
                *         <p>You should not reuse the same token for other requests. If you retry a request with
                *             the same client request token and the same parameters after it has completed
                *             successfully, the result of the original request is returned. </p>
                *         <important>
                *             <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs
                *                 automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI,
                *                 you must provide this token or the request will fail.</p>
                *         </important>
                */
            ClientRequestToken?: string;
    }
    export namespace DeleteWorkloadShareInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorkloadShareInput) => any;
    }
    export enum DifferenceStatus {
            DELETED = "DELETED",
            NEW = "NEW",
            UPDATED = "UPDATED"
    }
    /**
        * <p>Input to disassociate lens reviews.</p>
        */
    export interface DisassociateLensesInput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId: string | undefined;
            /**
                * <p>List of lens aliases to associate or disassociate with a workload. Up to 10 lenses can be specified.</p>
                *         <p>Identify a lens using its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAliases: string[] | undefined;
    }
    export namespace DisassociateLensesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateLensesInput) => any;
    }
    export interface ExportLensInput {
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias: string | undefined;
            /**
                * <p>The lens version to be exported.</p>
                */
            LensVersion?: string;
    }
    export namespace ExportLensInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExportLensInput) => any;
    }
    export interface ExportLensOutput {
            /**
                * <p>The JSON for the lens.</p>
                */
            LensJSON?: string;
    }
    export namespace ExportLensOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExportLensOutput) => any;
    }
    /**
        * <p>Input to get answer.</p>
        */
    export interface GetAnswerInput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId: string | undefined;
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias: string | undefined;
            /**
                * <p>The ID of the question.</p>
                */
            QuestionId: string | undefined;
            /**
                * <p>The milestone number.</p>
                *         <p>A workload can have a maximum of 100 milestones.</p>
                */
            MilestoneNumber?: number;
    }
    export namespace GetAnswerInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAnswerInput) => any;
    }
    /**
        * <p>Output of a get answer call.</p>
        */
    export interface GetAnswerOutput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId?: string;
            /**
                * <p>The milestone number.</p>
                *         <p>A workload can have a maximum of 100 milestones.</p>
                */
            MilestoneNumber?: number;
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias?: string;
            /**
                * <p>The ARN for the lens.</p>
                */
            LensArn?: string;
            /**
                * <p>An answer of the question.</p>
                */
            Answer?: Answer;
    }
    export namespace GetAnswerOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAnswerOutput) => any;
    }
    export interface GetLensInput {
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias: string | undefined;
            /**
                * <p>The lens version to be retrieved.</p>
                */
            LensVersion?: string;
    }
    export namespace GetLensInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLensInput) => any;
    }
    /**
        * <p>A lens return object.</p>
        */
    export interface Lens {
            /**
                * <p>The ARN of a lens.</p>
                */
            LensArn?: string;
            /**
                * <p>The version of a lens.</p>
                */
            LensVersion?: string;
            /**
                * <p>The full name of the lens.</p>
                */
            Name?: string;
            /**
                * <p>The description of the lens.</p>
                */
            Description?: string;
            /**
                * <p>The Amazon Web Services account ID that owns the lens.</p>
                */
            Owner?: string;
            /**
                * <p>The ID assigned to the share invitation.</p>
                */
            ShareInvitationId?: string;
            /**
                * <p>The tags assigned to the lens.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace Lens {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Lens) => any;
    }
    export interface GetLensOutput {
            /**
                * <p>A lens return object.</p>
                */
            Lens?: Lens;
    }
    export namespace GetLensOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLensOutput) => any;
    }
    /**
        * <p>Input to get lens review.</p>
        */
    export interface GetLensReviewInput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId: string | undefined;
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias: string | undefined;
            /**
                * <p>The milestone number.</p>
                *         <p>A workload can have a maximum of 100 milestones.</p>
                */
            MilestoneNumber?: number;
    }
    export namespace GetLensReviewInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLensReviewInput) => any;
    }
    export enum LensStatus {
            CURRENT = "CURRENT",
            DELETED = "DELETED",
            DEPRECATED = "DEPRECATED",
            NOT_CURRENT = "NOT_CURRENT",
            UNSHARED = "UNSHARED"
    }
    /**
        * <p>A pillar review summary of a lens review.</p>
        */
    export interface PillarReviewSummary {
            /**
                * <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
                *         <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
                */
            PillarId?: string;
            /**
                * <p>The name of the pillar.</p>
                */
            PillarName?: string;
            /**
                * <p>The notes associated with the workload.</p>
                */
            Notes?: string;
            /**
                * <p>A map from risk names to the count of how questions have that rating.</p>
                */
            RiskCounts?: Record<string, number>;
    }
    export namespace PillarReviewSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PillarReviewSummary) => any;
    }
    /**
        * <p>A lens review of a question.</p>
        */
    export interface LensReview {
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias?: string;
            /**
                * <p>The ARN for the lens.</p>
                */
            LensArn?: string;
            /**
                * <p>The version of the lens.</p>
                */
            LensVersion?: string;
            /**
                * <p>The full name of the lens.</p>
                */
            LensName?: string;
            /**
                * <p>The status of the lens.</p>
                */
            LensStatus?: LensStatus | string;
            /**
                * <p>List of pillar review summaries of lens review in a workload.</p>
                */
            PillarReviewSummaries?: PillarReviewSummary[];
            /**
                * <p>The date and time recorded.</p>
                */
            UpdatedAt?: Date;
            /**
                * <p>The notes associated with the workload.</p>
                */
            Notes?: string;
            /**
                * <p>A map from risk names to the count of how questions have that rating.</p>
                */
            RiskCounts?: Record<string, number>;
            /**
                * <p>The token to use to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace LensReview {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LensReview) => any;
    }
    /**
        * <p>Output of a get lens review call.</p>
        */
    export interface GetLensReviewOutput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId?: string;
            /**
                * <p>The milestone number.</p>
                *         <p>A workload can have a maximum of 100 milestones.</p>
                */
            MilestoneNumber?: number;
            /**
                * <p>A lens review of a question.</p>
                */
            LensReview?: LensReview;
    }
    export namespace GetLensReviewOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLensReviewOutput) => any;
    }
    /**
        * <p>Input to get lens review report.</p>
        */
    export interface GetLensReviewReportInput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId: string | undefined;
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias: string | undefined;
            /**
                * <p>The milestone number.</p>
                *         <p>A workload can have a maximum of 100 milestones.</p>
                */
            MilestoneNumber?: number;
    }
    export namespace GetLensReviewReportInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLensReviewReportInput) => any;
    }
    /**
        * <p>A report of a lens review.</p>
        */
    export interface LensReviewReport {
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias?: string;
            /**
                * <p>The ARN for the lens.</p>
                */
            LensArn?: string;
            /**
                * <p>The Base64-encoded string representation of a lens review report.</p>
                *         <p>This data can be used to create a PDF file.</p>
                */
            Base64String?: string;
    }
    export namespace LensReviewReport {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LensReviewReport) => any;
    }
    /**
        * <p>Output of a get lens review report call.</p>
        */
    export interface GetLensReviewReportOutput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId?: string;
            /**
                * <p>The milestone number.</p>
                *         <p>A workload can have a maximum of 100 milestones.</p>
                */
            MilestoneNumber?: number;
            /**
                * <p>A report of a lens review.</p>
                */
            LensReviewReport?: LensReviewReport;
    }
    export namespace GetLensReviewReportOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLensReviewReportOutput) => any;
    }
    export interface GetLensVersionDifferenceInput {
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias: string | undefined;
            /**
                * <p>The base version of the lens.</p>
                */
            BaseLensVersion?: string;
            /**
                * <p>The lens version to target a difference for.</p>
                */
            TargetLensVersion?: string;
    }
    export namespace GetLensVersionDifferenceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLensVersionDifferenceInput) => any;
    }
    /**
        * <p>A question difference return object.</p>
        */
    export interface QuestionDifference {
            /**
                * <p>The ID of the question.</p>
                */
            QuestionId?: string;
            /**
                * <p>The title of the question.</p>
                */
            QuestionTitle?: string;
            /**
                * <p>Indicates the type of change to the question.</p>
                */
            DifferenceStatus?: DifferenceStatus | string;
    }
    export namespace QuestionDifference {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QuestionDifference) => any;
    }
    /**
        * <p>A pillar difference return object.</p>
        */
    export interface PillarDifference {
            /**
                * <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
                *         <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
                */
            PillarId?: string;
            /**
                * <p>The name of the pillar.</p>
                */
            PillarName?: string;
            /**
                * <p>Indicates the type of change to the pillar.</p>
                */
            DifferenceStatus?: DifferenceStatus | string;
            /**
                * <p>List of question differences.</p>
                */
            QuestionDifferences?: QuestionDifference[];
    }
    export namespace PillarDifference {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PillarDifference) => any;
    }
    /**
        * <p>The differences between the base and latest versions of the lens.</p>
        */
    export interface VersionDifferences {
            /**
                * <p>The differences between the base and latest versions of the lens.</p>
                */
            PillarDifferences?: PillarDifference[];
    }
    export namespace VersionDifferences {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VersionDifferences) => any;
    }
    export interface GetLensVersionDifferenceOutput {
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias?: string;
            /**
                * <p>The ARN for the lens.</p>
                */
            LensArn?: string;
            /**
                * <p>The base version of the lens.</p>
                */
            BaseLensVersion?: string;
            /**
                * <p>The target lens version for the lens.</p>
                */
            TargetLensVersion?: string;
            /**
                * <p>The latest version of the lens.</p>
                */
            LatestLensVersion?: string;
            /**
                * <p>The differences between the base and latest versions of the lens.</p>
                */
            VersionDifferences?: VersionDifferences;
    }
    export namespace GetLensVersionDifferenceOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLensVersionDifferenceOutput) => any;
    }
    /**
        * <p>Input to get a milestone.</p>
        */
    export interface GetMilestoneInput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId: string | undefined;
            /**
                * <p>The milestone number.</p>
                *         <p>A workload can have a maximum of 100 milestones.</p>
                */
            MilestoneNumber: number | undefined;
    }
    export namespace GetMilestoneInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMilestoneInput) => any;
    }
    export enum WorkloadImprovementStatus {
            COMPLETE = "COMPLETE",
            IN_PROGRESS = "IN_PROGRESS",
            NOT_APPLICABLE = "NOT_APPLICABLE",
            NOT_STARTED = "NOT_STARTED",
            RISK_ACKNOWLEDGED = "RISK_ACKNOWLEDGED"
    }
    /**
        * <p>A workload return object.</p>
        */
    export interface Workload {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId?: string;
            /**
                * <p>The ARN for the workload.</p>
                */
            WorkloadArn?: string;
            /**
                * <p>The name of the workload.</p>
                *         <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization
                *             are ignored when checking for uniqueness.</p>
                */
            WorkloadName?: string;
            /**
                * <p>The description for the workload.</p>
                */
            Description?: string;
            /**
                * <p>The environment for the workload.</p>
                */
            Environment?: WorkloadEnvironment | string;
            /**
                * <p>The date and time recorded.</p>
                */
            UpdatedAt?: Date;
            /**
                * <p>The list of Amazon Web Services account IDs associated with the workload.</p>
                */
            AccountIds?: string[];
            /**
                * <p>The list of Amazon Web Services Regions associated with the workload, for example,
                *                 <code>us-east-2</code>, or <code>ca-central-1</code>.</p>
                */
            AwsRegions?: string[];
            /**
                * <p> The list of non-Amazon Web Services Regions associated with the workload.</p>
                */
            NonAwsRegions?: string[];
            /**
                * <p>The URL of the architectural design for the workload.</p>
                */
            ArchitecturalDesign?: string;
            /**
                * <p>The review owner of the workload. The name, email address, or identifier for the
                *             primary group or individual that owns the workload review process.</p>
                */
            ReviewOwner?: string;
            /**
                * <p>The date and time recorded.</p>
                */
            ReviewRestrictionDate?: Date;
            /**
                * <p>Flag indicating whether the workload owner has acknowledged that the <i>Review
                *                 owner</i> field is required.</p>
                *         <p>If a <b>Review owner</b> is not added to the workload within
                *             60 days of acknowledgement, access to the workload is restricted until an owner is
                *             added.</p>
                */
            IsReviewOwnerUpdateAcknowledged?: boolean;
            /**
                * <p>The industry type for the workload.</p>
                *         <p>If specified, must be one of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>Agriculture</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Automobile</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Defense</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Design and Engineering</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Digital Advertising</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Education</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Environmental Protection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Financial Services</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Gaming</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>General Public Services</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Healthcare</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Hospitality</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>InfoTech</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Justice and Public Safety</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Life Sciences</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Manufacturing</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Media & Entertainment</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Mining & Resources</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Oil & Gas</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Power & Utilities</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Professional Services</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Real Estate & Construction</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Retail & Wholesale</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Social Protection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Telecommunications</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Travel, Transportation & Logistics</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Other</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            IndustryType?: string;
            /**
                * <p>The industry for the workload.</p>
                */
            Industry?: string;
            /**
                * <p>The notes associated with the workload.</p>
                */
            Notes?: string;
            /**
                * <p>The improvement status for a workload.</p>
                */
            ImprovementStatus?: WorkloadImprovementStatus | string;
            /**
                * <p>A map from risk names to the count of how questions have that rating.</p>
                */
            RiskCounts?: Record<string, number>;
            /**
                * <p>The priorities of the pillars, which are used to order items in the improvement plan.
                *             Each pillar is represented by its <a>PillarReviewSummary$PillarId</a>.</p>
                */
            PillarPriorities?: string[];
            /**
                * <p>The list of lenses associated with the workload. Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            Lenses?: string[];
            /**
                * <p>An Amazon Web Services account ID.</p>
                */
            Owner?: string;
            /**
                * <p>The ID assigned to the share invitation.</p>
                */
            ShareInvitationId?: string;
            /**
                * <p>The tags associated with the workload.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace Workload {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Workload) => any;
    }
    /**
        * <p>A milestone return object.</p>
        */
    export interface Milestone {
            /**
                * <p>The milestone number.</p>
                *         <p>A workload can have a maximum of 100 milestones.</p>
                */
            MilestoneNumber?: number;
            /**
                * <p>The name of the milestone in a workload.</p>
                *         <p>Milestone names must be unique within a workload.</p>
                */
            MilestoneName?: string;
            /**
                * <p>The date and time recorded.</p>
                */
            RecordedAt?: Date;
            /**
                * <p>A workload return object.</p>
                */
            Workload?: Workload;
    }
    export namespace Milestone {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Milestone) => any;
    }
    /**
        * <p>Output of a get milestone call.</p>
        */
    export interface GetMilestoneOutput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId?: string;
            /**
                * <p>A milestone return object.</p>
                */
            Milestone?: Milestone;
    }
    export namespace GetMilestoneOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMilestoneOutput) => any;
    }
    /**
        * <p>Input to get a workload.</p>
        */
    export interface GetWorkloadInput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId: string | undefined;
    }
    export namespace GetWorkloadInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWorkloadInput) => any;
    }
    /**
        * <p>Output of a get workload call.</p>
        */
    export interface GetWorkloadOutput {
            /**
                * <p>A workload return object.</p>
                */
            Workload?: Workload;
    }
    export namespace GetWorkloadOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWorkloadOutput) => any;
    }
    export interface ImportLensInput {
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias?: string;
            /**
                * <p>The JSON representation of a lens.</p>
                */
            JSONString: string | undefined;
            /**
                * <p>A unique case-sensitive string used to ensure that this request is idempotent
                *             (executes only once).</p>
                *         <p>You should not reuse the same token for other requests. If you retry a request with
                *             the same client request token and the same parameters after it has completed
                *             successfully, the result of the original request is returned. </p>
                *         <important>
                *             <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs
                *                 automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI,
                *                 you must provide this token or the request will fail.</p>
                *         </important>
                */
            ClientRequestToken?: string;
            /**
                * <p>Tags to associate to a lens.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ImportLensInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportLensInput) => any;
    }
    export enum ImportLensStatus {
            COMPLETE = "COMPLETE",
            ERROR = "ERROR",
            IN_PROGRESS = "IN_PROGRESS"
    }
    export interface ImportLensOutput {
            /**
                * <p>The ARN for the lens.</p>
                */
            LensArn?: string;
            /**
                * <p>The status of the imported lens.</p>
                */
            Status?: ImportLensStatus | string;
    }
    export namespace ImportLensOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportLensOutput) => any;
    }
    /**
        * <p>An improvement summary of a lens review in a workload.</p>
        */
    export interface ImprovementSummary {
            /**
                * <p>The ID of the question.</p>
                */
            QuestionId?: string;
            /**
                * <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
                *         <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
                */
            PillarId?: string;
            /**
                * <p>The title of the question.</p>
                */
            QuestionTitle?: string;
            /**
                * <p>The risk for a given workload, lens review, pillar, or question.</p>
                */
            Risk?: Risk | string;
            /**
                * <p>The improvement plan URL for a question.</p>
                *         <p>This value is only available if the question has been answered.</p>
                */
            ImprovementPlanUrl?: string;
            /**
                * <p>The improvement plan details.</p>
                */
            ImprovementPlans?: ChoiceImprovementPlan[];
    }
    export namespace ImprovementSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImprovementSummary) => any;
    }
    /**
        * <p>A lens review summary of a workload.</p>
        */
    export interface LensReviewSummary {
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias?: string;
            /**
                * <p>The ARN for the lens.</p>
                */
            LensArn?: string;
            /**
                * <p>The version of the lens.</p>
                */
            LensVersion?: string;
            /**
                * <p>The full name of the lens.</p>
                */
            LensName?: string;
            /**
                * <p>The status of the lens.</p>
                */
            LensStatus?: LensStatus | string;
            /**
                * <p>The date and time recorded.</p>
                */
            UpdatedAt?: Date;
            /**
                * <p>A map from risk names to the count of how questions have that rating.</p>
                */
            RiskCounts?: Record<string, number>;
    }
    export namespace LensReviewSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LensReviewSummary) => any;
    }
    export enum ShareStatus {
            ACCEPTED = "ACCEPTED",
            ASSOCIATED = "ASSOCIATED",
            ASSOCIATING = "ASSOCIATING",
            EXPIRED = "EXPIRED",
            FAILED = "FAILED",
            PENDING = "PENDING",
            REJECTED = "REJECTED",
            REVOKED = "REVOKED"
    }
    /**
        * <p>A lens share summary return object.</p>
        */
    export interface LensShareSummary {
            /**
                * <p>The ID associated with the workload share.</p>
                */
            ShareId?: string;
            /**
                * <p>The Amazon Web Services account ID or IAM role with which the workload is shared.</p>
                */
            SharedWith?: string;
            /**
                * <p>The status of a workload share.</p>
                */
            Status?: ShareStatus | string;
            /**
                * <p>Optional message to compliment the Status field.</p>
                */
            StatusMessage?: string;
    }
    export namespace LensShareSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LensShareSummary) => any;
    }
    export enum LensType {
            AWS_OFFICIAL = "AWS_OFFICIAL",
            CUSTOM_SELF = "CUSTOM_SELF",
            CUSTOM_SHARED = "CUSTOM_SHARED"
    }
    /**
        * <p>A lens summary of a lens.</p>
        */
    export interface LensSummary {
            /**
                * <p>The ARN of the lens.</p>
                */
            LensArn?: string;
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias?: string;
            /**
                * <p>The full name of the lens.</p>
                */
            LensName?: string;
            /**
                * <p>The type of the lens.</p>
                */
            LensType?: LensType | string;
            /**
                * <p>The description of the lens.</p>
                */
            Description?: string;
            /**
                * <p>The date and time recorded.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The date and time recorded.</p>
                */
            UpdatedAt?: Date;
            /**
                * <p>The version of the lens.</p>
                */
            LensVersion?: string;
            /**
                * <p>An Amazon Web Services account ID.</p>
                */
            Owner?: string;
            /**
                * <p>The status of the lens.</p>
                */
            LensStatus?: LensStatus | string;
    }
    export namespace LensSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LensSummary) => any;
    }
    /**
        * <p>Lens upgrade summary return object.</p>
        */
    export interface LensUpgradeSummary {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId?: string;
            /**
                * <p>The name of the workload.</p>
                *         <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization
                *             are ignored when checking for uniqueness.</p>
                */
            WorkloadName?: string;
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias?: string;
            /**
                * <p>The ARN for the lens.</p>
                */
            LensArn?: string;
            /**
                * <p>The current version of the lens.</p>
                */
            CurrentLensVersion?: string;
            /**
                * <p>The latest version of the lens.</p>
                */
            LatestLensVersion?: string;
    }
    export namespace LensUpgradeSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LensUpgradeSummary) => any;
    }
    /**
        * <p>Input to list answers.</p>
        */
    export interface ListAnswersInput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId: string | undefined;
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias: string | undefined;
            /**
                * <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
                *         <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
                */
            PillarId?: string;
            /**
                * <p>The milestone number.</p>
                *         <p>A workload can have a maximum of 100 milestones.</p>
                */
            MilestoneNumber?: number;
            /**
                * <p>The token to use to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return for this request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListAnswersInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAnswersInput) => any;
    }
    /**
        * <p>Output of a list answers call.</p>
        */
    export interface ListAnswersOutput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId?: string;
            /**
                * <p>The milestone number.</p>
                *         <p>A workload can have a maximum of 100 milestones.</p>
                */
            MilestoneNumber?: number;
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias?: string;
            /**
                * <p>The ARN for the lens.</p>
                */
            LensArn?: string;
            /**
                * <p>List of answer summaries of lens review in a workload.</p>
                */
            AnswerSummaries?: AnswerSummary[];
            /**
                * <p>The token to use to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListAnswersOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAnswersOutput) => any;
    }
    /**
        * <p>Input to list lenses.</p>
        */
    export interface ListLensesInput {
            /**
                * <p>The token to use to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return for this request.</p>
                */
            MaxResults?: number;
            /**
                * <p>The type of lenses to be returned.</p>
                */
            LensType?: LensType | string;
            /**
                * <p>The status of lenses to be returned.</p>
                */
            LensStatus?: LensStatusType | string;
            /**
                * <p>The full name of the lens.</p>
                */
            LensName?: string;
    }
    export namespace ListLensesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLensesInput) => any;
    }
    /**
        * <p>Output of a list lenses call.</p>
        */
    export interface ListLensesOutput {
            /**
                * <p>List of lens summaries of available lenses.</p>
                */
            LensSummaries?: LensSummary[];
            /**
                * <p>The token to use to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListLensesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLensesOutput) => any;
    }
    /**
        * <p>Input to list lens review improvements.</p>
        */
    export interface ListLensReviewImprovementsInput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId: string | undefined;
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias: string | undefined;
            /**
                * <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
                *         <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
                */
            PillarId?: string;
            /**
                * <p>The milestone number.</p>
                *         <p>A workload can have a maximum of 100 milestones.</p>
                */
            MilestoneNumber?: number;
            /**
                * <p>The token to use to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return for this request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListLensReviewImprovementsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLensReviewImprovementsInput) => any;
    }
    /**
        * <p>Output of a list lens review improvements call.</p>
        */
    export interface ListLensReviewImprovementsOutput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId?: string;
            /**
                * <p>The milestone number.</p>
                *         <p>A workload can have a maximum of 100 milestones.</p>
                */
            MilestoneNumber?: number;
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias?: string;
            /**
                * <p>The ARN for the lens.</p>
                */
            LensArn?: string;
            /**
                * <p>List of improvement summaries of lens review in a workload.</p>
                */
            ImprovementSummaries?: ImprovementSummary[];
            /**
                * <p>The token to use to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListLensReviewImprovementsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLensReviewImprovementsOutput) => any;
    }
    /**
        * <p>Input to list lens reviews.</p>
        */
    export interface ListLensReviewsInput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId: string | undefined;
            /**
                * <p>The milestone number.</p>
                *         <p>A workload can have a maximum of 100 milestones.</p>
                */
            MilestoneNumber?: number;
            /**
                * <p>The token to use to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return for this request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListLensReviewsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLensReviewsInput) => any;
    }
    /**
        * <p>Output of a list lens reviews call.</p>
        */
    export interface ListLensReviewsOutput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId?: string;
            /**
                * <p>The milestone number.</p>
                *         <p>A workload can have a maximum of 100 milestones.</p>
                */
            MilestoneNumber?: number;
            /**
                * <p>List of lens summaries of lens reviews of a workload.</p>
                */
            LensReviewSummaries?: LensReviewSummary[];
            /**
                * <p>The token to use to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListLensReviewsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLensReviewsOutput) => any;
    }
    export interface ListLensSharesInput {
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias: string | undefined;
            /**
                * <p>The Amazon Web Services account ID or IAM role with which the lens is shared.</p>
                */
            SharedWithPrefix?: string;
            /**
                * <p>The token to use to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return for this request.</p>
                */
            MaxResults?: number;
            /**
                * <p>The status of a workload share.</p>
                */
            Status?: ShareStatus | string;
    }
    export namespace ListLensSharesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLensSharesInput) => any;
    }
    export interface ListLensSharesOutput {
            /**
                * <p>A list of lens share summaries.</p>
                */
            LensShareSummaries?: LensShareSummary[];
            /**
                * <p>The token to use to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListLensSharesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLensSharesOutput) => any;
    }
    /**
        * <p>Input to list all milestones for a workload.</p>
        */
    export interface ListMilestonesInput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId: string | undefined;
            /**
                * <p>The token to use to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return for this request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListMilestonesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMilestonesInput) => any;
    }
    /**
        * <p>A workload summary return object.</p>
        */
    export interface WorkloadSummary {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId?: string;
            /**
                * <p>The ARN for the workload.</p>
                */
            WorkloadArn?: string;
            /**
                * <p>The name of the workload.</p>
                *         <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization
                *             are ignored when checking for uniqueness.</p>
                */
            WorkloadName?: string;
            /**
                * <p>An Amazon Web Services account ID.</p>
                */
            Owner?: string;
            /**
                * <p>The date and time recorded.</p>
                */
            UpdatedAt?: Date;
            /**
                * <p>The list of lenses associated with the workload. Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            Lenses?: string[];
            /**
                * <p>A map from risk names to the count of how questions have that rating.</p>
                */
            RiskCounts?: Record<string, number>;
            /**
                * <p>The improvement status for a workload.</p>
                */
            ImprovementStatus?: WorkloadImprovementStatus | string;
    }
    export namespace WorkloadSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkloadSummary) => any;
    }
    /**
        * <p>A milestone summary return object.</p>
        */
    export interface MilestoneSummary {
            /**
                * <p>The milestone number.</p>
                *         <p>A workload can have a maximum of 100 milestones.</p>
                */
            MilestoneNumber?: number;
            /**
                * <p>The name of the milestone in a workload.</p>
                *         <p>Milestone names must be unique within a workload.</p>
                */
            MilestoneName?: string;
            /**
                * <p>The date and time recorded.</p>
                */
            RecordedAt?: Date;
            /**
                * <p>A workload summary return object.</p>
                */
            WorkloadSummary?: WorkloadSummary;
    }
    export namespace MilestoneSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MilestoneSummary) => any;
    }
    /**
        * <p>Output of a list milestones call.</p>
        */
    export interface ListMilestonesOutput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId?: string;
            /**
                * <p>A list of milestone summaries.</p>
                */
            MilestoneSummaries?: MilestoneSummary[];
            /**
                * <p>The token to use to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListMilestonesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMilestonesOutput) => any;
    }
    export interface ListNotificationsInput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId?: string;
            /**
                * <p>The token to use to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return for this request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListNotificationsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNotificationsInput) => any;
    }
    export enum NotificationType {
            LENS_VERSION_DEPRECATED = "LENS_VERSION_DEPRECATED",
            LENS_VERSION_UPGRADED = "LENS_VERSION_UPGRADED"
    }
    /**
        * <p>A notification summary return object.</p>
        */
    export interface NotificationSummary {
            /**
                * <p>The type of notification.</p>
                */
            Type?: NotificationType | string;
            /**
                * <p>Summary of lens upgrade.</p>
                */
            LensUpgradeSummary?: LensUpgradeSummary;
    }
    export namespace NotificationSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotificationSummary) => any;
    }
    export interface ListNotificationsOutput {
            /**
                * <p>List of lens notification summaries in a workload.</p>
                */
            NotificationSummaries?: NotificationSummary[];
            /**
                * <p>The token to use to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListNotificationsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNotificationsOutput) => any;
    }
    export enum ShareResourceType {
            LENS = "LENS",
            WORKLOAD = "WORKLOAD"
    }
    /**
        * <p>Input for List Share Invitations</p>
        */
    export interface ListShareInvitationsInput {
            /**
                * <p>An optional string added to the beginning of each workload name returned in the
                *             results.</p>
                */
            WorkloadNamePrefix?: string;
            /**
                * <p>An optional string added to the beginning of each lens name returned in the results.</p>
                */
            LensNamePrefix?: string;
            /**
                * <p>The type of share invitations to be returned.</p>
                */
            ShareResourceType?: ShareResourceType | string;
            /**
                * <p>The token to use to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return for this request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListShareInvitationsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListShareInvitationsInput) => any;
    }
    /**
        * <p>A share invitation summary return object.</p>
        */
    export interface ShareInvitationSummary {
            /**
                * <p>The ID assigned to the share invitation.</p>
                */
            ShareInvitationId?: string;
            /**
                * <p>An Amazon Web Services account ID.</p>
                */
            SharedBy?: string;
            /**
                * <p>The Amazon Web Services account ID or IAM role with which the workload is shared.</p>
                */
            SharedWith?: string;
            /**
                * <p>Permission granted on a workload share.</p>
                */
            PermissionType?: PermissionType | string;
            /**
                * <p>The resource type of the share invitation.</p>
                */
            ShareResourceType?: ShareResourceType | string;
            /**
                * <p>The name of the workload.</p>
                *         <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization
                *             are ignored when checking for uniqueness.</p>
                */
            WorkloadName?: string;
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId?: string;
            /**
                * <p>The full name of the lens.</p>
                */
            LensName?: string;
            /**
                * <p>The ARN for the lens.</p>
                */
            LensArn?: string;
    }
    export namespace ShareInvitationSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ShareInvitationSummary) => any;
    }
    /**
        * <p>Input for List Share Invitations</p>
        */
    export interface ListShareInvitationsOutput {
            /**
                * <p>List of share invitation summaries in a workload.</p>
                */
            ShareInvitationSummaries?: ShareInvitationSummary[];
            /**
                * <p>The token to use to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListShareInvitationsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListShareInvitationsOutput) => any;
    }
    export interface ListTagsForResourceInput {
            /**
                * <p>The ARN for the workload.</p>
                */
            WorkloadArn: string | undefined;
    }
    export namespace ListTagsForResourceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceInput) => any;
    }
    export interface ListTagsForResourceOutput {
            /**
                * <p>The tags for the resource.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceOutput) => any;
    }
    /**
        * <p>Input to list all workloads.</p>
        */
    export interface ListWorkloadsInput {
            /**
                * <p>An optional string added to the beginning of each workload name returned in the
                *             results.</p>
                */
            WorkloadNamePrefix?: string;
            /**
                * <p>The token to use to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return for this request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListWorkloadsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorkloadsInput) => any;
    }
    /**
        * <p>Output of a list workloads call.</p>
        */
    export interface ListWorkloadsOutput {
            /**
                * <p>A list of workload summaries.</p>
                */
            WorkloadSummaries?: WorkloadSummary[];
            /**
                * <p>The token to use to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListWorkloadsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorkloadsOutput) => any;
    }
    /**
        * <p>Input for List Workload Share</p>
        */
    export interface ListWorkloadSharesInput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId: string | undefined;
            /**
                * <p>The Amazon Web Services account ID or IAM role with which the workload is shared.</p>
                */
            SharedWithPrefix?: string;
            /**
                * <p>The token to use to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return for this request.</p>
                */
            MaxResults?: number;
            /**
                * <p>The status of a workload share.</p>
                */
            Status?: ShareStatus | string;
    }
    export namespace ListWorkloadSharesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorkloadSharesInput) => any;
    }
    /**
        * <p>A workload share summary return object.</p>
        */
    export interface WorkloadShareSummary {
            /**
                * <p>The ID associated with the workload share.</p>
                */
            ShareId?: string;
            /**
                * <p>The Amazon Web Services account ID or IAM role with which the workload is shared.</p>
                */
            SharedWith?: string;
            /**
                * <p>Permission granted on a workload share.</p>
                */
            PermissionType?: PermissionType | string;
            /**
                * <p>The status of a workload share.</p>
                */
            Status?: ShareStatus | string;
            /**
                * <p>Optional message to compliment the Status field.</p>
                */
            StatusMessage?: string;
    }
    export namespace WorkloadShareSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkloadShareSummary) => any;
    }
    /**
        * <p>Input for List Workload Share</p>
        */
    export interface ListWorkloadSharesOutput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId?: string;
            /**
                * <p>A list of workload share summaries.</p>
                */
            WorkloadShareSummaries?: WorkloadShareSummary[];
            /**
                * <p>The token to use to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListWorkloadSharesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorkloadSharesOutput) => any;
    }
    export enum OrganizationSharingStatus {
            DISABLED = "DISABLED",
            ENABLED = "ENABLED"
    }
    /**
        * <p>The share invitation.</p>
        */
    export interface ShareInvitation {
            /**
                * <p>The ID assigned to the share invitation.</p>
                */
            ShareInvitationId?: string;
            /**
                * <p>The resource type of the share invitation.</p>
                */
            ShareResourceType?: ShareResourceType | string;
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId?: string;
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias?: string;
            /**
                * <p>The ARN for the lens.</p>
                */
            LensArn?: string;
    }
    export namespace ShareInvitation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ShareInvitation) => any;
    }
    export enum ShareInvitationAction {
            ACCEPT = "ACCEPT",
            REJECT = "REJECT"
    }
    export interface TagResourceInput {
            /**
                * <p>The ARN for the workload.</p>
                */
            WorkloadArn: string | undefined;
            /**
                * <p>The tags for the resource.</p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace TagResourceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceInput) => any;
    }
    export interface TagResourceOutput {
    }
    export namespace TagResourceOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceOutput) => any;
    }
    export interface UntagResourceInput {
            /**
                * <p>The ARN for the workload.</p>
                */
            WorkloadArn: string | undefined;
            /**
                * <p>A list of tag keys. Existing tags of the resource
                *             whose keys are members of this list are removed from the resource.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceInput) => any;
    }
    export interface UntagResourceOutput {
    }
    export namespace UntagResourceOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceOutput) => any;
    }
    /**
        * <p>Input to update answer.</p>
        */
    export interface UpdateAnswerInput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId: string | undefined;
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias: string | undefined;
            /**
                * <p>The ID of the question.</p>
                */
            QuestionId: string | undefined;
            /**
                * <p>List of selected choice IDs in a question answer.</p>
                *         <p>The values entered replace the previously selected choices.</p>
                */
            SelectedChoices?: string[];
            /**
                * <p>A list of choices to update on a question in your workload.  The String key
                *             corresponds to the choice ID to be updated.</p>
                */
            ChoiceUpdates?: Record<string, ChoiceUpdate>;
            /**
                * <p>The notes associated with the workload.</p>
                */
            Notes?: string;
            /**
                * <p>Defines whether this question is applicable to a lens review.</p>
                */
            IsApplicable?: boolean;
            /**
                * <p>The reason why a question is not applicable to your workload.</p>
                */
            Reason?: AnswerReason | string;
    }
    export namespace UpdateAnswerInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAnswerInput) => any;
    }
    /**
        * <p>Output of a update answer call.</p>
        */
    export interface UpdateAnswerOutput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId?: string;
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias?: string;
            /**
                * <p>The ARN for the lens.</p>
                */
            LensArn?: string;
            /**
                * <p>An answer of the question.</p>
                */
            Answer?: Answer;
    }
    export namespace UpdateAnswerOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAnswerOutput) => any;
    }
    export interface UpdateGlobalSettingsInput {
            /**
                * <p>The status of organization sharing settings.</p>
                */
            OrganizationSharingStatus?: OrganizationSharingStatus | string;
    }
    export namespace UpdateGlobalSettingsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateGlobalSettingsInput) => any;
    }
    /**
        * <p>Input for update lens review.</p>
        */
    export interface UpdateLensReviewInput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId: string | undefined;
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias: string | undefined;
            /**
                * <p>The notes associated with the workload.</p>
                */
            LensNotes?: string;
            /**
                * <p>List of pillar notes of a lens review in a workload.</p>
                */
            PillarNotes?: Record<string, string>;
    }
    export namespace UpdateLensReviewInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLensReviewInput) => any;
    }
    /**
        * <p>Output of a update lens review call.</p>
        */
    export interface UpdateLensReviewOutput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId?: string;
            /**
                * <p>A lens review of a question.</p>
                */
            LensReview?: LensReview;
    }
    export namespace UpdateLensReviewOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLensReviewOutput) => any;
    }
    /**
        * <p>Input for Update Share Invitation</p>
        */
    export interface UpdateShareInvitationInput {
            /**
                * <p>The ID assigned to the share invitation.</p>
                */
            ShareInvitationId: string | undefined;
            /**
                * <p>Share invitation action taken by contributor.</p>
                */
            ShareInvitationAction: ShareInvitationAction | string | undefined;
    }
    export namespace UpdateShareInvitationInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateShareInvitationInput) => any;
    }
    export interface UpdateShareInvitationOutput {
            /**
                * <p>The updated workload share invitation.</p>
                */
            ShareInvitation?: ShareInvitation;
    }
    export namespace UpdateShareInvitationOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateShareInvitationOutput) => any;
    }
    /**
        * <p>Input to update a workload.</p>
        */
    export interface UpdateWorkloadInput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId: string | undefined;
            /**
                * <p>The name of the workload.</p>
                *         <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization
                *             are ignored when checking for uniqueness.</p>
                */
            WorkloadName?: string;
            /**
                * <p>The description for the workload.</p>
                */
            Description?: string;
            /**
                * <p>The environment for the workload.</p>
                */
            Environment?: WorkloadEnvironment | string;
            /**
                * <p>The list of Amazon Web Services account IDs associated with the workload.</p>
                */
            AccountIds?: string[];
            /**
                * <p>The list of Amazon Web Services Regions associated with the workload, for example,
                *                 <code>us-east-2</code>, or <code>ca-central-1</code>.</p>
                */
            AwsRegions?: string[];
            /**
                * <p> The list of non-Amazon Web Services Regions associated with the workload.</p>
                */
            NonAwsRegions?: string[];
            /**
                * <p>The priorities of the pillars, which are used to order items in the improvement plan.
                *             Each pillar is represented by its <a>PillarReviewSummary$PillarId</a>.</p>
                */
            PillarPriorities?: string[];
            /**
                * <p>The URL of the architectural design for the workload.</p>
                */
            ArchitecturalDesign?: string;
            /**
                * <p>The review owner of the workload. The name, email address, or identifier for the
                *             primary group or individual that owns the workload review process.</p>
                */
            ReviewOwner?: string;
            /**
                * <p>Flag indicating whether the workload owner has acknowledged that the <i>Review
                *                 owner</i> field is required.</p>
                *         <p>If a <b>Review owner</b> is not added to the workload within
                *             60 days of acknowledgement, access to the workload is restricted until an owner is
                *             added.</p>
                */
            IsReviewOwnerUpdateAcknowledged?: boolean;
            /**
                * <p>The industry type for the workload.</p>
                *         <p>If specified, must be one of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>Agriculture</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Automobile</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Defense</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Design and Engineering</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Digital Advertising</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Education</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Environmental Protection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Financial Services</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Gaming</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>General Public Services</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Healthcare</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Hospitality</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>InfoTech</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Justice and Public Safety</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Life Sciences</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Manufacturing</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Media & Entertainment</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Mining & Resources</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Oil & Gas</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Power & Utilities</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Professional Services</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Real Estate & Construction</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Retail & Wholesale</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Social Protection</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Telecommunications</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Travel, Transportation & Logistics</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Other</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            IndustryType?: string;
            /**
                * <p>The industry for the workload.</p>
                */
            Industry?: string;
            /**
                * <p>The notes associated with the workload.</p>
                */
            Notes?: string;
            /**
                * <p>The improvement status for a workload.</p>
                */
            ImprovementStatus?: WorkloadImprovementStatus | string;
    }
    export namespace UpdateWorkloadInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorkloadInput) => any;
    }
    /**
        * <p>Output of an update workload call.</p>
        */
    export interface UpdateWorkloadOutput {
            /**
                * <p>A workload return object.</p>
                */
            Workload?: Workload;
    }
    export namespace UpdateWorkloadOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorkloadOutput) => any;
    }
    /**
        * <p>Input for Update Workload Share</p>
        */
    export interface UpdateWorkloadShareInput {
            /**
                * <p>The ID associated with the workload share.</p>
                */
            ShareId: string | undefined;
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId: string | undefined;
            /**
                * <p>Permission granted on a workload share.</p>
                */
            PermissionType: PermissionType | string | undefined;
    }
    export namespace UpdateWorkloadShareInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorkloadShareInput) => any;
    }
    /**
        * <p>A workload share return object.</p>
        */
    export interface WorkloadShare {
            /**
                * <p>The ID associated with the workload share.</p>
                */
            ShareId?: string;
            /**
                * <p>An Amazon Web Services account ID.</p>
                */
            SharedBy?: string;
            /**
                * <p>The Amazon Web Services account ID or IAM role with which the workload is shared.</p>
                */
            SharedWith?: string;
            /**
                * <p>Permission granted on a workload share.</p>
                */
            PermissionType?: PermissionType | string;
            /**
                * <p>The status of a workload share.</p>
                */
            Status?: ShareStatus | string;
            /**
                * <p>The name of the workload.</p>
                *         <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization
                *             are ignored when checking for uniqueness.</p>
                */
            WorkloadName?: string;
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId?: string;
    }
    export namespace WorkloadShare {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkloadShare) => any;
    }
    /**
        * <p>Input for Update Workload Share</p>
        */
    export interface UpdateWorkloadShareOutput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId?: string;
            /**
                * <p>A workload share return object.</p>
                */
            WorkloadShare?: WorkloadShare;
    }
    export namespace UpdateWorkloadShareOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorkloadShareOutput) => any;
    }
    export interface UpgradeLensReviewInput {
            /**
                * <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
                */
            WorkloadId: string | undefined;
            /**
                * <p>The alias of the lens.</p>
                *         <p>For Amazon Web Services official lenses, this is either the lens alias,
                *             such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
                *         <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
                *         <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
                */
            LensAlias: string | undefined;
            /**
                * <p>The name of the milestone in a workload.</p>
                *         <p>Milestone names must be unique within a workload.</p>
                */
            MilestoneName: string | undefined;
            /**
                * <p>A unique case-sensitive string used to ensure that this request is idempotent
                *             (executes only once).</p>
                *         <p>You should not reuse the same token for other requests. If you retry a request with
                *             the same client request token and the same parameters after it has completed
                *             successfully, the result of the original request is returned. </p>
                *         <important>
                *             <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs
                *                 automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI,
                *                 you must provide this token or the request will fail.</p>
                *         </important>
                */
            ClientRequestToken?: string;
    }
    export namespace UpgradeLensReviewInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpgradeLensReviewInput) => any;
    }
}

declare module '@aws-sdk/client-wellarchitected/node_modules/@aws-sdk/client-wellarchitected/dist-types/models/WellArchitectedServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from WellArchitected service.
        */
    export class WellArchitectedServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

