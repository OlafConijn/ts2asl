// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-config-service' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { BatchGetAggregateResourceConfigCommandInput, BatchGetAggregateResourceConfigCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/BatchGetAggregateResourceConfigCommand";
    import { BatchGetResourceConfigCommandInput, BatchGetResourceConfigCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/BatchGetResourceConfigCommand";
    import { DeleteAggregationAuthorizationCommandInput, DeleteAggregationAuthorizationCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteAggregationAuthorizationCommand";
    import { DeleteConfigRuleCommandInput, DeleteConfigRuleCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteConfigRuleCommand";
    import { DeleteConfigurationAggregatorCommandInput, DeleteConfigurationAggregatorCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteConfigurationAggregatorCommand";
    import { DeleteConfigurationRecorderCommandInput, DeleteConfigurationRecorderCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteConfigurationRecorderCommand";
    import { DeleteConformancePackCommandInput, DeleteConformancePackCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteConformancePackCommand";
    import { DeleteDeliveryChannelCommandInput, DeleteDeliveryChannelCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteDeliveryChannelCommand";
    import { DeleteEvaluationResultsCommandInput, DeleteEvaluationResultsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteEvaluationResultsCommand";
    import { DeleteOrganizationConfigRuleCommandInput, DeleteOrganizationConfigRuleCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteOrganizationConfigRuleCommand";
    import { DeleteOrganizationConformancePackCommandInput, DeleteOrganizationConformancePackCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteOrganizationConformancePackCommand";
    import { DeletePendingAggregationRequestCommandInput, DeletePendingAggregationRequestCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeletePendingAggregationRequestCommand";
    import { DeleteRemediationConfigurationCommandInput, DeleteRemediationConfigurationCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteRemediationConfigurationCommand";
    import { DeleteRemediationExceptionsCommandInput, DeleteRemediationExceptionsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteRemediationExceptionsCommand";
    import { DeleteResourceConfigCommandInput, DeleteResourceConfigCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteResourceConfigCommand";
    import { DeleteRetentionConfigurationCommandInput, DeleteRetentionConfigurationCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteRetentionConfigurationCommand";
    import { DeleteStoredQueryCommandInput, DeleteStoredQueryCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteStoredQueryCommand";
    import { DeliverConfigSnapshotCommandInput, DeliverConfigSnapshotCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeliverConfigSnapshotCommand";
    import { DescribeAggregateComplianceByConfigRulesCommandInput, DescribeAggregateComplianceByConfigRulesCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeAggregateComplianceByConfigRulesCommand";
    import { DescribeAggregateComplianceByConformancePacksCommandInput, DescribeAggregateComplianceByConformancePacksCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeAggregateComplianceByConformancePacksCommand";
    import { DescribeAggregationAuthorizationsCommandInput, DescribeAggregationAuthorizationsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeAggregationAuthorizationsCommand";
    import { DescribeComplianceByConfigRuleCommandInput, DescribeComplianceByConfigRuleCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeComplianceByConfigRuleCommand";
    import { DescribeComplianceByResourceCommandInput, DescribeComplianceByResourceCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeComplianceByResourceCommand";
    import { DescribeConfigRuleEvaluationStatusCommandInput, DescribeConfigRuleEvaluationStatusCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConfigRuleEvaluationStatusCommand";
    import { DescribeConfigRulesCommandInput, DescribeConfigRulesCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConfigRulesCommand";
    import { DescribeConfigurationAggregatorsCommandInput, DescribeConfigurationAggregatorsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConfigurationAggregatorsCommand";
    import { DescribeConfigurationAggregatorSourcesStatusCommandInput, DescribeConfigurationAggregatorSourcesStatusCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConfigurationAggregatorSourcesStatusCommand";
    import { DescribeConfigurationRecordersCommandInput, DescribeConfigurationRecordersCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConfigurationRecordersCommand";
    import { DescribeConfigurationRecorderStatusCommandInput, DescribeConfigurationRecorderStatusCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConfigurationRecorderStatusCommand";
    import { DescribeConformancePackComplianceCommandInput, DescribeConformancePackComplianceCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConformancePackComplianceCommand";
    import { DescribeConformancePacksCommandInput, DescribeConformancePacksCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConformancePacksCommand";
    import { DescribeConformancePackStatusCommandInput, DescribeConformancePackStatusCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConformancePackStatusCommand";
    import { DescribeDeliveryChannelsCommandInput, DescribeDeliveryChannelsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeDeliveryChannelsCommand";
    import { DescribeDeliveryChannelStatusCommandInput, DescribeDeliveryChannelStatusCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeDeliveryChannelStatusCommand";
    import { DescribeOrganizationConfigRulesCommandInput, DescribeOrganizationConfigRulesCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeOrganizationConfigRulesCommand";
    import { DescribeOrganizationConfigRuleStatusesCommandInput, DescribeOrganizationConfigRuleStatusesCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeOrganizationConfigRuleStatusesCommand";
    import { DescribeOrganizationConformancePacksCommandInput, DescribeOrganizationConformancePacksCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeOrganizationConformancePacksCommand";
    import { DescribeOrganizationConformancePackStatusesCommandInput, DescribeOrganizationConformancePackStatusesCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeOrganizationConformancePackStatusesCommand";
    import { DescribePendingAggregationRequestsCommandInput, DescribePendingAggregationRequestsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribePendingAggregationRequestsCommand";
    import { DescribeRemediationConfigurationsCommandInput, DescribeRemediationConfigurationsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeRemediationConfigurationsCommand";
    import { DescribeRemediationExceptionsCommandInput, DescribeRemediationExceptionsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeRemediationExceptionsCommand";
    import { DescribeRemediationExecutionStatusCommandInput, DescribeRemediationExecutionStatusCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeRemediationExecutionStatusCommand";
    import { DescribeRetentionConfigurationsCommandInput, DescribeRetentionConfigurationsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeRetentionConfigurationsCommand";
    import { GetAggregateComplianceDetailsByConfigRuleCommandInput, GetAggregateComplianceDetailsByConfigRuleCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetAggregateComplianceDetailsByConfigRuleCommand";
    import { GetAggregateConfigRuleComplianceSummaryCommandInput, GetAggregateConfigRuleComplianceSummaryCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetAggregateConfigRuleComplianceSummaryCommand";
    import { GetAggregateConformancePackComplianceSummaryCommandInput, GetAggregateConformancePackComplianceSummaryCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetAggregateConformancePackComplianceSummaryCommand";
    import { GetAggregateDiscoveredResourceCountsCommandInput, GetAggregateDiscoveredResourceCountsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetAggregateDiscoveredResourceCountsCommand";
    import { GetAggregateResourceConfigCommandInput, GetAggregateResourceConfigCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetAggregateResourceConfigCommand";
    import { GetComplianceDetailsByConfigRuleCommandInput, GetComplianceDetailsByConfigRuleCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetComplianceDetailsByConfigRuleCommand";
    import { GetComplianceDetailsByResourceCommandInput, GetComplianceDetailsByResourceCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetComplianceDetailsByResourceCommand";
    import { GetComplianceSummaryByConfigRuleCommandInput, GetComplianceSummaryByConfigRuleCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetComplianceSummaryByConfigRuleCommand";
    import { GetComplianceSummaryByResourceTypeCommandInput, GetComplianceSummaryByResourceTypeCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetComplianceSummaryByResourceTypeCommand";
    import { GetConformancePackComplianceDetailsCommandInput, GetConformancePackComplianceDetailsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetConformancePackComplianceDetailsCommand";
    import { GetConformancePackComplianceSummaryCommandInput, GetConformancePackComplianceSummaryCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetConformancePackComplianceSummaryCommand";
    import { GetCustomRulePolicyCommandInput, GetCustomRulePolicyCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetCustomRulePolicyCommand";
    import { GetDiscoveredResourceCountsCommandInput, GetDiscoveredResourceCountsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetDiscoveredResourceCountsCommand";
    import { GetOrganizationConfigRuleDetailedStatusCommandInput, GetOrganizationConfigRuleDetailedStatusCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetOrganizationConfigRuleDetailedStatusCommand";
    import { GetOrganizationConformancePackDetailedStatusCommandInput, GetOrganizationConformancePackDetailedStatusCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetOrganizationConformancePackDetailedStatusCommand";
    import { GetOrganizationCustomRulePolicyCommandInput, GetOrganizationCustomRulePolicyCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetOrganizationCustomRulePolicyCommand";
    import { GetResourceConfigHistoryCommandInput, GetResourceConfigHistoryCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetResourceConfigHistoryCommand";
    import { GetStoredQueryCommandInput, GetStoredQueryCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetStoredQueryCommand";
    import { ListAggregateDiscoveredResourcesCommandInput, ListAggregateDiscoveredResourcesCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/ListAggregateDiscoveredResourcesCommand";
    import { ListDiscoveredResourcesCommandInput, ListDiscoveredResourcesCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/ListDiscoveredResourcesCommand";
    import { ListStoredQueriesCommandInput, ListStoredQueriesCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/ListStoredQueriesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/ListTagsForResourceCommand";
    import { PutAggregationAuthorizationCommandInput, PutAggregationAuthorizationCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutAggregationAuthorizationCommand";
    import { PutConfigRuleCommandInput, PutConfigRuleCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutConfigRuleCommand";
    import { PutConfigurationAggregatorCommandInput, PutConfigurationAggregatorCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutConfigurationAggregatorCommand";
    import { PutConfigurationRecorderCommandInput, PutConfigurationRecorderCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutConfigurationRecorderCommand";
    import { PutConformancePackCommandInput, PutConformancePackCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutConformancePackCommand";
    import { PutDeliveryChannelCommandInput, PutDeliveryChannelCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutDeliveryChannelCommand";
    import { PutEvaluationsCommandInput, PutEvaluationsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutEvaluationsCommand";
    import { PutExternalEvaluationCommandInput, PutExternalEvaluationCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutExternalEvaluationCommand";
    import { PutOrganizationConfigRuleCommandInput, PutOrganizationConfigRuleCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutOrganizationConfigRuleCommand";
    import { PutOrganizationConformancePackCommandInput, PutOrganizationConformancePackCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutOrganizationConformancePackCommand";
    import { PutRemediationConfigurationsCommandInput, PutRemediationConfigurationsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutRemediationConfigurationsCommand";
    import { PutRemediationExceptionsCommandInput, PutRemediationExceptionsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutRemediationExceptionsCommand";
    import { PutResourceConfigCommandInput, PutResourceConfigCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutResourceConfigCommand";
    import { PutRetentionConfigurationCommandInput, PutRetentionConfigurationCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutRetentionConfigurationCommand";
    import { PutStoredQueryCommandInput, PutStoredQueryCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutStoredQueryCommand";
    import { SelectAggregateResourceConfigCommandInput, SelectAggregateResourceConfigCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/SelectAggregateResourceConfigCommand";
    import { SelectResourceConfigCommandInput, SelectResourceConfigCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/SelectResourceConfigCommand";
    import { StartConfigRulesEvaluationCommandInput, StartConfigRulesEvaluationCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/StartConfigRulesEvaluationCommand";
    import { StartConfigurationRecorderCommandInput, StartConfigurationRecorderCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/StartConfigurationRecorderCommand";
    import { StartRemediationExecutionCommandInput, StartRemediationExecutionCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/StartRemediationExecutionCommand";
    import { StopConfigurationRecorderCommandInput, StopConfigurationRecorderCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/StopConfigurationRecorderCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/UntagResourceCommand";
    import { ConfigServiceClient } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    /**
        * <fullname>Config</fullname>
        *
        * 		       <p>Config provides a way to keep track of the configurations
        * 			of all the Amazon Web Services resources associated with your Amazon Web Services account. You can
        * 			use Config to get the current and historical configurations of
        * 			each Amazon Web Services resource and also to get information about the relationship
        * 			between the resources. An Amazon Web Services resource can be an Amazon Compute
        * 			Cloud (Amazon EC2) instance, an Elastic Block Store (EBS) volume, an
        * 			elastic network Interface (ENI), or a security group. For a complete
        * 			list of resources currently supported by Config, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/resource-config-reference.html#supported-resources">Supported Amazon Web Services resources</a>.</p>
        *
        * 		       <p>You can access and manage Config through the Amazon Web Services Management
        * 			Console, the Amazon Web Services Command Line Interface (Amazon Web Services CLI), the Config
        * 			API, or the Amazon Web Services SDKs for Config. This reference guide contains
        * 			documentation for the Config API and the Amazon Web Services CLI commands that
        * 			you can use to manage Config. The Config API uses the
        * 			Signature Version 4 protocol for signing requests. For more
        * 			information about how to sign a request with this protocol, see
        * 				<a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature
        * 				Version 4 Signing Process</a>. For detailed information
        * 			about Config features and their associated actions or commands,
        * 			as well as how to work with Amazon Web Services Management Console, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/WhatIsConfig.html">What Is Config</a> in the <i>Config Developer
        * 				Guide</i>.</p>
        */
    export class ConfigService extends ConfigServiceClient {
            /**
                * <p>Returns the current configuration items for resources that are present in your Config aggregator. The operation also returns a list of resources that are not processed in the current request.
                * 			If there are no unprocessed resources, the operation returns an empty <code>unprocessedResourceIdentifiers</code> list. </p>
                *
                * 		       <note>
                *             <ul>
                *                <li>
                *                   <p>The API does not return results for deleted resources.</p>
                *                </li>
                *                <li>
                *                   <p> The API does not return tags and relationships.</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            batchGetAggregateResourceConfig(args: BatchGetAggregateResourceConfigCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetAggregateResourceConfigCommandOutput>;
            batchGetAggregateResourceConfig(args: BatchGetAggregateResourceConfigCommandInput, cb: (err: any, data?: BatchGetAggregateResourceConfigCommandOutput) => void): void;
            batchGetAggregateResourceConfig(args: BatchGetAggregateResourceConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetAggregateResourceConfigCommandOutput) => void): void;
            /**
                * <p>Returns the <code>BaseConfigurationItem</code> for one or more requested resources.
                * 			The operation also returns a list of resources that are
                * 			not processed in the current request. If there are no unprocessed
                * 			resources, the operation returns an empty unprocessedResourceKeys
                * 			list. </p>
                * 		       <note>
                * 			         <ul>
                *                <li>
                * 					             <p>The API does not return results for deleted
                * 						resources.</p>
                * 				           </li>
                *                <li>
                * 					             <p> The API does not return any tags for the requested
                * 						resources. This information is filtered out of the
                * 						supplementaryConfiguration section of the API
                * 						response.</p>
                * 				           </li>
                *             </ul>
                * 		       </note>
                */
            batchGetResourceConfig(args: BatchGetResourceConfigCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetResourceConfigCommandOutput>;
            batchGetResourceConfig(args: BatchGetResourceConfigCommandInput, cb: (err: any, data?: BatchGetResourceConfigCommandOutput) => void): void;
            batchGetResourceConfig(args: BatchGetResourceConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetResourceConfigCommandOutput) => void): void;
            /**
                * <p>Deletes the authorization granted to the specified
                * 			configuration aggregator account in a specified region.</p>
                */
            deleteAggregationAuthorization(args: DeleteAggregationAuthorizationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAggregationAuthorizationCommandOutput>;
            deleteAggregationAuthorization(args: DeleteAggregationAuthorizationCommandInput, cb: (err: any, data?: DeleteAggregationAuthorizationCommandOutput) => void): void;
            deleteAggregationAuthorization(args: DeleteAggregationAuthorizationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAggregationAuthorizationCommandOutput) => void): void;
            /**
                * <p>Deletes the specified Config rule and all of its evaluation
                * 			results.</p>
                * 		       <p>Config sets the state of a rule to <code>DELETING</code>
                * 			until the deletion is complete. You cannot update a rule while it is
                * 			in this state. If you make a <code>PutConfigRule</code> or
                * 				<code>DeleteConfigRule</code> request for the rule, you will
                * 			receive a <code>ResourceInUseException</code>.</p>
                * 		       <p>You can check the state of a rule by using the
                * 				<code>DescribeConfigRules</code> request.</p>
                */
            deleteConfigRule(args: DeleteConfigRuleCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConfigRuleCommandOutput>;
            deleteConfigRule(args: DeleteConfigRuleCommandInput, cb: (err: any, data?: DeleteConfigRuleCommandOutput) => void): void;
            deleteConfigRule(args: DeleteConfigRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConfigRuleCommandOutput) => void): void;
            /**
                * <p>Deletes the specified configuration aggregator and the
                * 			aggregated data associated with the aggregator.</p>
                */
            deleteConfigurationAggregator(args: DeleteConfigurationAggregatorCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConfigurationAggregatorCommandOutput>;
            deleteConfigurationAggregator(args: DeleteConfigurationAggregatorCommandInput, cb: (err: any, data?: DeleteConfigurationAggregatorCommandOutput) => void): void;
            deleteConfigurationAggregator(args: DeleteConfigurationAggregatorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConfigurationAggregatorCommandOutput) => void): void;
            /**
                * <p>Deletes the configuration recorder.</p>
                * 		       <p>After the configuration recorder is deleted, Config will
                * 			not record resource configuration changes until you create a new
                * 			configuration recorder.</p>
                * 		       <p>This action does not delete the configuration information that
                * 			was previously recorded. You will be able to access the previously
                * 			recorded information by using the
                * 				<code>GetResourceConfigHistory</code> action, but you will not
                * 			be able to access this information in the Config console until
                * 			you create a new configuration recorder.</p>
                */
            deleteConfigurationRecorder(args: DeleteConfigurationRecorderCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConfigurationRecorderCommandOutput>;
            deleteConfigurationRecorder(args: DeleteConfigurationRecorderCommandInput, cb: (err: any, data?: DeleteConfigurationRecorderCommandOutput) => void): void;
            deleteConfigurationRecorder(args: DeleteConfigurationRecorderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConfigurationRecorderCommandOutput) => void): void;
            /**
                * <p>Deletes the specified conformance pack and all the Config rules, remediation actions, and all evaluation results within that
                * 			conformance pack.</p>
                * 		       <p>Config sets the conformance pack to <code>DELETE_IN_PROGRESS</code> until the deletion is complete.
                * 			You cannot update a conformance pack while it is in this state.</p>
                */
            deleteConformancePack(args: DeleteConformancePackCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConformancePackCommandOutput>;
            deleteConformancePack(args: DeleteConformancePackCommandInput, cb: (err: any, data?: DeleteConformancePackCommandOutput) => void): void;
            deleteConformancePack(args: DeleteConformancePackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConformancePackCommandOutput) => void): void;
            /**
                * <p>Deletes the delivery channel.</p>
                * 		       <p>Before you can delete the delivery channel, you must stop the
                * 			configuration recorder by using the <a>StopConfigurationRecorder</a> action.</p>
                */
            deleteDeliveryChannel(args: DeleteDeliveryChannelCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDeliveryChannelCommandOutput>;
            deleteDeliveryChannel(args: DeleteDeliveryChannelCommandInput, cb: (err: any, data?: DeleteDeliveryChannelCommandOutput) => void): void;
            deleteDeliveryChannel(args: DeleteDeliveryChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDeliveryChannelCommandOutput) => void): void;
            /**
                * <p>Deletes the evaluation results for the specified Config
                * 			rule. You can specify one Config rule per request. After you
                * 			delete the evaluation results, you can call the <a>StartConfigRulesEvaluation</a> API to start evaluating
                * 			your Amazon Web Services resources against the rule.</p>
                */
            deleteEvaluationResults(args: DeleteEvaluationResultsCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEvaluationResultsCommandOutput>;
            deleteEvaluationResults(args: DeleteEvaluationResultsCommandInput, cb: (err: any, data?: DeleteEvaluationResultsCommandOutput) => void): void;
            deleteEvaluationResults(args: DeleteEvaluationResultsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEvaluationResultsCommandOutput) => void): void;
            /**
                * <p>Deletes the specified organization Config rule and all of its evaluation results from all member accounts in that organization. </p>
                * 	        <p>Only a master account and a delegated administrator account can delete an organization Config rule.
                * 		When calling this API with a delegated administrator, you must ensure Organizations
                * 			<code>ListDelegatedAdministrator</code> permissions are added.</p>
                * 		       <p>Config sets the state of a rule to DELETE_IN_PROGRESS until the deletion is complete.
                * 			You cannot update a rule while it is in this state.</p>
                */
            deleteOrganizationConfigRule(args: DeleteOrganizationConfigRuleCommandInput, options?: __HttpHandlerOptions): Promise<DeleteOrganizationConfigRuleCommandOutput>;
            deleteOrganizationConfigRule(args: DeleteOrganizationConfigRuleCommandInput, cb: (err: any, data?: DeleteOrganizationConfigRuleCommandOutput) => void): void;
            deleteOrganizationConfigRule(args: DeleteOrganizationConfigRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteOrganizationConfigRuleCommandOutput) => void): void;
            /**
                * <p>Deletes the specified organization conformance pack and all of the Config rules and remediation actions from
                * 			all member accounts in that organization. </p>
                *          <p> Only a master account or a delegated administrator account can delete an organization conformance pack.
                * 	When calling this API with a delegated administrator, you must ensure Organizations
                * 		<code>ListDelegatedAdministrator</code> permissions are added.</p>
                * 			      <p>Config sets the state of a conformance pack to DELETE_IN_PROGRESS until the deletion is complete.
                * 				You cannot update a conformance pack while it is in this state. </p>
                */
            deleteOrganizationConformancePack(args: DeleteOrganizationConformancePackCommandInput, options?: __HttpHandlerOptions): Promise<DeleteOrganizationConformancePackCommandOutput>;
            deleteOrganizationConformancePack(args: DeleteOrganizationConformancePackCommandInput, cb: (err: any, data?: DeleteOrganizationConformancePackCommandOutput) => void): void;
            deleteOrganizationConformancePack(args: DeleteOrganizationConformancePackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteOrganizationConformancePackCommandOutput) => void): void;
            /**
                * <p>Deletes pending authorization requests for a specified
                * 			aggregator account in a specified region.</p>
                */
            deletePendingAggregationRequest(args: DeletePendingAggregationRequestCommandInput, options?: __HttpHandlerOptions): Promise<DeletePendingAggregationRequestCommandOutput>;
            deletePendingAggregationRequest(args: DeletePendingAggregationRequestCommandInput, cb: (err: any, data?: DeletePendingAggregationRequestCommandOutput) => void): void;
            deletePendingAggregationRequest(args: DeletePendingAggregationRequestCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePendingAggregationRequestCommandOutput) => void): void;
            /**
                * <p>Deletes the remediation configuration.</p>
                */
            deleteRemediationConfiguration(args: DeleteRemediationConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRemediationConfigurationCommandOutput>;
            deleteRemediationConfiguration(args: DeleteRemediationConfigurationCommandInput, cb: (err: any, data?: DeleteRemediationConfigurationCommandOutput) => void): void;
            deleteRemediationConfiguration(args: DeleteRemediationConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRemediationConfigurationCommandOutput) => void): void;
            /**
                * <p>Deletes one or more remediation exceptions mentioned in the resource keys.</p>
                * 		       <note>
                *             <p>Config generates a remediation exception when a problem occurs executing a remediation action to a specific resource.
                * 			Remediation exceptions blocks auto-remediation until the exception is cleared.</p>
                *          </note>
                */
            deleteRemediationExceptions(args: DeleteRemediationExceptionsCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRemediationExceptionsCommandOutput>;
            deleteRemediationExceptions(args: DeleteRemediationExceptionsCommandInput, cb: (err: any, data?: DeleteRemediationExceptionsCommandOutput) => void): void;
            deleteRemediationExceptions(args: DeleteRemediationExceptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRemediationExceptionsCommandOutput) => void): void;
            /**
                * <p>Records the configuration state for a custom resource that has been deleted.  This API records a new ConfigurationItem with a ResourceDeleted status. You can retrieve the ConfigurationItems recorded for this resource in your Config History.
                * 			 </p>
                */
            deleteResourceConfig(args: DeleteResourceConfigCommandInput, options?: __HttpHandlerOptions): Promise<DeleteResourceConfigCommandOutput>;
            deleteResourceConfig(args: DeleteResourceConfigCommandInput, cb: (err: any, data?: DeleteResourceConfigCommandOutput) => void): void;
            deleteResourceConfig(args: DeleteResourceConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteResourceConfigCommandOutput) => void): void;
            /**
                * <p>Deletes the retention configuration.</p>
                */
            deleteRetentionConfiguration(args: DeleteRetentionConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRetentionConfigurationCommandOutput>;
            deleteRetentionConfiguration(args: DeleteRetentionConfigurationCommandInput, cb: (err: any, data?: DeleteRetentionConfigurationCommandOutput) => void): void;
            deleteRetentionConfiguration(args: DeleteRetentionConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRetentionConfigurationCommandOutput) => void): void;
            /**
                * <p>Deletes the stored query for a single Amazon Web Services account and a single Amazon Web Services Region.</p>
                */
            deleteStoredQuery(args: DeleteStoredQueryCommandInput, options?: __HttpHandlerOptions): Promise<DeleteStoredQueryCommandOutput>;
            deleteStoredQuery(args: DeleteStoredQueryCommandInput, cb: (err: any, data?: DeleteStoredQueryCommandOutput) => void): void;
            deleteStoredQuery(args: DeleteStoredQueryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteStoredQueryCommandOutput) => void): void;
            /**
                * <p>Schedules delivery of a configuration snapshot to the Amazon S3
                * 			bucket in the specified delivery channel. After the delivery has
                * 			started, Config sends the following notifications using an
                * 			Amazon SNS topic that you have specified.</p>
                * 		       <ul>
                *             <li>
                * 				           <p>Notification of the start of the delivery.</p>
                * 			         </li>
                *             <li>
                * 				           <p>Notification of the completion of the delivery, if the
                * 					delivery was successfully completed.</p>
                * 			         </li>
                *             <li>
                * 				           <p>Notification of delivery failure, if the delivery
                * 					failed.</p>
                * 			         </li>
                *          </ul>
                */
            deliverConfigSnapshot(args: DeliverConfigSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<DeliverConfigSnapshotCommandOutput>;
            deliverConfigSnapshot(args: DeliverConfigSnapshotCommandInput, cb: (err: any, data?: DeliverConfigSnapshotCommandOutput) => void): void;
            deliverConfigSnapshot(args: DeliverConfigSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeliverConfigSnapshotCommandOutput) => void): void;
            /**
                * <p>Returns a list of compliant and noncompliant rules with the
                * 			number of resources for compliant and noncompliant rules. Does not display rules that do not have compliance results.
                * 			</p>
                * 		       <note>
                * 			         <p>The results can return an empty result page, but if you
                * 				have a <code>nextToken</code>, the results are displayed on the next
                * 				page.</p>
                * 		       </note>
                */
            describeAggregateComplianceByConfigRules(args: DescribeAggregateComplianceByConfigRulesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAggregateComplianceByConfigRulesCommandOutput>;
            describeAggregateComplianceByConfigRules(args: DescribeAggregateComplianceByConfigRulesCommandInput, cb: (err: any, data?: DescribeAggregateComplianceByConfigRulesCommandOutput) => void): void;
            describeAggregateComplianceByConfigRules(args: DescribeAggregateComplianceByConfigRulesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAggregateComplianceByConfigRulesCommandOutput) => void): void;
            /**
                * <p>Returns a list of the conformance packs and their associated compliance status with the count of compliant and noncompliant Config rules within each conformance pack.
                * 			Also returns the total rule count which includes compliant rules, noncompliant rules, and rules that cannot be evaluated due to insufficient data.</p>
                * 		       <note>
                *             <p>The results can return an empty result page, but if you have a <code>nextToken</code>, the results are displayed on the next page.</p>
                *          </note>
                */
            describeAggregateComplianceByConformancePacks(args: DescribeAggregateComplianceByConformancePacksCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAggregateComplianceByConformancePacksCommandOutput>;
            describeAggregateComplianceByConformancePacks(args: DescribeAggregateComplianceByConformancePacksCommandInput, cb: (err: any, data?: DescribeAggregateComplianceByConformancePacksCommandOutput) => void): void;
            describeAggregateComplianceByConformancePacks(args: DescribeAggregateComplianceByConformancePacksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAggregateComplianceByConformancePacksCommandOutput) => void): void;
            /**
                * <p>Returns a list of authorizations granted to various aggregator
                * 			accounts and regions.</p>
                */
            describeAggregationAuthorizations(args: DescribeAggregationAuthorizationsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAggregationAuthorizationsCommandOutput>;
            describeAggregationAuthorizations(args: DescribeAggregationAuthorizationsCommandInput, cb: (err: any, data?: DescribeAggregationAuthorizationsCommandOutput) => void): void;
            describeAggregationAuthorizations(args: DescribeAggregationAuthorizationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAggregationAuthorizationsCommandOutput) => void): void;
            /**
                * <p>Indicates whether the specified Config rules are compliant.
                * 			If a rule is noncompliant, this action returns the number of Amazon Web Services
                * 			resources that do not comply with the rule.</p>
                * 		       <p>A rule is compliant if all of the evaluated resources comply
                * 			with it. It is noncompliant if any of these resources do not
                * 			comply.</p>
                * 		       <p>If Config has no current evaluation results for the rule,
                * 			it returns <code>INSUFFICIENT_DATA</code>. This result might
                * 			indicate one of the following conditions:</p>
                * 		       <ul>
                *             <li>
                * 				           <p>Config has never invoked an evaluation for the
                * 					rule. To check whether it has, use the
                * 						<code>DescribeConfigRuleEvaluationStatus</code> action
                * 					to get the <code>LastSuccessfulInvocationTime</code> and
                * 						<code>LastFailedInvocationTime</code>.</p>
                * 			         </li>
                *             <li>
                * 				           <p>The rule's Lambda function is failing to send
                * 					evaluation results to Config. Verify that the role you
                * 					assigned to your configuration recorder includes the
                * 						<code>config:PutEvaluations</code> permission. If the
                * 					rule is a custom rule, verify that the Lambda execution
                * 					role includes the <code>config:PutEvaluations</code>
                * 					permission.</p>
                * 			         </li>
                *             <li>
                * 				           <p>The rule's Lambda function has returned
                * 						<code>NOT_APPLICABLE</code> for all evaluation results.
                * 					This can occur if the resources were deleted or removed from
                * 					the rule's scope.</p>
                * 			         </li>
                *          </ul>
                */
            describeComplianceByConfigRule(args: DescribeComplianceByConfigRuleCommandInput, options?: __HttpHandlerOptions): Promise<DescribeComplianceByConfigRuleCommandOutput>;
            describeComplianceByConfigRule(args: DescribeComplianceByConfigRuleCommandInput, cb: (err: any, data?: DescribeComplianceByConfigRuleCommandOutput) => void): void;
            describeComplianceByConfigRule(args: DescribeComplianceByConfigRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeComplianceByConfigRuleCommandOutput) => void): void;
            /**
                * <p>Indicates whether the specified Amazon Web Services resources are compliant. If
                * 			a resource is noncompliant, this action returns the number of Config rules that the resource does not comply with.</p>
                * 		       <p>A resource is compliant if it complies with all the Config
                * 			rules that evaluate it. It is noncompliant if it does not comply
                * 			with one or more of these rules.</p>
                * 		       <p>If Config has no current evaluation results for the
                * 			resource, it returns <code>INSUFFICIENT_DATA</code>. This result
                * 			might indicate one of the following conditions about the rules that
                * 			evaluate the resource:</p>
                * 		       <ul>
                *             <li>
                * 				           <p>Config has never invoked an evaluation for the
                * 					rule. To check whether it has, use the
                * 						<code>DescribeConfigRuleEvaluationStatus</code> action
                * 					to get the <code>LastSuccessfulInvocationTime</code> and
                * 						<code>LastFailedInvocationTime</code>.</p>
                * 			         </li>
                *             <li>
                * 				           <p>The rule's Lambda function is failing to send
                * 					evaluation results to Config. Verify that the role that
                * 					you assigned to your configuration recorder includes the
                * 						<code>config:PutEvaluations</code> permission. If the
                * 					rule is a custom rule, verify that the Lambda execution
                * 					role includes the <code>config:PutEvaluations</code>
                * 					permission.</p>
                * 			         </li>
                *             <li>
                * 				           <p>The rule's Lambda function has returned
                * 						<code>NOT_APPLICABLE</code> for all evaluation results.
                * 					This can occur if the resources were deleted or removed from
                * 					the rule's scope.</p>
                * 			         </li>
                *          </ul>
                */
            describeComplianceByResource(args: DescribeComplianceByResourceCommandInput, options?: __HttpHandlerOptions): Promise<DescribeComplianceByResourceCommandOutput>;
            describeComplianceByResource(args: DescribeComplianceByResourceCommandInput, cb: (err: any, data?: DescribeComplianceByResourceCommandOutput) => void): void;
            describeComplianceByResource(args: DescribeComplianceByResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeComplianceByResourceCommandOutput) => void): void;
            /**
                * <p>Returns status information for each of your Config managed rules. The status includes information such as the last time Config invoked the rule, the last time Config failed to invoke
                * 			the rule, and the related error for the last failure.</p>
                */
            describeConfigRuleEvaluationStatus(args: DescribeConfigRuleEvaluationStatusCommandInput, options?: __HttpHandlerOptions): Promise<DescribeConfigRuleEvaluationStatusCommandOutput>;
            describeConfigRuleEvaluationStatus(args: DescribeConfigRuleEvaluationStatusCommandInput, cb: (err: any, data?: DescribeConfigRuleEvaluationStatusCommandOutput) => void): void;
            describeConfigRuleEvaluationStatus(args: DescribeConfigRuleEvaluationStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeConfigRuleEvaluationStatusCommandOutput) => void): void;
            /**
                * <p>Returns details about your Config rules.</p>
                */
            describeConfigRules(args: DescribeConfigRulesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeConfigRulesCommandOutput>;
            describeConfigRules(args: DescribeConfigRulesCommandInput, cb: (err: any, data?: DescribeConfigRulesCommandOutput) => void): void;
            describeConfigRules(args: DescribeConfigRulesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeConfigRulesCommandOutput) => void): void;
            /**
                * <p>Returns the details of one or more configuration aggregators.
                * 			If the configuration aggregator is not specified, this action
                * 			returns the details for all the configuration aggregators associated
                * 			with the account. </p>
                */
            describeConfigurationAggregators(args: DescribeConfigurationAggregatorsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeConfigurationAggregatorsCommandOutput>;
            describeConfigurationAggregators(args: DescribeConfigurationAggregatorsCommandInput, cb: (err: any, data?: DescribeConfigurationAggregatorsCommandOutput) => void): void;
            describeConfigurationAggregators(args: DescribeConfigurationAggregatorsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeConfigurationAggregatorsCommandOutput) => void): void;
            /**
                * <p>Returns status information for sources within an aggregator.
                * 			The status includes information about the last time Config verified authorization between the source account and an aggregator account. In case of a failure, the status contains the related error code or message. </p>
                */
            describeConfigurationAggregatorSourcesStatus(args: DescribeConfigurationAggregatorSourcesStatusCommandInput, options?: __HttpHandlerOptions): Promise<DescribeConfigurationAggregatorSourcesStatusCommandOutput>;
            describeConfigurationAggregatorSourcesStatus(args: DescribeConfigurationAggregatorSourcesStatusCommandInput, cb: (err: any, data?: DescribeConfigurationAggregatorSourcesStatusCommandOutput) => void): void;
            describeConfigurationAggregatorSourcesStatus(args: DescribeConfigurationAggregatorSourcesStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeConfigurationAggregatorSourcesStatusCommandOutput) => void): void;
            /**
                * <p>Returns the details for the specified configuration recorders.
                * 			If the configuration recorder is not specified, this action returns
                * 			the details for all configuration recorders associated with the
                * 			account.</p>
                * 		       <note>
                * 			         <p>Currently, you can specify only one configuration recorder
                * 				per region in your account.</p>
                * 		       </note>
                */
            describeConfigurationRecorders(args: DescribeConfigurationRecordersCommandInput, options?: __HttpHandlerOptions): Promise<DescribeConfigurationRecordersCommandOutput>;
            describeConfigurationRecorders(args: DescribeConfigurationRecordersCommandInput, cb: (err: any, data?: DescribeConfigurationRecordersCommandOutput) => void): void;
            describeConfigurationRecorders(args: DescribeConfigurationRecordersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeConfigurationRecordersCommandOutput) => void): void;
            /**
                * <p>Returns the current status of the specified configuration
                * 			recorder. If a configuration recorder is not specified, this action
                * 			returns the status of all configuration recorders associated with
                * 			the account.</p>
                * 		       <note>
                * 			         <p>Currently, you can specify only one configuration recorder
                * 				per region in your account.</p>
                * 		       </note>
                */
            describeConfigurationRecorderStatus(args: DescribeConfigurationRecorderStatusCommandInput, options?: __HttpHandlerOptions): Promise<DescribeConfigurationRecorderStatusCommandOutput>;
            describeConfigurationRecorderStatus(args: DescribeConfigurationRecorderStatusCommandInput, cb: (err: any, data?: DescribeConfigurationRecorderStatusCommandOutput) => void): void;
            describeConfigurationRecorderStatus(args: DescribeConfigurationRecorderStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeConfigurationRecorderStatusCommandOutput) => void): void;
            /**
                * <p>Returns compliance details for each rule in that conformance pack.</p>
                * 		       <note>
                *             <p>You must provide exact rule names.</p>
                *          </note>
                */
            describeConformancePackCompliance(args: DescribeConformancePackComplianceCommandInput, options?: __HttpHandlerOptions): Promise<DescribeConformancePackComplianceCommandOutput>;
            describeConformancePackCompliance(args: DescribeConformancePackComplianceCommandInput, cb: (err: any, data?: DescribeConformancePackComplianceCommandOutput) => void): void;
            describeConformancePackCompliance(args: DescribeConformancePackComplianceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeConformancePackComplianceCommandOutput) => void): void;
            /**
                * <p>Returns a list of one or more conformance packs.</p>
                */
            describeConformancePacks(args: DescribeConformancePacksCommandInput, options?: __HttpHandlerOptions): Promise<DescribeConformancePacksCommandOutput>;
            describeConformancePacks(args: DescribeConformancePacksCommandInput, cb: (err: any, data?: DescribeConformancePacksCommandOutput) => void): void;
            describeConformancePacks(args: DescribeConformancePacksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeConformancePacksCommandOutput) => void): void;
            /**
                * <p>Provides one or more conformance packs deployment status.</p>
                * 		       <note>
                *             <p>If there are no conformance packs then you will see an empty result.</p>
                *          </note>
                */
            describeConformancePackStatus(args: DescribeConformancePackStatusCommandInput, options?: __HttpHandlerOptions): Promise<DescribeConformancePackStatusCommandOutput>;
            describeConformancePackStatus(args: DescribeConformancePackStatusCommandInput, cb: (err: any, data?: DescribeConformancePackStatusCommandOutput) => void): void;
            describeConformancePackStatus(args: DescribeConformancePackStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeConformancePackStatusCommandOutput) => void): void;
            /**
                * <p>Returns details about the specified delivery channel. If a
                * 			delivery channel is not specified, this action returns the details
                * 			of all delivery channels associated with the account.</p>
                * 		       <note>
                * 			         <p>Currently, you can specify only one delivery channel per
                * 				region in your account.</p>
                * 		       </note>
                */
            describeDeliveryChannels(args: DescribeDeliveryChannelsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDeliveryChannelsCommandOutput>;
            describeDeliveryChannels(args: DescribeDeliveryChannelsCommandInput, cb: (err: any, data?: DescribeDeliveryChannelsCommandOutput) => void): void;
            describeDeliveryChannels(args: DescribeDeliveryChannelsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDeliveryChannelsCommandOutput) => void): void;
            /**
                * <p>Returns the current status of the specified delivery channel.
                * 			If a delivery channel is not specified, this action returns the
                * 			current status of all delivery channels associated with the
                * 			account.</p>
                * 		       <note>
                * 			         <p>Currently, you can specify only one delivery channel per
                * 				region in your account.</p>
                * 		       </note>
                */
            describeDeliveryChannelStatus(args: DescribeDeliveryChannelStatusCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDeliveryChannelStatusCommandOutput>;
            describeDeliveryChannelStatus(args: DescribeDeliveryChannelStatusCommandInput, cb: (err: any, data?: DescribeDeliveryChannelStatusCommandOutput) => void): void;
            describeDeliveryChannelStatus(args: DescribeDeliveryChannelStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDeliveryChannelStatusCommandOutput) => void): void;
            /**
                * <p>Returns a list of organization Config rules. </p>
                *
                * 		       <note>
                *             <p>When you specify the limit and the next token, you receive a paginated response.</p>
                * 			         <p>Limit and next token are not applicable if you specify organization Config rule names.
                * 			It is only applicable, when you request all the organization Config rules.</p>
                *
                * 			         <p>
                *                <i>For accounts within an organzation</i>
                *             </p>
                *
                * 			         <p>If you deploy an organizational rule or conformance pack in an organization
                * 				administrator account, and then establish a delegated administrator and deploy an
                * 				organizational rule or conformance pack in the delegated administrator account, you
                * 				won't be able to see the organizational rule or conformance pack in the organization
                * 				administrator account from the delegated administrator account or see the organizational
                * 				rule or conformance pack in the delegated administrator account from organization
                * 				administrator account. The <code>DescribeOrganizationConfigRules</code> and
                * 				<code>DescribeOrganizationConformancePacks</code> APIs can only see and interact with
                * 				the organization-related resource that were deployed from within the account calling
                * 				those APIs.</p>
                * 		       </note>
                */
            describeOrganizationConfigRules(args: DescribeOrganizationConfigRulesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeOrganizationConfigRulesCommandOutput>;
            describeOrganizationConfigRules(args: DescribeOrganizationConfigRulesCommandInput, cb: (err: any, data?: DescribeOrganizationConfigRulesCommandOutput) => void): void;
            describeOrganizationConfigRules(args: DescribeOrganizationConfigRulesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeOrganizationConfigRulesCommandOutput) => void): void;
            /**
                * <p>Provides organization Config rule deployment status for an organization.</p>
                *
                * 		       <note>
                *             <p>The status is not considered successful until organization Config rule is successfully deployed in all the member
                * 			accounts with an exception of excluded accounts.</p>
                * 			         <p>When you specify the limit and the next token, you receive a paginated response.
                * 			Limit and next token are not applicable if you specify organization Config rule names.
                * 			It is only applicable, when you request all the organization Config rules.</p>
                * 			      </note>
                */
            describeOrganizationConfigRuleStatuses(args: DescribeOrganizationConfigRuleStatusesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeOrganizationConfigRuleStatusesCommandOutput>;
            describeOrganizationConfigRuleStatuses(args: DescribeOrganizationConfigRuleStatusesCommandInput, cb: (err: any, data?: DescribeOrganizationConfigRuleStatusesCommandOutput) => void): void;
            describeOrganizationConfigRuleStatuses(args: DescribeOrganizationConfigRuleStatusesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeOrganizationConfigRuleStatusesCommandOutput) => void): void;
            /**
                * <p>Returns a list of organization conformance packs. </p>
                * 		       <note>
                *             <p>When you specify the limit and the next token, you receive a paginated response. </p>
                * 			         <p>Limit and next token are not applicable if you specify organization conformance packs names. They are only applicable,
                * 			when you request all the organization conformance packs. </p>
                *
                * 			         <p>
                *                <i>For accounts within an organzation</i>
                *             </p>
                *
                * 			         <p>If you deploy an organizational rule or conformance pack in an organization
                * 				administrator account, and then establish a delegated administrator and deploy an
                * 				organizational rule or conformance pack in the delegated administrator account, you
                * 				won't be able to see the organizational rule or conformance pack in the organization
                * 				administrator account from the delegated administrator account or see the organizational
                * 				rule or conformance pack in the delegated administrator account from organization
                * 				administrator account. The <code>DescribeOrganizationConfigRules</code> and
                * 				<code>DescribeOrganizationConformancePacks</code> APIs can only see and interact with
                * 				the organization-related resource that were deployed from within the account calling
                * 				those APIs.</p>
                * 		       </note>
                */
            describeOrganizationConformancePacks(args: DescribeOrganizationConformancePacksCommandInput, options?: __HttpHandlerOptions): Promise<DescribeOrganizationConformancePacksCommandOutput>;
            describeOrganizationConformancePacks(args: DescribeOrganizationConformancePacksCommandInput, cb: (err: any, data?: DescribeOrganizationConformancePacksCommandOutput) => void): void;
            describeOrganizationConformancePacks(args: DescribeOrganizationConformancePacksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeOrganizationConformancePacksCommandOutput) => void): void;
            /**
                * <p>Provides organization conformance pack deployment status for an organization. </p>
                * 		       <note>
                * 			         <p>The status is not considered successful until organization conformance pack is successfully
                * 				deployed in all the member accounts with an exception of excluded accounts.</p>
                * 			         <p>When you specify the limit and the next token, you receive a paginated response.
                * 				Limit and next token are not applicable if you specify organization conformance pack names.
                * 				They are only applicable, when you request all the organization conformance packs.</p>
                *          </note>
                */
            describeOrganizationConformancePackStatuses(args: DescribeOrganizationConformancePackStatusesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeOrganizationConformancePackStatusesCommandOutput>;
            describeOrganizationConformancePackStatuses(args: DescribeOrganizationConformancePackStatusesCommandInput, cb: (err: any, data?: DescribeOrganizationConformancePackStatusesCommandOutput) => void): void;
            describeOrganizationConformancePackStatuses(args: DescribeOrganizationConformancePackStatusesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeOrganizationConformancePackStatusesCommandOutput) => void): void;
            /**
                * <p>Returns a list of all pending aggregation requests.</p>
                */
            describePendingAggregationRequests(args: DescribePendingAggregationRequestsCommandInput, options?: __HttpHandlerOptions): Promise<DescribePendingAggregationRequestsCommandOutput>;
            describePendingAggregationRequests(args: DescribePendingAggregationRequestsCommandInput, cb: (err: any, data?: DescribePendingAggregationRequestsCommandOutput) => void): void;
            describePendingAggregationRequests(args: DescribePendingAggregationRequestsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePendingAggregationRequestsCommandOutput) => void): void;
            /**
                * <p>Returns the details of one or more remediation configurations.</p>
                */
            describeRemediationConfigurations(args: DescribeRemediationConfigurationsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeRemediationConfigurationsCommandOutput>;
            describeRemediationConfigurations(args: DescribeRemediationConfigurationsCommandInput, cb: (err: any, data?: DescribeRemediationConfigurationsCommandOutput) => void): void;
            describeRemediationConfigurations(args: DescribeRemediationConfigurationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeRemediationConfigurationsCommandOutput) => void): void;
            /**
                * <p>Returns the details of one or more remediation exceptions. A detailed view of a remediation exception for a set of resources that includes an explanation of an exception and the time when the exception will be deleted.
                * 			When you specify the limit and the next token, you receive a paginated response. </p>
                * 		       <note>
                *             <p>Config generates a remediation exception when a problem occurs executing a remediation action to a specific resource.
                * 				Remediation exceptions blocks auto-remediation until the exception is cleared.</p>
                * 			         <p>When you specify the limit and the next token, you receive a paginated response. </p>
                * 			         <p>Limit and next token are not applicable if you request resources in batch. It is only applicable, when you request all resources.</p>
                *          </note>
                */
            describeRemediationExceptions(args: DescribeRemediationExceptionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeRemediationExceptionsCommandOutput>;
            describeRemediationExceptions(args: DescribeRemediationExceptionsCommandInput, cb: (err: any, data?: DescribeRemediationExceptionsCommandOutput) => void): void;
            describeRemediationExceptions(args: DescribeRemediationExceptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeRemediationExceptionsCommandOutput) => void): void;
            /**
                * <p>Provides a detailed view of a Remediation Execution for a set of resources including state, timestamps for when steps for the remediation execution occur, and any error messages for steps that have failed.
                * 			When you specify the limit and the next token, you receive a paginated response.</p>
                */
            describeRemediationExecutionStatus(args: DescribeRemediationExecutionStatusCommandInput, options?: __HttpHandlerOptions): Promise<DescribeRemediationExecutionStatusCommandOutput>;
            describeRemediationExecutionStatus(args: DescribeRemediationExecutionStatusCommandInput, cb: (err: any, data?: DescribeRemediationExecutionStatusCommandOutput) => void): void;
            describeRemediationExecutionStatus(args: DescribeRemediationExecutionStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeRemediationExecutionStatusCommandOutput) => void): void;
            /**
                * <p>Returns the details of one or more retention configurations. If
                * 			the retention configuration name is not specified, this action
                * 			returns the details for all the retention configurations for that
                * 			account.</p>
                * 		       <note>
                * 			         <p>Currently, Config supports only one retention
                * 				configuration per region in your account.</p>
                * 		       </note>
                */
            describeRetentionConfigurations(args: DescribeRetentionConfigurationsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeRetentionConfigurationsCommandOutput>;
            describeRetentionConfigurations(args: DescribeRetentionConfigurationsCommandInput, cb: (err: any, data?: DescribeRetentionConfigurationsCommandOutput) => void): void;
            describeRetentionConfigurations(args: DescribeRetentionConfigurationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeRetentionConfigurationsCommandOutput) => void): void;
            /**
                * <p>Returns the evaluation results for the specified Config
                * 			rule for a specific resource in a rule. The results indicate which
                * 			Amazon Web Services resources were evaluated by the rule, when each resource was
                * 			last evaluated, and whether each resource complies with the rule. </p>
                * 		       <note>
                * 			         <p>The results can return an empty result page. But if you
                * 				have a <code>nextToken</code>, the results are displayed on the next
                * 				page.</p>
                * 		       </note>
                */
            getAggregateComplianceDetailsByConfigRule(args: GetAggregateComplianceDetailsByConfigRuleCommandInput, options?: __HttpHandlerOptions): Promise<GetAggregateComplianceDetailsByConfigRuleCommandOutput>;
            getAggregateComplianceDetailsByConfigRule(args: GetAggregateComplianceDetailsByConfigRuleCommandInput, cb: (err: any, data?: GetAggregateComplianceDetailsByConfigRuleCommandOutput) => void): void;
            getAggregateComplianceDetailsByConfigRule(args: GetAggregateComplianceDetailsByConfigRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAggregateComplianceDetailsByConfigRuleCommandOutput) => void): void;
            /**
                * <p>Returns the number of compliant and noncompliant rules for one
                * 			or more accounts and regions in an aggregator.</p>
                * 		       <note>
                * 			         <p>The results can return an empty result page, but if you
                * 				have a nextToken, the results are displayed on the next
                * 				page.</p>
                * 		       </note>
                */
            getAggregateConfigRuleComplianceSummary(args: GetAggregateConfigRuleComplianceSummaryCommandInput, options?: __HttpHandlerOptions): Promise<GetAggregateConfigRuleComplianceSummaryCommandOutput>;
            getAggregateConfigRuleComplianceSummary(args: GetAggregateConfigRuleComplianceSummaryCommandInput, cb: (err: any, data?: GetAggregateConfigRuleComplianceSummaryCommandOutput) => void): void;
            getAggregateConfigRuleComplianceSummary(args: GetAggregateConfigRuleComplianceSummaryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAggregateConfigRuleComplianceSummaryCommandOutput) => void): void;
            /**
                * <p>Returns the count of compliant and noncompliant conformance packs across all Amazon Web Services accounts and Amazon Web Services Regions in an aggregator. You can filter based on Amazon Web Services account ID or Amazon Web Services Region.</p>
                * 		       <note>
                *             <p>The results can return an empty result page, but if you have a nextToken, the results are displayed on the next page.</p>
                *          </note>
                */
            getAggregateConformancePackComplianceSummary(args: GetAggregateConformancePackComplianceSummaryCommandInput, options?: __HttpHandlerOptions): Promise<GetAggregateConformancePackComplianceSummaryCommandOutput>;
            getAggregateConformancePackComplianceSummary(args: GetAggregateConformancePackComplianceSummaryCommandInput, cb: (err: any, data?: GetAggregateConformancePackComplianceSummaryCommandOutput) => void): void;
            getAggregateConformancePackComplianceSummary(args: GetAggregateConformancePackComplianceSummaryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAggregateConformancePackComplianceSummaryCommandOutput) => void): void;
            /**
                * <p>Returns the resource counts across accounts and regions that are present in your Config aggregator. You can request the resource counts by providing filters and GroupByKey.</p>
                * 		       <p>For example, if the input contains accountID 12345678910 and region us-east-1 in filters, the API returns the count of resources in account ID 12345678910 and region us-east-1.
                * 			If the input contains ACCOUNT_ID as a GroupByKey, the API returns resource counts for all source accounts that are present in your aggregator.</p>
                */
            getAggregateDiscoveredResourceCounts(args: GetAggregateDiscoveredResourceCountsCommandInput, options?: __HttpHandlerOptions): Promise<GetAggregateDiscoveredResourceCountsCommandOutput>;
            getAggregateDiscoveredResourceCounts(args: GetAggregateDiscoveredResourceCountsCommandInput, cb: (err: any, data?: GetAggregateDiscoveredResourceCountsCommandOutput) => void): void;
            getAggregateDiscoveredResourceCounts(args: GetAggregateDiscoveredResourceCountsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAggregateDiscoveredResourceCountsCommandOutput) => void): void;
            /**
                * <p>Returns configuration item that is aggregated for your specific resource in a specific source account and region.</p>
                */
            getAggregateResourceConfig(args: GetAggregateResourceConfigCommandInput, options?: __HttpHandlerOptions): Promise<GetAggregateResourceConfigCommandOutput>;
            getAggregateResourceConfig(args: GetAggregateResourceConfigCommandInput, cb: (err: any, data?: GetAggregateResourceConfigCommandOutput) => void): void;
            getAggregateResourceConfig(args: GetAggregateResourceConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAggregateResourceConfigCommandOutput) => void): void;
            /**
                * <p>Returns the evaluation results for the specified Config
                * 			rule. The results indicate which Amazon Web Services resources were evaluated by the
                * 			rule, when each resource was last evaluated, and whether each
                * 			resource complies with the rule.</p>
                */
            getComplianceDetailsByConfigRule(args: GetComplianceDetailsByConfigRuleCommandInput, options?: __HttpHandlerOptions): Promise<GetComplianceDetailsByConfigRuleCommandOutput>;
            getComplianceDetailsByConfigRule(args: GetComplianceDetailsByConfigRuleCommandInput, cb: (err: any, data?: GetComplianceDetailsByConfigRuleCommandOutput) => void): void;
            getComplianceDetailsByConfigRule(args: GetComplianceDetailsByConfigRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetComplianceDetailsByConfigRuleCommandOutput) => void): void;
            /**
                * <p>Returns the evaluation results for the specified Amazon Web Services resource.
                * 			The results indicate which Config rules were used to evaluate
                * 			the resource, when each rule was last used, and whether the resource
                * 			complies with each rule.</p>
                */
            getComplianceDetailsByResource(args: GetComplianceDetailsByResourceCommandInput, options?: __HttpHandlerOptions): Promise<GetComplianceDetailsByResourceCommandOutput>;
            getComplianceDetailsByResource(args: GetComplianceDetailsByResourceCommandInput, cb: (err: any, data?: GetComplianceDetailsByResourceCommandOutput) => void): void;
            getComplianceDetailsByResource(args: GetComplianceDetailsByResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetComplianceDetailsByResourceCommandOutput) => void): void;
            /**
                * <p>Returns the number of Config rules that are compliant and
                * 			noncompliant, up to a maximum of 25 for each.</p>
                */
            getComplianceSummaryByConfigRule(args: GetComplianceSummaryByConfigRuleCommandInput, options?: __HttpHandlerOptions): Promise<GetComplianceSummaryByConfigRuleCommandOutput>;
            getComplianceSummaryByConfigRule(args: GetComplianceSummaryByConfigRuleCommandInput, cb: (err: any, data?: GetComplianceSummaryByConfigRuleCommandOutput) => void): void;
            getComplianceSummaryByConfigRule(args: GetComplianceSummaryByConfigRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetComplianceSummaryByConfigRuleCommandOutput) => void): void;
            /**
                * <p>Returns the number of resources that are compliant and the
                * 			number that are noncompliant. You can specify one or more resource
                * 			types to get these numbers for each resource type. The maximum
                * 			number returned is 100.</p>
                */
            getComplianceSummaryByResourceType(args: GetComplianceSummaryByResourceTypeCommandInput, options?: __HttpHandlerOptions): Promise<GetComplianceSummaryByResourceTypeCommandOutput>;
            getComplianceSummaryByResourceType(args: GetComplianceSummaryByResourceTypeCommandInput, cb: (err: any, data?: GetComplianceSummaryByResourceTypeCommandOutput) => void): void;
            getComplianceSummaryByResourceType(args: GetComplianceSummaryByResourceTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetComplianceSummaryByResourceTypeCommandOutput) => void): void;
            /**
                * <p>Returns compliance details of a conformance pack for all Amazon Web Services resources that are monitered by conformance pack.</p>
                */
            getConformancePackComplianceDetails(args: GetConformancePackComplianceDetailsCommandInput, options?: __HttpHandlerOptions): Promise<GetConformancePackComplianceDetailsCommandOutput>;
            getConformancePackComplianceDetails(args: GetConformancePackComplianceDetailsCommandInput, cb: (err: any, data?: GetConformancePackComplianceDetailsCommandOutput) => void): void;
            getConformancePackComplianceDetails(args: GetConformancePackComplianceDetailsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConformancePackComplianceDetailsCommandOutput) => void): void;
            /**
                * <p>Returns compliance details for the conformance pack based on the cumulative compliance results of all the rules in that conformance pack.</p>
                */
            getConformancePackComplianceSummary(args: GetConformancePackComplianceSummaryCommandInput, options?: __HttpHandlerOptions): Promise<GetConformancePackComplianceSummaryCommandOutput>;
            getConformancePackComplianceSummary(args: GetConformancePackComplianceSummaryCommandInput, cb: (err: any, data?: GetConformancePackComplianceSummaryCommandOutput) => void): void;
            getConformancePackComplianceSummary(args: GetConformancePackComplianceSummaryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConformancePackComplianceSummaryCommandOutput) => void): void;
            /**
                * <p>Returns the policy definition containing the logic for your Config Custom Policy rule.</p>
                */
            getCustomRulePolicy(args: GetCustomRulePolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetCustomRulePolicyCommandOutput>;
            getCustomRulePolicy(args: GetCustomRulePolicyCommandInput, cb: (err: any, data?: GetCustomRulePolicyCommandOutput) => void): void;
            getCustomRulePolicy(args: GetCustomRulePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCustomRulePolicyCommandOutput) => void): void;
            /**
                * <p>Returns the resource types, the number of each resource type,
                * 			and the total number of resources that Config is recording in
                * 			this region for your Amazon Web Services account. </p>
                * 		       <p class="title">
                *             <b>Example</b>
                *          </p>
                *          <ol>
                *             <li>
                * 				           <p>Config is recording three resource types in the US
                * 					East (Ohio) Region for your account: 25 EC2 instances, 20
                * 					IAM users, and 15 S3 buckets.</p>
                * 			         </li>
                *             <li>
                * 				           <p>You make a call to the
                * 						<code>GetDiscoveredResourceCounts</code> action and
                * 					specify that you want all resource types. </p>
                * 			         </li>
                *             <li>
                * 				           <p>Config returns the following:</p>
                *
                * 				           <ul>
                *                   <li>
                * 						               <p>The resource types (EC2 instances, IAM users,
                * 							and S3 buckets).</p>
                * 					             </li>
                *                   <li>
                * 						               <p>The number of each resource type (25, 20, and
                * 							15).</p>
                * 					             </li>
                *                   <li>
                * 						               <p>The total number of all resources
                * 							(60).</p>
                * 					             </li>
                *                </ul>
                *
                * 			         </li>
                *          </ol>
                *
                * 		       <p>The response is paginated. By default, Config lists 100
                * 				<a>ResourceCount</a> objects on each page. You can
                * 			customize this number with the <code>limit</code> parameter. The
                * 			response includes a <code>nextToken</code> string. To get the next
                * 			page of results, run the request again and specify the string for
                * 			the <code>nextToken</code> parameter.</p>
                *
                * 		       <note>
                * 			         <p>If you make a call to the <a>GetDiscoveredResourceCounts</a> action, you might
                * 				not immediately receive resource counts in the following
                * 				situations:</p>
                *
                * 			         <ul>
                *                <li>
                * 					             <p>You are a new Config customer.</p>
                * 				           </li>
                *                <li>
                * 					             <p>You just enabled resource recording.</p>
                * 				           </li>
                *             </ul>
                *
                * 			         <p>It might take a few minutes for Config to record and
                * 				count your resources. Wait a few minutes and then retry the
                * 					<a>GetDiscoveredResourceCounts</a> action.
                * 			</p>
                * 		       </note>
                */
            getDiscoveredResourceCounts(args: GetDiscoveredResourceCountsCommandInput, options?: __HttpHandlerOptions): Promise<GetDiscoveredResourceCountsCommandOutput>;
            getDiscoveredResourceCounts(args: GetDiscoveredResourceCountsCommandInput, cb: (err: any, data?: GetDiscoveredResourceCountsCommandOutput) => void): void;
            getDiscoveredResourceCounts(args: GetDiscoveredResourceCountsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDiscoveredResourceCountsCommandOutput) => void): void;
            /**
                * <p>Returns detailed status for each member account within an organization for a given organization Config rule.</p>
                */
            getOrganizationConfigRuleDetailedStatus(args: GetOrganizationConfigRuleDetailedStatusCommandInput, options?: __HttpHandlerOptions): Promise<GetOrganizationConfigRuleDetailedStatusCommandOutput>;
            getOrganizationConfigRuleDetailedStatus(args: GetOrganizationConfigRuleDetailedStatusCommandInput, cb: (err: any, data?: GetOrganizationConfigRuleDetailedStatusCommandOutput) => void): void;
            getOrganizationConfigRuleDetailedStatus(args: GetOrganizationConfigRuleDetailedStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetOrganizationConfigRuleDetailedStatusCommandOutput) => void): void;
            /**
                * <p>Returns detailed status for each member account within an organization for a given organization conformance pack.</p>
                */
            getOrganizationConformancePackDetailedStatus(args: GetOrganizationConformancePackDetailedStatusCommandInput, options?: __HttpHandlerOptions): Promise<GetOrganizationConformancePackDetailedStatusCommandOutput>;
            getOrganizationConformancePackDetailedStatus(args: GetOrganizationConformancePackDetailedStatusCommandInput, cb: (err: any, data?: GetOrganizationConformancePackDetailedStatusCommandOutput) => void): void;
            getOrganizationConformancePackDetailedStatus(args: GetOrganizationConformancePackDetailedStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetOrganizationConformancePackDetailedStatusCommandOutput) => void): void;
            /**
                * <p>Returns the policy definition containing the logic for your organization Config Custom Policy rule.</p>
                */
            getOrganizationCustomRulePolicy(args: GetOrganizationCustomRulePolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetOrganizationCustomRulePolicyCommandOutput>;
            getOrganizationCustomRulePolicy(args: GetOrganizationCustomRulePolicyCommandInput, cb: (err: any, data?: GetOrganizationCustomRulePolicyCommandOutput) => void): void;
            getOrganizationCustomRulePolicy(args: GetOrganizationCustomRulePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetOrganizationCustomRulePolicyCommandOutput) => void): void;
            /**
                * <p>Returns a list of <code>ConfigurationItems</code> for the specified resource.
                * 			The list contains details about each state of the resource
                * 			during the specified time interval. If you specified a retention
                * 			period to retain your <code>ConfigurationItems</code> between a
                * 			minimum of 30 days and a maximum of 7 years (2557 days), Config
                * 			returns the <code>ConfigurationItems</code> for the specified
                * 			retention period. </p>
                * 		       <p>The response is paginated. By default, Config returns a
                * 			limit of 10 configuration items per page. You can customize this
                * 			number with the <code>limit</code> parameter. The response includes
                * 			a <code>nextToken</code> string. To get the next page of results,
                * 			run the request again and specify the string for the
                * 				<code>nextToken</code> parameter.</p>
                * 		       <note>
                * 			         <p>Each call to the API is limited to span a duration of seven
                * 				days. It is likely that the number of records returned is
                * 				smaller than the specified <code>limit</code>. In such cases,
                * 				you can make another call, using the
                * 				<code>nextToken</code>.</p>
                * 		       </note>
                */
            getResourceConfigHistory(args: GetResourceConfigHistoryCommandInput, options?: __HttpHandlerOptions): Promise<GetResourceConfigHistoryCommandOutput>;
            getResourceConfigHistory(args: GetResourceConfigHistoryCommandInput, cb: (err: any, data?: GetResourceConfigHistoryCommandOutput) => void): void;
            getResourceConfigHistory(args: GetResourceConfigHistoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetResourceConfigHistoryCommandOutput) => void): void;
            /**
                * <p>Returns the details of a specific stored query.</p>
                */
            getStoredQuery(args: GetStoredQueryCommandInput, options?: __HttpHandlerOptions): Promise<GetStoredQueryCommandOutput>;
            getStoredQuery(args: GetStoredQueryCommandInput, cb: (err: any, data?: GetStoredQueryCommandOutput) => void): void;
            getStoredQuery(args: GetStoredQueryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetStoredQueryCommandOutput) => void): void;
            /**
                * <p>Accepts a resource type and returns a list of resource identifiers that are aggregated for a specific resource type across accounts and regions.
                * 			A resource identifier includes the resource type, ID, (if available) the custom resource name, source account, and source region.
                * 			You can narrow the results to include only resources that have specific resource IDs, or a resource name, or source account ID, or source region.</p>
                * 			      <p>For example, if the input consists of accountID 12345678910 and the region is us-east-1 for resource type <code>AWS::EC2::Instance</code> then the API returns all the EC2 instance identifiers of accountID 12345678910 and region us-east-1.</p>
                */
            listAggregateDiscoveredResources(args: ListAggregateDiscoveredResourcesCommandInput, options?: __HttpHandlerOptions): Promise<ListAggregateDiscoveredResourcesCommandOutput>;
            listAggregateDiscoveredResources(args: ListAggregateDiscoveredResourcesCommandInput, cb: (err: any, data?: ListAggregateDiscoveredResourcesCommandOutput) => void): void;
            listAggregateDiscoveredResources(args: ListAggregateDiscoveredResourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAggregateDiscoveredResourcesCommandOutput) => void): void;
            /**
                * <p>Accepts a resource type and returns a list of resource
                * 			identifiers for the resources of that type. A resource identifier
                * 			includes the resource type, ID, and (if available) the custom
                * 			resource name. The results consist of resources that Config has
                * 			discovered, including those that Config is not currently
                * 			recording. You can narrow the results to include only resources that
                * 			have specific resource IDs or a resource name.</p>
                * 		       <note>
                * 			         <p>You can specify either resource IDs or a resource name, but
                * 				not both, in the same request.</p>
                * 		       </note>
                * 		       <p>The response is paginated. By default, Config lists 100
                * 			resource identifiers on each page. You can customize this number
                * 			with the <code>limit</code> parameter. The response includes a
                * 				<code>nextToken</code> string. To get the next page of results,
                * 			run the request again and specify the string for the
                * 				<code>nextToken</code> parameter.</p>
                */
            listDiscoveredResources(args: ListDiscoveredResourcesCommandInput, options?: __HttpHandlerOptions): Promise<ListDiscoveredResourcesCommandOutput>;
            listDiscoveredResources(args: ListDiscoveredResourcesCommandInput, cb: (err: any, data?: ListDiscoveredResourcesCommandOutput) => void): void;
            listDiscoveredResources(args: ListDiscoveredResourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDiscoveredResourcesCommandOutput) => void): void;
            /**
                * <p>Lists the stored queries for a single Amazon Web Services account and a single Amazon Web Services Region. The default is 100. </p>
                */
            listStoredQueries(args: ListStoredQueriesCommandInput, options?: __HttpHandlerOptions): Promise<ListStoredQueriesCommandOutput>;
            listStoredQueries(args: ListStoredQueriesCommandInput, cb: (err: any, data?: ListStoredQueriesCommandOutput) => void): void;
            listStoredQueries(args: ListStoredQueriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListStoredQueriesCommandOutput) => void): void;
            /**
                * <p>List the tags for Config resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Authorizes the aggregator account and region to collect data
                * 			from the source account and region. </p>
                */
            putAggregationAuthorization(args: PutAggregationAuthorizationCommandInput, options?: __HttpHandlerOptions): Promise<PutAggregationAuthorizationCommandOutput>;
            putAggregationAuthorization(args: PutAggregationAuthorizationCommandInput, cb: (err: any, data?: PutAggregationAuthorizationCommandOutput) => void): void;
            putAggregationAuthorization(args: PutAggregationAuthorizationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutAggregationAuthorizationCommandOutput) => void): void;
            /**
                * <p>Adds or updates an Config rule for evaluating whether your
                * 			Amazon Web Services resources comply with your desired configurations.</p>
                * 		       <p>You can use this action for Config custom rules and Config
                * 			managed rules. A Config custom rule is a rule that you
                * 			develop and maintain. An Config managed rule is a customizable,
                * 			predefined rule that Config provides.</p>
                * 		       <p>If you are adding a new Config custom rule, you must first
                * 			create the Lambda function that the rule invokes to evaluate
                * 			your resources. When you use the <code>PutConfigRule</code> action
                * 			to add the rule to Config, you must specify the Amazon Resource
                * 			Name (ARN) that Lambda assigns to the function. Specify the ARN
                * 			for the <code>SourceIdentifier</code> key. This key is part of the
                * 				<code>Source</code> object, which is part of the
                * 				<code>ConfigRule</code> object. </p>
                * 		       <p>If you are adding an Config managed rule, specify the
                * 			rule's identifier for the <code>SourceIdentifier</code> key. To
                * 			reference Config managed rule identifiers, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html">About Config managed rules</a>.</p>
                * 		       <p>For any new rule that you add, specify the
                * 				<code>ConfigRuleName</code> in the <code>ConfigRule</code>
                * 			object. Do not specify the <code>ConfigRuleArn</code> or the
                * 			<code>ConfigRuleId</code>. These values are generated by Config for new rules.</p>
                * 		       <p>If you are updating a rule that you added previously, you can
                * 			specify the rule by <code>ConfigRuleName</code>,
                * 				<code>ConfigRuleId</code>, or <code>ConfigRuleArn</code> in the
                * 				<code>ConfigRule</code> data type that you use in this
                * 			request.</p>
                * 		       <p>For information on how many Config rules you can have per account,
                * 			see <a href="https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html">
                *                <b>Service Limits</b>
                *             </a> in the Config Developer Guide.</p>
                *
                * 		       <p>For more information about developing and using Config
                * 			rules, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config.html">Evaluating Amazon Web Services resource Configurations with Config</a>
                * 			in the <i>Config Developer Guide</i>.</p>
                */
            putConfigRule(args: PutConfigRuleCommandInput, options?: __HttpHandlerOptions): Promise<PutConfigRuleCommandOutput>;
            putConfigRule(args: PutConfigRuleCommandInput, cb: (err: any, data?: PutConfigRuleCommandOutput) => void): void;
            putConfigRule(args: PutConfigRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutConfigRuleCommandOutput) => void): void;
            /**
                * <p>Creates and updates the configuration aggregator with the
                * 			selected source accounts and regions. The source account can be
                * 			individual account(s) or an organization.</p>
                *
                * 		       <p>
                *             <code>accountIds</code> that are passed will be replaced with existing accounts.
                * 			If you want to add additional accounts into the aggregator, call <code>DescribeConfigurationAggregators</code> to get the previous accounts and then append new ones.</p>
                * 		       <note>
                * 			         <p>Config should be enabled in source accounts and regions
                * 				you want to aggregate.</p>
                *
                * 			         <p>If your source type is an organization, you must be signed in to the management account or a registered delegated administrator and all the features must be enabled in your organization.
                * 				If the caller is a management account, Config calls <code>EnableAwsServiceAccess</code> API to enable integration between Config and Organizations.
                * 				If the caller is a registered delegated administrator, Config calls <code>ListDelegatedAdministrators</code> API to verify whether the caller is a valid delegated administrator.</p>
                * 			         <p>To register a delegated administrator, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/set-up-aggregator-cli.html#register-a-delegated-administrator-cli">Register a Delegated Administrator</a> in the Config developer guide. </p>
                * 		       </note>
                */
            putConfigurationAggregator(args: PutConfigurationAggregatorCommandInput, options?: __HttpHandlerOptions): Promise<PutConfigurationAggregatorCommandOutput>;
            putConfigurationAggregator(args: PutConfigurationAggregatorCommandInput, cb: (err: any, data?: PutConfigurationAggregatorCommandOutput) => void): void;
            putConfigurationAggregator(args: PutConfigurationAggregatorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutConfigurationAggregatorCommandOutput) => void): void;
            /**
                * <p>Creates a new configuration recorder to record the selected
                * 			resource configurations.</p>
                * 		       <p>You can use this action to change the role <code>roleARN</code>
                * 			or the <code>recordingGroup</code> of an existing recorder. To
                * 			change the role, call the action on the existing configuration
                * 			recorder and specify a role.</p>
                * 		       <note>
                * 			         <p>Currently, you can specify only one configuration recorder
                * 				per region in your account.</p>
                * 			         <p>If <code>ConfigurationRecorder</code> does not have the
                * 					<b>recordingGroup</b> parameter
                * 				specified, the default is to record all supported resource
                * 				types.</p>
                * 		       </note>
                */
            putConfigurationRecorder(args: PutConfigurationRecorderCommandInput, options?: __HttpHandlerOptions): Promise<PutConfigurationRecorderCommandOutput>;
            putConfigurationRecorder(args: PutConfigurationRecorderCommandInput, cb: (err: any, data?: PutConfigurationRecorderCommandOutput) => void): void;
            putConfigurationRecorder(args: PutConfigurationRecorderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutConfigurationRecorderCommandOutput) => void): void;
            /**
                * <p>Creates or updates a conformance pack. A conformance pack is a collection of Config rules that can be easily deployed in an account and a region and across Amazon Web Services Organization.
                * 			For information on how many conformance packs you can have per account,
                * 			see <a href="https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html">
                *                <b>Service Limits</b>
                *             </a> in the Config Developer Guide.</p>
                * 		       <p>This API creates a service linked role <code>AWSServiceRoleForConfigConforms</code> in your account.
                * 		The service linked role is created only when the role does not exist in your account. </p>
                * 		       <note>
                *             <p>You must specify either the <code>TemplateS3Uri</code> or the <code>TemplateBody</code> parameter, but not both.
                * 			If you provide both Config uses the <code>TemplateS3Uri</code> parameter and ignores the <code>TemplateBody</code> parameter.</p>
                *          </note>
                */
            putConformancePack(args: PutConformancePackCommandInput, options?: __HttpHandlerOptions): Promise<PutConformancePackCommandOutput>;
            putConformancePack(args: PutConformancePackCommandInput, cb: (err: any, data?: PutConformancePackCommandOutput) => void): void;
            putConformancePack(args: PutConformancePackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutConformancePackCommandOutput) => void): void;
            /**
                * <p>Creates a delivery channel object to deliver configuration
                * 			information to an Amazon S3 bucket and Amazon SNS topic.</p>
                * 		       <p>Before you can create a delivery channel, you must create a
                * 			configuration recorder.</p>
                * 		       <p>You can use this action to change the Amazon S3 bucket or an
                * 			Amazon SNS topic of the existing delivery channel. To change the
                * 			Amazon S3 bucket or an Amazon SNS topic, call this action and
                * 			specify the changed values for the S3 bucket and the SNS topic. If
                * 			you specify a different value for either the S3 bucket or the SNS
                * 			topic, this action will keep the existing value for the parameter
                * 			that is not changed.</p>
                * 		       <note>
                * 			         <p>You can have only one delivery channel per region in your
                * 				account.</p>
                *
                *
                * 		       </note>
                */
            putDeliveryChannel(args: PutDeliveryChannelCommandInput, options?: __HttpHandlerOptions): Promise<PutDeliveryChannelCommandOutput>;
            putDeliveryChannel(args: PutDeliveryChannelCommandInput, cb: (err: any, data?: PutDeliveryChannelCommandOutput) => void): void;
            putDeliveryChannel(args: PutDeliveryChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutDeliveryChannelCommandOutput) => void): void;
            /**
                * <p>Used by an Lambda function to deliver evaluation results to
                * 			Config. This action is required in every Lambda function
                * 			that is invoked by an Config rule.</p>
                */
            putEvaluations(args: PutEvaluationsCommandInput, options?: __HttpHandlerOptions): Promise<PutEvaluationsCommandOutput>;
            putEvaluations(args: PutEvaluationsCommandInput, cb: (err: any, data?: PutEvaluationsCommandOutput) => void): void;
            putEvaluations(args: PutEvaluationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutEvaluationsCommandOutput) => void): void;
            /**
                * <p>Add or updates the evaluations for process checks.
                * 			This API checks if the rule is a process check when the name of the Config rule is provided.</p>
                */
            putExternalEvaluation(args: PutExternalEvaluationCommandInput, options?: __HttpHandlerOptions): Promise<PutExternalEvaluationCommandOutput>;
            putExternalEvaluation(args: PutExternalEvaluationCommandInput, cb: (err: any, data?: PutExternalEvaluationCommandOutput) => void): void;
            putExternalEvaluation(args: PutExternalEvaluationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutExternalEvaluationCommandOutput) => void): void;
            /**
                * <p>Adds or updates organization Config rule for your entire organization evaluating whether your Amazon Web Services resources comply with your
                * 			desired configurations. For information on how many organization Config rules you can have per account,
                * 			see <a href="https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html">
                *                <b>Service Limits</b>
                *             </a> in the Config Developer Guide.</p>
                * 	        <p> Only a master account and a delegated administrator can create or update an organization Config rule.
                * 		When calling this API with a delegated administrator, you must ensure Organizations
                * 		<code>ListDelegatedAdministrator</code> permissions are added. An organization can have up to 3 delegated administrators.</p>
                * 		       <p>This API enables organization service access through the <code>EnableAWSServiceAccess</code> action and creates a service linked
                * 			role <code>AWSServiceRoleForConfigMultiAccountSetup</code> in the master or delegated administrator account of your organization.
                * 			The service linked role is created only when the role does not exist in the caller account.
                * 			Config verifies the existence of role with <code>GetRole</code> action.</p>
                * 		       <p>To use this API with delegated administrator, register a delegated administrator by calling Amazon Web Services Organization
                * 			<code>register-delegated-administrator</code> for <code>config-multiaccountsetup.amazonaws.com</code>. </p>
                * 		       <p>You can use this action to create both Config custom rules and Config managed rules.
                * 			If you are adding a new Config custom rule, you must first create Lambda function in the master account or a delegated
                * 			administrator that the rule invokes to evaluate your resources. You also need to create an IAM role in the managed-account that can be assumed by the Lambda function.
                * 			When you use the <code>PutOrganizationConfigRule</code> action to add the rule to Config, you must
                * 			specify the Amazon Resource Name (ARN) that Lambda assigns to the function.
                * 			If you are adding an Config managed rule, specify the rule's identifier for the <code>RuleIdentifier</code> key.</p>
                * 		       <note>
                *             <p>Prerequisite: Ensure you call <code>EnableAllFeatures</code> API to enable all features in an organization.</p>
                * 			         <p>Specify either <code>OrganizationCustomRuleMetadata</code> or <code>OrganizationManagedRuleMetadata</code>.</p>
                * 			      </note>
                */
            putOrganizationConfigRule(args: PutOrganizationConfigRuleCommandInput, options?: __HttpHandlerOptions): Promise<PutOrganizationConfigRuleCommandOutput>;
            putOrganizationConfigRule(args: PutOrganizationConfigRuleCommandInput, cb: (err: any, data?: PutOrganizationConfigRuleCommandOutput) => void): void;
            putOrganizationConfigRule(args: PutOrganizationConfigRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutOrganizationConfigRuleCommandOutput) => void): void;
            /**
                * <p>Deploys conformance packs across member accounts in an Amazon Web Services Organization. For information on how many organization conformance packs and how many Config rules you can have per account,
                * 			see <a href="https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html">
                *                <b>Service Limits</b>
                *             </a> in the Config Developer Guide.</p>
                * 		       <p>Only a master account and a delegated administrator can call this API.
                * 			When calling this API with a delegated administrator, you must ensure Organizations
                * 			<code>ListDelegatedAdministrator</code> permissions are added. An organization can have up to 3 delegated administrators.</p>
                * 		       <p>This API enables organization service access for <code>config-multiaccountsetup.amazonaws.com</code>
                * 			through the <code>EnableAWSServiceAccess</code> action and creates a
                * 			service linked role <code>AWSServiceRoleForConfigMultiAccountSetup</code> in the master or delegated administrator account of your organization.
                * 			The service linked role is created only when the role does not exist in the caller account.
                * 			To use this API with delegated administrator, register a delegated administrator by calling Amazon Web Services Organization
                * 			<code>register-delegate-admin</code> for <code>config-multiaccountsetup.amazonaws.com</code>.</p>
                *
                *
                *
                * 		       <note>
                * 			         <p>Prerequisite: Ensure you call <code>EnableAllFeatures</code> API to enable all features in an organization.</p>
                * 			         <p>You must specify either the <code>TemplateS3Uri</code> or the <code>TemplateBody</code> parameter, but not both.
                * 			If you provide both Config uses the <code>TemplateS3Uri</code> parameter and ignores the <code>TemplateBody</code> parameter.</p>
                * 			         <p>Config sets the state of a conformance pack to CREATE_IN_PROGRESS and UPDATE_IN_PROGRESS until the conformance pack is created or updated.
                * 				You cannot update a conformance pack while it is in this state.</p>
                *          </note>
                */
            putOrganizationConformancePack(args: PutOrganizationConformancePackCommandInput, options?: __HttpHandlerOptions): Promise<PutOrganizationConformancePackCommandOutput>;
            putOrganizationConformancePack(args: PutOrganizationConformancePackCommandInput, cb: (err: any, data?: PutOrganizationConformancePackCommandOutput) => void): void;
            putOrganizationConformancePack(args: PutOrganizationConformancePackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutOrganizationConformancePackCommandOutput) => void): void;
            /**
                * <p>Adds or updates the remediation configuration with a specific Config rule with the
                * 			selected target or action.
                * 			The API creates the <code>RemediationConfiguration</code> object for the Config rule.
                * 		The Config rule must already exist for you to add a remediation configuration.
                * 		The target (SSM document) must exist and have permissions to use the target. </p>
                * 		       <note>
                *             <p>If you make backward incompatible changes to the SSM document,
                * 			you must call this again to ensure the remediations can run.</p>
                * 			         <p>This API does not support adding remediation configurations for service-linked Config Rules such as Organization Config rules,
                * 				the rules deployed by conformance packs, and rules deployed by Amazon Web Services Security Hub.</p>
                *          </note>
                * 		       <note>
                *             <p>For manual remediation configuration, you need to provide a value for <code>automationAssumeRole</code> or use a value in the <code>assumeRole</code>field  to remediate your resources. The SSM automation document can use either as long as it maps to a valid parameter.</p>
                * 			         <p>However, for automatic remediation configuration, the only valid <code>assumeRole</code> field value is <code>AutomationAssumeRole</code> and you need to provide a value for <code>AutomationAssumeRole</code> to remediate your resources.</p>
                * 		       </note>
                */
            putRemediationConfigurations(args: PutRemediationConfigurationsCommandInput, options?: __HttpHandlerOptions): Promise<PutRemediationConfigurationsCommandOutput>;
            putRemediationConfigurations(args: PutRemediationConfigurationsCommandInput, cb: (err: any, data?: PutRemediationConfigurationsCommandOutput) => void): void;
            putRemediationConfigurations(args: PutRemediationConfigurationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutRemediationConfigurationsCommandOutput) => void): void;
            /**
                * <p>A remediation exception is when a specific resource is no longer considered for auto-remediation.
                * 			This API adds a new exception or updates an existing exception for a specific resource with a specific Config rule. </p>
                * 		       <note>
                *             <p>Config generates a remediation exception when a problem occurs executing a remediation action to a specific resource.
                * 			Remediation exceptions blocks auto-remediation until the exception is cleared.</p>
                *          </note>
                */
            putRemediationExceptions(args: PutRemediationExceptionsCommandInput, options?: __HttpHandlerOptions): Promise<PutRemediationExceptionsCommandOutput>;
            putRemediationExceptions(args: PutRemediationExceptionsCommandInput, cb: (err: any, data?: PutRemediationExceptionsCommandOutput) => void): void;
            putRemediationExceptions(args: PutRemediationExceptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutRemediationExceptionsCommandOutput) => void): void;
            /**
                * <p>Records the configuration state for the resource provided in the request.
                *
                * 			The configuration state of a resource is represented in Config as Configuration Items.
                * 			Once this API records the configuration item, you can retrieve the list of configuration items for the custom resource type using existing Config APIs. </p>
                * 		       <note>
                *             <p>The custom resource type must be registered with CloudFormation. This API accepts the configuration item registered with CloudFormation.</p>
                * 			         <p>When you call this API, Config only stores configuration state of the resource provided in the request. This API does not change or remediate the configuration of the resource.
                * 				</p>
                * 		          <p>Write-only schema properites are not recorded as part of the published configuration item.</p>
                *          </note>
                */
            putResourceConfig(args: PutResourceConfigCommandInput, options?: __HttpHandlerOptions): Promise<PutResourceConfigCommandOutput>;
            putResourceConfig(args: PutResourceConfigCommandInput, cb: (err: any, data?: PutResourceConfigCommandOutput) => void): void;
            putResourceConfig(args: PutResourceConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutResourceConfigCommandOutput) => void): void;
            /**
                * <p>Creates and updates the retention configuration with details
                * 			about retention period (number of days) that Config stores your
                * 			historical information. The API creates the
                * 				<code>RetentionConfiguration</code> object and names the object
                * 			as <b>default</b>. When you have a
                * 				<code>RetentionConfiguration</code> object named <b>default</b>, calling the API modifies the
                * 			default object. </p>
                * 		       <note>
                * 			         <p>Currently, Config supports only one retention
                * 				configuration per region in your account.</p>
                * 		       </note>
                */
            putRetentionConfiguration(args: PutRetentionConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<PutRetentionConfigurationCommandOutput>;
            putRetentionConfiguration(args: PutRetentionConfigurationCommandInput, cb: (err: any, data?: PutRetentionConfigurationCommandOutput) => void): void;
            putRetentionConfiguration(args: PutRetentionConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutRetentionConfigurationCommandOutput) => void): void;
            /**
                * <p>Saves a new query or updates an existing saved query. The <code>QueryName</code> must be unique for a single Amazon Web Services account and a single Amazon Web Services Region.
                * 			You can create upto 300 queries in a single Amazon Web Services account and a single Amazon Web Services Region.</p>
                */
            putStoredQuery(args: PutStoredQueryCommandInput, options?: __HttpHandlerOptions): Promise<PutStoredQueryCommandOutput>;
            putStoredQuery(args: PutStoredQueryCommandInput, cb: (err: any, data?: PutStoredQueryCommandOutput) => void): void;
            putStoredQuery(args: PutStoredQueryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutStoredQueryCommandOutput) => void): void;
            /**
                * <p>Accepts a structured query language (SQL) SELECT command and an aggregator to query configuration state of Amazon Web Services resources across multiple accounts and regions,
                * 			performs the corresponding search, and returns resource configurations matching the properties.</p>
                * 		       <p>For more information about query components, see the
                * 			<a href="https://docs.aws.amazon.com/config/latest/developerguide/query-components.html">
                *                <b>Query Components</b>
                *             </a> section in the Config Developer Guide.</p>
                *
                * 		       <note>
                * 			         <p>If you run an aggregation query (i.e., using <code>GROUP BY</code> or using aggregate functions such as <code>COUNT</code>; e.g., <code>SELECT resourceId, COUNT(*) WHERE resourceType = 'AWS::IAM::Role' GROUP BY resourceId</code>)
                * 				and do not specify the <code>MaxResults</code> or the <code>Limit</code> query parameters, the default page size is set to 500.</p>
                *
                * 			         <p>If you run a non-aggregation query (i.e., not using <code>GROUP BY</code> or aggregate function; e.g., <code>SELECT * WHERE resourceType = 'AWS::IAM::Role'</code>)
                * 				and do not specify the <code>MaxResults</code> or the <code>Limit</code> query parameters, the default page size is set to 25.</p>
                * 		       </note>
                */
            selectAggregateResourceConfig(args: SelectAggregateResourceConfigCommandInput, options?: __HttpHandlerOptions): Promise<SelectAggregateResourceConfigCommandOutput>;
            selectAggregateResourceConfig(args: SelectAggregateResourceConfigCommandInput, cb: (err: any, data?: SelectAggregateResourceConfigCommandOutput) => void): void;
            selectAggregateResourceConfig(args: SelectAggregateResourceConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SelectAggregateResourceConfigCommandOutput) => void): void;
            /**
                * <p>Accepts a structured query language (SQL) <code>SELECT</code> command, performs the corresponding search, and returns resource configurations matching the properties.</p>
                * 		       <p>For more information about query components, see the
                * 			<a href="https://docs.aws.amazon.com/config/latest/developerguide/query-components.html">
                *                <b>Query Components</b>
                *             </a> section in the Config Developer Guide.</p>
                */
            selectResourceConfig(args: SelectResourceConfigCommandInput, options?: __HttpHandlerOptions): Promise<SelectResourceConfigCommandOutput>;
            selectResourceConfig(args: SelectResourceConfigCommandInput, cb: (err: any, data?: SelectResourceConfigCommandOutput) => void): void;
            selectResourceConfig(args: SelectResourceConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SelectResourceConfigCommandOutput) => void): void;
            /**
                * <p>Runs an on-demand evaluation for the specified Config rules
                * 			against the last known configuration state of the resources. Use
                * 				<code>StartConfigRulesEvaluation</code> when you want to test
                * 			that a rule you updated is working as expected.
                * 				<code>StartConfigRulesEvaluation</code> does not re-record the
                * 			latest configuration state for your resources. It re-runs an
                * 			evaluation against the last known state of your resources. </p>
                * 		       <p>You can specify up to 25 Config rules per request. </p>
                *
                *
                * 		       <p>An existing <code>StartConfigRulesEvaluation</code> call for
                * 			the specified rules must complete before you can call the API again.
                * 			If you chose to have Config stream to an Amazon SNS topic, you
                * 			will receive a <code>ConfigRuleEvaluationStarted</code> notification
                * 			when the evaluation starts.</p>
                * 		       <note>
                * 			         <p>You don't need to call the
                * 					<code>StartConfigRulesEvaluation</code> API to run an
                * 				evaluation for a new rule. When you create a rule, Config
                * 				evaluates your resources against the rule automatically.
                * 			</p>
                * 		       </note>
                * 		       <p>The <code>StartConfigRulesEvaluation</code> API is useful if
                * 			you want to run on-demand evaluations, such as the following
                * 			example:</p>
                * 		       <ol>
                *             <li>
                * 				           <p>You have a custom rule that evaluates your IAM
                * 					resources every 24 hours.</p>
                * 			         </li>
                *             <li>
                * 				           <p>You update your Lambda function to add additional
                * 					conditions to your rule.</p>
                * 			         </li>
                *             <li>
                * 				           <p>Instead of waiting for the next periodic evaluation,
                * 					you call the <code>StartConfigRulesEvaluation</code>
                * 					API.</p>
                * 			         </li>
                *             <li>
                * 				           <p>Config invokes your Lambda function and evaluates
                * 					your IAM resources.</p>
                * 			         </li>
                *             <li>
                * 				           <p>Your custom rule will still run periodic evaluations
                * 					every 24 hours.</p>
                * 			         </li>
                *          </ol>
                */
            startConfigRulesEvaluation(args: StartConfigRulesEvaluationCommandInput, options?: __HttpHandlerOptions): Promise<StartConfigRulesEvaluationCommandOutput>;
            startConfigRulesEvaluation(args: StartConfigRulesEvaluationCommandInput, cb: (err: any, data?: StartConfigRulesEvaluationCommandOutput) => void): void;
            startConfigRulesEvaluation(args: StartConfigRulesEvaluationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartConfigRulesEvaluationCommandOutput) => void): void;
            /**
                * <p>Starts recording configurations of the Amazon Web Services resources you have
                * 			selected to record in your Amazon Web Services account.</p>
                * 		       <p>You must have created at least one delivery channel to
                * 			successfully start the configuration recorder.</p>
                */
            startConfigurationRecorder(args: StartConfigurationRecorderCommandInput, options?: __HttpHandlerOptions): Promise<StartConfigurationRecorderCommandOutput>;
            startConfigurationRecorder(args: StartConfigurationRecorderCommandInput, cb: (err: any, data?: StartConfigurationRecorderCommandOutput) => void): void;
            startConfigurationRecorder(args: StartConfigurationRecorderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartConfigurationRecorderCommandOutput) => void): void;
            /**
                * <p>Runs an on-demand remediation for the specified Config rules against the last known remediation configuration. It runs an execution against the current state of your resources. Remediation execution is asynchronous.</p>
                * 			      <p>You can specify up to 100 resource keys per request. An existing StartRemediationExecution call for the specified resource keys must complete before you can call the API again.</p>
                */
            startRemediationExecution(args: StartRemediationExecutionCommandInput, options?: __HttpHandlerOptions): Promise<StartRemediationExecutionCommandOutput>;
            startRemediationExecution(args: StartRemediationExecutionCommandInput, cb: (err: any, data?: StartRemediationExecutionCommandOutput) => void): void;
            startRemediationExecution(args: StartRemediationExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartRemediationExecutionCommandOutput) => void): void;
            /**
                * <p>Stops recording configurations of the Amazon Web Services resources you have selected to record in your Amazon Web Services account.</p>
                */
            stopConfigurationRecorder(args: StopConfigurationRecorderCommandInput, options?: __HttpHandlerOptions): Promise<StopConfigurationRecorderCommandOutput>;
            stopConfigurationRecorder(args: StopConfigurationRecorderCommandInput, cb: (err: any, data?: StopConfigurationRecorderCommandOutput) => void): void;
            stopConfigurationRecorder(args: StopConfigurationRecorderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopConfigurationRecorderCommandOutput) => void): void;
            /**
                * <p>Associates the specified tags to a resource with the specified resourceArn. If existing tags on a resource are not specified in the request parameters, they are not changed.
                * 			When a resource is deleted, the tags associated with that resource are deleted as well.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Deletes specified tags from a resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/BatchGetAggregateResourceConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { BatchGetAggregateResourceConfigRequest, BatchGetAggregateResourceConfigResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface BatchGetAggregateResourceConfigCommandInput extends BatchGetAggregateResourceConfigRequest {
    }
    export interface BatchGetAggregateResourceConfigCommandOutput extends BatchGetAggregateResourceConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the current configuration items for resources that are present in your Config aggregator. The operation also returns a list of resources that are not processed in the current request.
        * 			If there are no unprocessed resources, the operation returns an empty <code>unprocessedResourceIdentifiers</code> list. </p>
        *
        * 		       <note>
        *             <ul>
        *                <li>
        *                   <p>The API does not return results for deleted resources.</p>
        *                </li>
        *                <li>
        *                   <p> The API does not return tags and relationships.</p>
        *                </li>
        *             </ul>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, BatchGetAggregateResourceConfigCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, BatchGetAggregateResourceConfigCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new BatchGetAggregateResourceConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchGetAggregateResourceConfigCommandInput} for command's `input` shape.
        * @see {@link BatchGetAggregateResourceConfigCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class BatchGetAggregateResourceConfigCommand extends $Command<BatchGetAggregateResourceConfigCommandInput, BatchGetAggregateResourceConfigCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: BatchGetAggregateResourceConfigCommandInput;
            constructor(input: BatchGetAggregateResourceConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetAggregateResourceConfigCommandInput, BatchGetAggregateResourceConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/BatchGetResourceConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { BatchGetResourceConfigRequest, BatchGetResourceConfigResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface BatchGetResourceConfigCommandInput extends BatchGetResourceConfigRequest {
    }
    export interface BatchGetResourceConfigCommandOutput extends BatchGetResourceConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the <code>BaseConfigurationItem</code> for one or more requested resources.
        * 			The operation also returns a list of resources that are
        * 			not processed in the current request. If there are no unprocessed
        * 			resources, the operation returns an empty unprocessedResourceKeys
        * 			list. </p>
        * 		       <note>
        * 			         <ul>
        *                <li>
        * 					             <p>The API does not return results for deleted
        * 						resources.</p>
        * 				           </li>
        *                <li>
        * 					             <p> The API does not return any tags for the requested
        * 						resources. This information is filtered out of the
        * 						supplementaryConfiguration section of the API
        * 						response.</p>
        * 				           </li>
        *             </ul>
        * 		       </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, BatchGetResourceConfigCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, BatchGetResourceConfigCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new BatchGetResourceConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchGetResourceConfigCommandInput} for command's `input` shape.
        * @see {@link BatchGetResourceConfigCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class BatchGetResourceConfigCommand extends $Command<BatchGetResourceConfigCommandInput, BatchGetResourceConfigCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: BatchGetResourceConfigCommandInput;
            constructor(input: BatchGetResourceConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetResourceConfigCommandInput, BatchGetResourceConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteAggregationAuthorizationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DeleteAggregationAuthorizationRequest } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DeleteAggregationAuthorizationCommandInput extends DeleteAggregationAuthorizationRequest {
    }
    export interface DeleteAggregationAuthorizationCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the authorization granted to the specified
        * 			configuration aggregator account in a specified region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DeleteAggregationAuthorizationCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DeleteAggregationAuthorizationCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DeleteAggregationAuthorizationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAggregationAuthorizationCommandInput} for command's `input` shape.
        * @see {@link DeleteAggregationAuthorizationCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DeleteAggregationAuthorizationCommand extends $Command<DeleteAggregationAuthorizationCommandInput, DeleteAggregationAuthorizationCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DeleteAggregationAuthorizationCommandInput;
            constructor(input: DeleteAggregationAuthorizationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAggregationAuthorizationCommandInput, DeleteAggregationAuthorizationCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteConfigRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DeleteConfigRuleRequest } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DeleteConfigRuleCommandInput extends DeleteConfigRuleRequest {
    }
    export interface DeleteConfigRuleCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified Config rule and all of its evaluation
        * 			results.</p>
        * 		       <p>Config sets the state of a rule to <code>DELETING</code>
        * 			until the deletion is complete. You cannot update a rule while it is
        * 			in this state. If you make a <code>PutConfigRule</code> or
        * 				<code>DeleteConfigRule</code> request for the rule, you will
        * 			receive a <code>ResourceInUseException</code>.</p>
        * 		       <p>You can check the state of a rule by using the
        * 				<code>DescribeConfigRules</code> request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DeleteConfigRuleCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DeleteConfigRuleCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DeleteConfigRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConfigRuleCommandInput} for command's `input` shape.
        * @see {@link DeleteConfigRuleCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DeleteConfigRuleCommand extends $Command<DeleteConfigRuleCommandInput, DeleteConfigRuleCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DeleteConfigRuleCommandInput;
            constructor(input: DeleteConfigRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConfigRuleCommandInput, DeleteConfigRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteConfigurationAggregatorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DeleteConfigurationAggregatorRequest } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DeleteConfigurationAggregatorCommandInput extends DeleteConfigurationAggregatorRequest {
    }
    export interface DeleteConfigurationAggregatorCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified configuration aggregator and the
        * 			aggregated data associated with the aggregator.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DeleteConfigurationAggregatorCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DeleteConfigurationAggregatorCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DeleteConfigurationAggregatorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConfigurationAggregatorCommandInput} for command's `input` shape.
        * @see {@link DeleteConfigurationAggregatorCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DeleteConfigurationAggregatorCommand extends $Command<DeleteConfigurationAggregatorCommandInput, DeleteConfigurationAggregatorCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DeleteConfigurationAggregatorCommandInput;
            constructor(input: DeleteConfigurationAggregatorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConfigurationAggregatorCommandInput, DeleteConfigurationAggregatorCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteConfigurationRecorderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DeleteConfigurationRecorderRequest } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DeleteConfigurationRecorderCommandInput extends DeleteConfigurationRecorderRequest {
    }
    export interface DeleteConfigurationRecorderCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the configuration recorder.</p>
        * 		       <p>After the configuration recorder is deleted, Config will
        * 			not record resource configuration changes until you create a new
        * 			configuration recorder.</p>
        * 		       <p>This action does not delete the configuration information that
        * 			was previously recorded. You will be able to access the previously
        * 			recorded information by using the
        * 				<code>GetResourceConfigHistory</code> action, but you will not
        * 			be able to access this information in the Config console until
        * 			you create a new configuration recorder.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DeleteConfigurationRecorderCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DeleteConfigurationRecorderCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DeleteConfigurationRecorderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConfigurationRecorderCommandInput} for command's `input` shape.
        * @see {@link DeleteConfigurationRecorderCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DeleteConfigurationRecorderCommand extends $Command<DeleteConfigurationRecorderCommandInput, DeleteConfigurationRecorderCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DeleteConfigurationRecorderCommandInput;
            constructor(input: DeleteConfigurationRecorderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConfigurationRecorderCommandInput, DeleteConfigurationRecorderCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteConformancePackCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DeleteConformancePackRequest } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DeleteConformancePackCommandInput extends DeleteConformancePackRequest {
    }
    export interface DeleteConformancePackCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified conformance pack and all the Config rules, remediation actions, and all evaluation results within that
        * 			conformance pack.</p>
        * 		       <p>Config sets the conformance pack to <code>DELETE_IN_PROGRESS</code> until the deletion is complete.
        * 			You cannot update a conformance pack while it is in this state.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DeleteConformancePackCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DeleteConformancePackCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DeleteConformancePackCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConformancePackCommandInput} for command's `input` shape.
        * @see {@link DeleteConformancePackCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DeleteConformancePackCommand extends $Command<DeleteConformancePackCommandInput, DeleteConformancePackCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DeleteConformancePackCommandInput;
            constructor(input: DeleteConformancePackCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConformancePackCommandInput, DeleteConformancePackCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteDeliveryChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DeleteDeliveryChannelRequest } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DeleteDeliveryChannelCommandInput extends DeleteDeliveryChannelRequest {
    }
    export interface DeleteDeliveryChannelCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the delivery channel.</p>
        * 		       <p>Before you can delete the delivery channel, you must stop the
        * 			configuration recorder by using the <a>StopConfigurationRecorder</a> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DeleteDeliveryChannelCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DeleteDeliveryChannelCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DeleteDeliveryChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDeliveryChannelCommandInput} for command's `input` shape.
        * @see {@link DeleteDeliveryChannelCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DeleteDeliveryChannelCommand extends $Command<DeleteDeliveryChannelCommandInput, DeleteDeliveryChannelCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DeleteDeliveryChannelCommandInput;
            constructor(input: DeleteDeliveryChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDeliveryChannelCommandInput, DeleteDeliveryChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteEvaluationResultsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DeleteEvaluationResultsRequest, DeleteEvaluationResultsResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DeleteEvaluationResultsCommandInput extends DeleteEvaluationResultsRequest {
    }
    export interface DeleteEvaluationResultsCommandOutput extends DeleteEvaluationResultsResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the evaluation results for the specified Config
        * 			rule. You can specify one Config rule per request. After you
        * 			delete the evaluation results, you can call the <a>StartConfigRulesEvaluation</a> API to start evaluating
        * 			your Amazon Web Services resources against the rule.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DeleteEvaluationResultsCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DeleteEvaluationResultsCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DeleteEvaluationResultsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEvaluationResultsCommandInput} for command's `input` shape.
        * @see {@link DeleteEvaluationResultsCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DeleteEvaluationResultsCommand extends $Command<DeleteEvaluationResultsCommandInput, DeleteEvaluationResultsCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DeleteEvaluationResultsCommandInput;
            constructor(input: DeleteEvaluationResultsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEvaluationResultsCommandInput, DeleteEvaluationResultsCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteOrganizationConfigRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DeleteOrganizationConfigRuleRequest } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DeleteOrganizationConfigRuleCommandInput extends DeleteOrganizationConfigRuleRequest {
    }
    export interface DeleteOrganizationConfigRuleCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified organization Config rule and all of its evaluation results from all member accounts in that organization. </p>
        * 	        <p>Only a master account and a delegated administrator account can delete an organization Config rule.
        * 		When calling this API with a delegated administrator, you must ensure Organizations
        * 			<code>ListDelegatedAdministrator</code> permissions are added.</p>
        * 		       <p>Config sets the state of a rule to DELETE_IN_PROGRESS until the deletion is complete.
        * 			You cannot update a rule while it is in this state.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DeleteOrganizationConfigRuleCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DeleteOrganizationConfigRuleCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DeleteOrganizationConfigRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteOrganizationConfigRuleCommandInput} for command's `input` shape.
        * @see {@link DeleteOrganizationConfigRuleCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DeleteOrganizationConfigRuleCommand extends $Command<DeleteOrganizationConfigRuleCommandInput, DeleteOrganizationConfigRuleCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DeleteOrganizationConfigRuleCommandInput;
            constructor(input: DeleteOrganizationConfigRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteOrganizationConfigRuleCommandInput, DeleteOrganizationConfigRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteOrganizationConformancePackCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DeleteOrganizationConformancePackRequest } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DeleteOrganizationConformancePackCommandInput extends DeleteOrganizationConformancePackRequest {
    }
    export interface DeleteOrganizationConformancePackCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified organization conformance pack and all of the Config rules and remediation actions from
        * 			all member accounts in that organization. </p>
        *          <p> Only a master account or a delegated administrator account can delete an organization conformance pack.
        * 	When calling this API with a delegated administrator, you must ensure Organizations
        * 		<code>ListDelegatedAdministrator</code> permissions are added.</p>
        * 			      <p>Config sets the state of a conformance pack to DELETE_IN_PROGRESS until the deletion is complete.
        * 				You cannot update a conformance pack while it is in this state. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DeleteOrganizationConformancePackCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DeleteOrganizationConformancePackCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DeleteOrganizationConformancePackCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteOrganizationConformancePackCommandInput} for command's `input` shape.
        * @see {@link DeleteOrganizationConformancePackCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DeleteOrganizationConformancePackCommand extends $Command<DeleteOrganizationConformancePackCommandInput, DeleteOrganizationConformancePackCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DeleteOrganizationConformancePackCommandInput;
            constructor(input: DeleteOrganizationConformancePackCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteOrganizationConformancePackCommandInput, DeleteOrganizationConformancePackCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeletePendingAggregationRequestCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DeletePendingAggregationRequestRequest } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DeletePendingAggregationRequestCommandInput extends DeletePendingAggregationRequestRequest {
    }
    export interface DeletePendingAggregationRequestCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes pending authorization requests for a specified
        * 			aggregator account in a specified region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DeletePendingAggregationRequestCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DeletePendingAggregationRequestCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DeletePendingAggregationRequestCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePendingAggregationRequestCommandInput} for command's `input` shape.
        * @see {@link DeletePendingAggregationRequestCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DeletePendingAggregationRequestCommand extends $Command<DeletePendingAggregationRequestCommandInput, DeletePendingAggregationRequestCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DeletePendingAggregationRequestCommandInput;
            constructor(input: DeletePendingAggregationRequestCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePendingAggregationRequestCommandInput, DeletePendingAggregationRequestCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteRemediationConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DeleteRemediationConfigurationRequest, DeleteRemediationConfigurationResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DeleteRemediationConfigurationCommandInput extends DeleteRemediationConfigurationRequest {
    }
    export interface DeleteRemediationConfigurationCommandOutput extends DeleteRemediationConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the remediation configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DeleteRemediationConfigurationCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DeleteRemediationConfigurationCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DeleteRemediationConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRemediationConfigurationCommandInput} for command's `input` shape.
        * @see {@link DeleteRemediationConfigurationCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DeleteRemediationConfigurationCommand extends $Command<DeleteRemediationConfigurationCommandInput, DeleteRemediationConfigurationCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DeleteRemediationConfigurationCommandInput;
            constructor(input: DeleteRemediationConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRemediationConfigurationCommandInput, DeleteRemediationConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteRemediationExceptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DeleteRemediationExceptionsRequest, DeleteRemediationExceptionsResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DeleteRemediationExceptionsCommandInput extends DeleteRemediationExceptionsRequest {
    }
    export interface DeleteRemediationExceptionsCommandOutput extends DeleteRemediationExceptionsResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes one or more remediation exceptions mentioned in the resource keys.</p>
        * 		       <note>
        *             <p>Config generates a remediation exception when a problem occurs executing a remediation action to a specific resource.
        * 			Remediation exceptions blocks auto-remediation until the exception is cleared.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DeleteRemediationExceptionsCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DeleteRemediationExceptionsCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DeleteRemediationExceptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRemediationExceptionsCommandInput} for command's `input` shape.
        * @see {@link DeleteRemediationExceptionsCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DeleteRemediationExceptionsCommand extends $Command<DeleteRemediationExceptionsCommandInput, DeleteRemediationExceptionsCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DeleteRemediationExceptionsCommandInput;
            constructor(input: DeleteRemediationExceptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRemediationExceptionsCommandInput, DeleteRemediationExceptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteResourceConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DeleteResourceConfigRequest } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DeleteResourceConfigCommandInput extends DeleteResourceConfigRequest {
    }
    export interface DeleteResourceConfigCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Records the configuration state for a custom resource that has been deleted.  This API records a new ConfigurationItem with a ResourceDeleted status. You can retrieve the ConfigurationItems recorded for this resource in your Config History.
        * 			 </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DeleteResourceConfigCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DeleteResourceConfigCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DeleteResourceConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteResourceConfigCommandInput} for command's `input` shape.
        * @see {@link DeleteResourceConfigCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DeleteResourceConfigCommand extends $Command<DeleteResourceConfigCommandInput, DeleteResourceConfigCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DeleteResourceConfigCommandInput;
            constructor(input: DeleteResourceConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteResourceConfigCommandInput, DeleteResourceConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteRetentionConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DeleteRetentionConfigurationRequest } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DeleteRetentionConfigurationCommandInput extends DeleteRetentionConfigurationRequest {
    }
    export interface DeleteRetentionConfigurationCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the retention configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DeleteRetentionConfigurationCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DeleteRetentionConfigurationCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DeleteRetentionConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRetentionConfigurationCommandInput} for command's `input` shape.
        * @see {@link DeleteRetentionConfigurationCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DeleteRetentionConfigurationCommand extends $Command<DeleteRetentionConfigurationCommandInput, DeleteRetentionConfigurationCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DeleteRetentionConfigurationCommandInput;
            constructor(input: DeleteRetentionConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRetentionConfigurationCommandInput, DeleteRetentionConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteStoredQueryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DeleteStoredQueryRequest, DeleteStoredQueryResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DeleteStoredQueryCommandInput extends DeleteStoredQueryRequest {
    }
    export interface DeleteStoredQueryCommandOutput extends DeleteStoredQueryResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the stored query for a single Amazon Web Services account and a single Amazon Web Services Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DeleteStoredQueryCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DeleteStoredQueryCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DeleteStoredQueryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteStoredQueryCommandInput} for command's `input` shape.
        * @see {@link DeleteStoredQueryCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DeleteStoredQueryCommand extends $Command<DeleteStoredQueryCommandInput, DeleteStoredQueryCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DeleteStoredQueryCommandInput;
            constructor(input: DeleteStoredQueryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteStoredQueryCommandInput, DeleteStoredQueryCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeliverConfigSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DeliverConfigSnapshotRequest, DeliverConfigSnapshotResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DeliverConfigSnapshotCommandInput extends DeliverConfigSnapshotRequest {
    }
    export interface DeliverConfigSnapshotCommandOutput extends DeliverConfigSnapshotResponse, __MetadataBearer {
    }
    /**
        * <p>Schedules delivery of a configuration snapshot to the Amazon S3
        * 			bucket in the specified delivery channel. After the delivery has
        * 			started, Config sends the following notifications using an
        * 			Amazon SNS topic that you have specified.</p>
        * 		       <ul>
        *             <li>
        * 				           <p>Notification of the start of the delivery.</p>
        * 			         </li>
        *             <li>
        * 				           <p>Notification of the completion of the delivery, if the
        * 					delivery was successfully completed.</p>
        * 			         </li>
        *             <li>
        * 				           <p>Notification of delivery failure, if the delivery
        * 					failed.</p>
        * 			         </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DeliverConfigSnapshotCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DeliverConfigSnapshotCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DeliverConfigSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeliverConfigSnapshotCommandInput} for command's `input` shape.
        * @see {@link DeliverConfigSnapshotCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DeliverConfigSnapshotCommand extends $Command<DeliverConfigSnapshotCommandInput, DeliverConfigSnapshotCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DeliverConfigSnapshotCommandInput;
            constructor(input: DeliverConfigSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeliverConfigSnapshotCommandInput, DeliverConfigSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeAggregateComplianceByConfigRulesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeAggregateComplianceByConfigRulesRequest, DescribeAggregateComplianceByConfigRulesResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeAggregateComplianceByConfigRulesCommandInput extends DescribeAggregateComplianceByConfigRulesRequest {
    }
    export interface DescribeAggregateComplianceByConfigRulesCommandOutput extends DescribeAggregateComplianceByConfigRulesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of compliant and noncompliant rules with the
        * 			number of resources for compliant and noncompliant rules. Does not display rules that do not have compliance results.
        * 			</p>
        * 		       <note>
        * 			         <p>The results can return an empty result page, but if you
        * 				have a <code>nextToken</code>, the results are displayed on the next
        * 				page.</p>
        * 		       </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeAggregateComplianceByConfigRulesCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeAggregateComplianceByConfigRulesCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeAggregateComplianceByConfigRulesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAggregateComplianceByConfigRulesCommandInput} for command's `input` shape.
        * @see {@link DescribeAggregateComplianceByConfigRulesCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeAggregateComplianceByConfigRulesCommand extends $Command<DescribeAggregateComplianceByConfigRulesCommandInput, DescribeAggregateComplianceByConfigRulesCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeAggregateComplianceByConfigRulesCommandInput;
            constructor(input: DescribeAggregateComplianceByConfigRulesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAggregateComplianceByConfigRulesCommandInput, DescribeAggregateComplianceByConfigRulesCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeAggregateComplianceByConformancePacksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeAggregateComplianceByConformancePacksRequest, DescribeAggregateComplianceByConformancePacksResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeAggregateComplianceByConformancePacksCommandInput extends DescribeAggregateComplianceByConformancePacksRequest {
    }
    export interface DescribeAggregateComplianceByConformancePacksCommandOutput extends DescribeAggregateComplianceByConformancePacksResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the conformance packs and their associated compliance status with the count of compliant and noncompliant Config rules within each conformance pack.
        * 			Also returns the total rule count which includes compliant rules, noncompliant rules, and rules that cannot be evaluated due to insufficient data.</p>
        * 		       <note>
        *             <p>The results can return an empty result page, but if you have a <code>nextToken</code>, the results are displayed on the next page.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeAggregateComplianceByConformancePacksCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeAggregateComplianceByConformancePacksCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeAggregateComplianceByConformancePacksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAggregateComplianceByConformancePacksCommandInput} for command's `input` shape.
        * @see {@link DescribeAggregateComplianceByConformancePacksCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeAggregateComplianceByConformancePacksCommand extends $Command<DescribeAggregateComplianceByConformancePacksCommandInput, DescribeAggregateComplianceByConformancePacksCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeAggregateComplianceByConformancePacksCommandInput;
            constructor(input: DescribeAggregateComplianceByConformancePacksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAggregateComplianceByConformancePacksCommandInput, DescribeAggregateComplianceByConformancePacksCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeAggregationAuthorizationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeAggregationAuthorizationsRequest, DescribeAggregationAuthorizationsResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeAggregationAuthorizationsCommandInput extends DescribeAggregationAuthorizationsRequest {
    }
    export interface DescribeAggregationAuthorizationsCommandOutput extends DescribeAggregationAuthorizationsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of authorizations granted to various aggregator
        * 			accounts and regions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeAggregationAuthorizationsCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeAggregationAuthorizationsCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeAggregationAuthorizationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAggregationAuthorizationsCommandInput} for command's `input` shape.
        * @see {@link DescribeAggregationAuthorizationsCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeAggregationAuthorizationsCommand extends $Command<DescribeAggregationAuthorizationsCommandInput, DescribeAggregationAuthorizationsCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeAggregationAuthorizationsCommandInput;
            constructor(input: DescribeAggregationAuthorizationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAggregationAuthorizationsCommandInput, DescribeAggregationAuthorizationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeComplianceByConfigRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeComplianceByConfigRuleRequest, DescribeComplianceByConfigRuleResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeComplianceByConfigRuleCommandInput extends DescribeComplianceByConfigRuleRequest {
    }
    export interface DescribeComplianceByConfigRuleCommandOutput extends DescribeComplianceByConfigRuleResponse, __MetadataBearer {
    }
    /**
        * <p>Indicates whether the specified Config rules are compliant.
        * 			If a rule is noncompliant, this action returns the number of Amazon Web Services
        * 			resources that do not comply with the rule.</p>
        * 		       <p>A rule is compliant if all of the evaluated resources comply
        * 			with it. It is noncompliant if any of these resources do not
        * 			comply.</p>
        * 		       <p>If Config has no current evaluation results for the rule,
        * 			it returns <code>INSUFFICIENT_DATA</code>. This result might
        * 			indicate one of the following conditions:</p>
        * 		       <ul>
        *             <li>
        * 				           <p>Config has never invoked an evaluation for the
        * 					rule. To check whether it has, use the
        * 						<code>DescribeConfigRuleEvaluationStatus</code> action
        * 					to get the <code>LastSuccessfulInvocationTime</code> and
        * 						<code>LastFailedInvocationTime</code>.</p>
        * 			         </li>
        *             <li>
        * 				           <p>The rule's Lambda function is failing to send
        * 					evaluation results to Config. Verify that the role you
        * 					assigned to your configuration recorder includes the
        * 						<code>config:PutEvaluations</code> permission. If the
        * 					rule is a custom rule, verify that the Lambda execution
        * 					role includes the <code>config:PutEvaluations</code>
        * 					permission.</p>
        * 			         </li>
        *             <li>
        * 				           <p>The rule's Lambda function has returned
        * 						<code>NOT_APPLICABLE</code> for all evaluation results.
        * 					This can occur if the resources were deleted or removed from
        * 					the rule's scope.</p>
        * 			         </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeComplianceByConfigRuleCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeComplianceByConfigRuleCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeComplianceByConfigRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeComplianceByConfigRuleCommandInput} for command's `input` shape.
        * @see {@link DescribeComplianceByConfigRuleCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeComplianceByConfigRuleCommand extends $Command<DescribeComplianceByConfigRuleCommandInput, DescribeComplianceByConfigRuleCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeComplianceByConfigRuleCommandInput;
            constructor(input: DescribeComplianceByConfigRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeComplianceByConfigRuleCommandInput, DescribeComplianceByConfigRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeComplianceByResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeComplianceByResourceRequest, DescribeComplianceByResourceResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeComplianceByResourceCommandInput extends DescribeComplianceByResourceRequest {
    }
    export interface DescribeComplianceByResourceCommandOutput extends DescribeComplianceByResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Indicates whether the specified Amazon Web Services resources are compliant. If
        * 			a resource is noncompliant, this action returns the number of Config rules that the resource does not comply with.</p>
        * 		       <p>A resource is compliant if it complies with all the Config
        * 			rules that evaluate it. It is noncompliant if it does not comply
        * 			with one or more of these rules.</p>
        * 		       <p>If Config has no current evaluation results for the
        * 			resource, it returns <code>INSUFFICIENT_DATA</code>. This result
        * 			might indicate one of the following conditions about the rules that
        * 			evaluate the resource:</p>
        * 		       <ul>
        *             <li>
        * 				           <p>Config has never invoked an evaluation for the
        * 					rule. To check whether it has, use the
        * 						<code>DescribeConfigRuleEvaluationStatus</code> action
        * 					to get the <code>LastSuccessfulInvocationTime</code> and
        * 						<code>LastFailedInvocationTime</code>.</p>
        * 			         </li>
        *             <li>
        * 				           <p>The rule's Lambda function is failing to send
        * 					evaluation results to Config. Verify that the role that
        * 					you assigned to your configuration recorder includes the
        * 						<code>config:PutEvaluations</code> permission. If the
        * 					rule is a custom rule, verify that the Lambda execution
        * 					role includes the <code>config:PutEvaluations</code>
        * 					permission.</p>
        * 			         </li>
        *             <li>
        * 				           <p>The rule's Lambda function has returned
        * 						<code>NOT_APPLICABLE</code> for all evaluation results.
        * 					This can occur if the resources were deleted or removed from
        * 					the rule's scope.</p>
        * 			         </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeComplianceByResourceCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeComplianceByResourceCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeComplianceByResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeComplianceByResourceCommandInput} for command's `input` shape.
        * @see {@link DescribeComplianceByResourceCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeComplianceByResourceCommand extends $Command<DescribeComplianceByResourceCommandInput, DescribeComplianceByResourceCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeComplianceByResourceCommandInput;
            constructor(input: DescribeComplianceByResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeComplianceByResourceCommandInput, DescribeComplianceByResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConfigRuleEvaluationStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeConfigRuleEvaluationStatusRequest, DescribeConfigRuleEvaluationStatusResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeConfigRuleEvaluationStatusCommandInput extends DescribeConfigRuleEvaluationStatusRequest {
    }
    export interface DescribeConfigRuleEvaluationStatusCommandOutput extends DescribeConfigRuleEvaluationStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Returns status information for each of your Config managed rules. The status includes information such as the last time Config invoked the rule, the last time Config failed to invoke
        * 			the rule, and the related error for the last failure.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeConfigRuleEvaluationStatusCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeConfigRuleEvaluationStatusCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeConfigRuleEvaluationStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeConfigRuleEvaluationStatusCommandInput} for command's `input` shape.
        * @see {@link DescribeConfigRuleEvaluationStatusCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeConfigRuleEvaluationStatusCommand extends $Command<DescribeConfigRuleEvaluationStatusCommandInput, DescribeConfigRuleEvaluationStatusCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeConfigRuleEvaluationStatusCommandInput;
            constructor(input: DescribeConfigRuleEvaluationStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConfigRuleEvaluationStatusCommandInput, DescribeConfigRuleEvaluationStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConfigRulesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeConfigRulesRequest, DescribeConfigRulesResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeConfigRulesCommandInput extends DescribeConfigRulesRequest {
    }
    export interface DescribeConfigRulesCommandOutput extends DescribeConfigRulesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns details about your Config rules.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeConfigRulesCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeConfigRulesCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeConfigRulesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeConfigRulesCommandInput} for command's `input` shape.
        * @see {@link DescribeConfigRulesCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeConfigRulesCommand extends $Command<DescribeConfigRulesCommandInput, DescribeConfigRulesCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeConfigRulesCommandInput;
            constructor(input: DescribeConfigRulesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConfigRulesCommandInput, DescribeConfigRulesCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConfigurationAggregatorsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeConfigurationAggregatorsRequest, DescribeConfigurationAggregatorsResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeConfigurationAggregatorsCommandInput extends DescribeConfigurationAggregatorsRequest {
    }
    export interface DescribeConfigurationAggregatorsCommandOutput extends DescribeConfigurationAggregatorsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the details of one or more configuration aggregators.
        * 			If the configuration aggregator is not specified, this action
        * 			returns the details for all the configuration aggregators associated
        * 			with the account. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeConfigurationAggregatorsCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeConfigurationAggregatorsCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeConfigurationAggregatorsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeConfigurationAggregatorsCommandInput} for command's `input` shape.
        * @see {@link DescribeConfigurationAggregatorsCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeConfigurationAggregatorsCommand extends $Command<DescribeConfigurationAggregatorsCommandInput, DescribeConfigurationAggregatorsCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeConfigurationAggregatorsCommandInput;
            constructor(input: DescribeConfigurationAggregatorsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConfigurationAggregatorsCommandInput, DescribeConfigurationAggregatorsCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConfigurationAggregatorSourcesStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeConfigurationAggregatorSourcesStatusRequest, DescribeConfigurationAggregatorSourcesStatusResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeConfigurationAggregatorSourcesStatusCommandInput extends DescribeConfigurationAggregatorSourcesStatusRequest {
    }
    export interface DescribeConfigurationAggregatorSourcesStatusCommandOutput extends DescribeConfigurationAggregatorSourcesStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Returns status information for sources within an aggregator.
        * 			The status includes information about the last time Config verified authorization between the source account and an aggregator account. In case of a failure, the status contains the related error code or message. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeConfigurationAggregatorSourcesStatusCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeConfigurationAggregatorSourcesStatusCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeConfigurationAggregatorSourcesStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeConfigurationAggregatorSourcesStatusCommandInput} for command's `input` shape.
        * @see {@link DescribeConfigurationAggregatorSourcesStatusCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeConfigurationAggregatorSourcesStatusCommand extends $Command<DescribeConfigurationAggregatorSourcesStatusCommandInput, DescribeConfigurationAggregatorSourcesStatusCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeConfigurationAggregatorSourcesStatusCommandInput;
            constructor(input: DescribeConfigurationAggregatorSourcesStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConfigurationAggregatorSourcesStatusCommandInput, DescribeConfigurationAggregatorSourcesStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConfigurationRecordersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeConfigurationRecordersRequest, DescribeConfigurationRecordersResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeConfigurationRecordersCommandInput extends DescribeConfigurationRecordersRequest {
    }
    export interface DescribeConfigurationRecordersCommandOutput extends DescribeConfigurationRecordersResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the details for the specified configuration recorders.
        * 			If the configuration recorder is not specified, this action returns
        * 			the details for all configuration recorders associated with the
        * 			account.</p>
        * 		       <note>
        * 			         <p>Currently, you can specify only one configuration recorder
        * 				per region in your account.</p>
        * 		       </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeConfigurationRecordersCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeConfigurationRecordersCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeConfigurationRecordersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeConfigurationRecordersCommandInput} for command's `input` shape.
        * @see {@link DescribeConfigurationRecordersCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeConfigurationRecordersCommand extends $Command<DescribeConfigurationRecordersCommandInput, DescribeConfigurationRecordersCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeConfigurationRecordersCommandInput;
            constructor(input: DescribeConfigurationRecordersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConfigurationRecordersCommandInput, DescribeConfigurationRecordersCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConfigurationRecorderStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeConfigurationRecorderStatusRequest, DescribeConfigurationRecorderStatusResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeConfigurationRecorderStatusCommandInput extends DescribeConfigurationRecorderStatusRequest {
    }
    export interface DescribeConfigurationRecorderStatusCommandOutput extends DescribeConfigurationRecorderStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the current status of the specified configuration
        * 			recorder. If a configuration recorder is not specified, this action
        * 			returns the status of all configuration recorders associated with
        * 			the account.</p>
        * 		       <note>
        * 			         <p>Currently, you can specify only one configuration recorder
        * 				per region in your account.</p>
        * 		       </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeConfigurationRecorderStatusCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeConfigurationRecorderStatusCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeConfigurationRecorderStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeConfigurationRecorderStatusCommandInput} for command's `input` shape.
        * @see {@link DescribeConfigurationRecorderStatusCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeConfigurationRecorderStatusCommand extends $Command<DescribeConfigurationRecorderStatusCommandInput, DescribeConfigurationRecorderStatusCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeConfigurationRecorderStatusCommandInput;
            constructor(input: DescribeConfigurationRecorderStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConfigurationRecorderStatusCommandInput, DescribeConfigurationRecorderStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConformancePackComplianceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeConformancePackComplianceRequest, DescribeConformancePackComplianceResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeConformancePackComplianceCommandInput extends DescribeConformancePackComplianceRequest {
    }
    export interface DescribeConformancePackComplianceCommandOutput extends DescribeConformancePackComplianceResponse, __MetadataBearer {
    }
    /**
        * <p>Returns compliance details for each rule in that conformance pack.</p>
        * 		       <note>
        *             <p>You must provide exact rule names.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeConformancePackComplianceCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeConformancePackComplianceCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeConformancePackComplianceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeConformancePackComplianceCommandInput} for command's `input` shape.
        * @see {@link DescribeConformancePackComplianceCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeConformancePackComplianceCommand extends $Command<DescribeConformancePackComplianceCommandInput, DescribeConformancePackComplianceCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeConformancePackComplianceCommandInput;
            constructor(input: DescribeConformancePackComplianceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConformancePackComplianceCommandInput, DescribeConformancePackComplianceCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConformancePacksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeConformancePacksRequest, DescribeConformancePacksResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeConformancePacksCommandInput extends DescribeConformancePacksRequest {
    }
    export interface DescribeConformancePacksCommandOutput extends DescribeConformancePacksResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of one or more conformance packs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeConformancePacksCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeConformancePacksCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeConformancePacksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeConformancePacksCommandInput} for command's `input` shape.
        * @see {@link DescribeConformancePacksCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeConformancePacksCommand extends $Command<DescribeConformancePacksCommandInput, DescribeConformancePacksCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeConformancePacksCommandInput;
            constructor(input: DescribeConformancePacksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConformancePacksCommandInput, DescribeConformancePacksCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConformancePackStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeConformancePackStatusRequest, DescribeConformancePackStatusResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeConformancePackStatusCommandInput extends DescribeConformancePackStatusRequest {
    }
    export interface DescribeConformancePackStatusCommandOutput extends DescribeConformancePackStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Provides one or more conformance packs deployment status.</p>
        * 		       <note>
        *             <p>If there are no conformance packs then you will see an empty result.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeConformancePackStatusCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeConformancePackStatusCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeConformancePackStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeConformancePackStatusCommandInput} for command's `input` shape.
        * @see {@link DescribeConformancePackStatusCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeConformancePackStatusCommand extends $Command<DescribeConformancePackStatusCommandInput, DescribeConformancePackStatusCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeConformancePackStatusCommandInput;
            constructor(input: DescribeConformancePackStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConformancePackStatusCommandInput, DescribeConformancePackStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeDeliveryChannelsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeDeliveryChannelsRequest, DescribeDeliveryChannelsResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeDeliveryChannelsCommandInput extends DescribeDeliveryChannelsRequest {
    }
    export interface DescribeDeliveryChannelsCommandOutput extends DescribeDeliveryChannelsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns details about the specified delivery channel. If a
        * 			delivery channel is not specified, this action returns the details
        * 			of all delivery channels associated with the account.</p>
        * 		       <note>
        * 			         <p>Currently, you can specify only one delivery channel per
        * 				region in your account.</p>
        * 		       </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeDeliveryChannelsCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeDeliveryChannelsCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeDeliveryChannelsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDeliveryChannelsCommandInput} for command's `input` shape.
        * @see {@link DescribeDeliveryChannelsCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeDeliveryChannelsCommand extends $Command<DescribeDeliveryChannelsCommandInput, DescribeDeliveryChannelsCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeDeliveryChannelsCommandInput;
            constructor(input: DescribeDeliveryChannelsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDeliveryChannelsCommandInput, DescribeDeliveryChannelsCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeDeliveryChannelStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeDeliveryChannelStatusRequest, DescribeDeliveryChannelStatusResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeDeliveryChannelStatusCommandInput extends DescribeDeliveryChannelStatusRequest {
    }
    export interface DescribeDeliveryChannelStatusCommandOutput extends DescribeDeliveryChannelStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the current status of the specified delivery channel.
        * 			If a delivery channel is not specified, this action returns the
        * 			current status of all delivery channels associated with the
        * 			account.</p>
        * 		       <note>
        * 			         <p>Currently, you can specify only one delivery channel per
        * 				region in your account.</p>
        * 		       </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeDeliveryChannelStatusCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeDeliveryChannelStatusCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeDeliveryChannelStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDeliveryChannelStatusCommandInput} for command's `input` shape.
        * @see {@link DescribeDeliveryChannelStatusCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeDeliveryChannelStatusCommand extends $Command<DescribeDeliveryChannelStatusCommandInput, DescribeDeliveryChannelStatusCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeDeliveryChannelStatusCommandInput;
            constructor(input: DescribeDeliveryChannelStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDeliveryChannelStatusCommandInput, DescribeDeliveryChannelStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeOrganizationConfigRulesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeOrganizationConfigRulesRequest, DescribeOrganizationConfigRulesResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeOrganizationConfigRulesCommandInput extends DescribeOrganizationConfigRulesRequest {
    }
    export interface DescribeOrganizationConfigRulesCommandOutput extends DescribeOrganizationConfigRulesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of organization Config rules. </p>
        *
        * 		       <note>
        *             <p>When you specify the limit and the next token, you receive a paginated response.</p>
        * 			         <p>Limit and next token are not applicable if you specify organization Config rule names.
        * 			It is only applicable, when you request all the organization Config rules.</p>
        *
        * 			         <p>
        *                <i>For accounts within an organzation</i>
        *             </p>
        *
        * 			         <p>If you deploy an organizational rule or conformance pack in an organization
        * 				administrator account, and then establish a delegated administrator and deploy an
        * 				organizational rule or conformance pack in the delegated administrator account, you
        * 				won't be able to see the organizational rule or conformance pack in the organization
        * 				administrator account from the delegated administrator account or see the organizational
        * 				rule or conformance pack in the delegated administrator account from organization
        * 				administrator account. The <code>DescribeOrganizationConfigRules</code> and
        * 				<code>DescribeOrganizationConformancePacks</code> APIs can only see and interact with
        * 				the organization-related resource that were deployed from within the account calling
        * 				those APIs.</p>
        * 		       </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeOrganizationConfigRulesCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeOrganizationConfigRulesCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeOrganizationConfigRulesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeOrganizationConfigRulesCommandInput} for command's `input` shape.
        * @see {@link DescribeOrganizationConfigRulesCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeOrganizationConfigRulesCommand extends $Command<DescribeOrganizationConfigRulesCommandInput, DescribeOrganizationConfigRulesCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeOrganizationConfigRulesCommandInput;
            constructor(input: DescribeOrganizationConfigRulesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeOrganizationConfigRulesCommandInput, DescribeOrganizationConfigRulesCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeOrganizationConfigRuleStatusesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeOrganizationConfigRuleStatusesRequest, DescribeOrganizationConfigRuleStatusesResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeOrganizationConfigRuleStatusesCommandInput extends DescribeOrganizationConfigRuleStatusesRequest {
    }
    export interface DescribeOrganizationConfigRuleStatusesCommandOutput extends DescribeOrganizationConfigRuleStatusesResponse, __MetadataBearer {
    }
    /**
        * <p>Provides organization Config rule deployment status for an organization.</p>
        *
        * 		       <note>
        *             <p>The status is not considered successful until organization Config rule is successfully deployed in all the member
        * 			accounts with an exception of excluded accounts.</p>
        * 			         <p>When you specify the limit and the next token, you receive a paginated response.
        * 			Limit and next token are not applicable if you specify organization Config rule names.
        * 			It is only applicable, when you request all the organization Config rules.</p>
        * 			      </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeOrganizationConfigRuleStatusesCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeOrganizationConfigRuleStatusesCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeOrganizationConfigRuleStatusesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeOrganizationConfigRuleStatusesCommandInput} for command's `input` shape.
        * @see {@link DescribeOrganizationConfigRuleStatusesCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeOrganizationConfigRuleStatusesCommand extends $Command<DescribeOrganizationConfigRuleStatusesCommandInput, DescribeOrganizationConfigRuleStatusesCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeOrganizationConfigRuleStatusesCommandInput;
            constructor(input: DescribeOrganizationConfigRuleStatusesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeOrganizationConfigRuleStatusesCommandInput, DescribeOrganizationConfigRuleStatusesCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeOrganizationConformancePacksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeOrganizationConformancePacksRequest, DescribeOrganizationConformancePacksResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeOrganizationConformancePacksCommandInput extends DescribeOrganizationConformancePacksRequest {
    }
    export interface DescribeOrganizationConformancePacksCommandOutput extends DescribeOrganizationConformancePacksResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of organization conformance packs. </p>
        * 		       <note>
        *             <p>When you specify the limit and the next token, you receive a paginated response. </p>
        * 			         <p>Limit and next token are not applicable if you specify organization conformance packs names. They are only applicable,
        * 			when you request all the organization conformance packs. </p>
        *
        * 			         <p>
        *                <i>For accounts within an organzation</i>
        *             </p>
        *
        * 			         <p>If you deploy an organizational rule or conformance pack in an organization
        * 				administrator account, and then establish a delegated administrator and deploy an
        * 				organizational rule or conformance pack in the delegated administrator account, you
        * 				won't be able to see the organizational rule or conformance pack in the organization
        * 				administrator account from the delegated administrator account or see the organizational
        * 				rule or conformance pack in the delegated administrator account from organization
        * 				administrator account. The <code>DescribeOrganizationConfigRules</code> and
        * 				<code>DescribeOrganizationConformancePacks</code> APIs can only see and interact with
        * 				the organization-related resource that were deployed from within the account calling
        * 				those APIs.</p>
        * 		       </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeOrganizationConformancePacksCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeOrganizationConformancePacksCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeOrganizationConformancePacksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeOrganizationConformancePacksCommandInput} for command's `input` shape.
        * @see {@link DescribeOrganizationConformancePacksCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeOrganizationConformancePacksCommand extends $Command<DescribeOrganizationConformancePacksCommandInput, DescribeOrganizationConformancePacksCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeOrganizationConformancePacksCommandInput;
            constructor(input: DescribeOrganizationConformancePacksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeOrganizationConformancePacksCommandInput, DescribeOrganizationConformancePacksCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeOrganizationConformancePackStatusesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeOrganizationConformancePackStatusesRequest, DescribeOrganizationConformancePackStatusesResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeOrganizationConformancePackStatusesCommandInput extends DescribeOrganizationConformancePackStatusesRequest {
    }
    export interface DescribeOrganizationConformancePackStatusesCommandOutput extends DescribeOrganizationConformancePackStatusesResponse, __MetadataBearer {
    }
    /**
        * <p>Provides organization conformance pack deployment status for an organization. </p>
        * 		       <note>
        * 			         <p>The status is not considered successful until organization conformance pack is successfully
        * 				deployed in all the member accounts with an exception of excluded accounts.</p>
        * 			         <p>When you specify the limit and the next token, you receive a paginated response.
        * 				Limit and next token are not applicable if you specify organization conformance pack names.
        * 				They are only applicable, when you request all the organization conformance packs.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeOrganizationConformancePackStatusesCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeOrganizationConformancePackStatusesCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeOrganizationConformancePackStatusesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeOrganizationConformancePackStatusesCommandInput} for command's `input` shape.
        * @see {@link DescribeOrganizationConformancePackStatusesCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeOrganizationConformancePackStatusesCommand extends $Command<DescribeOrganizationConformancePackStatusesCommandInput, DescribeOrganizationConformancePackStatusesCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeOrganizationConformancePackStatusesCommandInput;
            constructor(input: DescribeOrganizationConformancePackStatusesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeOrganizationConformancePackStatusesCommandInput, DescribeOrganizationConformancePackStatusesCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribePendingAggregationRequestsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribePendingAggregationRequestsRequest, DescribePendingAggregationRequestsResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribePendingAggregationRequestsCommandInput extends DescribePendingAggregationRequestsRequest {
    }
    export interface DescribePendingAggregationRequestsCommandOutput extends DescribePendingAggregationRequestsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of all pending aggregation requests.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribePendingAggregationRequestsCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribePendingAggregationRequestsCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribePendingAggregationRequestsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePendingAggregationRequestsCommandInput} for command's `input` shape.
        * @see {@link DescribePendingAggregationRequestsCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribePendingAggregationRequestsCommand extends $Command<DescribePendingAggregationRequestsCommandInput, DescribePendingAggregationRequestsCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribePendingAggregationRequestsCommandInput;
            constructor(input: DescribePendingAggregationRequestsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePendingAggregationRequestsCommandInput, DescribePendingAggregationRequestsCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeRemediationConfigurationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeRemediationConfigurationsRequest, DescribeRemediationConfigurationsResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeRemediationConfigurationsCommandInput extends DescribeRemediationConfigurationsRequest {
    }
    export interface DescribeRemediationConfigurationsCommandOutput extends DescribeRemediationConfigurationsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the details of one or more remediation configurations.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeRemediationConfigurationsCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeRemediationConfigurationsCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeRemediationConfigurationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeRemediationConfigurationsCommandInput} for command's `input` shape.
        * @see {@link DescribeRemediationConfigurationsCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeRemediationConfigurationsCommand extends $Command<DescribeRemediationConfigurationsCommandInput, DescribeRemediationConfigurationsCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeRemediationConfigurationsCommandInput;
            constructor(input: DescribeRemediationConfigurationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeRemediationConfigurationsCommandInput, DescribeRemediationConfigurationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeRemediationExceptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeRemediationExceptionsRequest, DescribeRemediationExceptionsResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeRemediationExceptionsCommandInput extends DescribeRemediationExceptionsRequest {
    }
    export interface DescribeRemediationExceptionsCommandOutput extends DescribeRemediationExceptionsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the details of one or more remediation exceptions. A detailed view of a remediation exception for a set of resources that includes an explanation of an exception and the time when the exception will be deleted.
        * 			When you specify the limit and the next token, you receive a paginated response. </p>
        * 		       <note>
        *             <p>Config generates a remediation exception when a problem occurs executing a remediation action to a specific resource.
        * 				Remediation exceptions blocks auto-remediation until the exception is cleared.</p>
        * 			         <p>When you specify the limit and the next token, you receive a paginated response. </p>
        * 			         <p>Limit and next token are not applicable if you request resources in batch. It is only applicable, when you request all resources.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeRemediationExceptionsCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeRemediationExceptionsCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeRemediationExceptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeRemediationExceptionsCommandInput} for command's `input` shape.
        * @see {@link DescribeRemediationExceptionsCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeRemediationExceptionsCommand extends $Command<DescribeRemediationExceptionsCommandInput, DescribeRemediationExceptionsCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeRemediationExceptionsCommandInput;
            constructor(input: DescribeRemediationExceptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeRemediationExceptionsCommandInput, DescribeRemediationExceptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeRemediationExecutionStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeRemediationExecutionStatusRequest, DescribeRemediationExecutionStatusResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeRemediationExecutionStatusCommandInput extends DescribeRemediationExecutionStatusRequest {
    }
    export interface DescribeRemediationExecutionStatusCommandOutput extends DescribeRemediationExecutionStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a detailed view of a Remediation Execution for a set of resources including state, timestamps for when steps for the remediation execution occur, and any error messages for steps that have failed.
        * 			When you specify the limit and the next token, you receive a paginated response.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeRemediationExecutionStatusCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeRemediationExecutionStatusCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeRemediationExecutionStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeRemediationExecutionStatusCommandInput} for command's `input` shape.
        * @see {@link DescribeRemediationExecutionStatusCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeRemediationExecutionStatusCommand extends $Command<DescribeRemediationExecutionStatusCommandInput, DescribeRemediationExecutionStatusCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeRemediationExecutionStatusCommandInput;
            constructor(input: DescribeRemediationExecutionStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeRemediationExecutionStatusCommandInput, DescribeRemediationExecutionStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeRetentionConfigurationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { DescribeRetentionConfigurationsRequest, DescribeRetentionConfigurationsResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface DescribeRetentionConfigurationsCommandInput extends DescribeRetentionConfigurationsRequest {
    }
    export interface DescribeRetentionConfigurationsCommandOutput extends DescribeRetentionConfigurationsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the details of one or more retention configurations. If
        * 			the retention configuration name is not specified, this action
        * 			returns the details for all the retention configurations for that
        * 			account.</p>
        * 		       <note>
        * 			         <p>Currently, Config supports only one retention
        * 				configuration per region in your account.</p>
        * 		       </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, DescribeRetentionConfigurationsCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, DescribeRetentionConfigurationsCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new DescribeRetentionConfigurationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeRetentionConfigurationsCommandInput} for command's `input` shape.
        * @see {@link DescribeRetentionConfigurationsCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class DescribeRetentionConfigurationsCommand extends $Command<DescribeRetentionConfigurationsCommandInput, DescribeRetentionConfigurationsCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: DescribeRetentionConfigurationsCommandInput;
            constructor(input: DescribeRetentionConfigurationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeRetentionConfigurationsCommandInput, DescribeRetentionConfigurationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetAggregateComplianceDetailsByConfigRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { GetAggregateComplianceDetailsByConfigRuleRequest, GetAggregateComplianceDetailsByConfigRuleResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface GetAggregateComplianceDetailsByConfigRuleCommandInput extends GetAggregateComplianceDetailsByConfigRuleRequest {
    }
    export interface GetAggregateComplianceDetailsByConfigRuleCommandOutput extends GetAggregateComplianceDetailsByConfigRuleResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the evaluation results for the specified Config
        * 			rule for a specific resource in a rule. The results indicate which
        * 			Amazon Web Services resources were evaluated by the rule, when each resource was
        * 			last evaluated, and whether each resource complies with the rule. </p>
        * 		       <note>
        * 			         <p>The results can return an empty result page. But if you
        * 				have a <code>nextToken</code>, the results are displayed on the next
        * 				page.</p>
        * 		       </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, GetAggregateComplianceDetailsByConfigRuleCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, GetAggregateComplianceDetailsByConfigRuleCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new GetAggregateComplianceDetailsByConfigRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAggregateComplianceDetailsByConfigRuleCommandInput} for command's `input` shape.
        * @see {@link GetAggregateComplianceDetailsByConfigRuleCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class GetAggregateComplianceDetailsByConfigRuleCommand extends $Command<GetAggregateComplianceDetailsByConfigRuleCommandInput, GetAggregateComplianceDetailsByConfigRuleCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: GetAggregateComplianceDetailsByConfigRuleCommandInput;
            constructor(input: GetAggregateComplianceDetailsByConfigRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAggregateComplianceDetailsByConfigRuleCommandInput, GetAggregateComplianceDetailsByConfigRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetAggregateConfigRuleComplianceSummaryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { GetAggregateConfigRuleComplianceSummaryRequest, GetAggregateConfigRuleComplianceSummaryResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface GetAggregateConfigRuleComplianceSummaryCommandInput extends GetAggregateConfigRuleComplianceSummaryRequest {
    }
    export interface GetAggregateConfigRuleComplianceSummaryCommandOutput extends GetAggregateConfigRuleComplianceSummaryResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the number of compliant and noncompliant rules for one
        * 			or more accounts and regions in an aggregator.</p>
        * 		       <note>
        * 			         <p>The results can return an empty result page, but if you
        * 				have a nextToken, the results are displayed on the next
        * 				page.</p>
        * 		       </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, GetAggregateConfigRuleComplianceSummaryCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, GetAggregateConfigRuleComplianceSummaryCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new GetAggregateConfigRuleComplianceSummaryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAggregateConfigRuleComplianceSummaryCommandInput} for command's `input` shape.
        * @see {@link GetAggregateConfigRuleComplianceSummaryCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class GetAggregateConfigRuleComplianceSummaryCommand extends $Command<GetAggregateConfigRuleComplianceSummaryCommandInput, GetAggregateConfigRuleComplianceSummaryCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: GetAggregateConfigRuleComplianceSummaryCommandInput;
            constructor(input: GetAggregateConfigRuleComplianceSummaryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAggregateConfigRuleComplianceSummaryCommandInput, GetAggregateConfigRuleComplianceSummaryCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetAggregateConformancePackComplianceSummaryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { GetAggregateConformancePackComplianceSummaryRequest, GetAggregateConformancePackComplianceSummaryResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface GetAggregateConformancePackComplianceSummaryCommandInput extends GetAggregateConformancePackComplianceSummaryRequest {
    }
    export interface GetAggregateConformancePackComplianceSummaryCommandOutput extends GetAggregateConformancePackComplianceSummaryResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the count of compliant and noncompliant conformance packs across all Amazon Web Services accounts and Amazon Web Services Regions in an aggregator. You can filter based on Amazon Web Services account ID or Amazon Web Services Region.</p>
        * 		       <note>
        *             <p>The results can return an empty result page, but if you have a nextToken, the results are displayed on the next page.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, GetAggregateConformancePackComplianceSummaryCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, GetAggregateConformancePackComplianceSummaryCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new GetAggregateConformancePackComplianceSummaryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAggregateConformancePackComplianceSummaryCommandInput} for command's `input` shape.
        * @see {@link GetAggregateConformancePackComplianceSummaryCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class GetAggregateConformancePackComplianceSummaryCommand extends $Command<GetAggregateConformancePackComplianceSummaryCommandInput, GetAggregateConformancePackComplianceSummaryCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: GetAggregateConformancePackComplianceSummaryCommandInput;
            constructor(input: GetAggregateConformancePackComplianceSummaryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAggregateConformancePackComplianceSummaryCommandInput, GetAggregateConformancePackComplianceSummaryCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetAggregateDiscoveredResourceCountsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { GetAggregateDiscoveredResourceCountsRequest, GetAggregateDiscoveredResourceCountsResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface GetAggregateDiscoveredResourceCountsCommandInput extends GetAggregateDiscoveredResourceCountsRequest {
    }
    export interface GetAggregateDiscoveredResourceCountsCommandOutput extends GetAggregateDiscoveredResourceCountsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the resource counts across accounts and regions that are present in your Config aggregator. You can request the resource counts by providing filters and GroupByKey.</p>
        * 		       <p>For example, if the input contains accountID 12345678910 and region us-east-1 in filters, the API returns the count of resources in account ID 12345678910 and region us-east-1.
        * 			If the input contains ACCOUNT_ID as a GroupByKey, the API returns resource counts for all source accounts that are present in your aggregator.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, GetAggregateDiscoveredResourceCountsCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, GetAggregateDiscoveredResourceCountsCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new GetAggregateDiscoveredResourceCountsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAggregateDiscoveredResourceCountsCommandInput} for command's `input` shape.
        * @see {@link GetAggregateDiscoveredResourceCountsCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class GetAggregateDiscoveredResourceCountsCommand extends $Command<GetAggregateDiscoveredResourceCountsCommandInput, GetAggregateDiscoveredResourceCountsCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: GetAggregateDiscoveredResourceCountsCommandInput;
            constructor(input: GetAggregateDiscoveredResourceCountsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAggregateDiscoveredResourceCountsCommandInput, GetAggregateDiscoveredResourceCountsCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetAggregateResourceConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { GetAggregateResourceConfigRequest, GetAggregateResourceConfigResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface GetAggregateResourceConfigCommandInput extends GetAggregateResourceConfigRequest {
    }
    export interface GetAggregateResourceConfigCommandOutput extends GetAggregateResourceConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Returns configuration item that is aggregated for your specific resource in a specific source account and region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, GetAggregateResourceConfigCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, GetAggregateResourceConfigCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new GetAggregateResourceConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAggregateResourceConfigCommandInput} for command's `input` shape.
        * @see {@link GetAggregateResourceConfigCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class GetAggregateResourceConfigCommand extends $Command<GetAggregateResourceConfigCommandInput, GetAggregateResourceConfigCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: GetAggregateResourceConfigCommandInput;
            constructor(input: GetAggregateResourceConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAggregateResourceConfigCommandInput, GetAggregateResourceConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetComplianceDetailsByConfigRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { GetComplianceDetailsByConfigRuleRequest, GetComplianceDetailsByConfigRuleResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface GetComplianceDetailsByConfigRuleCommandInput extends GetComplianceDetailsByConfigRuleRequest {
    }
    export interface GetComplianceDetailsByConfigRuleCommandOutput extends GetComplianceDetailsByConfigRuleResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the evaluation results for the specified Config
        * 			rule. The results indicate which Amazon Web Services resources were evaluated by the
        * 			rule, when each resource was last evaluated, and whether each
        * 			resource complies with the rule.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, GetComplianceDetailsByConfigRuleCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, GetComplianceDetailsByConfigRuleCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new GetComplianceDetailsByConfigRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetComplianceDetailsByConfigRuleCommandInput} for command's `input` shape.
        * @see {@link GetComplianceDetailsByConfigRuleCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class GetComplianceDetailsByConfigRuleCommand extends $Command<GetComplianceDetailsByConfigRuleCommandInput, GetComplianceDetailsByConfigRuleCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: GetComplianceDetailsByConfigRuleCommandInput;
            constructor(input: GetComplianceDetailsByConfigRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetComplianceDetailsByConfigRuleCommandInput, GetComplianceDetailsByConfigRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetComplianceDetailsByResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { GetComplianceDetailsByResourceRequest, GetComplianceDetailsByResourceResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface GetComplianceDetailsByResourceCommandInput extends GetComplianceDetailsByResourceRequest {
    }
    export interface GetComplianceDetailsByResourceCommandOutput extends GetComplianceDetailsByResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the evaluation results for the specified Amazon Web Services resource.
        * 			The results indicate which Config rules were used to evaluate
        * 			the resource, when each rule was last used, and whether the resource
        * 			complies with each rule.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, GetComplianceDetailsByResourceCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, GetComplianceDetailsByResourceCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new GetComplianceDetailsByResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetComplianceDetailsByResourceCommandInput} for command's `input` shape.
        * @see {@link GetComplianceDetailsByResourceCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class GetComplianceDetailsByResourceCommand extends $Command<GetComplianceDetailsByResourceCommandInput, GetComplianceDetailsByResourceCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: GetComplianceDetailsByResourceCommandInput;
            constructor(input: GetComplianceDetailsByResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetComplianceDetailsByResourceCommandInput, GetComplianceDetailsByResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetComplianceSummaryByConfigRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { GetComplianceSummaryByConfigRuleResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface GetComplianceSummaryByConfigRuleCommandInput {
    }
    export interface GetComplianceSummaryByConfigRuleCommandOutput extends GetComplianceSummaryByConfigRuleResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the number of Config rules that are compliant and
        * 			noncompliant, up to a maximum of 25 for each.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, GetComplianceSummaryByConfigRuleCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, GetComplianceSummaryByConfigRuleCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new GetComplianceSummaryByConfigRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetComplianceSummaryByConfigRuleCommandInput} for command's `input` shape.
        * @see {@link GetComplianceSummaryByConfigRuleCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class GetComplianceSummaryByConfigRuleCommand extends $Command<GetComplianceSummaryByConfigRuleCommandInput, GetComplianceSummaryByConfigRuleCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: GetComplianceSummaryByConfigRuleCommandInput;
            constructor(input: GetComplianceSummaryByConfigRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetComplianceSummaryByConfigRuleCommandInput, GetComplianceSummaryByConfigRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetComplianceSummaryByResourceTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { GetComplianceSummaryByResourceTypeRequest, GetComplianceSummaryByResourceTypeResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface GetComplianceSummaryByResourceTypeCommandInput extends GetComplianceSummaryByResourceTypeRequest {
    }
    export interface GetComplianceSummaryByResourceTypeCommandOutput extends GetComplianceSummaryByResourceTypeResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the number of resources that are compliant and the
        * 			number that are noncompliant. You can specify one or more resource
        * 			types to get these numbers for each resource type. The maximum
        * 			number returned is 100.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, GetComplianceSummaryByResourceTypeCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, GetComplianceSummaryByResourceTypeCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new GetComplianceSummaryByResourceTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetComplianceSummaryByResourceTypeCommandInput} for command's `input` shape.
        * @see {@link GetComplianceSummaryByResourceTypeCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class GetComplianceSummaryByResourceTypeCommand extends $Command<GetComplianceSummaryByResourceTypeCommandInput, GetComplianceSummaryByResourceTypeCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: GetComplianceSummaryByResourceTypeCommandInput;
            constructor(input: GetComplianceSummaryByResourceTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetComplianceSummaryByResourceTypeCommandInput, GetComplianceSummaryByResourceTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetConformancePackComplianceDetailsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { GetConformancePackComplianceDetailsRequest, GetConformancePackComplianceDetailsResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface GetConformancePackComplianceDetailsCommandInput extends GetConformancePackComplianceDetailsRequest {
    }
    export interface GetConformancePackComplianceDetailsCommandOutput extends GetConformancePackComplianceDetailsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns compliance details of a conformance pack for all Amazon Web Services resources that are monitered by conformance pack.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, GetConformancePackComplianceDetailsCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, GetConformancePackComplianceDetailsCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new GetConformancePackComplianceDetailsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetConformancePackComplianceDetailsCommandInput} for command's `input` shape.
        * @see {@link GetConformancePackComplianceDetailsCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class GetConformancePackComplianceDetailsCommand extends $Command<GetConformancePackComplianceDetailsCommandInput, GetConformancePackComplianceDetailsCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: GetConformancePackComplianceDetailsCommandInput;
            constructor(input: GetConformancePackComplianceDetailsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetConformancePackComplianceDetailsCommandInput, GetConformancePackComplianceDetailsCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetConformancePackComplianceSummaryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { GetConformancePackComplianceSummaryRequest, GetConformancePackComplianceSummaryResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface GetConformancePackComplianceSummaryCommandInput extends GetConformancePackComplianceSummaryRequest {
    }
    export interface GetConformancePackComplianceSummaryCommandOutput extends GetConformancePackComplianceSummaryResponse, __MetadataBearer {
    }
    /**
        * <p>Returns compliance details for the conformance pack based on the cumulative compliance results of all the rules in that conformance pack.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, GetConformancePackComplianceSummaryCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, GetConformancePackComplianceSummaryCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new GetConformancePackComplianceSummaryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetConformancePackComplianceSummaryCommandInput} for command's `input` shape.
        * @see {@link GetConformancePackComplianceSummaryCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class GetConformancePackComplianceSummaryCommand extends $Command<GetConformancePackComplianceSummaryCommandInput, GetConformancePackComplianceSummaryCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: GetConformancePackComplianceSummaryCommandInput;
            constructor(input: GetConformancePackComplianceSummaryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetConformancePackComplianceSummaryCommandInput, GetConformancePackComplianceSummaryCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetCustomRulePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { GetCustomRulePolicyRequest, GetCustomRulePolicyResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface GetCustomRulePolicyCommandInput extends GetCustomRulePolicyRequest {
    }
    export interface GetCustomRulePolicyCommandOutput extends GetCustomRulePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the policy definition containing the logic for your Config Custom Policy rule.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, GetCustomRulePolicyCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, GetCustomRulePolicyCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new GetCustomRulePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCustomRulePolicyCommandInput} for command's `input` shape.
        * @see {@link GetCustomRulePolicyCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class GetCustomRulePolicyCommand extends $Command<GetCustomRulePolicyCommandInput, GetCustomRulePolicyCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: GetCustomRulePolicyCommandInput;
            constructor(input: GetCustomRulePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCustomRulePolicyCommandInput, GetCustomRulePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetDiscoveredResourceCountsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { GetDiscoveredResourceCountsRequest, GetDiscoveredResourceCountsResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface GetDiscoveredResourceCountsCommandInput extends GetDiscoveredResourceCountsRequest {
    }
    export interface GetDiscoveredResourceCountsCommandOutput extends GetDiscoveredResourceCountsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the resource types, the number of each resource type,
        * 			and the total number of resources that Config is recording in
        * 			this region for your Amazon Web Services account. </p>
        * 		       <p class="title">
        *             <b>Example</b>
        *          </p>
        *          <ol>
        *             <li>
        * 				           <p>Config is recording three resource types in the US
        * 					East (Ohio) Region for your account: 25 EC2 instances, 20
        * 					IAM users, and 15 S3 buckets.</p>
        * 			         </li>
        *             <li>
        * 				           <p>You make a call to the
        * 						<code>GetDiscoveredResourceCounts</code> action and
        * 					specify that you want all resource types. </p>
        * 			         </li>
        *             <li>
        * 				           <p>Config returns the following:</p>
        *
        * 				           <ul>
        *                   <li>
        * 						               <p>The resource types (EC2 instances, IAM users,
        * 							and S3 buckets).</p>
        * 					             </li>
        *                   <li>
        * 						               <p>The number of each resource type (25, 20, and
        * 							15).</p>
        * 					             </li>
        *                   <li>
        * 						               <p>The total number of all resources
        * 							(60).</p>
        * 					             </li>
        *                </ul>
        *
        * 			         </li>
        *          </ol>
        *
        * 		       <p>The response is paginated. By default, Config lists 100
        * 				<a>ResourceCount</a> objects on each page. You can
        * 			customize this number with the <code>limit</code> parameter. The
        * 			response includes a <code>nextToken</code> string. To get the next
        * 			page of results, run the request again and specify the string for
        * 			the <code>nextToken</code> parameter.</p>
        *
        * 		       <note>
        * 			         <p>If you make a call to the <a>GetDiscoveredResourceCounts</a> action, you might
        * 				not immediately receive resource counts in the following
        * 				situations:</p>
        *
        * 			         <ul>
        *                <li>
        * 					             <p>You are a new Config customer.</p>
        * 				           </li>
        *                <li>
        * 					             <p>You just enabled resource recording.</p>
        * 				           </li>
        *             </ul>
        *
        * 			         <p>It might take a few minutes for Config to record and
        * 				count your resources. Wait a few minutes and then retry the
        * 					<a>GetDiscoveredResourceCounts</a> action.
        * 			</p>
        * 		       </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, GetDiscoveredResourceCountsCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, GetDiscoveredResourceCountsCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new GetDiscoveredResourceCountsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDiscoveredResourceCountsCommandInput} for command's `input` shape.
        * @see {@link GetDiscoveredResourceCountsCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class GetDiscoveredResourceCountsCommand extends $Command<GetDiscoveredResourceCountsCommandInput, GetDiscoveredResourceCountsCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: GetDiscoveredResourceCountsCommandInput;
            constructor(input: GetDiscoveredResourceCountsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDiscoveredResourceCountsCommandInput, GetDiscoveredResourceCountsCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetOrganizationConfigRuleDetailedStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { GetOrganizationConfigRuleDetailedStatusRequest, GetOrganizationConfigRuleDetailedStatusResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface GetOrganizationConfigRuleDetailedStatusCommandInput extends GetOrganizationConfigRuleDetailedStatusRequest {
    }
    export interface GetOrganizationConfigRuleDetailedStatusCommandOutput extends GetOrganizationConfigRuleDetailedStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Returns detailed status for each member account within an organization for a given organization Config rule.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, GetOrganizationConfigRuleDetailedStatusCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, GetOrganizationConfigRuleDetailedStatusCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new GetOrganizationConfigRuleDetailedStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetOrganizationConfigRuleDetailedStatusCommandInput} for command's `input` shape.
        * @see {@link GetOrganizationConfigRuleDetailedStatusCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class GetOrganizationConfigRuleDetailedStatusCommand extends $Command<GetOrganizationConfigRuleDetailedStatusCommandInput, GetOrganizationConfigRuleDetailedStatusCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: GetOrganizationConfigRuleDetailedStatusCommandInput;
            constructor(input: GetOrganizationConfigRuleDetailedStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetOrganizationConfigRuleDetailedStatusCommandInput, GetOrganizationConfigRuleDetailedStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetOrganizationConformancePackDetailedStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { GetOrganizationConformancePackDetailedStatusRequest, GetOrganizationConformancePackDetailedStatusResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface GetOrganizationConformancePackDetailedStatusCommandInput extends GetOrganizationConformancePackDetailedStatusRequest {
    }
    export interface GetOrganizationConformancePackDetailedStatusCommandOutput extends GetOrganizationConformancePackDetailedStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Returns detailed status for each member account within an organization for a given organization conformance pack.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, GetOrganizationConformancePackDetailedStatusCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, GetOrganizationConformancePackDetailedStatusCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new GetOrganizationConformancePackDetailedStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetOrganizationConformancePackDetailedStatusCommandInput} for command's `input` shape.
        * @see {@link GetOrganizationConformancePackDetailedStatusCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class GetOrganizationConformancePackDetailedStatusCommand extends $Command<GetOrganizationConformancePackDetailedStatusCommandInput, GetOrganizationConformancePackDetailedStatusCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: GetOrganizationConformancePackDetailedStatusCommandInput;
            constructor(input: GetOrganizationConformancePackDetailedStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetOrganizationConformancePackDetailedStatusCommandInput, GetOrganizationConformancePackDetailedStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetOrganizationCustomRulePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { GetOrganizationCustomRulePolicyRequest, GetOrganizationCustomRulePolicyResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface GetOrganizationCustomRulePolicyCommandInput extends GetOrganizationCustomRulePolicyRequest {
    }
    export interface GetOrganizationCustomRulePolicyCommandOutput extends GetOrganizationCustomRulePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the policy definition containing the logic for your organization Config Custom Policy rule.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, GetOrganizationCustomRulePolicyCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, GetOrganizationCustomRulePolicyCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new GetOrganizationCustomRulePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetOrganizationCustomRulePolicyCommandInput} for command's `input` shape.
        * @see {@link GetOrganizationCustomRulePolicyCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class GetOrganizationCustomRulePolicyCommand extends $Command<GetOrganizationCustomRulePolicyCommandInput, GetOrganizationCustomRulePolicyCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: GetOrganizationCustomRulePolicyCommandInput;
            constructor(input: GetOrganizationCustomRulePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetOrganizationCustomRulePolicyCommandInput, GetOrganizationCustomRulePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetResourceConfigHistoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { GetResourceConfigHistoryRequest, GetResourceConfigHistoryResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface GetResourceConfigHistoryCommandInput extends GetResourceConfigHistoryRequest {
    }
    export interface GetResourceConfigHistoryCommandOutput extends GetResourceConfigHistoryResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of <code>ConfigurationItems</code> for the specified resource.
        * 			The list contains details about each state of the resource
        * 			during the specified time interval. If you specified a retention
        * 			period to retain your <code>ConfigurationItems</code> between a
        * 			minimum of 30 days and a maximum of 7 years (2557 days), Config
        * 			returns the <code>ConfigurationItems</code> for the specified
        * 			retention period. </p>
        * 		       <p>The response is paginated. By default, Config returns a
        * 			limit of 10 configuration items per page. You can customize this
        * 			number with the <code>limit</code> parameter. The response includes
        * 			a <code>nextToken</code> string. To get the next page of results,
        * 			run the request again and specify the string for the
        * 				<code>nextToken</code> parameter.</p>
        * 		       <note>
        * 			         <p>Each call to the API is limited to span a duration of seven
        * 				days. It is likely that the number of records returned is
        * 				smaller than the specified <code>limit</code>. In such cases,
        * 				you can make another call, using the
        * 				<code>nextToken</code>.</p>
        * 		       </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, GetResourceConfigHistoryCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, GetResourceConfigHistoryCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new GetResourceConfigHistoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetResourceConfigHistoryCommandInput} for command's `input` shape.
        * @see {@link GetResourceConfigHistoryCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class GetResourceConfigHistoryCommand extends $Command<GetResourceConfigHistoryCommandInput, GetResourceConfigHistoryCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: GetResourceConfigHistoryCommandInput;
            constructor(input: GetResourceConfigHistoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetResourceConfigHistoryCommandInput, GetResourceConfigHistoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetStoredQueryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { GetStoredQueryRequest, GetStoredQueryResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface GetStoredQueryCommandInput extends GetStoredQueryRequest {
    }
    export interface GetStoredQueryCommandOutput extends GetStoredQueryResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the details of a specific stored query.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, GetStoredQueryCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, GetStoredQueryCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new GetStoredQueryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetStoredQueryCommandInput} for command's `input` shape.
        * @see {@link GetStoredQueryCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class GetStoredQueryCommand extends $Command<GetStoredQueryCommandInput, GetStoredQueryCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: GetStoredQueryCommandInput;
            constructor(input: GetStoredQueryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetStoredQueryCommandInput, GetStoredQueryCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/ListAggregateDiscoveredResourcesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { ListAggregateDiscoveredResourcesRequest, ListAggregateDiscoveredResourcesResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface ListAggregateDiscoveredResourcesCommandInput extends ListAggregateDiscoveredResourcesRequest {
    }
    export interface ListAggregateDiscoveredResourcesCommandOutput extends ListAggregateDiscoveredResourcesResponse, __MetadataBearer {
    }
    /**
        * <p>Accepts a resource type and returns a list of resource identifiers that are aggregated for a specific resource type across accounts and regions.
        * 			A resource identifier includes the resource type, ID, (if available) the custom resource name, source account, and source region.
        * 			You can narrow the results to include only resources that have specific resource IDs, or a resource name, or source account ID, or source region.</p>
        * 			      <p>For example, if the input consists of accountID 12345678910 and the region is us-east-1 for resource type <code>AWS::EC2::Instance</code> then the API returns all the EC2 instance identifiers of accountID 12345678910 and region us-east-1.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, ListAggregateDiscoveredResourcesCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, ListAggregateDiscoveredResourcesCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new ListAggregateDiscoveredResourcesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAggregateDiscoveredResourcesCommandInput} for command's `input` shape.
        * @see {@link ListAggregateDiscoveredResourcesCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class ListAggregateDiscoveredResourcesCommand extends $Command<ListAggregateDiscoveredResourcesCommandInput, ListAggregateDiscoveredResourcesCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: ListAggregateDiscoveredResourcesCommandInput;
            constructor(input: ListAggregateDiscoveredResourcesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAggregateDiscoveredResourcesCommandInput, ListAggregateDiscoveredResourcesCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/ListDiscoveredResourcesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { ListDiscoveredResourcesRequest, ListDiscoveredResourcesResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface ListDiscoveredResourcesCommandInput extends ListDiscoveredResourcesRequest {
    }
    export interface ListDiscoveredResourcesCommandOutput extends ListDiscoveredResourcesResponse, __MetadataBearer {
    }
    /**
        * <p>Accepts a resource type and returns a list of resource
        * 			identifiers for the resources of that type. A resource identifier
        * 			includes the resource type, ID, and (if available) the custom
        * 			resource name. The results consist of resources that Config has
        * 			discovered, including those that Config is not currently
        * 			recording. You can narrow the results to include only resources that
        * 			have specific resource IDs or a resource name.</p>
        * 		       <note>
        * 			         <p>You can specify either resource IDs or a resource name, but
        * 				not both, in the same request.</p>
        * 		       </note>
        * 		       <p>The response is paginated. By default, Config lists 100
        * 			resource identifiers on each page. You can customize this number
        * 			with the <code>limit</code> parameter. The response includes a
        * 				<code>nextToken</code> string. To get the next page of results,
        * 			run the request again and specify the string for the
        * 				<code>nextToken</code> parameter.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, ListDiscoveredResourcesCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, ListDiscoveredResourcesCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new ListDiscoveredResourcesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDiscoveredResourcesCommandInput} for command's `input` shape.
        * @see {@link ListDiscoveredResourcesCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class ListDiscoveredResourcesCommand extends $Command<ListDiscoveredResourcesCommandInput, ListDiscoveredResourcesCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: ListDiscoveredResourcesCommandInput;
            constructor(input: ListDiscoveredResourcesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDiscoveredResourcesCommandInput, ListDiscoveredResourcesCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/ListStoredQueriesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { ListStoredQueriesRequest, ListStoredQueriesResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface ListStoredQueriesCommandInput extends ListStoredQueriesRequest {
    }
    export interface ListStoredQueriesCommandOutput extends ListStoredQueriesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the stored queries for a single Amazon Web Services account and a single Amazon Web Services Region. The default is 100. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, ListStoredQueriesCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, ListStoredQueriesCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new ListStoredQueriesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListStoredQueriesCommandInput} for command's `input` shape.
        * @see {@link ListStoredQueriesCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class ListStoredQueriesCommand extends $Command<ListStoredQueriesCommandInput, ListStoredQueriesCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: ListStoredQueriesCommandInput;
            constructor(input: ListStoredQueriesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListStoredQueriesCommandInput, ListStoredQueriesCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>List the tags for Config resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, ListTagsForResourceCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, ListTagsForResourceCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutAggregationAuthorizationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { PutAggregationAuthorizationRequest, PutAggregationAuthorizationResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface PutAggregationAuthorizationCommandInput extends PutAggregationAuthorizationRequest {
    }
    export interface PutAggregationAuthorizationCommandOutput extends PutAggregationAuthorizationResponse, __MetadataBearer {
    }
    /**
        * <p>Authorizes the aggregator account and region to collect data
        * 			from the source account and region. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, PutAggregationAuthorizationCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, PutAggregationAuthorizationCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new PutAggregationAuthorizationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutAggregationAuthorizationCommandInput} for command's `input` shape.
        * @see {@link PutAggregationAuthorizationCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class PutAggregationAuthorizationCommand extends $Command<PutAggregationAuthorizationCommandInput, PutAggregationAuthorizationCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: PutAggregationAuthorizationCommandInput;
            constructor(input: PutAggregationAuthorizationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutAggregationAuthorizationCommandInput, PutAggregationAuthorizationCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutConfigRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { PutConfigRuleRequest } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface PutConfigRuleCommandInput extends PutConfigRuleRequest {
    }
    export interface PutConfigRuleCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds or updates an Config rule for evaluating whether your
        * 			Amazon Web Services resources comply with your desired configurations.</p>
        * 		       <p>You can use this action for Config custom rules and Config
        * 			managed rules. A Config custom rule is a rule that you
        * 			develop and maintain. An Config managed rule is a customizable,
        * 			predefined rule that Config provides.</p>
        * 		       <p>If you are adding a new Config custom rule, you must first
        * 			create the Lambda function that the rule invokes to evaluate
        * 			your resources. When you use the <code>PutConfigRule</code> action
        * 			to add the rule to Config, you must specify the Amazon Resource
        * 			Name (ARN) that Lambda assigns to the function. Specify the ARN
        * 			for the <code>SourceIdentifier</code> key. This key is part of the
        * 				<code>Source</code> object, which is part of the
        * 				<code>ConfigRule</code> object. </p>
        * 		       <p>If you are adding an Config managed rule, specify the
        * 			rule's identifier for the <code>SourceIdentifier</code> key. To
        * 			reference Config managed rule identifiers, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html">About Config managed rules</a>.</p>
        * 		       <p>For any new rule that you add, specify the
        * 				<code>ConfigRuleName</code> in the <code>ConfigRule</code>
        * 			object. Do not specify the <code>ConfigRuleArn</code> or the
        * 			<code>ConfigRuleId</code>. These values are generated by Config for new rules.</p>
        * 		       <p>If you are updating a rule that you added previously, you can
        * 			specify the rule by <code>ConfigRuleName</code>,
        * 				<code>ConfigRuleId</code>, or <code>ConfigRuleArn</code> in the
        * 				<code>ConfigRule</code> data type that you use in this
        * 			request.</p>
        * 		       <p>For information on how many Config rules you can have per account,
        * 			see <a href="https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html">
        *                <b>Service Limits</b>
        *             </a> in the Config Developer Guide.</p>
        *
        * 		       <p>For more information about developing and using Config
        * 			rules, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config.html">Evaluating Amazon Web Services resource Configurations with Config</a>
        * 			in the <i>Config Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, PutConfigRuleCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, PutConfigRuleCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new PutConfigRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutConfigRuleCommandInput} for command's `input` shape.
        * @see {@link PutConfigRuleCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class PutConfigRuleCommand extends $Command<PutConfigRuleCommandInput, PutConfigRuleCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: PutConfigRuleCommandInput;
            constructor(input: PutConfigRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutConfigRuleCommandInput, PutConfigRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutConfigurationAggregatorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { PutConfigurationAggregatorRequest, PutConfigurationAggregatorResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface PutConfigurationAggregatorCommandInput extends PutConfigurationAggregatorRequest {
    }
    export interface PutConfigurationAggregatorCommandOutput extends PutConfigurationAggregatorResponse, __MetadataBearer {
    }
    /**
        * <p>Creates and updates the configuration aggregator with the
        * 			selected source accounts and regions. The source account can be
        * 			individual account(s) or an organization.</p>
        *
        * 		       <p>
        *             <code>accountIds</code> that are passed will be replaced with existing accounts.
        * 			If you want to add additional accounts into the aggregator, call <code>DescribeConfigurationAggregators</code> to get the previous accounts and then append new ones.</p>
        * 		       <note>
        * 			         <p>Config should be enabled in source accounts and regions
        * 				you want to aggregate.</p>
        *
        * 			         <p>If your source type is an organization, you must be signed in to the management account or a registered delegated administrator and all the features must be enabled in your organization.
        * 				If the caller is a management account, Config calls <code>EnableAwsServiceAccess</code> API to enable integration between Config and Organizations.
        * 				If the caller is a registered delegated administrator, Config calls <code>ListDelegatedAdministrators</code> API to verify whether the caller is a valid delegated administrator.</p>
        * 			         <p>To register a delegated administrator, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/set-up-aggregator-cli.html#register-a-delegated-administrator-cli">Register a Delegated Administrator</a> in the Config developer guide. </p>
        * 		       </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, PutConfigurationAggregatorCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, PutConfigurationAggregatorCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new PutConfigurationAggregatorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutConfigurationAggregatorCommandInput} for command's `input` shape.
        * @see {@link PutConfigurationAggregatorCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class PutConfigurationAggregatorCommand extends $Command<PutConfigurationAggregatorCommandInput, PutConfigurationAggregatorCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: PutConfigurationAggregatorCommandInput;
            constructor(input: PutConfigurationAggregatorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutConfigurationAggregatorCommandInput, PutConfigurationAggregatorCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutConfigurationRecorderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { PutConfigurationRecorderRequest } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface PutConfigurationRecorderCommandInput extends PutConfigurationRecorderRequest {
    }
    export interface PutConfigurationRecorderCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Creates a new configuration recorder to record the selected
        * 			resource configurations.</p>
        * 		       <p>You can use this action to change the role <code>roleARN</code>
        * 			or the <code>recordingGroup</code> of an existing recorder. To
        * 			change the role, call the action on the existing configuration
        * 			recorder and specify a role.</p>
        * 		       <note>
        * 			         <p>Currently, you can specify only one configuration recorder
        * 				per region in your account.</p>
        * 			         <p>If <code>ConfigurationRecorder</code> does not have the
        * 					<b>recordingGroup</b> parameter
        * 				specified, the default is to record all supported resource
        * 				types.</p>
        * 		       </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, PutConfigurationRecorderCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, PutConfigurationRecorderCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new PutConfigurationRecorderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutConfigurationRecorderCommandInput} for command's `input` shape.
        * @see {@link PutConfigurationRecorderCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class PutConfigurationRecorderCommand extends $Command<PutConfigurationRecorderCommandInput, PutConfigurationRecorderCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: PutConfigurationRecorderCommandInput;
            constructor(input: PutConfigurationRecorderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutConfigurationRecorderCommandInput, PutConfigurationRecorderCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutConformancePackCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { PutConformancePackRequest, PutConformancePackResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface PutConformancePackCommandInput extends PutConformancePackRequest {
    }
    export interface PutConformancePackCommandOutput extends PutConformancePackResponse, __MetadataBearer {
    }
    /**
        * <p>Creates or updates a conformance pack. A conformance pack is a collection of Config rules that can be easily deployed in an account and a region and across Amazon Web Services Organization.
        * 			For information on how many conformance packs you can have per account,
        * 			see <a href="https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html">
        *                <b>Service Limits</b>
        *             </a> in the Config Developer Guide.</p>
        * 		       <p>This API creates a service linked role <code>AWSServiceRoleForConfigConforms</code> in your account.
        * 		The service linked role is created only when the role does not exist in your account. </p>
        * 		       <note>
        *             <p>You must specify either the <code>TemplateS3Uri</code> or the <code>TemplateBody</code> parameter, but not both.
        * 			If you provide both Config uses the <code>TemplateS3Uri</code> parameter and ignores the <code>TemplateBody</code> parameter.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, PutConformancePackCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, PutConformancePackCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new PutConformancePackCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutConformancePackCommandInput} for command's `input` shape.
        * @see {@link PutConformancePackCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class PutConformancePackCommand extends $Command<PutConformancePackCommandInput, PutConformancePackCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: PutConformancePackCommandInput;
            constructor(input: PutConformancePackCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutConformancePackCommandInput, PutConformancePackCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutDeliveryChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { PutDeliveryChannelRequest } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface PutDeliveryChannelCommandInput extends PutDeliveryChannelRequest {
    }
    export interface PutDeliveryChannelCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Creates a delivery channel object to deliver configuration
        * 			information to an Amazon S3 bucket and Amazon SNS topic.</p>
        * 		       <p>Before you can create a delivery channel, you must create a
        * 			configuration recorder.</p>
        * 		       <p>You can use this action to change the Amazon S3 bucket or an
        * 			Amazon SNS topic of the existing delivery channel. To change the
        * 			Amazon S3 bucket or an Amazon SNS topic, call this action and
        * 			specify the changed values for the S3 bucket and the SNS topic. If
        * 			you specify a different value for either the S3 bucket or the SNS
        * 			topic, this action will keep the existing value for the parameter
        * 			that is not changed.</p>
        * 		       <note>
        * 			         <p>You can have only one delivery channel per region in your
        * 				account.</p>
        *
        *
        * 		       </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, PutDeliveryChannelCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, PutDeliveryChannelCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new PutDeliveryChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutDeliveryChannelCommandInput} for command's `input` shape.
        * @see {@link PutDeliveryChannelCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class PutDeliveryChannelCommand extends $Command<PutDeliveryChannelCommandInput, PutDeliveryChannelCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: PutDeliveryChannelCommandInput;
            constructor(input: PutDeliveryChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutDeliveryChannelCommandInput, PutDeliveryChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutEvaluationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { PutEvaluationsRequest, PutEvaluationsResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface PutEvaluationsCommandInput extends PutEvaluationsRequest {
    }
    export interface PutEvaluationsCommandOutput extends PutEvaluationsResponse, __MetadataBearer {
    }
    /**
        * <p>Used by an Lambda function to deliver evaluation results to
        * 			Config. This action is required in every Lambda function
        * 			that is invoked by an Config rule.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, PutEvaluationsCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, PutEvaluationsCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new PutEvaluationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutEvaluationsCommandInput} for command's `input` shape.
        * @see {@link PutEvaluationsCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class PutEvaluationsCommand extends $Command<PutEvaluationsCommandInput, PutEvaluationsCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: PutEvaluationsCommandInput;
            constructor(input: PutEvaluationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutEvaluationsCommandInput, PutEvaluationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutExternalEvaluationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { PutExternalEvaluationRequest, PutExternalEvaluationResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface PutExternalEvaluationCommandInput extends PutExternalEvaluationRequest {
    }
    export interface PutExternalEvaluationCommandOutput extends PutExternalEvaluationResponse, __MetadataBearer {
    }
    /**
        * <p>Add or updates the evaluations for process checks.
        * 			This API checks if the rule is a process check when the name of the Config rule is provided.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, PutExternalEvaluationCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, PutExternalEvaluationCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new PutExternalEvaluationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutExternalEvaluationCommandInput} for command's `input` shape.
        * @see {@link PutExternalEvaluationCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class PutExternalEvaluationCommand extends $Command<PutExternalEvaluationCommandInput, PutExternalEvaluationCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: PutExternalEvaluationCommandInput;
            constructor(input: PutExternalEvaluationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutExternalEvaluationCommandInput, PutExternalEvaluationCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutOrganizationConfigRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { PutOrganizationConfigRuleRequest, PutOrganizationConfigRuleResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_1";
    export interface PutOrganizationConfigRuleCommandInput extends PutOrganizationConfigRuleRequest {
    }
    export interface PutOrganizationConfigRuleCommandOutput extends PutOrganizationConfigRuleResponse, __MetadataBearer {
    }
    /**
        * <p>Adds or updates organization Config rule for your entire organization evaluating whether your Amazon Web Services resources comply with your
        * 			desired configurations. For information on how many organization Config rules you can have per account,
        * 			see <a href="https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html">
        *                <b>Service Limits</b>
        *             </a> in the Config Developer Guide.</p>
        * 	        <p> Only a master account and a delegated administrator can create or update an organization Config rule.
        * 		When calling this API with a delegated administrator, you must ensure Organizations
        * 		<code>ListDelegatedAdministrator</code> permissions are added. An organization can have up to 3 delegated administrators.</p>
        * 		       <p>This API enables organization service access through the <code>EnableAWSServiceAccess</code> action and creates a service linked
        * 			role <code>AWSServiceRoleForConfigMultiAccountSetup</code> in the master or delegated administrator account of your organization.
        * 			The service linked role is created only when the role does not exist in the caller account.
        * 			Config verifies the existence of role with <code>GetRole</code> action.</p>
        * 		       <p>To use this API with delegated administrator, register a delegated administrator by calling Amazon Web Services Organization
        * 			<code>register-delegated-administrator</code> for <code>config-multiaccountsetup.amazonaws.com</code>. </p>
        * 		       <p>You can use this action to create both Config custom rules and Config managed rules.
        * 			If you are adding a new Config custom rule, you must first create Lambda function in the master account or a delegated
        * 			administrator that the rule invokes to evaluate your resources. You also need to create an IAM role in the managed-account that can be assumed by the Lambda function.
        * 			When you use the <code>PutOrganizationConfigRule</code> action to add the rule to Config, you must
        * 			specify the Amazon Resource Name (ARN) that Lambda assigns to the function.
        * 			If you are adding an Config managed rule, specify the rule's identifier for the <code>RuleIdentifier</code> key.</p>
        * 		       <note>
        *             <p>Prerequisite: Ensure you call <code>EnableAllFeatures</code> API to enable all features in an organization.</p>
        * 			         <p>Specify either <code>OrganizationCustomRuleMetadata</code> or <code>OrganizationManagedRuleMetadata</code>.</p>
        * 			      </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, PutOrganizationConfigRuleCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, PutOrganizationConfigRuleCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new PutOrganizationConfigRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutOrganizationConfigRuleCommandInput} for command's `input` shape.
        * @see {@link PutOrganizationConfigRuleCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class PutOrganizationConfigRuleCommand extends $Command<PutOrganizationConfigRuleCommandInput, PutOrganizationConfigRuleCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: PutOrganizationConfigRuleCommandInput;
            constructor(input: PutOrganizationConfigRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutOrganizationConfigRuleCommandInput, PutOrganizationConfigRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutOrganizationConformancePackCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { PutOrganizationConformancePackRequest, PutOrganizationConformancePackResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_1";
    export interface PutOrganizationConformancePackCommandInput extends PutOrganizationConformancePackRequest {
    }
    export interface PutOrganizationConformancePackCommandOutput extends PutOrganizationConformancePackResponse, __MetadataBearer {
    }
    /**
        * <p>Deploys conformance packs across member accounts in an Amazon Web Services Organization. For information on how many organization conformance packs and how many Config rules you can have per account,
        * 			see <a href="https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html">
        *                <b>Service Limits</b>
        *             </a> in the Config Developer Guide.</p>
        * 		       <p>Only a master account and a delegated administrator can call this API.
        * 			When calling this API with a delegated administrator, you must ensure Organizations
        * 			<code>ListDelegatedAdministrator</code> permissions are added. An organization can have up to 3 delegated administrators.</p>
        * 		       <p>This API enables organization service access for <code>config-multiaccountsetup.amazonaws.com</code>
        * 			through the <code>EnableAWSServiceAccess</code> action and creates a
        * 			service linked role <code>AWSServiceRoleForConfigMultiAccountSetup</code> in the master or delegated administrator account of your organization.
        * 			The service linked role is created only when the role does not exist in the caller account.
        * 			To use this API with delegated administrator, register a delegated administrator by calling Amazon Web Services Organization
        * 			<code>register-delegate-admin</code> for <code>config-multiaccountsetup.amazonaws.com</code>.</p>
        *
        *
        *
        * 		       <note>
        * 			         <p>Prerequisite: Ensure you call <code>EnableAllFeatures</code> API to enable all features in an organization.</p>
        * 			         <p>You must specify either the <code>TemplateS3Uri</code> or the <code>TemplateBody</code> parameter, but not both.
        * 			If you provide both Config uses the <code>TemplateS3Uri</code> parameter and ignores the <code>TemplateBody</code> parameter.</p>
        * 			         <p>Config sets the state of a conformance pack to CREATE_IN_PROGRESS and UPDATE_IN_PROGRESS until the conformance pack is created or updated.
        * 				You cannot update a conformance pack while it is in this state.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, PutOrganizationConformancePackCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, PutOrganizationConformancePackCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new PutOrganizationConformancePackCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutOrganizationConformancePackCommandInput} for command's `input` shape.
        * @see {@link PutOrganizationConformancePackCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class PutOrganizationConformancePackCommand extends $Command<PutOrganizationConformancePackCommandInput, PutOrganizationConformancePackCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: PutOrganizationConformancePackCommandInput;
            constructor(input: PutOrganizationConformancePackCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutOrganizationConformancePackCommandInput, PutOrganizationConformancePackCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutRemediationConfigurationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { PutRemediationConfigurationsRequest, PutRemediationConfigurationsResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_1";
    export interface PutRemediationConfigurationsCommandInput extends PutRemediationConfigurationsRequest {
    }
    export interface PutRemediationConfigurationsCommandOutput extends PutRemediationConfigurationsResponse, __MetadataBearer {
    }
    /**
        * <p>Adds or updates the remediation configuration with a specific Config rule with the
        * 			selected target or action.
        * 			The API creates the <code>RemediationConfiguration</code> object for the Config rule.
        * 		The Config rule must already exist for you to add a remediation configuration.
        * 		The target (SSM document) must exist and have permissions to use the target. </p>
        * 		       <note>
        *             <p>If you make backward incompatible changes to the SSM document,
        * 			you must call this again to ensure the remediations can run.</p>
        * 			         <p>This API does not support adding remediation configurations for service-linked Config Rules such as Organization Config rules,
        * 				the rules deployed by conformance packs, and rules deployed by Amazon Web Services Security Hub.</p>
        *          </note>
        * 		       <note>
        *             <p>For manual remediation configuration, you need to provide a value for <code>automationAssumeRole</code> or use a value in the <code>assumeRole</code>field  to remediate your resources. The SSM automation document can use either as long as it maps to a valid parameter.</p>
        * 			         <p>However, for automatic remediation configuration, the only valid <code>assumeRole</code> field value is <code>AutomationAssumeRole</code> and you need to provide a value for <code>AutomationAssumeRole</code> to remediate your resources.</p>
        * 		       </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, PutRemediationConfigurationsCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, PutRemediationConfigurationsCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new PutRemediationConfigurationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutRemediationConfigurationsCommandInput} for command's `input` shape.
        * @see {@link PutRemediationConfigurationsCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class PutRemediationConfigurationsCommand extends $Command<PutRemediationConfigurationsCommandInput, PutRemediationConfigurationsCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: PutRemediationConfigurationsCommandInput;
            constructor(input: PutRemediationConfigurationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutRemediationConfigurationsCommandInput, PutRemediationConfigurationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutRemediationExceptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { PutRemediationExceptionsRequest, PutRemediationExceptionsResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_1";
    export interface PutRemediationExceptionsCommandInput extends PutRemediationExceptionsRequest {
    }
    export interface PutRemediationExceptionsCommandOutput extends PutRemediationExceptionsResponse, __MetadataBearer {
    }
    /**
        * <p>A remediation exception is when a specific resource is no longer considered for auto-remediation.
        * 			This API adds a new exception or updates an existing exception for a specific resource with a specific Config rule. </p>
        * 		       <note>
        *             <p>Config generates a remediation exception when a problem occurs executing a remediation action to a specific resource.
        * 			Remediation exceptions blocks auto-remediation until the exception is cleared.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, PutRemediationExceptionsCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, PutRemediationExceptionsCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new PutRemediationExceptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutRemediationExceptionsCommandInput} for command's `input` shape.
        * @see {@link PutRemediationExceptionsCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class PutRemediationExceptionsCommand extends $Command<PutRemediationExceptionsCommandInput, PutRemediationExceptionsCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: PutRemediationExceptionsCommandInput;
            constructor(input: PutRemediationExceptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutRemediationExceptionsCommandInput, PutRemediationExceptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutResourceConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { PutResourceConfigRequest } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_1";
    export interface PutResourceConfigCommandInput extends PutResourceConfigRequest {
    }
    export interface PutResourceConfigCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Records the configuration state for the resource provided in the request.
        *
        * 			The configuration state of a resource is represented in Config as Configuration Items.
        * 			Once this API records the configuration item, you can retrieve the list of configuration items for the custom resource type using existing Config APIs. </p>
        * 		       <note>
        *             <p>The custom resource type must be registered with CloudFormation. This API accepts the configuration item registered with CloudFormation.</p>
        * 			         <p>When you call this API, Config only stores configuration state of the resource provided in the request. This API does not change or remediate the configuration of the resource.
        * 				</p>
        * 		          <p>Write-only schema properites are not recorded as part of the published configuration item.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, PutResourceConfigCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, PutResourceConfigCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new PutResourceConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutResourceConfigCommandInput} for command's `input` shape.
        * @see {@link PutResourceConfigCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class PutResourceConfigCommand extends $Command<PutResourceConfigCommandInput, PutResourceConfigCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: PutResourceConfigCommandInput;
            constructor(input: PutResourceConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutResourceConfigCommandInput, PutResourceConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutRetentionConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { PutRetentionConfigurationRequest, PutRetentionConfigurationResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_1";
    export interface PutRetentionConfigurationCommandInput extends PutRetentionConfigurationRequest {
    }
    export interface PutRetentionConfigurationCommandOutput extends PutRetentionConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Creates and updates the retention configuration with details
        * 			about retention period (number of days) that Config stores your
        * 			historical information. The API creates the
        * 				<code>RetentionConfiguration</code> object and names the object
        * 			as <b>default</b>. When you have a
        * 				<code>RetentionConfiguration</code> object named <b>default</b>, calling the API modifies the
        * 			default object. </p>
        * 		       <note>
        * 			         <p>Currently, Config supports only one retention
        * 				configuration per region in your account.</p>
        * 		       </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, PutRetentionConfigurationCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, PutRetentionConfigurationCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new PutRetentionConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutRetentionConfigurationCommandInput} for command's `input` shape.
        * @see {@link PutRetentionConfigurationCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class PutRetentionConfigurationCommand extends $Command<PutRetentionConfigurationCommandInput, PutRetentionConfigurationCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: PutRetentionConfigurationCommandInput;
            constructor(input: PutRetentionConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutRetentionConfigurationCommandInput, PutRetentionConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutStoredQueryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { PutStoredQueryRequest, PutStoredQueryResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_1";
    export interface PutStoredQueryCommandInput extends PutStoredQueryRequest {
    }
    export interface PutStoredQueryCommandOutput extends PutStoredQueryResponse, __MetadataBearer {
    }
    /**
        * <p>Saves a new query or updates an existing saved query. The <code>QueryName</code> must be unique for a single Amazon Web Services account and a single Amazon Web Services Region.
        * 			You can create upto 300 queries in a single Amazon Web Services account and a single Amazon Web Services Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, PutStoredQueryCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, PutStoredQueryCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new PutStoredQueryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutStoredQueryCommandInput} for command's `input` shape.
        * @see {@link PutStoredQueryCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class PutStoredQueryCommand extends $Command<PutStoredQueryCommandInput, PutStoredQueryCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: PutStoredQueryCommandInput;
            constructor(input: PutStoredQueryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutStoredQueryCommandInput, PutStoredQueryCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/SelectAggregateResourceConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { SelectAggregateResourceConfigRequest, SelectAggregateResourceConfigResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_1";
    export interface SelectAggregateResourceConfigCommandInput extends SelectAggregateResourceConfigRequest {
    }
    export interface SelectAggregateResourceConfigCommandOutput extends SelectAggregateResourceConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Accepts a structured query language (SQL) SELECT command and an aggregator to query configuration state of Amazon Web Services resources across multiple accounts and regions,
        * 			performs the corresponding search, and returns resource configurations matching the properties.</p>
        * 		       <p>For more information about query components, see the
        * 			<a href="https://docs.aws.amazon.com/config/latest/developerguide/query-components.html">
        *                <b>Query Components</b>
        *             </a> section in the Config Developer Guide.</p>
        *
        * 		       <note>
        * 			         <p>If you run an aggregation query (i.e., using <code>GROUP BY</code> or using aggregate functions such as <code>COUNT</code>; e.g., <code>SELECT resourceId, COUNT(*) WHERE resourceType = 'AWS::IAM::Role' GROUP BY resourceId</code>)
        * 				and do not specify the <code>MaxResults</code> or the <code>Limit</code> query parameters, the default page size is set to 500.</p>
        *
        * 			         <p>If you run a non-aggregation query (i.e., not using <code>GROUP BY</code> or aggregate function; e.g., <code>SELECT * WHERE resourceType = 'AWS::IAM::Role'</code>)
        * 				and do not specify the <code>MaxResults</code> or the <code>Limit</code> query parameters, the default page size is set to 25.</p>
        * 		       </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, SelectAggregateResourceConfigCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, SelectAggregateResourceConfigCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new SelectAggregateResourceConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SelectAggregateResourceConfigCommandInput} for command's `input` shape.
        * @see {@link SelectAggregateResourceConfigCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class SelectAggregateResourceConfigCommand extends $Command<SelectAggregateResourceConfigCommandInput, SelectAggregateResourceConfigCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: SelectAggregateResourceConfigCommandInput;
            constructor(input: SelectAggregateResourceConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SelectAggregateResourceConfigCommandInput, SelectAggregateResourceConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/SelectResourceConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { SelectResourceConfigRequest, SelectResourceConfigResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_1";
    export interface SelectResourceConfigCommandInput extends SelectResourceConfigRequest {
    }
    export interface SelectResourceConfigCommandOutput extends SelectResourceConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Accepts a structured query language (SQL) <code>SELECT</code> command, performs the corresponding search, and returns resource configurations matching the properties.</p>
        * 		       <p>For more information about query components, see the
        * 			<a href="https://docs.aws.amazon.com/config/latest/developerguide/query-components.html">
        *                <b>Query Components</b>
        *             </a> section in the Config Developer Guide.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, SelectResourceConfigCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, SelectResourceConfigCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new SelectResourceConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SelectResourceConfigCommandInput} for command's `input` shape.
        * @see {@link SelectResourceConfigCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class SelectResourceConfigCommand extends $Command<SelectResourceConfigCommandInput, SelectResourceConfigCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: SelectResourceConfigCommandInput;
            constructor(input: SelectResourceConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SelectResourceConfigCommandInput, SelectResourceConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/StartConfigRulesEvaluationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { StartConfigRulesEvaluationRequest, StartConfigRulesEvaluationResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_1";
    export interface StartConfigRulesEvaluationCommandInput extends StartConfigRulesEvaluationRequest {
    }
    export interface StartConfigRulesEvaluationCommandOutput extends StartConfigRulesEvaluationResponse, __MetadataBearer {
    }
    /**
        * <p>Runs an on-demand evaluation for the specified Config rules
        * 			against the last known configuration state of the resources. Use
        * 				<code>StartConfigRulesEvaluation</code> when you want to test
        * 			that a rule you updated is working as expected.
        * 				<code>StartConfigRulesEvaluation</code> does not re-record the
        * 			latest configuration state for your resources. It re-runs an
        * 			evaluation against the last known state of your resources. </p>
        * 		       <p>You can specify up to 25 Config rules per request. </p>
        *
        *
        * 		       <p>An existing <code>StartConfigRulesEvaluation</code> call for
        * 			the specified rules must complete before you can call the API again.
        * 			If you chose to have Config stream to an Amazon SNS topic, you
        * 			will receive a <code>ConfigRuleEvaluationStarted</code> notification
        * 			when the evaluation starts.</p>
        * 		       <note>
        * 			         <p>You don't need to call the
        * 					<code>StartConfigRulesEvaluation</code> API to run an
        * 				evaluation for a new rule. When you create a rule, Config
        * 				evaluates your resources against the rule automatically.
        * 			</p>
        * 		       </note>
        * 		       <p>The <code>StartConfigRulesEvaluation</code> API is useful if
        * 			you want to run on-demand evaluations, such as the following
        * 			example:</p>
        * 		       <ol>
        *             <li>
        * 				           <p>You have a custom rule that evaluates your IAM
        * 					resources every 24 hours.</p>
        * 			         </li>
        *             <li>
        * 				           <p>You update your Lambda function to add additional
        * 					conditions to your rule.</p>
        * 			         </li>
        *             <li>
        * 				           <p>Instead of waiting for the next periodic evaluation,
        * 					you call the <code>StartConfigRulesEvaluation</code>
        * 					API.</p>
        * 			         </li>
        *             <li>
        * 				           <p>Config invokes your Lambda function and evaluates
        * 					your IAM resources.</p>
        * 			         </li>
        *             <li>
        * 				           <p>Your custom rule will still run periodic evaluations
        * 					every 24 hours.</p>
        * 			         </li>
        *          </ol>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, StartConfigRulesEvaluationCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, StartConfigRulesEvaluationCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new StartConfigRulesEvaluationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartConfigRulesEvaluationCommandInput} for command's `input` shape.
        * @see {@link StartConfigRulesEvaluationCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class StartConfigRulesEvaluationCommand extends $Command<StartConfigRulesEvaluationCommandInput, StartConfigRulesEvaluationCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: StartConfigRulesEvaluationCommandInput;
            constructor(input: StartConfigRulesEvaluationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartConfigRulesEvaluationCommandInput, StartConfigRulesEvaluationCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/StartConfigurationRecorderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { StartConfigurationRecorderRequest } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_1";
    export interface StartConfigurationRecorderCommandInput extends StartConfigurationRecorderRequest {
    }
    export interface StartConfigurationRecorderCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Starts recording configurations of the Amazon Web Services resources you have
        * 			selected to record in your Amazon Web Services account.</p>
        * 		       <p>You must have created at least one delivery channel to
        * 			successfully start the configuration recorder.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, StartConfigurationRecorderCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, StartConfigurationRecorderCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new StartConfigurationRecorderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartConfigurationRecorderCommandInput} for command's `input` shape.
        * @see {@link StartConfigurationRecorderCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class StartConfigurationRecorderCommand extends $Command<StartConfigurationRecorderCommandInput, StartConfigurationRecorderCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: StartConfigurationRecorderCommandInput;
            constructor(input: StartConfigurationRecorderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartConfigurationRecorderCommandInput, StartConfigurationRecorderCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/StartRemediationExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { StartRemediationExecutionRequest, StartRemediationExecutionResponse } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_1";
    export interface StartRemediationExecutionCommandInput extends StartRemediationExecutionRequest {
    }
    export interface StartRemediationExecutionCommandOutput extends StartRemediationExecutionResponse, __MetadataBearer {
    }
    /**
        * <p>Runs an on-demand remediation for the specified Config rules against the last known remediation configuration. It runs an execution against the current state of your resources. Remediation execution is asynchronous.</p>
        * 			      <p>You can specify up to 100 resource keys per request. An existing StartRemediationExecution call for the specified resource keys must complete before you can call the API again.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, StartRemediationExecutionCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, StartRemediationExecutionCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new StartRemediationExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartRemediationExecutionCommandInput} for command's `input` shape.
        * @see {@link StartRemediationExecutionCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class StartRemediationExecutionCommand extends $Command<StartRemediationExecutionCommandInput, StartRemediationExecutionCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: StartRemediationExecutionCommandInput;
            constructor(input: StartRemediationExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartRemediationExecutionCommandInput, StartRemediationExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/StopConfigurationRecorderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { StopConfigurationRecorderRequest } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_1";
    export interface StopConfigurationRecorderCommandInput extends StopConfigurationRecorderRequest {
    }
    export interface StopConfigurationRecorderCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Stops recording configurations of the Amazon Web Services resources you have selected to record in your Amazon Web Services account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, StopConfigurationRecorderCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, StopConfigurationRecorderCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new StopConfigurationRecorderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopConfigurationRecorderCommandInput} for command's `input` shape.
        * @see {@link StopConfigurationRecorderCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class StopConfigurationRecorderCommand extends $Command<StopConfigurationRecorderCommandInput, StopConfigurationRecorderCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: StopConfigurationRecorderCommandInput;
            constructor(input: StopConfigurationRecorderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopConfigurationRecorderCommandInput, StopConfigurationRecorderCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { TagResourceRequest } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_1";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Associates the specified tags to a resource with the specified resourceArn. If existing tags on a resource are not specified in the request parameters, they are not changed.
        * 			When a resource is deleted, the tags associated with that resource are deleted as well.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, TagResourceCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, TagResourceCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient";
    import { UntagResourceRequest } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_1";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes specified tags from a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConfigServiceClient, UntagResourceCommand } from "@aws-sdk/client-config-service"; // ES Modules import
        * // const { ConfigServiceClient, UntagResourceCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
        * const client = new ConfigServiceClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, ConfigServiceClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/ConfigServiceClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { BatchGetAggregateResourceConfigCommandInput, BatchGetAggregateResourceConfigCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/BatchGetAggregateResourceConfigCommand";
    import { BatchGetResourceConfigCommandInput, BatchGetResourceConfigCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/BatchGetResourceConfigCommand";
    import { DeleteAggregationAuthorizationCommandInput, DeleteAggregationAuthorizationCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteAggregationAuthorizationCommand";
    import { DeleteConfigRuleCommandInput, DeleteConfigRuleCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteConfigRuleCommand";
    import { DeleteConfigurationAggregatorCommandInput, DeleteConfigurationAggregatorCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteConfigurationAggregatorCommand";
    import { DeleteConfigurationRecorderCommandInput, DeleteConfigurationRecorderCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteConfigurationRecorderCommand";
    import { DeleteConformancePackCommandInput, DeleteConformancePackCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteConformancePackCommand";
    import { DeleteDeliveryChannelCommandInput, DeleteDeliveryChannelCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteDeliveryChannelCommand";
    import { DeleteEvaluationResultsCommandInput, DeleteEvaluationResultsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteEvaluationResultsCommand";
    import { DeleteOrganizationConfigRuleCommandInput, DeleteOrganizationConfigRuleCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteOrganizationConfigRuleCommand";
    import { DeleteOrganizationConformancePackCommandInput, DeleteOrganizationConformancePackCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteOrganizationConformancePackCommand";
    import { DeletePendingAggregationRequestCommandInput, DeletePendingAggregationRequestCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeletePendingAggregationRequestCommand";
    import { DeleteRemediationConfigurationCommandInput, DeleteRemediationConfigurationCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteRemediationConfigurationCommand";
    import { DeleteRemediationExceptionsCommandInput, DeleteRemediationExceptionsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteRemediationExceptionsCommand";
    import { DeleteResourceConfigCommandInput, DeleteResourceConfigCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteResourceConfigCommand";
    import { DeleteRetentionConfigurationCommandInput, DeleteRetentionConfigurationCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteRetentionConfigurationCommand";
    import { DeleteStoredQueryCommandInput, DeleteStoredQueryCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeleteStoredQueryCommand";
    import { DeliverConfigSnapshotCommandInput, DeliverConfigSnapshotCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DeliverConfigSnapshotCommand";
    import { DescribeAggregateComplianceByConfigRulesCommandInput, DescribeAggregateComplianceByConfigRulesCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeAggregateComplianceByConfigRulesCommand";
    import { DescribeAggregateComplianceByConformancePacksCommandInput, DescribeAggregateComplianceByConformancePacksCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeAggregateComplianceByConformancePacksCommand";
    import { DescribeAggregationAuthorizationsCommandInput, DescribeAggregationAuthorizationsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeAggregationAuthorizationsCommand";
    import { DescribeComplianceByConfigRuleCommandInput, DescribeComplianceByConfigRuleCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeComplianceByConfigRuleCommand";
    import { DescribeComplianceByResourceCommandInput, DescribeComplianceByResourceCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeComplianceByResourceCommand";
    import { DescribeConfigRuleEvaluationStatusCommandInput, DescribeConfigRuleEvaluationStatusCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConfigRuleEvaluationStatusCommand";
    import { DescribeConfigRulesCommandInput, DescribeConfigRulesCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConfigRulesCommand";
    import { DescribeConfigurationAggregatorsCommandInput, DescribeConfigurationAggregatorsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConfigurationAggregatorsCommand";
    import { DescribeConfigurationAggregatorSourcesStatusCommandInput, DescribeConfigurationAggregatorSourcesStatusCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConfigurationAggregatorSourcesStatusCommand";
    import { DescribeConfigurationRecordersCommandInput, DescribeConfigurationRecordersCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConfigurationRecordersCommand";
    import { DescribeConfigurationRecorderStatusCommandInput, DescribeConfigurationRecorderStatusCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConfigurationRecorderStatusCommand";
    import { DescribeConformancePackComplianceCommandInput, DescribeConformancePackComplianceCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConformancePackComplianceCommand";
    import { DescribeConformancePacksCommandInput, DescribeConformancePacksCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConformancePacksCommand";
    import { DescribeConformancePackStatusCommandInput, DescribeConformancePackStatusCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeConformancePackStatusCommand";
    import { DescribeDeliveryChannelsCommandInput, DescribeDeliveryChannelsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeDeliveryChannelsCommand";
    import { DescribeDeliveryChannelStatusCommandInput, DescribeDeliveryChannelStatusCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeDeliveryChannelStatusCommand";
    import { DescribeOrganizationConfigRulesCommandInput, DescribeOrganizationConfigRulesCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeOrganizationConfigRulesCommand";
    import { DescribeOrganizationConfigRuleStatusesCommandInput, DescribeOrganizationConfigRuleStatusesCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeOrganizationConfigRuleStatusesCommand";
    import { DescribeOrganizationConformancePacksCommandInput, DescribeOrganizationConformancePacksCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeOrganizationConformancePacksCommand";
    import { DescribeOrganizationConformancePackStatusesCommandInput, DescribeOrganizationConformancePackStatusesCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeOrganizationConformancePackStatusesCommand";
    import { DescribePendingAggregationRequestsCommandInput, DescribePendingAggregationRequestsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribePendingAggregationRequestsCommand";
    import { DescribeRemediationConfigurationsCommandInput, DescribeRemediationConfigurationsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeRemediationConfigurationsCommand";
    import { DescribeRemediationExceptionsCommandInput, DescribeRemediationExceptionsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeRemediationExceptionsCommand";
    import { DescribeRemediationExecutionStatusCommandInput, DescribeRemediationExecutionStatusCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeRemediationExecutionStatusCommand";
    import { DescribeRetentionConfigurationsCommandInput, DescribeRetentionConfigurationsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/DescribeRetentionConfigurationsCommand";
    import { GetAggregateComplianceDetailsByConfigRuleCommandInput, GetAggregateComplianceDetailsByConfigRuleCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetAggregateComplianceDetailsByConfigRuleCommand";
    import { GetAggregateConfigRuleComplianceSummaryCommandInput, GetAggregateConfigRuleComplianceSummaryCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetAggregateConfigRuleComplianceSummaryCommand";
    import { GetAggregateConformancePackComplianceSummaryCommandInput, GetAggregateConformancePackComplianceSummaryCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetAggregateConformancePackComplianceSummaryCommand";
    import { GetAggregateDiscoveredResourceCountsCommandInput, GetAggregateDiscoveredResourceCountsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetAggregateDiscoveredResourceCountsCommand";
    import { GetAggregateResourceConfigCommandInput, GetAggregateResourceConfigCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetAggregateResourceConfigCommand";
    import { GetComplianceDetailsByConfigRuleCommandInput, GetComplianceDetailsByConfigRuleCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetComplianceDetailsByConfigRuleCommand";
    import { GetComplianceDetailsByResourceCommandInput, GetComplianceDetailsByResourceCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetComplianceDetailsByResourceCommand";
    import { GetComplianceSummaryByConfigRuleCommandInput, GetComplianceSummaryByConfigRuleCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetComplianceSummaryByConfigRuleCommand";
    import { GetComplianceSummaryByResourceTypeCommandInput, GetComplianceSummaryByResourceTypeCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetComplianceSummaryByResourceTypeCommand";
    import { GetConformancePackComplianceDetailsCommandInput, GetConformancePackComplianceDetailsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetConformancePackComplianceDetailsCommand";
    import { GetConformancePackComplianceSummaryCommandInput, GetConformancePackComplianceSummaryCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetConformancePackComplianceSummaryCommand";
    import { GetCustomRulePolicyCommandInput, GetCustomRulePolicyCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetCustomRulePolicyCommand";
    import { GetDiscoveredResourceCountsCommandInput, GetDiscoveredResourceCountsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetDiscoveredResourceCountsCommand";
    import { GetOrganizationConfigRuleDetailedStatusCommandInput, GetOrganizationConfigRuleDetailedStatusCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetOrganizationConfigRuleDetailedStatusCommand";
    import { GetOrganizationConformancePackDetailedStatusCommandInput, GetOrganizationConformancePackDetailedStatusCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetOrganizationConformancePackDetailedStatusCommand";
    import { GetOrganizationCustomRulePolicyCommandInput, GetOrganizationCustomRulePolicyCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetOrganizationCustomRulePolicyCommand";
    import { GetResourceConfigHistoryCommandInput, GetResourceConfigHistoryCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetResourceConfigHistoryCommand";
    import { GetStoredQueryCommandInput, GetStoredQueryCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/GetStoredQueryCommand";
    import { ListAggregateDiscoveredResourcesCommandInput, ListAggregateDiscoveredResourcesCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/ListAggregateDiscoveredResourcesCommand";
    import { ListDiscoveredResourcesCommandInput, ListDiscoveredResourcesCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/ListDiscoveredResourcesCommand";
    import { ListStoredQueriesCommandInput, ListStoredQueriesCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/ListStoredQueriesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/ListTagsForResourceCommand";
    import { PutAggregationAuthorizationCommandInput, PutAggregationAuthorizationCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutAggregationAuthorizationCommand";
    import { PutConfigRuleCommandInput, PutConfigRuleCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutConfigRuleCommand";
    import { PutConfigurationAggregatorCommandInput, PutConfigurationAggregatorCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutConfigurationAggregatorCommand";
    import { PutConfigurationRecorderCommandInput, PutConfigurationRecorderCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutConfigurationRecorderCommand";
    import { PutConformancePackCommandInput, PutConformancePackCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutConformancePackCommand";
    import { PutDeliveryChannelCommandInput, PutDeliveryChannelCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutDeliveryChannelCommand";
    import { PutEvaluationsCommandInput, PutEvaluationsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutEvaluationsCommand";
    import { PutExternalEvaluationCommandInput, PutExternalEvaluationCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutExternalEvaluationCommand";
    import { PutOrganizationConfigRuleCommandInput, PutOrganizationConfigRuleCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutOrganizationConfigRuleCommand";
    import { PutOrganizationConformancePackCommandInput, PutOrganizationConformancePackCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutOrganizationConformancePackCommand";
    import { PutRemediationConfigurationsCommandInput, PutRemediationConfigurationsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutRemediationConfigurationsCommand";
    import { PutRemediationExceptionsCommandInput, PutRemediationExceptionsCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutRemediationExceptionsCommand";
    import { PutResourceConfigCommandInput, PutResourceConfigCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutResourceConfigCommand";
    import { PutRetentionConfigurationCommandInput, PutRetentionConfigurationCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutRetentionConfigurationCommand";
    import { PutStoredQueryCommandInput, PutStoredQueryCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/PutStoredQueryCommand";
    import { SelectAggregateResourceConfigCommandInput, SelectAggregateResourceConfigCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/SelectAggregateResourceConfigCommand";
    import { SelectResourceConfigCommandInput, SelectResourceConfigCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/SelectResourceConfigCommand";
    import { StartConfigRulesEvaluationCommandInput, StartConfigRulesEvaluationCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/StartConfigRulesEvaluationCommand";
    import { StartConfigurationRecorderCommandInput, StartConfigurationRecorderCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/StartConfigurationRecorderCommand";
    import { StartRemediationExecutionCommandInput, StartRemediationExecutionCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/StartRemediationExecutionCommand";
    import { StopConfigurationRecorderCommandInput, StopConfigurationRecorderCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/StopConfigurationRecorderCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/commands/UntagResourceCommand";
    export type ServiceInputTypes = BatchGetAggregateResourceConfigCommandInput | BatchGetResourceConfigCommandInput | DeleteAggregationAuthorizationCommandInput | DeleteConfigRuleCommandInput | DeleteConfigurationAggregatorCommandInput | DeleteConfigurationRecorderCommandInput | DeleteConformancePackCommandInput | DeleteDeliveryChannelCommandInput | DeleteEvaluationResultsCommandInput | DeleteOrganizationConfigRuleCommandInput | DeleteOrganizationConformancePackCommandInput | DeletePendingAggregationRequestCommandInput | DeleteRemediationConfigurationCommandInput | DeleteRemediationExceptionsCommandInput | DeleteResourceConfigCommandInput | DeleteRetentionConfigurationCommandInput | DeleteStoredQueryCommandInput | DeliverConfigSnapshotCommandInput | DescribeAggregateComplianceByConfigRulesCommandInput | DescribeAggregateComplianceByConformancePacksCommandInput | DescribeAggregationAuthorizationsCommandInput | DescribeComplianceByConfigRuleCommandInput | DescribeComplianceByResourceCommandInput | DescribeConfigRuleEvaluationStatusCommandInput | DescribeConfigRulesCommandInput | DescribeConfigurationAggregatorSourcesStatusCommandInput | DescribeConfigurationAggregatorsCommandInput | DescribeConfigurationRecorderStatusCommandInput | DescribeConfigurationRecordersCommandInput | DescribeConformancePackComplianceCommandInput | DescribeConformancePackStatusCommandInput | DescribeConformancePacksCommandInput | DescribeDeliveryChannelStatusCommandInput | DescribeDeliveryChannelsCommandInput | DescribeOrganizationConfigRuleStatusesCommandInput | DescribeOrganizationConfigRulesCommandInput | DescribeOrganizationConformancePackStatusesCommandInput | DescribeOrganizationConformancePacksCommandInput | DescribePendingAggregationRequestsCommandInput | DescribeRemediationConfigurationsCommandInput | DescribeRemediationExceptionsCommandInput | DescribeRemediationExecutionStatusCommandInput | DescribeRetentionConfigurationsCommandInput | GetAggregateComplianceDetailsByConfigRuleCommandInput | GetAggregateConfigRuleComplianceSummaryCommandInput | GetAggregateConformancePackComplianceSummaryCommandInput | GetAggregateDiscoveredResourceCountsCommandInput | GetAggregateResourceConfigCommandInput | GetComplianceDetailsByConfigRuleCommandInput | GetComplianceDetailsByResourceCommandInput | GetComplianceSummaryByConfigRuleCommandInput | GetComplianceSummaryByResourceTypeCommandInput | GetConformancePackComplianceDetailsCommandInput | GetConformancePackComplianceSummaryCommandInput | GetCustomRulePolicyCommandInput | GetDiscoveredResourceCountsCommandInput | GetOrganizationConfigRuleDetailedStatusCommandInput | GetOrganizationConformancePackDetailedStatusCommandInput | GetOrganizationCustomRulePolicyCommandInput | GetResourceConfigHistoryCommandInput | GetStoredQueryCommandInput | ListAggregateDiscoveredResourcesCommandInput | ListDiscoveredResourcesCommandInput | ListStoredQueriesCommandInput | ListTagsForResourceCommandInput | PutAggregationAuthorizationCommandInput | PutConfigRuleCommandInput | PutConfigurationAggregatorCommandInput | PutConfigurationRecorderCommandInput | PutConformancePackCommandInput | PutDeliveryChannelCommandInput | PutEvaluationsCommandInput | PutExternalEvaluationCommandInput | PutOrganizationConfigRuleCommandInput | PutOrganizationConformancePackCommandInput | PutRemediationConfigurationsCommandInput | PutRemediationExceptionsCommandInput | PutResourceConfigCommandInput | PutRetentionConfigurationCommandInput | PutStoredQueryCommandInput | SelectAggregateResourceConfigCommandInput | SelectResourceConfigCommandInput | StartConfigRulesEvaluationCommandInput | StartConfigurationRecorderCommandInput | StartRemediationExecutionCommandInput | StopConfigurationRecorderCommandInput | TagResourceCommandInput | UntagResourceCommandInput;
    export type ServiceOutputTypes = BatchGetAggregateResourceConfigCommandOutput | BatchGetResourceConfigCommandOutput | DeleteAggregationAuthorizationCommandOutput | DeleteConfigRuleCommandOutput | DeleteConfigurationAggregatorCommandOutput | DeleteConfigurationRecorderCommandOutput | DeleteConformancePackCommandOutput | DeleteDeliveryChannelCommandOutput | DeleteEvaluationResultsCommandOutput | DeleteOrganizationConfigRuleCommandOutput | DeleteOrganizationConformancePackCommandOutput | DeletePendingAggregationRequestCommandOutput | DeleteRemediationConfigurationCommandOutput | DeleteRemediationExceptionsCommandOutput | DeleteResourceConfigCommandOutput | DeleteRetentionConfigurationCommandOutput | DeleteStoredQueryCommandOutput | DeliverConfigSnapshotCommandOutput | DescribeAggregateComplianceByConfigRulesCommandOutput | DescribeAggregateComplianceByConformancePacksCommandOutput | DescribeAggregationAuthorizationsCommandOutput | DescribeComplianceByConfigRuleCommandOutput | DescribeComplianceByResourceCommandOutput | DescribeConfigRuleEvaluationStatusCommandOutput | DescribeConfigRulesCommandOutput | DescribeConfigurationAggregatorSourcesStatusCommandOutput | DescribeConfigurationAggregatorsCommandOutput | DescribeConfigurationRecorderStatusCommandOutput | DescribeConfigurationRecordersCommandOutput | DescribeConformancePackComplianceCommandOutput | DescribeConformancePackStatusCommandOutput | DescribeConformancePacksCommandOutput | DescribeDeliveryChannelStatusCommandOutput | DescribeDeliveryChannelsCommandOutput | DescribeOrganizationConfigRuleStatusesCommandOutput | DescribeOrganizationConfigRulesCommandOutput | DescribeOrganizationConformancePackStatusesCommandOutput | DescribeOrganizationConformancePacksCommandOutput | DescribePendingAggregationRequestsCommandOutput | DescribeRemediationConfigurationsCommandOutput | DescribeRemediationExceptionsCommandOutput | DescribeRemediationExecutionStatusCommandOutput | DescribeRetentionConfigurationsCommandOutput | GetAggregateComplianceDetailsByConfigRuleCommandOutput | GetAggregateConfigRuleComplianceSummaryCommandOutput | GetAggregateConformancePackComplianceSummaryCommandOutput | GetAggregateDiscoveredResourceCountsCommandOutput | GetAggregateResourceConfigCommandOutput | GetComplianceDetailsByConfigRuleCommandOutput | GetComplianceDetailsByResourceCommandOutput | GetComplianceSummaryByConfigRuleCommandOutput | GetComplianceSummaryByResourceTypeCommandOutput | GetConformancePackComplianceDetailsCommandOutput | GetConformancePackComplianceSummaryCommandOutput | GetCustomRulePolicyCommandOutput | GetDiscoveredResourceCountsCommandOutput | GetOrganizationConfigRuleDetailedStatusCommandOutput | GetOrganizationConformancePackDetailedStatusCommandOutput | GetOrganizationCustomRulePolicyCommandOutput | GetResourceConfigHistoryCommandOutput | GetStoredQueryCommandOutput | ListAggregateDiscoveredResourcesCommandOutput | ListDiscoveredResourcesCommandOutput | ListStoredQueriesCommandOutput | ListTagsForResourceCommandOutput | PutAggregationAuthorizationCommandOutput | PutConfigRuleCommandOutput | PutConfigurationAggregatorCommandOutput | PutConfigurationRecorderCommandOutput | PutConformancePackCommandOutput | PutDeliveryChannelCommandOutput | PutEvaluationsCommandOutput | PutExternalEvaluationCommandOutput | PutOrganizationConfigRuleCommandOutput | PutOrganizationConformancePackCommandOutput | PutRemediationConfigurationsCommandOutput | PutRemediationExceptionsCommandOutput | PutResourceConfigCommandOutput | PutRetentionConfigurationCommandOutput | PutStoredQueryCommandOutput | SelectAggregateResourceConfigCommandOutput | SelectResourceConfigCommandOutput | StartConfigRulesEvaluationCommandOutput | StartConfigurationRecorderCommandOutput | StartRemediationExecutionCommandOutput | StopConfigurationRecorderCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type ConfigServiceClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of ConfigServiceClient class constructor that set the region, credentials and other options.
        */
    export interface ConfigServiceClientConfig extends ConfigServiceClientConfigType {
    }
    type ConfigServiceClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of ConfigServiceClient class. This is resolved and normalized from the {@link ConfigServiceClientConfig | constructor configuration interface}.
        */
    export interface ConfigServiceClientResolvedConfig extends ConfigServiceClientResolvedConfigType {
    }
    /**
        * <fullname>Config</fullname>
        *
        * 		       <p>Config provides a way to keep track of the configurations
        * 			of all the Amazon Web Services resources associated with your Amazon Web Services account. You can
        * 			use Config to get the current and historical configurations of
        * 			each Amazon Web Services resource and also to get information about the relationship
        * 			between the resources. An Amazon Web Services resource can be an Amazon Compute
        * 			Cloud (Amazon EC2) instance, an Elastic Block Store (EBS) volume, an
        * 			elastic network Interface (ENI), or a security group. For a complete
        * 			list of resources currently supported by Config, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/resource-config-reference.html#supported-resources">Supported Amazon Web Services resources</a>.</p>
        *
        * 		       <p>You can access and manage Config through the Amazon Web Services Management
        * 			Console, the Amazon Web Services Command Line Interface (Amazon Web Services CLI), the Config
        * 			API, or the Amazon Web Services SDKs for Config. This reference guide contains
        * 			documentation for the Config API and the Amazon Web Services CLI commands that
        * 			you can use to manage Config. The Config API uses the
        * 			Signature Version 4 protocol for signing requests. For more
        * 			information about how to sign a request with this protocol, see
        * 				<a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature
        * 				Version 4 Signing Process</a>. For detailed information
        * 			about Config features and their associated actions or commands,
        * 			as well as how to work with Amazon Web Services Management Console, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/WhatIsConfig.html">What Is Config</a> in the <i>Config Developer
        * 				Guide</i>.</p>
        */
    export class ConfigServiceClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, ConfigServiceClientResolvedConfig> {
            /**
                * The resolved configuration of ConfigServiceClient class. This is resolved and normalized from the {@link ConfigServiceClientConfig | constructor configuration interface}.
                */
            readonly config: ConfigServiceClientResolvedConfig;
            constructor(configuration: ConfigServiceClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { ConfigServiceServiceException as __BaseException } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/ConfigServiceServiceException";
    /**
        * <p>A collection of accounts and regions.</p>
        */
    export interface AccountAggregationSource {
            /**
                * <p>The 12-digit account ID of the account being aggregated.
                * 		</p>
                */
            AccountIds: string[] | undefined;
            /**
                * <p>If true, aggregate existing Config regions and future
                * 			regions.</p>
                */
            AllAwsRegions?: boolean;
            /**
                * <p>The source regions being aggregated.</p>
                */
            AwsRegions?: string[];
    }
    export namespace AccountAggregationSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountAggregationSource) => any;
    }
    /**
        * <p>The number of Amazon Web Services resources or Config rules responsible for
        * 			the current compliance of the item, up to a maximum
        * 			number.</p>
        */
    export interface ComplianceContributorCount {
            /**
                * <p>The number of Amazon Web Services resources or Config rules responsible for
                * 			the current compliance of the item.</p>
                */
            CappedCount?: number;
            /**
                * <p>Indicates whether the maximum count is reached.</p>
                */
            CapExceeded?: boolean;
    }
    export namespace ComplianceContributorCount {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComplianceContributorCount) => any;
    }
    export enum ComplianceType {
            Compliant = "COMPLIANT",
            Insufficient_Data = "INSUFFICIENT_DATA",
            Non_Compliant = "NON_COMPLIANT",
            Not_Applicable = "NOT_APPLICABLE"
    }
    /**
        * <p>Indicates whether an Amazon Web Services resource or Config rule is
        * 			compliant and provides the number of contributors that affect the
        * 			compliance.</p>
        */
    export interface Compliance {
            /**
                * <p>Indicates whether an Amazon Web Services resource or Config rule is
                * 			compliant.</p>
                * 		       <p>A resource is compliant if it complies with all of the Config rules that evaluate it. A resource is noncompliant if it does
                * 			not comply with one or more of these rules.</p>
                * 		       <p>A rule is compliant if all of the resources that the rule
                * 			evaluates comply with it. A rule is noncompliant if any of these
                * 			resources do not comply.</p>
                * 		       <p>Config returns the <code>INSUFFICIENT_DATA</code> value
                * 			when no evaluation results are available for the Amazon Web Services resource or Config rule.</p>
                * 		       <p>For the <code>Compliance</code> data type, Config supports
                * 			only <code>COMPLIANT</code>, <code>NON_COMPLIANT</code>, and
                * 				<code>INSUFFICIENT_DATA</code> values. Config does not
                * 			support the <code>NOT_APPLICABLE</code> value for the
                * 				<code>Compliance</code> data type.</p>
                */
            ComplianceType?: ComplianceType | string;
            /**
                * <p>The number of Amazon Web Services resources or Config rules that cause a
                * 			result of <code>NON_COMPLIANT</code>, up to a maximum
                * 			number.</p>
                */
            ComplianceContributorCount?: ComplianceContributorCount;
    }
    export namespace Compliance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Compliance) => any;
    }
    /**
        * <p>Indicates whether an Config rule is compliant based on
        * 			account ID, region, compliance, and rule name.</p>
        * 		       <p>A rule is compliant if all of the resources that the rule
        * 			evaluated comply with it. It is noncompliant if any of these
        * 			resources do not comply.</p>
        */
    export interface AggregateComplianceByConfigRule {
            /**
                * <p>The name of the Config rule.</p>
                */
            ConfigRuleName?: string;
            /**
                * <p>Indicates whether an Amazon Web Services resource or Config rule is
                * 			compliant and provides the number of contributors that affect the
                * 			compliance.</p>
                */
            Compliance?: Compliance;
            /**
                * <p>The 12-digit account ID of the source account.</p>
                */
            AccountId?: string;
            /**
                * <p>The source region from where the data is aggregated.</p>
                */
            AwsRegion?: string;
    }
    export namespace AggregateComplianceByConfigRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AggregateComplianceByConfigRule) => any;
    }
    export enum ConformancePackComplianceType {
            COMPLIANT = "COMPLIANT",
            INSUFFICIENT_DATA = "INSUFFICIENT_DATA",
            NON_COMPLIANT = "NON_COMPLIANT"
    }
    /**
        * <p>Provides the number of compliant and noncompliant rules within a conformance pack.
        * 			Also provides the compliance status of the conformance pack and the total rule count which includes compliant rules, noncompliant rules, and rules that cannot be evaluated due to insufficient data.</p>
        *
        * 		       <p>A conformance pack is compliant if all of the rules in a conformance packs are compliant. It is noncompliant if any of the rules are not compliant.
        * 			The compliance status of a conformance pack is INSUFFICIENT_DATA only if all rules within a conformance pack cannot be evaluated due to insufficient data.
        * 			If some of the rules in a conformance pack are compliant but the compliance status of other rules in that same conformance pack is INSUFFICIENT_DATA, the conformance pack shows compliant.</p>
        */
    export interface AggregateConformancePackCompliance {
            /**
                * <p>The compliance status of the conformance pack.</p>
                */
            ComplianceType?: ConformancePackComplianceType | string;
            /**
                * <p>The number of compliant Config Rules.</p>
                */
            CompliantRuleCount?: number;
            /**
                * <p>The number of noncompliant Config Rules.</p>
                */
            NonCompliantRuleCount?: number;
            /**
                * <p>Total number of compliant rules, noncompliant rules, and the rules that do not have any applicable resources to evaluate upon resulting in insufficient data.</p>
                */
            TotalRuleCount?: number;
    }
    export namespace AggregateConformancePackCompliance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AggregateConformancePackCompliance) => any;
    }
    /**
        * <p>Provides aggregate compliance of the conformance pack. Indicates whether a conformance pack is compliant based on the name of the conformance pack, account ID, and region.</p>
        * 		       <p>A conformance pack is compliant if all of the rules in a conformance packs are compliant. It is noncompliant if any of the rules are not compliant.
        * 			The compliance status of a conformance pack is INSUFFICIENT_DATA only if all rules within a conformance pack cannot be evaluated due to insufficient data.
        * 			If some of the rules in a conformance pack are compliant but the compliance status of other rules in that same conformance pack is INSUFFICIENT_DATA, the conformance pack shows compliant.</p>
        */
    export interface AggregateComplianceByConformancePack {
            /**
                * <p>The name of the conformance pack.</p>
                */
            ConformancePackName?: string;
            /**
                * <p>The compliance status of the conformance pack.</p>
                */
            Compliance?: AggregateConformancePackCompliance;
            /**
                * <p>The 12-digit Amazon Web Services account ID of the source account.</p>
                */
            AccountId?: string;
            /**
                * <p>The source Amazon Web Services Region from where the data is aggregated.</p>
                */
            AwsRegion?: string;
    }
    export namespace AggregateComplianceByConformancePack {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AggregateComplianceByConformancePack) => any;
    }
    /**
        * <p>The number of Config rules or Amazon Web Services resources that are
        * 			compliant and noncompliant.</p>
        */
    export interface ComplianceSummary {
            /**
                * <p>The number of Config rules or Amazon Web Services resources that are
                * 			compliant, up to a maximum of 25 for rules and 100 for
                * 			resources.</p>
                */
            CompliantResourceCount?: ComplianceContributorCount;
            /**
                * <p>The number of Config rules or Amazon Web Services resources that are
                * 			noncompliant, up to a maximum of 25 for rules and 100 for
                * 			resources.</p>
                */
            NonCompliantResourceCount?: ComplianceContributorCount;
            /**
                * <p>The time that Config created the compliance
                * 			summary.</p>
                */
            ComplianceSummaryTimestamp?: Date;
    }
    export namespace ComplianceSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComplianceSummary) => any;
    }
    /**
        * <p>Returns the number of compliant and noncompliant rules for one
        * 			or more accounts and regions in an aggregator.</p>
        */
    export interface AggregateComplianceCount {
            /**
                * <p>The 12-digit account ID or region based on the GroupByKey
                * 			value.</p>
                */
            GroupName?: string;
            /**
                * <p>The number of compliant and noncompliant Config
                * 			rules.</p>
                */
            ComplianceSummary?: ComplianceSummary;
    }
    export namespace AggregateComplianceCount {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AggregateComplianceCount) => any;
    }
    /**
        * <p>The number of conformance packs that are compliant and noncompliant.</p>
        */
    export interface AggregateConformancePackComplianceCount {
            /**
                * <p>Number of compliant conformance packs.</p>
                */
            CompliantConformancePackCount?: number;
            /**
                * <p>Number of noncompliant conformance packs.</p>
                */
            NonCompliantConformancePackCount?: number;
    }
    export namespace AggregateConformancePackComplianceCount {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AggregateConformancePackComplianceCount) => any;
    }
    /**
        * <p>Filters the conformance packs based on an account ID, region, compliance type, and the name of the conformance pack.</p>
        */
    export interface AggregateConformancePackComplianceFilters {
            /**
                * <p>The name of the conformance pack.</p>
                */
            ConformancePackName?: string;
            /**
                * <p>The compliance status of the conformance pack.</p>
                */
            ComplianceType?: ConformancePackComplianceType | string;
            /**
                * <p>The 12-digit Amazon Web Services account ID of the source account.</p>
                */
            AccountId?: string;
            /**
                * <p>The source Amazon Web Services Region from where the data is aggregated.</p>
                */
            AwsRegion?: string;
    }
    export namespace AggregateConformancePackComplianceFilters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AggregateConformancePackComplianceFilters) => any;
    }
    /**
        * <p>Provides a summary of compliance based on either account ID or region. </p>
        */
    export interface AggregateConformancePackComplianceSummary {
            /**
                * <p>Returns an <code>AggregateConformancePackComplianceCount</code> object. </p>
                */
            ComplianceSummary?: AggregateConformancePackComplianceCount;
            /**
                * <p>Groups the result based on Amazon Web Services account ID or Amazon Web Services Region.</p>
                */
            GroupName?: string;
    }
    export namespace AggregateConformancePackComplianceSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AggregateConformancePackComplianceSummary) => any;
    }
    /**
        * <p>Filters the results based on account ID and region. </p>
        */
    export interface AggregateConformancePackComplianceSummaryFilters {
            /**
                * <p>The 12-digit Amazon Web Services account ID of the source account.</p>
                */
            AccountId?: string;
            /**
                * <p>The source Amazon Web Services Region from where the data is aggregated.</p>
                */
            AwsRegion?: string;
    }
    export namespace AggregateConformancePackComplianceSummaryFilters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AggregateConformancePackComplianceSummaryFilters) => any;
    }
    export enum AggregateConformancePackComplianceSummaryGroupKey {
            ACCOUNT_ID = "ACCOUNT_ID",
            AWS_REGION = "AWS_REGION"
    }
    export enum AggregatedSourceStatusType {
            FAILED = "FAILED",
            OUTDATED = "OUTDATED",
            SUCCEEDED = "SUCCEEDED"
    }
    export enum AggregatedSourceType {
            ACCOUNT = "ACCOUNT",
            ORGANIZATION = "ORGANIZATION"
    }
    /**
        * <p>The current sync status between the source and the aggregator
        * 			account.</p>
        */
    export interface AggregatedSourceStatus {
            /**
                * <p>The source account ID or an organization.</p>
                */
            SourceId?: string;
            /**
                * <p>The source account or an organization.</p>
                */
            SourceType?: AggregatedSourceType | string;
            /**
                * <p>The region authorized to collect aggregated data.</p>
                */
            AwsRegion?: string;
            /**
                * <p>Filters the last updated status type.</p>
                * 		       <ul>
                *             <li>
                * 				           <p>Valid value FAILED indicates errors while moving
                * 					data.</p>
                * 			         </li>
                *             <li>
                * 				           <p>Valid value SUCCEEDED indicates the data was
                * 					successfully moved.</p>
                * 			         </li>
                *             <li>
                * 				           <p>Valid value OUTDATED indicates the data is not the most
                * 					recent.</p>
                * 			         </li>
                *          </ul>
                */
            LastUpdateStatus?: AggregatedSourceStatusType | string;
            /**
                * <p>The time of the last update.</p>
                */
            LastUpdateTime?: Date;
            /**
                * <p>The error code that Config returned when the source account
                * 			aggregation last failed.</p>
                */
            LastErrorCode?: string;
            /**
                * <p>The message indicating that the source account aggregation
                * 			failed due to an error.</p>
                */
            LastErrorMessage?: string;
    }
    export namespace AggregatedSourceStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AggregatedSourceStatus) => any;
    }
    /**
        * <p>Identifies an Config rule that evaluated an Amazon Web Services resource,
        * 			and provides the type and ID of the resource that the rule
        * 			evaluated.</p>
        */
    export interface EvaluationResultQualifier {
            /**
                * <p>The name of the Config rule that was used in the
                * 			evaluation.</p>
                */
            ConfigRuleName?: string;
            /**
                * <p>The type of Amazon Web Services resource that was evaluated.</p>
                */
            ResourceType?: string;
            /**
                * <p>The ID of the evaluated Amazon Web Services resource.</p>
                */
            ResourceId?: string;
    }
    export namespace EvaluationResultQualifier {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EvaluationResultQualifier) => any;
    }
    /**
        * <p>Uniquely identifies an evaluation result.</p>
        */
    export interface EvaluationResultIdentifier {
            /**
                * <p>Identifies an Config rule used to evaluate an Amazon Web Services resource,
                * 			and provides the type and ID of the evaluated resource.</p>
                */
            EvaluationResultQualifier?: EvaluationResultQualifier;
            /**
                * <p>The time of the event that triggered the evaluation of your Amazon Web Services
                * 			resources. The time can indicate when Config delivered a
                * 			configuration item change notification, or it can indicate when Config delivered the configuration snapshot, depending on which
                * 			event triggered the evaluation.</p>
                */
            OrderingTimestamp?: Date;
    }
    export namespace EvaluationResultIdentifier {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EvaluationResultIdentifier) => any;
    }
    /**
        * <p>The details of an Config evaluation for an account ID and
        * 			region in an aggregator. Provides the Amazon Web Services resource that was
        * 			evaluated, the compliance of the resource, related time stamps, and
        * 			supplementary information. </p>
        */
    export interface AggregateEvaluationResult {
            /**
                * <p>Uniquely identifies the evaluation result.</p>
                */
            EvaluationResultIdentifier?: EvaluationResultIdentifier;
            /**
                * <p>The resource compliance status.</p>
                * 		       <p>For the <code>AggregationEvaluationResult</code> data type, Config supports only the <code>COMPLIANT</code> and
                * 				<code>NON_COMPLIANT</code>. Config does not support the
                * 				<code>NOT_APPLICABLE</code> and <code>INSUFFICIENT_DATA</code>
                * 			value.</p>
                */
            ComplianceType?: ComplianceType | string;
            /**
                * <p>The time when Config recorded the aggregate evaluation
                * 			result.</p>
                */
            ResultRecordedTime?: Date;
            /**
                * <p>The time when the Config rule evaluated the Amazon Web Services
                * 			resource.</p>
                */
            ConfigRuleInvokedTime?: Date;
            /**
                * <p>Supplementary information about how the agrregate evaluation
                * 			determined the compliance.</p>
                */
            Annotation?: string;
            /**
                * <p>The 12-digit account ID of the source account.</p>
                */
            AccountId?: string;
            /**
                * <p>The source region from where the data is aggregated.</p>
                */
            AwsRegion?: string;
    }
    export namespace AggregateEvaluationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AggregateEvaluationResult) => any;
    }
    export enum ResourceType {
            AccessAnalyzerAnalyzer = "AWS::AccessAnalyzer::Analyzer",
            AccountPublicAccessBlock = "AWS::S3::AccountPublicAccessBlock",
            Alarm = "AWS::CloudWatch::Alarm",
            Api = "AWS::ApiGatewayV2::Api",
            Application = "AWS::ElasticBeanstalk::Application",
            ApplicationVersion = "AWS::ElasticBeanstalk::ApplicationVersion",
            AssociationCompliance = "AWS::SSM::AssociationCompliance",
            AutoScalingGroup = "AWS::AutoScaling::AutoScalingGroup",
            BackupPlan = "AWS::Backup::BackupPlan",
            BackupRecoveryPoint = "AWS::Backup::RecoveryPoint",
            BackupSelection = "AWS::Backup::BackupSelection",
            BackupVault = "AWS::Backup::BackupVault",
            BatchComputeEnvironment = "AWS::Batch::ComputeEnvironment",
            BatchJobQueue = "AWS::Batch::JobQueue",
            Bucket = "AWS::S3::Bucket",
            Certificate = "AWS::ACM::Certificate",
            CloudFormationProduct = "AWS::ServiceCatalog::CloudFormationProduct",
            CloudFormationProvisionedProduct = "AWS::ServiceCatalog::CloudFormationProvisionedProduct",
            Cluster = "AWS::Redshift::Cluster",
            ClusterParameterGroup = "AWS::Redshift::ClusterParameterGroup",
            ClusterSecurityGroup = "AWS::Redshift::ClusterSecurityGroup",
            ClusterSnapshot = "AWS::Redshift::ClusterSnapshot",
            ClusterSubnetGroup = "AWS::Redshift::ClusterSubnetGroup",
            CodeDeployApplication = "AWS::CodeDeploy::Application",
            CodeDeployDeploymentConfig = "AWS::CodeDeploy::DeploymentConfig",
            CodeDeployDeploymentGroup = "AWS::CodeDeploy::DeploymentGroup",
            ConformancePackCompliance = "AWS::Config::ConformancePackCompliance",
            CustomerGateway = "AWS::EC2::CustomerGateway",
            DBCluster = "AWS::RDS::DBCluster",
            DBClusterSnapshot = "AWS::RDS::DBClusterSnapshot",
            DBInstance = "AWS::RDS::DBInstance",
            DBSecurityGroup = "AWS::RDS::DBSecurityGroup",
            DBSnapshot = "AWS::RDS::DBSnapshot",
            DBSubnetGroup = "AWS::RDS::DBSubnetGroup",
            DMSEventSubscription = "AWS::DMS::EventSubscription",
            DMSReplicationSubnetGroup = "AWS::DMS::ReplicationSubnetGroup",
            Distribution = "AWS::CloudFront::Distribution",
            Domain = "AWS::Elasticsearch::Domain",
            ECRPublicRepository = "AWS::ECR::PublicRepository",
            ECRRepository = "AWS::ECR::Repository",
            ECSCluster = "AWS::ECS::Cluster",
            ECSService = "AWS::ECS::Service",
            ECSTaskDefinition = "AWS::ECS::TaskDefinition",
            EFSAccessPoint = "AWS::EFS::AccessPoint",
            EFSFileSystem = "AWS::EFS::FileSystem",
            EIP = "AWS::EC2::EIP",
            EKSCluster = "AWS::EKS::Cluster",
            EMRSecurityConfiguration = "AWS::EMR::SecurityConfiguration",
            EgressOnlyInternetGateway = "AWS::EC2::EgressOnlyInternetGateway",
            EncryptionConfig = "AWS::XRay::EncryptionConfig",
            Environment = "AWS::ElasticBeanstalk::Environment",
            EventSubscription = "AWS::RDS::EventSubscription",
            FileData = "AWS::SSM::FileData",
            FlowLog = "AWS::EC2::FlowLog",
            Function = "AWS::Lambda::Function",
            Group = "AWS::IAM::Group",
            GuardDutyDetector = "AWS::GuardDuty::Detector",
            Host = "AWS::EC2::Host",
            IPSetV2 = "AWS::WAFv2::IPSet",
            Instance = "AWS::EC2::Instance",
            InternetGateway = "AWS::EC2::InternetGateway",
            Key = "AWS::KMS::Key",
            KinesisStream = "AWS::Kinesis::Stream",
            KinesisStreamConsumer = "AWS::Kinesis::StreamConsumer",
            LaunchConfiguration = "AWS::AutoScaling::LaunchConfiguration",
            LaunchTemplate = "AWS::EC2::LaunchTemplate",
            ListenerV2 = "AWS::ElasticLoadBalancingV2::Listener",
            LoadBalancer = "AWS::ElasticLoadBalancing::LoadBalancer",
            LoadBalancerV2 = "AWS::ElasticLoadBalancingV2::LoadBalancer",
            MSKCluster = "AWS::MSK::Cluster",
            ManagedInstanceInventory = "AWS::SSM::ManagedInstanceInventory",
            ManagedRuleSetV2 = "AWS::WAFv2::ManagedRuleSet",
            NatGateway = "AWS::EC2::NatGateway",
            NetworkAcl = "AWS::EC2::NetworkAcl",
            NetworkFirewallFirewall = "AWS::NetworkFirewall::Firewall",
            NetworkFirewallFirewallPolicy = "AWS::NetworkFirewall::FirewallPolicy",
            NetworkFirewallRuleGroup = "AWS::NetworkFirewall::RuleGroup",
            NetworkInterface = "AWS::EC2::NetworkInterface",
            OpenSearchDomain = "AWS::OpenSearch::Domain",
            PatchCompliance = "AWS::SSM::PatchCompliance",
            Pipeline = "AWS::CodePipeline::Pipeline",
            Policy = "AWS::IAM::Policy",
            Portfolio = "AWS::ServiceCatalog::Portfolio",
            Project = "AWS::CodeBuild::Project",
            Protection = "AWS::Shield::Protection",
            QLDBLedger = "AWS::QLDB::Ledger",
            Queue = "AWS::SQS::Queue",
            RateBasedRule = "AWS::WAF::RateBasedRule",
            RedshiftEventSubscription = "AWS::Redshift::EventSubscription",
            RegexPatternSetV2 = "AWS::WAFv2::RegexPatternSet",
            RegionalProtection = "AWS::ShieldRegional::Protection",
            RegionalRateBasedRule = "AWS::WAFRegional::RateBasedRule",
            RegionalRule = "AWS::WAFRegional::Rule",
            RegionalRuleGroup = "AWS::WAFRegional::RuleGroup",
            RegionalWebACL = "AWS::WAFRegional::WebACL",
            RegisteredHAInstance = "AWS::EC2::RegisteredHAInstance",
            ResourceCompliance = "AWS::Config::ResourceCompliance",
            RestApi = "AWS::ApiGateway::RestApi",
            Role = "AWS::IAM::Role",
            Route53ResolverResolverEndpoint = "AWS::Route53Resolver::ResolverEndpoint",
            Route53ResolverResolverRule = "AWS::Route53Resolver::ResolverRule",
            Route53ResolverResolverRuleAssociation = "AWS::Route53Resolver::ResolverRuleAssociation",
            RouteTable = "AWS::EC2::RouteTable",
            Rule = "AWS::WAF::Rule",
            RuleGroup = "AWS::WAF::RuleGroup",
            RuleGroupV2 = "AWS::WAFv2::RuleGroup",
            SageMakerCodeRepository = "AWS::SageMaker::CodeRepository",
            SageMakerModel = "AWS::SageMaker::Model",
            ScalingPolicy = "AWS::AutoScaling::ScalingPolicy",
            ScheduledAction = "AWS::AutoScaling::ScheduledAction",
            Secret = "AWS::SecretsManager::Secret",
            SecurityGroup = "AWS::EC2::SecurityGroup",
            Stack = "AWS::CloudFormation::Stack",
            Stage = "AWS::ApiGateway::Stage",
            StageV2 = "AWS::ApiGatewayV2::Stage",
            StepFunctionsActivity = "AWS::StepFunctions::Activity",
            StepFunctionsStateMachine = "AWS::StepFunctions::StateMachine",
            StreamingDistribution = "AWS::CloudFront::StreamingDistribution",
            Subnet = "AWS::EC2::Subnet",
            Table = "AWS::DynamoDB::Table",
            Topic = "AWS::SNS::Topic",
            Trail = "AWS::CloudTrail::Trail",
            TransitGateway = "AWS::EC2::TransitGateway",
            User = "AWS::IAM::User",
            VPC = "AWS::EC2::VPC",
            VPCEndpoint = "AWS::EC2::VPCEndpoint",
            VPCEndpointService = "AWS::EC2::VPCEndpointService",
            VPCPeeringConnection = "AWS::EC2::VPCPeeringConnection",
            VPNConnection = "AWS::EC2::VPNConnection",
            VPNGateway = "AWS::EC2::VPNGateway",
            Volume = "AWS::EC2::Volume",
            WebACL = "AWS::WAF::WebACL",
            WebACLV2 = "AWS::WAFv2::WebACL",
            WorkSpacesConnectionAlias = "AWS::WorkSpaces::ConnectionAlias",
            WorkSpacesWorkspace = "AWS::WorkSpaces::Workspace"
    }
    /**
        * <p>The details that identify a resource that is collected by Config aggregator, including the resource type, ID, (if available) the custom resource name, the source account, and source region.</p>
        */
    export interface AggregateResourceIdentifier {
            /**
                * <p>The 12-digit account ID of the source account.</p>
                */
            SourceAccountId: string | undefined;
            /**
                * <p>The source region where data is aggregated.</p>
                */
            SourceRegion: string | undefined;
            /**
                * <p>The ID of the Amazon Web Services resource.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The type of the Amazon Web Services resource.</p>
                */
            ResourceType: ResourceType | string | undefined;
            /**
                * <p>The name of the Amazon Web Services resource.</p>
                */
            ResourceName?: string;
    }
    export namespace AggregateResourceIdentifier {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AggregateResourceIdentifier) => any;
    }
    /**
        * <p>An object that represents the authorizations granted to
        * 			aggregator accounts and regions.</p>
        */
    export interface AggregationAuthorization {
            /**
                * <p>The Amazon Resource Name (ARN) of the aggregation
                * 			object.</p>
                */
            AggregationAuthorizationArn?: string;
            /**
                * <p>The 12-digit account ID of the account authorized to aggregate
                * 			data.</p>
                */
            AuthorizedAccountId?: string;
            /**
                * <p>The region authorized to collect aggregated data.</p>
                */
            AuthorizedAwsRegion?: string;
            /**
                * <p>The time stamp when the aggregation authorization was
                * 			created.</p>
                */
            CreationTime?: Date;
    }
    export namespace AggregationAuthorization {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AggregationAuthorization) => any;
    }
    export enum ConfigurationItemStatus {
            OK = "OK",
            ResourceDeleted = "ResourceDeleted",
            ResourceDeletedNotRecorded = "ResourceDeletedNotRecorded",
            ResourceDiscovered = "ResourceDiscovered",
            ResourceNotRecorded = "ResourceNotRecorded"
    }
    /**
        * <p>The detailed configuration of a specified resource.</p>
        */
    export interface BaseConfigurationItem {
            /**
                * <p>The version number of the resource configuration.</p>
                */
            version?: string;
            /**
                * <p>The 12-digit Amazon Web Services account ID associated with the resource.</p>
                */
            accountId?: string;
            /**
                * <p>The time when the configuration recording was initiated.</p>
                */
            configurationItemCaptureTime?: Date;
            /**
                * <p>The configuration item status. The valid values are:</p>
                *
                * 		       <ul>
                *             <li>
                *                <p>OK – The resource configuration has been updated</p>
                *             </li>
                *             <li>
                *                <p>ResourceDiscovered – The resource was newly discovered</p>
                *             </li>
                *             <li>
                *                <p>ResourceNotRecorded – The resource was discovered but its configuration was not recorded since the recorder excludes the recording of resources of this type</p>
                *             </li>
                *             <li>
                *                <p>ResourceDeleted – The resource was deleted</p>
                *             </li>
                *             <li>
                *                <p>ResourceDeletedNotRecorded – The resource was deleted but its configuration was not recorded since the recorder excludes the recording of resources of this type</p>
                *             </li>
                *          </ul>
                * 		       <note>
                *             <p>The CIs do not incur any cost.</p>
                *          </note>
                */
            configurationItemStatus?: ConfigurationItemStatus | string;
            /**
                * <p>An identifier that indicates the ordering of the configuration
                * 			items of a resource.</p>
                */
            configurationStateId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            arn?: string;
            /**
                * <p>The type of Amazon Web Services resource.</p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The ID of the resource (for example., sg-xxxxxx).</p>
                */
            resourceId?: string;
            /**
                * <p>The custom name of the resource, if available.</p>
                */
            resourceName?: string;
            /**
                * <p>The region where the resource resides.</p>
                */
            awsRegion?: string;
            /**
                * <p>The Availability Zone associated with the resource.</p>
                */
            availabilityZone?: string;
            /**
                * <p>The time stamp when the resource was created.</p>
                */
            resourceCreationTime?: Date;
            /**
                * <p>The description of the resource configuration.</p>
                */
            configuration?: string;
            /**
                * <p>Configuration attributes that Config returns for certain
                * 			resource types to supplement the information returned for the
                * 			configuration parameter.</p>
                */
            supplementaryConfiguration?: Record<string, string>;
    }
    export namespace BaseConfigurationItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BaseConfigurationItem) => any;
    }
    export interface BatchGetAggregateResourceConfigRequest {
            /**
                * <p>The name of the configuration aggregator.</p>
                */
            ConfigurationAggregatorName: string | undefined;
            /**
                * <p>A list of aggregate ResourceIdentifiers objects. </p>
                */
            ResourceIdentifiers: AggregateResourceIdentifier[] | undefined;
    }
    export namespace BatchGetAggregateResourceConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetAggregateResourceConfigRequest) => any;
    }
    export interface BatchGetAggregateResourceConfigResponse {
            /**
                * <p>A list that contains the current configuration of one or more resources.</p>
                */
            BaseConfigurationItems?: BaseConfigurationItem[];
            /**
                * <p>A list of resource identifiers that were not processed with current scope. The list is empty if all the resources are processed.</p>
                */
            UnprocessedResourceIdentifiers?: AggregateResourceIdentifier[];
    }
    export namespace BatchGetAggregateResourceConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetAggregateResourceConfigResponse) => any;
    }
    /**
        * <p>You have specified a configuration aggregator that does not exist.</p>
        */
    export class NoSuchConfigurationAggregatorException extends __BaseException {
            readonly name: "NoSuchConfigurationAggregatorException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NoSuchConfigurationAggregatorException, __BaseException>);
    }
    /**
        * <p>The requested action is not valid.</p>
        * 		       <p>For PutStoredQuery, you will see this exception if there are missing required fields or if the input value fails the validation, or if you are trying to create more than 300 queries.</p>
        * 		       <p>For GetStoredQuery, ListStoredQuery, and DeleteStoredQuery you will see this exception if there are missing required fields or if the input value fails the validation.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    /**
        * <p>The details that identify a resource within Config, including
        * 			the resource type and resource ID.</p>
        */
    export interface ResourceKey {
            /**
                * <p>The resource type.</p>
                */
            resourceType: ResourceType | string | undefined;
            /**
                * <p>The ID of the resource (for example., sg-xxxxxx). </p>
                */
            resourceId: string | undefined;
    }
    export namespace ResourceKey {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceKey) => any;
    }
    export interface BatchGetResourceConfigRequest {
            /**
                * <p>A list of resource keys to be processed with the current
                * 			request. Each element in the list consists of the resource type and
                * 			resource ID.</p>
                */
            resourceKeys: ResourceKey[] | undefined;
    }
    export namespace BatchGetResourceConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetResourceConfigRequest) => any;
    }
    export interface BatchGetResourceConfigResponse {
            /**
                * <p>A list that contains the current configuration of one or more
                * 			resources.</p>
                */
            baseConfigurationItems?: BaseConfigurationItem[];
            /**
                * <p>A list of resource keys that were not processed with the
                * 			current response. The unprocessesResourceKeys value is in the same
                * 			form as ResourceKeys, so the value can be directly provided to a
                * 			subsequent BatchGetResourceConfig operation.
                *
                * 			If there are no unprocessed resource keys, the response contains an
                * 			empty unprocessedResourceKeys list. </p>
                */
            unprocessedResourceKeys?: ResourceKey[];
    }
    export namespace BatchGetResourceConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetResourceConfigResponse) => any;
    }
    /**
        * <p>There are no configuration recorders available to provide the
        * 			role needed to describe your resources. Create a configuration
        * 			recorder.</p>
        */
    export class NoAvailableConfigurationRecorderException extends __BaseException {
            readonly name: "NoAvailableConfigurationRecorderException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NoAvailableConfigurationRecorderException, __BaseException>);
    }
    export enum ChronologicalOrder {
            Forward = "Forward",
            Reverse = "Reverse"
    }
    /**
        * <p>Indicates whether an Config rule is compliant. A rule is
        * 			compliant if all of the resources that the rule evaluated comply
        * 			with it. A rule is noncompliant if any of these resources do not
        * 			comply.</p>
        */
    export interface ComplianceByConfigRule {
            /**
                * <p>The name of the Config rule.</p>
                */
            ConfigRuleName?: string;
            /**
                * <p>Indicates whether the Config rule is compliant.</p>
                */
            Compliance?: Compliance;
    }
    export namespace ComplianceByConfigRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComplianceByConfigRule) => any;
    }
    /**
        * <p>Indicates whether an Amazon Web Services resource that is evaluated according
        * 			to one or more Config rules is compliant. A resource is
        * 			compliant if it complies with all of the rules that evaluate it. A
        * 			resource is noncompliant if it does not comply with one or more of
        * 			these rules.</p>
        */
    export interface ComplianceByResource {
            /**
                * <p>The type of the Amazon Web Services resource that was evaluated.</p>
                */
            ResourceType?: string;
            /**
                * <p>The ID of the Amazon Web Services resource that was evaluated.</p>
                */
            ResourceId?: string;
            /**
                * <p>Indicates whether the Amazon Web Services resource complies with all of the Config rules that evaluated it.</p>
                */
            Compliance?: Compliance;
    }
    export namespace ComplianceByResource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComplianceByResource) => any;
    }
    /**
        * <p>The number of Amazon Web Services resources of a specific type that are
        * 			compliant or noncompliant, up to a maximum of 100 for
        * 			each.</p>
        */
    export interface ComplianceSummaryByResourceType {
            /**
                * <p>The type of Amazon Web Services resource.</p>
                */
            ResourceType?: string;
            /**
                * <p>The number of Amazon Web Services resources that are compliant or noncompliant,
                * 			up to a maximum of 100 for each.</p>
                */
            ComplianceSummary?: ComplianceSummary;
    }
    export namespace ComplianceSummaryByResourceType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComplianceSummaryByResourceType) => any;
    }
    export enum DeliveryStatus {
            Failure = "Failure",
            Not_Applicable = "Not_Applicable",
            Success = "Success"
    }
    /**
        * <p>Provides status of the delivery of the snapshot or the
        * 			configuration history to the specified Amazon S3 bucket. Also
        * 			provides the status of notifications about the Amazon S3 delivery to
        * 			the specified Amazon SNS topic.</p>
        */
    export interface ConfigExportDeliveryInfo {
            /**
                * <p>Status of the last attempted delivery.</p>
                */
            lastStatus?: DeliveryStatus | string;
            /**
                * <p>The error code from the last attempted delivery.</p>
                */
            lastErrorCode?: string;
            /**
                * <p>The error message from the last attempted delivery.</p>
                */
            lastErrorMessage?: string;
            /**
                * <p>The time of the last attempted delivery.</p>
                */
            lastAttemptTime?: Date;
            /**
                * <p>The time of the last successful delivery.</p>
                */
            lastSuccessfulTime?: Date;
            /**
                * <p>The time that the next delivery occurs.</p>
                */
            nextDeliveryTime?: Date;
    }
    export namespace ConfigExportDeliveryInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigExportDeliveryInfo) => any;
    }
    export enum ConfigRuleState {
            ACTIVE = "ACTIVE",
            DELETING = "DELETING",
            DELETING_RESULTS = "DELETING_RESULTS",
            EVALUATING = "EVALUATING"
    }
    export enum MaximumExecutionFrequency {
            One_Hour = "One_Hour",
            Six_Hours = "Six_Hours",
            Three_Hours = "Three_Hours",
            Twelve_Hours = "Twelve_Hours",
            TwentyFour_Hours = "TwentyFour_Hours"
    }
    /**
        * <p>Defines which resources trigger an evaluation for an Config
        * 			rule. The scope can include one or more resource types, a
        * 			combination of a tag key and value, or a combination of one resource
        * 			type and one resource ID. Specify a scope to constrain which
        * 			resources trigger an evaluation for a rule. Otherwise, evaluations
        * 			for the rule are triggered when any resource in your recording group
        * 			changes in configuration.</p>
        */
    export interface Scope {
            /**
                * <p>The resource types of only those Amazon Web Services resources that you want to
                * 			trigger an evaluation for the rule. You can only specify one type if
                * 			you also specify a resource ID for
                * 			<code>ComplianceResourceId</code>.</p>
                */
            ComplianceResourceTypes?: string[];
            /**
                * <p>The tag key that is applied to only those Amazon Web Services resources that
                * 			you want to trigger an evaluation for the rule.</p>
                */
            TagKey?: string;
            /**
                * <p>The tag value applied to only those Amazon Web Services resources that you want
                * 			to trigger an evaluation for the rule. If you specify a value for
                * 				<code>TagValue</code>, you must also specify a value for
                * 				<code>TagKey</code>.</p>
                */
            TagValue?: string;
            /**
                * <p>The ID of the only Amazon Web Services resource that you want to trigger an
                * 			evaluation for the rule. If you specify a resource ID, you must
                * 			specify one resource type for
                * 			<code>ComplianceResourceTypes</code>.</p>
                */
            ComplianceResourceId?: string;
    }
    export namespace Scope {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Scope) => any;
    }
    /**
        * <p>Provides the runtime system, policy definition, and whether debug logging enabled. You can
        * 			specify the following CustomPolicyDetails parameter values
        * 			only
        * 			for Config Custom Policy rules.</p>
        */
    export interface CustomPolicyDetails {
            /**
                * <p>The runtime system for your Config Custom Policy rule. Guard is a policy-as-code language that allows you to write policies that are enforced by Config Custom Policy rules. For more information about Guard, see the <a href="https://github.com/aws-cloudformation/cloudformation-guard">Guard GitHub
                * 					Repository</a>.</p>
                */
            PolicyRuntime: string | undefined;
            /**
                * <p>The policy definition containing the logic for your Config Custom Policy rule.</p>
                */
            PolicyText: string | undefined;
            /**
                * <p>The boolean expression for enabling debug logging for your Config Custom Policy rule. The default value is <code>false</code>.</p>
                */
            EnableDebugLogDelivery?: boolean;
    }
    export namespace CustomPolicyDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomPolicyDetails) => any;
    }
    export enum Owner {
            Aws = "AWS",
            Custom_Lambda = "CUSTOM_LAMBDA",
            Custom_Policy = "CUSTOM_POLICY"
    }
    export enum EventSource {
            Aws_Config = "aws.config"
    }
    export enum MessageType {
            ConfigurationItemChangeNotification = "ConfigurationItemChangeNotification",
            ConfigurationSnapshotDeliveryCompleted = "ConfigurationSnapshotDeliveryCompleted",
            OversizedConfigurationItemChangeNotification = "OversizedConfigurationItemChangeNotification",
            ScheduledNotification = "ScheduledNotification"
    }
    /**
        * <p>Provides the source and the message types that trigger Config to evaluate your Amazon Web Services resources against a rule. It also
        * 			provides the frequency with which you want Config to run
        * 			evaluations for the rule if the trigger type is periodic. You can
        * 			specify the parameter values for <code>SourceDetail</code> only for
        * 			custom rules. </p>
        */
    export interface SourceDetail {
            /**
                * <p>The source of the event, such as an Amazon Web Services service, that triggers
                * 			Config to evaluate your Amazon Web Services resources.</p>
                */
            EventSource?: EventSource | string;
            /**
                * <p>The type of notification that triggers Config to run an
                * 			evaluation for a rule. You can specify the following notification
                * 			types:</p>
                *
                *
                * 		       <ul>
                *             <li>
                * 				           <p>
                * 					             <code>ConfigurationItemChangeNotification</code> - Triggers
                * 					an evaluation when Config delivers a configuration item
                * 					as a result of a resource change.</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                *                   <code>OversizedConfigurationItemChangeNotification</code>
                * 					- Triggers an evaluation when Config delivers an
                * 					oversized configuration item. Config may generate this
                * 					notification type when a resource changes and the
                * 					notification exceeds the maximum size allowed by Amazon
                * 					SNS.</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                *                   <code>ScheduledNotification</code> - Triggers a
                * 					periodic evaluation at the frequency specified for
                * 						<code>MaximumExecutionFrequency</code>.</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                *                   <code>ConfigurationSnapshotDeliveryCompleted</code> -
                * 					Triggers a periodic evaluation when Config delivers a
                * 					configuration snapshot.</p>
                * 			         </li>
                *          </ul>
                *
                * 		       <p>If you want your custom rule to be triggered by configuration
                * 			changes, specify two SourceDetail objects, one for
                * 				<code>ConfigurationItemChangeNotification</code> and one for
                * 				<code>OversizedConfigurationItemChangeNotification</code>.</p>
                */
            MessageType?: MessageType | string;
            /**
                * <p>The frequency at which you want Config to run evaluations
                * 			for a custom rule with a periodic trigger. If you specify a value
                * 			for <code>MaximumExecutionFrequency</code>, then
                * 				<code>MessageType</code> must use the
                * 				<code>ScheduledNotification</code> value.</p>
                *
                *
                *
                *
                * 		       <note>
                * 			         <p>By default, rules with a periodic trigger are evaluated
                * 				every 24 hours. To change the frequency, specify a valid value
                * 				for the <code>MaximumExecutionFrequency</code>
                * 				parameter.</p>
                * 			         <p>Based on the valid value you choose, Config runs
                * 				evaluations once for each valid value. For example, if you
                * 				choose <code>Three_Hours</code>, Config runs evaluations
                * 				once every three hours. In this case, <code>Three_Hours</code>
                * 				is the frequency of this rule. </p>
                * 		       </note>
                */
            MaximumExecutionFrequency?: MaximumExecutionFrequency | string;
    }
    export namespace SourceDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SourceDetail) => any;
    }
    /**
        * <p>Provides the CustomPolicyDetails, the rule owner (Amazon Web Services or customer), the rule
        * 			identifier, and the events that cause the evaluation of your Amazon Web Services
        * 			resources.</p>
        */
    export interface Source {
            /**
                * <p>Indicates whether Amazon Web Services or the customer owns and manages the Config rule.</p>
                *
                * 		       <p>Config Managed Rules are predefined rules owned by Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html">Config Managed Rules</a> in the Config developer guide.</p>
                *
                * 		       <p>Config Custom Rules are rules that you can develop either with Guard (<code>CUSTOM_POLICY</code>) or Lambda (<code>CUSTOM_LAMBDA</code>). For more information, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_develop-rules.html">Config Custom Rules </a> in the Config developer guide.</p>
                */
            Owner: Owner | string | undefined;
            /**
                * <p>For Config Managed rules, a predefined identifier from a
                * 			list. For example, <code>IAM_PASSWORD_POLICY</code> is a managed
                * 			rule. To reference a managed rule, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html">List of Config Managed Rules</a>.</p>
                * 		       <p>For Config Custom Lambda rules, the identifier is the Amazon Resource Name
                * 			(ARN) of the rule's Lambda function, such as
                * 			<code>arn:aws:lambda:us-east-2:123456789012:function:custom_rule_name</code>.</p>
                *
                * 		       <p>For Config Custom Policy rules, this field will be ignored.</p>
                */
            SourceIdentifier?: string;
            /**
                * <p>Provides the source and the message types that cause Config to evaluate your Amazon Web Services resources against a rule. It also provides the frequency with which you want Config to run evaluations for the rule if the trigger type is periodic.</p>
                *
                * 		       <p>If the owner is set to <code>CUSTOM_POLICY</code>, the only acceptable values for the Config rule trigger message type are <code>ConfigurationItemChangeNotification</code> and <code>OversizedConfigurationItemChangeNotification</code>.</p>
                */
            SourceDetails?: SourceDetail[];
            /**
                * <p>Provides the runtime system, policy definition, and whether debug logging is enabled. Required when owner is set to <code>CUSTOM_POLICY</code>.</p>
                */
            CustomPolicyDetails?: CustomPolicyDetails;
    }
    export namespace Source {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Source) => any;
    }
    /**
        * <p>An Config rule represents an Lambda function that you
        * 			create for a custom rule or a predefined function for an Config managed
        * 			rule. The function evaluates configuration items to assess whether
        * 			your Amazon Web Services resources comply with your desired configurations. This
        * 			function can run when Config detects a configuration change to
        * 			an Amazon Web Services resource and at a periodic frequency that you choose (for
        * 			example, every 24 hours).</p>
        *
        * 		       <note>
        * 			         <p>You can use the Amazon Web Services CLI and Amazon Web Services SDKs if you want to create
        * 				a rule that triggers evaluations for your resources when Config delivers the configuration snapshot. For more
        * 				information, see <a>ConfigSnapshotDeliveryProperties</a>.</p>
        * 		       </note>
        * 		       <p>For more information about developing and using Config
        * 			rules, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config.html">Evaluating Amazon Web Services resource Configurations with Config</a>
        * 			in the <i>Config Developer Guide</i>.</p>
        */
    export interface ConfigRule {
            /**
                * <p>The name that you assign to the Config rule. The name is
                * 			required if you are adding a new rule.</p>
                */
            ConfigRuleName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the Config
                * 			rule.</p>
                */
            ConfigRuleArn?: string;
            /**
                * <p>The ID of the Config rule.</p>
                */
            ConfigRuleId?: string;
            /**
                * <p>The description that you provide for the Config
                * 			rule.</p>
                */
            Description?: string;
            /**
                * <p>Defines which resources can trigger an evaluation for the rule.
                * 			The scope can include one or more resource types, a combination of
                * 			one resource type and one resource ID, or a combination of a tag key
                * 			and value. Specify a scope to constrain the resources that can
                * 			trigger an evaluation for the rule. If you do not specify a scope,
                * 			evaluations are triggered when any resource in the recording group
                * 			changes.</p>
                * 		       <note>
                *             <p>The scope can be empty. </p>
                *          </note>
                */
            Scope?: Scope;
            /**
                * <p>Provides the rule owner (Amazon Web Services or customer), the rule identifier,
                * 			and the notifications that cause the function to evaluate your Amazon Web Services
                * 			resources.</p>
                */
            Source: Source | undefined;
            /**
                * <p>A string, in JSON format, that is passed to the Config rule
                * 			Lambda function.</p>
                */
            InputParameters?: string;
            /**
                * <p>The maximum frequency with which Config runs evaluations
                * 			for a rule. You can specify a value for
                * 				<code>MaximumExecutionFrequency</code> when:</p>
                * 		       <ul>
                *             <li>
                * 				           <p>This is for an Config managed rule that is triggered at
                * 					a periodic frequency.</p>
                * 			         </li>
                *             <li>
                * 				           <p>Your custom rule is triggered when Config delivers
                * 					the configuration snapshot. For more information, see <a>ConfigSnapshotDeliveryProperties</a>.</p>
                * 			         </li>
                *          </ul>
                *
                *
                *
                * 		       <note>
                * 			         <p>By default, rules with a periodic trigger are evaluated
                * 				every 24 hours. To change the frequency, specify a valid value
                * 				for the <code>MaximumExecutionFrequency</code>
                * 				parameter.</p>
                * 		       </note>
                */
            MaximumExecutionFrequency?: MaximumExecutionFrequency | string;
            /**
                * <p>Indicates whether the Config rule is active or is currently
                * 			being deleted by Config. It can also indicate the evaluation
                * 			status for the Config rule.</p>
                *
                * 		       <p>Config sets the state of the rule to
                * 				<code>EVALUATING</code> temporarily after you use the
                * 				<code>StartConfigRulesEvaluation</code> request to evaluate your
                * 			resources against the Config rule.</p>
                *
                * 		       <p>Config sets the state of the rule to
                * 				<code>DELETING_RESULTS</code> temporarily after you use the
                * 				<code>DeleteEvaluationResults</code> request to delete the
                * 			current evaluation results for the Config rule.</p>
                *
                * 		       <p>Config temporarily sets the state of a rule to
                * 				<code>DELETING</code> after you use the
                * 				<code>DeleteConfigRule</code> request to delete the rule. After
                * 			Config deletes the rule, the rule and all of its evaluations are
                * 			erased and are no longer available.</p>
                */
            ConfigRuleState?: ConfigRuleState | string;
            /**
                * <p>Service principal name of the service that created the
                * 			rule.</p>
                * 		       <note>
                * 			         <p>The field is populated only if the service linked rule is
                * 				created by a service. The field is empty if you create your own
                * 				rule.</p>
                * 		       </note>
                */
            CreatedBy?: string;
    }
    export namespace ConfigRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigRule) => any;
    }
    /**
        * <p>Filters the compliance results based on account ID, region,
        * 			compliance type, and rule name.</p>
        */
    export interface ConfigRuleComplianceFilters {
            /**
                * <p>The name of the Config rule.</p>
                */
            ConfigRuleName?: string;
            /**
                * <p>The rule compliance status.</p>
                * 		       <p>For the <code>ConfigRuleComplianceFilters</code> data type, Config supports only <code>COMPLIANT</code> and
                * 				<code>NON_COMPLIANT</code>. Config does not support the
                * 				<code>NOT_APPLICABLE</code> and the
                * 				<code>INSUFFICIENT_DATA</code> values.</p>
                */
            ComplianceType?: ComplianceType | string;
            /**
                * <p>The 12-digit account ID of the source account.
                * 			</p>
                */
            AccountId?: string;
            /**
                * <p>The source region where the data is aggregated.
                * 			</p>
                */
            AwsRegion?: string;
    }
    export namespace ConfigRuleComplianceFilters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigRuleComplianceFilters) => any;
    }
    /**
        * <p>Filters the results based on the account IDs and
        * 			regions.</p>
        */
    export interface ConfigRuleComplianceSummaryFilters {
            /**
                * <p>The 12-digit account ID of the source account.</p>
                */
            AccountId?: string;
            /**
                * <p>The source region where the data is aggregated.</p>
                */
            AwsRegion?: string;
    }
    export namespace ConfigRuleComplianceSummaryFilters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigRuleComplianceSummaryFilters) => any;
    }
    export enum ConfigRuleComplianceSummaryGroupKey {
            ACCOUNT_ID = "ACCOUNT_ID",
            AWS_REGION = "AWS_REGION"
    }
    /**
        * <p>Status information for your Config Managed rules and Config Custom Policy rules. The
        * 			status includes information such as the last time the rule ran, the
        * 			last time it failed, and the related error for the last
        * 			failure.</p>
        * 		       <p>This action does not return status information about Config Custom Lambda rules.</p>
        */
    export interface ConfigRuleEvaluationStatus {
            /**
                * <p>The name of the Config rule.</p>
                */
            ConfigRuleName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the Config
                * 			rule.</p>
                */
            ConfigRuleArn?: string;
            /**
                * <p>The ID of the Config rule.</p>
                */
            ConfigRuleId?: string;
            /**
                * <p>The time that Config last successfully invoked the Config rule to evaluate your Amazon Web Services resources.</p>
                */
            LastSuccessfulInvocationTime?: Date;
            /**
                * <p>The time that Config last failed to invoke the Config
                * 			rule to evaluate your Amazon Web Services resources.</p>
                */
            LastFailedInvocationTime?: Date;
            /**
                * <p>The time that Config last successfully evaluated your Amazon Web Services
                * 			resources against the rule.</p>
                */
            LastSuccessfulEvaluationTime?: Date;
            /**
                * <p>The time that Config last failed to evaluate your Amazon Web Services
                * 			resources against the rule.</p>
                */
            LastFailedEvaluationTime?: Date;
            /**
                * <p>The time that you first activated the Config
                * 			rule.</p>
                */
            FirstActivatedTime?: Date;
            /**
                * <p>The time that you last turned off the Config rule.</p>
                */
            LastDeactivatedTime?: Date;
            /**
                * <p>The error code that Config returned when the rule last
                * 			failed.</p>
                */
            LastErrorCode?: string;
            /**
                * <p>The error message that Config returned when the rule last
                * 			failed.</p>
                */
            LastErrorMessage?: string;
            /**
                * <p>Indicates whether Config has evaluated your resources
                * 			against the rule at least once.</p>
                * 		       <ul>
                *             <li>
                * 				           <p>
                * 					             <code>true</code> - Config has evaluated your Amazon Web Services
                * 					resources against the rule at least once.</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                * 					             <code>false</code> - Config has not finished evaluating your Amazon Web Services resources against the
                * 					rule
                * 					at least once.</p>
                * 			         </li>
                *          </ul>
                */
            FirstEvaluationStarted?: boolean;
            /**
                * <p>The status of the last attempted delivery of a debug log for your Config Custom Policy rules. Either <code>Successful</code> or <code>Failed</code>.</p>
                */
            LastDebugLogDeliveryStatus?: string;
            /**
                * <p>The reason Config was not able to deliver a debug log. This is for the last
                * 			failed attempt to retrieve a debug log for your Config Custom Policy rules.</p>
                */
            LastDebugLogDeliveryStatusReason?: string;
            /**
                * <p>The time Config last attempted to deliver a debug log for your Config Custom Policy rules.</p>
                */
            LastDebugLogDeliveryTime?: Date;
    }
    export namespace ConfigRuleEvaluationStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigRuleEvaluationStatus) => any;
    }
    /**
        * <p>Provides options for how often Config delivers
        * 			configuration snapshots to the Amazon S3 bucket in your delivery
        * 			channel.</p>
        *
        *
        *
        *
        * 		       <p>The frequency for a rule that triggers evaluations for your
        * 			resources when Config delivers the configuration snapshot is set
        * 			by one of two values, depending on which is less frequent:</p>
        *
        * 		       <ul>
        *             <li>
        * 				           <p>The value for the <code>deliveryFrequency</code>
        * 					parameter within the delivery channel configuration, which
        * 					sets how often Config delivers configuration snapshots.
        * 					This value also sets how often Config invokes
        * 					evaluations for Config rules.</p>
        * 			         </li>
        *             <li>
        * 				           <p>The value for the
        * 						<code>MaximumExecutionFrequency</code> parameter, which
        * 					sets the maximum frequency with which Config invokes
        * 					evaluations for the rule. For more information, see <a>ConfigRule</a>.</p>
        * 			         </li>
        *          </ul>
        *
        * 		       <p>If the <code>deliveryFrequency</code> value is less frequent
        * 			than the <code>MaximumExecutionFrequency</code> value for a rule,
        * 			Config invokes the rule only as often as the
        * 				<code>deliveryFrequency</code> value.</p>
        *
        * 		       <ol>
        *             <li>
        * 				           <p>For example, you want your rule to run evaluations when
        * 					Config delivers the configuration snapshot.</p>
        * 			         </li>
        *             <li>
        * 				           <p>You specify the <code>MaximumExecutionFrequency</code>
        * 					value for <code>Six_Hours</code>. </p>
        * 			         </li>
        *             <li>
        * 				           <p>You then specify the delivery channel
        * 						<code>deliveryFrequency</code> value for
        * 						<code>TwentyFour_Hours</code>.</p>
        * 			         </li>
        *             <li>
        * 				           <p>Because the value for <code>deliveryFrequency</code> is
        * 					less frequent than <code>MaximumExecutionFrequency</code>,
        * 					Config invokes evaluations for the rule every 24 hours.
        * 				</p>
        * 			         </li>
        *          </ol>
        *
        *
        * 		       <p>You should set the <code>MaximumExecutionFrequency</code> value
        * 			to be at least as frequent as the <code>deliveryFrequency</code>
        * 			value. You can view the <code>deliveryFrequency</code> value by
        * 			using the <code>DescribeDeliveryChannnels</code> action.</p>
        *
        * 		       <p>To update the <code>deliveryFrequency</code> with which Config delivers your configuration snapshots, use the
        * 				<code>PutDeliveryChannel</code> action.</p>
        */
    export interface ConfigSnapshotDeliveryProperties {
            /**
                * <p>The frequency with which Config delivers configuration
                * 			snapshots.</p>
                */
            deliveryFrequency?: MaximumExecutionFrequency | string;
    }
    export namespace ConfigSnapshotDeliveryProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigSnapshotDeliveryProperties) => any;
    }
    /**
        * <p>A list that contains the status of the delivery of the
        * 			configuration stream notification to the Amazon SNS topic.</p>
        */
    export interface ConfigStreamDeliveryInfo {
            /**
                * <p>Status of the last attempted delivery.</p>
                * 		       <p>
                * 			         <b>Note</b> Providing an SNS topic on a
                * 				<a href="https://docs.aws.amazon.com/config/latest/APIReference/API_DeliveryChannel.html">DeliveryChannel</a> for Config is optional. If the SNS
                * 			delivery is turned off, the last status will be <b>Not_Applicable</b>.</p>
                */
            lastStatus?: DeliveryStatus | string;
            /**
                * <p>The error code from the last attempted delivery.</p>
                */
            lastErrorCode?: string;
            /**
                * <p>The error message from the last attempted delivery.</p>
                */
            lastErrorMessage?: string;
            /**
                * <p>The time from the last status change.</p>
                */
            lastStatusChangeTime?: Date;
    }
    export namespace ConfigStreamDeliveryInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigStreamDeliveryInfo) => any;
    }
    /**
        * <p>This object contains regions to set up the aggregator and an IAM
        * 			role to retrieve organization details.</p>
        */
    export interface OrganizationAggregationSource {
            /**
                * <p>ARN of the IAM role used to retrieve Amazon Web Services Organization details
                * 			associated with the aggregator account.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>The source regions being aggregated.</p>
                */
            AwsRegions?: string[];
            /**
                * <p>If true, aggregate existing Config regions and future
                * 			regions.</p>
                */
            AllAwsRegions?: boolean;
    }
    export namespace OrganizationAggregationSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OrganizationAggregationSource) => any;
    }
    /**
        * <p>The details about the configuration aggregator, including
        * 			information about source accounts, regions, and metadata of the
        * 			aggregator. </p>
        */
    export interface ConfigurationAggregator {
            /**
                * <p>The name of the aggregator.</p>
                */
            ConfigurationAggregatorName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the aggregator.</p>
                */
            ConfigurationAggregatorArn?: string;
            /**
                * <p>Provides a list of source accounts and regions to be
                * 			aggregated.</p>
                */
            AccountAggregationSources?: AccountAggregationSource[];
            /**
                * <p>Provides an organization and list of regions to be
                * 			aggregated.</p>
                */
            OrganizationAggregationSource?: OrganizationAggregationSource;
            /**
                * <p>The time stamp when the configuration aggregator was
                * 			created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The time of the last update.</p>
                */
            LastUpdatedTime?: Date;
            /**
                * <p>Amazon Web Services service that created the configuration aggregator.</p>
                */
            CreatedBy?: string;
    }
    export namespace ConfigurationAggregator {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigurationAggregator) => any;
    }
    /**
        * <p>The relationship of the related resource to the main
        * 			resource.</p>
        */
    export interface Relationship {
            /**
                * <p>The resource type of the related resource.</p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The ID of the related resource (for example,
                * 				<code>sg-xxxxxx</code>).</p>
                */
            resourceId?: string;
            /**
                * <p>The custom name of the related resource, if
                * 			available.</p>
                */
            resourceName?: string;
            /**
                * <p>The type of relationship with the related resource.</p>
                */
            relationshipName?: string;
    }
    export namespace Relationship {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Relationship) => any;
    }
    /**
        * <p>A list that contains detailed configurations of a specified
        * 			resource.</p>
        */
    export interface ConfigurationItem {
            /**
                * <p>The version number of the resource configuration.</p>
                */
            version?: string;
            /**
                * <p>The 12-digit Amazon Web Services account ID associated with the
                * 			resource.</p>
                */
            accountId?: string;
            /**
                * <p>The time when the configuration recording was
                * 			initiated.</p>
                */
            configurationItemCaptureTime?: Date;
            /**
                * <p>The configuration item status. The valid values are:</p>
                *
                * 		       <ul>
                *             <li>
                *                <p>OK – The resource configuration has been updated</p>
                *             </li>
                *             <li>
                *                <p>ResourceDiscovered – The resource was newly discovered</p>
                *             </li>
                *             <li>
                *                <p>ResourceNotRecorded – The resource was discovered but its configuration was not recorded since the recorder excludes the recording of resources of this type</p>
                *             </li>
                *             <li>
                *                <p>ResourceDeleted – The resource was deleted</p>
                *             </li>
                *             <li>
                *                <p>ResourceDeletedNotRecorded – The resource was deleted but its configuration was not recorded since the recorder excludes the recording of resources of this type</p>
                *             </li>
                *          </ul>
                * 		       <note>
                *             <p>The CIs do not incur any cost.</p>
                *          </note>
                */
            configurationItemStatus?: ConfigurationItemStatus | string;
            /**
                * <p>An identifier that indicates the ordering of the configuration
                * 			items of a resource.</p>
                */
            configurationStateId?: string;
            /**
                * <p>Unique MD5 hash that represents the configuration item's
                * 			state.</p>
                * 		       <p>You can use MD5 hash to compare the states of two or more
                * 			configuration items that are associated with the same
                * 			resource.</p>
                */
            configurationItemMD5Hash?: string;
            /**
                * <p>Amazon Resource Name (ARN) associated with the resource.</p>
                */
            arn?: string;
            /**
                * <p>The type of Amazon Web Services resource.</p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The ID of the resource (for example,
                * 			<code>sg-xxxxxx</code>).</p>
                */
            resourceId?: string;
            /**
                * <p>The custom name of the resource, if available.</p>
                */
            resourceName?: string;
            /**
                * <p>The region where the resource resides.</p>
                */
            awsRegion?: string;
            /**
                * <p>The Availability Zone associated with the resource.</p>
                */
            availabilityZone?: string;
            /**
                * <p>The time stamp when the resource was created.</p>
                */
            resourceCreationTime?: Date;
            /**
                * <p>A mapping of key value tags associated with the
                * 			resource.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>A list of CloudTrail event IDs.</p>
                * 		       <p>A populated field indicates that the current configuration was
                * 			initiated by the events recorded in the CloudTrail log. For more
                * 			information about CloudTrail, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/what_is_cloud_trail_top_level.html">What Is CloudTrail</a>.</p>
                * 		       <p>An empty field indicates that the current configuration was not
                * 			initiated by any event. As of Version 1.3, the relatedEvents field is empty.
                * 			You can access the <a href="https://docs.aws.amazon.com/awscloudtrail/latest/APIReference/API_LookupEvents.html">LookupEvents API</a> in the <i>CloudTrail API Reference</i> to retrieve the events for the resource.</p>
                */
            relatedEvents?: string[];
            /**
                * <p>A list of related Amazon Web Services resources.</p>
                */
            relationships?: Relationship[];
            /**
                * <p>The description of the resource configuration.</p>
                */
            configuration?: string;
            /**
                * <p>Configuration attributes that Config returns for certain
                * 			resource types to supplement the information returned for the
                * 				<code>configuration</code> parameter.</p>
                */
            supplementaryConfiguration?: Record<string, string>;
    }
    export namespace ConfigurationItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigurationItem) => any;
    }
    /**
        * <p>Specifies the types of Amazon Web Services resource for which Config
        * 			records configuration changes.</p>
        * 		       <p>In the recording group, you specify whether all supported types
        * 			or specific types of resources are recorded.</p>
        * 		       <p>By default, Config records configuration changes for all
        * 			supported types of regional resources that Config discovers in
        * 			the region in which it is running. Regional resources are tied to a
        * 			region and can be used only in that region. Examples of regional
        * 			resources are EC2 instances and EBS volumes.</p>
        * 		       <p>You can also have Config record configuration changes for
        * 			supported types of global resources (for example, IAM resources).
        * 			Global resources are not tied to an individual region and can be
        * 			used in all regions.</p>
        * 		       <important>
        * 			         <p>The configuration details for any global resource are the
        * 				same in all regions. If you customize Config in multiple
        * 				regions to record global resources, it will create multiple
        * 				configuration items each time a global resource changes: one
        * 				configuration item for each region. These configuration items
        * 				will contain identical data. To prevent duplicate configuration
        * 				items, you should consider customizing Config in only one
        * 				region to record global resources, unless you want the
        * 				configuration items to be available in multiple
        * 				regions.</p>
        * 		       </important>
        * 		       <p>If you don't want Config to record all resources, you can
        * 			specify which types of resources it will record with the
        * 				<code>resourceTypes</code> parameter.</p>
        * 		       <p>For a list of supported resource types, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/resource-config-reference.html#supported-resources">Supported Resource Types</a>.</p>
        * 		       <p>For more information, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/select-resources.html">Selecting Which Resources Config Records</a>.</p>
        */
    export interface RecordingGroup {
            /**
                * <p>Specifies whether Config records configuration changes for
                * 			every supported type of regional resource.</p>
                * 		       <p>If you set this option to <code>true</code>, when Config
                * 			adds support for a new type of regional resource, it starts
                * 			recording resources of that type automatically.</p>
                * 		       <p>If you set this option to <code>true</code>, you cannot
                * 			enumerate a list of <code>resourceTypes</code>.</p>
                */
            allSupported?: boolean;
            /**
                * <p>Specifies whether Config includes all supported types of
                * 			global resources (for example, IAM resources) with the resources
                * 			that it records.</p>
                * 		       <p>Before you can set this option to <code>true</code>, you must
                * 			set the <code>allSupported</code> option to
                * 			<code>true</code>.</p>
                * 		       <p>If you set this option to <code>true</code>, when Config
                * 			adds support for a new type of global resource, it starts recording
                * 			resources of that type automatically.</p>
                * 		       <p>The configuration details for any global resource are the same
                * 			in all regions. To prevent duplicate configuration items, you should
                * 			consider customizing Config in only one region to record global
                * 			resources.</p>
                */
            includeGlobalResourceTypes?: boolean;
            /**
                * <p>A comma-separated list that specifies the types of Amazon Web Services
                * 			resources for which Config records configuration changes (for
                * 			example, <code>AWS::EC2::Instance</code> or
                * 				<code>AWS::CloudTrail::Trail</code>).</p>
                * 		       <p>To record all configuration changes, you must
                * 			set the <code>allSupported</code> option to
                * 			<code>true</code>.</p>
                * 		       <p>If you set this option to <code>false</code>, when Config
                * 			adds support for a new type of resource, it will not record
                * 			resources of that type unless you manually add that type to your
                * 			recording group.</p>
                * 		       <p>For a list of valid <code>resourceTypes</code> values, see the
                * 				<b>resourceType Value</b> column in
                * 				<a href="https://docs.aws.amazon.com/config/latest/developerguide/resource-config-reference.html#supported-resources">Supported Amazon Web Services resource Types</a>.</p>
                */
            resourceTypes?: (ResourceType | string)[];
    }
    export namespace RecordingGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RecordingGroup) => any;
    }
    /**
        * <p>An object that represents the recording of configuration
        * 			changes of an Amazon Web Services resource.</p>
        */
    export interface ConfigurationRecorder {
            /**
                * <p>The name of the recorder. By default, Config automatically
                * 			assigns the name "default" when creating the configuration recorder.
                * 			You cannot change the assigned name.</p>
                */
            name?: string;
            /**
                * <p>Amazon Resource Name (ARN) of the IAM role used to describe the
                * 			Amazon Web Services resources associated with the account.</p>
                * 		       <note>
                *             <p>While the API model does not require this field, the server will reject a request without a defined roleARN for the configuration recorder.</p>
                *          </note>
                */
            roleARN?: string;
            /**
                * <p>Specifies the types of Amazon Web Services resources for which Config
                * 			records configuration changes.</p>
                */
            recordingGroup?: RecordingGroup;
    }
    export namespace ConfigurationRecorder {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigurationRecorder) => any;
    }
    export enum RecorderStatus {
            Failure = "Failure",
            Pending = "Pending",
            Success = "Success"
    }
    /**
        * <p>The current status of the configuration recorder.</p>
        */
    export interface ConfigurationRecorderStatus {
            /**
                * <p>The name of the configuration recorder.</p>
                */
            name?: string;
            /**
                * <p>The time the recorder was last started.</p>
                */
            lastStartTime?: Date;
            /**
                * <p>The time the recorder was last stopped.</p>
                */
            lastStopTime?: Date;
            /**
                * <p>Specifies whether or not the recorder is currently
                * 			recording.</p>
                */
            recording?: boolean;
            /**
                * <p>The last (previous) status of the recorder.</p>
                */
            lastStatus?: RecorderStatus | string;
            /**
                * <p>The error code indicating that the recording failed.</p>
                */
            lastErrorCode?: string;
            /**
                * <p>The message indicating that the recording failed due to an
                * 			error.</p>
                */
            lastErrorMessage?: string;
            /**
                * <p>The time when the status was last changed.</p>
                */
            lastStatusChangeTime?: Date;
    }
    export namespace ConfigurationRecorderStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigurationRecorderStatus) => any;
    }
    /**
        * <p>Filters the conformance pack by compliance types and Config rule names.</p>
        */
    export interface ConformancePackComplianceFilters {
            /**
                * <p>Filters the results by Config rule names.</p>
                */
            ConfigRuleNames?: string[];
            /**
                * <p>Filters the results by compliance.</p>
                * 		       <p>The allowed values are <code>COMPLIANT</code> and <code>NON_COMPLIANT</code>. <code>INSUFFICIENT_DATA</code> is not supported.</p>
                */
            ComplianceType?: ConformancePackComplianceType | string;
    }
    export namespace ConformancePackComplianceFilters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConformancePackComplianceFilters) => any;
    }
    /**
        * <p>Summary includes the name and status of the conformance pack.</p>
        */
    export interface ConformancePackComplianceSummary {
            /**
                * <p>The name of the conformance pack name.</p>
                */
            ConformancePackName: string | undefined;
            /**
                * <p>The status of the conformance pack. The allowed values are <code>COMPLIANT</code>, <code>NON_COMPLIANT</code> and <code>INSUFFICIENT_DATA</code>.</p>
                */
            ConformancePackComplianceStatus: ConformancePackComplianceType | string | undefined;
    }
    export namespace ConformancePackComplianceSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConformancePackComplianceSummary) => any;
    }
    /**
        * <p>Input parameters in the form of key-value pairs for the conformance pack, both of which you define.
        * 			Keys can have a maximum character length of 255 characters, and values can have a maximum length of 4096 characters.</p>
        */
    export interface ConformancePackInputParameter {
            /**
                * <p>One part of a key-value pair.</p>
                */
            ParameterName: string | undefined;
            /**
                * <p>Another part of the key-value pair. </p>
                */
            ParameterValue: string | undefined;
    }
    export namespace ConformancePackInputParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConformancePackInputParameter) => any;
    }
    /**
        * <p>Returns details of a conformance pack. A conformance pack is a collection of Config rules and remediation actions that can be easily deployed in an account and a region.</p>
        */
    export interface ConformancePackDetail {
            /**
                * <p>Name of the conformance pack.</p>
                */
            ConformancePackName: string | undefined;
            /**
                * <p>Amazon Resource Name (ARN) of the conformance pack.</p>
                */
            ConformancePackArn: string | undefined;
            /**
                * <p>ID of the conformance pack.</p>
                */
            ConformancePackId: string | undefined;
            /**
                * <p>The name of the Amazon S3 bucket where Config stores conformance pack templates. </p>
                * 	        <note>
                *             <p>This field is optional.</p>
                *          </note>
                */
            DeliveryS3Bucket?: string;
            /**
                * <p>The prefix for the Amazon S3 bucket.</p>
                * 		       <note>
                *             <p>This field is optional.</p>
                *          </note>
                */
            DeliveryS3KeyPrefix?: string;
            /**
                * <p>A list of <code>ConformancePackInputParameter</code> objects.</p>
                */
            ConformancePackInputParameters?: ConformancePackInputParameter[];
            /**
                * <p>Last time when conformation pack update was requested. </p>
                */
            LastUpdateRequestedTime?: Date;
            /**
                * <p>Amazon Web Services service that created the conformance pack.</p>
                */
            CreatedBy?: string;
    }
    export namespace ConformancePackDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConformancePackDetail) => any;
    }
    /**
        * <p>Filters a conformance pack by Config rule names, compliance types, Amazon Web Services resource types, and resource IDs.</p>
        */
    export interface ConformancePackEvaluationFilters {
            /**
                * <p>Filters the results by Config rule names.</p>
                */
            ConfigRuleNames?: string[];
            /**
                * <p>Filters the results by compliance.</p>
                * 		       <p>The allowed values are <code>COMPLIANT</code> and <code>NON_COMPLIANT</code>. <code>INSUFFICIENT_DATA</code> is not supported.</p>
                */
            ComplianceType?: ConformancePackComplianceType | string;
            /**
                * <p>Filters the results by the resource type (for example, <code>"AWS::EC2::Instance"</code>). </p>
                */
            ResourceType?: string;
            /**
                * <p>Filters the results by resource IDs.</p>
                * 		       <note>
                *             <p>This is valid only when you provide resource type. If there is no resource type, you will see an error.</p>
                *          </note>
                */
            ResourceIds?: string[];
    }
    export namespace ConformancePackEvaluationFilters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConformancePackEvaluationFilters) => any;
    }
    /**
        * <p>The details of a conformance pack evaluation. Provides Config rule and Amazon Web Services resource type that was evaluated, the compliance of the conformance pack, related time stamps, and supplementary information. </p>
        */
    export interface ConformancePackEvaluationResult {
            /**
                * <p>The compliance type. The allowed values are <code>COMPLIANT</code> and <code>NON_COMPLIANT</code>. <code>INSUFFICIENT_DATA</code> is not supported.</p>
                */
            ComplianceType: ConformancePackComplianceType | string | undefined;
            /**
                * <p>Uniquely identifies an evaluation result.</p>
                */
            EvaluationResultIdentifier: EvaluationResultIdentifier | undefined;
            /**
                * <p>The time when Config rule evaluated Amazon Web Services resource.</p>
                */
            ConfigRuleInvokedTime: Date | undefined;
            /**
                * <p>The time when Config recorded the evaluation result. </p>
                */
            ResultRecordedTime: Date | undefined;
            /**
                * <p>Supplementary information about how the evaluation determined the compliance. </p>
                */
            Annotation?: string;
    }
    export namespace ConformancePackEvaluationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConformancePackEvaluationResult) => any;
    }
    /**
        * <p>Compliance information of one or more Config rules within a conformance pack. You can filter using Config rule names and compliance types.</p>
        */
    export interface ConformancePackRuleCompliance {
            /**
                * <p>Name of the Config rule.</p>
                */
            ConfigRuleName?: string;
            /**
                * <p>Compliance of the Config rule.</p>
                * 		       <p>The allowed values are <code>COMPLIANT</code>, <code>NON_COMPLIANT</code>, and <code>INSUFFICIENT_DATA</code>.</p>
                */
            ComplianceType?: ConformancePackComplianceType | string;
            /**
                * <p>Controls for the conformance pack. A control is a process to prevent or detect problems while meeting objectives.
                * 			A control can align with a specific compliance regime or map to internal controls defined by an organization.</p>
                */
            Controls?: string[];
    }
    export namespace ConformancePackRuleCompliance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConformancePackRuleCompliance) => any;
    }
    export enum ConformancePackState {
            CREATE_COMPLETE = "CREATE_COMPLETE",
            CREATE_FAILED = "CREATE_FAILED",
            CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS",
            DELETE_FAILED = "DELETE_FAILED",
            DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS"
    }
    /**
        * <p>Status details of a conformance pack.</p>
        */
    export interface ConformancePackStatusDetail {
            /**
                * <p>Name of the conformance pack.</p>
                */
            ConformancePackName: string | undefined;
            /**
                * <p>ID of the conformance pack.</p>
                */
            ConformancePackId: string | undefined;
            /**
                * <p>Amazon Resource Name (ARN) of comformance pack.</p>
                */
            ConformancePackArn: string | undefined;
            /**
                * <p>Indicates deployment status of conformance pack.</p>
                * 		       <p>Config sets the state of the conformance pack to:</p>
                * 		       <ul>
                *             <li>
                *                <p>CREATE_IN_PROGRESS when a conformance pack creation is in progress for an account.</p>
                *             </li>
                *             <li>
                *                <p>CREATE_COMPLETE when a conformance pack has been successfully created in your account.</p>
                *             </li>
                *             <li>
                *                <p>CREATE_FAILED when a conformance pack creation failed in your account.</p>
                *             </li>
                *             <li>
                *                <p>DELETE_IN_PROGRESS when a conformance pack deletion is in progress. </p>
                *             </li>
                *             <li>
                *                <p>DELETE_FAILED when a conformance pack deletion failed in your account.</p>
                *             </li>
                *          </ul>
                */
            ConformancePackState: ConformancePackState | string | undefined;
            /**
                * <p>Amazon Resource Name (ARN) of CloudFormation stack. </p>
                */
            StackArn: string | undefined;
            /**
                * <p>The reason of conformance pack creation failure.</p>
                */
            ConformancePackStatusReason?: string;
            /**
                * <p>Last time when conformation pack creation and update was requested.</p>
                */
            LastUpdateRequestedTime: Date | undefined;
            /**
                * <p>Last time when conformation pack creation and update was successful.</p>
                */
            LastUpdateCompletedTime?: Date;
    }
    export namespace ConformancePackStatusDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConformancePackStatusDetail) => any;
    }
    /**
        * <p>You have specified a template that is not valid or supported.</p>
        */
    export class ConformancePackTemplateValidationException extends __BaseException {
            readonly name: "ConformancePackTemplateValidationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConformancePackTemplateValidationException, __BaseException>);
    }
    export interface DeleteAggregationAuthorizationRequest {
            /**
                * <p>The 12-digit account ID of the account authorized to aggregate
                * 			data.</p>
                */
            AuthorizedAccountId: string | undefined;
            /**
                * <p>The region authorized to collect aggregated data.</p>
                */
            AuthorizedAwsRegion: string | undefined;
    }
    export namespace DeleteAggregationAuthorizationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAggregationAuthorizationRequest) => any;
    }
    /**
        * <p>One or more of the specified parameters are invalid. Verify
        * 			that your parameters are valid and try again.</p>
        */
    export class InvalidParameterValueException extends __BaseException {
            readonly name: "InvalidParameterValueException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidParameterValueException, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface DeleteConfigRuleRequest {
            /**
                * <p>The name of the Config rule that you want to
                * 			delete.</p>
                */
            ConfigRuleName: string | undefined;
    }
    export namespace DeleteConfigRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConfigRuleRequest) => any;
    }
    /**
        * <p>The Config rule in the request is not valid. Verify that the rule is an Config Custom Policy rule, that the rule name is correct, and that valid Amazon Resouce Names (ARNs) are used before trying again.</p>
        */
    export class NoSuchConfigRuleException extends __BaseException {
            readonly name: "NoSuchConfigRuleException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NoSuchConfigRuleException, __BaseException>);
    }
    /**
        * <p>You see this exception in the following cases: </p>
        * 		       <ul>
        *             <li>
        *                <p>For DeleteConfigRule, Config is deleting this rule. Try your request again later.</p>
        *             </li>
        *             <li>
        *                <p>For DeleteConfigRule, the rule is deleting your evaluation results. Try your request again later.</p>
        *             </li>
        *             <li>
        *                <p>For DeleteConfigRule, a remediation action is associated with the rule and Config cannot delete this rule. Delete the remediation action associated with the rule before deleting the rule and try your request again later.</p>
        *             </li>
        *             <li>
        *                <p>For PutConfigOrganizationRule, organization Config rule deletion is in progress. Try your request again later.</p>
        *             </li>
        *             <li>
        *                <p>For DeleteOrganizationConfigRule, organization Config rule creation is in progress. Try your request again later.</p>
        *             </li>
        *             <li>
        *                <p>For PutConformancePack and PutOrganizationConformancePack, a conformance pack creation, update, and deletion is in progress. Try your request again later.</p>
        *             </li>
        *             <li>
        *                <p>For DeleteConformancePack, a conformance pack creation, update, and deletion is in progress. Try your request again later.</p>
        *             </li>
        *          </ul>
        */
    export class ResourceInUseException extends __BaseException {
            readonly name: "ResourceInUseException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceInUseException, __BaseException>);
    }
    export interface DeleteConfigurationAggregatorRequest {
            /**
                * <p>The name of the configuration aggregator.</p>
                */
            ConfigurationAggregatorName: string | undefined;
    }
    export namespace DeleteConfigurationAggregatorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConfigurationAggregatorRequest) => any;
    }
    /**
        * <p>The request object for the
        * 				<code>DeleteConfigurationRecorder</code> action.</p>
        */
    export interface DeleteConfigurationRecorderRequest {
            /**
                * <p>The name of the configuration recorder to be deleted. You can
                * 			retrieve the name of your configuration recorder by using the
                * 				<code>DescribeConfigurationRecorders</code> action.</p>
                */
            ConfigurationRecorderName: string | undefined;
    }
    export namespace DeleteConfigurationRecorderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConfigurationRecorderRequest) => any;
    }
    /**
        * <p>You have specified a configuration recorder that does not
        * 			exist.</p>
        */
    export class NoSuchConfigurationRecorderException extends __BaseException {
            readonly name: "NoSuchConfigurationRecorderException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NoSuchConfigurationRecorderException, __BaseException>);
    }
    export interface DeleteConformancePackRequest {
            /**
                * <p>Name of the conformance pack you want to delete.</p>
                */
            ConformancePackName: string | undefined;
    }
    export namespace DeleteConformancePackRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConformancePackRequest) => any;
    }
    /**
        * <p>You specified one or more conformance packs that do not exist.</p>
        */
    export class NoSuchConformancePackException extends __BaseException {
            readonly name: "NoSuchConformancePackException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NoSuchConformancePackException, __BaseException>);
    }
    /**
        * <p>The input for the <a>DeleteDeliveryChannel</a>
        * 			action. The action accepts the following data, in JSON format.
        * 		</p>
        */
    export interface DeleteDeliveryChannelRequest {
            /**
                * <p>The name of the delivery channel to delete.</p>
                */
            DeliveryChannelName: string | undefined;
    }
    export namespace DeleteDeliveryChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDeliveryChannelRequest) => any;
    }
    /**
        * <p>You cannot delete the delivery channel you specified because
        * 			the configuration recorder is running.</p>
        */
    export class LastDeliveryChannelDeleteFailedException extends __BaseException {
            readonly name: "LastDeliveryChannelDeleteFailedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LastDeliveryChannelDeleteFailedException, __BaseException>);
    }
    /**
        * <p>You have specified a delivery channel that does not
        * 			exist.</p>
        */
    export class NoSuchDeliveryChannelException extends __BaseException {
            readonly name: "NoSuchDeliveryChannelException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NoSuchDeliveryChannelException, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface DeleteEvaluationResultsRequest {
            /**
                * <p>The name of the Config rule for which you want to delete
                * 			the evaluation results.</p>
                */
            ConfigRuleName: string | undefined;
    }
    export namespace DeleteEvaluationResultsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEvaluationResultsRequest) => any;
    }
    /**
        * <p>The output when you delete the evaluation results for the
        * 			specified Config rule.</p>
        */
    export interface DeleteEvaluationResultsResponse {
    }
    export namespace DeleteEvaluationResultsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEvaluationResultsResponse) => any;
    }
    export interface DeleteOrganizationConfigRuleRequest {
            /**
                * <p>The name of organization Config rule that you want to delete.</p>
                */
            OrganizationConfigRuleName: string | undefined;
    }
    export namespace DeleteOrganizationConfigRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteOrganizationConfigRuleRequest) => any;
    }
    /**
        * <p>The Config rule in the request is not valid. Verify that the rule is an organization Config Custom Policy rule, that the rule name is correct, and that valid Amazon Resouce Names (ARNs) are used before trying again.</p>
        */
    export class NoSuchOrganizationConfigRuleException extends __BaseException {
            readonly name: "NoSuchOrganizationConfigRuleException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NoSuchOrganizationConfigRuleException, __BaseException>);
    }
    /**
        * <p>For <code>PutConfigurationAggregator</code> API, you can see this exception for the following reasons:</p>
        * 		       <ul>
        *             <li>
        *                <p>No permission to call <code>EnableAWSServiceAccess</code> API</p>
        *             </li>
        *             <li>
        *                <p>The configuration aggregator cannot be updated because your Amazon Web Services Organization management account or the delegated administrator role changed.
        * 				Delete this aggregator and create a new one with the current Amazon Web Services Organization.</p>
        *             </li>
        *             <li>
        *                <p>The configuration aggregator is associated with a previous Amazon Web Services Organization and Config cannot aggregate data with current Amazon Web Services Organization.
        * 				Delete this aggregator and create a new one with the current Amazon Web Services Organization.</p>
        *             </li>
        *             <li>
        *                <p>You are not a registered delegated administrator for Config with permissions to call <code>ListDelegatedAdministrators</code> API.
        * 			Ensure that the management account registers delagated administrator for Config service principle name before the delegated administrator creates an aggregator.</p>
        *             </li>
        *          </ul>
        * 		       <p>For all <code>OrganizationConfigRule</code> and <code>OrganizationConformancePack</code> APIs, Config throws an exception if APIs are called from member accounts. All APIs must be called from organization master account.</p>
        */
    export class OrganizationAccessDeniedException extends __BaseException {
            readonly name: "OrganizationAccessDeniedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OrganizationAccessDeniedException, __BaseException>);
    }
    export interface DeleteOrganizationConformancePackRequest {
            /**
                * <p>The name of organization conformance pack that you want to delete.</p>
                */
            OrganizationConformancePackName: string | undefined;
    }
    export namespace DeleteOrganizationConformancePackRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteOrganizationConformancePackRequest) => any;
    }
    /**
        * <p>Config organization conformance pack that you passed in the filter does not exist.</p>
        * 		       <p>For DeleteOrganizationConformancePack, you tried to delete an organization conformance pack that does not exist.</p>
        */
    export class NoSuchOrganizationConformancePackException extends __BaseException {
            readonly name: "NoSuchOrganizationConformancePackException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NoSuchOrganizationConformancePackException, __BaseException>);
    }
    export interface DeletePendingAggregationRequestRequest {
            /**
                * <p>The 12-digit account ID of the account requesting to aggregate
                * 			data.</p>
                */
            RequesterAccountId: string | undefined;
            /**
                * <p>The region requesting to aggregate data.</p>
                */
            RequesterAwsRegion: string | undefined;
    }
    export namespace DeletePendingAggregationRequestRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePendingAggregationRequestRequest) => any;
    }
    export interface DeleteRemediationConfigurationRequest {
            /**
                * <p>The name of the Config rule for which you want to delete remediation configuration.</p>
                */
            ConfigRuleName: string | undefined;
            /**
                * <p>The type of a resource.</p>
                */
            ResourceType?: string;
    }
    export namespace DeleteRemediationConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRemediationConfigurationRequest) => any;
    }
    export interface DeleteRemediationConfigurationResponse {
    }
    export namespace DeleteRemediationConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRemediationConfigurationResponse) => any;
    }
    /**
        * <p>Indicates one of the following errors:</p>
        * 		       <ul>
        *             <li>
        *                <p>For PutConfigRule, the rule cannot be created because the IAM role assigned to Config lacks permissions to perform the config:Put* action.</p>
        *             </li>
        *             <li>
        *                <p>For PutConfigRule, the Lambda function cannot be invoked. Check the function ARN, and check the function's permissions.</p>
        *             </li>
        *             <li>
        *                <p>For PutOrganizationConfigRule, organization Config rule cannot be created because you do not have permissions to call IAM <code>GetRole</code> action or create a service linked role.</p>
        *             </li>
        *             <li>
        *                <p>For PutConformancePack and PutOrganizationConformancePack, a conformance pack cannot be created because you do not have permissions: </p>
        * 				           <ul>
        *                   <li>
        *                      <p>To call IAM <code>GetRole</code> action or create a service linked role.</p>
        *                   </li>
        *                   <li>
        *                      <p>To read Amazon S3 bucket.</p>
        *                   </li>
        *                </ul>
        * 			         </li>
        *          </ul>
        */
    export class InsufficientPermissionsException extends __BaseException {
            readonly name: "InsufficientPermissionsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InsufficientPermissionsException, __BaseException>);
    }
    /**
        * <p>You specified an Config rule without a remediation configuration.</p>
        */
    export class NoSuchRemediationConfigurationException extends __BaseException {
            readonly name: "NoSuchRemediationConfigurationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NoSuchRemediationConfigurationException, __BaseException>);
    }
    /**
        * <p>Remediation action is in progress. You can either cancel execution in Amazon Web Services Systems Manager or wait and try again later. </p>
        */
    export class RemediationInProgressException extends __BaseException {
            readonly name: "RemediationInProgressException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RemediationInProgressException, __BaseException>);
    }
    /**
        * <p>The details that identify a resource within Config, including the resource type and resource ID. </p>
        */
    export interface RemediationExceptionResourceKey {
            /**
                * <p>The type of a resource.</p>
                */
            ResourceType?: string;
            /**
                * <p>The ID of the resource (for example., sg-xxxxxx).</p>
                */
            ResourceId?: string;
    }
    export namespace RemediationExceptionResourceKey {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemediationExceptionResourceKey) => any;
    }
    export interface DeleteRemediationExceptionsRequest {
            /**
                * <p>The name of the Config rule for which you want to delete remediation exception configuration.</p>
                */
            ConfigRuleName: string | undefined;
            /**
                * <p>An exception list of resource exception keys to be processed with the current request. Config adds exception for each resource key. For example, Config adds 3 exceptions for 3 resource keys. </p>
                */
            ResourceKeys: RemediationExceptionResourceKey[] | undefined;
    }
    export namespace DeleteRemediationExceptionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRemediationExceptionsRequest) => any;
    }
    /**
        * <p>List of each of the failed delete remediation exceptions with specific reasons.</p>
        */
    export interface FailedDeleteRemediationExceptionsBatch {
            /**
                * <p>Returns a failure message for delete remediation exception. For example, Config creates an exception due to an internal error.</p>
                */
            FailureMessage?: string;
            /**
                * <p>Returns remediation exception resource key object of the failed items.</p>
                */
            FailedItems?: RemediationExceptionResourceKey[];
    }
    export namespace FailedDeleteRemediationExceptionsBatch {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FailedDeleteRemediationExceptionsBatch) => any;
    }
    export interface DeleteRemediationExceptionsResponse {
            /**
                * <p>Returns a list of failed delete remediation exceptions batch objects. Each object in the batch consists of a list of failed items and failure messages.</p>
                */
            FailedBatches?: FailedDeleteRemediationExceptionsBatch[];
    }
    export namespace DeleteRemediationExceptionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRemediationExceptionsResponse) => any;
    }
    /**
        * <p>You tried to delete a remediation exception that does not exist.</p>
        */
    export class NoSuchRemediationExceptionException extends __BaseException {
            readonly name: "NoSuchRemediationExceptionException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NoSuchRemediationExceptionException, __BaseException>);
    }
    export interface DeleteResourceConfigRequest {
            /**
                * <p>The type of the resource.</p>
                */
            ResourceType: string | undefined;
            /**
                * <p>Unique identifier of the resource.</p>
                */
            ResourceId: string | undefined;
    }
    export namespace DeleteResourceConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteResourceConfigRequest) => any;
    }
    /**
        * <p>There is no configuration recorder running.</p>
        */
    export class NoRunningConfigurationRecorderException extends __BaseException {
            readonly name: "NoRunningConfigurationRecorderException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NoRunningConfigurationRecorderException, __BaseException>);
    }
    export interface DeleteRetentionConfigurationRequest {
            /**
                * <p>The name of the retention configuration to delete.</p>
                */
            RetentionConfigurationName: string | undefined;
    }
    export namespace DeleteRetentionConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRetentionConfigurationRequest) => any;
    }
    /**
        * <p>You have specified a retention configuration that does not exist.</p>
        */
    export class NoSuchRetentionConfigurationException extends __BaseException {
            readonly name: "NoSuchRetentionConfigurationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NoSuchRetentionConfigurationException, __BaseException>);
    }
    export interface DeleteStoredQueryRequest {
            /**
                * <p>The name of the query that you want to delete.</p>
                */
            QueryName: string | undefined;
    }
    export namespace DeleteStoredQueryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteStoredQueryRequest) => any;
    }
    export interface DeleteStoredQueryResponse {
    }
    export namespace DeleteStoredQueryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteStoredQueryResponse) => any;
    }
    /**
        * <p>You have specified a resource that does not exist.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>The input for the <a>DeliverConfigSnapshot</a>
        * 			action.</p>
        */
    export interface DeliverConfigSnapshotRequest {
            /**
                * <p>The name of the delivery channel through which the snapshot is
                * 			delivered.</p>
                */
            deliveryChannelName: string | undefined;
    }
    export namespace DeliverConfigSnapshotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeliverConfigSnapshotRequest) => any;
    }
    /**
        * <p>The output for the <a>DeliverConfigSnapshot</a>
        * 			action, in JSON format.</p>
        */
    export interface DeliverConfigSnapshotResponse {
            /**
                * <p>The ID of the snapshot that is being created.</p>
                */
            configSnapshotId?: string;
    }
    export namespace DeliverConfigSnapshotResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeliverConfigSnapshotResponse) => any;
    }
    /**
        * <p>The channel through which Config delivers notifications and
        * 			updated configuration states.</p>
        */
    export interface DeliveryChannel {
            /**
                * <p>The name of the delivery channel. By default, Config
                * 			assigns the name "default" when creating the delivery channel. To
                * 			change the delivery channel name, you must use the
                * 			DeleteDeliveryChannel action to delete your current delivery
                * 			channel, and then you must use the PutDeliveryChannel command to
                * 			create a delivery channel that has the desired name.</p>
                */
            name?: string;
            /**
                * <p>The name of the Amazon S3 bucket to which Config delivers
                * 			configuration snapshots and configuration history files.</p>
                * 		       <p>If you specify a bucket that belongs to another Amazon Web Services account,
                * 			that bucket must have policies that grant access permissions to Config. For more information, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/s3-bucket-policy.html">Permissions for the Amazon S3 Bucket</a> in the Config
                * 			Developer Guide.</p>
                */
            s3BucketName?: string;
            /**
                * <p>The prefix for the specified Amazon S3 bucket.</p>
                */
            s3KeyPrefix?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the Key Management Service (KMS ) KMS key (KMS key) used to encrypt objects delivered by Config.
                * 			Must belong to the same Region as the destination S3 bucket.</p>
                */
            s3KmsKeyArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which
                * 			Config sends notifications about configuration
                * 			changes.</p>
                * 		       <p>If you choose a topic from another account, the topic must have
                * 			policies that grant access permissions to Config. For more
                * 			information, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/sns-topic-policy.html">Permissions for the Amazon SNS Topic</a> in the Config
                * 			Developer Guide.</p>
                */
            snsTopicARN?: string;
            /**
                * <p>The options for how often Config delivers configuration
                * 			snapshots to the Amazon S3 bucket.</p>
                */
            configSnapshotDeliveryProperties?: ConfigSnapshotDeliveryProperties;
    }
    export namespace DeliveryChannel {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeliveryChannel) => any;
    }
    /**
        * <p>The status of a specified delivery channel.</p>
        * 		       <p>Valid values: <code>Success</code> | <code>Failure</code>
        * 		       </p>
        */
    export interface DeliveryChannelStatus {
            /**
                * <p>The name of the delivery channel.</p>
                */
            name?: string;
            /**
                * <p>A list containing the status of the delivery of the snapshot to
                * 			the specified Amazon S3 bucket.</p>
                */
            configSnapshotDeliveryInfo?: ConfigExportDeliveryInfo;
            /**
                * <p>A list that contains the status of the delivery of the
                * 			configuration history to the specified Amazon S3 bucket.</p>
                */
            configHistoryDeliveryInfo?: ConfigExportDeliveryInfo;
            /**
                * <p>A list containing the status of the delivery of the
                * 			configuration stream notification to the specified Amazon SNS
                * 			topic.</p>
                */
            configStreamDeliveryInfo?: ConfigStreamDeliveryInfo;
    }
    export namespace DeliveryChannelStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeliveryChannelStatus) => any;
    }
    export interface DescribeAggregateComplianceByConfigRulesRequest {
            /**
                * <p>The name of the configuration aggregator.</p>
                */
            ConfigurationAggregatorName: string | undefined;
            /**
                * <p>Filters the results by ConfigRuleComplianceFilters object.
                * 		</p>
                */
            Filters?: ConfigRuleComplianceFilters;
            /**
                * <p>The maximum number of evaluation results returned on each page.
                * 			The default is
                * 			maximum.
                * 			If you specify 0, Config uses the default.</p>
                */
            Limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use
                * 			to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAggregateComplianceByConfigRulesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAggregateComplianceByConfigRulesRequest) => any;
    }
    export interface DescribeAggregateComplianceByConfigRulesResponse {
            /**
                * <p>Returns a list of AggregateComplianceByConfigRule
                * 			object.</p>
                */
            AggregateComplianceByConfigRules?: AggregateComplianceByConfigRule[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use
                * 			to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAggregateComplianceByConfigRulesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAggregateComplianceByConfigRulesResponse) => any;
    }
    /**
        * <p>The specified limit is outside the allowable range.</p>
        */
    export class InvalidLimitException extends __BaseException {
            readonly name: "InvalidLimitException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidLimitException, __BaseException>);
    }
    /**
        * <p>The specified next token is invalid. Specify the
        * 				<code>nextToken</code> string that was returned in the previous
        * 			response to get the next page of results.</p>
        */
    export class InvalidNextTokenException extends __BaseException {
            readonly name: "InvalidNextTokenException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidNextTokenException, __BaseException>);
    }
    export interface DescribeAggregateComplianceByConformancePacksRequest {
            /**
                * <p>The name of the configuration aggregator.</p>
                */
            ConfigurationAggregatorName: string | undefined;
            /**
                * <p>Filters the result by <code>AggregateConformancePackComplianceFilters</code> object.</p>
                */
            Filters?: AggregateConformancePackComplianceFilters;
            /**
                * <p>The maximum number of conformance packs compliance details returned on each page. The default is maximum. If you specify 0, Config uses the default. </p>
                */
            Limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAggregateComplianceByConformancePacksRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAggregateComplianceByConformancePacksRequest) => any;
    }
    export interface DescribeAggregateComplianceByConformancePacksResponse {
            /**
                * <p>Returns the <code>AggregateComplianceByConformancePack</code> object.</p>
                */
            AggregateComplianceByConformancePacks?: AggregateComplianceByConformancePack[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAggregateComplianceByConformancePacksResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAggregateComplianceByConformancePacksResponse) => any;
    }
    export interface DescribeAggregationAuthorizationsRequest {
            /**
                * <p>The maximum number of AggregationAuthorizations returned on
                * 			each page. The default is maximum. If you specify 0, Config uses
                * 			the default.</p>
                */
            Limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use
                * 			to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAggregationAuthorizationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAggregationAuthorizationsRequest) => any;
    }
    export interface DescribeAggregationAuthorizationsResponse {
            /**
                * <p>Returns a list of authorizations granted to various aggregator
                * 			accounts and regions.</p>
                */
            AggregationAuthorizations?: AggregationAuthorization[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use
                * 			to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAggregationAuthorizationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAggregationAuthorizationsResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeComplianceByConfigRuleRequest {
            /**
                * <p>Specify one or more Config rule names to filter the results
                * 			by rule.</p>
                */
            ConfigRuleNames?: string[];
            /**
                * <p>Filters the results by compliance.</p>
                * 		       <p>The allowed values are <code>COMPLIANT</code> and <code>NON_COMPLIANT</code>.</p>
                */
            ComplianceTypes?: (ComplianceType | string)[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page
                * 			that you use to get the next page of results in a paginated
                * 			response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeComplianceByConfigRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeComplianceByConfigRuleRequest) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeComplianceByConfigRuleResponse {
            /**
                * <p>Indicates whether each of the specified Config rules is
                * 			compliant.</p>
                */
            ComplianceByConfigRules?: ComplianceByConfigRule[];
            /**
                * <p>The string that you use in a subsequent request to get the next
                * 			page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeComplianceByConfigRuleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeComplianceByConfigRuleResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeComplianceByResourceRequest {
            /**
                * <p>The types of Amazon Web Services resources for which you want compliance
                * 			information (for example, <code>AWS::EC2::Instance</code>). For this
                * 			action, you can specify that the resource type is an Amazon Web Services account by
                * 			specifying <code>AWS::::Account</code>.</p>
                */
            ResourceType?: string;
            /**
                * <p>The ID of the Amazon Web Services resource for which you want compliance
                * 			information. You can specify only one resource ID. If you specify a
                * 			resource ID, you must also specify a type for
                * 				<code>ResourceType</code>.</p>
                */
            ResourceId?: string;
            /**
                * <p>Filters the results by compliance.</p>
                * 		       <p>The allowed values are <code>COMPLIANT</code>, <code>NON_COMPLIANT</code>, and <code>INSUFFICIENT_DATA</code>.</p>
                */
            ComplianceTypes?: (ComplianceType | string)[];
            /**
                * <p>The maximum number of evaluation results returned on each page.
                * 			The default is 10. You cannot specify a number greater than 100. If
                * 			you specify 0, Config uses the default.</p>
                */
            Limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned on a previous page
                * 			that you use to get the next page of results in a paginated
                * 			response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeComplianceByResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeComplianceByResourceRequest) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeComplianceByResourceResponse {
            /**
                * <p>Indicates whether the specified Amazon Web Services resource complies with all
                * 			of the Config rules that evaluate it.</p>
                */
            ComplianceByResources?: ComplianceByResource[];
            /**
                * <p>The string that you use in a subsequent request to get the next
                * 			page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeComplianceByResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeComplianceByResourceResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeConfigRuleEvaluationStatusRequest {
            /**
                * <p>The name of the Config managed rules for which you want
                * 			status information. If you do not specify any names, Config
                * 			returns status information for all Config managed rules that you
                * 			use.</p>
                */
            ConfigRuleNames?: string[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page
                * 			that you use to get the next page of results in a paginated
                * 			response.</p>
                */
            NextToken?: string;
            /**
                * <p>The number of rule evaluation results that you want
                * 			returned.</p>
                *
                * 		       <p>This parameter is required if the rule limit for your account
                * 			is more than the default of 150 rules.</p>
                * 		       <p>For information about requesting a rule limit increase, see
                * 				<a href="http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_config">Config Limits</a> in the <i>Amazon Web Services General
                * 				Reference Guide</i>.</p>
                */
            Limit?: number;
    }
    export namespace DescribeConfigRuleEvaluationStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigRuleEvaluationStatusRequest) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeConfigRuleEvaluationStatusResponse {
            /**
                * <p>Status information about your Config managed rules.</p>
                */
            ConfigRulesEvaluationStatus?: ConfigRuleEvaluationStatus[];
            /**
                * <p>The string that you use in a subsequent request to get the next
                * 			page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeConfigRuleEvaluationStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigRuleEvaluationStatusResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeConfigRulesRequest {
            /**
                * <p>The names of the Config rules for which you want details.
                * 			If you do not specify any names, Config returns details for all
                * 			your rules.</p>
                */
            ConfigRuleNames?: string[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page
                * 			that you use to get the next page of results in a paginated
                * 			response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeConfigRulesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigRulesRequest) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeConfigRulesResponse {
            /**
                * <p>The details about your Config rules.</p>
                */
            ConfigRules?: ConfigRule[];
            /**
                * <p>The string that you use in a subsequent request to get the next
                * 			page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeConfigRulesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigRulesResponse) => any;
    }
    export interface DescribeConfigurationAggregatorsRequest {
            /**
                * <p>The name of the configuration aggregators.</p>
                */
            ConfigurationAggregatorNames?: string[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use
                * 			to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of configuration aggregators returned on
                * 			each page. The default is maximum. If you specify 0, Config uses
                * 			the default.</p>
                */
            Limit?: number;
    }
    export namespace DescribeConfigurationAggregatorsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigurationAggregatorsRequest) => any;
    }
    export interface DescribeConfigurationAggregatorsResponse {
            /**
                * <p>Returns a ConfigurationAggregators object.</p>
                */
            ConfigurationAggregators?: ConfigurationAggregator[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use
                * 			to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeConfigurationAggregatorsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigurationAggregatorsResponse) => any;
    }
    export interface DescribeConfigurationAggregatorSourcesStatusRequest {
            /**
                * <p>The name of the configuration aggregator.</p>
                */
            ConfigurationAggregatorName: string | undefined;
            /**
                * <p>Filters the status type.</p>
                * 		       <ul>
                *             <li>
                * 				           <p>Valid value FAILED indicates errors while moving
                * 					data.</p>
                * 			         </li>
                *             <li>
                * 				           <p>Valid value SUCCEEDED indicates the data was
                * 					successfully moved.</p>
                * 			         </li>
                *             <li>
                * 				           <p>Valid value OUTDATED indicates the data is not the most
                * 					recent.</p>
                * 			         </li>
                *          </ul>
                */
            UpdateStatus?: (AggregatedSourceStatusType | string)[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use
                * 			to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of AggregatorSourceStatus returned on each
                * 			page. The default is maximum. If you specify 0, Config uses the
                * 			default.</p>
                */
            Limit?: number;
    }
    export namespace DescribeConfigurationAggregatorSourcesStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigurationAggregatorSourcesStatusRequest) => any;
    }
    export interface DescribeConfigurationAggregatorSourcesStatusResponse {
            /**
                * <p>Returns an AggregatedSourceStatus object.
                * 			</p>
                */
            AggregatedSourceStatusList?: AggregatedSourceStatus[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use
                * 			to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeConfigurationAggregatorSourcesStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigurationAggregatorSourcesStatusResponse) => any;
    }
    /**
        * <p>The input for the <a>DescribeConfigurationRecorders</a> action.</p>
        */
    export interface DescribeConfigurationRecordersRequest {
            /**
                * <p>A list of configuration recorder names.</p>
                */
            ConfigurationRecorderNames?: string[];
    }
    export namespace DescribeConfigurationRecordersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigurationRecordersRequest) => any;
    }
    /**
        * <p>The output for the <a>DescribeConfigurationRecorders</a> action.</p>
        */
    export interface DescribeConfigurationRecordersResponse {
            /**
                * <p>A list that contains the descriptions of the specified
                * 			configuration recorders.</p>
                */
            ConfigurationRecorders?: ConfigurationRecorder[];
    }
    export namespace DescribeConfigurationRecordersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigurationRecordersResponse) => any;
    }
    /**
        * <p>The input for the <a>DescribeConfigurationRecorderStatus</a>
        * 			action.</p>
        */
    export interface DescribeConfigurationRecorderStatusRequest {
            /**
                * <p>The name(s) of the configuration recorder. If the name is not
                * 			specified, the action returns the current status of all the
                * 			configuration recorders associated with the account.</p>
                */
            ConfigurationRecorderNames?: string[];
    }
    export namespace DescribeConfigurationRecorderStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigurationRecorderStatusRequest) => any;
    }
    /**
        * <p>The output for the <a>DescribeConfigurationRecorderStatus</a> action, in JSON
        * 			format.</p>
        */
    export interface DescribeConfigurationRecorderStatusResponse {
            /**
                * <p>A list that contains status of the specified
                * 			recorders.</p>
                */
            ConfigurationRecordersStatus?: ConfigurationRecorderStatus[];
    }
    export namespace DescribeConfigurationRecorderStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigurationRecorderStatusResponse) => any;
    }
    export interface DescribeConformancePackComplianceRequest {
            /**
                * <p>Name of the conformance pack.</p>
                */
            ConformancePackName: string | undefined;
            /**
                * <p>A <code>ConformancePackComplianceFilters</code> object.</p>
                */
            Filters?: ConformancePackComplianceFilters;
            /**
                * <p>The maximum number of Config rules within a conformance pack are returned on each page.</p>
                */
            Limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned in a previous request that you use to request the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeConformancePackComplianceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConformancePackComplianceRequest) => any;
    }
    export interface DescribeConformancePackComplianceResponse {
            /**
                * <p>Name of the conformance pack.</p>
                */
            ConformancePackName: string | undefined;
            /**
                * <p>Returns a list of <code>ConformancePackRuleCompliance</code> objects.</p>
                */
            ConformancePackRuleComplianceList: ConformancePackRuleCompliance[] | undefined;
            /**
                * <p>The <code>nextToken</code> string returned in a previous request that you use to request the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeConformancePackComplianceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConformancePackComplianceResponse) => any;
    }
    /**
        * <p>Config rule that you passed in the filter does not exist.</p>
        */
    export class NoSuchConfigRuleInConformancePackException extends __BaseException {
            readonly name: "NoSuchConfigRuleInConformancePackException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NoSuchConfigRuleInConformancePackException, __BaseException>);
    }
    export interface DescribeConformancePacksRequest {
            /**
                * <p>Comma-separated list of conformance pack names for which you want details. If you do not specify any names, Config returns details for all your conformance packs. </p>
                */
            ConformancePackNames?: string[];
            /**
                * <p>The maximum number of conformance packs returned on each page.</p>
                */
            Limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned in a previous request that you use to request the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeConformancePacksRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConformancePacksRequest) => any;
    }
    export interface DescribeConformancePacksResponse {
            /**
                * <p>Returns a list of <code>ConformancePackDetail</code> objects.</p>
                */
            ConformancePackDetails?: ConformancePackDetail[];
            /**
                * <p>The <code>nextToken</code> string returned in a previous request that you use to request the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeConformancePacksResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConformancePacksResponse) => any;
    }
    export interface DescribeConformancePackStatusRequest {
            /**
                * <p>Comma-separated list of conformance pack names.</p>
                */
            ConformancePackNames?: string[];
            /**
                * <p>The maximum number of conformance packs status returned on each page.</p>
                */
            Limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned in a previous request that you use to request the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeConformancePackStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConformancePackStatusRequest) => any;
    }
    export interface DescribeConformancePackStatusResponse {
            /**
                * <p>A list of <code>ConformancePackStatusDetail</code> objects.</p>
                */
            ConformancePackStatusDetails?: ConformancePackStatusDetail[];
            /**
                * <p>The <code>nextToken</code> string returned in a previous request that you use to request the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeConformancePackStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConformancePackStatusResponse) => any;
    }
    /**
        * <p>The input for the <a>DescribeDeliveryChannels</a>
        * 			action.</p>
        */
    export interface DescribeDeliveryChannelsRequest {
            /**
                * <p>A list of delivery channel names.</p>
                */
            DeliveryChannelNames?: string[];
    }
    export namespace DescribeDeliveryChannelsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDeliveryChannelsRequest) => any;
    }
    /**
        * <p>The output for the <a>DescribeDeliveryChannels</a>
        * 			action.</p>
        */
    export interface DescribeDeliveryChannelsResponse {
            /**
                * <p>A list that contains the descriptions of the specified delivery
                * 			channel.</p>
                */
            DeliveryChannels?: DeliveryChannel[];
    }
    export namespace DescribeDeliveryChannelsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDeliveryChannelsResponse) => any;
    }
    /**
        * <p>The input for the <a>DeliveryChannelStatus</a>
        * 			action.</p>
        */
    export interface DescribeDeliveryChannelStatusRequest {
            /**
                * <p>A list of delivery channel names.</p>
                */
            DeliveryChannelNames?: string[];
    }
    export namespace DescribeDeliveryChannelStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDeliveryChannelStatusRequest) => any;
    }
    /**
        * <p>The output for the <a>DescribeDeliveryChannelStatus</a> action.</p>
        */
    export interface DescribeDeliveryChannelStatusResponse {
            /**
                * <p>A list that contains the status of a specified delivery
                * 			channel.</p>
                */
            DeliveryChannelsStatus?: DeliveryChannelStatus[];
    }
    export namespace DescribeDeliveryChannelStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDeliveryChannelStatusResponse) => any;
    }
    export interface DescribeOrganizationConfigRulesRequest {
            /**
                * <p>The names of organization Config rules for which you want details. If you do not specify any names, Config returns details for all your organization Config rules.</p>
                */
            OrganizationConfigRuleNames?: string[];
            /**
                * <p>The maximum number of organization Config rules returned on each page. If you do no specify a number, Config uses the default. The default is 100.</p>
                */
            Limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeOrganizationConfigRulesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOrganizationConfigRulesRequest) => any;
    }
    export enum OrganizationConfigRuleTriggerTypeNoSN {
            CONFIGURATION_ITEM_CHANGE_NOTIFICATION = "ConfigurationItemChangeNotification",
            OVERSIZED_CONFIGURATION_ITEM_CHANGE_NOTIFCATION = "OversizedConfigurationItemChangeNotification"
    }
    /**
        * <p>An object that specifies metadata for your organization Config Custom Policy rule including the runtime system in use, which accounts have debug logging enabled, and
        * 			other custom rule metadata such as resource type, resource ID of Amazon Web Services
        * 			resource, and organization trigger types that trigger Config to evaluate
        * 				Amazon Web Services resources against a rule.</p>
        */
    export interface OrganizationCustomPolicyRuleMetadataNoPolicy {
            /**
                * <p>The description that you provide for your organization Config Custom Policy rule.</p>
                */
            Description?: string;
            /**
                * <p>The type of notification that triggers Config to run an evaluation for a rule.
                * 			For Config Custom Policy rules, Config supports change
                * 			triggered notification types:</p>
                *
                * 		       <ul>
                *             <li>
                *                <p>
                *                   <code>ConfigurationItemChangeNotification</code> - Triggers an evaluation when Config delivers a configuration item as a result of a resource change.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>OversizedConfigurationItemChangeNotification</code> - Triggers an evaluation when Config delivers an oversized configuration item.
                * 				Config may generate this notification type when a resource changes and the notification exceeds the maximum size allowed by Amazon SNS.</p>
                *             </li>
                *          </ul>
                */
            OrganizationConfigRuleTriggerTypes?: (OrganizationConfigRuleTriggerTypeNoSN | string)[];
            /**
                * <p>A string, in JSON format, that is passed to your organization Config Custom Policy rule.</p>
                */
            InputParameters?: string;
            /**
                * <p>The maximum frequency with which Config runs evaluations for a rule. Your
                * 			Config Custom Policy rule is triggered when Config delivers
                * 			the configuration snapshot. For more information, see <a>ConfigSnapshotDeliveryProperties</a>.</p>
                */
            MaximumExecutionFrequency?: MaximumExecutionFrequency | string;
            /**
                * <p>The type of the Amazon Web Services resource that was evaluated.</p>
                */
            ResourceTypesScope?: string[];
            /**
                * <p>The ID of the Amazon Web Services resource that was evaluated.</p>
                */
            ResourceIdScope?: string;
            /**
                * <p>One part of a key-value pair that make up a tag. A key is a general label that acts like a category for more specific tag values.</p>
                */
            TagKeyScope?: string;
            /**
                * <p>The optional part of a key-value pair that make up a tag. A value acts as a descriptor within a tag category (key).</p>
                */
            TagValueScope?: string;
            /**
                * <p>The runtime system for your organization Config Custom Policy rules. Guard is a policy-as-code language that allows you to write policies that are enforced by Config Custom Policy rules. For more information about Guard, see the <a href="https://github.com/aws-cloudformation/cloudformation-guard">Guard GitHub
                * 			Repository</a>.</p>
                */
            PolicyRuntime?: string;
            /**
                * <p>A list of accounts that you can enable debug logging for your organization Config Custom Policy rule. List is null when debug logging is enabled for all accounts.</p>
                */
            DebugLogDeliveryAccounts?: string[];
    }
    export namespace OrganizationCustomPolicyRuleMetadataNoPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OrganizationCustomPolicyRuleMetadataNoPolicy) => any;
    }
    export enum OrganizationConfigRuleTriggerType {
            CONFIGURATION_ITEM_CHANGE_NOTIFICATION = "ConfigurationItemChangeNotification",
            OVERSIZED_CONFIGURATION_ITEM_CHANGE_NOTIFCATION = "OversizedConfigurationItemChangeNotification",
            SCHEDULED_NOTIFICATION = "ScheduledNotification"
    }
    /**
        * <p>An object that specifies organization custom rule metadata such as resource type, resource ID of Amazon Web Services resource, Lambda function ARN,
        * 			and organization trigger types that trigger Config to evaluate your Amazon Web Services resources against a rule.
        * 			It also provides the frequency with which you want Config to run evaluations for the rule if the trigger type is periodic.</p>
        */
    export interface OrganizationCustomRuleMetadata {
            /**
                * <p>The description that you provide for your organization Config rule.</p>
                */
            Description?: string;
            /**
                * <p>The lambda function ARN.</p>
                */
            LambdaFunctionArn: string | undefined;
            /**
                * <p>The type of notification that triggers Config to run an evaluation for a rule. You can specify the following notification types:</p>
                *
                * 		       <ul>
                *             <li>
                *                <p>
                *                   <code>ConfigurationItemChangeNotification</code> - Triggers an evaluation when Config delivers a configuration item as a result of a resource change.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>OversizedConfigurationItemChangeNotification</code> - Triggers an evaluation when Config delivers an oversized configuration item.
                * 			         	Config may generate this notification type when a resource changes and the notification exceeds the maximum size allowed by Amazon SNS.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ScheduledNotification</code> - Triggers a periodic evaluation at the frequency specified for <code>MaximumExecutionFrequency</code>.</p>
                *             </li>
                *          </ul>
                */
            OrganizationConfigRuleTriggerTypes: (OrganizationConfigRuleTriggerType | string)[] | undefined;
            /**
                * <p>A string, in JSON format, that is passed to your organization Config rule Lambda function.</p>
                */
            InputParameters?: string;
            /**
                * <p>The maximum frequency with which Config runs evaluations for a rule.
                * 			Your custom rule is triggered when Config delivers the configuration snapshot. For more information, see <a>ConfigSnapshotDeliveryProperties</a>.</p>
                * 		       <note>
                *             <p>By default, rules with a periodic trigger are evaluated every 24 hours. To change the frequency, specify a valid
                * 			value for the <code>MaximumExecutionFrequency</code> parameter.</p>
                *          </note>
                */
            MaximumExecutionFrequency?: MaximumExecutionFrequency | string;
            /**
                * <p>The type of the Amazon Web Services resource that was evaluated.</p>
                */
            ResourceTypesScope?: string[];
            /**
                * <p>The ID of the Amazon Web Services resource that was evaluated.</p>
                */
            ResourceIdScope?: string;
            /**
                * <p>One part of a key-value pair that make up a tag.
                * 			A key is a general label that acts like a category for more specific tag values. </p>
                */
            TagKeyScope?: string;
            /**
                * <p>The optional part of a key-value pair that make up a tag.
                * 			A value acts as a descriptor within a tag category (key). </p>
                */
            TagValueScope?: string;
    }
    export namespace OrganizationCustomRuleMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OrganizationCustomRuleMetadata) => any;
    }
    /**
        * <p>An object that specifies organization managed rule metadata such as resource type and ID of Amazon Web Services resource along with the rule identifier.
        * 			It also provides the frequency with which you want Config to run evaluations for the rule if the trigger type is periodic.</p>
        */
    export interface OrganizationManagedRuleMetadata {
            /**
                * <p>The description that you provide for your organization Config rule.</p>
                */
            Description?: string;
            /**
                * <p>For organization config managed rules, a predefined identifier from a
                * 			list. For example, <code>IAM_PASSWORD_POLICY</code> is a managed
                * 			rule. To reference a managed rule, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html">Using Config managed rules</a>.</p>
                */
            RuleIdentifier: string | undefined;
            /**
                * <p>A string, in JSON format, that is passed to your organization Config rule Lambda function.</p>
                */
            InputParameters?: string;
            /**
                * <p>The maximum frequency with which Config runs evaluations for a rule. This is for an Config managed rule that is triggered at a periodic frequency.</p>
                * 		       <note>
                *             <p>By default, rules with a periodic trigger are evaluated every 24 hours. To change the frequency, specify a valid
                * 			value for the <code>MaximumExecutionFrequency</code> parameter.</p>
                *          </note>
                */
            MaximumExecutionFrequency?: MaximumExecutionFrequency | string;
            /**
                * <p>The type of the Amazon Web Services resource that was evaluated.</p>
                */
            ResourceTypesScope?: string[];
            /**
                * <p>The ID of the Amazon Web Services resource that was evaluated.</p>
                */
            ResourceIdScope?: string;
            /**
                * <p>One part of a key-value pair that make up a tag.
                * 			A key is a general label that acts like a category for more specific tag values. </p>
                */
            TagKeyScope?: string;
            /**
                * <p>The optional part of a key-value pair that make up a tag.
                * 			A value acts as a descriptor within a tag category (key).</p>
                */
            TagValueScope?: string;
    }
    export namespace OrganizationManagedRuleMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OrganizationManagedRuleMetadata) => any;
    }
    /**
        * <p>An organization Config rule that has information about Config rules that Config creates in member accounts.</p>
        */
    export interface OrganizationConfigRule {
            /**
                * <p>The name that you assign to organization Config rule.</p>
                */
            OrganizationConfigRuleName: string | undefined;
            /**
                * <p>Amazon Resource Name (ARN) of organization Config rule.</p>
                */
            OrganizationConfigRuleArn: string | undefined;
            /**
                * <p>An <code>OrganizationManagedRuleMetadata</code> object.</p>
                */
            OrganizationManagedRuleMetadata?: OrganizationManagedRuleMetadata;
            /**
                * <p>An <code>OrganizationCustomRuleMetadata</code> object.</p>
                */
            OrganizationCustomRuleMetadata?: OrganizationCustomRuleMetadata;
            /**
                * <p>A comma-separated list of accounts excluded from organization Config rule.</p>
                */
            ExcludedAccounts?: string[];
            /**
                * <p>The timestamp of the last update.</p>
                */
            LastUpdateTime?: Date;
            /**
                * <p>An
                * 			object that specifies metadata for your organization's Config Custom Policy rule. The metadata includes the runtime system in use, which accounts have
                * 			debug logging enabled, and other custom rule metadata, such as resource type, resource
                * 			ID of Amazon Web Services resource, and organization trigger types that initiate Config to evaluate Amazon Web Services resources against a rule.</p>
                */
            OrganizationCustomPolicyRuleMetadata?: OrganizationCustomPolicyRuleMetadataNoPolicy;
    }
    export namespace OrganizationConfigRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OrganizationConfigRule) => any;
    }
    export interface DescribeOrganizationConfigRulesResponse {
            /**
                * <p>Returns a list of <code>OrganizationConfigRule</code> objects.</p>
                */
            OrganizationConfigRules?: OrganizationConfigRule[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeOrganizationConfigRulesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOrganizationConfigRulesResponse) => any;
    }
    export interface DescribeOrganizationConfigRuleStatusesRequest {
            /**
                * <p>The names of organization Config rules for which you want status details. If you do not specify any names, Config returns details for all your organization Config rules.</p>
                */
            OrganizationConfigRuleNames?: string[];
            /**
                * <p>The maximum number of <code>OrganizationConfigRuleStatuses</code> returned on each page. If you do no specify a number, Config uses the default. The default is 100.</p>
                */
            Limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeOrganizationConfigRuleStatusesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOrganizationConfigRuleStatusesRequest) => any;
    }
    export enum OrganizationRuleStatus {
            CREATE_FAILED = "CREATE_FAILED",
            CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS",
            CREATE_SUCCESSFUL = "CREATE_SUCCESSFUL",
            DELETE_FAILED = "DELETE_FAILED",
            DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS",
            DELETE_SUCCESSFUL = "DELETE_SUCCESSFUL",
            UPDATE_FAILED = "UPDATE_FAILED",
            UPDATE_IN_PROGRESS = "UPDATE_IN_PROGRESS",
            UPDATE_SUCCESSFUL = "UPDATE_SUCCESSFUL"
    }
    /**
        * <p>Returns the status for an organization Config rule in an organization.</p>
        */
    export interface OrganizationConfigRuleStatus {
            /**
                * <p>The name that you assign to organization Config rule.</p>
                */
            OrganizationConfigRuleName: string | undefined;
            /**
                * <p>Indicates deployment status of an organization Config rule.
                * 			When master account calls PutOrganizationConfigRule action for the first time, Config rule status is created in all the member accounts.
                * 			When master account calls PutOrganizationConfigRule action for the second time, Config rule status is updated in all the member accounts. Additionally, Config rule status is updated when one or more member accounts join or leave an organization.
                * 			Config rule status is deleted when the master account deletes OrganizationConfigRule in all the member accounts and disables service access for <code>config-multiaccountsetup.amazonaws.com</code>.</p>
                * 			      <p>Config sets the state of the rule to:</p>
                * 		       <ul>
                *             <li>
                *                <p>
                *                   <code>CREATE_SUCCESSFUL</code> when an organization Config rule has been successfully created in all the member accounts. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CREATE_IN_PROGRESS</code> when an organization Config rule creation is in progress.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CREATE_FAILED</code> when an organization Config rule creation failed in one or more member accounts within that organization.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETE_FAILED</code> when an organization Config rule deletion failed in one or more member accounts within that organization.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETE_IN_PROGRESS</code> when an organization Config rule deletion is in progress.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETE_SUCCESSFUL</code> when an organization Config rule has been successfully deleted from all the member accounts.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UPDATE_SUCCESSFUL</code> when an organization Config rule has been successfully updated in all the member accounts.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UPDATE_IN_PROGRESS</code> when an organization Config rule update is in progress.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UPDATE_FAILED</code> when an organization Config rule update failed in one or more member accounts within that organization.</p>
                *             </li>
                *          </ul>
                */
            OrganizationRuleStatus: OrganizationRuleStatus | string | undefined;
            /**
                * <p>An error code that is returned when organization Config rule creation or deletion has failed.</p>
                */
            ErrorCode?: string;
            /**
                * <p>An error message indicating that organization Config rule creation or deletion failed due to an error.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>The timestamp of the last update.</p>
                */
            LastUpdateTime?: Date;
    }
    export namespace OrganizationConfigRuleStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OrganizationConfigRuleStatus) => any;
    }
    export interface DescribeOrganizationConfigRuleStatusesResponse {
            /**
                * <p>A list of <code>OrganizationConfigRuleStatus</code> objects.</p>
                */
            OrganizationConfigRuleStatuses?: OrganizationConfigRuleStatus[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeOrganizationConfigRuleStatusesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOrganizationConfigRuleStatusesResponse) => any;
    }
    export interface DescribeOrganizationConformancePacksRequest {
            /**
                * <p>The name that you assign to an organization conformance pack.</p>
                */
            OrganizationConformancePackNames?: string[];
            /**
                * <p>The maximum number of organization config packs returned on each page. If you do no specify a
                * 			number, Config uses the default. The default is 100.</p>
                */
            Limit?: number;
            /**
                * <p>The nextToken string returned on a previous page that you use to get the next page of results in a
                * 			paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeOrganizationConformancePacksRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOrganizationConformancePacksRequest) => any;
    }
    /**
        * <p>An organization conformance pack that has information about conformance packs that Config creates in member accounts. </p>
        */
    export interface OrganizationConformancePack {
            /**
                * <p>The name you assign to an organization conformance pack.</p>
                */
            OrganizationConformancePackName: string | undefined;
            /**
                * <p>Amazon Resource Name (ARN) of organization conformance pack.</p>
                */
            OrganizationConformancePackArn: string | undefined;
            /**
                * <p>The name of the Amazon S3 bucket where Config stores conformance pack templates.  </p>
                * 		       <note>
                *             <p>This field is optional.</p>
                *          </note>
                */
            DeliveryS3Bucket?: string;
            /**
                * <p>Any folder structure you want to add to an Amazon S3 bucket.</p>
                * 		       <note>
                *             <p>This field is optional.</p>
                *          </note>
                */
            DeliveryS3KeyPrefix?: string;
            /**
                * <p>A list of <code>ConformancePackInputParameter</code> objects.</p>
                */
            ConformancePackInputParameters?: ConformancePackInputParameter[];
            /**
                * <p>A comma-separated list of accounts excluded from organization conformance pack.</p>
                */
            ExcludedAccounts?: string[];
            /**
                * <p>Last time when organization conformation pack was updated.</p>
                */
            LastUpdateTime: Date | undefined;
    }
    export namespace OrganizationConformancePack {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OrganizationConformancePack) => any;
    }
    export interface DescribeOrganizationConformancePacksResponse {
            /**
                * <p>Returns a list of OrganizationConformancePacks objects.</p>
                */
            OrganizationConformancePacks?: OrganizationConformancePack[];
            /**
                * <p>The nextToken string returned on a previous page that you use to get the next page of results in a
                * 			paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeOrganizationConformancePacksResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOrganizationConformancePacksResponse) => any;
    }
    export interface DescribeOrganizationConformancePackStatusesRequest {
            /**
                * <p>The names of organization conformance packs for which you want status details.
                * 			If you do not specify any names, Config returns details for all your organization conformance packs. </p>
                */
            OrganizationConformancePackNames?: string[];
            /**
                * <p>The maximum number of OrganizationConformancePackStatuses returned on each page.
                * 			If you do no specify a number, Config uses the default. The default is 100. </p>
                */
            Limit?: number;
            /**
                * <p>The nextToken string returned on a previous page that you use to get the next page of results in a paginated response. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeOrganizationConformancePackStatusesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOrganizationConformancePackStatusesRequest) => any;
    }
    export enum OrganizationResourceStatus {
            CREATE_FAILED = "CREATE_FAILED",
            CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS",
            CREATE_SUCCESSFUL = "CREATE_SUCCESSFUL",
            DELETE_FAILED = "DELETE_FAILED",
            DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS",
            DELETE_SUCCESSFUL = "DELETE_SUCCESSFUL",
            UPDATE_FAILED = "UPDATE_FAILED",
            UPDATE_IN_PROGRESS = "UPDATE_IN_PROGRESS",
            UPDATE_SUCCESSFUL = "UPDATE_SUCCESSFUL"
    }
    /**
        * <p>Returns the status for an organization conformance pack in an organization.</p>
        */
    export interface OrganizationConformancePackStatus {
            /**
                * <p>The name that you assign to organization conformance pack.</p>
                */
            OrganizationConformancePackName: string | undefined;
            /**
                * <p>Indicates deployment status of an organization conformance pack.
                * 			When master account calls PutOrganizationConformancePack for the first time,
                * 			conformance pack status is created in all the member accounts.
                * 			When master account calls PutOrganizationConformancePack for the second time,
                * 			conformance pack status is updated in all the member accounts.
                * 			Additionally, conformance pack status is updated when one or more member accounts join or leave an
                * 			organization.
                * 			Conformance pack status is deleted when the master account deletes
                * 			OrganizationConformancePack in all the member accounts and disables service
                * 			access for <code>config-multiaccountsetup.amazonaws.com</code>.</p>
                * 		       <p>Config sets the state of the conformance pack to:</p>
                * 		       <ul>
                *             <li>
                *                <p>
                *                   <code>CREATE_SUCCESSFUL</code> when an organization conformance pack has been successfully created in all the member accounts. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CREATE_IN_PROGRESS</code> when an organization conformance pack creation is in progress.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CREATE_FAILED</code> when an organization conformance pack creation failed in one or more member accounts within that organization.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETE_FAILED</code> when an organization conformance pack deletion failed in one or more member accounts within that organization.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETE_IN_PROGRESS</code> when an organization conformance pack deletion is in progress.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETE_SUCCESSFUL</code> when an organization conformance pack has been successfully deleted from all the member accounts.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UPDATE_SUCCESSFUL</code> when an organization conformance pack has been successfully updated in all the member accounts.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UPDATE_IN_PROGRESS</code> when an organization conformance pack update is in progress.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UPDATE_FAILED</code> when an organization conformance pack update failed in one or more member accounts within that organization.</p>
                *             </li>
                *          </ul>
                */
            Status: OrganizationResourceStatus | string | undefined;
            /**
                * <p>An error code that is returned when organization conformance pack creation or deletion has failed in a member account. </p>
                */
            ErrorCode?: string;
            /**
                * <p>An error message indicating that organization conformance pack creation or deletion failed due to an error. </p>
                */
            ErrorMessage?: string;
            /**
                * <p>The timestamp of the last update.</p>
                */
            LastUpdateTime?: Date;
    }
    export namespace OrganizationConformancePackStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OrganizationConformancePackStatus) => any;
    }
    export interface DescribeOrganizationConformancePackStatusesResponse {
            /**
                * <p>A list of <code>OrganizationConformancePackStatus</code> objects. </p>
                */
            OrganizationConformancePackStatuses?: OrganizationConformancePackStatus[];
            /**
                * <p>The nextToken string returned on a previous page that you use to get the next page of results in a paginated response. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeOrganizationConformancePackStatusesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOrganizationConformancePackStatusesResponse) => any;
    }
    export interface DescribePendingAggregationRequestsRequest {
            /**
                * <p>The maximum number of evaluation results returned on each page.
                * 			The default is maximum. If you specify 0, Config uses the
                * 			default.</p>
                */
            Limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use
                * 			to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribePendingAggregationRequestsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePendingAggregationRequestsRequest) => any;
    }
    /**
        * <p>An object that represents the account ID and region of an
        * 			aggregator account that is requesting authorization but is not yet
        * 			authorized.</p>
        */
    export interface PendingAggregationRequest {
            /**
                * <p>The 12-digit account ID of the account requesting to aggregate
                * 			data.</p>
                */
            RequesterAccountId?: string;
            /**
                * <p>The region requesting to aggregate data. </p>
                */
            RequesterAwsRegion?: string;
    }
    export namespace PendingAggregationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PendingAggregationRequest) => any;
    }
    export interface DescribePendingAggregationRequestsResponse {
            /**
                * <p>Returns a PendingAggregationRequests object.</p>
                */
            PendingAggregationRequests?: PendingAggregationRequest[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use
                * 			to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribePendingAggregationRequestsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePendingAggregationRequestsResponse) => any;
    }
    export interface DescribeRemediationConfigurationsRequest {
            /**
                * <p>A list of Config rule names of remediation configurations for which you want details. </p>
                */
            ConfigRuleNames: string[] | undefined;
    }
    export namespace DescribeRemediationConfigurationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRemediationConfigurationsRequest) => any;
    }
    /**
        * <p>Amazon Web Services Systems Manager (SSM) specific remediation controls.</p>
        */
    export interface SsmControls {
            /**
                * <p>The maximum percentage of remediation actions allowed to run in parallel on the non-compliant resources for that specific rule. You can specify a percentage, such as 10%. The default value is 10. </p>
                */
            ConcurrentExecutionRatePercentage?: number;
            /**
                * <p>The percentage of errors that are allowed before SSM stops running automations on non-compliant resources for that specific rule.
                * 			You can specify a percentage of errors, for example 10%. If you do not specifiy a percentage, the default is 50%.
                * 			For example, if you set the ErrorPercentage to 40% for 10 non-compliant resources, then SSM stops running the automations when the fifth error is received. </p>
                */
            ErrorPercentage?: number;
    }
    export namespace SsmControls {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SsmControls) => any;
    }
    /**
        * <p>The controls that Config uses for executing remediations.</p>
        */
    export interface ExecutionControls {
            /**
                * <p>A SsmControls object.</p>
                */
            SsmControls?: SsmControls;
    }
    export namespace ExecutionControls {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExecutionControls) => any;
    }
    export enum ResourceValueType {
            RESOURCE_ID = "RESOURCE_ID"
    }
    /**
        * <p>The dynamic value of the resource.</p>
        */
    export interface ResourceValue {
            /**
                * <p>The value is a resource ID.</p>
                */
            Value: ResourceValueType | string | undefined;
    }
    export namespace ResourceValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceValue) => any;
    }
    /**
        * <p>The static value of the resource.</p>
        */
    export interface StaticValue {
            /**
                * <p>A list of values. For example, the ARN of the assumed role. </p>
                */
            Values: string[] | undefined;
    }
    export namespace StaticValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StaticValue) => any;
    }
    /**
        * <p>The value is either a dynamic (resource) value or a static value. You must select either a dynamic value or a static value.</p>
        */
    export interface RemediationParameterValue {
            /**
                * <p>The value is dynamic and changes at run-time.</p>
                */
            ResourceValue?: ResourceValue;
            /**
                * <p>The value is static and does not change at run-time.</p>
                */
            StaticValue?: StaticValue;
    }
    export namespace RemediationParameterValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemediationParameterValue) => any;
    }
    export enum RemediationTargetType {
            SSM_DOCUMENT = "SSM_DOCUMENT"
    }
    /**
        * <p>An object that represents the details about the remediation configuration that includes the remediation action, parameters, and data to execute the action.</p>
        */
    export interface RemediationConfiguration {
            /**
                * <p>The name of the Config rule.</p>
                */
            ConfigRuleName: string | undefined;
            /**
                * <p>The type of the target. Target executes remediation. For example, SSM document.</p>
                */
            TargetType: RemediationTargetType | string | undefined;
            /**
                * <p>Target ID is the name of the public document.</p>
                */
            TargetId: string | undefined;
            /**
                * <p>Version of the target. For example, version of the SSM document.</p>
                * 		       <note>
                *             <p>If you make backward incompatible changes to the SSM document,
                * 			you must call PutRemediationConfiguration API again to ensure the remediations can run.</p>
                *          </note>
                */
            TargetVersion?: string;
            /**
                * <p>An object of the RemediationParameterValue.</p>
                */
            Parameters?: Record<string, RemediationParameterValue>;
            /**
                * <p>The type of a resource. </p>
                */
            ResourceType?: string;
            /**
                * <p>The remediation is triggered automatically.</p>
                */
            Automatic?: boolean;
            /**
                * <p>An ExecutionControls object.</p>
                */
            ExecutionControls?: ExecutionControls;
            /**
                * <p>The maximum number of failed attempts for auto-remediation. If you do not select a number, the default is 5.</p>
                * 		       <p>For example, if you specify MaximumAutomaticAttempts as 5 with RetryAttemptSeconds as 50 seconds,
                *
                * 			Config will put a RemediationException on your behalf for the failing resource after the 5th failed attempt within 50 seconds.</p>
                */
            MaximumAutomaticAttempts?: number;
            /**
                * <p>Maximum time in seconds that Config runs auto-remediation. If you do not select a number, the default is 60 seconds. </p>
                * 		       <p>For example, if you specify RetryAttemptSeconds as 50 seconds and MaximumAutomaticAttempts as 5,
                * 		Config will run auto-remediations 5 times within 50 seconds before throwing an exception.</p>
                */
            RetryAttemptSeconds?: number;
            /**
                * <p>Amazon Resource Name (ARN) of remediation configuration.</p>
                */
            Arn?: string;
            /**
                * <p>Name of the service that owns the service linked rule, if applicable.</p>
                */
            CreatedByService?: string;
    }
    export namespace RemediationConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemediationConfiguration) => any;
    }
    export interface DescribeRemediationConfigurationsResponse {
            /**
                * <p>Returns a remediation configuration object.</p>
                */
            RemediationConfigurations?: RemediationConfiguration[];
    }
    export namespace DescribeRemediationConfigurationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRemediationConfigurationsResponse) => any;
    }
    export interface DescribeRemediationExceptionsRequest {
            /**
                * <p>The name of the Config rule.</p>
                */
            ConfigRuleName: string | undefined;
            /**
                * <p>An exception list of resource exception keys to be processed with the current request. Config adds exception for each resource key. For example, Config adds 3 exceptions for 3 resource keys. </p>
                */
            ResourceKeys?: RemediationExceptionResourceKey[];
            /**
                * <p>The maximum number of RemediationExceptionResourceKey returned on each page. The default is 25. If you specify 0, Config uses the default.</p>
                */
            Limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned in a previous request that you use to request the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeRemediationExceptionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRemediationExceptionsRequest) => any;
    }
    /**
        * <p>An object that represents the details about the remediation exception. The details include the rule name, an explanation of an exception, the time when the exception will be deleted, the resource ID, and resource type. </p>
        */
    export interface RemediationException {
            /**
                * <p>The name of the Config rule.</p>
                */
            ConfigRuleName: string | undefined;
            /**
                * <p>The type of a resource.</p>
                */
            ResourceType: string | undefined;
            /**
                * <p>The ID of the resource (for example., sg-xxxxxx).</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>An explanation of an remediation exception.</p>
                */
            Message?: string;
            /**
                * <p>The time when the remediation exception will be deleted.</p>
                */
            ExpirationTime?: Date;
    }
    export namespace RemediationException {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemediationException) => any;
    }
    export interface DescribeRemediationExceptionsResponse {
            /**
                * <p>Returns a list of remediation exception objects.</p>
                */
            RemediationExceptions?: RemediationException[];
            /**
                * <p>The <code>nextToken</code> string returned in a previous request that you use to request the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeRemediationExceptionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRemediationExceptionsResponse) => any;
    }
    export interface DescribeRemediationExecutionStatusRequest {
            /**
                * <p>A list of Config rule names.</p>
                */
            ConfigRuleName: string | undefined;
            /**
                * <p>A list of resource keys to be processed with the current request. Each element in the list consists of the resource type and resource ID. </p>
                */
            ResourceKeys?: ResourceKey[];
            /**
                * <p>The maximum number of RemediationExecutionStatuses returned on each page. The default is maximum. If you specify 0, Config uses the default. </p>
                */
            Limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeRemediationExecutionStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRemediationExecutionStatusRequest) => any;
    }
    export enum RemediationExecutionState {
            FAILED = "FAILED",
            IN_PROGRESS = "IN_PROGRESS",
            QUEUED = "QUEUED",
            SUCCEEDED = "SUCCEEDED"
    }
    export enum RemediationExecutionStepState {
            FAILED = "FAILED",
            PENDING = "PENDING",
            SUCCEEDED = "SUCCEEDED"
    }
    /**
        * <p>Name of the step from the SSM document.</p>
        */
    export interface RemediationExecutionStep {
            /**
                * <p>The details of the step.</p>
                */
            Name?: string;
            /**
                * <p>The valid status of the step.</p>
                */
            State?: RemediationExecutionStepState | string;
            /**
                * <p>An error message if the step was interrupted during execution.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>The time when the step started.</p>
                */
            StartTime?: Date;
            /**
                * <p>The time when the step stopped.</p>
                */
            StopTime?: Date;
    }
    export namespace RemediationExecutionStep {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemediationExecutionStep) => any;
    }
    /**
        * <p>Provides details of the current status of the invoked remediation action for that resource.</p>
        */
    export interface RemediationExecutionStatus {
            /**
                * <p>The details that identify a resource within Config, including
                * 			the resource type and resource ID.</p>
                */
            ResourceKey?: ResourceKey;
            /**
                * <p>ENUM of the values.</p>
                */
            State?: RemediationExecutionState | string;
            /**
                * <p>Details of every step.</p>
                */
            StepDetails?: RemediationExecutionStep[];
            /**
                * <p>Start time when the remediation was executed.</p>
                */
            InvocationTime?: Date;
            /**
                * <p>The time when the remediation execution was last updated.</p>
                */
            LastUpdatedTime?: Date;
    }
    export namespace RemediationExecutionStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemediationExecutionStatus) => any;
    }
    export interface DescribeRemediationExecutionStatusResponse {
            /**
                * <p>Returns a list of remediation execution statuses objects.</p>
                */
            RemediationExecutionStatuses?: RemediationExecutionStatus[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeRemediationExecutionStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRemediationExecutionStatusResponse) => any;
    }
    export interface DescribeRetentionConfigurationsRequest {
            /**
                * <p>A list of names of retention configurations for which you want
                * 			details. If you do not specify a name, Config returns details
                * 			for all the retention configurations for that account.</p>
                * 		       <note>
                * 			         <p>Currently, Config supports only one retention
                * 				configuration per region in your account.</p>
                * 		       </note>
                */
            RetentionConfigurationNames?: string[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page
                * 			that you use to get the next page of results in a paginated
                * 			response. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeRetentionConfigurationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRetentionConfigurationsRequest) => any;
    }
    /**
        * <p>An object with the name of the retention configuration and the retention period in days. The object stores the configuration for data retention in Config.</p>
        */
    export interface RetentionConfiguration {
            /**
                * <p>The name of the retention configuration object.</p>
                */
            Name: string | undefined;
            /**
                * <p>Number of days Config stores your historical information.</p>
                * 		       <note>
                *             <p>Currently, only applicable to the configuration item history.</p>
                *          </note>
                */
            RetentionPeriodInDays: number | undefined;
    }
    export namespace RetentionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RetentionConfiguration) => any;
    }
    export interface DescribeRetentionConfigurationsResponse {
            /**
                * <p>Returns a retention configuration object.</p>
                */
            RetentionConfigurations?: RetentionConfiguration[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page
                * 			that you use to get the next page of results in a paginated
                * 			response. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeRetentionConfigurationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRetentionConfigurationsResponse) => any;
    }
    /**
        * <p>Identifies an Amazon Web Services resource and indicates whether it complies
        * 			with the Config rule that it was evaluated against.</p>
        */
    export interface Evaluation {
            /**
                * <p>The type of Amazon Web Services resource that was evaluated.</p>
                */
            ComplianceResourceType: string | undefined;
            /**
                * <p>The ID of the Amazon Web Services resource that was evaluated.</p>
                */
            ComplianceResourceId: string | undefined;
            /**
                * <p>Indicates whether the Amazon Web Services resource complies with the Config
                * 			rule that it was evaluated against.</p>
                * 		       <p>For the <code>Evaluation</code> data type, Config supports
                * 			only the <code>COMPLIANT</code>, <code>NON_COMPLIANT</code>, and
                * 				<code>NOT_APPLICABLE</code> values. Config does not support
                * 			the <code>INSUFFICIENT_DATA</code> value for this data
                * 			type.</p>
                * 		       <p>Similarly, Config does not accept
                * 				<code>INSUFFICIENT_DATA</code> as the value for
                * 				<code>ComplianceType</code> from a <code>PutEvaluations</code>
                * 			request. For example, an Lambda function for a custom Config
                * 			rule cannot pass an <code>INSUFFICIENT_DATA</code> value to Config.</p>
                */
            ComplianceType: ComplianceType | string | undefined;
            /**
                * <p>Supplementary information about how the evaluation determined
                * 			the compliance.</p>
                */
            Annotation?: string;
            /**
                * <p>The time of the event in Config that triggered the
                * 			evaluation. For event-based evaluations, the time indicates when Config created the configuration item that triggered the evaluation.
                * 			For periodic evaluations, the time indicates when Config
                * 			triggered the evaluation at the frequency that you specified (for
                * 			example, every 24 hours).</p>
                */
            OrderingTimestamp: Date | undefined;
    }
    export namespace Evaluation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Evaluation) => any;
    }
    /**
        * <p>The details of an Config evaluation. Provides the Amazon Web Services
        * 			resource that was evaluated, the compliance of the resource, related
        * 			time stamps, and supplementary information.</p>
        */
    export interface EvaluationResult {
            /**
                * <p>Uniquely identifies the evaluation result.</p>
                */
            EvaluationResultIdentifier?: EvaluationResultIdentifier;
            /**
                * <p>Indicates whether the Amazon Web Services resource complies with the Config
                * 			rule that evaluated it.</p>
                * 		       <p>For the <code>EvaluationResult</code> data type, Config
                * 			supports only the <code>COMPLIANT</code>,
                * 			<code>NON_COMPLIANT</code>, and <code>NOT_APPLICABLE</code> values.
                * 			Config does not support the <code>INSUFFICIENT_DATA</code> value
                * 			for the <code>EvaluationResult</code> data type.</p>
                */
            ComplianceType?: ComplianceType | string;
            /**
                * <p>The time when Config recorded the evaluation
                * 			result.</p>
                */
            ResultRecordedTime?: Date;
            /**
                * <p>The time when the Config rule evaluated the Amazon Web Services
                * 			resource.</p>
                */
            ConfigRuleInvokedTime?: Date;
            /**
                * <p>Supplementary information about how the evaluation determined
                * 			the compliance.</p>
                */
            Annotation?: string;
            /**
                * <p>An encrypted token that associates an evaluation with an Config rule. The token identifies the rule, the Amazon Web Services resource being
                * 			evaluated, and the event that triggered the evaluation.</p>
                */
            ResultToken?: string;
    }
    export namespace EvaluationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EvaluationResult) => any;
    }
    /**
        * <p>Identifies an Amazon Web Services resource and indicates whether it complies with the Config rule that it was evaluated against.</p>
        */
    export interface ExternalEvaluation {
            /**
                * <p>The evaluated compliance resource type. Config accepts <code>AWS::::Account</code> resource type.</p>
                */
            ComplianceResourceType: string | undefined;
            /**
                * <p>The evaluated compliance resource ID. Config accepts only Amazon Web Services account ID.</p>
                */
            ComplianceResourceId: string | undefined;
            /**
                * <p>The compliance of the Amazon Web Services resource. The valid values are <code>COMPLIANT, NON_COMPLIANT, </code> and <code>NOT_APPLICABLE</code>.</p>
                */
            ComplianceType: ComplianceType | string | undefined;
            /**
                * <p>Supplementary information about the reason of compliance. For example, this task was completed on a specific date.</p>
                */
            Annotation?: string;
            /**
                * <p>The time when the compliance was recorded. </p>
                */
            OrderingTimestamp: Date | undefined;
    }
    export namespace ExternalEvaluation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExternalEvaluation) => any;
    }
    /**
        * <p>List of each of the failed remediations with specific reasons.</p>
        */
    export interface FailedRemediationBatch {
            /**
                * <p>Returns a failure message. For example, the resource is already compliant.</p>
                */
            FailureMessage?: string;
            /**
                * <p>Returns remediation configurations of the failed items.</p>
                */
            FailedItems?: RemediationConfiguration[];
    }
    export namespace FailedRemediationBatch {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FailedRemediationBatch) => any;
    }
    /**
        * <p>List of each of the failed remediation exceptions with specific reasons.</p>
        */
    export interface FailedRemediationExceptionBatch {
            /**
                * <p>Returns a failure message. For example, the auto-remediation has failed.</p>
                */
            FailureMessage?: string;
            /**
                * <p>Returns remediation exception resource key object of the failed items.</p>
                */
            FailedItems?: RemediationException[];
    }
    export namespace FailedRemediationExceptionBatch {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FailedRemediationExceptionBatch) => any;
    }
    /**
        * <p>Details about the fields such as name of the field.</p>
        */
    export interface FieldInfo {
            /**
                * <p>Name of the field.</p>
                */
            Name?: string;
    }
    export namespace FieldInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FieldInfo) => any;
    }
    export interface GetAggregateComplianceDetailsByConfigRuleRequest {
            /**
                * <p>The name of the configuration aggregator.</p>
                */
            ConfigurationAggregatorName: string | undefined;
            /**
                * <p>The name of the Config rule for which you want compliance
                * 			information.</p>
                */
            ConfigRuleName: string | undefined;
            /**
                * <p>The 12-digit account ID of the source account.</p>
                */
            AccountId: string | undefined;
            /**
                * <p>The source region from where the data is aggregated.</p>
                */
            AwsRegion: string | undefined;
            /**
                * <p>The resource compliance status.</p>
                * 		       <note>
                * 			         <p>For the
                * 					<code>GetAggregateComplianceDetailsByConfigRuleRequest</code>
                * 				data type, Config supports only the <code>COMPLIANT</code>
                * 				and <code>NON_COMPLIANT</code>. Config does not support the
                * 					<code>NOT_APPLICABLE</code> and
                * 					<code>INSUFFICIENT_DATA</code> values.</p>
                * 		       </note>
                */
            ComplianceType?: ComplianceType | string;
            /**
                * <p>The maximum number of evaluation results returned on each page.
                * 			The default is 50. You cannot specify a number greater than 100. If
                * 			you specify 0, Config uses the default.</p>
                */
            Limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use
                * 			to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace GetAggregateComplianceDetailsByConfigRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAggregateComplianceDetailsByConfigRuleRequest) => any;
    }
    export interface GetAggregateComplianceDetailsByConfigRuleResponse {
            /**
                * <p>Returns an AggregateEvaluationResults object.</p>
                */
            AggregateEvaluationResults?: AggregateEvaluationResult[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use
                * 			to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace GetAggregateComplianceDetailsByConfigRuleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAggregateComplianceDetailsByConfigRuleResponse) => any;
    }
    export interface GetAggregateConfigRuleComplianceSummaryRequest {
            /**
                * <p>The name of the configuration aggregator.</p>
                */
            ConfigurationAggregatorName: string | undefined;
            /**
                * <p>Filters the results based on the
                * 			ConfigRuleComplianceSummaryFilters object.</p>
                */
            Filters?: ConfigRuleComplianceSummaryFilters;
            /**
                * <p>Groups the result based on ACCOUNT_ID or AWS_REGION.</p>
                */
            GroupByKey?: ConfigRuleComplianceSummaryGroupKey | string;
            /**
                * <p>The maximum number of evaluation results returned on each page.
                * 			The default is 1000. You cannot specify a number greater than 1000.
                * 			If you specify 0, Config uses the default.</p>
                */
            Limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use
                * 			to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace GetAggregateConfigRuleComplianceSummaryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAggregateConfigRuleComplianceSummaryRequest) => any;
    }
    export interface GetAggregateConfigRuleComplianceSummaryResponse {
            /**
                * <p>Groups the result based on ACCOUNT_ID or AWS_REGION.</p>
                */
            GroupByKey?: string;
            /**
                * <p>Returns a list of AggregateComplianceCounts object.</p>
                */
            AggregateComplianceCounts?: AggregateComplianceCount[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use
                * 			to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace GetAggregateConfigRuleComplianceSummaryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAggregateConfigRuleComplianceSummaryResponse) => any;
    }
    export interface GetAggregateConformancePackComplianceSummaryRequest {
            /**
                * <p>The name of the configuration aggregator.</p>
                */
            ConfigurationAggregatorName: string | undefined;
            /**
                * <p>Filters the results based on the <code>AggregateConformancePackComplianceSummaryFilters</code> object.</p>
                */
            Filters?: AggregateConformancePackComplianceSummaryFilters;
            /**
                * <p>Groups the result based on Amazon Web Services account ID or Amazon Web Services Region.</p>
                */
            GroupByKey?: AggregateConformancePackComplianceSummaryGroupKey | string;
            /**
                * <p>The maximum number of results returned on each page. The default is maximum. If you specify 0, Config uses the default.</p>
                */
            Limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace GetAggregateConformancePackComplianceSummaryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAggregateConformancePackComplianceSummaryRequest) => any;
    }
    export interface GetAggregateConformancePackComplianceSummaryResponse {
            /**
                * <p>Returns a list of <code>AggregateConformancePackComplianceSummary</code> object.</p>
                */
            AggregateConformancePackComplianceSummaries?: AggregateConformancePackComplianceSummary[];
            /**
                * <p>Groups the result based on Amazon Web Services account ID or Amazon Web Services Region.</p>
                */
            GroupByKey?: string;
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace GetAggregateConformancePackComplianceSummaryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAggregateConformancePackComplianceSummaryResponse) => any;
    }
    /**
        * <p>Filters the resource count based on account ID, region, and resource type.</p>
        */
    export interface ResourceCountFilters {
            /**
                * <p>The type of the Amazon Web Services resource.</p>
                */
            ResourceType?: ResourceType | string;
            /**
                * <p>The 12-digit ID of the account.</p>
                */
            AccountId?: string;
            /**
                * <p>The region where the account is located.</p>
                */
            Region?: string;
    }
    export namespace ResourceCountFilters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceCountFilters) => any;
    }
    export enum ResourceCountGroupKey {
            ACCOUNT_ID = "ACCOUNT_ID",
            AWS_REGION = "AWS_REGION",
            RESOURCE_TYPE = "RESOURCE_TYPE"
    }
    export interface GetAggregateDiscoveredResourceCountsRequest {
            /**
                * <p>The name of the configuration aggregator.</p>
                */
            ConfigurationAggregatorName: string | undefined;
            /**
                * <p>Filters the results based on the <code>ResourceCountFilters</code> object.</p>
                */
            Filters?: ResourceCountFilters;
            /**
                * <p>The key to group the resource counts.</p>
                */
            GroupByKey?: ResourceCountGroupKey | string;
            /**
                * <p>The maximum number of <a>GroupedResourceCount</a> objects returned on each page. The default is 1000. You cannot specify a number greater than 1000. If you specify 0, Config uses the default.</p>
                */
            Limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response. </p>
                */
            NextToken?: string;
    }
    export namespace GetAggregateDiscoveredResourceCountsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAggregateDiscoveredResourceCountsRequest) => any;
    }
    /**
        * <p>The count of resources that are grouped by the group name.</p>
        */
    export interface GroupedResourceCount {
            /**
                * <p>The name of the group that can be region, account ID, or resource type. For example, region1, region2 if the region was chosen as <code>GroupByKey</code>.</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The number of resources in the group.</p>
                */
            ResourceCount: number | undefined;
    }
    export namespace GroupedResourceCount {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupedResourceCount) => any;
    }
    export interface GetAggregateDiscoveredResourceCountsResponse {
            /**
                * <p>The total number of resources that are present in an aggregator with the filters that you provide.</p>
                */
            TotalDiscoveredResources: number | undefined;
            /**
                * <p>The key passed into the request object. If <code>GroupByKey</code> is not provided, the result will be empty.</p>
                */
            GroupByKey?: string;
            /**
                * <p>Returns a list of GroupedResourceCount objects.</p>
                */
            GroupedResourceCounts?: GroupedResourceCount[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace GetAggregateDiscoveredResourceCountsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAggregateDiscoveredResourceCountsResponse) => any;
    }
    export interface GetAggregateResourceConfigRequest {
            /**
                * <p>The name of the configuration aggregator.</p>
                */
            ConfigurationAggregatorName: string | undefined;
            /**
                * <p>An object that identifies aggregate resource.</p>
                */
            ResourceIdentifier: AggregateResourceIdentifier | undefined;
    }
    export namespace GetAggregateResourceConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAggregateResourceConfigRequest) => any;
    }
    export interface GetAggregateResourceConfigResponse {
            /**
                * <p>Returns a <code>ConfigurationItem</code> object.</p>
                */
            ConfigurationItem?: ConfigurationItem;
    }
    export namespace GetAggregateResourceConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAggregateResourceConfigResponse) => any;
    }
    /**
        * <p>The configuration item size is outside the allowable range.</p>
        */
    export class OversizedConfigurationItemException extends __BaseException {
            readonly name: "OversizedConfigurationItemException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OversizedConfigurationItemException, __BaseException>);
    }
    /**
        * <p>You have specified a resource that is either unknown or has not
        * 			been discovered.</p>
        */
    export class ResourceNotDiscoveredException extends __BaseException {
            readonly name: "ResourceNotDiscoveredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotDiscoveredException, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface GetComplianceDetailsByConfigRuleRequest {
            /**
                * <p>The name of the Config rule for which you want compliance
                * 			information.</p>
                */
            ConfigRuleName: string | undefined;
            /**
                * <p>Filters the results by compliance.</p>
                * 		       <p>The allowed values are <code>COMPLIANT</code>,
                * 				<code>NON_COMPLIANT</code>, and
                * 			<code>NOT_APPLICABLE</code>.</p>
                */
            ComplianceTypes?: (ComplianceType | string)[];
            /**
                * <p>The maximum number of evaluation results returned on each page.
                * 			The default is 10. You cannot specify a number greater than 100. If
                * 			you specify 0, Config uses the default.</p>
                */
            Limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned on a previous page
                * 			that you use to get the next page of results in a paginated
                * 			response.</p>
                */
            NextToken?: string;
    }
    export namespace GetComplianceDetailsByConfigRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetComplianceDetailsByConfigRuleRequest) => any;
    }
    /**
        * <p></p>
        */
    export interface GetComplianceDetailsByConfigRuleResponse {
            /**
                * <p>Indicates whether the Amazon Web Services resource complies with the specified
                * 			Config rule.</p>
                */
            EvaluationResults?: EvaluationResult[];
            /**
                * <p>The string that you use in a subsequent request to get the next
                * 			page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace GetComplianceDetailsByConfigRuleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetComplianceDetailsByConfigRuleResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface GetComplianceDetailsByResourceRequest {
            /**
                * <p>The type of the Amazon Web Services resource for which you want compliance
                * 			information.</p>
                */
            ResourceType: string | undefined;
            /**
                * <p>The ID of the Amazon Web Services resource for which you want compliance
                * 			information.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>Filters the results by compliance.</p>
                * 		       <p>The allowed values are <code>COMPLIANT</code>,
                * 				<code>NON_COMPLIANT</code>, and
                * 			<code>NOT_APPLICABLE</code>.</p>
                */
            ComplianceTypes?: (ComplianceType | string)[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page
                * 			that you use to get the next page of results in a paginated
                * 			response.</p>
                */
            NextToken?: string;
    }
    export namespace GetComplianceDetailsByResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetComplianceDetailsByResourceRequest) => any;
    }
    /**
        * <p></p>
        */
    export interface GetComplianceDetailsByResourceResponse {
            /**
                * <p>Indicates whether the specified Amazon Web Services resource complies each Config rule.</p>
                */
            EvaluationResults?: EvaluationResult[];
            /**
                * <p>The string that you use in a subsequent request to get the next
                * 			page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace GetComplianceDetailsByResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetComplianceDetailsByResourceResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface GetComplianceSummaryByConfigRuleResponse {
            /**
                * <p>The number of Config rules that are compliant and the
                * 			number that are noncompliant, up to a maximum of 25 for
                * 			each.</p>
                */
            ComplianceSummary?: ComplianceSummary;
    }
    export namespace GetComplianceSummaryByConfigRuleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetComplianceSummaryByConfigRuleResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface GetComplianceSummaryByResourceTypeRequest {
            /**
                * <p>Specify one or more resource types to get the number of
                * 			resources that are compliant and the number that are noncompliant
                * 			for each resource type.</p>
                * 		       <p>For this request, you can specify an Amazon Web Services resource type such as
                * 				<code>AWS::EC2::Instance</code>. You can specify that the
                * 			resource type is an Amazon Web Services account by specifying
                * 				<code>AWS::::Account</code>.</p>
                */
            ResourceTypes?: string[];
    }
    export namespace GetComplianceSummaryByResourceTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetComplianceSummaryByResourceTypeRequest) => any;
    }
    /**
        * <p></p>
        */
    export interface GetComplianceSummaryByResourceTypeResponse {
            /**
                * <p>The number of resources that are compliant and the number that
                * 			are noncompliant. If one or more resource types were provided with
                * 			the request, the numbers are returned for each resource type. The
                * 			maximum number returned is 100.</p>
                */
            ComplianceSummariesByResourceType?: ComplianceSummaryByResourceType[];
    }
    export namespace GetComplianceSummaryByResourceTypeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetComplianceSummaryByResourceTypeResponse) => any;
    }
    export interface GetConformancePackComplianceDetailsRequest {
            /**
                * <p>Name of the conformance pack.</p>
                */
            ConformancePackName: string | undefined;
            /**
                * <p>A <code>ConformancePackEvaluationFilters</code> object.</p>
                */
            Filters?: ConformancePackEvaluationFilters;
            /**
                * <p>The maximum number of evaluation results returned on each page. If you do no specify a number, Config uses the default. The default is 100.</p>
                */
            Limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned in a previous request that you use to request the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace GetConformancePackComplianceDetailsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConformancePackComplianceDetailsRequest) => any;
    }
    export interface GetConformancePackComplianceDetailsResponse {
            /**
                * <p>Name of the conformance pack.</p>
                */
            ConformancePackName: string | undefined;
            /**
                * <p>Returns a list of <code>ConformancePackEvaluationResult</code> objects.</p>
                */
            ConformancePackRuleEvaluationResults?: ConformancePackEvaluationResult[];
            /**
                * <p>The <code>nextToken</code> string returned in a previous request that you use to request the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace GetConformancePackComplianceDetailsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConformancePackComplianceDetailsResponse) => any;
    }
    export interface GetConformancePackComplianceSummaryRequest {
            /**
                * <p>Names of conformance packs.</p>
                */
            ConformancePackNames: string[] | undefined;
            /**
                * <p>The maximum number of conformance packs returned on each page.</p>
                */
            Limit?: number;
            /**
                * <p>The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace GetConformancePackComplianceSummaryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConformancePackComplianceSummaryRequest) => any;
    }
    export interface GetConformancePackComplianceSummaryResponse {
            /**
                * <p>A list of <code>ConformancePackComplianceSummary</code> objects. </p>
                */
            ConformancePackComplianceSummaryList?: ConformancePackComplianceSummary[];
            /**
                * <p>The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace GetConformancePackComplianceSummaryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConformancePackComplianceSummaryResponse) => any;
    }
    export interface GetCustomRulePolicyRequest {
            /**
                * <p>The name of your Config Custom Policy rule.</p>
                */
            ConfigRuleName?: string;
    }
    export namespace GetCustomRulePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCustomRulePolicyRequest) => any;
    }
    export interface GetCustomRulePolicyResponse {
            /**
                * <p>The policy definition containing the logic for your Config Custom Policy rule.</p>
                */
            PolicyText?: string;
    }
    export namespace GetCustomRulePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCustomRulePolicyResponse) => any;
    }
    export interface GetDiscoveredResourceCountsRequest {
            /**
                * <p>The comma-separated list that specifies the resource types that
                * 			you want Config to return (for example,
                * 				<code>"AWS::EC2::Instance"</code>,
                * 			<code>"AWS::IAM::User"</code>).</p>
                *
                * 		       <p>If a value for <code>resourceTypes</code> is not specified, Config returns all resource types that Config is recording in
                * 			the region for your account.</p>
                * 		       <note>
                * 			         <p>If the configuration recorder is turned off, Config
                * 				returns an empty list of <a>ResourceCount</a>
                * 				objects. If the configuration recorder is not recording a
                * 				specific resource type (for example, S3 buckets), that resource
                * 				type is not returned in the list of <a>ResourceCount</a> objects.</p>
                * 		       </note>
                */
            resourceTypes?: string[];
            /**
                * <p>The maximum number of <a>ResourceCount</a> objects
                * 			returned on each page. The default is 100. You cannot specify a
                * 			number greater than 100. If you specify 0, Config uses the
                * 			default.</p>
                */
            limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned on a previous page
                * 			that you use to get the next page of results in a paginated
                * 			response.</p>
                */
            nextToken?: string;
    }
    export namespace GetDiscoveredResourceCountsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDiscoveredResourceCountsRequest) => any;
    }
    /**
        * <p>An object that contains the resource type and the number of
        * 			resources.</p>
        */
    export interface ResourceCount {
            /**
                * <p>The resource type (for example,
                * 				<code>"AWS::EC2::Instance"</code>).</p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The number of resources.</p>
                */
            count?: number;
    }
    export namespace ResourceCount {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceCount) => any;
    }
    export interface GetDiscoveredResourceCountsResponse {
            /**
                * <p>The total number of resources that Config is recording in
                * 			the region for your account. If you specify resource types in the
                * 			request, Config returns only the total number of resources for
                * 			those resource types.</p>
                *
                *
                * 		       <p class="title">
                *             <b>Example</b>
                *          </p>
                *          <ol>
                *             <li>
                * 				           <p>Config is recording three resource types in the US
                * 					East (Ohio) Region for your account: 25 EC2 instances, 20
                * 					IAM users, and 15 S3 buckets, for a total of 60
                * 					resources.</p>
                * 			         </li>
                *             <li>
                * 				           <p>You make a call to the
                * 						<code>GetDiscoveredResourceCounts</code> action and
                * 					specify the resource type,
                * 						<code>"AWS::EC2::Instances"</code>, in the
                * 					request.</p>
                * 			         </li>
                *             <li>
                * 				           <p>Config returns 25 for
                * 						<code>totalDiscoveredResources</code>.</p>
                * 			         </li>
                *          </ol>
                */
            totalDiscoveredResources?: number;
            /**
                * <p>The list of <code>ResourceCount</code> objects. Each object is
                * 			listed in descending order by the number of resources.</p>
                */
            resourceCounts?: ResourceCount[];
            /**
                * <p>The string that you use in a subsequent request to get the next
                * 			page of results in a paginated response.</p>
                */
            nextToken?: string;
    }
    export namespace GetDiscoveredResourceCountsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDiscoveredResourceCountsResponse) => any;
    }
    export enum MemberAccountRuleStatus {
            CREATE_FAILED = "CREATE_FAILED",
            CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS",
            CREATE_SUCCESSFUL = "CREATE_SUCCESSFUL",
            DELETE_FAILED = "DELETE_FAILED",
            DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS",
            DELETE_SUCCESSFUL = "DELETE_SUCCESSFUL",
            UPDATE_FAILED = "UPDATE_FAILED",
            UPDATE_IN_PROGRESS = "UPDATE_IN_PROGRESS",
            UPDATE_SUCCESSFUL = "UPDATE_SUCCESSFUL"
    }
    /**
        * <p>Status filter object to filter results based on specific member account ID or status type for an organization Config rule. </p>
        */
    export interface StatusDetailFilters {
            /**
                * <p>The 12-digit account ID of the member account within an organization.</p>
                */
            AccountId?: string;
            /**
                * <p>Indicates deployment status for Config rule in the member account.
                * 			When master account calls <code>PutOrganizationConfigRule</code> action for the first time, Config rule status is created in the member account.
                * 			When master account calls <code>PutOrganizationConfigRule</code> action for the second time, Config rule status is updated in the member account.
                * 			Config rule status is deleted when the master account deletes <code>OrganizationConfigRule</code> and disables service access for <code>config-multiaccountsetup.amazonaws.com</code>.
                * 			</p>
                * 		       <p>Config sets the state of the rule to:</p>
                * 		       <ul>
                *             <li>
                *                <p>
                *                   <code>CREATE_SUCCESSFUL</code> when Config rule has been created in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CREATE_IN_PROGRESS</code> when Config rule is being created in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CREATE_FAILED</code> when Config rule creation has failed in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETE_FAILED</code> when Config rule deletion has failed in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETE_IN_PROGRESS</code> when Config rule is being deleted in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETE_SUCCESSFUL</code> when Config rule has been deleted in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UPDATE_SUCCESSFUL</code> when Config rule has been updated in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UPDATE_IN_PROGRESS</code> when Config rule is being updated in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UPDATE_FAILED</code> when Config rule deletion has failed in the member account.</p>
                *             </li>
                *          </ul>
                */
            MemberAccountRuleStatus?: MemberAccountRuleStatus | string;
    }
    export namespace StatusDetailFilters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatusDetailFilters) => any;
    }
    export interface GetOrganizationConfigRuleDetailedStatusRequest {
            /**
                * <p>The name of your organization Config rule for which you want status details for member accounts.</p>
                */
            OrganizationConfigRuleName: string | undefined;
            /**
                * <p>A <code>StatusDetailFilters</code> object.</p>
                */
            Filters?: StatusDetailFilters;
            /**
                * <p>The maximum number of <code>OrganizationConfigRuleDetailedStatus</code> returned on each page. If you do not specify a number, Config uses the default. The default is 100.</p>
                */
            Limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response. </p>
                */
            NextToken?: string;
    }
    export namespace GetOrganizationConfigRuleDetailedStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOrganizationConfigRuleDetailedStatusRequest) => any;
    }
    /**
        * <p>Organization Config rule creation or deletion status in each member account. This includes the name of the rule, the status, error code and error message when the rule creation or deletion failed.</p>
        */
    export interface MemberAccountStatus {
            /**
                * <p>The 12-digit account ID of a member account.</p>
                */
            AccountId: string | undefined;
            /**
                * <p>The name of Config rule deployed in the member account.</p>
                */
            ConfigRuleName: string | undefined;
            /**
                * <p>Indicates deployment status for Config rule in the member account.
                * 			When master account calls <code>PutOrganizationConfigRule</code> action for the first time, Config rule status is created in the member account.
                * 			When master account calls <code>PutOrganizationConfigRule</code> action for the second time, Config rule status is updated in the member account.
                * 			Config rule status is deleted when the master account deletes <code>OrganizationConfigRule</code> and disables service access for <code>config-multiaccountsetup.amazonaws.com</code>.
                * 		</p>
                * 		       <p> Config sets the state of the rule to:</p>
                * 		       <ul>
                *             <li>
                *                <p>
                *                   <code>CREATE_SUCCESSFUL</code> when Config rule has been created in the member account. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CREATE_IN_PROGRESS</code> when Config rule is being created in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CREATE_FAILED</code> when Config rule creation has failed in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETE_FAILED</code> when Config rule deletion has failed in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETE_IN_PROGRESS</code> when Config rule is being deleted in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETE_SUCCESSFUL</code> when Config rule has been deleted in the member account. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UPDATE_SUCCESSFUL</code> when Config rule has been updated in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UPDATE_IN_PROGRESS</code> when Config rule is being updated in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UPDATE_FAILED</code> when Config rule deletion has failed in the member account.</p>
                *             </li>
                *          </ul>
                */
            MemberAccountRuleStatus: MemberAccountRuleStatus | string | undefined;
            /**
                * <p>An error code that is returned when Config rule creation or deletion failed in the member account.</p>
                */
            ErrorCode?: string;
            /**
                * <p>An error message indicating that Config rule account creation or deletion has failed due to an error in the member account.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>The timestamp of the last status update.</p>
                */
            LastUpdateTime?: Date;
    }
    export namespace MemberAccountStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MemberAccountStatus) => any;
    }
    export interface GetOrganizationConfigRuleDetailedStatusResponse {
            /**
                * <p>A list of <code>MemberAccountStatus</code> objects.</p>
                */
            OrganizationConfigRuleDetailedStatus?: MemberAccountStatus[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response. </p>
                */
            NextToken?: string;
    }
    export namespace GetOrganizationConfigRuleDetailedStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOrganizationConfigRuleDetailedStatusResponse) => any;
    }
    export enum OrganizationResourceDetailedStatus {
            CREATE_FAILED = "CREATE_FAILED",
            CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS",
            CREATE_SUCCESSFUL = "CREATE_SUCCESSFUL",
            DELETE_FAILED = "DELETE_FAILED",
            DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS",
            DELETE_SUCCESSFUL = "DELETE_SUCCESSFUL",
            UPDATE_FAILED = "UPDATE_FAILED",
            UPDATE_IN_PROGRESS = "UPDATE_IN_PROGRESS",
            UPDATE_SUCCESSFUL = "UPDATE_SUCCESSFUL"
    }
    /**
        * <p>Status filter object to filter results based on specific member account ID or status type for an organization conformance pack.</p>
        */
    export interface OrganizationResourceDetailedStatusFilters {
            /**
                * <p>The 12-digit account ID of the member account within an organization.</p>
                */
            AccountId?: string;
            /**
                * <p>Indicates deployment status for conformance pack in a member account.
                * 			When master account calls <code>PutOrganizationConformancePack</code> action for the first time, conformance pack status is created in the member account.
                * 			When master account calls <code>PutOrganizationConformancePack</code> action for the second time, conformance pack status is updated in the member account.
                * 			Conformance pack status is deleted when the master account deletes <code>OrganizationConformancePack</code> and disables service access for <code>config-multiaccountsetup.amazonaws.com</code>.
                * 		</p>
                * 		       <p> Config sets the state of the conformance pack to:</p>
                * 		       <ul>
                *             <li>
                *                <p>
                *                   <code>CREATE_SUCCESSFUL</code> when conformance pack has been created in the member account. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CREATE_IN_PROGRESS</code> when conformance pack is being created in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CREATE_FAILED</code> when conformance pack creation has failed in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETE_FAILED</code> when conformance pack deletion has failed in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETE_IN_PROGRESS</code> when conformance pack is being deleted in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETE_SUCCESSFUL</code> when conformance pack has been deleted in the member account. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UPDATE_SUCCESSFUL</code> when conformance pack has been updated in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UPDATE_IN_PROGRESS</code> when conformance pack is being updated in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UPDATE_FAILED</code> when conformance pack deletion has failed in the member account.</p>
                *             </li>
                *          </ul>
                */
            Status?: OrganizationResourceDetailedStatus | string;
    }
    export namespace OrganizationResourceDetailedStatusFilters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OrganizationResourceDetailedStatusFilters) => any;
    }
    export interface GetOrganizationConformancePackDetailedStatusRequest {
            /**
                * <p>The name of organization conformance pack for which you want status details for member accounts.</p>
                */
            OrganizationConformancePackName: string | undefined;
            /**
                * <p>An <code>OrganizationResourceDetailedStatusFilters</code> object.</p>
                */
            Filters?: OrganizationResourceDetailedStatusFilters;
            /**
                * <p>The maximum number of <code>OrganizationConformancePackDetailedStatuses</code> returned on each page.
                * 			If you do not specify a number, Config uses the default. The default is 100. </p>
                */
            Limit?: number;
            /**
                * <p>The nextToken string returned on a previous page that you use to get the next page of results in a paginated response. </p>
                */
            NextToken?: string;
    }
    export namespace GetOrganizationConformancePackDetailedStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOrganizationConformancePackDetailedStatusRequest) => any;
    }
    /**
        * <p>Organization conformance pack creation or deletion status in each member account.
        * 			This includes the name of the conformance pack, the status, error code and error message
        * 			when the conformance pack creation or deletion failed. </p>
        */
    export interface OrganizationConformancePackDetailedStatus {
            /**
                * <p>The 12-digit account ID of a member account.</p>
                */
            AccountId: string | undefined;
            /**
                * <p>The name of conformance pack deployed in the member account.</p>
                */
            ConformancePackName: string | undefined;
            /**
                * <p>Indicates deployment status for conformance pack in a member account.
                * 			When master account calls <code>PutOrganizationConformancePack</code> action for the first time, conformance pack status is created in the member account.
                * 			When master account calls <code>PutOrganizationConformancePack</code> action for the second time, conformance pack status is updated in the member account.
                * 			Conformance pack status is deleted when the master account deletes <code>OrganizationConformancePack</code> and disables service access for <code>config-multiaccountsetup.amazonaws.com</code>.
                * 		</p>
                * 		       <p> Config sets the state of the conformance pack to:</p>
                * 		       <ul>
                *             <li>
                *                <p>
                *                   <code>CREATE_SUCCESSFUL</code> when conformance pack has been created in the member account. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CREATE_IN_PROGRESS</code> when conformance pack is being created in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CREATE_FAILED</code> when conformance pack creation has failed in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETE_FAILED</code> when conformance pack deletion has failed in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETE_IN_PROGRESS</code> when conformance pack is being deleted in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETE_SUCCESSFUL</code> when conformance pack has been deleted in the member account. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UPDATE_SUCCESSFUL</code> when conformance pack has been updated in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UPDATE_IN_PROGRESS</code> when conformance pack is being updated in the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UPDATE_FAILED</code> when conformance pack deletion has failed in the member account.</p>
                *             </li>
                *          </ul>
                */
            Status: OrganizationResourceDetailedStatus | string | undefined;
            /**
                * <p>An error code that is returned when conformance pack creation or
                * 			deletion failed in the member account. </p>
                */
            ErrorCode?: string;
            /**
                * <p>An error message indicating that conformance pack account creation or deletion
                * 			has failed due to an error in the member account. </p>
                */
            ErrorMessage?: string;
            /**
                * <p>The timestamp of the last status update.</p>
                */
            LastUpdateTime?: Date;
    }
    export namespace OrganizationConformancePackDetailedStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OrganizationConformancePackDetailedStatus) => any;
    }
    export interface GetOrganizationConformancePackDetailedStatusResponse {
            /**
                * <p>A list of <code>OrganizationConformancePackDetailedStatus</code> objects. </p>
                */
            OrganizationConformancePackDetailedStatuses?: OrganizationConformancePackDetailedStatus[];
            /**
                * <p>The nextToken string returned on a previous page that you use to get the next page of results in a paginated response. </p>
                */
            NextToken?: string;
    }
    export namespace GetOrganizationConformancePackDetailedStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOrganizationConformancePackDetailedStatusResponse) => any;
    }
    export interface GetOrganizationCustomRulePolicyRequest {
            /**
                * <p>The name of your organization Config Custom Policy rule. </p>
                */
            OrganizationConfigRuleName: string | undefined;
    }
    export namespace GetOrganizationCustomRulePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOrganizationCustomRulePolicyRequest) => any;
    }
    export interface GetOrganizationCustomRulePolicyResponse {
            /**
                * <p>The policy definition containing the logic for your organization Config Custom Policy rule.</p>
                */
            PolicyText?: string;
    }
    export namespace GetOrganizationCustomRulePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOrganizationCustomRulePolicyResponse) => any;
    }
    /**
        * <p>The input for the <a>GetResourceConfigHistory</a>
        * 			action.</p>
        */
    export interface GetResourceConfigHistoryRequest {
            /**
                * <p>The resource type.</p>
                */
            resourceType: ResourceType | string | undefined;
            /**
                * <p>The ID of the resource (for example.,
                * 			<code>sg-xxxxxx</code>).</p>
                */
            resourceId: string | undefined;
            /**
                * <p>The time stamp that indicates a later time. If not specified,
                * 			current time is taken.</p>
                */
            laterTime?: Date;
            /**
                * <p>The time stamp that indicates an earlier time. If not
                * 			specified, the action returns paginated results that contain
                * 			configuration items that start when the first configuration item was
                * 			recorded.</p>
                */
            earlierTime?: Date;
            /**
                * <p>The chronological order for configuration items listed. By
                * 			default, the results are listed in reverse chronological
                * 			order.</p>
                */
            chronologicalOrder?: ChronologicalOrder | string;
            /**
                * <p>The maximum number of configuration items returned on each
                * 			page. The default is 10. You cannot specify a number greater than
                * 			100. If you specify 0, Config uses the default.</p>
                */
            limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned on a previous page
                * 			that you use to get the next page of results in a paginated
                * 			response.</p>
                */
            nextToken?: string;
    }
    export namespace GetResourceConfigHistoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResourceConfigHistoryRequest) => any;
    }
    /**
        * <p>The output for the <a>GetResourceConfigHistory</a>
        * 			action.</p>
        */
    export interface GetResourceConfigHistoryResponse {
            /**
                * <p>A list that contains the configuration history of one or more
                * 			resources.</p>
                */
            configurationItems?: ConfigurationItem[];
            /**
                * <p>The string that you use in a subsequent request to get the next
                * 			page of results in a paginated response.</p>
                */
            nextToken?: string;
    }
    export namespace GetResourceConfigHistoryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResourceConfigHistoryResponse) => any;
    }
    /**
        * <p>The specified time range is not valid. The earlier time is not
        * 			chronologically before the later time.</p>
        */
    export class InvalidTimeRangeException extends __BaseException {
            readonly name: "InvalidTimeRangeException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTimeRangeException, __BaseException>);
    }
    export interface GetStoredQueryRequest {
            /**
                * <p>The name of the query.</p>
                */
            QueryName: string | undefined;
    }
    export namespace GetStoredQueryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStoredQueryRequest) => any;
    }
    /**
        * <p>Provides the details of a stored query.</p>
        */
    export interface StoredQuery {
            /**
                * <p>The ID of the query.</p>
                */
            QueryId?: string;
            /**
                * <p>Amazon Resource Name (ARN) of the query. For example, arn:partition:service:region:account-id:resource-type/resource-name/resource-id.</p>
                */
            QueryArn?: string;
            /**
                * <p>The name of the query.</p>
                */
            QueryName: string | undefined;
            /**
                * <p>A unique description for the query.</p>
                */
            Description?: string;
            /**
                * <p>The expression of the query. For example, <code>SELECT
                * 			resourceId,
                * 			resourceType,
                * 			supplementaryConfiguration.BucketVersioningConfiguration.status
                * 			WHERE
                * 			resourceType = 'AWS::S3::Bucket'
                * 			AND supplementaryConfiguration.BucketVersioningConfiguration.status = 'Off'.</code>
                *          </p>
                */
            Expression?: string;
    }
    export namespace StoredQuery {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StoredQuery) => any;
    }
    export interface GetStoredQueryResponse {
            /**
                * <p>Returns a <code>StoredQuery</code> object.</p>
                */
            StoredQuery?: StoredQuery;
    }
    export namespace GetStoredQueryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStoredQueryResponse) => any;
    }
    /**
        * <p>Your Amazon S3 bucket policy does not permit Config to
        * 			write to it.</p>
        */
    export class InsufficientDeliveryPolicyException extends __BaseException {
            readonly name: "InsufficientDeliveryPolicyException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InsufficientDeliveryPolicyException, __BaseException>);
    }
    /**
        * <p>You have provided a configuration recorder name that is not
        * 			valid.</p>
        */
    export class InvalidConfigurationRecorderNameException extends __BaseException {
            readonly name: "InvalidConfigurationRecorderNameException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidConfigurationRecorderNameException, __BaseException>);
    }
    /**
        * <p>The specified delivery channel name is not valid.</p>
        */
    export class InvalidDeliveryChannelNameException extends __BaseException {
            readonly name: "InvalidDeliveryChannelNameException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDeliveryChannelNameException, __BaseException>);
    }
    /**
        * <p>The syntax of the query is incorrect.</p>
        */
    export class InvalidExpressionException extends __BaseException {
            readonly name: "InvalidExpressionException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidExpressionException, __BaseException>);
    }
    /**
        * <p>Config throws an exception if the recording group does not contain a valid list of resource types. Invalid values might also be incorrectly formatted.</p>
        */
    export class InvalidRecordingGroupException extends __BaseException {
            readonly name: "InvalidRecordingGroupException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRecordingGroupException, __BaseException>);
    }
    /**
        * <p>The specified <code>ResultToken</code> is invalid.</p>
        */
    export class InvalidResultTokenException extends __BaseException {
            readonly name: "InvalidResultTokenException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidResultTokenException, __BaseException>);
    }
    /**
        * <p>You have provided a null or empty role ARN.</p>
        */
    export class InvalidRoleException extends __BaseException {
            readonly name: "InvalidRoleException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRoleException, __BaseException>);
    }
    /**
        * <p>The specified Amazon S3 key prefix is not valid.</p>
        */
    export class InvalidS3KeyPrefixException extends __BaseException {
            readonly name: "InvalidS3KeyPrefixException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidS3KeyPrefixException, __BaseException>);
    }
    /**
        * <p>The specified Amazon KMS Key ARN is not valid.</p>
        */
    export class InvalidS3KmsKeyArnException extends __BaseException {
            readonly name: "InvalidS3KmsKeyArnException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidS3KmsKeyArnException, __BaseException>);
    }
    /**
        * <p>The specified Amazon SNS topic does not exist.</p>
        */
    export class InvalidSNSTopicARNException extends __BaseException {
            readonly name: "InvalidSNSTopicARNException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSNSTopicARNException, __BaseException>);
    }
    /**
        * <p>For <code>StartConfigRulesEvaluation</code> API, this exception
        * 			is thrown if an evaluation is in progress or if you call the <a>StartConfigRulesEvaluation</a> API more than once per
        * 			minute.</p>
        * 		       <p>For <code>PutConfigurationAggregator</code> API, this exception
        * 			is thrown if the number of accounts and aggregators exceeds the
        * 			limit.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>Filters the results by resource account ID, region, resource ID, and resource name.</p>
        */
    export interface ResourceFilters {
            /**
                * <p>The 12-digit source account ID.</p>
                */
            AccountId?: string;
            /**
                * <p>The ID of the resource.</p>
                */
            ResourceId?: string;
            /**
                * <p>The name of the resource.</p>
                */
            ResourceName?: string;
            /**
                * <p>The source region.</p>
                */
            Region?: string;
    }
    export namespace ResourceFilters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceFilters) => any;
    }
    export interface ListAggregateDiscoveredResourcesRequest {
            /**
                * <p>The name of the configuration aggregator. </p>
                */
            ConfigurationAggregatorName: string | undefined;
            /**
                * <p>The type of resources that you want Config to list in the response.</p>
                */
            ResourceType: ResourceType | string | undefined;
            /**
                * <p>Filters the results based on the <code>ResourceFilters</code> object.</p>
                */
            Filters?: ResourceFilters;
            /**
                * <p>The maximum number of resource identifiers returned on each page. You cannot specify a number greater than 100. If you specify 0, Config uses the default.</p>
                */
            Limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace ListAggregateDiscoveredResourcesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAggregateDiscoveredResourcesRequest) => any;
    }
    export interface ListAggregateDiscoveredResourcesResponse {
            /**
                * <p>Returns a list of <code>ResourceIdentifiers</code> objects.</p>
                */
            ResourceIdentifiers?: AggregateResourceIdentifier[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.</p>
                */
            NextToken?: string;
    }
    export namespace ListAggregateDiscoveredResourcesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAggregateDiscoveredResourcesResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface ListDiscoveredResourcesRequest {
            /**
                * <p>The type of resources that you want Config to list in the
                * 			response.</p>
                */
            resourceType: ResourceType | string | undefined;
            /**
                * <p>The IDs of only those resources that you want Config to
                * 			list in the response. If you do not specify this parameter, Config lists all resources of the specified type that it has
                * 			discovered.</p>
                */
            resourceIds?: string[];
            /**
                * <p>The custom name of only those resources that you want Config to list in the response. If you do not specify this
                * 			parameter, Config lists all resources of the specified type that
                * 			it has discovered.</p>
                */
            resourceName?: string;
            /**
                * <p>The maximum number of resource identifiers returned on each
                * 			page. The default is 100. You cannot specify a number greater than
                * 			100. If you specify 0, Config uses the default.</p>
                */
            limit?: number;
            /**
                * <p>Specifies whether Config includes deleted resources in the
                * 			results. By default, deleted resources are not included.</p>
                */
            includeDeletedResources?: boolean;
            /**
                * <p>The <code>nextToken</code> string returned on a previous page
                * 			that you use to get the next page of results in a paginated
                * 			response.</p>
                */
            nextToken?: string;
    }
    export namespace ListDiscoveredResourcesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDiscoveredResourcesRequest) => any;
    }
    /**
        * <p>The details that identify a resource that is discovered by Config, including the resource type, ID, and (if available) the
        * 			custom resource name.</p>
        */
    export interface ResourceIdentifier {
            /**
                * <p>The type of resource.</p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The ID of the resource (for example,
                * 			<code>sg-xxxxxx</code>).</p>
                */
            resourceId?: string;
            /**
                * <p>The custom name of the resource (if available).</p>
                */
            resourceName?: string;
            /**
                * <p>The time that the resource was deleted.</p>
                */
            resourceDeletionTime?: Date;
    }
    export namespace ResourceIdentifier {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceIdentifier) => any;
    }
    /**
        * <p></p>
        */
    export interface ListDiscoveredResourcesResponse {
            /**
                * <p>The details that identify a resource that is discovered by Config, including the resource type, ID, and (if available) the
                * 			custom resource name.</p>
                */
            resourceIdentifiers?: ResourceIdentifier[];
            /**
                * <p>The string that you use in a subsequent request to get the next
                * 			page of results in a paginated response.</p>
                */
            nextToken?: string;
    }
    export namespace ListDiscoveredResourcesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDiscoveredResourcesResponse) => any;
    }
    export interface ListStoredQueriesRequest {
            /**
                * <p>The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to be returned with a single call.</p>
                */
            MaxResults?: number;
    }
    export namespace ListStoredQueriesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListStoredQueriesRequest) => any;
    }
    /**
        * <p>Returns details of a specific query. </p>
        */
    export interface StoredQueryMetadata {
            /**
                * <p>The ID of the query. </p>
                */
            QueryId: string | undefined;
            /**
                * <p>Amazon Resource Name (ARN) of the query. For example, arn:partition:service:region:account-id:resource-type/resource-name/resource-id.</p>
                */
            QueryArn: string | undefined;
            /**
                * <p>The name of the query.</p>
                */
            QueryName: string | undefined;
            /**
                * <p>A unique description for the query.</p>
                */
            Description?: string;
    }
    export namespace StoredQueryMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StoredQueryMetadata) => any;
    }
    export interface ListStoredQueriesResponse {
            /**
                * <p>A list of <code>StoredQueryMetadata</code> objects.</p>
                */
            StoredQueryMetadata?: StoredQueryMetadata[];
            /**
                * <p>If the previous paginated request didn't return all of the remaining results, the response object's <code>NextToken</code> parameter value is set to a token.
                * 			To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter.
                * 			If there are no remaining results, the previous response object's <code>NextToken</code> parameter is set to <code>null</code>. </p>
                */
            NextToken?: string;
    }
    export namespace ListStoredQueriesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListStoredQueriesResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. Currently, the supported resources are <code>ConfigRule</code>, <code>ConfigurationAggregator</code> and <code>AggregatorAuthorization</code>.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The maximum number of tags returned on each page. The limit maximum is 50. You cannot specify a number greater than 50. If you specify 0, Config uses the default. </p>
                */
            Limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response. </p>
                */
            NextToken?: string;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    /**
        * <p>The tags for the resource. The metadata that you apply to a resource to help you categorize and organize them.
        * 			Each tag consists of a key and an optional value, both of which you define.
        * 			Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.</p>
        */
    export interface Tag {
            /**
                * <p>One part of a key-value pair that make up a tag. A key is a general label that acts like a category for more specific tag values.</p>
                */
            Key?: string;
            /**
                * <p>The optional part of a key-value pair that make up a tag. A value acts as a descriptor within a tag category (key).</p>
                */
            Value?: string;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The tags for the resource.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response. </p>
                */
            NextToken?: string;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    /**
        * <p>You have reached the limit (100,000) of active custom resource types in your account.
        * 			Delete unused resources using <code>DeleteResourceConfig</code>.</p>
        */
    export class MaxActiveResourcesExceededException extends __BaseException {
            readonly name: "MaxActiveResourcesExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaxActiveResourcesExceededException, __BaseException>);
    }
    /**
        * <p>Failed to add the Config rule because the account already
        * 			contains the maximum number of 150 rules. Consider deleting any
        * 			deactivated rules before you add new rules.</p>
        */
    export class MaxNumberOfConfigRulesExceededException extends __BaseException {
            readonly name: "MaxNumberOfConfigRulesExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaxNumberOfConfigRulesExceededException, __BaseException>);
    }
    /**
        * <p>You have reached the limit of the number of recorders you can
        * 			create.</p>
        */
    export class MaxNumberOfConfigurationRecordersExceededException extends __BaseException {
            readonly name: "MaxNumberOfConfigurationRecordersExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaxNumberOfConfigurationRecordersExceededException, __BaseException>);
    }
    /**
        * <p>You have reached the limit (6) of the number of conformance packs in an account (6 conformance pack with 25 Config rules per pack).</p>
        */
    export class MaxNumberOfConformancePacksExceededException extends __BaseException {
            readonly name: "MaxNumberOfConformancePacksExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaxNumberOfConformancePacksExceededException, __BaseException>);
    }
    /**
        * <p>You have reached the limit of the number of delivery channels
        * 			you can create.</p>
        */
    export class MaxNumberOfDeliveryChannelsExceededException extends __BaseException {
            readonly name: "MaxNumberOfDeliveryChannelsExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaxNumberOfDeliveryChannelsExceededException, __BaseException>);
    }
    /**
        * <p>You have reached the limit of the number of organization Config rules you can create.</p>
        */
    export class MaxNumberOfOrganizationConfigRulesExceededException extends __BaseException {
            readonly name: "MaxNumberOfOrganizationConfigRulesExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaxNumberOfOrganizationConfigRulesExceededException, __BaseException>);
    }
    /**
        * <p>You have reached the limit (6) of the number of organization conformance packs in an account (6 conformance pack with 25 Config rules per pack per account).</p>
        */
    export class MaxNumberOfOrganizationConformancePacksExceededException extends __BaseException {
            readonly name: "MaxNumberOfOrganizationConformancePacksExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaxNumberOfOrganizationConformancePacksExceededException, __BaseException>);
    }
    /**
        * <p>Failed to add the retention configuration because a retention configuration with that name already exists.</p>
        */
    export class MaxNumberOfRetentionConfigurationsExceededException extends __BaseException {
            readonly name: "MaxNumberOfRetentionConfigurationsExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaxNumberOfRetentionConfigurationsExceededException, __BaseException>);
    }
    /**
        * <p>There is no delivery channel available to record
        * 			configurations.</p>
        */
    export class NoAvailableDeliveryChannelException extends __BaseException {
            readonly name: "NoAvailableDeliveryChannelException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NoAvailableDeliveryChannelException, __BaseException>);
    }
    /**
        * <p>Organization is no longer available.</p>
        */
    export class NoAvailableOrganizationException extends __BaseException {
            readonly name: "NoAvailableOrganizationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NoAvailableOrganizationException, __BaseException>);
    }
    /**
        * <p>The specified Amazon S3 bucket does not exist.</p>
        */
    export class NoSuchBucketException extends __BaseException {
            readonly name: "NoSuchBucketException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NoSuchBucketException, __BaseException>);
    }
    /**
        * <p>Config resource cannot be created because your organization does not have all features enabled.</p>
        */
    export class OrganizationAllFeaturesNotEnabledException extends __BaseException {
            readonly name: "OrganizationAllFeaturesNotEnabledException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OrganizationAllFeaturesNotEnabledException, __BaseException>);
    }
    /**
        * <p>You have specified a template that is not valid or supported.</p>
        */
    export class OrganizationConformancePackTemplateValidationException extends __BaseException {
            readonly name: "OrganizationConformancePackTemplateValidationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OrganizationConformancePackTemplateValidationException, __BaseException>);
    }
    /**
        * <p>An
        * 			object that specifies metadata for your organization's Config Custom Policy rule. The metadata includes the runtime system in use, which accounts have
        * 			debug logging enabled, and other custom rule metadata, such as resource type, resource
        * 			ID of Amazon Web Services resource, and organization trigger types that initiate Config to evaluate Amazon Web Services resources against a rule.</p>
        */
    export interface OrganizationCustomPolicyRuleMetadata {
            /**
                * <p>The description that you provide for your organization Config Custom Policy rule.</p>
                */
            Description?: string;
            /**
                * <p>The type of notification that initiates Config to run an evaluation for a rule.
                * 			For Config Custom Policy rules, Config supports change-initiated notification types:</p>
                *
                * 		       <ul>
                *             <li>
                *                <p>
                *                   <code>ConfigurationItemChangeNotification</code> - Initiates an evaluation when Config delivers a configuration item as a result of a resource
                * 					change.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>OversizedConfigurationItemChangeNotification</code> - Initiates an evaluation when
                * 						Config delivers an oversized configuration item. Config may generate this notification type when a resource changes and the
                * 					notification exceeds the maximum size allowed by Amazon SNS.</p>
                *             </li>
                *          </ul>
                */
            OrganizationConfigRuleTriggerTypes?: (OrganizationConfigRuleTriggerTypeNoSN | string)[];
            /**
                * <p>A string, in JSON format, that is passed to your organization Config Custom Policy rule.</p>
                */
            InputParameters?: string;
            /**
                * <p>The maximum frequency with which Config runs evaluations for a rule. Your
                * 			Config Custom Policy rule is triggered when Config delivers
                * 			the configuration snapshot. For more information, see <a>ConfigSnapshotDeliveryProperties</a>.</p>
                */
            MaximumExecutionFrequency?: MaximumExecutionFrequency | string;
            /**
                * <p>The type of the Amazon Web Services resource that was evaluated.</p>
                */
            ResourceTypesScope?: string[];
            /**
                * <p>The ID of the Amazon Web Services resource that was evaluated.</p>
                */
            ResourceIdScope?: string;
            /**
                * <p>One part of a key-value pair that make up a tag. A key is a general label that acts like a category for more specific tag values.</p>
                */
            TagKeyScope?: string;
            /**
                * <p>The optional part of a key-value pair that make up a tag. A value acts as a descriptor within a tag category (key).</p>
                */
            TagValueScope?: string;
            /**
                * <p>The runtime system for your organization Config Custom Policy rules. Guard is a policy-as-code language that allows you to write policies that are enforced by Config Custom Policy rules. For more information about Guard, see the <a href="https://github.com/aws-cloudformation/cloudformation-guard">Guard GitHub
                * 			Repository</a>.</p>
                */
            PolicyRuntime: string | undefined;
            /**
                * <p>The policy definition containing the logic for your organization Config Custom Policy rule.</p>
                */
            PolicyText: string | undefined;
            /**
                * <p>A list of accounts that you can enable debug logging for your organization Config Custom Policy rule. List is null when debug logging is enabled for all accounts.</p>
                */
            DebugLogDeliveryAccounts?: string[];
    }
    export namespace OrganizationCustomPolicyRuleMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OrganizationCustomPolicyRuleMetadata) => any;
    }
    export interface PutAggregationAuthorizationRequest {
            /**
                * <p>The 12-digit account ID of the account authorized to aggregate data.</p>
                */
            AuthorizedAccountId: string | undefined;
            /**
                * <p>The region authorized to collect aggregated data.</p>
                */
            AuthorizedAwsRegion: string | undefined;
            /**
                * <p>An array of tag object.</p>
                */
            Tags?: Tag[];
    }
    export namespace PutAggregationAuthorizationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutAggregationAuthorizationRequest) => any;
    }
    export interface PutAggregationAuthorizationResponse {
            /**
                * <p>Returns an AggregationAuthorization object.
                *
                * 		</p>
                */
            AggregationAuthorization?: AggregationAuthorization;
    }
    export namespace PutAggregationAuthorizationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutAggregationAuthorizationResponse) => any;
    }
    export interface PutConfigRuleRequest {
            /**
                * <p>The rule that you want to add to your account.</p>
                */
            ConfigRule: ConfigRule | undefined;
            /**
                * <p>An array of tag object.</p>
                */
            Tags?: Tag[];
    }
    export namespace PutConfigRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutConfigRuleRequest) => any;
    }
    export interface PutConfigurationAggregatorRequest {
            /**
                * <p>The name of the configuration aggregator.</p>
                */
            ConfigurationAggregatorName: string | undefined;
            /**
                * <p>A list of AccountAggregationSource object.
                *
                * 		</p>
                */
            AccountAggregationSources?: AccountAggregationSource[];
            /**
                * <p>An OrganizationAggregationSource object.</p>
                */
            OrganizationAggregationSource?: OrganizationAggregationSource;
            /**
                * <p>An array of tag object.</p>
                */
            Tags?: Tag[];
    }
    export namespace PutConfigurationAggregatorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutConfigurationAggregatorRequest) => any;
    }
    export interface PutConfigurationAggregatorResponse {
            /**
                * <p>Returns a ConfigurationAggregator object.</p>
                */
            ConfigurationAggregator?: ConfigurationAggregator;
    }
    export namespace PutConfigurationAggregatorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutConfigurationAggregatorResponse) => any;
    }
    /**
        * <p>The input for the <a>PutConfigurationRecorder</a>
        * 			action.</p>
        */
    export interface PutConfigurationRecorderRequest {
            /**
                * <p>The configuration recorder object that records each
                * 			configuration change made to the resources.</p>
                */
            ConfigurationRecorder: ConfigurationRecorder | undefined;
    }
    export namespace PutConfigurationRecorderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutConfigurationRecorderRequest) => any;
    }
    export interface PutConformancePackRequest {
            /**
                * <p>Name of the conformance pack you want to create.</p>
                */
            ConformancePackName: string | undefined;
            /**
                * <p>Location of file containing the template body (<code>s3://bucketname/prefix</code>). The uri must point to the conformance pack template (max size: 300 KB) that is located in an Amazon S3 bucket in the same region as the conformance pack. </p>
                * 		       <note>
                *             <p>You must have access to read Amazon S3 bucket.</p>
                *          </note>
                */
            TemplateS3Uri?: string;
            /**
                * <p>A string containing full conformance pack template body. Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes.</p>
                * 		       <note>
                *             <p>You can only use a YAML template with two resource types: Config rule (<code>AWS::Config::ConfigRule</code>) and a remediation action (<code>AWS::Config::RemediationConfiguration</code>).</p>
                *          </note>
                */
            TemplateBody?: string;
            /**
                * <p>The name of the Amazon S3 bucket where Config stores conformance pack templates.</p>
                * 		       <note>
                *             <p>This field is optional.</p>
                *          </note>
                */
            DeliveryS3Bucket?: string;
            /**
                * <p>The prefix for the Amazon S3 bucket. </p>
                * 		       <note>
                *             <p>This field is optional.</p>
                *          </note>
                */
            DeliveryS3KeyPrefix?: string;
            /**
                * <p>A list of <code>ConformancePackInputParameter</code> objects.</p>
                */
            ConformancePackInputParameters?: ConformancePackInputParameter[];
    }
    export namespace PutConformancePackRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutConformancePackRequest) => any;
    }
    export interface PutConformancePackResponse {
            /**
                * <p>ARN of the conformance pack.</p>
                */
            ConformancePackArn?: string;
    }
    export namespace PutConformancePackResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutConformancePackResponse) => any;
    }
    /**
        * <p>The input for the <a>PutDeliveryChannel</a>
        * 			action.</p>
        */
    export interface PutDeliveryChannelRequest {
            /**
                * <p>The configuration delivery channel object that delivers the
                * 			configuration information to an Amazon S3 bucket and to an Amazon
                * 			SNS topic.</p>
                */
            DeliveryChannel: DeliveryChannel | undefined;
    }
    export namespace PutDeliveryChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutDeliveryChannelRequest) => any;
    }
    /**
        * <p></p>
        */
    export interface PutEvaluationsRequest {
            /**
                * <p>The assessments that the Lambda function performs. Each
                * 			evaluation identifies an Amazon Web Services resource and indicates whether it
                * 			complies with the Config rule that invokes the Lambda
                * 			function.</p>
                */
            Evaluations?: Evaluation[];
            /**
                * <p>An encrypted token that associates an evaluation with an Config rule. Identifies the rule and the event that triggered the
                * 			evaluation.</p>
                */
            ResultToken: string | undefined;
            /**
                * <p>Use this parameter to specify a test run for
                * 			<code>PutEvaluations</code>. You can verify whether your Lambda function will deliver evaluation results to Config. No
                * 			updates occur to your existing evaluations, and evaluation results
                * 			are not sent to Config.</p>
                *
                * 		       <note>
                * 			         <p>When <code>TestMode</code> is <code>true</code>,
                * 					<code>PutEvaluations</code> doesn't require a valid value
                * 				for the <code>ResultToken</code> parameter, but the value cannot
                * 				be null.</p>
                * 		       </note>
                */
            TestMode?: boolean;
    }
    export namespace PutEvaluationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutEvaluationsRequest) => any;
    }
    /**
        * <p></p>
        */
    export interface PutEvaluationsResponse {
            /**
                * <p>Requests that failed because of a client or server
                * 			error.</p>
                */
            FailedEvaluations?: Evaluation[];
    }
    export namespace PutEvaluationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutEvaluationsResponse) => any;
    }
    export interface PutExternalEvaluationRequest {
            /**
                * <p>The name of the Config rule.</p>
                */
            ConfigRuleName: string | undefined;
            /**
                * <p>An <code>ExternalEvaluation</code> object that provides details about compliance.</p>
                */
            ExternalEvaluation: ExternalEvaluation | undefined;
    }
    export namespace PutExternalEvaluationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutExternalEvaluationRequest) => any;
    }
    export interface PutExternalEvaluationResponse {
    }
    export namespace PutExternalEvaluationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutExternalEvaluationResponse) => any;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_1' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { ConfigServiceServiceException as __BaseException } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/ConfigServiceServiceException";
    import { ConformancePackInputParameter, FailedRemediationBatch, FailedRemediationExceptionBatch, FieldInfo, OrganizationCustomPolicyRuleMetadata, OrganizationCustomRuleMetadata, OrganizationManagedRuleMetadata, RemediationConfiguration, RemediationExceptionResourceKey, ResourceKey, RetentionConfiguration, StoredQuery, Tag } from "@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/models_0";
    export interface PutOrganizationConfigRuleRequest {
            /**
                * <p>The name that you assign to an organization Config rule.</p>
                */
            OrganizationConfigRuleName: string | undefined;
            /**
                * <p>An <code>OrganizationManagedRuleMetadata</code> object. </p>
                */
            OrganizationManagedRuleMetadata?: OrganizationManagedRuleMetadata;
            /**
                * <p>An <code>OrganizationCustomRuleMetadata</code> object.</p>
                */
            OrganizationCustomRuleMetadata?: OrganizationCustomRuleMetadata;
            /**
                * <p>A comma-separated list of accounts that you want to exclude from an organization Config rule.</p>
                */
            ExcludedAccounts?: string[];
            /**
                * <p>An object that specifies metadata for your organization's Config Custom Policy rule. The metadata includes the runtime system in use, which accounts have debug
                * 			logging enabled, and other custom rule metadata, such as resource type, resource ID of
                * 				Amazon Web Services resource, and organization trigger types that initiate Config to evaluate Amazon Web Services resources against a rule.</p>
                */
            OrganizationCustomPolicyRuleMetadata?: OrganizationCustomPolicyRuleMetadata;
    }
    export namespace PutOrganizationConfigRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutOrganizationConfigRuleRequest) => any;
    }
    export interface PutOrganizationConfigRuleResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of an organization Config rule.</p>
                */
            OrganizationConfigRuleArn?: string;
    }
    export namespace PutOrganizationConfigRuleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutOrganizationConfigRuleResponse) => any;
    }
    export interface PutOrganizationConformancePackRequest {
            /**
                * <p>Name of the organization conformance pack you want to create.</p>
                */
            OrganizationConformancePackName: string | undefined;
            /**
                * <p>Location of file containing the template body. The uri must point to the conformance pack template
                * 			(max size: 300 KB).</p>
                * 		       <note>
                *             <p>You must have access to read Amazon S3 bucket.</p>
                *          </note>
                */
            TemplateS3Uri?: string;
            /**
                * <p>A string containing full conformance pack template body. Structure containing the template body
                * 			with a minimum length of 1 byte and a maximum length of 51,200 bytes.</p>
                */
            TemplateBody?: string;
            /**
                * <p>The name of the Amazon S3 bucket where Config stores conformance pack templates.</p>
                * 		       <note>
                *             <p>This field is optional. If used, it must be prefixed with <code>awsconfigconforms</code>.</p>
                *          </note>
                */
            DeliveryS3Bucket?: string;
            /**
                * <p>The prefix for the Amazon S3 bucket.</p>
                * 		       <note>
                *             <p>This field is optional.</p>
                *          </note>
                */
            DeliveryS3KeyPrefix?: string;
            /**
                * <p>A list of <code>ConformancePackInputParameter</code> objects.</p>
                */
            ConformancePackInputParameters?: ConformancePackInputParameter[];
            /**
                * <p>A list of Amazon Web Services accounts to be excluded from an organization conformance pack while deploying a conformance pack.</p>
                */
            ExcludedAccounts?: string[];
    }
    export namespace PutOrganizationConformancePackRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutOrganizationConformancePackRequest) => any;
    }
    export interface PutOrganizationConformancePackResponse {
            /**
                * <p>ARN of the organization conformance pack.</p>
                */
            OrganizationConformancePackArn?: string;
    }
    export namespace PutOrganizationConformancePackResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutOrganizationConformancePackResponse) => any;
    }
    export interface PutRemediationConfigurationsRequest {
            /**
                * <p>A list of remediation configuration objects.</p>
                */
            RemediationConfigurations: RemediationConfiguration[] | undefined;
    }
    export namespace PutRemediationConfigurationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutRemediationConfigurationsRequest) => any;
    }
    export interface PutRemediationConfigurationsResponse {
            /**
                * <p>Returns a list of failed remediation batch objects.</p>
                */
            FailedBatches?: FailedRemediationBatch[];
    }
    export namespace PutRemediationConfigurationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutRemediationConfigurationsResponse) => any;
    }
    export interface PutRemediationExceptionsRequest {
            /**
                * <p>The name of the Config rule for which you want to create remediation exception.</p>
                */
            ConfigRuleName: string | undefined;
            /**
                * <p>An exception list of resource exception keys to be processed with the current request. Config adds exception for each resource key. For example, Config adds 3 exceptions for 3 resource keys. </p>
                */
            ResourceKeys: RemediationExceptionResourceKey[] | undefined;
            /**
                * <p>The message contains an explanation of the exception.</p>
                */
            Message?: string;
            /**
                * <p>The exception is automatically deleted after the expiration date.</p>
                */
            ExpirationTime?: Date;
    }
    export namespace PutRemediationExceptionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutRemediationExceptionsRequest) => any;
    }
    export interface PutRemediationExceptionsResponse {
            /**
                * <p>Returns a list of failed remediation exceptions batch objects. Each object in the batch consists of a list of failed items and failure messages.</p>
                */
            FailedBatches?: FailedRemediationExceptionBatch[];
    }
    export namespace PutRemediationExceptionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutRemediationExceptionsResponse) => any;
    }
    export interface PutResourceConfigRequest {
            /**
                * <p>The type of the resource. The custom resource type must be registered with CloudFormation. </p>
                * 		       <note>
                *             <p>You cannot use the organization names “amzn”, “amazon”, “alexa”, “custom” with custom resource types. It is the first part of the ResourceType up to the first ::.</p>
                *          </note>
                */
            ResourceType: string | undefined;
            /**
                * <p>Version of the schema registered for the ResourceType in CloudFormation.</p>
                */
            SchemaVersionId: string | undefined;
            /**
                * <p>Unique identifier of the resource.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>Name of the resource.</p>
                */
            ResourceName?: string;
            /**
                * <p>The configuration object of the resource in valid JSON format. It must match the schema registered with CloudFormation.</p>
                * 		       <note>
                *             <p>The configuration JSON must not exceed 64 KB.</p>
                *          </note>
                */
            Configuration: string | undefined;
            /**
                * <p>Tags associated with the resource.</p>
                * 		       <note>
                *             <p>This field is not to be confused with the Amazon Web Services-wide tag feature for Amazon Web Services resources.
                * 			Tags for <code>PutResourceConfig</code> are tags that you supply for the configuration items of your custom resources.</p>
                *          </note>
                */
            Tags?: Record<string, string>;
    }
    export namespace PutResourceConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutResourceConfigRequest) => any;
    }
    export interface PutRetentionConfigurationRequest {
            /**
                * <p>Number of days Config stores your historical
                * 			information.</p>
                * 		       <note>
                * 			         <p>Currently, only applicable to the configuration item
                * 				history.</p>
                * 		       </note>
                */
            RetentionPeriodInDays: number | undefined;
    }
    export namespace PutRetentionConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutRetentionConfigurationRequest) => any;
    }
    export interface PutRetentionConfigurationResponse {
            /**
                * <p>Returns a retention configuration object.</p>
                */
            RetentionConfiguration?: RetentionConfiguration;
    }
    export namespace PutRetentionConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutRetentionConfigurationResponse) => any;
    }
    export interface PutStoredQueryRequest {
            /**
                * <p>A list of <code>StoredQuery</code> objects.
                * 			The mandatory fields are <code>QueryName</code> and <code>Expression</code>.</p>
                * 		       <note>
                *             <p>When you are creating a query, you must provide a query name and an expression.
                * 			When you are updating a query, you must provide a query name but updating the description is optional.</p>
                *          </note>
                */
            StoredQuery: StoredQuery | undefined;
            /**
                * <p>A list of <code>Tags</code> object.</p>
                */
            Tags?: Tag[];
    }
    export namespace PutStoredQueryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutStoredQueryRequest) => any;
    }
    export interface PutStoredQueryResponse {
            /**
                * <p>Amazon Resource Name (ARN) of the query.
                * 			For example, arn:partition:service:region:account-id:resource-type/resource-name/resource-id.</p>
                */
            QueryArn?: string;
    }
    export namespace PutStoredQueryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutStoredQueryResponse) => any;
    }
    /**
        * <p>Two users are trying to modify the same query at the same time. Wait for a moment and try again.</p>
        */
    export class ResourceConcurrentModificationException extends __BaseException {
            readonly name: "ResourceConcurrentModificationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceConcurrentModificationException, __BaseException>);
    }
    /**
        * <p>You have reached the limit of the number of tags you can use. You have more than 50 tags.</p>
        */
    export class TooManyTagsException extends __BaseException {
            readonly name: "TooManyTagsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyTagsException, __BaseException>);
    }
    /**
        * <p>Details about the query.</p>
        */
    export interface QueryInfo {
            /**
                * <p>Returns a <code>FieldInfo</code> object.</p>
                */
            SelectFields?: FieldInfo[];
    }
    export namespace QueryInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryInfo) => any;
    }
    export interface SelectAggregateResourceConfigRequest {
            /**
                * <p>The SQL query SELECT command. </p>
                */
            Expression: string | undefined;
            /**
                * <p>The name of the configuration aggregator.</p>
                */
            ConfigurationAggregatorName: string | undefined;
            /**
                * <p>The maximum number of query results returned on each page. </p>
                */
            Limit?: number;
            /**
                * <p>The maximum number of query results returned on each page. Config also allows the Limit request parameter.</p>
                */
            MaxResults?: number;
            /**
                * <p>The nextToken string returned in a previous request that you use to request the next page of results in a paginated response. </p>
                */
            NextToken?: string;
    }
    export namespace SelectAggregateResourceConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SelectAggregateResourceConfigRequest) => any;
    }
    export interface SelectAggregateResourceConfigResponse {
            /**
                * <p>Returns the results for the SQL query.</p>
                */
            Results?: string[];
            /**
                * <p>Details about the query.</p>
                */
            QueryInfo?: QueryInfo;
            /**
                * <p>The nextToken string returned in a previous request that you use to request the next page of results in a paginated response. </p>
                */
            NextToken?: string;
    }
    export namespace SelectAggregateResourceConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SelectAggregateResourceConfigResponse) => any;
    }
    export interface SelectResourceConfigRequest {
            /**
                * <p>The SQL query <code>SELECT</code> command.</p>
                */
            Expression: string | undefined;
            /**
                * <p>The maximum number of query results returned on each page. </p>
                */
            Limit?: number;
            /**
                * <p>The <code>nextToken</code> string returned in a previous request that you use to request the next page of results in a paginated response. </p>
                */
            NextToken?: string;
    }
    export namespace SelectResourceConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SelectResourceConfigRequest) => any;
    }
    export interface SelectResourceConfigResponse {
            /**
                * <p>Returns the results for the SQL query.</p>
                */
            Results?: string[];
            /**
                * <p>Returns the <code>QueryInfo</code> object.</p>
                */
            QueryInfo?: QueryInfo;
            /**
                * <p>The <code>nextToken</code> string returned in a previous request that you use to request the next page of results in a paginated response. </p>
                */
            NextToken?: string;
    }
    export namespace SelectResourceConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SelectResourceConfigResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface StartConfigRulesEvaluationRequest {
            /**
                * <p>The list of names of Config rules that you want to run
                * 			evaluations for.</p>
                */
            ConfigRuleNames?: string[];
    }
    export namespace StartConfigRulesEvaluationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartConfigRulesEvaluationRequest) => any;
    }
    /**
        * <p>The output when you start the evaluation for the specified Config rule.</p>
        */
    export interface StartConfigRulesEvaluationResponse {
    }
    export namespace StartConfigRulesEvaluationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartConfigRulesEvaluationResponse) => any;
    }
    /**
        * <p>The input for the <a>StartConfigurationRecorder</a>
        * 			action.</p>
        */
    export interface StartConfigurationRecorderRequest {
            /**
                * <p>The name of the recorder object that records each configuration
                * 			change made to the resources.</p>
                */
            ConfigurationRecorderName: string | undefined;
    }
    export namespace StartConfigurationRecorderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartConfigurationRecorderRequest) => any;
    }
    export interface StartRemediationExecutionRequest {
            /**
                * <p>The list of names of Config rules that you want to run remediation execution for.</p>
                */
            ConfigRuleName: string | undefined;
            /**
                * <p>A list of resource keys to be processed with the current request. Each element in the list consists of the resource type and resource ID. </p>
                */
            ResourceKeys: ResourceKey[] | undefined;
    }
    export namespace StartRemediationExecutionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartRemediationExecutionRequest) => any;
    }
    export interface StartRemediationExecutionResponse {
            /**
                * <p>Returns a failure message. For example, the resource is already compliant.</p>
                */
            FailureMessage?: string;
            /**
                * <p>For resources that have failed to start execution, the API returns a resource key object.</p>
                */
            FailedItems?: ResourceKey[];
    }
    export namespace StartRemediationExecutionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartRemediationExecutionResponse) => any;
    }
    /**
        * <p>The input for the <a>StopConfigurationRecorder</a> action.</p>
        */
    export interface StopConfigurationRecorderRequest {
            /**
                * <p>The name of the recorder object that records each configuration change made to the resources.</p>
                */
            ConfigurationRecorderName: string | undefined;
    }
    export namespace StopConfigurationRecorderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopConfigurationRecorderRequest) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. Currently, the supported resources are <code>ConfigRule</code>, <code>ConfigurationAggregator</code> and <code>AggregatorAuthorization</code>.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>An array of tag object.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. Currently, the supported resources are <code>ConfigRule</code>, <code>ConfigurationAggregator</code> and <code>AggregatorAuthorization</code>.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The keys of the tags to be removed.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
}

declare module '@aws-sdk/client-config-service/node_modules/@aws-sdk/client-config-service/dist-types/models/ConfigServiceServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from ConfigService service.
        */
    export class ConfigServiceServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

