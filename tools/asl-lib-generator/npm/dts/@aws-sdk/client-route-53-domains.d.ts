// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-route-53-domains' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AcceptDomainTransferFromAnotherAwsAccountCommandInput, AcceptDomainTransferFromAnotherAwsAccountCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/AcceptDomainTransferFromAnotherAwsAccountCommand";
    import { CancelDomainTransferToAnotherAwsAccountCommandInput, CancelDomainTransferToAnotherAwsAccountCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/CancelDomainTransferToAnotherAwsAccountCommand";
    import { CheckDomainAvailabilityCommandInput, CheckDomainAvailabilityCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/CheckDomainAvailabilityCommand";
    import { CheckDomainTransferabilityCommandInput, CheckDomainTransferabilityCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/CheckDomainTransferabilityCommand";
    import { DeleteDomainCommandInput, DeleteDomainCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/DeleteDomainCommand";
    import { DeleteTagsForDomainCommandInput, DeleteTagsForDomainCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/DeleteTagsForDomainCommand";
    import { DisableDomainAutoRenewCommandInput, DisableDomainAutoRenewCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/DisableDomainAutoRenewCommand";
    import { DisableDomainTransferLockCommandInput, DisableDomainTransferLockCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/DisableDomainTransferLockCommand";
    import { EnableDomainAutoRenewCommandInput, EnableDomainAutoRenewCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/EnableDomainAutoRenewCommand";
    import { EnableDomainTransferLockCommandInput, EnableDomainTransferLockCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/EnableDomainTransferLockCommand";
    import { GetContactReachabilityStatusCommandInput, GetContactReachabilityStatusCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/GetContactReachabilityStatusCommand";
    import { GetDomainDetailCommandInput, GetDomainDetailCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/GetDomainDetailCommand";
    import { GetDomainSuggestionsCommandInput, GetDomainSuggestionsCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/GetDomainSuggestionsCommand";
    import { GetOperationDetailCommandInput, GetOperationDetailCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/GetOperationDetailCommand";
    import { ListDomainsCommandInput, ListDomainsCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/ListDomainsCommand";
    import { ListOperationsCommandInput, ListOperationsCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/ListOperationsCommand";
    import { ListPricesCommandInput, ListPricesCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/ListPricesCommand";
    import { ListTagsForDomainCommandInput, ListTagsForDomainCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/ListTagsForDomainCommand";
    import { RegisterDomainCommandInput, RegisterDomainCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/RegisterDomainCommand";
    import { RejectDomainTransferFromAnotherAwsAccountCommandInput, RejectDomainTransferFromAnotherAwsAccountCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/RejectDomainTransferFromAnotherAwsAccountCommand";
    import { RenewDomainCommandInput, RenewDomainCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/RenewDomainCommand";
    import { ResendContactReachabilityEmailCommandInput, ResendContactReachabilityEmailCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/ResendContactReachabilityEmailCommand";
    import { RetrieveDomainAuthCodeCommandInput, RetrieveDomainAuthCodeCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/RetrieveDomainAuthCodeCommand";
    import { TransferDomainCommandInput, TransferDomainCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/TransferDomainCommand";
    import { TransferDomainToAnotherAwsAccountCommandInput, TransferDomainToAnotherAwsAccountCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/TransferDomainToAnotherAwsAccountCommand";
    import { UpdateDomainContactCommandInput, UpdateDomainContactCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/UpdateDomainContactCommand";
    import { UpdateDomainContactPrivacyCommandInput, UpdateDomainContactPrivacyCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/UpdateDomainContactPrivacyCommand";
    import { UpdateDomainNameserversCommandInput, UpdateDomainNameserversCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/UpdateDomainNameserversCommand";
    import { UpdateTagsForDomainCommandInput, UpdateTagsForDomainCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/UpdateTagsForDomainCommand";
    import { ViewBillingCommandInput, ViewBillingCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/ViewBillingCommand";
    import { Route53DomainsClient } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    /**
        * <p>Amazon Route 53 API actions let you register domain names and perform related operations.</p>
        */
    export class Route53Domains extends Route53DomainsClient {
            /**
                * <p>Accepts the transfer of a domain from another Amazon Web Services account to the
                * 				currentAmazon Web Services account. You initiate a transfer between Amazon Web Services accounts using <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>.</p>
                * 		       <p>If you use the CLI command at <a href="https://docs.aws.amazon.com/cli/latest/reference/route53domains/accept-domain-transfer-from-another-aws-account.html">accept-domain-transfer-from-another-aws-account</a>, use JSON format as input
                * 			instead of text because otherwise CLI will throw an error  from domain
                * 			transfer input that includes single quotes.</p>
                *
                * 		       <p>Use either
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations</a> or
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
                * 			to determine whether the operation succeeded.
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
                * 			provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>.
                * 		</p>
                */
            acceptDomainTransferFromAnotherAwsAccount(args: AcceptDomainTransferFromAnotherAwsAccountCommandInput, options?: __HttpHandlerOptions): Promise<AcceptDomainTransferFromAnotherAwsAccountCommandOutput>;
            acceptDomainTransferFromAnotherAwsAccount(args: AcceptDomainTransferFromAnotherAwsAccountCommandInput, cb: (err: any, data?: AcceptDomainTransferFromAnotherAwsAccountCommandOutput) => void): void;
            acceptDomainTransferFromAnotherAwsAccount(args: AcceptDomainTransferFromAnotherAwsAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AcceptDomainTransferFromAnotherAwsAccountCommandOutput) => void): void;
            /**
                * <p>Cancels the transfer of a domain from the current Amazon Web Services account to another Amazon Web Services account. You initiate a transfer betweenAmazon Web Services accounts using
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>.
                * 		</p>
                *
                * 		       <important>
                * 			         <p>You must cancel the transfer before the other Amazon Web Services account accepts the transfer using
                * 				<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AcceptDomainTransferFromAnotherAwsAccount.html">AcceptDomainTransferFromAnotherAwsAccount</a>.</p>
                * 		       </important>
                *
                * 		       <p>Use either
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations</a> or
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
                * 			to determine whether the operation succeeded.
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
                * 			provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>.
                * 		</p>
                */
            cancelDomainTransferToAnotherAwsAccount(args: CancelDomainTransferToAnotherAwsAccountCommandInput, options?: __HttpHandlerOptions): Promise<CancelDomainTransferToAnotherAwsAccountCommandOutput>;
            cancelDomainTransferToAnotherAwsAccount(args: CancelDomainTransferToAnotherAwsAccountCommandInput, cb: (err: any, data?: CancelDomainTransferToAnotherAwsAccountCommandOutput) => void): void;
            cancelDomainTransferToAnotherAwsAccount(args: CancelDomainTransferToAnotherAwsAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelDomainTransferToAnotherAwsAccountCommandOutput) => void): void;
            /**
                * <p>This operation checks the availability of one domain name. Note that if the availability status of a domain is pending, you must
                * 			submit another request to determine the availability of the domain name.</p>
                */
            checkDomainAvailability(args: CheckDomainAvailabilityCommandInput, options?: __HttpHandlerOptions): Promise<CheckDomainAvailabilityCommandOutput>;
            checkDomainAvailability(args: CheckDomainAvailabilityCommandInput, cb: (err: any, data?: CheckDomainAvailabilityCommandOutput) => void): void;
            checkDomainAvailability(args: CheckDomainAvailabilityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CheckDomainAvailabilityCommandOutput) => void): void;
            /**
                * <p>Checks whether a domain name can be transferred to Amazon Route 53. </p>
                */
            checkDomainTransferability(args: CheckDomainTransferabilityCommandInput, options?: __HttpHandlerOptions): Promise<CheckDomainTransferabilityCommandOutput>;
            checkDomainTransferability(args: CheckDomainTransferabilityCommandInput, cb: (err: any, data?: CheckDomainTransferabilityCommandOutput) => void): void;
            checkDomainTransferability(args: CheckDomainTransferabilityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CheckDomainTransferabilityCommandOutput) => void): void;
            /**
                * <p>This operation deletes the specified domain. This action is permanent. For more information,
                * 			see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-delete.html">Deleting a domain name registration</a>.</p>
                * 		       <p>To transfer the domain registration to another registrar, use the transfer process that’s
                * 			provided by the registrar to which you want to transfer the registration.  Otherwise,
                * 			the following apply:</p>
                * 		       <ol>
                *             <li>
                *                <p>You can’t get a refund for the cost of a deleted domain registration.</p>
                *             </li>
                *             <li>
                *                <p>The registry for the top-level domain might hold the domain name for a brief time before releasing it for other users to register (varies by registry). </p>
                *             </li>
                *             <li>
                *                <p>When the registration has been deleted, we'll send you a confirmation to the registrant
                * 				contact. The email will come from
                * 				<code>noreply@domainnameverification.net</code> or
                * 				<code>noreply@registrar.amazon.com</code>.</p>
                *             </li>
                *          </ol>
                */
            deleteDomain(args: DeleteDomainCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDomainCommandOutput>;
            deleteDomain(args: DeleteDomainCommandInput, cb: (err: any, data?: DeleteDomainCommandOutput) => void): void;
            deleteDomain(args: DeleteDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDomainCommandOutput) => void): void;
            /**
                * <p>This operation deletes the specified tags for a domain.</p>
                * 		       <p>All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.</p>
                */
            deleteTagsForDomain(args: DeleteTagsForDomainCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTagsForDomainCommandOutput>;
            deleteTagsForDomain(args: DeleteTagsForDomainCommandInput, cb: (err: any, data?: DeleteTagsForDomainCommandOutput) => void): void;
            deleteTagsForDomain(args: DeleteTagsForDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTagsForDomainCommandOutput) => void): void;
            /**
                * <p>This operation disables automatic renewal of domain registration for the specified domain.</p>
                */
            disableDomainAutoRenew(args: DisableDomainAutoRenewCommandInput, options?: __HttpHandlerOptions): Promise<DisableDomainAutoRenewCommandOutput>;
            disableDomainAutoRenew(args: DisableDomainAutoRenewCommandInput, cb: (err: any, data?: DisableDomainAutoRenewCommandOutput) => void): void;
            disableDomainAutoRenew(args: DisableDomainAutoRenewCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisableDomainAutoRenewCommandOutput) => void): void;
            /**
                * <p>This operation removes the transfer lock on the domain (specifically the
                * 			<code>clientTransferProhibited</code> status) to allow domain transfers. We recommend
                * 			you refrain from performing this action unless you intend to transfer the domain to a
                * 			different registrar. Successful submission returns an operation ID that you can use to track
                * 			the progress and completion of the action. If the request is not completed successfully, the
                * 			domain registrant will be notified by email.</p>
                */
            disableDomainTransferLock(args: DisableDomainTransferLockCommandInput, options?: __HttpHandlerOptions): Promise<DisableDomainTransferLockCommandOutput>;
            disableDomainTransferLock(args: DisableDomainTransferLockCommandInput, cb: (err: any, data?: DisableDomainTransferLockCommandOutput) => void): void;
            disableDomainTransferLock(args: DisableDomainTransferLockCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisableDomainTransferLockCommandOutput) => void): void;
            /**
                * <p>This operation configures Amazon Route 53 to automatically renew the specified domain before the domain registration expires.
                * 			The cost of renewing your domain registration is billed to your Amazon Web Services account.</p>
                * 		       <p>The period during which you can renew a domain name varies by TLD. For a list of TLDs and their renewal policies, see
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains That You Can Register with Amazon Route 53</a>
                * 			in the <i>Amazon Route 53 Developer Guide</i>. Route 53 requires that you renew before the end of the renewal period
                * 			so we can complete processing before the deadline.</p>
                */
            enableDomainAutoRenew(args: EnableDomainAutoRenewCommandInput, options?: __HttpHandlerOptions): Promise<EnableDomainAutoRenewCommandOutput>;
            enableDomainAutoRenew(args: EnableDomainAutoRenewCommandInput, cb: (err: any, data?: EnableDomainAutoRenewCommandOutput) => void): void;
            enableDomainAutoRenew(args: EnableDomainAutoRenewCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: EnableDomainAutoRenewCommandOutput) => void): void;
            /**
                * <p>This operation sets the transfer lock on the domain (specifically the <code>clientTransferProhibited</code> status)
                * 			to prevent domain transfers. Successful submission returns an operation ID that you can use to track the progress and
                * 			completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.</p>
                */
            enableDomainTransferLock(args: EnableDomainTransferLockCommandInput, options?: __HttpHandlerOptions): Promise<EnableDomainTransferLockCommandOutput>;
            enableDomainTransferLock(args: EnableDomainTransferLockCommandInput, cb: (err: any, data?: EnableDomainTransferLockCommandOutput) => void): void;
            enableDomainTransferLock(args: EnableDomainTransferLockCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: EnableDomainTransferLockCommandOutput) => void): void;
            /**
                * <p>For operations that require confirmation that the email address for the registrant contact is valid,
                * 			such as registering a new domain, this operation returns information about whether the registrant contact has responded.</p>
                * 		       <p>If you want us to resend the email, use the <code>ResendContactReachabilityEmail</code> operation.</p>
                */
            getContactReachabilityStatus(args: GetContactReachabilityStatusCommandInput, options?: __HttpHandlerOptions): Promise<GetContactReachabilityStatusCommandOutput>;
            getContactReachabilityStatus(args: GetContactReachabilityStatusCommandInput, cb: (err: any, data?: GetContactReachabilityStatusCommandOutput) => void): void;
            getContactReachabilityStatus(args: GetContactReachabilityStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetContactReachabilityStatusCommandOutput) => void): void;
            /**
                * <p>This operation returns detailed information about a specified domain that is associated with the current Amazon Web Services account.
                * 			Contact information for the domain is also returned as part of the output.</p>
                */
            getDomainDetail(args: GetDomainDetailCommandInput, options?: __HttpHandlerOptions): Promise<GetDomainDetailCommandOutput>;
            getDomainDetail(args: GetDomainDetailCommandInput, cb: (err: any, data?: GetDomainDetailCommandOutput) => void): void;
            getDomainDetail(args: GetDomainDetailCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDomainDetailCommandOutput) => void): void;
            /**
                * <p>The GetDomainSuggestions operation returns a list of suggested domain names.</p>
                */
            getDomainSuggestions(args: GetDomainSuggestionsCommandInput, options?: __HttpHandlerOptions): Promise<GetDomainSuggestionsCommandOutput>;
            getDomainSuggestions(args: GetDomainSuggestionsCommandInput, cb: (err: any, data?: GetDomainSuggestionsCommandOutput) => void): void;
            getDomainSuggestions(args: GetDomainSuggestionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDomainSuggestionsCommandOutput) => void): void;
            /**
                * <p>This operation returns the current status of an operation that is not completed.</p>
                */
            getOperationDetail(args: GetOperationDetailCommandInput, options?: __HttpHandlerOptions): Promise<GetOperationDetailCommandOutput>;
            getOperationDetail(args: GetOperationDetailCommandInput, cb: (err: any, data?: GetOperationDetailCommandOutput) => void): void;
            getOperationDetail(args: GetOperationDetailCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetOperationDetailCommandOutput) => void): void;
            /**
                * <p>This operation returns all the domain names registered with Amazon Route 53 for the current Amazon Web Services account
                * 			 if no filtering conditions are used.</p>
                */
            listDomains(args: ListDomainsCommandInput, options?: __HttpHandlerOptions): Promise<ListDomainsCommandOutput>;
            listDomains(args: ListDomainsCommandInput, cb: (err: any, data?: ListDomainsCommandOutput) => void): void;
            listDomains(args: ListDomainsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDomainsCommandOutput) => void): void;
            /**
                * <p>Returns information about all of the operations that return an operation ID and that have ever been
                * 			performed on domains that were registered by the current account. </p>
                * 		       <p>This command runs only in the us-east-1 Region.</p>
                */
            listOperations(args: ListOperationsCommandInput, options?: __HttpHandlerOptions): Promise<ListOperationsCommandOutput>;
            listOperations(args: ListOperationsCommandInput, cb: (err: any, data?: ListOperationsCommandOutput) => void): void;
            listOperations(args: ListOperationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListOperationsCommandOutput) => void): void;
            /**
                * <p>Lists the following prices for either all the TLDs supported by Route 53, or the specified TLD:</p>
                * 		       <ul>
                *             <li>
                *                <p>Registration</p>
                *             </li>
                *             <li>
                *                <p>Transfer</p>
                *             </li>
                *             <li>
                *                <p>Owner change</p>
                *             </li>
                *             <li>
                *                <p>Domain renewal</p>
                *             </li>
                *             <li>
                *                <p>Domain restoration</p>
                *             </li>
                *          </ul>
                */
            listPrices(args: ListPricesCommandInput, options?: __HttpHandlerOptions): Promise<ListPricesCommandOutput>;
            listPrices(args: ListPricesCommandInput, cb: (err: any, data?: ListPricesCommandOutput) => void): void;
            listPrices(args: ListPricesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPricesCommandOutput) => void): void;
            /**
                * <p>This operation returns all of the tags that are associated with the specified domain.</p>
                * 		       <p>All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.</p>
                */
            listTagsForDomain(args: ListTagsForDomainCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForDomainCommandOutput>;
            listTagsForDomain(args: ListTagsForDomainCommandInput, cb: (err: any, data?: ListTagsForDomainCommandOutput) => void): void;
            listTagsForDomain(args: ListTagsForDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForDomainCommandOutput) => void): void;
            /**
                * <p>This operation registers a domain. Domains are registered either by Amazon Registrar (for .com, .net, and .org domains) or by
                * 			our registrar associate, Gandi (for all other domains). For some top-level domains (TLDs), this operation requires extra parameters.</p>
                * 		       <p>When you register a domain, Amazon Route 53 does the following:</p>
                * 			      <ul>
                *             <li>
                *                <p>Creates a Route 53 hosted zone that has the same name as the domain. Route 53 assigns four name servers
                * 					to your hosted zone and automatically updates your domain registration with the names of these name servers.</p>
                *             </li>
                *             <li>
                *                <p>Enables autorenew, so your domain registration will renew automatically each year. We'll notify you
                * 					in advance of the renewal date so you can choose whether to renew the registration.</p>
                *             </li>
                *             <li>
                *                <p>Optionally enables privacy protection, so WHOIS queries return contact information either for Amazon Registrar
                * 					(for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you don't enable privacy
                * 					protection, WHOIS queries return the information that you entered for the administrative, registrant, and technical contacts.</p>
                * 					          <note>
                * 						            <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
                * 					          </note>
                * 				        </li>
                *             <li>
                *                <p>If registration is successful, returns an operation ID that you can use to track the progress and
                * 					completion of the action. If the request is not completed successfully, the domain registrant is notified by email.</p>
                *             </li>
                *             <li>
                *                <p>Charges your Amazon Web Services account an amount based on the top-level domain. For more information, see
                * 					<a href="http://aws.amazon.com/route53/pricing/">Amazon Route 53 Pricing</a>.</p>
                *             </li>
                *          </ul>
                */
            registerDomain(args: RegisterDomainCommandInput, options?: __HttpHandlerOptions): Promise<RegisterDomainCommandOutput>;
            registerDomain(args: RegisterDomainCommandInput, cb: (err: any, data?: RegisterDomainCommandOutput) => void): void;
            registerDomain(args: RegisterDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterDomainCommandOutput) => void): void;
            /**
                * <p>Rejects the transfer of a domain from another Amazon Web Services account to the current Amazon Web Services account. You initiate a transfer betweenAmazon Web Services accounts using
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>.
                * 		</p>
                *
                * 		       <p>Use either
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations</a> or
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
                * 			to determine whether the operation succeeded.
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
                * 			provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>.
                * 		</p>
                */
            rejectDomainTransferFromAnotherAwsAccount(args: RejectDomainTransferFromAnotherAwsAccountCommandInput, options?: __HttpHandlerOptions): Promise<RejectDomainTransferFromAnotherAwsAccountCommandOutput>;
            rejectDomainTransferFromAnotherAwsAccount(args: RejectDomainTransferFromAnotherAwsAccountCommandInput, cb: (err: any, data?: RejectDomainTransferFromAnotherAwsAccountCommandOutput) => void): void;
            rejectDomainTransferFromAnotherAwsAccount(args: RejectDomainTransferFromAnotherAwsAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RejectDomainTransferFromAnotherAwsAccountCommandOutput) => void): void;
            /**
                * <p>This operation renews a domain for the specified number of years. The cost of renewing your domain is billed to your Amazon Web Services account.</p>
                * 		       <p>We recommend that you renew your domain several weeks before the expiration date. Some TLD registries delete domains before the
                * 			expiration date if you haven't renewed far enough in advance. For more information about renewing domain registration, see
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-renew.html">Renewing Registration for a Domain</a>
                * 			in the <i>Amazon Route 53 Developer Guide</i>.</p>
                */
            renewDomain(args: RenewDomainCommandInput, options?: __HttpHandlerOptions): Promise<RenewDomainCommandOutput>;
            renewDomain(args: RenewDomainCommandInput, cb: (err: any, data?: RenewDomainCommandOutput) => void): void;
            renewDomain(args: RenewDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RenewDomainCommandOutput) => void): void;
            /**
                * <p>For operations that require confirmation that the email address for the registrant contact is valid,
                * 			such as registering a new domain, this operation resends the confirmation email to the current email address for the registrant contact.</p>
                */
            resendContactReachabilityEmail(args: ResendContactReachabilityEmailCommandInput, options?: __HttpHandlerOptions): Promise<ResendContactReachabilityEmailCommandOutput>;
            resendContactReachabilityEmail(args: ResendContactReachabilityEmailCommandInput, cb: (err: any, data?: ResendContactReachabilityEmailCommandOutput) => void): void;
            resendContactReachabilityEmail(args: ResendContactReachabilityEmailCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ResendContactReachabilityEmailCommandOutput) => void): void;
            /**
                * <p>This operation returns the AuthCode for the domain. To transfer a domain to another registrar, you provide this value to the new registrar.</p>
                */
            retrieveDomainAuthCode(args: RetrieveDomainAuthCodeCommandInput, options?: __HttpHandlerOptions): Promise<RetrieveDomainAuthCodeCommandOutput>;
            retrieveDomainAuthCode(args: RetrieveDomainAuthCodeCommandInput, cb: (err: any, data?: RetrieveDomainAuthCodeCommandOutput) => void): void;
            retrieveDomainAuthCode(args: RetrieveDomainAuthCodeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RetrieveDomainAuthCodeCommandOutput) => void): void;
            /**
                * <p>Transfers a domain from another registrar to Amazon Route 53. When the transfer is complete, the domain is registered either with
                * 			Amazon Registrar (for .com, .net, and .org domains) or with our registrar associate, Gandi (for all other TLDs).</p>
                * 		       <p>For more information about transferring domains, see the following topics:</p>
                * 		       <ul>
                *             <li>
                *                <p>For transfer requirements, a detailed procedure, and information about viewing the status of a domain that you're transferring
                * 				to Route 53, see
                * 				<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-to-route-53.html">Transferring Registration for a
                * 				Domain to Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
                *             </li>
                *             <li>
                *                <p>For information about how to transfer a domain from one Amazon Web Services account to another, see
                * 				<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>.
                * 				</p>
                * 			         </li>
                *             <li>
                *                <p>For information about how to transfer a domain to another domain registrar, see
                * 				<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-from-route-53.html">Transferring a Domain from
                * 				Amazon Route 53 to Another Registrar</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
                *             </li>
                *          </ul>
                * 		       <p>If the registrar for your domain is also the DNS service provider for the domain, we highly recommend that you
                * 			transfer your DNS service to Route 53 or to another DNS service provider before you transfer your registration. Some registrars
                * 			provide free DNS service when you purchase a domain registration. When you transfer the registration, the previous registrar
                * 			will not renew your domain registration and could end your DNS service at any time.</p>
                *
                * 			      <important>
                * 				        <p>If the registrar for your domain is also the DNS service provider for the domain and you don't
                * 					transfer DNS service to another provider, your website, email, and the web applications associated with the domain
                * 					might become unavailable.</p>
                * 			      </important>
                *
                * 		       <p>If the transfer is successful, this method returns an operation ID that you can use to track the progress and
                * 			completion of the action. If the transfer doesn't complete successfully, the domain registrant will be notified by email.</p>
                */
            transferDomain(args: TransferDomainCommandInput, options?: __HttpHandlerOptions): Promise<TransferDomainCommandOutput>;
            transferDomain(args: TransferDomainCommandInput, cb: (err: any, data?: TransferDomainCommandOutput) => void): void;
            transferDomain(args: TransferDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TransferDomainCommandOutput) => void): void;
            /**
                * <p>Transfers a domain from the current Amazon Web Services account to another Amazon Web Services account. Note the following:</p>
                * 		       <ul>
                *             <li>
                *                <p>The Amazon Web Services account that you're transferring the domain to must accept the transfer. If the other account
                * 				doesn't accept the transfer within 3 days, we cancel the transfer. See
                * 				<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AcceptDomainTransferFromAnotherAwsAccount.html">AcceptDomainTransferFromAnotherAwsAccount</a>.
                * 				</p>
                * 			         </li>
                *             <li>
                *                <p>You can cancel the transfer before the other account accepts it. See
                * 				<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_CancelDomainTransferToAnotherAwsAccount.html">CancelDomainTransferToAnotherAwsAccount</a>.
                * 				</p>
                * 			         </li>
                *             <li>
                *                <p>The other account can reject the transfer. See
                * 					<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_RejectDomainTransferFromAnotherAwsAccount.html">RejectDomainTransferFromAnotherAwsAccount</a>.
                * 				</p>
                * 			         </li>
                *          </ul>
                *
                * 		       <important>
                * 			         <p>When you transfer a domain from one Amazon Web Services account to another, Route 53 doesn't transfer the hosted zone that is associated
                * 				with the domain. DNS resolution isn't affected if the domain and the hosted zone are owned by separate accounts,
                * 				so transferring the hosted zone is optional. For information about transferring the hosted zone to another Amazon Web Services account, see
                * 				<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zones-migrating.html">Migrating a Hosted Zone to a
                * 					Different Amazon Web Services Account</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
                * 		       </important>
                *
                * 		       <p>Use either
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations</a> or
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
                * 			to determine whether the operation succeeded.
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
                * 			provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>.
                * 		</p>
                */
            transferDomainToAnotherAwsAccount(args: TransferDomainToAnotherAwsAccountCommandInput, options?: __HttpHandlerOptions): Promise<TransferDomainToAnotherAwsAccountCommandOutput>;
            transferDomainToAnotherAwsAccount(args: TransferDomainToAnotherAwsAccountCommandInput, cb: (err: any, data?: TransferDomainToAnotherAwsAccountCommandOutput) => void): void;
            transferDomainToAnotherAwsAccount(args: TransferDomainToAnotherAwsAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TransferDomainToAnotherAwsAccountCommandOutput) => void): void;
            /**
                * <p>This operation updates the contact information for a particular domain. You must specify information for at least one contact:
                * 			registrant, administrator, or technical.</p>
                * 		       <p>If the update is successful, this method returns an operation ID that you can use to track the progress and completion of the action.
                * 			If the request is not completed successfully, the domain registrant will be notified by email.</p>
                */
            updateDomainContact(args: UpdateDomainContactCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDomainContactCommandOutput>;
            updateDomainContact(args: UpdateDomainContactCommandInput, cb: (err: any, data?: UpdateDomainContactCommandOutput) => void): void;
            updateDomainContact(args: UpdateDomainContactCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDomainContactCommandOutput) => void): void;
            /**
                * <p>This operation updates the specified domain contact's privacy setting. When privacy protection is enabled,
                * 			contact information such as email address is replaced either with contact information for Amazon Registrar (for .com, .net, and .org
                * 			domains) or with contact information for our registrar associate, Gandi.</p>
                * 		       <note>
                * 			         <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
                * 		       </note>
                * 		       <p>This operation affects only the contact information for the specified contact type (administrative, registrant, or technical).
                * 			If the request succeeds, Amazon Route 53 returns an operation ID that you can use with
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
                * 			to track the progress and completion of the action. If the request doesn't complete successfully, the domain registrant will be notified by email.</p>
                * 		       <important>
                *             <p>By disabling the privacy service via API, you consent to the publication of the contact information provided for this domain
                * 			via the public WHOIS database. You certify that you are the registrant of this domain name and have the authority to make this decision.
                * 			You may withdraw your consent at any time by enabling privacy protection using either <code>UpdateDomainContactPrivacy</code> or the
                * 			Route 53 console. Enabling privacy protection removes the contact information provided for this domain from the WHOIS database.
                * 			For more information on our privacy practices, see
                * 			<a href="https://aws.amazon.com/privacy/">https://aws.amazon.com/privacy/</a>.</p>
                *          </important>
                */
            updateDomainContactPrivacy(args: UpdateDomainContactPrivacyCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDomainContactPrivacyCommandOutput>;
            updateDomainContactPrivacy(args: UpdateDomainContactPrivacyCommandInput, cb: (err: any, data?: UpdateDomainContactPrivacyCommandOutput) => void): void;
            updateDomainContactPrivacy(args: UpdateDomainContactPrivacyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDomainContactPrivacyCommandOutput) => void): void;
            /**
                * <p>This operation replaces the current set of name servers for the domain with the specified set of name servers.
                * 			If you use Amazon Route 53 as your DNS service, specify the four name servers in the delegation set for the hosted zone for the domain.</p>
                * 		       <p>If successful, this operation returns an operation ID that you can use to track the progress and completion of the action.
                * 			If the request is not completed successfully, the domain registrant will be notified by email.</p>
                */
            updateDomainNameservers(args: UpdateDomainNameserversCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDomainNameserversCommandOutput>;
            updateDomainNameservers(args: UpdateDomainNameserversCommandInput, cb: (err: any, data?: UpdateDomainNameserversCommandOutput) => void): void;
            updateDomainNameservers(args: UpdateDomainNameserversCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDomainNameserversCommandOutput) => void): void;
            /**
                * <p>This operation adds or updates tags for a specified domain.</p>
                * 		       <p>All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.</p>
                */
            updateTagsForDomain(args: UpdateTagsForDomainCommandInput, options?: __HttpHandlerOptions): Promise<UpdateTagsForDomainCommandOutput>;
            updateTagsForDomain(args: UpdateTagsForDomainCommandInput, cb: (err: any, data?: UpdateTagsForDomainCommandOutput) => void): void;
            updateTagsForDomain(args: UpdateTagsForDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateTagsForDomainCommandOutput) => void): void;
            /**
                * <p>Returns all the domain-related billing records for the current Amazon Web Services account for a specified period</p>
                */
            viewBilling(args: ViewBillingCommandInput, options?: __HttpHandlerOptions): Promise<ViewBillingCommandOutput>;
            viewBilling(args: ViewBillingCommandInput, cb: (err: any, data?: ViewBillingCommandOutput) => void): void;
            viewBilling(args: ViewBillingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ViewBillingCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/AcceptDomainTransferFromAnotherAwsAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AcceptDomainTransferFromAnotherAwsAccountRequest, AcceptDomainTransferFromAnotherAwsAccountResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface AcceptDomainTransferFromAnotherAwsAccountCommandInput extends AcceptDomainTransferFromAnotherAwsAccountRequest {
    }
    export interface AcceptDomainTransferFromAnotherAwsAccountCommandOutput extends AcceptDomainTransferFromAnotherAwsAccountResponse, __MetadataBearer {
    }
    /**
        * <p>Accepts the transfer of a domain from another Amazon Web Services account to the
        * 				currentAmazon Web Services account. You initiate a transfer between Amazon Web Services accounts using <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>.</p>
        * 		       <p>If you use the CLI command at <a href="https://docs.aws.amazon.com/cli/latest/reference/route53domains/accept-domain-transfer-from-another-aws-account.html">accept-domain-transfer-from-another-aws-account</a>, use JSON format as input
        * 			instead of text because otherwise CLI will throw an error  from domain
        * 			transfer input that includes single quotes.</p>
        *
        * 		       <p>Use either
        * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations</a> or
        * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
        * 			to determine whether the operation succeeded.
        * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
        * 			provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>.
        * 		</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, AcceptDomainTransferFromAnotherAwsAccountCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, AcceptDomainTransferFromAnotherAwsAccountCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new AcceptDomainTransferFromAnotherAwsAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AcceptDomainTransferFromAnotherAwsAccountCommandInput} for command's `input` shape.
        * @see {@link AcceptDomainTransferFromAnotherAwsAccountCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class AcceptDomainTransferFromAnotherAwsAccountCommand extends $Command<AcceptDomainTransferFromAnotherAwsAccountCommandInput, AcceptDomainTransferFromAnotherAwsAccountCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: AcceptDomainTransferFromAnotherAwsAccountCommandInput;
            constructor(input: AcceptDomainTransferFromAnotherAwsAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AcceptDomainTransferFromAnotherAwsAccountCommandInput, AcceptDomainTransferFromAnotherAwsAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/CancelDomainTransferToAnotherAwsAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CancelDomainTransferToAnotherAwsAccountRequest, CancelDomainTransferToAnotherAwsAccountResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface CancelDomainTransferToAnotherAwsAccountCommandInput extends CancelDomainTransferToAnotherAwsAccountRequest {
    }
    export interface CancelDomainTransferToAnotherAwsAccountCommandOutput extends CancelDomainTransferToAnotherAwsAccountResponse, __MetadataBearer {
    }
    /**
        * <p>Cancels the transfer of a domain from the current Amazon Web Services account to another Amazon Web Services account. You initiate a transfer betweenAmazon Web Services accounts using
        * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>.
        * 		</p>
        *
        * 		       <important>
        * 			         <p>You must cancel the transfer before the other Amazon Web Services account accepts the transfer using
        * 				<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AcceptDomainTransferFromAnotherAwsAccount.html">AcceptDomainTransferFromAnotherAwsAccount</a>.</p>
        * 		       </important>
        *
        * 		       <p>Use either
        * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations</a> or
        * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
        * 			to determine whether the operation succeeded.
        * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
        * 			provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>.
        * 		</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, CancelDomainTransferToAnotherAwsAccountCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, CancelDomainTransferToAnotherAwsAccountCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new CancelDomainTransferToAnotherAwsAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelDomainTransferToAnotherAwsAccountCommandInput} for command's `input` shape.
        * @see {@link CancelDomainTransferToAnotherAwsAccountCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class CancelDomainTransferToAnotherAwsAccountCommand extends $Command<CancelDomainTransferToAnotherAwsAccountCommandInput, CancelDomainTransferToAnotherAwsAccountCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: CancelDomainTransferToAnotherAwsAccountCommandInput;
            constructor(input: CancelDomainTransferToAnotherAwsAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelDomainTransferToAnotherAwsAccountCommandInput, CancelDomainTransferToAnotherAwsAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/CheckDomainAvailabilityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CheckDomainAvailabilityRequest, CheckDomainAvailabilityResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface CheckDomainAvailabilityCommandInput extends CheckDomainAvailabilityRequest {
    }
    export interface CheckDomainAvailabilityCommandOutput extends CheckDomainAvailabilityResponse, __MetadataBearer {
    }
    /**
        * <p>This operation checks the availability of one domain name. Note that if the availability status of a domain is pending, you must
        * 			submit another request to determine the availability of the domain name.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, CheckDomainAvailabilityCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, CheckDomainAvailabilityCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new CheckDomainAvailabilityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CheckDomainAvailabilityCommandInput} for command's `input` shape.
        * @see {@link CheckDomainAvailabilityCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class CheckDomainAvailabilityCommand extends $Command<CheckDomainAvailabilityCommandInput, CheckDomainAvailabilityCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: CheckDomainAvailabilityCommandInput;
            constructor(input: CheckDomainAvailabilityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CheckDomainAvailabilityCommandInput, CheckDomainAvailabilityCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/CheckDomainTransferabilityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CheckDomainTransferabilityRequest, CheckDomainTransferabilityResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface CheckDomainTransferabilityCommandInput extends CheckDomainTransferabilityRequest {
    }
    export interface CheckDomainTransferabilityCommandOutput extends CheckDomainTransferabilityResponse, __MetadataBearer {
    }
    /**
        * <p>Checks whether a domain name can be transferred to Amazon Route 53. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, CheckDomainTransferabilityCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, CheckDomainTransferabilityCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new CheckDomainTransferabilityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CheckDomainTransferabilityCommandInput} for command's `input` shape.
        * @see {@link CheckDomainTransferabilityCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class CheckDomainTransferabilityCommand extends $Command<CheckDomainTransferabilityCommandInput, CheckDomainTransferabilityCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: CheckDomainTransferabilityCommandInput;
            constructor(input: CheckDomainTransferabilityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CheckDomainTransferabilityCommandInput, CheckDomainTransferabilityCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/DeleteDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDomainRequest, DeleteDomainResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface DeleteDomainCommandInput extends DeleteDomainRequest {
    }
    export interface DeleteDomainCommandOutput extends DeleteDomainResponse, __MetadataBearer {
    }
    /**
        * <p>This operation deletes the specified domain. This action is permanent. For more information,
        * 			see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-delete.html">Deleting a domain name registration</a>.</p>
        * 		       <p>To transfer the domain registration to another registrar, use the transfer process that’s
        * 			provided by the registrar to which you want to transfer the registration.  Otherwise,
        * 			the following apply:</p>
        * 		       <ol>
        *             <li>
        *                <p>You can’t get a refund for the cost of a deleted domain registration.</p>
        *             </li>
        *             <li>
        *                <p>The registry for the top-level domain might hold the domain name for a brief time before releasing it for other users to register (varies by registry). </p>
        *             </li>
        *             <li>
        *                <p>When the registration has been deleted, we'll send you a confirmation to the registrant
        * 				contact. The email will come from
        * 				<code>noreply@domainnameverification.net</code> or
        * 				<code>noreply@registrar.amazon.com</code>.</p>
        *             </li>
        *          </ol>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, DeleteDomainCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, DeleteDomainCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new DeleteDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDomainCommandInput} for command's `input` shape.
        * @see {@link DeleteDomainCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class DeleteDomainCommand extends $Command<DeleteDomainCommandInput, DeleteDomainCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: DeleteDomainCommandInput;
            constructor(input: DeleteDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDomainCommandInput, DeleteDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/DeleteTagsForDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteTagsForDomainRequest, DeleteTagsForDomainResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface DeleteTagsForDomainCommandInput extends DeleteTagsForDomainRequest {
    }
    export interface DeleteTagsForDomainCommandOutput extends DeleteTagsForDomainResponse, __MetadataBearer {
    }
    /**
        * <p>This operation deletes the specified tags for a domain.</p>
        * 		       <p>All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, DeleteTagsForDomainCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, DeleteTagsForDomainCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new DeleteTagsForDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteTagsForDomainCommandInput} for command's `input` shape.
        * @see {@link DeleteTagsForDomainCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class DeleteTagsForDomainCommand extends $Command<DeleteTagsForDomainCommandInput, DeleteTagsForDomainCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: DeleteTagsForDomainCommandInput;
            constructor(input: DeleteTagsForDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteTagsForDomainCommandInput, DeleteTagsForDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/DisableDomainAutoRenewCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisableDomainAutoRenewRequest, DisableDomainAutoRenewResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface DisableDomainAutoRenewCommandInput extends DisableDomainAutoRenewRequest {
    }
    export interface DisableDomainAutoRenewCommandOutput extends DisableDomainAutoRenewResponse, __MetadataBearer {
    }
    /**
        * <p>This operation disables automatic renewal of domain registration for the specified domain.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, DisableDomainAutoRenewCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, DisableDomainAutoRenewCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new DisableDomainAutoRenewCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisableDomainAutoRenewCommandInput} for command's `input` shape.
        * @see {@link DisableDomainAutoRenewCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class DisableDomainAutoRenewCommand extends $Command<DisableDomainAutoRenewCommandInput, DisableDomainAutoRenewCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: DisableDomainAutoRenewCommandInput;
            constructor(input: DisableDomainAutoRenewCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisableDomainAutoRenewCommandInput, DisableDomainAutoRenewCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/DisableDomainTransferLockCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisableDomainTransferLockRequest, DisableDomainTransferLockResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface DisableDomainTransferLockCommandInput extends DisableDomainTransferLockRequest {
    }
    export interface DisableDomainTransferLockCommandOutput extends DisableDomainTransferLockResponse, __MetadataBearer {
    }
    /**
        * <p>This operation removes the transfer lock on the domain (specifically the
        * 			<code>clientTransferProhibited</code> status) to allow domain transfers. We recommend
        * 			you refrain from performing this action unless you intend to transfer the domain to a
        * 			different registrar. Successful submission returns an operation ID that you can use to track
        * 			the progress and completion of the action. If the request is not completed successfully, the
        * 			domain registrant will be notified by email.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, DisableDomainTransferLockCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, DisableDomainTransferLockCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new DisableDomainTransferLockCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisableDomainTransferLockCommandInput} for command's `input` shape.
        * @see {@link DisableDomainTransferLockCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class DisableDomainTransferLockCommand extends $Command<DisableDomainTransferLockCommandInput, DisableDomainTransferLockCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: DisableDomainTransferLockCommandInput;
            constructor(input: DisableDomainTransferLockCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisableDomainTransferLockCommandInput, DisableDomainTransferLockCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/EnableDomainAutoRenewCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EnableDomainAutoRenewRequest, EnableDomainAutoRenewResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface EnableDomainAutoRenewCommandInput extends EnableDomainAutoRenewRequest {
    }
    export interface EnableDomainAutoRenewCommandOutput extends EnableDomainAutoRenewResponse, __MetadataBearer {
    }
    /**
        * <p>This operation configures Amazon Route 53 to automatically renew the specified domain before the domain registration expires.
        * 			The cost of renewing your domain registration is billed to your Amazon Web Services account.</p>
        * 		       <p>The period during which you can renew a domain name varies by TLD. For a list of TLDs and their renewal policies, see
        * 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains That You Can Register with Amazon Route 53</a>
        * 			in the <i>Amazon Route 53 Developer Guide</i>. Route 53 requires that you renew before the end of the renewal period
        * 			so we can complete processing before the deadline.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, EnableDomainAutoRenewCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, EnableDomainAutoRenewCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new EnableDomainAutoRenewCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link EnableDomainAutoRenewCommandInput} for command's `input` shape.
        * @see {@link EnableDomainAutoRenewCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class EnableDomainAutoRenewCommand extends $Command<EnableDomainAutoRenewCommandInput, EnableDomainAutoRenewCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: EnableDomainAutoRenewCommandInput;
            constructor(input: EnableDomainAutoRenewCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<EnableDomainAutoRenewCommandInput, EnableDomainAutoRenewCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/EnableDomainTransferLockCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EnableDomainTransferLockRequest, EnableDomainTransferLockResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface EnableDomainTransferLockCommandInput extends EnableDomainTransferLockRequest {
    }
    export interface EnableDomainTransferLockCommandOutput extends EnableDomainTransferLockResponse, __MetadataBearer {
    }
    /**
        * <p>This operation sets the transfer lock on the domain (specifically the <code>clientTransferProhibited</code> status)
        * 			to prevent domain transfers. Successful submission returns an operation ID that you can use to track the progress and
        * 			completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, EnableDomainTransferLockCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, EnableDomainTransferLockCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new EnableDomainTransferLockCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link EnableDomainTransferLockCommandInput} for command's `input` shape.
        * @see {@link EnableDomainTransferLockCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class EnableDomainTransferLockCommand extends $Command<EnableDomainTransferLockCommandInput, EnableDomainTransferLockCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: EnableDomainTransferLockCommandInput;
            constructor(input: EnableDomainTransferLockCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<EnableDomainTransferLockCommandInput, EnableDomainTransferLockCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/GetContactReachabilityStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetContactReachabilityStatusRequest, GetContactReachabilityStatusResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface GetContactReachabilityStatusCommandInput extends GetContactReachabilityStatusRequest {
    }
    export interface GetContactReachabilityStatusCommandOutput extends GetContactReachabilityStatusResponse, __MetadataBearer {
    }
    /**
        * <p>For operations that require confirmation that the email address for the registrant contact is valid,
        * 			such as registering a new domain, this operation returns information about whether the registrant contact has responded.</p>
        * 		       <p>If you want us to resend the email, use the <code>ResendContactReachabilityEmail</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, GetContactReachabilityStatusCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, GetContactReachabilityStatusCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new GetContactReachabilityStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetContactReachabilityStatusCommandInput} for command's `input` shape.
        * @see {@link GetContactReachabilityStatusCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class GetContactReachabilityStatusCommand extends $Command<GetContactReachabilityStatusCommandInput, GetContactReachabilityStatusCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: GetContactReachabilityStatusCommandInput;
            constructor(input: GetContactReachabilityStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetContactReachabilityStatusCommandInput, GetContactReachabilityStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/GetDomainDetailCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetDomainDetailRequest, GetDomainDetailResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface GetDomainDetailCommandInput extends GetDomainDetailRequest {
    }
    export interface GetDomainDetailCommandOutput extends GetDomainDetailResponse, __MetadataBearer {
    }
    /**
        * <p>This operation returns detailed information about a specified domain that is associated with the current Amazon Web Services account.
        * 			Contact information for the domain is also returned as part of the output.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, GetDomainDetailCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, GetDomainDetailCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new GetDomainDetailCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDomainDetailCommandInput} for command's `input` shape.
        * @see {@link GetDomainDetailCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class GetDomainDetailCommand extends $Command<GetDomainDetailCommandInput, GetDomainDetailCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: GetDomainDetailCommandInput;
            constructor(input: GetDomainDetailCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDomainDetailCommandInput, GetDomainDetailCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/GetDomainSuggestionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetDomainSuggestionsRequest, GetDomainSuggestionsResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface GetDomainSuggestionsCommandInput extends GetDomainSuggestionsRequest {
    }
    export interface GetDomainSuggestionsCommandOutput extends GetDomainSuggestionsResponse, __MetadataBearer {
    }
    /**
        * <p>The GetDomainSuggestions operation returns a list of suggested domain names.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, GetDomainSuggestionsCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, GetDomainSuggestionsCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new GetDomainSuggestionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDomainSuggestionsCommandInput} for command's `input` shape.
        * @see {@link GetDomainSuggestionsCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class GetDomainSuggestionsCommand extends $Command<GetDomainSuggestionsCommandInput, GetDomainSuggestionsCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: GetDomainSuggestionsCommandInput;
            constructor(input: GetDomainSuggestionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDomainSuggestionsCommandInput, GetDomainSuggestionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/GetOperationDetailCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetOperationDetailRequest, GetOperationDetailResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface GetOperationDetailCommandInput extends GetOperationDetailRequest {
    }
    export interface GetOperationDetailCommandOutput extends GetOperationDetailResponse, __MetadataBearer {
    }
    /**
        * <p>This operation returns the current status of an operation that is not completed.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, GetOperationDetailCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, GetOperationDetailCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new GetOperationDetailCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetOperationDetailCommandInput} for command's `input` shape.
        * @see {@link GetOperationDetailCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class GetOperationDetailCommand extends $Command<GetOperationDetailCommandInput, GetOperationDetailCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: GetOperationDetailCommandInput;
            constructor(input: GetOperationDetailCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetOperationDetailCommandInput, GetOperationDetailCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/ListDomainsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListDomainsRequest, ListDomainsResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface ListDomainsCommandInput extends ListDomainsRequest {
    }
    export interface ListDomainsCommandOutput extends ListDomainsResponse, __MetadataBearer {
    }
    /**
        * <p>This operation returns all the domain names registered with Amazon Route 53 for the current Amazon Web Services account
        * 			 if no filtering conditions are used.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, ListDomainsCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, ListDomainsCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new ListDomainsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDomainsCommandInput} for command's `input` shape.
        * @see {@link ListDomainsCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class ListDomainsCommand extends $Command<ListDomainsCommandInput, ListDomainsCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: ListDomainsCommandInput;
            constructor(input: ListDomainsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDomainsCommandInput, ListDomainsCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/ListOperationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListOperationsRequest, ListOperationsResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface ListOperationsCommandInput extends ListOperationsRequest {
    }
    export interface ListOperationsCommandOutput extends ListOperationsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about all of the operations that return an operation ID and that have ever been
        * 			performed on domains that were registered by the current account. </p>
        * 		       <p>This command runs only in the us-east-1 Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, ListOperationsCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, ListOperationsCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new ListOperationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListOperationsCommandInput} for command's `input` shape.
        * @see {@link ListOperationsCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class ListOperationsCommand extends $Command<ListOperationsCommandInput, ListOperationsCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: ListOperationsCommandInput;
            constructor(input: ListOperationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListOperationsCommandInput, ListOperationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/ListPricesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListPricesRequest, ListPricesResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface ListPricesCommandInput extends ListPricesRequest {
    }
    export interface ListPricesCommandOutput extends ListPricesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the following prices for either all the TLDs supported by Route 53, or the specified TLD:</p>
        * 		       <ul>
        *             <li>
        *                <p>Registration</p>
        *             </li>
        *             <li>
        *                <p>Transfer</p>
        *             </li>
        *             <li>
        *                <p>Owner change</p>
        *             </li>
        *             <li>
        *                <p>Domain renewal</p>
        *             </li>
        *             <li>
        *                <p>Domain restoration</p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, ListPricesCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, ListPricesCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new ListPricesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPricesCommandInput} for command's `input` shape.
        * @see {@link ListPricesCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class ListPricesCommand extends $Command<ListPricesCommandInput, ListPricesCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: ListPricesCommandInput;
            constructor(input: ListPricesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPricesCommandInput, ListPricesCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/ListTagsForDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForDomainRequest, ListTagsForDomainResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface ListTagsForDomainCommandInput extends ListTagsForDomainRequest {
    }
    export interface ListTagsForDomainCommandOutput extends ListTagsForDomainResponse, __MetadataBearer {
    }
    /**
        * <p>This operation returns all of the tags that are associated with the specified domain.</p>
        * 		       <p>All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, ListTagsForDomainCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, ListTagsForDomainCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new ListTagsForDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForDomainCommandInput} for command's `input` shape.
        * @see {@link ListTagsForDomainCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class ListTagsForDomainCommand extends $Command<ListTagsForDomainCommandInput, ListTagsForDomainCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: ListTagsForDomainCommandInput;
            constructor(input: ListTagsForDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForDomainCommandInput, ListTagsForDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/RegisterDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RegisterDomainRequest, RegisterDomainResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface RegisterDomainCommandInput extends RegisterDomainRequest {
    }
    export interface RegisterDomainCommandOutput extends RegisterDomainResponse, __MetadataBearer {
    }
    /**
        * <p>This operation registers a domain. Domains are registered either by Amazon Registrar (for .com, .net, and .org domains) or by
        * 			our registrar associate, Gandi (for all other domains). For some top-level domains (TLDs), this operation requires extra parameters.</p>
        * 		       <p>When you register a domain, Amazon Route 53 does the following:</p>
        * 			      <ul>
        *             <li>
        *                <p>Creates a Route 53 hosted zone that has the same name as the domain. Route 53 assigns four name servers
        * 					to your hosted zone and automatically updates your domain registration with the names of these name servers.</p>
        *             </li>
        *             <li>
        *                <p>Enables autorenew, so your domain registration will renew automatically each year. We'll notify you
        * 					in advance of the renewal date so you can choose whether to renew the registration.</p>
        *             </li>
        *             <li>
        *                <p>Optionally enables privacy protection, so WHOIS queries return contact information either for Amazon Registrar
        * 					(for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you don't enable privacy
        * 					protection, WHOIS queries return the information that you entered for the administrative, registrant, and technical contacts.</p>
        * 					          <note>
        * 						            <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
        * 					          </note>
        * 				        </li>
        *             <li>
        *                <p>If registration is successful, returns an operation ID that you can use to track the progress and
        * 					completion of the action. If the request is not completed successfully, the domain registrant is notified by email.</p>
        *             </li>
        *             <li>
        *                <p>Charges your Amazon Web Services account an amount based on the top-level domain. For more information, see
        * 					<a href="http://aws.amazon.com/route53/pricing/">Amazon Route 53 Pricing</a>.</p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, RegisterDomainCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, RegisterDomainCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new RegisterDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RegisterDomainCommandInput} for command's `input` shape.
        * @see {@link RegisterDomainCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class RegisterDomainCommand extends $Command<RegisterDomainCommandInput, RegisterDomainCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: RegisterDomainCommandInput;
            constructor(input: RegisterDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterDomainCommandInput, RegisterDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/RejectDomainTransferFromAnotherAwsAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RejectDomainTransferFromAnotherAwsAccountRequest, RejectDomainTransferFromAnotherAwsAccountResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface RejectDomainTransferFromAnotherAwsAccountCommandInput extends RejectDomainTransferFromAnotherAwsAccountRequest {
    }
    export interface RejectDomainTransferFromAnotherAwsAccountCommandOutput extends RejectDomainTransferFromAnotherAwsAccountResponse, __MetadataBearer {
    }
    /**
        * <p>Rejects the transfer of a domain from another Amazon Web Services account to the current Amazon Web Services account. You initiate a transfer betweenAmazon Web Services accounts using
        * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>.
        * 		</p>
        *
        * 		       <p>Use either
        * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations</a> or
        * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
        * 			to determine whether the operation succeeded.
        * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
        * 			provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>.
        * 		</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, RejectDomainTransferFromAnotherAwsAccountCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, RejectDomainTransferFromAnotherAwsAccountCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new RejectDomainTransferFromAnotherAwsAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RejectDomainTransferFromAnotherAwsAccountCommandInput} for command's `input` shape.
        * @see {@link RejectDomainTransferFromAnotherAwsAccountCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class RejectDomainTransferFromAnotherAwsAccountCommand extends $Command<RejectDomainTransferFromAnotherAwsAccountCommandInput, RejectDomainTransferFromAnotherAwsAccountCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: RejectDomainTransferFromAnotherAwsAccountCommandInput;
            constructor(input: RejectDomainTransferFromAnotherAwsAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RejectDomainTransferFromAnotherAwsAccountCommandInput, RejectDomainTransferFromAnotherAwsAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/RenewDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RenewDomainRequest, RenewDomainResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface RenewDomainCommandInput extends RenewDomainRequest {
    }
    export interface RenewDomainCommandOutput extends RenewDomainResponse, __MetadataBearer {
    }
    /**
        * <p>This operation renews a domain for the specified number of years. The cost of renewing your domain is billed to your Amazon Web Services account.</p>
        * 		       <p>We recommend that you renew your domain several weeks before the expiration date. Some TLD registries delete domains before the
        * 			expiration date if you haven't renewed far enough in advance. For more information about renewing domain registration, see
        * 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-renew.html">Renewing Registration for a Domain</a>
        * 			in the <i>Amazon Route 53 Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, RenewDomainCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, RenewDomainCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new RenewDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RenewDomainCommandInput} for command's `input` shape.
        * @see {@link RenewDomainCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class RenewDomainCommand extends $Command<RenewDomainCommandInput, RenewDomainCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: RenewDomainCommandInput;
            constructor(input: RenewDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RenewDomainCommandInput, RenewDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/ResendContactReachabilityEmailCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ResendContactReachabilityEmailRequest, ResendContactReachabilityEmailResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface ResendContactReachabilityEmailCommandInput extends ResendContactReachabilityEmailRequest {
    }
    export interface ResendContactReachabilityEmailCommandOutput extends ResendContactReachabilityEmailResponse, __MetadataBearer {
    }
    /**
        * <p>For operations that require confirmation that the email address for the registrant contact is valid,
        * 			such as registering a new domain, this operation resends the confirmation email to the current email address for the registrant contact.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, ResendContactReachabilityEmailCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, ResendContactReachabilityEmailCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new ResendContactReachabilityEmailCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ResendContactReachabilityEmailCommandInput} for command's `input` shape.
        * @see {@link ResendContactReachabilityEmailCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class ResendContactReachabilityEmailCommand extends $Command<ResendContactReachabilityEmailCommandInput, ResendContactReachabilityEmailCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: ResendContactReachabilityEmailCommandInput;
            constructor(input: ResendContactReachabilityEmailCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ResendContactReachabilityEmailCommandInput, ResendContactReachabilityEmailCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/RetrieveDomainAuthCodeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RetrieveDomainAuthCodeRequest, RetrieveDomainAuthCodeResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface RetrieveDomainAuthCodeCommandInput extends RetrieveDomainAuthCodeRequest {
    }
    export interface RetrieveDomainAuthCodeCommandOutput extends RetrieveDomainAuthCodeResponse, __MetadataBearer {
    }
    /**
        * <p>This operation returns the AuthCode for the domain. To transfer a domain to another registrar, you provide this value to the new registrar.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, RetrieveDomainAuthCodeCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, RetrieveDomainAuthCodeCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new RetrieveDomainAuthCodeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RetrieveDomainAuthCodeCommandInput} for command's `input` shape.
        * @see {@link RetrieveDomainAuthCodeCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class RetrieveDomainAuthCodeCommand extends $Command<RetrieveDomainAuthCodeCommandInput, RetrieveDomainAuthCodeCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: RetrieveDomainAuthCodeCommandInput;
            constructor(input: RetrieveDomainAuthCodeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RetrieveDomainAuthCodeCommandInput, RetrieveDomainAuthCodeCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/TransferDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TransferDomainRequest, TransferDomainResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface TransferDomainCommandInput extends TransferDomainRequest {
    }
    export interface TransferDomainCommandOutput extends TransferDomainResponse, __MetadataBearer {
    }
    /**
        * <p>Transfers a domain from another registrar to Amazon Route 53. When the transfer is complete, the domain is registered either with
        * 			Amazon Registrar (for .com, .net, and .org domains) or with our registrar associate, Gandi (for all other TLDs).</p>
        * 		       <p>For more information about transferring domains, see the following topics:</p>
        * 		       <ul>
        *             <li>
        *                <p>For transfer requirements, a detailed procedure, and information about viewing the status of a domain that you're transferring
        * 				to Route 53, see
        * 				<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-to-route-53.html">Transferring Registration for a
        * 				Domain to Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
        *             </li>
        *             <li>
        *                <p>For information about how to transfer a domain from one Amazon Web Services account to another, see
        * 				<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>.
        * 				</p>
        * 			         </li>
        *             <li>
        *                <p>For information about how to transfer a domain to another domain registrar, see
        * 				<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-from-route-53.html">Transferring a Domain from
        * 				Amazon Route 53 to Another Registrar</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
        *             </li>
        *          </ul>
        * 		       <p>If the registrar for your domain is also the DNS service provider for the domain, we highly recommend that you
        * 			transfer your DNS service to Route 53 or to another DNS service provider before you transfer your registration. Some registrars
        * 			provide free DNS service when you purchase a domain registration. When you transfer the registration, the previous registrar
        * 			will not renew your domain registration and could end your DNS service at any time.</p>
        *
        * 			      <important>
        * 				        <p>If the registrar for your domain is also the DNS service provider for the domain and you don't
        * 					transfer DNS service to another provider, your website, email, and the web applications associated with the domain
        * 					might become unavailable.</p>
        * 			      </important>
        *
        * 		       <p>If the transfer is successful, this method returns an operation ID that you can use to track the progress and
        * 			completion of the action. If the transfer doesn't complete successfully, the domain registrant will be notified by email.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, TransferDomainCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, TransferDomainCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new TransferDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TransferDomainCommandInput} for command's `input` shape.
        * @see {@link TransferDomainCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class TransferDomainCommand extends $Command<TransferDomainCommandInput, TransferDomainCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: TransferDomainCommandInput;
            constructor(input: TransferDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TransferDomainCommandInput, TransferDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/TransferDomainToAnotherAwsAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TransferDomainToAnotherAwsAccountRequest, TransferDomainToAnotherAwsAccountResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface TransferDomainToAnotherAwsAccountCommandInput extends TransferDomainToAnotherAwsAccountRequest {
    }
    export interface TransferDomainToAnotherAwsAccountCommandOutput extends TransferDomainToAnotherAwsAccountResponse, __MetadataBearer {
    }
    /**
        * <p>Transfers a domain from the current Amazon Web Services account to another Amazon Web Services account. Note the following:</p>
        * 		       <ul>
        *             <li>
        *                <p>The Amazon Web Services account that you're transferring the domain to must accept the transfer. If the other account
        * 				doesn't accept the transfer within 3 days, we cancel the transfer. See
        * 				<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AcceptDomainTransferFromAnotherAwsAccount.html">AcceptDomainTransferFromAnotherAwsAccount</a>.
        * 				</p>
        * 			         </li>
        *             <li>
        *                <p>You can cancel the transfer before the other account accepts it. See
        * 				<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_CancelDomainTransferToAnotherAwsAccount.html">CancelDomainTransferToAnotherAwsAccount</a>.
        * 				</p>
        * 			         </li>
        *             <li>
        *                <p>The other account can reject the transfer. See
        * 					<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_RejectDomainTransferFromAnotherAwsAccount.html">RejectDomainTransferFromAnotherAwsAccount</a>.
        * 				</p>
        * 			         </li>
        *          </ul>
        *
        * 		       <important>
        * 			         <p>When you transfer a domain from one Amazon Web Services account to another, Route 53 doesn't transfer the hosted zone that is associated
        * 				with the domain. DNS resolution isn't affected if the domain and the hosted zone are owned by separate accounts,
        * 				so transferring the hosted zone is optional. For information about transferring the hosted zone to another Amazon Web Services account, see
        * 				<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zones-migrating.html">Migrating a Hosted Zone to a
        * 					Different Amazon Web Services Account</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
        * 		       </important>
        *
        * 		       <p>Use either
        * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations</a> or
        * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
        * 			to determine whether the operation succeeded.
        * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
        * 			provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>.
        * 		</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, TransferDomainToAnotherAwsAccountCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, TransferDomainToAnotherAwsAccountCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new TransferDomainToAnotherAwsAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TransferDomainToAnotherAwsAccountCommandInput} for command's `input` shape.
        * @see {@link TransferDomainToAnotherAwsAccountCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class TransferDomainToAnotherAwsAccountCommand extends $Command<TransferDomainToAnotherAwsAccountCommandInput, TransferDomainToAnotherAwsAccountCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: TransferDomainToAnotherAwsAccountCommandInput;
            constructor(input: TransferDomainToAnotherAwsAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TransferDomainToAnotherAwsAccountCommandInput, TransferDomainToAnotherAwsAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/UpdateDomainContactCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateDomainContactRequest, UpdateDomainContactResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface UpdateDomainContactCommandInput extends UpdateDomainContactRequest {
    }
    export interface UpdateDomainContactCommandOutput extends UpdateDomainContactResponse, __MetadataBearer {
    }
    /**
        * <p>This operation updates the contact information for a particular domain. You must specify information for at least one contact:
        * 			registrant, administrator, or technical.</p>
        * 		       <p>If the update is successful, this method returns an operation ID that you can use to track the progress and completion of the action.
        * 			If the request is not completed successfully, the domain registrant will be notified by email.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, UpdateDomainContactCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, UpdateDomainContactCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new UpdateDomainContactCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDomainContactCommandInput} for command's `input` shape.
        * @see {@link UpdateDomainContactCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class UpdateDomainContactCommand extends $Command<UpdateDomainContactCommandInput, UpdateDomainContactCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: UpdateDomainContactCommandInput;
            constructor(input: UpdateDomainContactCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDomainContactCommandInput, UpdateDomainContactCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/UpdateDomainContactPrivacyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateDomainContactPrivacyRequest, UpdateDomainContactPrivacyResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface UpdateDomainContactPrivacyCommandInput extends UpdateDomainContactPrivacyRequest {
    }
    export interface UpdateDomainContactPrivacyCommandOutput extends UpdateDomainContactPrivacyResponse, __MetadataBearer {
    }
    /**
        * <p>This operation updates the specified domain contact's privacy setting. When privacy protection is enabled,
        * 			contact information such as email address is replaced either with contact information for Amazon Registrar (for .com, .net, and .org
        * 			domains) or with contact information for our registrar associate, Gandi.</p>
        * 		       <note>
        * 			         <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
        * 		       </note>
        * 		       <p>This operation affects only the contact information for the specified contact type (administrative, registrant, or technical).
        * 			If the request succeeds, Amazon Route 53 returns an operation ID that you can use with
        * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
        * 			to track the progress and completion of the action. If the request doesn't complete successfully, the domain registrant will be notified by email.</p>
        * 		       <important>
        *             <p>By disabling the privacy service via API, you consent to the publication of the contact information provided for this domain
        * 			via the public WHOIS database. You certify that you are the registrant of this domain name and have the authority to make this decision.
        * 			You may withdraw your consent at any time by enabling privacy protection using either <code>UpdateDomainContactPrivacy</code> or the
        * 			Route 53 console. Enabling privacy protection removes the contact information provided for this domain from the WHOIS database.
        * 			For more information on our privacy practices, see
        * 			<a href="https://aws.amazon.com/privacy/">https://aws.amazon.com/privacy/</a>.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, UpdateDomainContactPrivacyCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, UpdateDomainContactPrivacyCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new UpdateDomainContactPrivacyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDomainContactPrivacyCommandInput} for command's `input` shape.
        * @see {@link UpdateDomainContactPrivacyCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class UpdateDomainContactPrivacyCommand extends $Command<UpdateDomainContactPrivacyCommandInput, UpdateDomainContactPrivacyCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: UpdateDomainContactPrivacyCommandInput;
            constructor(input: UpdateDomainContactPrivacyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDomainContactPrivacyCommandInput, UpdateDomainContactPrivacyCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/UpdateDomainNameserversCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateDomainNameserversRequest, UpdateDomainNameserversResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface UpdateDomainNameserversCommandInput extends UpdateDomainNameserversRequest {
    }
    export interface UpdateDomainNameserversCommandOutput extends UpdateDomainNameserversResponse, __MetadataBearer {
    }
    /**
        * <p>This operation replaces the current set of name servers for the domain with the specified set of name servers.
        * 			If you use Amazon Route 53 as your DNS service, specify the four name servers in the delegation set for the hosted zone for the domain.</p>
        * 		       <p>If successful, this operation returns an operation ID that you can use to track the progress and completion of the action.
        * 			If the request is not completed successfully, the domain registrant will be notified by email.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, UpdateDomainNameserversCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, UpdateDomainNameserversCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new UpdateDomainNameserversCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDomainNameserversCommandInput} for command's `input` shape.
        * @see {@link UpdateDomainNameserversCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class UpdateDomainNameserversCommand extends $Command<UpdateDomainNameserversCommandInput, UpdateDomainNameserversCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: UpdateDomainNameserversCommandInput;
            constructor(input: UpdateDomainNameserversCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDomainNameserversCommandInput, UpdateDomainNameserversCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/UpdateTagsForDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateTagsForDomainRequest, UpdateTagsForDomainResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface UpdateTagsForDomainCommandInput extends UpdateTagsForDomainRequest {
    }
    export interface UpdateTagsForDomainCommandOutput extends UpdateTagsForDomainResponse, __MetadataBearer {
    }
    /**
        * <p>This operation adds or updates tags for a specified domain.</p>
        * 		       <p>All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, UpdateTagsForDomainCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, UpdateTagsForDomainCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new UpdateTagsForDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateTagsForDomainCommandInput} for command's `input` shape.
        * @see {@link UpdateTagsForDomainCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class UpdateTagsForDomainCommand extends $Command<UpdateTagsForDomainCommandInput, UpdateTagsForDomainCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: UpdateTagsForDomainCommandInput;
            constructor(input: UpdateTagsForDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateTagsForDomainCommandInput, UpdateTagsForDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/ViewBillingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ViewBillingRequest, ViewBillingResponse } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0";
    import { Route53DomainsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient";
    export interface ViewBillingCommandInput extends ViewBillingRequest {
    }
    export interface ViewBillingCommandOutput extends ViewBillingResponse, __MetadataBearer {
    }
    /**
        * <p>Returns all the domain-related billing records for the current Amazon Web Services account for a specified period</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Route53DomainsClient, ViewBillingCommand } from "@aws-sdk/client-route-53-domains"; // ES Modules import
        * // const { Route53DomainsClient, ViewBillingCommand } = require("@aws-sdk/client-route-53-domains"); // CommonJS import
        * const client = new Route53DomainsClient(config);
        * const command = new ViewBillingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ViewBillingCommandInput} for command's `input` shape.
        * @see {@link ViewBillingCommandOutput} for command's `response` shape.
        * @see {@link Route53DomainsClientResolvedConfig | config} for Route53DomainsClient's `config` shape.
        *
        */
    export class ViewBillingCommand extends $Command<ViewBillingCommandInput, ViewBillingCommandOutput, Route53DomainsClientResolvedConfig> {
            readonly input: ViewBillingCommandInput;
            constructor(input: ViewBillingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53DomainsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ViewBillingCommandInput, ViewBillingCommandOutput>;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/Route53DomainsClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AcceptDomainTransferFromAnotherAwsAccountCommandInput, AcceptDomainTransferFromAnotherAwsAccountCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/AcceptDomainTransferFromAnotherAwsAccountCommand";
    import { CancelDomainTransferToAnotherAwsAccountCommandInput, CancelDomainTransferToAnotherAwsAccountCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/CancelDomainTransferToAnotherAwsAccountCommand";
    import { CheckDomainAvailabilityCommandInput, CheckDomainAvailabilityCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/CheckDomainAvailabilityCommand";
    import { CheckDomainTransferabilityCommandInput, CheckDomainTransferabilityCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/CheckDomainTransferabilityCommand";
    import { DeleteDomainCommandInput, DeleteDomainCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/DeleteDomainCommand";
    import { DeleteTagsForDomainCommandInput, DeleteTagsForDomainCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/DeleteTagsForDomainCommand";
    import { DisableDomainAutoRenewCommandInput, DisableDomainAutoRenewCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/DisableDomainAutoRenewCommand";
    import { DisableDomainTransferLockCommandInput, DisableDomainTransferLockCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/DisableDomainTransferLockCommand";
    import { EnableDomainAutoRenewCommandInput, EnableDomainAutoRenewCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/EnableDomainAutoRenewCommand";
    import { EnableDomainTransferLockCommandInput, EnableDomainTransferLockCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/EnableDomainTransferLockCommand";
    import { GetContactReachabilityStatusCommandInput, GetContactReachabilityStatusCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/GetContactReachabilityStatusCommand";
    import { GetDomainDetailCommandInput, GetDomainDetailCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/GetDomainDetailCommand";
    import { GetDomainSuggestionsCommandInput, GetDomainSuggestionsCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/GetDomainSuggestionsCommand";
    import { GetOperationDetailCommandInput, GetOperationDetailCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/GetOperationDetailCommand";
    import { ListDomainsCommandInput, ListDomainsCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/ListDomainsCommand";
    import { ListOperationsCommandInput, ListOperationsCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/ListOperationsCommand";
    import { ListPricesCommandInput, ListPricesCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/ListPricesCommand";
    import { ListTagsForDomainCommandInput, ListTagsForDomainCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/ListTagsForDomainCommand";
    import { RegisterDomainCommandInput, RegisterDomainCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/RegisterDomainCommand";
    import { RejectDomainTransferFromAnotherAwsAccountCommandInput, RejectDomainTransferFromAnotherAwsAccountCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/RejectDomainTransferFromAnotherAwsAccountCommand";
    import { RenewDomainCommandInput, RenewDomainCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/RenewDomainCommand";
    import { ResendContactReachabilityEmailCommandInput, ResendContactReachabilityEmailCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/ResendContactReachabilityEmailCommand";
    import { RetrieveDomainAuthCodeCommandInput, RetrieveDomainAuthCodeCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/RetrieveDomainAuthCodeCommand";
    import { TransferDomainCommandInput, TransferDomainCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/TransferDomainCommand";
    import { TransferDomainToAnotherAwsAccountCommandInput, TransferDomainToAnotherAwsAccountCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/TransferDomainToAnotherAwsAccountCommand";
    import { UpdateDomainContactCommandInput, UpdateDomainContactCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/UpdateDomainContactCommand";
    import { UpdateDomainContactPrivacyCommandInput, UpdateDomainContactPrivacyCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/UpdateDomainContactPrivacyCommand";
    import { UpdateDomainNameserversCommandInput, UpdateDomainNameserversCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/UpdateDomainNameserversCommand";
    import { UpdateTagsForDomainCommandInput, UpdateTagsForDomainCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/UpdateTagsForDomainCommand";
    import { ViewBillingCommandInput, ViewBillingCommandOutput } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/commands/ViewBillingCommand";
    export type ServiceInputTypes = AcceptDomainTransferFromAnotherAwsAccountCommandInput | CancelDomainTransferToAnotherAwsAccountCommandInput | CheckDomainAvailabilityCommandInput | CheckDomainTransferabilityCommandInput | DeleteDomainCommandInput | DeleteTagsForDomainCommandInput | DisableDomainAutoRenewCommandInput | DisableDomainTransferLockCommandInput | EnableDomainAutoRenewCommandInput | EnableDomainTransferLockCommandInput | GetContactReachabilityStatusCommandInput | GetDomainDetailCommandInput | GetDomainSuggestionsCommandInput | GetOperationDetailCommandInput | ListDomainsCommandInput | ListOperationsCommandInput | ListPricesCommandInput | ListTagsForDomainCommandInput | RegisterDomainCommandInput | RejectDomainTransferFromAnotherAwsAccountCommandInput | RenewDomainCommandInput | ResendContactReachabilityEmailCommandInput | RetrieveDomainAuthCodeCommandInput | TransferDomainCommandInput | TransferDomainToAnotherAwsAccountCommandInput | UpdateDomainContactCommandInput | UpdateDomainContactPrivacyCommandInput | UpdateDomainNameserversCommandInput | UpdateTagsForDomainCommandInput | ViewBillingCommandInput;
    export type ServiceOutputTypes = AcceptDomainTransferFromAnotherAwsAccountCommandOutput | CancelDomainTransferToAnotherAwsAccountCommandOutput | CheckDomainAvailabilityCommandOutput | CheckDomainTransferabilityCommandOutput | DeleteDomainCommandOutput | DeleteTagsForDomainCommandOutput | DisableDomainAutoRenewCommandOutput | DisableDomainTransferLockCommandOutput | EnableDomainAutoRenewCommandOutput | EnableDomainTransferLockCommandOutput | GetContactReachabilityStatusCommandOutput | GetDomainDetailCommandOutput | GetDomainSuggestionsCommandOutput | GetOperationDetailCommandOutput | ListDomainsCommandOutput | ListOperationsCommandOutput | ListPricesCommandOutput | ListTagsForDomainCommandOutput | RegisterDomainCommandOutput | RejectDomainTransferFromAnotherAwsAccountCommandOutput | RenewDomainCommandOutput | ResendContactReachabilityEmailCommandOutput | RetrieveDomainAuthCodeCommandOutput | TransferDomainCommandOutput | TransferDomainToAnotherAwsAccountCommandOutput | UpdateDomainContactCommandOutput | UpdateDomainContactPrivacyCommandOutput | UpdateDomainNameserversCommandOutput | UpdateTagsForDomainCommandOutput | ViewBillingCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type Route53DomainsClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of Route53DomainsClient class constructor that set the region, credentials and other options.
        */
    export interface Route53DomainsClientConfig extends Route53DomainsClientConfigType {
    }
    type Route53DomainsClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of Route53DomainsClient class. This is resolved and normalized from the {@link Route53DomainsClientConfig | constructor configuration interface}.
        */
    export interface Route53DomainsClientResolvedConfig extends Route53DomainsClientResolvedConfigType {
    }
    /**
        * <p>Amazon Route 53 API actions let you register domain names and perform related operations.</p>
        */
    export class Route53DomainsClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, Route53DomainsClientResolvedConfig> {
            /**
                * The resolved configuration of Route53DomainsClient class. This is resolved and normalized from the {@link Route53DomainsClientConfig | constructor configuration interface}.
                */
            readonly config: Route53DomainsClientResolvedConfig;
            constructor(configuration: Route53DomainsClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { Route53DomainsServiceException as __BaseException } from "@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/Route53DomainsServiceException";
    /**
        * <p>The AcceptDomainTransferFromAnotherAwsAccount request includes the following elements.</p>
        */
    export interface AcceptDomainTransferFromAnotherAwsAccountRequest {
            /**
                * <p>The name of the domain that was specified when another Amazon Web Services account submitted a
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>
                * 			request.
                * 		</p>
                */
            DomainName: string | undefined;
            /**
                * <p>The password that was returned by the
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>
                * 			request.
                * 		</p>
                */
            Password: string | undefined;
    }
    export namespace AcceptDomainTransferFromAnotherAwsAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AcceptDomainTransferFromAnotherAwsAccountRequest) => any;
    }
    /**
        * <p>The AcceptDomainTransferFromAnotherAwsAccount response includes the following element.</p>
        */
    export interface AcceptDomainTransferFromAnotherAwsAccountResponse {
            /**
                * <p>Identifier for tracking the progress of the request. To query the operation status, use
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>.</p>
                */
            OperationId?: string;
    }
    export namespace AcceptDomainTransferFromAnotherAwsAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AcceptDomainTransferFromAnotherAwsAccountResponse) => any;
    }
    /**
        * <p>The number of domains has exceeded the allowed threshold for the account.</p>
        */
    export class DomainLimitExceeded extends __BaseException {
            readonly name: "DomainLimitExceeded";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DomainLimitExceeded, __BaseException>);
    }
    /**
        * <p>The requested item is not acceptable. For example, for APIs that accept a domain name, the request might specify a domain name
        * 			that doesn't belong to the account that submitted the request. For <code>AcceptDomainTransferFromAnotherAwsAccount</code>,
        * 			the password might be invalid.</p>
        */
    export class InvalidInput extends __BaseException {
            readonly name: "InvalidInput";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidInput, __BaseException>);
    }
    /**
        * <p>The number of operations or jobs running exceeded the allowed threshold for the account.</p>
        */
    export class OperationLimitExceeded extends __BaseException {
            readonly name: "OperationLimitExceeded";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OperationLimitExceeded, __BaseException>);
    }
    /**
        * <p>Amazon Route 53 does not support this top-level domain (TLD).</p>
        */
    export class UnsupportedTLD extends __BaseException {
            readonly name: "UnsupportedTLD";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedTLD, __BaseException>);
    }
    export enum OperationType {
            ADD_DNSSEC = "ADD_DNSSEC",
            CHANGE_DOMAIN_OWNER = "CHANGE_DOMAIN_OWNER",
            CHANGE_PRIVACY_PROTECTION = "CHANGE_PRIVACY_PROTECTION",
            DELETE_DOMAIN = "DELETE_DOMAIN",
            DISABLE_AUTORENEW = "DISABLE_AUTORENEW",
            DOMAIN_LOCK = "DOMAIN_LOCK",
            ENABLE_AUTORENEW = "ENABLE_AUTORENEW",
            EXPIRE_DOMAIN = "EXPIRE_DOMAIN",
            INTERNAL_TRANSFER_IN_DOMAIN = "INTERNAL_TRANSFER_IN_DOMAIN",
            INTERNAL_TRANSFER_OUT_DOMAIN = "INTERNAL_TRANSFER_OUT_DOMAIN",
            PUSH_DOMAIN = "PUSH_DOMAIN",
            REGISTER_DOMAIN = "REGISTER_DOMAIN",
            REMOVE_DNSSEC = "REMOVE_DNSSEC",
            RENEW_DOMAIN = "RENEW_DOMAIN",
            TRANSFER_IN_DOMAIN = "TRANSFER_IN_DOMAIN",
            TRANSFER_OUT_DOMAIN = "TRANSFER_OUT_DOMAIN",
            UPDATE_DOMAIN_CONTACT = "UPDATE_DOMAIN_CONTACT",
            UPDATE_NAMESERVER = "UPDATE_NAMESERVER"
    }
    /**
        * <p>Information for one billing record.</p>
        */
    export interface BillingRecord {
            /**
                * <p>The name of the domain that the billing record applies to. If the domain name contains characters
                * 			other than a-z, 0-9, and - (hyphen), such as an internationalized domain name, then this value is in Punycode.
                * 			For more information, see
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html">DNS Domain Name Format</a>
                * 			in the <i>Amazon Route 53 Developer Guide</i>.</p>
                */
            DomainName?: string;
            /**
                * <p>The operation that you were charged for.</p>
                */
            Operation?: OperationType | string;
            /**
                * <p>The ID of the invoice that is associated with the billing record.</p>
                */
            InvoiceId?: string;
            /**
                * <p>The date that the operation was billed, in Unix format.</p>
                */
            BillDate?: Date;
            /**
                * <p>The price that you were charged for the operation, in US dollars.</p>
                * 		       <p>Example value: 12.0</p>
                */
            Price?: number;
    }
    export namespace BillingRecord {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BillingRecord) => any;
    }
    /**
        * <p>The CancelDomainTransferToAnotherAwsAccount request includes the following element.</p>
        */
    export interface CancelDomainTransferToAnotherAwsAccountRequest {
            /**
                * <p>The name of the domain for which you want to cancel the transfer to another Amazon Web Services account.</p>
                */
            DomainName: string | undefined;
    }
    export namespace CancelDomainTransferToAnotherAwsAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelDomainTransferToAnotherAwsAccountRequest) => any;
    }
    /**
        * <p>The <code>CancelDomainTransferToAnotherAwsAccount</code> response includes the following element.</p>
        */
    export interface CancelDomainTransferToAnotherAwsAccountResponse {
            /**
                * <p>The identifier that <code>TransferDomainToAnotherAwsAccount</code> returned to track the progress of the request.
                * 			Because the transfer request was canceled, the value is no longer valid, and you can't use <code>GetOperationDetail</code>
                * 			to query the operation status.</p>
                */
            OperationId?: string;
    }
    export namespace CancelDomainTransferToAnotherAwsAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelDomainTransferToAnotherAwsAccountResponse) => any;
    }
    /**
        * <p>The CheckDomainAvailability request contains the following elements.</p>
        */
    export interface CheckDomainAvailabilityRequest {
            /**
                * <p>The name of the domain that you want to get availability for. The top-level domain (TLD), such as .com, must be a TLD that Route 53 supports.
                * 			For a list of supported TLDs, see
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a> in the
                * 			<i>Amazon Route 53 Developer Guide</i>.</p>
                * 		       <p>The domain name can contain only the following characters:</p>
                * 		       <ul>
                *             <li>
                *                <p>Letters a through z. Domain names are not case sensitive.</p>
                *             </li>
                *             <li>
                *                <p>Numbers 0 through 9.</p>
                *             </li>
                *             <li>
                *                <p>Hyphen (-). You can't specify a hyphen at the beginning or end of a label. </p>
                *             </li>
                *             <li>
                *                <p>Period (.) to separate the labels in the name, such as the <code>.</code> in <code>example.com</code>.</p>
                *             </li>
                *          </ul>
                * 		       <p>Internationalized domain names are not supported for some top-level domains. To determine whether the TLD that you want to use supports
                * 			internationalized domain names, see
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a>.
                * 			For more information, see
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html#domain-name-format-idns">Formatting Internationalized Domain Names</a>.
                * 		</p>
                */
            DomainName: string | undefined;
            /**
                * <p>Reserved for future use.</p>
                */
            IdnLangCode?: string;
    }
    export namespace CheckDomainAvailabilityRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CheckDomainAvailabilityRequest) => any;
    }
    export type DomainAvailability = "AVAILABLE" | "AVAILABLE_PREORDER" | "AVAILABLE_RESERVED" | "DONT_KNOW" | "RESERVED" | "UNAVAILABLE" | "UNAVAILABLE_PREMIUM" | "UNAVAILABLE_RESTRICTED";
    /**
        * <p>The CheckDomainAvailability response includes the following elements.</p>
        */
    export interface CheckDomainAvailabilityResponse {
            /**
                * <p>Whether the domain name is available for registering.</p>
                * 		       <note>
                *             <p>You can register only domains designated as <code>AVAILABLE</code>.</p>
                *          </note>
                * 		       <p>Valid values:</p>
                * 		       <dl>
                *             <dt>AVAILABLE</dt>
                *             <dd>
                *                <p>The domain name is available.</p>
                *             </dd>
                *             <dt>AVAILABLE_RESERVED</dt>
                *             <dd>
                *                <p>The domain name is reserved under specific conditions.</p>
                *             </dd>
                *             <dt>AVAILABLE_PREORDER</dt>
                *             <dd>
                *                <p>The domain name is available and can be preordered.</p>
                *             </dd>
                *             <dt>DONT_KNOW</dt>
                *             <dd>
                *                <p>The TLD registry didn't reply with a definitive answer about whether the domain name is available.
                * 					Route 53 can return this response for a variety of reasons, for example, the registry is performing maintenance.
                * 					Try again later.</p>
                *             </dd>
                *             <dt>PENDING</dt>
                *             <dd>
                *                <p>The TLD registry didn't return a response in the expected amount of time. When the response is delayed,
                * 					it usually takes just a few extra seconds. You can resubmit the request immediately.</p>
                *             </dd>
                *             <dt>RESERVED</dt>
                *             <dd>
                *                <p>The domain name has been reserved for another person or organization.</p>
                *             </dd>
                *             <dt>UNAVAILABLE</dt>
                *             <dd>
                *                <p>The domain name is not available.</p>
                *             </dd>
                *             <dt>UNAVAILABLE_PREMIUM</dt>
                *             <dd>
                *                <p>The domain name is not available.</p>
                *             </dd>
                *             <dt>UNAVAILABLE_RESTRICTED</dt>
                *             <dd>
                *                <p>The domain name is forbidden.</p>
                *             </dd>
                *          </dl>
                */
            Availability: DomainAvailability | string | undefined;
    }
    export namespace CheckDomainAvailabilityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CheckDomainAvailabilityResponse) => any;
    }
    /**
        * <p>The CheckDomainTransferability request contains the following elements.</p>
        */
    export interface CheckDomainTransferabilityRequest {
            /**
                * <p>The name of the domain that you want to transfer to Route 53. The top-level domain (TLD), such as .com, must be a TLD that Route 53 supports.
                * 			For a list of supported TLDs, see
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a> in the
                * 			<i>Amazon Route 53 Developer Guide</i>.</p>
                * 		       <p>The domain name can contain only the following characters:</p>
                * 		       <ul>
                *             <li>
                *                <p>Letters a through z. Domain names are not case sensitive.</p>
                *             </li>
                *             <li>
                *                <p>Numbers 0 through 9.</p>
                *             </li>
                *             <li>
                *                <p>Hyphen (-). You can't specify a hyphen at the beginning or end of a label. </p>
                *             </li>
                *             <li>
                *                <p>Period (.) to separate the labels in the name, such as the <code>.</code> in <code>example.com</code>.</p>
                *             </li>
                *          </ul>
                */
            DomainName: string | undefined;
            /**
                * <p>If the registrar for the top-level domain (TLD) requires an authorization code to transfer the domain,
                * 			the code that you got from the current registrar for the domain.</p>
                */
            AuthCode?: string;
    }
    export namespace CheckDomainTransferabilityRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CheckDomainTransferabilityRequest) => any;
    }
    export enum Transferable {
            DONT_KNOW = "DONT_KNOW",
            TRANSFERABLE = "TRANSFERABLE",
            UNTRANSFERABLE = "UNTRANSFERABLE"
    }
    /**
        * <p>A complex type that contains information about whether the specified domain can be transferred to Route 53.</p>
        */
    export interface DomainTransferability {
            /**
                * <p>Whether the domain name can be transferred to Route 53.</p>
                * 		       <note>
                *             <p>You can transfer only domains that have a value of <code>TRANSFERABLE</code> for <code>Transferable</code>.</p>
                *          </note>
                *
                * 		       <p>Valid values:</p>
                * 		       <dl>
                *             <dt>TRANSFERABLE</dt>
                *             <dd>
                *                <p>The domain name can be transferred to Route 53.</p>
                *             </dd>
                *             <dt>UNTRANSFERRABLE</dt>
                *             <dd>
                *                <p>The domain name can't be transferred to Route 53.</p>
                *             </dd>
                *             <dt>DONT_KNOW</dt>
                *             <dd>
                *                <p>Reserved for future use.</p>
                *             </dd>
                *          </dl>
                */
            Transferable?: Transferable | string;
    }
    export namespace DomainTransferability {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainTransferability) => any;
    }
    /**
        * <p>The CheckDomainTransferability response includes the following elements.</p>
        */
    export interface CheckDomainTransferabilityResponse {
            /**
                * <p>A complex type that contains information about whether the specified domain can be transferred to Route 53.</p>
                */
            Transferability: DomainTransferability | undefined;
    }
    export namespace CheckDomainTransferabilityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CheckDomainTransferabilityResponse) => any;
    }
    export type ContactType = "ASSOCIATION" | "COMPANY" | "PERSON" | "PUBLIC_BODY" | "RESELLER";
    export type CountryCode = "AC" | "AD" | "AE" | "AF" | "AG" | "AI" | "AL" | "AM" | "AN" | "AO" | "AQ" | "AR" | "AS" | "AT" | "AU" | "AW" | "AX" | "AZ" | "BA" | "BB" | "BD" | "BE" | "BF" | "BG" | "BH" | "BI" | "BJ" | "BL" | "BM" | "BN" | "BO" | "BQ" | "BR" | "BS" | "BT" | "BV" | "BW" | "BY" | "BZ" | "CA" | "CC" | "CD" | "CF" | "CG" | "CH" | "CI" | "CK" | "CL" | "CM" | "CN" | "CO" | "CR" | "CU" | "CV" | "CW" | "CX" | "CY" | "CZ" | "DE" | "DJ" | "DK" | "DM" | "DO" | "DZ" | "EC" | "EE" | "EG" | "EH" | "ER" | "ES" | "ET" | "FI" | "FJ" | "FK" | "FM" | "FO" | "FR" | "GA" | "GB" | "GD" | "GE" | "GF" | "GG" | "GH" | "GI" | "GL" | "GM" | "GN" | "GP" | "GQ" | "GR" | "GS" | "GT" | "GU" | "GW" | "GY" | "HK" | "HM" | "HN" | "HR" | "HT" | "HU" | "ID" | "IE" | "IL" | "IM" | "IN" | "IO" | "IQ" | "IR" | "IS" | "IT" | "JE" | "JM" | "JO" | "JP" | "KE" | "KG" | "KH" | "KI" | "KM" | "KN" | "KP" | "KR" | "KW" | "KY" | "KZ" | "LA" | "LB" | "LC" | "LI" | "LK" | "LR" | "LS" | "LT" | "LU" | "LV" | "LY" | "MA" | "MC" | "MD" | "ME" | "MF" | "MG" | "MH" | "MK" | "ML" | "MM" | "MN" | "MO" | "MP" | "MQ" | "MR" | "MS" | "MT" | "MU" | "MV" | "MW" | "MX" | "MY" | "MZ" | "NA" | "NC" | "NE" | "NF" | "NG" | "NI" | "NL" | "NO" | "NP" | "NR" | "NU" | "NZ" | "OM" | "PA" | "PE" | "PF" | "PG" | "PH" | "PK" | "PL" | "PM" | "PN" | "PR" | "PS" | "PT" | "PW" | "PY" | "QA" | "RE" | "RO" | "RS" | "RU" | "RW" | "SA" | "SB" | "SC" | "SD" | "SE" | "SG" | "SH" | "SI" | "SJ" | "SK" | "SL" | "SM" | "SN" | "SO" | "SR" | "SS" | "ST" | "SV" | "SX" | "SY" | "SZ" | "TC" | "TD" | "TF" | "TG" | "TH" | "TJ" | "TK" | "TL" | "TM" | "TN" | "TO" | "TP" | "TR" | "TT" | "TV" | "TW" | "TZ" | "UA" | "UG" | "US" | "UY" | "UZ" | "VA" | "VC" | "VE" | "VG" | "VI" | "VN" | "VU" | "WF" | "WS" | "YE" | "YT" | "ZA" | "ZM" | "ZW";
    export enum ExtraParamName {
            AU_ID_NUMBER = "AU_ID_NUMBER",
            AU_ID_TYPE = "AU_ID_TYPE",
            BIRTH_CITY = "BIRTH_CITY",
            BIRTH_COUNTRY = "BIRTH_COUNTRY",
            BIRTH_DATE_IN_YYYY_MM_DD = "BIRTH_DATE_IN_YYYY_MM_DD",
            BIRTH_DEPARTMENT = "BIRTH_DEPARTMENT",
            BRAND_NUMBER = "BRAND_NUMBER",
            CA_BUSINESS_ENTITY_TYPE = "CA_BUSINESS_ENTITY_TYPE",
            CA_LEGAL_REPRESENTATIVE = "CA_LEGAL_REPRESENTATIVE",
            CA_LEGAL_REPRESENTATIVE_CAPACITY = "CA_LEGAL_REPRESENTATIVE_CAPACITY",
            CA_LEGAL_TYPE = "CA_LEGAL_TYPE",
            DOCUMENT_NUMBER = "DOCUMENT_NUMBER",
            DUNS_NUMBER = "DUNS_NUMBER",
            ES_IDENTIFICATION = "ES_IDENTIFICATION",
            ES_IDENTIFICATION_TYPE = "ES_IDENTIFICATION_TYPE",
            ES_LEGAL_FORM = "ES_LEGAL_FORM",
            EU_COUNTRY_OF_CITIZENSHIP = "EU_COUNTRY_OF_CITIZENSHIP",
            FI_BUSINESS_NUMBER = "FI_BUSINESS_NUMBER",
            FI_NATIONALITY = "FI_NATIONALITY",
            FI_ORGANIZATION_TYPE = "FI_ORGANIZATION_TYPE",
            IT_NATIONALITY = "IT_NATIONALITY",
            IT_PIN = "IT_PIN",
            IT_REGISTRANT_ENTITY_TYPE = "IT_REGISTRANT_ENTITY_TYPE",
            ONWER_FI_ID_NUMBER = "FI_ID_NUMBER",
            RU_PASSPORT_DATA = "RU_PASSPORT_DATA",
            SE_ID_NUMBER = "SE_ID_NUMBER",
            SG_ID_NUMBER = "SG_ID_NUMBER",
            UK_COMPANY_NUMBER = "UK_COMPANY_NUMBER",
            UK_CONTACT_TYPE = "UK_CONTACT_TYPE",
            VAT_NUMBER = "VAT_NUMBER"
    }
    /**
        * <p>ExtraParam includes the following elements.</p>
        */
    export interface ExtraParam {
            /**
                * <p>The name of an additional parameter that is required by a top-level domain. Here are the top-level domains that require
                * 			additional parameters and the names of the parameters that they require:</p>
                *
                * 		       <dl>
                *             <dt>.com.au and .net.au</dt>
                *             <dd>
                * 					          <ul>
                *                   <li>
                *                      <p>
                *                         <code>AU_ID_NUMBER</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>AU_ID_TYPE</code>
                *                      </p>
                * 							              <p>Valid values include the following:</p>
                * 							              <ul>
                *                         <li>
                *                            <p>
                *                               <code>ABN</code> (Australian business number)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>ACN</code> (Australian company number)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>TM</code> (Trademark number)</p>
                *                         </li>
                *                      </ul>
                * 						            </li>
                *                </ul>
                * 				        </dd>
                *             <dt>.ca</dt>
                *             <dd>
                * 					          <ul>
                *                   <li>
                *                      <p>
                *                         <code>BRAND_NUMBER</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>CA_BUSINESS_ENTITY_TYPE</code>
                *                      </p>
                * 							              <p>Valid values include the following:</p>
                * 							              <ul>
                *                         <li>
                *                            <p>
                *                               <code>BANK</code> (Bank)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>COMMERCIAL_COMPANY</code> (Commercial company)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>COMPANY</code> (Company)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>COOPERATION</code> (Cooperation)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>COOPERATIVE</code> (Cooperative)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>COOPRIX</code> (Cooprix)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>CORP</code> (Corporation)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>CREDIT_UNION</code> (Credit union)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>FOMIA</code> (Federation of mutual insurance associations)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>INC</code> (Incorporated)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>LTD</code> (Limited)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>LTEE</code> (Limitée)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>LLC</code> (Limited liability corporation)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>LLP</code> (Limited liability partnership)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>LTE</code> (Lte.)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>MBA</code> (Mutual benefit association)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>MIC</code> (Mutual insurance company)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>NFP</code> (Not-for-profit corporation)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>SA</code> (S.A.)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>SAVINGS_COMPANY</code> (Savings company)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>SAVINGS_UNION</code> (Savings union)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>SARL</code> (Société à responsabilité limitée)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>TRUST</code> (Trust)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>ULC</code> (Unlimited liability corporation)</p>
                *                         </li>
                *                      </ul>
                * 						            </li>
                *                   <li>
                *                      <p>
                *                         <code>CA_LEGAL_TYPE</code>
                *                      </p>
                * 							              <p>When <code>ContactType</code> is <code>PERSON</code>, valid values include the following:</p>
                * 							              <ul>
                *                         <li>
                *                            <p>
                *                               <code>ABO</code> (Aboriginal Peoples indigenous to Canada)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>CCT</code> (Canadian citizen)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>LGR</code> (Legal Representative of a Canadian Citizen or Permanent Resident)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>RES</code> (Permanent resident of Canada)</p>
                *                         </li>
                *                      </ul>
                *
                * 							              <p>When <code>ContactType</code> is a value other than <code>PERSON</code>, valid values include the following:</p>
                * 							              <ul>
                *                         <li>
                *                            <p>
                *                               <code>ASS</code> (Canadian unincorporated association)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>CCO</code> (Canadian corporation)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>EDU</code> (Canadian educational institution)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>GOV</code> (Government or government entity in Canada)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>HOP</code> (Canadian Hospital)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>INB</code> (Indian Band recognized by the Indian Act of Canada)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>LAM</code> (Canadian Library, Archive, or Museum)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>MAJ</code> (Her/His Majesty the Queen/King)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>OMK</code> (Official mark registered in Canada)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>PLT</code> (Canadian Political Party)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>PRT</code> (Partnership Registered in Canada)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>TDM</code> (Trademark registered in Canada)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>TRD</code> (Canadian Trade Union)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>TRS</code> (Trust established in Canada)</p>
                *                         </li>
                *                      </ul>
                *
                * 						            </li>
                *                </ul>
                * 				        </dd>
                *             <dt>.es</dt>
                *             <dd>
                * 					          <ul>
                *                   <li>
                *                      <p>
                *                         <code>ES_IDENTIFICATION</code>
                *                      </p>
                * 							              <p>The value of <code>ES_IDENTIFICATION</code> depends on the following values:</p>
                * 							              <ul>
                *                         <li>
                *                            <p>The value of <code>ES_LEGAL_FORM</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>The value of <code>ES_IDENTIFICATION_TYPE</code>
                *                            </p>
                *                         </li>
                *                      </ul>
                *
                * 							              <p>
                *                         <b>If <code>ES_LEGAL_FORM</code> is any value other than <code>INDIVIDUAL</code>:</b>
                *                      </p>
                * 							              <ul>
                *                         <li>
                *                            <p>Specify 1 letter + 8 numbers (CIF [Certificado de Identificación Fiscal])</p>
                *                         </li>
                *                         <li>
                *                            <p>Example: B12345678</p>
                *                         </li>
                *                      </ul>
                *
                * 							              <p>
                *                         <b>If <code>ES_LEGAL_FORM</code> is <code>INDIVIDUAL</code>, the value that you specify for
                * 								<code>ES_IDENTIFICATION</code> depends on the value of <code>ES_IDENTIFICATION_TYPE</code>:</b>
                *                      </p>
                * 							              <ul>
                *                         <li>
                * 									                  <p>If <code>ES_IDENTIFICATION_TYPE</code> is <code>DNI_AND_NIF</code> (for Spanish contacts):</p>
                * 									                  <ul>
                *                               <li>
                *                                  <p>Specify 8 numbers + 1 letter (DNI [Documento Nacional de Identidad], NIF [Número de Identificación Fiscal])</p>
                *                               </li>
                *                               <li>
                *                                  <p>Example: 12345678M</p>
                *                               </li>
                *                            </ul>
                * 								                </li>
                *                         <li>
                * 									                  <p>If <code>ES_IDENTIFICATION_TYPE</code> is <code>NIE</code> (for foreigners with legal residence):</p>
                * 									                  <ul>
                *                               <li>
                *                                  <p>Specify 1 letter + 7 numbers + 1 letter ( NIE [Número de Identidad de Extranjero])</p>
                *                               </li>
                *                               <li>
                *                                  <p>Example: Y1234567X</p>
                *                               </li>
                *                            </ul>
                * 								                </li>
                *                         <li>
                * 									                  <p>If <code>ES_IDENTIFICATION_TYPE</code> is <code>OTHER</code> (for contacts outside of Spain):</p>
                * 									                  <ul>
                *                               <li>
                *                                  <p>Specify a passport number, drivers license number, or national identity card number</p>
                *                               </li>
                *                            </ul>
                * 								                </li>
                *                      </ul>
                * 						            </li>
                *                   <li>
                *                      <p>
                *                         <code>ES_IDENTIFICATION_TYPE</code>
                *                      </p>
                * 							              <p>Valid values include the following:</p>
                * 							              <ul>
                *                         <li>
                *                            <p>
                *                               <code>DNI_AND_NIF</code> (For Spanish contacts)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>NIE</code> (For foreigners with legal residence)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>OTHER</code> (For contacts outside of Spain)</p>
                *                         </li>
                *                      </ul>
                * 						            </li>
                *                   <li>
                *                      <p>
                *                         <code>ES_LEGAL_FORM</code>
                *                      </p>
                * 							              <p>Valid values include the following:</p>
                * 							              <ul>
                *                         <li>
                *                            <p>
                *                               <code>ASSOCIATION</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>CENTRAL_GOVERNMENT_BODY</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>CIVIL_SOCIETY</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>COMMUNITY_OF_OWNERS</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>COMMUNITY_PROPERTY</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>CONSULATE</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>COOPERATIVE</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>DESIGNATION_OF_ORIGIN_SUPERVISORY_COUNCIL</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>ECONOMIC_INTEREST_GROUP</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>EMBASSY</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>ENTITY_MANAGING_NATURAL_AREAS</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>FARM_PARTNERSHIP</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>FOUNDATION</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>GENERAL_AND_LIMITED_PARTNERSHIP</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>GENERAL_PARTNERSHIP</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>INDIVIDUAL</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>LIMITED_COMPANY</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>LOCAL_AUTHORITY</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>LOCAL_PUBLIC_ENTITY</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>MUTUAL_INSURANCE_COMPANY</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>NATIONAL_PUBLIC_ENTITY</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>ORDER_OR_RELIGIOUS_INSTITUTION</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>OTHERS (Only for contacts outside of Spain)</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>POLITICAL_PARTY</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>PROFESSIONAL_ASSOCIATION</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>PUBLIC_LAW_ASSOCIATION</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>PUBLIC_LIMITED_COMPANY</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>REGIONAL_GOVERNMENT_BODY</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>REGIONAL_PUBLIC_ENTITY</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>SAVINGS_BANK</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>SPANISH_OFFICE</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>SPORTS_ASSOCIATION</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>SPORTS_FEDERATION</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>SPORTS_LIMITED_COMPANY</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>TEMPORARY_ALLIANCE_OF_ENTERPRISES</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>TRADE_UNION</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>WORKER_OWNED_COMPANY</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>WORKER_OWNED_LIMITED_COMPANY</code>
                *                            </p>
                *                         </li>
                *                      </ul>
                *
                * 						            </li>
                *                </ul>
                * 				        </dd>
                *             <dt>.eu</dt>
                *             <dd>
                * 		            <ul>
                *                   <li>
                *                      <p>
                *                         <code> EU_COUNTRY_OF_CITIZENSHIP</code>
                *                      </p>
                *                   </li>
                *                </ul>
                * 		          </dd>
                *             <dt>.fi</dt>
                *             <dd>
                * 					          <ul>
                *                   <li>
                *                      <p>
                *                         <code>BIRTH_DATE_IN_YYYY_MM_DD</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>FI_BUSINESS_NUMBER</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>FI_ID_NUMBER</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>FI_NATIONALITY</code>
                *                      </p>
                * 							              <p>Valid values include the following:</p>
                * 							              <ul>
                *                         <li>
                *                            <p>
                *                               <code>FINNISH</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>NOT_FINNISH</code>
                *                            </p>
                *                         </li>
                *                      </ul>
                * 						            </li>
                *                   <li>
                *                      <p>
                *                         <code>FI_ORGANIZATION_TYPE</code>
                *                      </p>
                * 							              <p>Valid values include the following:</p>
                * 							              <ul>
                *                         <li>
                *                            <p>
                *                               <code>COMPANY</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>CORPORATION</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>GOVERNMENT</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>INSTITUTION</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>POLITICAL_PARTY</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>PUBLIC_COMMUNITY</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>TOWNSHIP</code>
                *                            </p>
                *                         </li>
                *                      </ul>
                * 						            </li>
                *                </ul>
                * 				        </dd>
                *             <dt>.fr</dt>
                *             <dd>
                * 					          <ul>
                *                   <li>
                *                      <p>
                *                         <code>BIRTH_CITY</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>BIRTH_COUNTRY</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>BIRTH_DATE_IN_YYYY_MM_DD</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>BIRTH_DEPARTMENT</code>: Specify the INSEE code that corresponds with the department where the contact was born.
                * 							If the contact was born somewhere other than France or its overseas departments, specify <code>99</code>. For more information,
                * 							including a list of departments and the corresponding INSEE numbers, see the Wikipedia entry
                * 							<a href="https://en.wikipedia.org/wiki/Departments_of_France">Departments of France</a>.</p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>BRAND_NUMBER</code>
                *                      </p>
                *                   </li>
                *                </ul>
                * 				        </dd>
                *             <dt>.it</dt>
                *             <dd>
                * 					          <ul>
                *                   <li>
                *                      <p>
                *                         <code>IT_NATIONALITY</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>IT_PIN</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>IT_REGISTRANT_ENTITY_TYPE</code>
                *                      </p>
                * 							              <p>Valid values include the following:</p>
                * 							              <ul>
                *                         <li>
                *                            <p>
                *                               <code>FOREIGNERS</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>FREELANCE_WORKERS</code> (Freelance workers and professionals)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>ITALIAN_COMPANIES</code> (Italian companies and one-person companies)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>NON_PROFIT_ORGANIZATIONS</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>OTHER_SUBJECTS</code>
                *                            </p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>PUBLIC_ORGANIZATIONS</code>
                *                            </p>
                *                         </li>
                *                      </ul>
                * 						            </li>
                *                </ul>
                * 				        </dd>
                *             <dt>.ru</dt>
                *             <dd>
                * 					          <ul>
                *                   <li>
                *                      <p>
                *                         <code>BIRTH_DATE_IN_YYYY_MM_DD</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>RU_PASSPORT_DATA</code>
                *                      </p>
                *                   </li>
                *                </ul>
                * 				        </dd>
                *             <dt>.se</dt>
                *             <dd>
                * 					          <ul>
                *                   <li>
                *                      <p>
                *                         <code>BIRTH_COUNTRY</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>SE_ID_NUMBER</code>
                *                      </p>
                *                   </li>
                *                </ul>
                * 				        </dd>
                *             <dt>.sg</dt>
                *             <dd>
                * 					          <ul>
                *                   <li>
                *                      <p>
                *                         <code>SG_ID_NUMBER</code>
                *                      </p>
                *                   </li>
                *                </ul>
                * 				        </dd>
                *             <dt>.co.uk, .me.uk, and .org.uk</dt>
                *             <dd>
                * 					          <ul>
                *                   <li>
                *                      <p>
                *                         <code>UK_CONTACT_TYPE</code>
                *                      </p>
                * 							              <p>Valid values include the following:</p>
                * 							              <ul>
                *                         <li>
                *                            <p>
                *                               <code>CRC</code> (UK Corporation by Royal Charter)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>FCORP</code> (Non-UK Corporation)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>FIND</code> (Non-UK Individual, representing self)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>FOTHER</code> (Non-UK Entity that does not fit into any other category)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>GOV</code> (UK Government Body)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>IND</code> (UK Individual (representing self))</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>IP</code> (UK Industrial/Provident Registered Company)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>LLP</code> (UK Limited Liability Partnership)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>LTD</code> (UK Limited Company)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>OTHER</code> (UK Entity that does not fit into any other category)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>PLC</code> (UK Public Limited Company)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>PTNR</code> (UK Partnership)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>RCHAR</code> (UK Registered Charity)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>SCH</code> (UK School)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>STAT</code> (UK Statutory Body)</p>
                *                         </li>
                *                         <li>
                *                            <p>
                *                               <code>STRA</code> (UK Sole Trader)</p>
                *                         </li>
                *                      </ul>
                * 						            </li>
                *                   <li>
                *                      <p>
                *                         <code>UK_COMPANY_NUMBER</code>
                *                      </p>
                *                   </li>
                *                </ul>
                * 				        </dd>
                *          </dl>
                *
                * 		       <p>In addition, many TLDs require a <code>VAT_NUMBER</code>.</p>
                */
            Name: ExtraParamName | string | undefined;
            /**
                * <p>The value that corresponds with the name of an extra parameter.</p>
                */
            Value: string | undefined;
    }
    export namespace ExtraParam {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExtraParam) => any;
    }
    /**
        * <p>ContactDetail includes the following elements.</p>
        */
    export interface ContactDetail {
            /**
                * <p>First name of contact.</p>
                */
            FirstName?: string;
            /**
                * <p>Last name of contact.</p>
                */
            LastName?: string;
            /**
                * <p>Indicates whether the contact is a person, company, association, or public organization. Note the following:</p>
                * 		       <ul>
                *             <li>
                *                <p>If you specify a value other than <code>PERSON</code>, you must also specify a value for
                * 				<code>OrganizationName</code>.</p>
                *             </li>
                *             <li>
                *                <p>For some TLDs, the privacy protection available depends on the value that you specify for
                * 				<code>Contact Type</code>. For the privacy protection settings for your TLD, see
                * 				<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can
                * 					Register with Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i>
                *                </p>
                *             </li>
                *             <li>
                *                <p>For .es domains, the value of <code>ContactType</code> must be <code>PERSON</code> for all three contacts.</p>
                *             </li>
                *          </ul>
                */
            ContactType?: ContactType | string;
            /**
                * <p>Name of the organization for contact types other than <code>PERSON</code>.</p>
                */
            OrganizationName?: string;
            /**
                * <p>First line of the contact's address.</p>
                */
            AddressLine1?: string;
            /**
                * <p>Second line of contact's address, if any.</p>
                */
            AddressLine2?: string;
            /**
                * <p>The city of the contact's address.</p>
                */
            City?: string;
            /**
                * <p>The state or province of the contact's city.</p>
                */
            State?: string;
            /**
                * <p>Code for the country of the contact's address.</p>
                */
            CountryCode?: CountryCode | string;
            /**
                * <p>The zip or postal code of the contact's address.</p>
                */
            ZipCode?: string;
            /**
                * <p>The phone number of the contact.</p>
                * 		       <p>Constraints: Phone number must be specified in the format "+[country	dialing code].[number including any area code>]".
                * 			For example, a US phone number might appear as <code>"+1.1234567890"</code>.</p>
                */
            PhoneNumber?: string;
            /**
                * <p>Email address of the contact.</p>
                */
            Email?: string;
            /**
                * <p>Fax number of the contact.</p>
                * 		       <p>Constraints: Phone number must be specified in the format "+[country dialing code].[number including any area code]".
                * 			For example, a US phone number might appear as <code>"+1.1234567890"</code>.</p>
                */
            Fax?: string;
            /**
                * <p>A list of name-value pairs for parameters required by certain top-level domains.</p>
                */
            ExtraParams?: ExtraParam[];
    }
    export namespace ContactDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContactDetail) => any;
    }
    export interface DeleteDomainRequest {
            /**
                * <p>Name of the domain to be deleted.</p>
                */
            DomainName: string | undefined;
    }
    export namespace DeleteDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDomainRequest) => any;
    }
    export interface DeleteDomainResponse {
            /**
                * <p>Identifier for tracking the progress of the request.
                * 			To query the operation status, use <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>.</p>
                */
            OperationId?: string;
    }
    export namespace DeleteDomainResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDomainResponse) => any;
    }
    /**
        * <p>The request is already in progress for the domain.</p>
        */
    export class DuplicateRequest extends __BaseException {
            readonly name: "DuplicateRequest";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DuplicateRequest, __BaseException>);
    }
    /**
        * <p>The top-level domain does not support this operation.</p>
        */
    export class TLDRulesViolation extends __BaseException {
            readonly name: "TLDRulesViolation";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TLDRulesViolation, __BaseException>);
    }
    /**
        * <p>The DeleteTagsForDomainRequest includes the following elements.</p>
        */
    export interface DeleteTagsForDomainRequest {
            /**
                * <p>The domain for which you want to delete one or more tags.</p>
                */
            DomainName: string | undefined;
            /**
                * <p>A list of tag keys to delete.</p>
                */
            TagsToDelete: string[] | undefined;
    }
    export namespace DeleteTagsForDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTagsForDomainRequest) => any;
    }
    export interface DeleteTagsForDomainResponse {
    }
    export namespace DeleteTagsForDomainResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTagsForDomainResponse) => any;
    }
    export interface DisableDomainAutoRenewRequest {
            /**
                * <p>The name of the domain that you want to disable automatic renewal for.</p>
                */
            DomainName: string | undefined;
    }
    export namespace DisableDomainAutoRenewRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableDomainAutoRenewRequest) => any;
    }
    export interface DisableDomainAutoRenewResponse {
    }
    export namespace DisableDomainAutoRenewResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableDomainAutoRenewResponse) => any;
    }
    /**
        * <p>The DisableDomainTransferLock request includes the following element.</p>
        */
    export interface DisableDomainTransferLockRequest {
            /**
                * <p>The name of the domain that you want to remove the transfer lock for.</p>
                */
            DomainName: string | undefined;
    }
    export namespace DisableDomainTransferLockRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableDomainTransferLockRequest) => any;
    }
    /**
        * <p>The DisableDomainTransferLock response includes the following element.</p>
        */
    export interface DisableDomainTransferLockResponse {
            /**
                * <p>Identifier for tracking the progress of the request. To query the operation status, use
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>.</p>
                */
            OperationId: string | undefined;
    }
    export namespace DisableDomainTransferLockResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableDomainTransferLockResponse) => any;
    }
    /**
        * <p>Currency-specific price information.</p>
        */
    export interface PriceWithCurrency {
            /**
                * <p>The price of a domain, in a specific currency.</p>
                */
            Price: number | undefined;
            /**
                * <p>The currency specifier.</p>
                */
            Currency: string | undefined;
    }
    export namespace PriceWithCurrency {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PriceWithCurrency) => any;
    }
    /**
        * <p>Information about the domain price associated with a TLD.</p>
        */
    export interface DomainPrice {
            /**
                * <p>The name of the TLD for which the prices apply.</p>
                */
            Name?: string;
            /**
                * <p>The price for domain registration with Route 53.</p>
                */
            RegistrationPrice?: PriceWithCurrency;
            /**
                * <p>The price for transferring the domain registration to Route 53.</p>
                */
            TransferPrice?: PriceWithCurrency;
            /**
                * <p>The price for renewing domain registration with Route 53.</p>
                */
            RenewalPrice?: PriceWithCurrency;
            /**
                * <p>The price for changing domain ownership.</p>
                */
            ChangeOwnershipPrice?: PriceWithCurrency;
            /**
                * <p>The price for restoring the domain with Route 53.</p>
                */
            RestorationPrice?: PriceWithCurrency;
    }
    export namespace DomainPrice {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainPrice) => any;
    }
    /**
        * <p>Information about one suggested domain name.</p>
        */
    export interface DomainSuggestion {
            /**
                * <p>A suggested domain name.</p>
                */
            DomainName?: string;
            /**
                * <p>Whether the domain name is available for registering.</p>
                * 		       <note>
                *             <p>You can register only the domains that are designated as <code>AVAILABLE</code>.</p>
                *          </note>
                * 		       <p>Valid values:</p>
                * 		       <dl>
                *             <dt>AVAILABLE</dt>
                *             <dd>
                *                <p>The domain name is available.</p>
                *             </dd>
                *             <dt>AVAILABLE_RESERVED</dt>
                *             <dd>
                *                <p>The domain name is reserved under specific conditions.</p>
                *             </dd>
                *             <dt>AVAILABLE_PREORDER</dt>
                *             <dd>
                *                <p>The domain name is available and can be preordered.</p>
                *             </dd>
                *             <dt>DONT_KNOW</dt>
                *             <dd>
                *                <p>The TLD registry didn't reply with a definitive answer about whether the domain name is available.
                * 					Route 53 can return this response for a variety of reasons, for example, the registry is performing maintenance.
                * 					Try again later.</p>
                *             </dd>
                *             <dt>PENDING</dt>
                *             <dd>
                *                <p>The TLD registry didn't return a response in the expected amount of time. When the response is delayed,
                * 					it usually takes just a few extra seconds. You can resubmit the request immediately.</p>
                *             </dd>
                *             <dt>RESERVED</dt>
                *             <dd>
                *                <p>The domain name has been reserved for another person or organization.</p>
                *             </dd>
                *             <dt>UNAVAILABLE</dt>
                *             <dd>
                *                <p>The domain name is not available.</p>
                *             </dd>
                *             <dt>UNAVAILABLE_PREMIUM</dt>
                *             <dd>
                *                <p>The domain name is not available.</p>
                *             </dd>
                *             <dt>UNAVAILABLE_RESTRICTED</dt>
                *             <dd>
                *                <p>The domain name is forbidden.</p>
                *             </dd>
                *          </dl>
                */
            Availability?: string;
    }
    export namespace DomainSuggestion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainSuggestion) => any;
    }
    /**
        * <p>Summary information about one domain.</p>
        */
    export interface DomainSummary {
            /**
                * <p>The name of the domain that the summary information applies to.</p>
                */
            DomainName: string | undefined;
            /**
                * <p>Indicates whether the domain is automatically renewed upon expiration.</p>
                */
            AutoRenew?: boolean;
            /**
                * <p>Indicates whether a domain is locked from unauthorized transfer to another party.</p>
                */
            TransferLock?: boolean;
            /**
                * <p>Expiration date of the domain in Unix time format and Coordinated Universal Time (UTC).</p>
                */
            Expiry?: Date;
    }
    export namespace DomainSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainSummary) => any;
    }
    export interface EnableDomainAutoRenewRequest {
            /**
                * <p>The name of the domain that you want to enable automatic renewal for.</p>
                */
            DomainName: string | undefined;
    }
    export namespace EnableDomainAutoRenewRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableDomainAutoRenewRequest) => any;
    }
    export interface EnableDomainAutoRenewResponse {
    }
    export namespace EnableDomainAutoRenewResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableDomainAutoRenewResponse) => any;
    }
    /**
        * <p>A request to set the transfer lock for the specified domain.</p>
        */
    export interface EnableDomainTransferLockRequest {
            /**
                * <p>The name of the domain that you want to set the transfer lock for.</p>
                */
            DomainName: string | undefined;
    }
    export namespace EnableDomainTransferLockRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableDomainTransferLockRequest) => any;
    }
    /**
        * <p>The EnableDomainTransferLock response includes the following elements.</p>
        */
    export interface EnableDomainTransferLockResponse {
            /**
                * <p>Identifier for tracking the progress of the request. To use this ID to query the operation status, use GetOperationDetail.</p>
                */
            OperationId: string | undefined;
    }
    export namespace EnableDomainTransferLockResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableDomainTransferLockResponse) => any;
    }
    export enum ListDomainsAttributeName {
            DomainName = "DomainName",
            Expiry = "Expiry"
    }
    export enum Operator {
            BEGINS_WITH = "BEGINS_WITH",
            GE = "GE",
            LE = "LE"
    }
    /**
        * <p>Information for the filtering of a list of domains returned by
        * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains__ListDomains.html">ListDomains</a>.</p>
        */
    export interface FilterCondition {
            /**
                * <p>Name of the field which should be used for filtering the list of domains.</p>
                */
            Name: ListDomainsAttributeName | string | undefined;
            /**
                * <p>The operator values for filtering domain names. The values can be:</p>
                * 		       <ul>
                *             <li>
                *                <p>
                *                   <code>LE</code>: Less than, or equal to</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>GE</code>: Greater than, or equal to</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>BEGINS_WITH</code>: Begins with</p>
                *             </li>
                *          </ul>
                */
            Operator: Operator | string | undefined;
            /**
                * <p> An array of strings presenting values to compare. Only 1 item in the list is currently supported.</p>
                */
            Values: string[] | undefined;
    }
    export namespace FilterCondition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FilterCondition) => any;
    }
    export interface GetContactReachabilityStatusRequest {
            /**
                * <p>The name of the domain for which you want to know whether the registrant contact has confirmed that the email address is valid.</p>
                */
            domainName?: string;
    }
    export namespace GetContactReachabilityStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContactReachabilityStatusRequest) => any;
    }
    export enum ReachabilityStatus {
            DONE = "DONE",
            EXPIRED = "EXPIRED",
            PENDING = "PENDING"
    }
    export interface GetContactReachabilityStatusResponse {
            /**
                * <p>The domain name for which you requested the reachability status.</p>
                */
            domainName?: string;
            /**
                * <p>Whether the registrant contact has responded. Values include the following:</p>
                * 		       <dl>
                *             <dt>PENDING</dt>
                *             <dd>
                *                <p>We sent the confirmation email and haven't received a response yet.</p>
                *             </dd>
                *             <dt>DONE</dt>
                *             <dd>
                *                <p>We sent the email and got confirmation from the registrant contact.</p>
                *             </dd>
                *             <dt>EXPIRED</dt>
                *             <dd>
                *                <p>The time limit expired before the registrant contact responded.</p>
                *             </dd>
                *          </dl>
                */
            status?: ReachabilityStatus | string;
    }
    export namespace GetContactReachabilityStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContactReachabilityStatusResponse) => any;
    }
    /**
        * <p>The GetDomainDetail request includes the following element.</p>
        */
    export interface GetDomainDetailRequest {
            /**
                * <p>The name of the domain that you want to get detailed information about.</p>
                */
            DomainName: string | undefined;
    }
    export namespace GetDomainDetailRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDomainDetailRequest) => any;
    }
    /**
        * <p>Nameserver includes the following elements.</p>
        */
    export interface Nameserver {
            /**
                * <p>The fully qualified host name of the name server.</p>
                * 		       <p>Constraint: Maximum 255 characters</p>
                */
            Name: string | undefined;
            /**
                * <p>Glue IP address of a name server entry. Glue IP addresses are required only when the name of the name server
                * 			is a subdomain of the domain. For example, if your domain is example.com and the name server for the domain is
                * 			ns.example.com, you need to specify the IP address for ns.example.com.</p>
                * 		       <p>Constraints: The list can contain only one IPv4 and one IPv6 address.</p>
                */
            GlueIps?: string[];
    }
    export namespace Nameserver {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Nameserver) => any;
    }
    /**
        * <p>The GetDomainDetail response includes the following elements.</p>
        */
    export interface GetDomainDetailResponse {
            /**
                * <p>The name of a domain.</p>
                */
            DomainName: string | undefined;
            /**
                * <p>The
                * 			name of the domain.</p>
                */
            Nameservers: Nameserver[] | undefined;
            /**
                * <p>Specifies whether the domain registration is set to renew automatically.</p>
                */
            AutoRenew?: boolean;
            /**
                * <p>Provides details about the domain administrative contact.</p>
                */
            AdminContact: ContactDetail | undefined;
            /**
                * <p>Provides details about the domain registrant.</p>
                */
            RegistrantContact: ContactDetail | undefined;
            /**
                * <p>Provides details about the domain technical contact.</p>
                */
            TechContact: ContactDetail | undefined;
            /**
                * <p>Specifies whether contact information is concealed from WHOIS
                * 			queries. If the value is <code>true</code>, WHOIS ("who is") queries return contact
                * 			information either for Amazon Registrar (for .com, .net, and .org domains) or for our
                * 			registrar associate, Gandi (for all other TLDs). If the value is <code>false</code>,
                * 			WHOIS queries return the information that you entered for the admin contact.</p>
                */
            AdminPrivacy?: boolean;
            /**
                * <p>Specifies whether contact information is concealed from WHOIS queries. If the value is <code>true</code>,
                * 			WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains)
                * 			or for our registrar associate, Gandi (for all other TLDs). If the value is <code>false</code>,
                * 			WHOIS queries return the information that you entered for the registrant contact (domain owner).</p>
                */
            RegistrantPrivacy?: boolean;
            /**
                * <p>Specifies whether contact information is concealed from WHOIS queries. If the value is <code>true</code>,
                * 			WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains)
                * 			or for our registrar associate, Gandi (for all other TLDs). If the value is <code>false</code>,
                * 			WHOIS queries return the information that you entered for the technical contact.</p>
                */
            TechPrivacy?: boolean;
            /**
                * <p>Name of the registrar of the domain as identified in the registry. Domains with a .com, .net, or .org TLD are registered by
                * 			Amazon Registrar. All other domains are registered by our registrar associate, Gandi. The value for domains that are registered by
                * 			Gandi is <code>"GANDI SAS"</code>. </p>
                */
            RegistrarName?: string;
            /**
                * <p>The fully qualified name of the WHOIS server that can answer the WHOIS query for the domain.</p>
                */
            WhoIsServer?: string;
            /**
                * <p>Web address of the registrar.</p>
                */
            RegistrarUrl?: string;
            /**
                * <p>Email address to contact to report incorrect contact information for a domain, to report that the domain
                * 			is being used to send spam, to report that someone is cybersquatting on a domain name, or report some other type of abuse.</p>
                */
            AbuseContactEmail?: string;
            /**
                * <p>Phone number for reporting abuse.</p>
                */
            AbuseContactPhone?: string;
            /**
                * <p>Reserved for future use.</p>
                */
            RegistryDomainId?: string;
            /**
                * <p>The date when the domain was created as found in the response to a WHOIS query. The date and time is in
                * 			Unix time format and Coordinated Universal time (UTC).</p>
                */
            CreationDate?: Date;
            /**
                * <p>The last updated date of the domain as found in the response to a WHOIS query. The date and time is in
                * 			Unix time format and Coordinated Universal time (UTC).</p>
                */
            UpdatedDate?: Date;
            /**
                * <p>The date when the registration for the domain is set to expire. The date and time is in
                * 			Unix time format and Coordinated Universal time (UTC).</p>
                */
            ExpirationDate?: Date;
            /**
                * <p>Reseller of the domain. Domains registered or transferred using Route 53 domains will have <code>"Amazon"</code>
                * 			as the reseller. </p>
                */
            Reseller?: string;
            /**
                * <p>Deprecated.</p>
                */
            DnsSec?: string;
            /**
                * <p>An array of domain name status codes, also known as Extensible Provisioning Protocol (EPP) status codes.</p>
                * 		       <p>ICANN, the organization that maintains a central database of domain names, has developed a set of domain name
                * 			status codes that tell you the status of a variety of operations on a domain name, for example, registering a domain name,
                * 			transferring a domain name to another registrar, renewing the registration for a domain name, and so on. All registrars
                * 			use this same set of status codes.</p>
                * 		       <p>For a current list of domain name status codes and an explanation of what each code means, go to the
                * 			<a href="https://www.icann.org/">ICANN website</a> and search for <code>epp status codes</code>.
                * 			(Search on the ICANN website; web searches sometimes return an old version of the document.)</p>
                */
            StatusList?: string[];
    }
    export namespace GetDomainDetailResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDomainDetailResponse) => any;
    }
    export interface GetDomainSuggestionsRequest {
            /**
                * <p>A domain name that you want to use as the basis for a list of possible domain names. The top-level domain (TLD), such as .com,
                * 			must be a TLD that Route 53 supports. For a list of supported TLDs, see
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a> in the
                * 			<i>Amazon Route 53 Developer Guide</i>.</p>
                * 		       <p>The domain name can contain only the following characters:</p>
                * 		       <ul>
                *             <li>
                *                <p>Letters a through z. Domain names are not case sensitive.</p>
                *             </li>
                *             <li>
                *                <p>Numbers 0 through 9.</p>
                *             </li>
                *             <li>
                *                <p>Hyphen (-). You can't specify a hyphen at the beginning or end of a label. </p>
                *             </li>
                *             <li>
                *                <p>Period (.) to separate the labels in the name, such as the <code>.</code> in <code>example.com</code>.</p>
                *             </li>
                *          </ul>
                * 		       <p>Internationalized domain names are not supported for some top-level domains. To determine whether the TLD that you want to use
                * 			supports internationalized domain names, see
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a>.
                * 			</p>
                */
            DomainName: string | undefined;
            /**
                * <p>The number of suggested domain names that you want Route 53 to return. Specify a value between 1 and 50.</p>
                */
            SuggestionCount: number | undefined;
            /**
                * <p>If <code>OnlyAvailable</code> is <code>true</code>, Route 53 returns only domain names that are available.
                * 			If <code>OnlyAvailable</code> is <code>false</code>, Route 53 returns domain names without checking whether they're
                * 			available to be registered. To determine whether the domain is available, you can call <code>checkDomainAvailability</code>
                * 			for each suggestion.</p>
                */
            OnlyAvailable: boolean | undefined;
    }
    export namespace GetDomainSuggestionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDomainSuggestionsRequest) => any;
    }
    export interface GetDomainSuggestionsResponse {
            /**
                * <p>A list of possible domain names. If you specified <code>true</code> for <code>OnlyAvailable</code> in the request,
                * 			the list contains only domains that are available for registration.</p>
                */
            SuggestionsList?: DomainSuggestion[];
    }
    export namespace GetDomainSuggestionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDomainSuggestionsResponse) => any;
    }
    /**
        * <p>The
        * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
        * 			request includes the following element.</p>
        */
    export interface GetOperationDetailRequest {
            /**
                * <p>The identifier for the operation for which you want to get the status. Route 53 returned the identifier
                * 			in the response to the original request.</p>
                */
            OperationId: string | undefined;
    }
    export namespace GetOperationDetailRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOperationDetailRequest) => any;
    }
    export type OperationStatus = "ERROR" | "FAILED" | "IN_PROGRESS" | "SUBMITTED" | "SUCCESSFUL";
    /**
        * <p>The GetOperationDetail response includes the following elements.</p>
        */
    export interface GetOperationDetailResponse {
            /**
                * <p>The identifier for the operation.</p>
                */
            OperationId?: string;
            /**
                * <p>The current status of the requested operation in the system.</p>
                */
            Status?: OperationStatus | string;
            /**
                * <p>Detailed information on the status including possible errors.</p>
                */
            Message?: string;
            /**
                * <p>The name of a domain.</p>
                */
            DomainName?: string;
            /**
                * <p>The type of operation that was requested.</p>
                */
            Type?: OperationType | string;
            /**
                * <p>The date when the request was submitted.</p>
                */
            SubmittedDate?: Date;
    }
    export namespace GetOperationDetailResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOperationDetailResponse) => any;
    }
    export enum SortOrder {
            ASC = "ASC",
            DESC = "DESC"
    }
    /**
        * <p>Information for sorting a list of domains.</p>
        */
    export interface SortCondition {
            /**
                * <p>Field to be used for sorting the list of domains. It can be either the name or the expiration for a domain. Note that if
                * 			<code>filterCondition</code> is used in the same
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains__ListDomains.html">ListDomains</a>
                * 			 call, the field used for sorting has to be the same as the field used for filtering.</p>
                */
            Name: ListDomainsAttributeName | string | undefined;
            /**
                * <p>The sort order for a list of domains. Either ascending (ASC) or descending (DES).</p>
                */
            SortOrder: SortOrder | string | undefined;
    }
    export namespace SortCondition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SortCondition) => any;
    }
    /**
        * <p>The ListDomains request includes the following elements.</p>
        */
    export interface ListDomainsRequest {
            /**
                * <p>A complex type that contains information about the filters applied during the <code>ListDomains</code> request. The filter conditions can
                * 			include domain name and domain expiration.</p>
                */
            FilterConditions?: FilterCondition[];
            /**
                * <p>A complex type that contains information about the requested ordering of domains in the returned list.</p>
                */
            SortCondition?: SortCondition;
            /**
                * <p>For an initial request for a list of domains, omit this element. If the number of domains
                * 			that are associated with the current Amazon Web Services account is greater than the value that you specified for
                * 			<code>MaxItems</code>, you can use <code>Marker</code> to return additional domains. Get the value of
                * 			<code>NextPageMarker</code> from the previous response, and submit another request that includes the
                * 			value of <code>NextPageMarker</code> in the <code>Marker</code> element.</p>
                * 		       <p>Constraints: The marker must match the value specified in the previous request.</p>
                */
            Marker?: string;
            /**
                * <p>Number of domains to be returned.</p>
                * 		       <p>Default: 20</p>
                */
            MaxItems?: number;
    }
    export namespace ListDomainsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDomainsRequest) => any;
    }
    /**
        * <p>The ListDomains response includes the following elements.</p>
        */
    export interface ListDomainsResponse {
            /**
                * <p>A list of domains.</p>
                */
            Domains: DomainSummary[] | undefined;
            /**
                * <p>If there are more domains than you specified for <code>MaxItems</code> in the request, submit another
                * 			request and include the value of <code>NextPageMarker</code> in the value of <code>Marker</code>.</p>
                */
            NextPageMarker?: string;
    }
    export namespace ListDomainsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDomainsResponse) => any;
    }
    /**
        * <p>The ListOperations request includes the following elements.</p>
        */
    export interface ListOperationsRequest {
            /**
                * <p>An optional parameter that lets you get information about all the operations that you submitted after a specified date and time.
                * 			Specify the date and time in Unix time format and Coordinated Universal time (UTC).</p>
                */
            SubmittedSince?: Date;
            /**
                * <p>For an initial request for a list of operations, omit this element. If the number of operations that are
                * 			not yet complete is greater than the value that you specified for <code>MaxItems</code>, you can use <code>Marker</code>
                * 			to return additional operations. Get the value of <code>NextPageMarker</code> from the previous response,
                * 			and submit another request that includes the value of <code>NextPageMarker</code> in the <code>Marker</code> element.</p>
                */
            Marker?: string;
            /**
                * <p>Number of domains to be returned.</p>
                * 		       <p>Default: 20</p>
                */
            MaxItems?: number;
    }
    export namespace ListOperationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOperationsRequest) => any;
    }
    /**
        * <p>OperationSummary includes the following elements.</p>
        */
    export interface OperationSummary {
            /**
                * <p>Identifier returned to track the requested action.</p>
                */
            OperationId: string | undefined;
            /**
                * <p>The current status of the requested operation in the system.</p>
                */
            Status: OperationStatus | string | undefined;
            /**
                * <p>Type of the action requested.</p>
                */
            Type: OperationType | string | undefined;
            /**
                * <p>The date when the request was submitted.</p>
                */
            SubmittedDate: Date | undefined;
    }
    export namespace OperationSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OperationSummary) => any;
    }
    /**
        * <p>The ListOperations response includes the following elements.</p>
        */
    export interface ListOperationsResponse {
            /**
                * <p>Lists summaries of the operations.</p>
                */
            Operations: OperationSummary[] | undefined;
            /**
                * <p>If there are more operations than you specified for <code>MaxItems</code> in the request, submit another
                * 			request and include the value of <code>NextPageMarker</code> in the value of <code>Marker</code>.</p>
                */
            NextPageMarker?: string;
    }
    export namespace ListOperationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOperationsResponse) => any;
    }
    export interface ListPricesRequest {
            /**
                * <p>The TLD for which you want to receive the pricing information. For example.
                * 				<code>.net</code>.</p>
                * 		       <p>If a <code>Tld</code> value is not provided, a list of prices for all TLDs supported by Route 53
                * 		is returned.</p>
                */
            Tld?: string;
            /**
                * <p>For an initial request for a list of prices, omit this element.
                * 			If the number of prices that are not yet complete is greater than the value that you specified for <code>MaxItems</code>,
                * 			you can use <code>Marker</code> to return additional prices. Get the value of <code>NextPageMarker</code> from the previous response,
                * 			and submit another request that includes the value of <code>NextPageMarker</code> in the <code>Marker</code> element. </p>
                * 		       <p>Used only for all TLDs. If you specify a TLD, don't specify a <code>Marker</code>.</p>
                */
            Marker?: string;
            /**
                * <p>Number of <code>Prices</code> to be returned.</p>
                * 		       <p>Used only for all TLDs. If you specify a TLD, don't specify a <code>MaxItems</code>.</p>
                */
            MaxItems?: number;
    }
    export namespace ListPricesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPricesRequest) => any;
    }
    export interface ListPricesResponse {
            /**
                * <p>A complex type that includes all the pricing information. If you specify a TLD, this array
                * 			contains only the pricing for that TLD.</p>
                */
            Prices: DomainPrice[] | undefined;
            /**
                * <p>If there are more prices than you specified for <code>MaxItems</code> in the request, submit another request and include the value of
                * 			<code>NextPageMarker</code> in the value of <code>Marker</code>. </p>
                * 		       <p>Used only for all TLDs. If you specify a TLD, don't specify a
                * 			<code>NextPageMarker</code>.</p>
                */
            NextPageMarker?: string;
    }
    export namespace ListPricesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPricesResponse) => any;
    }
    /**
        * <p>The ListTagsForDomainRequest includes the following elements.</p>
        */
    export interface ListTagsForDomainRequest {
            /**
                * <p>The domain for which you want to get a list of tags.</p>
                */
            DomainName: string | undefined;
    }
    export namespace ListTagsForDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForDomainRequest) => any;
    }
    /**
        * <p>Each tag includes the following elements.</p>
        */
    export interface Tag {
            /**
                * <p>The key (name) of a tag.</p>
                * 		       <p>Valid values: A-Z, a-z, 0-9, space, ".:/=+\-@"</p>
                * 		       <p>Constraints: Each key can be 1-128 characters long.</p>
                */
            Key?: string;
            /**
                * <p>The value of a tag.</p>
                * 		       <p>Valid values: A-Z, a-z, 0-9, space, ".:/=+\-@"</p>
                * 		       <p>Constraints: Each value can be 0-256 characters long.</p>
                */
            Value?: string;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    /**
        * <p>The ListTagsForDomain response includes the following elements.</p>
        */
    export interface ListTagsForDomainResponse {
            /**
                * <p>A list of the tags that are associated with the specified domain.</p>
                */
            TagList: Tag[] | undefined;
    }
    export namespace ListTagsForDomainResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForDomainResponse) => any;
    }
    /**
        * <p>The RegisterDomain request includes the following elements.</p>
        */
    export interface RegisterDomainRequest {
            /**
                * <p>The domain name that you want to register. The top-level domain (TLD), such as .com, must be a TLD that Route 53 supports.
                * 			For a list of supported TLDs, see
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a> in the
                * 			<i>Amazon Route 53 Developer Guide</i>.</p>
                * 		       <p>The domain name can contain only the following characters:</p>
                * 		       <ul>
                *             <li>
                *                <p>Letters a through z. Domain names are not case sensitive.</p>
                *             </li>
                *             <li>
                *                <p>Numbers 0 through 9.</p>
                *             </li>
                *             <li>
                *                <p>Hyphen (-). You can't specify a hyphen at the beginning or end of a label. </p>
                *             </li>
                *             <li>
                *                <p>Period (.) to separate the labels in the name, such as the <code>.</code> in <code>example.com</code>.</p>
                *             </li>
                *          </ul>
                * 		       <p>Internationalized domain names are not supported for some top-level domains. To determine whether the TLD that you want to use supports
                * 			internationalized domain names, see
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a>.
                * 			For more information, see
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html#domain-name-format-idns">Formatting Internationalized Domain Names</a>.
                * 		</p>
                */
            DomainName: string | undefined;
            /**
                * <p>Reserved for future use.</p>
                */
            IdnLangCode?: string;
            /**
                * <p>The number of years that you want to register the domain for. Domains are registered for a minimum of one year.
                * 			The maximum period depends on the top-level domain. For the range of valid values for your domain, see
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a> in the
                * 			<i>Amazon Route 53 Developer Guide</i>.</p>
                * 		       <p>Default: 1</p>
                */
            DurationInYears: number | undefined;
            /**
                * <p>Indicates whether the domain will be automatically renewed (<code>true</code>) or not (<code>false</code>).
                * 			Autorenewal only takes effect after the account is charged.</p>
                * 		       <p>Default: <code>true</code>
                *          </p>
                */
            AutoRenew?: boolean;
            /**
                * <p>Provides detailed contact information. For information about the values that you specify for each element, see
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html">ContactDetail</a>.</p>
                */
            AdminContact: ContactDetail | undefined;
            /**
                * <p>Provides detailed contact information. For information about the values that you specify for each element, see
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html">ContactDetail</a>.</p>
                */
            RegistrantContact: ContactDetail | undefined;
            /**
                * <p>Provides detailed contact information. For information about the values that you specify for each element, see
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html">ContactDetail</a>.</p>
                */
            TechContact: ContactDetail | undefined;
            /**
                * <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>,
                * 			WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains)
                * 			or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>,
                * 			WHOIS queries return the information that you entered for the admin contact.</p>
                * 		       <note>
                * 			         <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
                * 		       </note>
                * 		       <p>Default: <code>true</code>
                *          </p>
                */
            PrivacyProtectAdminContact?: boolean;
            /**
                * <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>,
                * 			WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains)
                * 			or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>,
                * 			WHOIS queries return the information that you entered for the registrant contact (the domain owner).</p>
                * 		       <note>
                * 			         <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
                * 		       </note>
                * 		       <p>Default: <code>true</code>
                *          </p>
                */
            PrivacyProtectRegistrantContact?: boolean;
            /**
                * <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>,
                * 			WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains)
                * 			or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>,
                * 			WHOIS queries return the information that you entered for the technical contact.</p>
                * 		       <note>
                * 			         <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
                * 		       </note>
                * 		       <p>Default: <code>true</code>
                *          </p>
                */
            PrivacyProtectTechContact?: boolean;
    }
    export namespace RegisterDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterDomainRequest) => any;
    }
    /**
        * <p>The RegisterDomain response includes the following element.</p>
        */
    export interface RegisterDomainResponse {
            /**
                * <p>Identifier for tracking the progress of the request. To query the operation status, use
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>.</p>
                */
            OperationId: string | undefined;
    }
    export namespace RegisterDomainResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterDomainResponse) => any;
    }
    /**
        * <p>The RejectDomainTransferFromAnotherAwsAccount request includes the following element.</p>
        */
    export interface RejectDomainTransferFromAnotherAwsAccountRequest {
            /**
                * <p>The name of the domain that was specified when another Amazon Web Services account submitted a
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>
                * 			request.
                * 		</p>
                */
            DomainName: string | undefined;
    }
    export namespace RejectDomainTransferFromAnotherAwsAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RejectDomainTransferFromAnotherAwsAccountRequest) => any;
    }
    /**
        * <p>The RejectDomainTransferFromAnotherAwsAccount response includes the following element.</p>
        */
    export interface RejectDomainTransferFromAnotherAwsAccountResponse {
            /**
                * <p>The identifier that <code>TransferDomainToAnotherAwsAccount</code> returned to track the progress of the request.
                * 			Because the transfer request was rejected, the value is no longer valid, and you can't use <code>GetOperationDetail</code>
                * 			to query the operation status.</p>
                */
            OperationId?: string;
    }
    export namespace RejectDomainTransferFromAnotherAwsAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RejectDomainTransferFromAnotherAwsAccountResponse) => any;
    }
    /**
        * <p>A <code>RenewDomain</code> request includes the number of years that you want to renew for and the current expiration year.</p>
        */
    export interface RenewDomainRequest {
            /**
                * <p>The name of the domain that you want to renew.</p>
                */
            DomainName: string | undefined;
            /**
                * <p>The number of years that you want to renew the domain for. The maximum number of years depends on the top-level domain.
                * 			For the range of valid values for your domain, see
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a> in the
                * 			<i>Amazon Route 53 Developer Guide</i>.</p>
                * 		       <p>Default: 1</p>
                */
            DurationInYears?: number;
            /**
                * <p>The year when the registration for the domain is set to expire. This value must match the current expiration date for the domain.</p>
                */
            CurrentExpiryYear: number | undefined;
    }
    export namespace RenewDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RenewDomainRequest) => any;
    }
    export interface RenewDomainResponse {
            /**
                * <p>Identifier for tracking the progress of the request. To query the operation status, use
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>.</p>
                */
            OperationId: string | undefined;
    }
    export namespace RenewDomainResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RenewDomainResponse) => any;
    }
    export interface ResendContactReachabilityEmailRequest {
            /**
                * <p>The name of the domain for which you want Route 53 to resend a confirmation email to the registrant contact.</p>
                */
            domainName?: string;
    }
    export namespace ResendContactReachabilityEmailRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResendContactReachabilityEmailRequest) => any;
    }
    export interface ResendContactReachabilityEmailResponse {
            /**
                * <p>The domain name for which you requested a confirmation email.</p>
                */
            domainName?: string;
            /**
                * <p>The email address for the registrant contact at the time that we sent the verification email.</p>
                */
            emailAddress?: string;
            /**
                * <p>
                *             <code>True</code> if the email address for the registrant contact has already been verified, and <code>false</code> otherwise.
                * 			If the email address has already been verified, we don't send another confirmation email.</p>
                */
            isAlreadyVerified?: boolean;
    }
    export namespace ResendContactReachabilityEmailResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResendContactReachabilityEmailResponse) => any;
    }
    /**
        * <p>A request for the authorization code for the specified domain. To transfer a domain to another registrar, you provide
        * 			this value to the new registrar.</p>
        */
    export interface RetrieveDomainAuthCodeRequest {
            /**
                * <p>The name of the domain that you want to get an authorization code for.</p>
                */
            DomainName: string | undefined;
    }
    export namespace RetrieveDomainAuthCodeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RetrieveDomainAuthCodeRequest) => any;
    }
    /**
        * <p>The RetrieveDomainAuthCode response includes the following element.</p>
        */
    export interface RetrieveDomainAuthCodeResponse {
            /**
                * <p>The authorization code for the domain.</p>
                */
            AuthCode: string | undefined;
    }
    export namespace RetrieveDomainAuthCodeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RetrieveDomainAuthCodeResponse) => any;
    }
    /**
        * <p>The TransferDomain request includes the following elements.</p>
        */
    export interface TransferDomainRequest {
            /**
                * <p>The name of the domain that you want to transfer to Route 53. The top-level domain (TLD), such as .com, must be a TLD that Route 53 supports.
                * 			For a list of supported TLDs, see
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can Register with Amazon Route 53</a> in the
                * 			<i>Amazon Route 53 Developer Guide</i>.</p>
                * 		       <p>The domain name can contain only the following characters:</p>
                * 		       <ul>
                *             <li>
                *                <p>Letters a through z. Domain names are not case sensitive.</p>
                *             </li>
                *             <li>
                *                <p>Numbers 0 through 9.</p>
                *             </li>
                *             <li>
                *                <p>Hyphen (-). You can't specify a hyphen at the beginning or end of a label. </p>
                *             </li>
                *             <li>
                *                <p>Period (.) to separate the labels in the name, such as the <code>.</code> in <code>example.com</code>.</p>
                *             </li>
                *          </ul>
                */
            DomainName: string | undefined;
            /**
                * <p>Reserved for future use.</p>
                */
            IdnLangCode?: string;
            /**
                * <p>The number of years that you want to register the domain for. Domains are registered for a minimum of one year.
                * 			The maximum period depends on the top-level domain.</p>
                * 		       <p>Default: 1</p>
                */
            DurationInYears: number | undefined;
            /**
                * <p>Contains details for the host and glue IP addresses.</p>
                */
            Nameservers?: Nameserver[];
            /**
                * <p>The authorization code for the domain. You get this value from the current registrar.</p>
                */
            AuthCode?: string;
            /**
                * <p>Indicates whether the domain will be automatically renewed (true) or not (false). Autorenewal only takes effect
                * 			after the account is charged.</p>
                * 		       <p>Default: true</p>
                */
            AutoRenew?: boolean;
            /**
                * <p>Provides detailed contact information.</p>
                */
            AdminContact: ContactDetail | undefined;
            /**
                * <p>Provides detailed contact information.</p>
                */
            RegistrantContact: ContactDetail | undefined;
            /**
                * <p>Provides detailed contact information.</p>
                */
            TechContact: ContactDetail | undefined;
            /**
                * <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>,
                * 			WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains)
                * 			or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>,
                * 			WHOIS queries return the information that you entered for the admin contact.</p>
                * 		       <note>
                * 			         <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
                * 		       </note>
                * 		       <p>Default: <code>true</code>
                *          </p>
                */
            PrivacyProtectAdminContact?: boolean;
            /**
                * <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>,
                * 			WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains)
                * 			or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>,
                * 			WHOIS queries return the information that you entered for the registrant contact (domain owner).</p>
                * 		       <note>
                * 			         <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
                * 		       </note>
                * 		       <p>Default: <code>true</code>
                *          </p>
                */
            PrivacyProtectRegistrantContact?: boolean;
            /**
                * <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>,
                * 			WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains)
                * 			or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>,
                * 			WHOIS queries return the information that you entered for the technical contact.</p>
                * 		       <note>
                * 			         <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
                * 		       </note>
                * 		       <p>Default: <code>true</code>
                *          </p>
                */
            PrivacyProtectTechContact?: boolean;
    }
    export namespace TransferDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransferDomainRequest) => any;
    }
    /**
        * <p>The TransferDomain response includes the following element.</p>
        */
    export interface TransferDomainResponse {
            /**
                * <p>Identifier for tracking the progress of the request. To query the operation status, use
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>.</p>
                */
            OperationId: string | undefined;
    }
    export namespace TransferDomainResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransferDomainResponse) => any;
    }
    /**
        * <p>The TransferDomainToAnotherAwsAccount request includes the following elements.</p>
        */
    export interface TransferDomainToAnotherAwsAccountRequest {
            /**
                * <p>The name of the domain that you want to transfer from the current Amazon Web Services account to another account.</p>
                */
            DomainName: string | undefined;
            /**
                * <p>The account ID of the Amazon Web Services account that you want to transfer the domain to, for example, <code>111122223333</code>.</p>
                */
            AccountId: string | undefined;
    }
    export namespace TransferDomainToAnotherAwsAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransferDomainToAnotherAwsAccountRequest) => any;
    }
    /**
        * <p>The <code>TransferDomainToAnotherAwsAccount</code> response includes the following elements.</p>
        */
    export interface TransferDomainToAnotherAwsAccountResponse {
            /**
                * <p>Identifier for tracking the progress of the request. To query the operation status, use
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>.</p>
                */
            OperationId?: string;
            /**
                * <p>To finish transferring a domain to another Amazon Web Services account, the account that the domain is being transferred to must submit an
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AcceptDomainTransferFromAnotherAwsAccount.html">AcceptDomainTransferFromAnotherAwsAccount</a>
                * 			request. The request must include the value of the <code>Password</code> element that was returned in the
                * 			<code>TransferDomainToAnotherAwsAccount</code> response.</p>
                */
            Password?: string;
    }
    export namespace TransferDomainToAnotherAwsAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransferDomainToAnotherAwsAccountResponse) => any;
    }
    /**
        * <p>The UpdateDomainContact request includes the following elements.</p>
        */
    export interface UpdateDomainContactRequest {
            /**
                * <p>The name of the domain that you want to update contact information for.</p>
                */
            DomainName: string | undefined;
            /**
                * <p>Provides detailed contact information.</p>
                */
            AdminContact?: ContactDetail;
            /**
                * <p>Provides detailed contact information.</p>
                */
            RegistrantContact?: ContactDetail;
            /**
                * <p>Provides detailed contact information.</p>
                */
            TechContact?: ContactDetail;
    }
    export namespace UpdateDomainContactRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDomainContactRequest) => any;
    }
    /**
        * <p>The UpdateDomainContact response includes the following element.</p>
        */
    export interface UpdateDomainContactResponse {
            /**
                * <p>Identifier for tracking the progress of the request. To query the operation status, use
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>.</p>
                */
            OperationId: string | undefined;
    }
    export namespace UpdateDomainContactResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDomainContactResponse) => any;
    }
    /**
        * <p>The UpdateDomainContactPrivacy request includes the following elements.</p>
        */
    export interface UpdateDomainContactPrivacyRequest {
            /**
                * <p>The name of the domain that you want to update the privacy setting for.</p>
                */
            DomainName: string | undefined;
            /**
                * <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>,
                * 			WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains)
                * 			or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>,
                * 			WHOIS queries return the information that you entered for the admin contact.</p>
                * 		       <note>
                * 			         <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
                * 		       </note>
                */
            AdminPrivacy?: boolean;
            /**
                * <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>,
                * 			WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains)
                * 			or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>,
                * 			WHOIS queries return the information that you entered for the registrant contact (domain owner).</p>
                * 		       <note>
                * 			         <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
                * 		       </note>
                */
            RegistrantPrivacy?: boolean;
            /**
                * <p>Whether you want to conceal contact information from WHOIS queries. If you specify <code>true</code>,
                * 			WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains)
                * 			or for our registrar associate, Gandi (for all other TLDs). If you specify <code>false</code>,
                * 			WHOIS queries return the information that you entered for the technical contact.</p>
                * 		       <note>
                * 			         <p>You must specify the same privacy setting for the administrative, registrant, and technical contacts.</p>
                * 		       </note>
                */
            TechPrivacy?: boolean;
    }
    export namespace UpdateDomainContactPrivacyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDomainContactPrivacyRequest) => any;
    }
    /**
        * <p>The UpdateDomainContactPrivacy response includes the following element.</p>
        */
    export interface UpdateDomainContactPrivacyResponse {
            /**
                * <p>Identifier for tracking the progress of the request. To use this ID to query the operation status, use GetOperationDetail.</p>
                */
            OperationId: string | undefined;
    }
    export namespace UpdateDomainContactPrivacyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDomainContactPrivacyResponse) => any;
    }
    /**
        * <p>Replaces the current set of name servers for the domain with the specified set of name servers.
        * 			If you use Amazon Route 53 as your DNS service, specify the four name servers in the delegation set for the hosted zone for the domain.</p>
        * 		       <p>If successful, this operation returns an operation ID that you can use to track the progress and
        * 			completion of the action. If the request is not completed successfully, the domain registrant will be notified by email. </p>
        */
    export interface UpdateDomainNameserversRequest {
            /**
                * <p>The name of the domain that you want to change name servers for.</p>
                */
            DomainName: string | undefined;
            /**
                * @deprecated
                *
                * <p>The authorization key for .fi domains</p>
                */
            FIAuthKey?: string;
            /**
                * <p>A list of new name servers for the domain.</p>
                */
            Nameservers: Nameserver[] | undefined;
    }
    export namespace UpdateDomainNameserversRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDomainNameserversRequest) => any;
    }
    /**
        * <p>The UpdateDomainNameservers response includes the following element.</p>
        */
    export interface UpdateDomainNameserversResponse {
            /**
                * <p>Identifier for tracking the progress of the request. To query the operation status, use
                * 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>.</p>
                */
            OperationId: string | undefined;
    }
    export namespace UpdateDomainNameserversResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDomainNameserversResponse) => any;
    }
    /**
        * <p>The UpdateTagsForDomainRequest includes the following elements.</p>
        */
    export interface UpdateTagsForDomainRequest {
            /**
                * <p>The domain for which you want to add or update tags.</p>
                */
            DomainName: string | undefined;
            /**
                * <p>A list of the tag keys and values that you want to add or update. If you specify a key
                * 			that already exists, the corresponding value will be replaced.</p>
                */
            TagsToUpdate?: Tag[];
    }
    export namespace UpdateTagsForDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTagsForDomainRequest) => any;
    }
    export interface UpdateTagsForDomainResponse {
    }
    export namespace UpdateTagsForDomainResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTagsForDomainResponse) => any;
    }
    /**
        * <p>The ViewBilling request includes the following elements.</p>
        */
    export interface ViewBillingRequest {
            /**
                * <p>The beginning date and time for the time period for which you want a list of billing records. Specify the date and time
                * 			in Unix time format and Coordinated Universal time (UTC).</p>
                */
            Start?: Date;
            /**
                * <p>The end date and time for the time period for which you want a list of billing records. Specify the date and time
                * 			in Unix time format and Coordinated Universal time (UTC).</p>
                */
            End?: Date;
            /**
                * <p>For an initial request for a list of billing records, omit this element. If the number of billing records
                * 			that are associated with the current Amazon Web Services account during the specified period is greater than the value that
                * 			you specified for <code>MaxItems</code>, you can use <code>Marker</code> to return additional billing records.
                * 			Get the value of <code>NextPageMarker</code> from the previous response, and submit another request that includes
                * 			the value of <code>NextPageMarker</code> in the <code>Marker</code> element.
                * 		</p>
                * 		       <p>Constraints: The marker must match the value of <code>NextPageMarker</code> that was returned in the previous response.</p>
                */
            Marker?: string;
            /**
                * <p>The number of billing records to be returned.</p>
                * 		       <p>Default: 20</p>
                */
            MaxItems?: number;
    }
    export namespace ViewBillingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ViewBillingRequest) => any;
    }
    /**
        * <p>The ViewBilling response includes the following elements.</p>
        */
    export interface ViewBillingResponse {
            /**
                * <p>If there are more billing records than you specified for <code>MaxItems</code> in the request, submit another
                * 			request and include the value of <code>NextPageMarker</code> in the value of <code>Marker</code>.</p>
                */
            NextPageMarker?: string;
            /**
                * <p>A summary of billing records.</p>
                */
            BillingRecords?: BillingRecord[];
    }
    export namespace ViewBillingResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ViewBillingResponse) => any;
    }
}

declare module '@aws-sdk/client-route-53-domains/node_modules/@aws-sdk/client-route-53-domains/dist-types/models/Route53DomainsServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Route53Domains service.
        */
    export class Route53DomainsServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

