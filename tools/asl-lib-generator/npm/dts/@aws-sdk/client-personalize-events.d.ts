// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-personalize-events' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { PutEventsCommandInput, PutEventsCommandOutput } from "@aws-sdk/client-personalize-events/node_modules/@aws-sdk/client-personalize-events/dist-types/commands/PutEventsCommand";
    import { PutItemsCommandInput, PutItemsCommandOutput } from "@aws-sdk/client-personalize-events/node_modules/@aws-sdk/client-personalize-events/dist-types/commands/PutItemsCommand";
    import { PutUsersCommandInput, PutUsersCommandOutput } from "@aws-sdk/client-personalize-events/node_modules/@aws-sdk/client-personalize-events/dist-types/commands/PutUsersCommand";
    import { PersonalizeEventsClient } from "@aws-sdk/client-personalize-events/node_modules/@aws-sdk/client-personalize-events/dist-types/PersonalizeEventsClient";
    /**
        * <p>Amazon Personalize can consume real-time user event data, such as <i>stream</i> or <i>click</i> data, and use
        *       it for model training either alone or combined with historical data. For more information see
        *       <a href="https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html">Recording Events</a>.</p>
        */
    export class PersonalizeEvents extends PersonalizeEventsClient {
            /**
                * <p>Records user interaction event data. For more information see
                *       <a href="https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html">Recording Events</a>.</p>
                */
            putEvents(args: PutEventsCommandInput, options?: __HttpHandlerOptions): Promise<PutEventsCommandOutput>;
            putEvents(args: PutEventsCommandInput, cb: (err: any, data?: PutEventsCommandOutput) => void): void;
            putEvents(args: PutEventsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutEventsCommandOutput) => void): void;
            /**
                * <p>Adds one or more items to an Items dataset. For more information see
                *       <a href="https://docs.aws.amazon.com/personalize/latest/dg/importing-items.html">Importing Items Incrementally</a>.
                *      </p>
                */
            putItems(args: PutItemsCommandInput, options?: __HttpHandlerOptions): Promise<PutItemsCommandOutput>;
            putItems(args: PutItemsCommandInput, cb: (err: any, data?: PutItemsCommandOutput) => void): void;
            putItems(args: PutItemsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutItemsCommandOutput) => void): void;
            /**
                * <p>Adds one or more users to a Users dataset. For more information see
                *       <a href="https://docs.aws.amazon.com/personalize/latest/dg/importing-users.html">Importing Users Incrementally</a>.</p>
                */
            putUsers(args: PutUsersCommandInput, options?: __HttpHandlerOptions): Promise<PutUsersCommandOutput>;
            putUsers(args: PutUsersCommandInput, cb: (err: any, data?: PutUsersCommandOutput) => void): void;
            putUsers(args: PutUsersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutUsersCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-personalize-events/node_modules/@aws-sdk/client-personalize-events/dist-types/commands/PutEventsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutEventsRequest } from "@aws-sdk/client-personalize-events/node_modules/@aws-sdk/client-personalize-events/dist-types/models/models_0";
    import { PersonalizeEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-personalize-events/node_modules/@aws-sdk/client-personalize-events/dist-types/PersonalizeEventsClient";
    export interface PutEventsCommandInput extends PutEventsRequest {
    }
    export interface PutEventsCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Records user interaction event data. For more information see
        *       <a href="https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html">Recording Events</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PersonalizeEventsClient, PutEventsCommand } from "@aws-sdk/client-personalize-events"; // ES Modules import
        * // const { PersonalizeEventsClient, PutEventsCommand } = require("@aws-sdk/client-personalize-events"); // CommonJS import
        * const client = new PersonalizeEventsClient(config);
        * const command = new PutEventsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutEventsCommandInput} for command's `input` shape.
        * @see {@link PutEventsCommandOutput} for command's `response` shape.
        * @see {@link PersonalizeEventsClientResolvedConfig | config} for PersonalizeEventsClient's `config` shape.
        *
        */
    export class PutEventsCommand extends $Command<PutEventsCommandInput, PutEventsCommandOutput, PersonalizeEventsClientResolvedConfig> {
            readonly input: PutEventsCommandInput;
            constructor(input: PutEventsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PersonalizeEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutEventsCommandInput, PutEventsCommandOutput>;
    }
}

declare module '@aws-sdk/client-personalize-events/node_modules/@aws-sdk/client-personalize-events/dist-types/commands/PutItemsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutItemsRequest } from "@aws-sdk/client-personalize-events/node_modules/@aws-sdk/client-personalize-events/dist-types/models/models_0";
    import { PersonalizeEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-personalize-events/node_modules/@aws-sdk/client-personalize-events/dist-types/PersonalizeEventsClient";
    export interface PutItemsCommandInput extends PutItemsRequest {
    }
    export interface PutItemsCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds one or more items to an Items dataset. For more information see
        *       <a href="https://docs.aws.amazon.com/personalize/latest/dg/importing-items.html">Importing Items Incrementally</a>.
        *      </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PersonalizeEventsClient, PutItemsCommand } from "@aws-sdk/client-personalize-events"; // ES Modules import
        * // const { PersonalizeEventsClient, PutItemsCommand } = require("@aws-sdk/client-personalize-events"); // CommonJS import
        * const client = new PersonalizeEventsClient(config);
        * const command = new PutItemsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutItemsCommandInput} for command's `input` shape.
        * @see {@link PutItemsCommandOutput} for command's `response` shape.
        * @see {@link PersonalizeEventsClientResolvedConfig | config} for PersonalizeEventsClient's `config` shape.
        *
        */
    export class PutItemsCommand extends $Command<PutItemsCommandInput, PutItemsCommandOutput, PersonalizeEventsClientResolvedConfig> {
            readonly input: PutItemsCommandInput;
            constructor(input: PutItemsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PersonalizeEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutItemsCommandInput, PutItemsCommandOutput>;
    }
}

declare module '@aws-sdk/client-personalize-events/node_modules/@aws-sdk/client-personalize-events/dist-types/commands/PutUsersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutUsersRequest } from "@aws-sdk/client-personalize-events/node_modules/@aws-sdk/client-personalize-events/dist-types/models/models_0";
    import { PersonalizeEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-personalize-events/node_modules/@aws-sdk/client-personalize-events/dist-types/PersonalizeEventsClient";
    export interface PutUsersCommandInput extends PutUsersRequest {
    }
    export interface PutUsersCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds one or more users to a Users dataset. For more information see
        *       <a href="https://docs.aws.amazon.com/personalize/latest/dg/importing-users.html">Importing Users Incrementally</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PersonalizeEventsClient, PutUsersCommand } from "@aws-sdk/client-personalize-events"; // ES Modules import
        * // const { PersonalizeEventsClient, PutUsersCommand } = require("@aws-sdk/client-personalize-events"); // CommonJS import
        * const client = new PersonalizeEventsClient(config);
        * const command = new PutUsersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutUsersCommandInput} for command's `input` shape.
        * @see {@link PutUsersCommandOutput} for command's `response` shape.
        * @see {@link PersonalizeEventsClientResolvedConfig | config} for PersonalizeEventsClient's `config` shape.
        *
        */
    export class PutUsersCommand extends $Command<PutUsersCommandInput, PutUsersCommandOutput, PersonalizeEventsClientResolvedConfig> {
            readonly input: PutUsersCommandInput;
            constructor(input: PutUsersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PersonalizeEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutUsersCommandInput, PutUsersCommandOutput>;
    }
}

declare module '@aws-sdk/client-personalize-events/node_modules/@aws-sdk/client-personalize-events/dist-types/PersonalizeEventsClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { PutEventsCommandInput, PutEventsCommandOutput } from "@aws-sdk/client-personalize-events/node_modules/@aws-sdk/client-personalize-events/dist-types/commands/PutEventsCommand";
    import { PutItemsCommandInput, PutItemsCommandOutput } from "@aws-sdk/client-personalize-events/node_modules/@aws-sdk/client-personalize-events/dist-types/commands/PutItemsCommand";
    import { PutUsersCommandInput, PutUsersCommandOutput } from "@aws-sdk/client-personalize-events/node_modules/@aws-sdk/client-personalize-events/dist-types/commands/PutUsersCommand";
    export type ServiceInputTypes = PutEventsCommandInput | PutItemsCommandInput | PutUsersCommandInput;
    export type ServiceOutputTypes = PutEventsCommandOutput | PutItemsCommandOutput | PutUsersCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type PersonalizeEventsClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of PersonalizeEventsClient class constructor that set the region, credentials and other options.
        */
    export interface PersonalizeEventsClientConfig extends PersonalizeEventsClientConfigType {
    }
    type PersonalizeEventsClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of PersonalizeEventsClient class. This is resolved and normalized from the {@link PersonalizeEventsClientConfig | constructor configuration interface}.
        */
    export interface PersonalizeEventsClientResolvedConfig extends PersonalizeEventsClientResolvedConfigType {
    }
    /**
        * <p>Amazon Personalize can consume real-time user event data, such as <i>stream</i> or <i>click</i> data, and use
        *       it for model training either alone or combined with historical data. For more information see
        *       <a href="https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html">Recording Events</a>.</p>
        */
    export class PersonalizeEventsClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, PersonalizeEventsClientResolvedConfig> {
            /**
                * The resolved configuration of PersonalizeEventsClient class. This is resolved and normalized from the {@link PersonalizeEventsClientConfig | constructor configuration interface}.
                */
            readonly config: PersonalizeEventsClientResolvedConfig;
            constructor(configuration: PersonalizeEventsClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-personalize-events/node_modules/@aws-sdk/client-personalize-events/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType, LazyJsonString as __LazyJsonString } from "@aws-sdk/smithy-client";
    import { PersonalizeEventsServiceException as __BaseException } from "@aws-sdk/client-personalize-events/node_modules/@aws-sdk/client-personalize-events/dist-types/models/PersonalizeEventsServiceException";
    /**
        * <p>Provide a valid value for the field or parameter.</p>
        */
    export class InvalidInputException extends __BaseException {
            readonly name: "InvalidInputException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidInputException, __BaseException>);
    }
    /**
        * <p>Represents user interaction event information sent using the
        *       <code>PutEvents</code> API.</p>
        */
    export interface Event {
            /**
                * <p>An ID associated with the event. If an event ID is not provided, Amazon Personalize generates
                *       a unique ID for the event. An event ID is not used as an input to the model. Amazon Personalize uses
                *       the event ID to distinquish unique events. Any subsequent events after the first with the
                *       same event ID are not used in model training.</p>
                */
            eventId?: string;
            /**
                * <p>The type of event, such as click or download. This property corresponds to the <code>EVENT_TYPE</code>
                *       field of your Interactions schema and depends on the types of events you are tracking.</p>
                */
            eventType: string | undefined;
            /**
                * <p>The event value that corresponds to the <code>EVENT_VALUE</code> field of the Interactions schema.</p>
                */
            eventValue?: number;
            /**
                * <p>The item ID key that corresponds to the <code>ITEM_ID</code> field of the Interactions schema.</p>
                */
            itemId?: string;
            /**
                * <p>A string map of event-specific data that you might choose to record. For example, if a
                *       user rates a movie on your site, other than movie ID (<code>itemId</code>) and rating (<code>eventValue</code>)
                *       , you might also send the number of movie ratings made by the user.</p>
                *          <p>Each item in the map consists of a key-value pair. For example,</p>
                *
                *          <p>
                *             <code>{"numberOfRatings": "12"}</code>
                *          </p>
                *          <p>The keys use camel case names that match the fields in the Interactions
                *       schema. In the above example, the <code>numberOfRatings</code> would match the
                *       'NUMBER_OF_RATINGS' field defined in the Interactions schema.</p>
                */
            properties?: __LazyJsonString | string;
            /**
                * <p>The timestamp (in Unix time) on the client side when the event occurred.</p>
                */
            sentAt: Date | undefined;
            /**
                * <p>The ID of the recommendation.</p>
                */
            recommendationId?: string;
            /**
                * <p>A list of item IDs that represents the sequence of items you have shown the user. For example, <code>["itemId1", "itemId2", "itemId3"]</code>.</p>
                */
            impression?: string[];
    }
    export namespace Event {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Event) => any;
    }
    export interface PutEventsRequest {
            /**
                * <p>The tracking ID for the event.
                *       The ID is generated by a call to the
                *       <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_CreateEventTracker.html">CreateEventTracker</a> API.</p>
                */
            trackingId: string | undefined;
            /**
                * <p>The user associated with the event.</p>
                */
            userId?: string;
            /**
                * <p>The session ID associated with the user's visit. Your application generates the sessionId when a user first visits your website or uses your application.
                *       Amazon Personalize uses the sessionId to associate events with the user before they log in. For more information, see
                *       <a href="https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html">Recording Events</a>.</p>
                */
            sessionId: string | undefined;
            /**
                * <p>A list of event data from the session.</p>
                */
            eventList: Event[] | undefined;
    }
    export namespace PutEventsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutEventsRequest) => any;
    }
    /**
        * <p>Represents item metadata added to an Items dataset using the
        *       <code>PutItems</code> API. For more information see
        *       <a href="https://docs.aws.amazon.com/personalize/latest/dg/importing-items.html">Importing Items Incrementally</a>.
        *     </p>
        */
    export interface Item {
            /**
                * <p>The ID associated with the item.</p>
                */
            itemId: string | undefined;
            /**
                * <p>A string map of item-specific metadata. Each element in the map consists of a key-value pair.
                *       For example, <code>{"numberOfRatings": "12"}</code>.</p>
                *          <p>The keys use camel case names that match the fields in the schema for the Items
                *       dataset. In the previous example, the <code>numberOfRatings</code> matches the
                *       'NUMBER_OF_RATINGS' field defined in the Items schema. For categorical string data, to include multiple categories for a single item,
                *       separate each category with a pipe separator (<code>|</code>). For example, <code>\"Horror|Action\"</code>.</p>
                */
            properties?: __LazyJsonString | string;
    }
    export namespace Item {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Item) => any;
    }
    export interface PutItemsRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the Items dataset you are adding the item or items to.</p>
                */
            datasetArn: string | undefined;
            /**
                * <p>A list of item data.</p>
                */
            items: Item[] | undefined;
    }
    export namespace PutItemsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutItemsRequest) => any;
    }
    /**
        * <p>The specified resource is in use.</p>
        */
    export class ResourceInUseException extends __BaseException {
            readonly name: "ResourceInUseException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceInUseException, __BaseException>);
    }
    /**
        * <p>Could not find the specified resource.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>Represents user metadata added to a Users dataset using the
        *       <code>PutUsers</code> API. For more information see
        *       <a href="https://docs.aws.amazon.com/personalize/latest/dg/importing-users.html">Importing Users Incrementally</a>.</p>
        */
    export interface User {
            /**
                * <p>The ID associated with the user.</p>
                */
            userId: string | undefined;
            /**
                * <p>A string map of user-specific metadata. Each element in the map consists of a key-value pair.
                *       For example, <code>{"numberOfVideosWatched": "45"}</code>.</p>
                *          <p>The keys use camel case names that match the fields in the schema for the Users
                *       dataset. In the previous example, the <code>numberOfVideosWatched</code> matches the
                *       'NUMBER_OF_VIDEOS_WATCHED' field defined in the Users schema. For categorical string data,
                *       to include multiple categories for a single user, separate each category with a pipe separator (<code>|</code>).
                *       For example, <code>\"Member|Frequent shopper\"</code>.</p>
                */
            properties?: __LazyJsonString | string;
    }
    export namespace User {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: User) => any;
    }
    export interface PutUsersRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the Users dataset you are adding the user or users to.</p>
                */
            datasetArn: string | undefined;
            /**
                * <p>A list of user data.</p>
                */
            users: User[] | undefined;
    }
    export namespace PutUsersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutUsersRequest) => any;
    }
}

declare module '@aws-sdk/client-personalize-events/node_modules/@aws-sdk/client-personalize-events/dist-types/models/PersonalizeEventsServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from PersonalizeEvents service.
        */
    export class PersonalizeEventsServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

