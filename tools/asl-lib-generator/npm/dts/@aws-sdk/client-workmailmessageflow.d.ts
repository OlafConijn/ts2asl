// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   stream

declare module '@aws-sdk/client-workmailmessageflow' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { GetRawMessageContentCommandInput, GetRawMessageContentCommandOutput } from "@aws-sdk/client-workmailmessageflow/node_modules/@aws-sdk/client-workmailmessageflow/dist-types/commands/GetRawMessageContentCommand";
    import { PutRawMessageContentCommandInput, PutRawMessageContentCommandOutput } from "@aws-sdk/client-workmailmessageflow/node_modules/@aws-sdk/client-workmailmessageflow/dist-types/commands/PutRawMessageContentCommand";
    import { WorkMailMessageFlowClient } from "@aws-sdk/client-workmailmessageflow/node_modules/@aws-sdk/client-workmailmessageflow/dist-types/WorkMailMessageFlowClient";
    /**
        * <p>The WorkMail Message Flow API provides access to email messages as they are
        *       being
        *       sent and received by
        *       a
        *       WorkMail organization.</p>
        */
    export class WorkMailMessageFlow extends WorkMailMessageFlowClient {
            /**
                * <p>Retrieves the raw content of an in-transit email message, in MIME format.</p>
                */
            getRawMessageContent(args: GetRawMessageContentCommandInput, options?: __HttpHandlerOptions): Promise<GetRawMessageContentCommandOutput>;
            getRawMessageContent(args: GetRawMessageContentCommandInput, cb: (err: any, data?: GetRawMessageContentCommandOutput) => void): void;
            getRawMessageContent(args: GetRawMessageContentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRawMessageContentCommandOutput) => void): void;
            /**
                * <p>Updates the raw content of an in-transit email message, in MIME format.</p>
                *          <p>This example describes how to update in-transit email message. For more information and examples for using this API, see
                *       <a href="https://docs.aws.amazon.com/workmail/latest/adminguide/update-with-lambda.html">
                *         Updating message content with AWS Lambda</a>.</p>
                *
                *
                *          <note>
                *             <p>Updates to an in-transit message only appear when you call <code>PutRawMessageContent</code> from an AWS Lambda function
                *       configured with a  synchronous <a href="https://docs.aws.amazon.com/workmail/latest/adminguide/lambda.html#synchronous-rules">
                *         Run Lambda</a> rule. If you call <code>PutRawMessageContent</code> on a delivered or sent message, the message remains unchanged,
                *       even though <a href="https://docs.aws.amazon.com/workmail/latest/APIReference/API_messageflow_GetRawMessageContent.html">GetRawMessageContent</a> returns an updated
                *         message.
                *     </p>
                *          </note>
                */
            putRawMessageContent(args: PutRawMessageContentCommandInput, options?: __HttpHandlerOptions): Promise<PutRawMessageContentCommandOutput>;
            putRawMessageContent(args: PutRawMessageContentCommandInput, cb: (err: any, data?: PutRawMessageContentCommandOutput) => void): void;
            putRawMessageContent(args: PutRawMessageContentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutRawMessageContentCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-workmailmessageflow/node_modules/@aws-sdk/client-workmailmessageflow/dist-types/commands/GetRawMessageContentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetRawMessageContentRequest, GetRawMessageContentResponse } from "@aws-sdk/client-workmailmessageflow/node_modules/@aws-sdk/client-workmailmessageflow/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkMailMessageFlowClientResolvedConfig } from "@aws-sdk/client-workmailmessageflow/node_modules/@aws-sdk/client-workmailmessageflow/dist-types/WorkMailMessageFlowClient";
    export interface GetRawMessageContentCommandInput extends GetRawMessageContentRequest {
    }
    export interface GetRawMessageContentCommandOutput extends GetRawMessageContentResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the raw content of an in-transit email message, in MIME format.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkMailMessageFlowClient, GetRawMessageContentCommand } from "@aws-sdk/client-workmailmessageflow"; // ES Modules import
        * // const { WorkMailMessageFlowClient, GetRawMessageContentCommand } = require("@aws-sdk/client-workmailmessageflow"); // CommonJS import
        * const client = new WorkMailMessageFlowClient(config);
        * const command = new GetRawMessageContentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRawMessageContentCommandInput} for command's `input` shape.
        * @see {@link GetRawMessageContentCommandOutput} for command's `response` shape.
        * @see {@link WorkMailMessageFlowClientResolvedConfig | config} for WorkMailMessageFlowClient's `config` shape.
        *
        */
    export class GetRawMessageContentCommand extends $Command<GetRawMessageContentCommandInput, GetRawMessageContentCommandOutput, WorkMailMessageFlowClientResolvedConfig> {
            readonly input: GetRawMessageContentCommandInput;
            constructor(input: GetRawMessageContentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkMailMessageFlowClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRawMessageContentCommandInput, GetRawMessageContentCommandOutput>;
    }
}

declare module '@aws-sdk/client-workmailmessageflow/node_modules/@aws-sdk/client-workmailmessageflow/dist-types/commands/PutRawMessageContentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutRawMessageContentRequest, PutRawMessageContentResponse } from "@aws-sdk/client-workmailmessageflow/node_modules/@aws-sdk/client-workmailmessageflow/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkMailMessageFlowClientResolvedConfig } from "@aws-sdk/client-workmailmessageflow/node_modules/@aws-sdk/client-workmailmessageflow/dist-types/WorkMailMessageFlowClient";
    export interface PutRawMessageContentCommandInput extends PutRawMessageContentRequest {
    }
    export interface PutRawMessageContentCommandOutput extends PutRawMessageContentResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the raw content of an in-transit email message, in MIME format.</p>
        *          <p>This example describes how to update in-transit email message. For more information and examples for using this API, see
        *       <a href="https://docs.aws.amazon.com/workmail/latest/adminguide/update-with-lambda.html">
        *         Updating message content with AWS Lambda</a>.</p>
        *
        *
        *          <note>
        *             <p>Updates to an in-transit message only appear when you call <code>PutRawMessageContent</code> from an AWS Lambda function
        *       configured with a  synchronous <a href="https://docs.aws.amazon.com/workmail/latest/adminguide/lambda.html#synchronous-rules">
        *         Run Lambda</a> rule. If you call <code>PutRawMessageContent</code> on a delivered or sent message, the message remains unchanged,
        *       even though <a href="https://docs.aws.amazon.com/workmail/latest/APIReference/API_messageflow_GetRawMessageContent.html">GetRawMessageContent</a> returns an updated
        *         message.
        *     </p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkMailMessageFlowClient, PutRawMessageContentCommand } from "@aws-sdk/client-workmailmessageflow"; // ES Modules import
        * // const { WorkMailMessageFlowClient, PutRawMessageContentCommand } = require("@aws-sdk/client-workmailmessageflow"); // CommonJS import
        * const client = new WorkMailMessageFlowClient(config);
        * const command = new PutRawMessageContentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutRawMessageContentCommandInput} for command's `input` shape.
        * @see {@link PutRawMessageContentCommandOutput} for command's `response` shape.
        * @see {@link WorkMailMessageFlowClientResolvedConfig | config} for WorkMailMessageFlowClient's `config` shape.
        *
        */
    export class PutRawMessageContentCommand extends $Command<PutRawMessageContentCommandInput, PutRawMessageContentCommandOutput, WorkMailMessageFlowClientResolvedConfig> {
            readonly input: PutRawMessageContentCommandInput;
            constructor(input: PutRawMessageContentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkMailMessageFlowClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutRawMessageContentCommandInput, PutRawMessageContentCommandOutput>;
    }
}

declare module '@aws-sdk/client-workmailmessageflow/node_modules/@aws-sdk/client-workmailmessageflow/dist-types/WorkMailMessageFlowClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { GetRawMessageContentCommandInput, GetRawMessageContentCommandOutput } from "@aws-sdk/client-workmailmessageflow/node_modules/@aws-sdk/client-workmailmessageflow/dist-types/commands/GetRawMessageContentCommand";
    import { PutRawMessageContentCommandInput, PutRawMessageContentCommandOutput } from "@aws-sdk/client-workmailmessageflow/node_modules/@aws-sdk/client-workmailmessageflow/dist-types/commands/PutRawMessageContentCommand";
    export type ServiceInputTypes = GetRawMessageContentCommandInput | PutRawMessageContentCommandInput;
    export type ServiceOutputTypes = GetRawMessageContentCommandOutput | PutRawMessageContentCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type WorkMailMessageFlowClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of WorkMailMessageFlowClient class constructor that set the region, credentials and other options.
        */
    export interface WorkMailMessageFlowClientConfig extends WorkMailMessageFlowClientConfigType {
    }
    type WorkMailMessageFlowClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of WorkMailMessageFlowClient class. This is resolved and normalized from the {@link WorkMailMessageFlowClientConfig | constructor configuration interface}.
        */
    export interface WorkMailMessageFlowClientResolvedConfig extends WorkMailMessageFlowClientResolvedConfigType {
    }
    /**
        * <p>The WorkMail Message Flow API provides access to email messages as they are
        *       being
        *       sent and received by
        *       a
        *       WorkMail organization.</p>
        */
    export class WorkMailMessageFlowClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, WorkMailMessageFlowClientResolvedConfig> {
            /**
                * The resolved configuration of WorkMailMessageFlowClient class. This is resolved and normalized from the {@link WorkMailMessageFlowClientConfig | constructor configuration interface}.
                */
            readonly config: WorkMailMessageFlowClientResolvedConfig;
            constructor(configuration: WorkMailMessageFlowClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-workmailmessageflow/node_modules/@aws-sdk/client-workmailmessageflow/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { Readable } from "stream";
    import { WorkMailMessageFlowServiceException as __BaseException } from "@aws-sdk/client-workmailmessageflow/node_modules/@aws-sdk/client-workmailmessageflow/dist-types/models/WorkMailMessageFlowServiceException";
    export interface GetRawMessageContentRequest {
            /**
                * <p>The identifier of the email message to retrieve.</p>
                */
            messageId: string | undefined;
    }
    export namespace GetRawMessageContentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRawMessageContentRequest) => any;
    }
    export interface GetRawMessageContentResponse {
            /**
                * <p>The raw content of the email message, in MIME format.</p>
                */
            messageContent: Readable | ReadableStream | Blob | undefined;
    }
    export namespace GetRawMessageContentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRawMessageContentResponse) => any;
    }
    /**
        * <p>The requested email message is not found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>WorkMail could not access the updated email content. Possible reasons:</p>
        *          <ul>
        *             <li>
        *                <p>You made the request in a region other than your S3 bucket region.</p>
        *             </li>
        *             <li>
        *                <p>The <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-owner-condition.html">S3 bucket owner</a> is not the
        *         same as the calling AWS account.</p>
        *             </li>
        *             <li>
        *                <p>You have an incomplete or missing S3 bucket policy. For more information about policies, see
        *         <a href="https://docs.aws.amazon.com/workmail/latest/adminguide/update-with-lambda.html">
        *           Updating message content with AWS Lambda
        *         </a> in the <i>WorkMail Administrator
        *           Guide</i>.</p>
        *             </li>
        *          </ul>
        */
    export class InvalidContentLocation extends __BaseException {
            readonly name: "InvalidContentLocation";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidContentLocation, __BaseException>);
    }
    /**
        * <p>The requested email is not eligible for update. This is usually the case for a redirected email.</p>
        */
    export class MessageFrozen extends __BaseException {
            readonly name: "MessageFrozen";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MessageFrozen, __BaseException>);
    }
    /**
        * <p>The requested email could not be updated due to an error in the MIME content. Check the error message for more information about
        *       what caused the error.</p>
        */
    export class MessageRejected extends __BaseException {
            readonly name: "MessageRejected";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MessageRejected, __BaseException>);
    }
    /**
        * <p>Amazon S3 object representing the updated message content, in MIME format.</p>
        *          <note>
        *             <p>The region for the S3 bucket containing the S3 object must match the region used for WorkMail operations. Also, for WorkMail to process
        *       an S3 object, it must have permission to access that object. For more information, see
        *       <a href="https://docs.aws.amazon.com/workmail/latest/adminguide/update-with-lambda.html">
        *         Updating message content with AWS Lambda</a>.</p>
        *          </note>
        */
    export interface S3Reference {
            /**
                * <p>The S3 bucket name.</p>
                */
            bucket: string | undefined;
            /**
                * <p>The S3 key object name.</p>
                */
            key: string | undefined;
            /**
                * <p>If you enable versioning for the bucket, you can specify the object version.</p>
                */
            objectVersion?: string;
    }
    export namespace S3Reference {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3Reference) => any;
    }
    /**
        * <p>Provides the MIME content of the updated email message as an S3 object. All MIME content must meet the following criteria:</p>
        *          <ul>
        *             <li>
        *                <p>Each part of a multipart MIME message must be formatted properly.</p>
        *             </li>
        *             <li>
        *                <p>Attachments must be of a content type that Amazon SES supports. For more information, see
        *         <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mime-types-appendix.html">Unsupported Attachment Types</a>.</p>
        *             </li>
        *             <li>
        *                <p>If any of the MIME parts in a message contain content that is outside of the 7-bit ASCII character range, we recommend
        *         encoding that content.</p>
        *             </li>
        *             <li>
        *                <p>Per <a href="https://tools.ietf.org/html/rfc5321#section-4.5.3.1.6">RFC 5321</a>, the maximum length of each line of
        *         text, including the <CRLF>, must not exceed 1,000 characters.</p>
        *             </li>
        *             <li>
        *                <p>The message must contain all the required header fields. Check the returned error message for more information.</p>
        *             </li>
        *             <li>
        *                <p>The value of immutable headers must remain unchanged. Check the returned error message for more information.</p>
        *             </li>
        *             <li>
        *                <p>Certain unique headers can only appear once. Check the returned error message for more information.</p>
        *             </li>
        *          </ul>
        */
    export interface RawMessageContent {
            /**
                * <p>The S3 reference of an email message.</p>
                */
            s3Reference: S3Reference | undefined;
    }
    export namespace RawMessageContent {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RawMessageContent) => any;
    }
    export interface PutRawMessageContentRequest {
            /**
                * <p>The identifier of the email message being updated.</p>
                */
            messageId: string | undefined;
            /**
                * <p>Describes the raw message content of the updated email message.</p>
                */
            content: RawMessageContent | undefined;
    }
    export namespace PutRawMessageContentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutRawMessageContentRequest) => any;
    }
    export interface PutRawMessageContentResponse {
    }
    export namespace PutRawMessageContentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutRawMessageContentResponse) => any;
    }
}

declare module '@aws-sdk/client-workmailmessageflow/node_modules/@aws-sdk/client-workmailmessageflow/dist-types/models/WorkMailMessageFlowServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from WorkMailMessageFlow service.
        */
    export class WorkMailMessageFlowServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

