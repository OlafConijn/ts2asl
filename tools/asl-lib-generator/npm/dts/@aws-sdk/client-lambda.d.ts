// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   stream

declare module '@aws-sdk/client-lambda' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AddLayerVersionPermissionCommandInput, AddLayerVersionPermissionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/AddLayerVersionPermissionCommand";
    import { AddPermissionCommandInput, AddPermissionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/AddPermissionCommand";
    import { CreateAliasCommandInput, CreateAliasCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/CreateAliasCommand";
    import { CreateCodeSigningConfigCommandInput, CreateCodeSigningConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/CreateCodeSigningConfigCommand";
    import { CreateEventSourceMappingCommandInput, CreateEventSourceMappingCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/CreateEventSourceMappingCommand";
    import { CreateFunctionCommandInput, CreateFunctionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/CreateFunctionCommand";
    import { CreateFunctionUrlConfigCommandInput, CreateFunctionUrlConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/CreateFunctionUrlConfigCommand";
    import { DeleteAliasCommandInput, DeleteAliasCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteAliasCommand";
    import { DeleteCodeSigningConfigCommandInput, DeleteCodeSigningConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteCodeSigningConfigCommand";
    import { DeleteEventSourceMappingCommandInput, DeleteEventSourceMappingCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteEventSourceMappingCommand";
    import { DeleteFunctionCodeSigningConfigCommandInput, DeleteFunctionCodeSigningConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteFunctionCodeSigningConfigCommand";
    import { DeleteFunctionCommandInput, DeleteFunctionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteFunctionCommand";
    import { DeleteFunctionConcurrencyCommandInput, DeleteFunctionConcurrencyCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteFunctionConcurrencyCommand";
    import { DeleteFunctionEventInvokeConfigCommandInput, DeleteFunctionEventInvokeConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteFunctionEventInvokeConfigCommand";
    import { DeleteFunctionUrlConfigCommandInput, DeleteFunctionUrlConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteFunctionUrlConfigCommand";
    import { DeleteLayerVersionCommandInput, DeleteLayerVersionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteLayerVersionCommand";
    import { DeleteProvisionedConcurrencyConfigCommandInput, DeleteProvisionedConcurrencyConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteProvisionedConcurrencyConfigCommand";
    import { GetAccountSettingsCommandInput, GetAccountSettingsCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetAccountSettingsCommand";
    import { GetAliasCommandInput, GetAliasCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetAliasCommand";
    import { GetCodeSigningConfigCommandInput, GetCodeSigningConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetCodeSigningConfigCommand";
    import { GetEventSourceMappingCommandInput, GetEventSourceMappingCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetEventSourceMappingCommand";
    import { GetFunctionCodeSigningConfigCommandInput, GetFunctionCodeSigningConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetFunctionCodeSigningConfigCommand";
    import { GetFunctionCommandInput, GetFunctionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetFunctionCommand";
    import { GetFunctionConcurrencyCommandInput, GetFunctionConcurrencyCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetFunctionConcurrencyCommand";
    import { GetFunctionConfigurationCommandInput, GetFunctionConfigurationCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetFunctionConfigurationCommand";
    import { GetFunctionEventInvokeConfigCommandInput, GetFunctionEventInvokeConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetFunctionEventInvokeConfigCommand";
    import { GetFunctionUrlConfigCommandInput, GetFunctionUrlConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetFunctionUrlConfigCommand";
    import { GetLayerVersionByArnCommandInput, GetLayerVersionByArnCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetLayerVersionByArnCommand";
    import { GetLayerVersionCommandInput, GetLayerVersionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetLayerVersionCommand";
    import { GetLayerVersionPolicyCommandInput, GetLayerVersionPolicyCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetLayerVersionPolicyCommand";
    import { GetPolicyCommandInput, GetPolicyCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetPolicyCommand";
    import { GetProvisionedConcurrencyConfigCommandInput, GetProvisionedConcurrencyConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetProvisionedConcurrencyConfigCommand";
    import { InvokeAsyncCommandInput, InvokeAsyncCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/InvokeAsyncCommand";
    import { InvokeCommandInput, InvokeCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/InvokeCommand";
    import { ListAliasesCommandInput, ListAliasesCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListAliasesCommand";
    import { ListCodeSigningConfigsCommandInput, ListCodeSigningConfigsCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListCodeSigningConfigsCommand";
    import { ListEventSourceMappingsCommandInput, ListEventSourceMappingsCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListEventSourceMappingsCommand";
    import { ListFunctionEventInvokeConfigsCommandInput, ListFunctionEventInvokeConfigsCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListFunctionEventInvokeConfigsCommand";
    import { ListFunctionsByCodeSigningConfigCommandInput, ListFunctionsByCodeSigningConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListFunctionsByCodeSigningConfigCommand";
    import { ListFunctionsCommandInput, ListFunctionsCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListFunctionsCommand";
    import { ListFunctionUrlConfigsCommandInput, ListFunctionUrlConfigsCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListFunctionUrlConfigsCommand";
    import { ListLayersCommandInput, ListLayersCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListLayersCommand";
    import { ListLayerVersionsCommandInput, ListLayerVersionsCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListLayerVersionsCommand";
    import { ListProvisionedConcurrencyConfigsCommandInput, ListProvisionedConcurrencyConfigsCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListProvisionedConcurrencyConfigsCommand";
    import { ListTagsCommandInput, ListTagsCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListTagsCommand";
    import { ListVersionsByFunctionCommandInput, ListVersionsByFunctionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListVersionsByFunctionCommand";
    import { PublishLayerVersionCommandInput, PublishLayerVersionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/PublishLayerVersionCommand";
    import { PublishVersionCommandInput, PublishVersionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/PublishVersionCommand";
    import { PutFunctionCodeSigningConfigCommandInput, PutFunctionCodeSigningConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/PutFunctionCodeSigningConfigCommand";
    import { PutFunctionConcurrencyCommandInput, PutFunctionConcurrencyCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/PutFunctionConcurrencyCommand";
    import { PutFunctionEventInvokeConfigCommandInput, PutFunctionEventInvokeConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/PutFunctionEventInvokeConfigCommand";
    import { PutProvisionedConcurrencyConfigCommandInput, PutProvisionedConcurrencyConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/PutProvisionedConcurrencyConfigCommand";
    import { RemoveLayerVersionPermissionCommandInput, RemoveLayerVersionPermissionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/RemoveLayerVersionPermissionCommand";
    import { RemovePermissionCommandInput, RemovePermissionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/RemovePermissionCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UntagResourceCommand";
    import { UpdateAliasCommandInput, UpdateAliasCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UpdateAliasCommand";
    import { UpdateCodeSigningConfigCommandInput, UpdateCodeSigningConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UpdateCodeSigningConfigCommand";
    import { UpdateEventSourceMappingCommandInput, UpdateEventSourceMappingCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UpdateEventSourceMappingCommand";
    import { UpdateFunctionCodeCommandInput, UpdateFunctionCodeCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UpdateFunctionCodeCommand";
    import { UpdateFunctionConfigurationCommandInput, UpdateFunctionConfigurationCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UpdateFunctionConfigurationCommand";
    import { UpdateFunctionEventInvokeConfigCommandInput, UpdateFunctionEventInvokeConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UpdateFunctionEventInvokeConfigCommand";
    import { UpdateFunctionUrlConfigCommandInput, UpdateFunctionUrlConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UpdateFunctionUrlConfigCommand";
    import { LambdaClient } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    /**
        * <fullname>Lambda</fullname>
        *          <p>
        *             <b>Overview</b>
        *          </p>
        *          <p>Lambda is a compute service that lets you run code without provisioning or managing servers.
        *         Lambda runs your code on a high-availability compute infrastructure and performs all of the
        *       administration of the compute resources, including server and operating system maintenance, capacity provisioning
        *       and automatic scaling, code monitoring and logging. With Lambda, you can run code for virtually any
        *       type of application or backend service. For more information about the Lambda service, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/welcome.html">What is Lambda</a> in the <b>Lambda Developer Guide</b>.</p>
        *          <p>The <i>Lambda API Reference</i> provides information about
        *       each of the API methods, including details about the parameters in each API request and
        *       response. </p>
        *          <p></p>
        *          <p>You can use Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command
        *       line tools to access the API. For installation instructions, see <a href="http://aws.amazon.com/tools/">Tools for
        *         Amazon Web Services</a>. </p>
        *          <p>For a list of Region-specific endpoints that Lambda supports,
        *       see <a href="https://docs.aws.amazon.com/general/latest/gr/lambda-service.html/">Lambda
        *         endpoints and quotas </a> in the <i>Amazon Web Services General Reference.</i>. </p>
        *          <p>When making the API calls, you will need to
        *       authenticate your request by providing a signature. Lambda supports signature version 4. For more information,
        *       see <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 signing process</a> in the
        *       <i>Amazon Web Services General Reference.</i>. </p>
        *          <p>
        *             <b>CA certificates</b>
        *          </p>
        *
        *          <p>Because Amazon Web Services SDKs use the CA certificates from your computer, changes to the certificates on the Amazon Web Services servers
        *         can cause connection failures when you attempt to use an SDK. You can prevent these failures by keeping your
        *         computer's CA certificates and operating system up-to-date. If you encounter this issue in a corporate
        *         environment and do not manage your own computer, you might need to ask an administrator to assist with the
        *         update process. The following list shows minimum operating system and Java versions:</p>
        *          <ul>
        *             <li>
        *                <p>Microsoft Windows versions that have updates from January 2005 or later installed contain at least one
        *             of the required CAs in their trust list. </p>
        *             </li>
        *             <li>
        *                <p>Mac OS X 10.4 with Java for Mac OS X 10.4 Release 5 (February 2007), Mac OS X 10.5 (October 2007), and
        *             later versions contain at least one of the required CAs in their trust list. </p>
        *             </li>
        *             <li>
        *                <p>Red Hat Enterprise Linux 5 (March 2007), 6, and 7 and CentOS 5, 6, and 7 all contain at least one of the
        *             required CAs in their default trusted CA list. </p>
        *             </li>
        *             <li>
        *                <p>Java 1.4.2_12 (May 2006), 5 Update 2 (March 2005), and all later versions, including Java 6 (December
        *             2006), 7, and 8, contain at least one of the required CAs in their default trusted CA list. </p>
        *             </li>
        *          </ul>
        *          <p>When accessing the Lambda management console or Lambda API endpoints, whether through browsers or
        *         programmatically, you will need to ensure your client machines support any of the following CAs: </p>
        *          <ul>
        *             <li>
        *                <p>Amazon Root CA 1</p>
        *             </li>
        *             <li>
        *                <p>Starfield Services Root Certificate Authority - G2</p>
        *             </li>
        *             <li>
        *                <p>Starfield Class 2 Certification Authority</p>
        *             </li>
        *          </ul>
        *          <p>Root certificates from the first two authorities are available from <a href="https://www.amazontrust.com/repository/">Amazon trust services</a>, but keeping your computer
        *         up-to-date is the more straightforward solution. To learn more about ACM-provided certificates, see <a href="http://aws.amazon.com/certificate-manager/faqs/#certificates">Amazon Web Services Certificate Manager FAQs.</a>
        *          </p>
        */
    export class Lambda extends LambdaClient {
            /**
                * <p>Adds permissions to the resource-based policy of a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda
                *         layer</a>. Use this action to grant layer
                *       usage permission to other accounts. You can grant permission to a single account, all accounts in an organization,
                *       or all Amazon Web Services accounts.  </p>
                *          <p>To revoke permission, call <a>RemoveLayerVersionPermission</a> with the statement ID that you
                *       specified when you added it.</p>
                */
            addLayerVersionPermission(args: AddLayerVersionPermissionCommandInput, options?: __HttpHandlerOptions): Promise<AddLayerVersionPermissionCommandOutput>;
            addLayerVersionPermission(args: AddLayerVersionPermissionCommandInput, cb: (err: any, data?: AddLayerVersionPermissionCommandOutput) => void): void;
            addLayerVersionPermission(args: AddLayerVersionPermissionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddLayerVersionPermissionCommandOutput) => void): void;
            /**
                * <p>Grants an Amazon Web Services service, account, or organization permission to use a function. You can apply the
                *       policy at the function level, or specify a qualifier to restrict access to a single version or alias. If you use a qualifier,
                *       the invoker must use the full Amazon Resource Name (ARN) of that version or alias to invoke the function.
                *       Note: Lambda does not support adding policies to version $LATEST.</p>
                *
                *          <p>To grant permission to another account, specify the account ID as the <code>Principal</code>. To grant permission to an
                *       organization defined in Organizations, specify the organization ID as the <code>PrincipalOrgID</code>.
                *       For Amazon Web Services services, the principal is a domain-style identifier defined by the service,
                *       like <code>s3.amazonaws.com</code> or <code>sns.amazonaws.com</code>. For Amazon Web Services services, you can also specify
                *       the ARN of the associated resource as the <code>SourceArn</code>. If you grant permission to a service principal without
                *       specifying the source, other accounts could potentially configure resources in their account to invoke your
                *       Lambda function.</p>
                *
                *          <p>This action adds a statement to a resource-based permissions policy for the function. For more information
                *       about function policies, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html">Lambda Function Policies</a>. </p>
                */
            addPermission(args: AddPermissionCommandInput, options?: __HttpHandlerOptions): Promise<AddPermissionCommandOutput>;
            addPermission(args: AddPermissionCommandInput, cb: (err: any, data?: AddPermissionCommandOutput) => void): void;
            addPermission(args: AddPermissionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddPermissionCommandOutput) => void): void;
            /**
                * <p>Creates an <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a> for a
                *       Lambda function version. Use aliases to provide clients with a function identifier that you can update to invoke a
                *       different version.</p>
                *          <p>You can also map an alias to split invocation requests between two versions. Use the
                *         <code>RoutingConfig</code> parameter to specify a second version and the percentage of invocation requests that
                *       it receives.</p>
                */
            createAlias(args: CreateAliasCommandInput, options?: __HttpHandlerOptions): Promise<CreateAliasCommandOutput>;
            createAlias(args: CreateAliasCommandInput, cb: (err: any, data?: CreateAliasCommandOutput) => void): void;
            createAlias(args: CreateAliasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAliasCommandOutput) => void): void;
            /**
                * <p>Creates a code signing configuration. A <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-trustedcode.html">code signing configuration</a> defines a list of
                *       allowed signing profiles and defines the code-signing validation policy (action to be taken if deployment
                *       validation checks fail). </p>
                */
            createCodeSigningConfig(args: CreateCodeSigningConfigCommandInput, options?: __HttpHandlerOptions): Promise<CreateCodeSigningConfigCommandOutput>;
            createCodeSigningConfig(args: CreateCodeSigningConfigCommandInput, cb: (err: any, data?: CreateCodeSigningConfigCommandOutput) => void): void;
            createCodeSigningConfig(args: CreateCodeSigningConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateCodeSigningConfigCommandOutput) => void): void;
            /**
                * <p>Creates a mapping between an event source and an Lambda function. Lambda reads items from the
                *       event source and triggers the function.</p>
                *          <p>For details about how to configure different event sources, see the following topics. </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-dynamodb-eventsourcemapping">
                *             Amazon DynamoDB Streams</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-eventsourcemapping">
                *             Amazon Kinesis</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-eventsource">
                *             Amazon SQS</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-mq.html#services-mq-eventsourcemapping">
                *             Amazon MQ and RabbitMQ</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html">
                *             Amazon MSK</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/kafka-smaa.html">
                *             Apache Kafka</a>
                *                </p>
                *             </li>
                *          </ul>
                *
                *          <p>The following error handling options are only available for stream sources (DynamoDB and Kinesis):</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>BisectBatchOnFunctionError</code> - If the function returns an error, split the batch in two and retry.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DestinationConfig</code> - Send discarded records to an Amazon SQS queue or Amazon SNS topic.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MaximumRecordAgeInSeconds</code> - Discard records older than the specified age. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MaximumRetryAttempts</code> - Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ParallelizationFactor</code> - Process multiple batches from each shard concurrently.</p>
                *             </li>
                *          </ul>
                *          <p>For information about which configuration parameters apply to each event source, see the following topics.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-ddb-params">
                *           Amazon DynamoDB Streams</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-params">
                *           Amazon Kinesis</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#services-sqs-params">
                *           Amazon SQS</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-mq.html#services-mq-params">
                *           Amazon MQ and RabbitMQ</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html#services-msk-parms">
                *           Amazon MSK</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-kafka.html#services-kafka-parms">
                *           Apache Kafka</a>
                *                </p>
                *             </li>
                *          </ul>
                */
            createEventSourceMapping(args: CreateEventSourceMappingCommandInput, options?: __HttpHandlerOptions): Promise<CreateEventSourceMappingCommandOutput>;
            createEventSourceMapping(args: CreateEventSourceMappingCommandInput, cb: (err: any, data?: CreateEventSourceMappingCommandOutput) => void): void;
            createEventSourceMapping(args: CreateEventSourceMappingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEventSourceMappingCommandOutput) => void): void;
            /**
                * <p>Creates a Lambda function. To create a function, you need a <a href="https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html">deployment package</a> and an <a href="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role">execution role</a>. The
                *       deployment package is a .zip file  archive or container image that contains your function code. The execution role grants the function permission to use Amazon Web Services
                *       services, such as Amazon CloudWatch Logs for log streaming and X-Ray for request tracing.</p>
                *
                *          <p>You set the package type to <code>Image</code> if the deployment package is a
                *       <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html">container image</a>. For a container image,
                *       the code property must include the URI of a container image in the Amazon ECR registry.
                *       You do not need to specify the handler and runtime properties. </p>
                *
                *          <p>You set the package type to <code>Zip</code> if the deployment package is a <a href="https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html#gettingstarted-package-zip">.zip file
                *         archive</a>. For a .zip file archive, the code property specifies the location of the
                *       .zip file. You must also specify the handler and runtime properties. The code in the
                *       deployment package must be compatible with the target instruction set architecture of the
                *       function (<code>x86-64</code> or <code>arm64</code>). If you do not specify the architecture, the default value is
                *       <code>x86-64</code>.</p>
                *
                *          <p>When you create a function, Lambda provisions an instance of the function and its supporting resources. If
                *       your function connects to a VPC, this process can take a minute or so. During this time, you can't invoke or
                *       modify the function. The <code>State</code>, <code>StateReason</code>, and <code>StateReasonCode</code> fields in
                *       the response from <a>GetFunctionConfiguration</a> indicate when the function is ready to invoke. For
                *       more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/functions-states.html">Function
                *         States</a>.</p>
                *
                *          <p>A function has an unpublished version, and can have published versions and aliases. The unpublished version
                *       changes when you update your function's code and configuration. A published version is a snapshot of your function
                *       code and configuration that can't be changed. An alias is a named resource that maps to a version, and can be
                *       changed to map to a different version. Use the <code>Publish</code> parameter to create version <code>1</code> of
                *       your function from its initial configuration.</p>
                *
                *          <p>The other parameters let you configure version-specific and function-level settings. You can modify
                *       version-specific settings later with <a>UpdateFunctionConfiguration</a>. Function-level settings apply
                *       to both the unpublished and published versions of the function, and include tags (<a>TagResource</a>)
                *       and per-function concurrency limits (<a>PutFunctionConcurrency</a>).</p>
                *
                *          <p>You can use code signing if your deployment package is a .zip file archive. To enable code signing for this function,
                *       specify the ARN of a code-signing configuration. When a user
                *       attempts to deploy a code package with <a>UpdateFunctionCode</a>, Lambda checks that the code
                *       package has a valid signature from a trusted publisher. The code-signing configuration
                *       includes set set of signing profiles, which define the trusted publishers for this function.</p>
                *
                *          <p>If another account or an Amazon Web Services service invokes your function, use <a>AddPermission</a> to grant
                *       permission by creating a resource-based IAM policy. You can grant permissions at the function level, on a version,
                *       or on an alias.</p>
                *
                *          <p>To invoke your function directly, use <a>Invoke</a>. To invoke your function in response to events
                *       in other Amazon Web Services services, create an event source mapping (<a>CreateEventSourceMapping</a>), or configure a
                *       function trigger in the other service. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-invocation.html">Invoking Functions</a>.</p>
                */
            createFunction(args: CreateFunctionCommandInput, options?: __HttpHandlerOptions): Promise<CreateFunctionCommandOutput>;
            createFunction(args: CreateFunctionCommandInput, cb: (err: any, data?: CreateFunctionCommandOutput) => void): void;
            createFunction(args: CreateFunctionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateFunctionCommandOutput) => void): void;
            /**
                * <p>Creates a Lambda function URL with the specified configuration parameters. A function URL is
                *       a dedicated HTTP(S) endpoint that you can use to invoke your function.</p>
                */
            createFunctionUrlConfig(args: CreateFunctionUrlConfigCommandInput, options?: __HttpHandlerOptions): Promise<CreateFunctionUrlConfigCommandOutput>;
            createFunctionUrlConfig(args: CreateFunctionUrlConfigCommandInput, cb: (err: any, data?: CreateFunctionUrlConfigCommandOutput) => void): void;
            createFunctionUrlConfig(args: CreateFunctionUrlConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateFunctionUrlConfigCommandOutput) => void): void;
            /**
                * <p>Deletes a Lambda function <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a>.</p>
                */
            deleteAlias(args: DeleteAliasCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAliasCommandOutput>;
            deleteAlias(args: DeleteAliasCommandInput, cb: (err: any, data?: DeleteAliasCommandOutput) => void): void;
            deleteAlias(args: DeleteAliasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAliasCommandOutput) => void): void;
            /**
                * <p>Deletes the code signing configuration. You can delete the code signing configuration only if no function is
                *       using it. </p>
                */
            deleteCodeSigningConfig(args: DeleteCodeSigningConfigCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCodeSigningConfigCommandOutput>;
            deleteCodeSigningConfig(args: DeleteCodeSigningConfigCommandInput, cb: (err: any, data?: DeleteCodeSigningConfigCommandOutput) => void): void;
            deleteCodeSigningConfig(args: DeleteCodeSigningConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCodeSigningConfigCommandOutput) => void): void;
            /**
                * <p>Deletes an <a href="https://docs.aws.amazon.com/lambda/latest/dg/intro-invocation-modes.html">event source
                *         mapping</a>. You can get the identifier of a mapping from the output of <a>ListEventSourceMappings</a>.</p>
                *          <p>When you delete an event source mapping, it enters a <code>Deleting</code> state and might not be completely
                *       deleted for several seconds.</p>
                */
            deleteEventSourceMapping(args: DeleteEventSourceMappingCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEventSourceMappingCommandOutput>;
            deleteEventSourceMapping(args: DeleteEventSourceMappingCommandInput, cb: (err: any, data?: DeleteEventSourceMappingCommandOutput) => void): void;
            deleteEventSourceMapping(args: DeleteEventSourceMappingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEventSourceMappingCommandOutput) => void): void;
            /**
                * <p>Deletes a Lambda function. To delete a specific function version, use the <code>Qualifier</code> parameter.
                *       Otherwise, all versions and aliases are deleted.</p>
                *
                *          <p>To delete Lambda event source mappings that invoke a function, use <a>DeleteEventSourceMapping</a>.
                *       For Amazon Web Services services and resources that invoke your function directly, delete the trigger in the service where you
                *       originally configured it.</p>
                */
            deleteFunction(args: DeleteFunctionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFunctionCommandOutput>;
            deleteFunction(args: DeleteFunctionCommandInput, cb: (err: any, data?: DeleteFunctionCommandOutput) => void): void;
            deleteFunction(args: DeleteFunctionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFunctionCommandOutput) => void): void;
            /**
                * <p>Removes the code signing configuration from the function.</p>
                */
            deleteFunctionCodeSigningConfig(args: DeleteFunctionCodeSigningConfigCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFunctionCodeSigningConfigCommandOutput>;
            deleteFunctionCodeSigningConfig(args: DeleteFunctionCodeSigningConfigCommandInput, cb: (err: any, data?: DeleteFunctionCodeSigningConfigCommandOutput) => void): void;
            deleteFunctionCodeSigningConfig(args: DeleteFunctionCodeSigningConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFunctionCodeSigningConfigCommandOutput) => void): void;
            /**
                * <p>Removes a concurrent execution limit from a function.</p>
                */
            deleteFunctionConcurrency(args: DeleteFunctionConcurrencyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFunctionConcurrencyCommandOutput>;
            deleteFunctionConcurrency(args: DeleteFunctionConcurrencyCommandInput, cb: (err: any, data?: DeleteFunctionConcurrencyCommandOutput) => void): void;
            deleteFunctionConcurrency(args: DeleteFunctionConcurrencyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFunctionConcurrencyCommandOutput) => void): void;
            /**
                * <p>Deletes the configuration for asynchronous invocation for a function, version, or alias.</p>
                *          <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>
                */
            deleteFunctionEventInvokeConfig(args: DeleteFunctionEventInvokeConfigCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFunctionEventInvokeConfigCommandOutput>;
            deleteFunctionEventInvokeConfig(args: DeleteFunctionEventInvokeConfigCommandInput, cb: (err: any, data?: DeleteFunctionEventInvokeConfigCommandOutput) => void): void;
            deleteFunctionEventInvokeConfig(args: DeleteFunctionEventInvokeConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFunctionEventInvokeConfigCommandOutput) => void): void;
            /**
                * <p>Deletes a Lambda function URL. When you delete a function URL, you
                *       can't recover it. Creating a new function URL results in a different URL address.</p>
                */
            deleteFunctionUrlConfig(args: DeleteFunctionUrlConfigCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFunctionUrlConfigCommandOutput>;
            deleteFunctionUrlConfig(args: DeleteFunctionUrlConfigCommandInput, cb: (err: any, data?: DeleteFunctionUrlConfigCommandOutput) => void): void;
            deleteFunctionUrlConfig(args: DeleteFunctionUrlConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFunctionUrlConfigCommandOutput) => void): void;
            /**
                * <p>Deletes a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda
                *         layer</a>. Deleted versions can no longer be viewed or added to functions. To avoid
                *       breaking functions, a copy of the version remains in Lambda until no functions refer to it.</p>
                */
            deleteLayerVersion(args: DeleteLayerVersionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLayerVersionCommandOutput>;
            deleteLayerVersion(args: DeleteLayerVersionCommandInput, cb: (err: any, data?: DeleteLayerVersionCommandOutput) => void): void;
            deleteLayerVersion(args: DeleteLayerVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLayerVersionCommandOutput) => void): void;
            /**
                * <p>Deletes the provisioned concurrency configuration for a function.</p>
                */
            deleteProvisionedConcurrencyConfig(args: DeleteProvisionedConcurrencyConfigCommandInput, options?: __HttpHandlerOptions): Promise<DeleteProvisionedConcurrencyConfigCommandOutput>;
            deleteProvisionedConcurrencyConfig(args: DeleteProvisionedConcurrencyConfigCommandInput, cb: (err: any, data?: DeleteProvisionedConcurrencyConfigCommandOutput) => void): void;
            deleteProvisionedConcurrencyConfig(args: DeleteProvisionedConcurrencyConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteProvisionedConcurrencyConfigCommandOutput) => void): void;
            /**
                * <p>Retrieves details about your account's <a href="https://docs.aws.amazon.com/lambda/latest/dg/limits.html">limits</a> and usage in an Amazon Web Services Region.</p>
                */
            getAccountSettings(args: GetAccountSettingsCommandInput, options?: __HttpHandlerOptions): Promise<GetAccountSettingsCommandOutput>;
            getAccountSettings(args: GetAccountSettingsCommandInput, cb: (err: any, data?: GetAccountSettingsCommandOutput) => void): void;
            getAccountSettings(args: GetAccountSettingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAccountSettingsCommandOutput) => void): void;
            /**
                * <p>Returns details about a Lambda function <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a>.</p>
                */
            getAlias(args: GetAliasCommandInput, options?: __HttpHandlerOptions): Promise<GetAliasCommandOutput>;
            getAlias(args: GetAliasCommandInput, cb: (err: any, data?: GetAliasCommandOutput) => void): void;
            getAlias(args: GetAliasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAliasCommandOutput) => void): void;
            /**
                * <p>Returns information about the specified code signing configuration.</p>
                */
            getCodeSigningConfig(args: GetCodeSigningConfigCommandInput, options?: __HttpHandlerOptions): Promise<GetCodeSigningConfigCommandOutput>;
            getCodeSigningConfig(args: GetCodeSigningConfigCommandInput, cb: (err: any, data?: GetCodeSigningConfigCommandOutput) => void): void;
            getCodeSigningConfig(args: GetCodeSigningConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCodeSigningConfigCommandOutput) => void): void;
            /**
                * <p>Returns details about an event source mapping. You can get the identifier of a mapping from the output of
                *         <a>ListEventSourceMappings</a>.</p>
                */
            getEventSourceMapping(args: GetEventSourceMappingCommandInput, options?: __HttpHandlerOptions): Promise<GetEventSourceMappingCommandOutput>;
            getEventSourceMapping(args: GetEventSourceMappingCommandInput, cb: (err: any, data?: GetEventSourceMappingCommandOutput) => void): void;
            getEventSourceMapping(args: GetEventSourceMappingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEventSourceMappingCommandOutput) => void): void;
            /**
                * <p>Returns information about the function or function version, with a link to download the deployment package
                *       that's valid for 10 minutes. If you specify a function version, only details that are specific to that version are
                *       returned.</p>
                */
            getFunction(args: GetFunctionCommandInput, options?: __HttpHandlerOptions): Promise<GetFunctionCommandOutput>;
            getFunction(args: GetFunctionCommandInput, cb: (err: any, data?: GetFunctionCommandOutput) => void): void;
            getFunction(args: GetFunctionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetFunctionCommandOutput) => void): void;
            /**
                * <p>Returns the code signing configuration for the specified function.</p>
                */
            getFunctionCodeSigningConfig(args: GetFunctionCodeSigningConfigCommandInput, options?: __HttpHandlerOptions): Promise<GetFunctionCodeSigningConfigCommandOutput>;
            getFunctionCodeSigningConfig(args: GetFunctionCodeSigningConfigCommandInput, cb: (err: any, data?: GetFunctionCodeSigningConfigCommandOutput) => void): void;
            getFunctionCodeSigningConfig(args: GetFunctionCodeSigningConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetFunctionCodeSigningConfigCommandOutput) => void): void;
            /**
                * <p>Returns details about the reserved concurrency configuration for a function. To set a concurrency limit for a
                *       function, use <a>PutFunctionConcurrency</a>.</p>
                */
            getFunctionConcurrency(args: GetFunctionConcurrencyCommandInput, options?: __HttpHandlerOptions): Promise<GetFunctionConcurrencyCommandOutput>;
            getFunctionConcurrency(args: GetFunctionConcurrencyCommandInput, cb: (err: any, data?: GetFunctionConcurrencyCommandOutput) => void): void;
            getFunctionConcurrency(args: GetFunctionConcurrencyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetFunctionConcurrencyCommandOutput) => void): void;
            /**
                * <p>Returns the version-specific settings of a Lambda function or version. The output includes only options that
                *       can vary between versions of a function. To modify these settings, use <a>UpdateFunctionConfiguration</a>.</p>
                *          <p>To get all of a function's details, including function-level settings, use <a>GetFunction</a>.</p>
                */
            getFunctionConfiguration(args: GetFunctionConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<GetFunctionConfigurationCommandOutput>;
            getFunctionConfiguration(args: GetFunctionConfigurationCommandInput, cb: (err: any, data?: GetFunctionConfigurationCommandOutput) => void): void;
            getFunctionConfiguration(args: GetFunctionConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetFunctionConfigurationCommandOutput) => void): void;
            /**
                * <p>Retrieves the configuration for asynchronous invocation for a function, version, or alias.</p>
                *          <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>
                */
            getFunctionEventInvokeConfig(args: GetFunctionEventInvokeConfigCommandInput, options?: __HttpHandlerOptions): Promise<GetFunctionEventInvokeConfigCommandOutput>;
            getFunctionEventInvokeConfig(args: GetFunctionEventInvokeConfigCommandInput, cb: (err: any, data?: GetFunctionEventInvokeConfigCommandOutput) => void): void;
            getFunctionEventInvokeConfig(args: GetFunctionEventInvokeConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetFunctionEventInvokeConfigCommandOutput) => void): void;
            /**
                * <p>Returns details about a Lambda function URL.</p>
                */
            getFunctionUrlConfig(args: GetFunctionUrlConfigCommandInput, options?: __HttpHandlerOptions): Promise<GetFunctionUrlConfigCommandOutput>;
            getFunctionUrlConfig(args: GetFunctionUrlConfigCommandInput, cb: (err: any, data?: GetFunctionUrlConfigCommandOutput) => void): void;
            getFunctionUrlConfig(args: GetFunctionUrlConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetFunctionUrlConfigCommandOutput) => void): void;
            /**
                * <p>Returns information about a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda
                *         layer</a>, with a link to download the layer archive
                *         that's valid for 10 minutes.</p>
                */
            getLayerVersion(args: GetLayerVersionCommandInput, options?: __HttpHandlerOptions): Promise<GetLayerVersionCommandOutput>;
            getLayerVersion(args: GetLayerVersionCommandInput, cb: (err: any, data?: GetLayerVersionCommandOutput) => void): void;
            getLayerVersion(args: GetLayerVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLayerVersionCommandOutput) => void): void;
            /**
                * <p>Returns information about a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda
                *         layer</a>, with a link to download the layer archive
                *         that's valid for 10 minutes.</p>
                */
            getLayerVersionByArn(args: GetLayerVersionByArnCommandInput, options?: __HttpHandlerOptions): Promise<GetLayerVersionByArnCommandOutput>;
            getLayerVersionByArn(args: GetLayerVersionByArnCommandInput, cb: (err: any, data?: GetLayerVersionByArnCommandOutput) => void): void;
            getLayerVersionByArn(args: GetLayerVersionByArnCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLayerVersionByArnCommandOutput) => void): void;
            /**
                * <p>Returns the permission policy for a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda
                *         layer</a>. For more information, see <a>AddLayerVersionPermission</a>.</p>
                */
            getLayerVersionPolicy(args: GetLayerVersionPolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetLayerVersionPolicyCommandOutput>;
            getLayerVersionPolicy(args: GetLayerVersionPolicyCommandInput, cb: (err: any, data?: GetLayerVersionPolicyCommandOutput) => void): void;
            getLayerVersionPolicy(args: GetLayerVersionPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLayerVersionPolicyCommandOutput) => void): void;
            /**
                * <p>Returns the <a href="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html">resource-based IAM policy</a> for a function, version, or alias.</p>
                */
            getPolicy(args: GetPolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetPolicyCommandOutput>;
            getPolicy(args: GetPolicyCommandInput, cb: (err: any, data?: GetPolicyCommandOutput) => void): void;
            getPolicy(args: GetPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPolicyCommandOutput) => void): void;
            /**
                * <p>Retrieves the provisioned concurrency configuration for a function's alias or version.</p>
                */
            getProvisionedConcurrencyConfig(args: GetProvisionedConcurrencyConfigCommandInput, options?: __HttpHandlerOptions): Promise<GetProvisionedConcurrencyConfigCommandOutput>;
            getProvisionedConcurrencyConfig(args: GetProvisionedConcurrencyConfigCommandInput, cb: (err: any, data?: GetProvisionedConcurrencyConfigCommandOutput) => void): void;
            getProvisionedConcurrencyConfig(args: GetProvisionedConcurrencyConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetProvisionedConcurrencyConfigCommandOutput) => void): void;
            /**
                * <p>Invokes a Lambda function. You can invoke a function synchronously (and wait for the response), or
                *       asynchronously. To invoke a function asynchronously, set <code>InvocationType</code> to <code>Event</code>.</p>
                *
                *          <p>For <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-sync.html">synchronous invocation</a>,
                *       details about the function response, including errors, are included in the response body and headers. For either
                *       invocation type, you can find more information in the <a href="https://docs.aws.amazon.com/lambda/latest/dg/monitoring-functions.html">execution log</a> and <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html">trace</a>.</p>
                *
                *          <p>When an error occurs, your function may be invoked multiple times. Retry behavior varies by error type,
                *       client, event source, and invocation type. For example, if you invoke a function asynchronously and it returns an
                *       error, Lambda executes the function up to two more times. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/retries-on-errors.html">Retry Behavior</a>.</p>
                *
                *          <p>For <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html">asynchronous invocation</a>,
                *       Lambda adds events to a queue before sending them to your function. If your function does not have enough capacity
                *       to keep up with the queue, events may be lost. Occasionally, your function may receive the same event multiple
                *       times, even if no error occurs. To retain events that were not processed, configure your function with a <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq">dead-letter queue</a>.</p>
                *
                *          <p>The status code in the API response doesn't reflect function errors. Error codes are reserved for errors that
                *       prevent your function from executing, such as permissions errors, <a href="https://docs.aws.amazon.com/lambda/latest/dg/limits.html">limit errors</a>, or issues with your function's code and configuration.
                *       For example, Lambda returns <code>TooManyRequestsException</code> if executing the function would cause you to
                *       exceed a concurrency limit at either the account level (<code>ConcurrentInvocationLimitExceeded</code>) or
                *       function level (<code>ReservedFunctionConcurrentInvocationLimitExceeded</code>).</p>
                *
                *          <p>For functions with a long timeout, your client might be disconnected during synchronous invocation while it
                *       waits for a response. Configure your HTTP client, SDK, firewall, proxy, or operating system to allow for long
                *       connections with timeout or keep-alive settings.</p>
                *
                *          <p>This operation requires permission for the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_awslambda.html">lambda:InvokeFunction</a> action.</p>
                */
            invoke(args: InvokeCommandInput, options?: __HttpHandlerOptions): Promise<InvokeCommandOutput>;
            invoke(args: InvokeCommandInput, cb: (err: any, data?: InvokeCommandOutput) => void): void;
            invoke(args: InvokeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: InvokeCommandOutput) => void): void;
            /**
                * @deprecated
                *
                * <important>
                *             <p>For asynchronous function invocation, use <a>Invoke</a>.</p>
                *          </important>
                *          <p>Invokes a function asynchronously.</p>
                */
            invokeAsync(args: InvokeAsyncCommandInput, options?: __HttpHandlerOptions): Promise<InvokeAsyncCommandOutput>;
            invokeAsync(args: InvokeAsyncCommandInput, cb: (err: any, data?: InvokeAsyncCommandOutput) => void): void;
            invokeAsync(args: InvokeAsyncCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: InvokeAsyncCommandOutput) => void): void;
            /**
                * <p>Returns a list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">aliases</a>
                *       for a Lambda function.</p>
                */
            listAliases(args: ListAliasesCommandInput, options?: __HttpHandlerOptions): Promise<ListAliasesCommandOutput>;
            listAliases(args: ListAliasesCommandInput, cb: (err: any, data?: ListAliasesCommandOutput) => void): void;
            listAliases(args: ListAliasesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAliasesCommandOutput) => void): void;
            /**
                * <p>Returns a list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuring-codesigning.html">code
                *         signing configurations</a>. A request returns up to 10,000 configurations per
                *       call. You can use the <code>MaxItems</code> parameter to return fewer configurations per call. </p>
                */
            listCodeSigningConfigs(args: ListCodeSigningConfigsCommandInput, options?: __HttpHandlerOptions): Promise<ListCodeSigningConfigsCommandOutput>;
            listCodeSigningConfigs(args: ListCodeSigningConfigsCommandInput, cb: (err: any, data?: ListCodeSigningConfigsCommandOutput) => void): void;
            listCodeSigningConfigs(args: ListCodeSigningConfigsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCodeSigningConfigsCommandOutput) => void): void;
            /**
                * <p>Lists event source mappings. Specify an <code>EventSourceArn</code> to only show event source mappings for a
                *       single event source.</p>
                */
            listEventSourceMappings(args: ListEventSourceMappingsCommandInput, options?: __HttpHandlerOptions): Promise<ListEventSourceMappingsCommandOutput>;
            listEventSourceMappings(args: ListEventSourceMappingsCommandInput, cb: (err: any, data?: ListEventSourceMappingsCommandOutput) => void): void;
            listEventSourceMappings(args: ListEventSourceMappingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEventSourceMappingsCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of configurations for asynchronous invocation for a function.</p>
                *          <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>
                */
            listFunctionEventInvokeConfigs(args: ListFunctionEventInvokeConfigsCommandInput, options?: __HttpHandlerOptions): Promise<ListFunctionEventInvokeConfigsCommandOutput>;
            listFunctionEventInvokeConfigs(args: ListFunctionEventInvokeConfigsCommandInput, cb: (err: any, data?: ListFunctionEventInvokeConfigsCommandOutput) => void): void;
            listFunctionEventInvokeConfigs(args: ListFunctionEventInvokeConfigsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFunctionEventInvokeConfigsCommandOutput) => void): void;
            /**
                * <p>Returns a list of Lambda functions, with the version-specific configuration of each. Lambda returns up to 50
                *       functions per call.</p>
                *          <p>Set <code>FunctionVersion</code> to <code>ALL</code> to include all published versions of each function in
                *       addition to the unpublished version. </p>
                *          <note>
                *             <p>The <code>ListFunctions</code> action returns a subset of the <a>FunctionConfiguration</a> fields.
                *       To get the additional fields (State, StateReasonCode, StateReason, LastUpdateStatus, LastUpdateStatusReason, LastUpdateStatusReasonCode)
                *       for a function or version, use <a>GetFunction</a>.</p>
                *          </note>
                */
            listFunctions(args: ListFunctionsCommandInput, options?: __HttpHandlerOptions): Promise<ListFunctionsCommandOutput>;
            listFunctions(args: ListFunctionsCommandInput, cb: (err: any, data?: ListFunctionsCommandOutput) => void): void;
            listFunctions(args: ListFunctionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFunctionsCommandOutput) => void): void;
            /**
                * <p>List the functions that use the specified code signing configuration. You can use this method prior to deleting a
                *       code signing configuration, to verify that no functions are using it.</p>
                */
            listFunctionsByCodeSigningConfig(args: ListFunctionsByCodeSigningConfigCommandInput, options?: __HttpHandlerOptions): Promise<ListFunctionsByCodeSigningConfigCommandOutput>;
            listFunctionsByCodeSigningConfig(args: ListFunctionsByCodeSigningConfigCommandInput, cb: (err: any, data?: ListFunctionsByCodeSigningConfigCommandOutput) => void): void;
            listFunctionsByCodeSigningConfig(args: ListFunctionsByCodeSigningConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFunctionsByCodeSigningConfigCommandOutput) => void): void;
            /**
                * <p>Returns a list of Lambda function URLs for the specified function.</p>
                */
            listFunctionUrlConfigs(args: ListFunctionUrlConfigsCommandInput, options?: __HttpHandlerOptions): Promise<ListFunctionUrlConfigsCommandOutput>;
            listFunctionUrlConfigs(args: ListFunctionUrlConfigsCommandInput, cb: (err: any, data?: ListFunctionUrlConfigsCommandOutput) => void): void;
            listFunctionUrlConfigs(args: ListFunctionUrlConfigsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFunctionUrlConfigsCommandOutput) => void): void;
            /**
                * <p>Lists <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-layers.html">Lambda
                *         layers</a> and shows information about the latest version of each. Specify a
                *         <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime
                *         identifier</a> to list only layers that indicate that they're compatible with that
                *       runtime. Specify a compatible architecture to include only layers that are compatible with
                *       that  <a href="https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html">instruction set architecture</a>.</p>
                */
            listLayers(args: ListLayersCommandInput, options?: __HttpHandlerOptions): Promise<ListLayersCommandOutput>;
            listLayers(args: ListLayersCommandInput, cb: (err: any, data?: ListLayersCommandOutput) => void): void;
            listLayers(args: ListLayersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLayersCommandOutput) => void): void;
            /**
                * <p>Lists the versions of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda
                *         layer</a>. Versions that have been deleted aren't listed. Specify a <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime identifier</a> to list only
                *       versions that indicate that they're compatible with that runtime. Specify a compatible architecture to include only
                *       layer versions that are compatible with that architecture.</p>
                */
            listLayerVersions(args: ListLayerVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListLayerVersionsCommandOutput>;
            listLayerVersions(args: ListLayerVersionsCommandInput, cb: (err: any, data?: ListLayerVersionsCommandOutput) => void): void;
            listLayerVersions(args: ListLayerVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLayerVersionsCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of provisioned concurrency configurations for a function.</p>
                */
            listProvisionedConcurrencyConfigs(args: ListProvisionedConcurrencyConfigsCommandInput, options?: __HttpHandlerOptions): Promise<ListProvisionedConcurrencyConfigsCommandOutput>;
            listProvisionedConcurrencyConfigs(args: ListProvisionedConcurrencyConfigsCommandInput, cb: (err: any, data?: ListProvisionedConcurrencyConfigsCommandOutput) => void): void;
            listProvisionedConcurrencyConfigs(args: ListProvisionedConcurrencyConfigsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListProvisionedConcurrencyConfigsCommandOutput) => void): void;
            /**
                * <p>Returns a function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a>. You can
                *       also view tags with <a>GetFunction</a>.</p>
                */
            listTags(args: ListTagsCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsCommandOutput>;
            listTags(args: ListTagsCommandInput, cb: (err: any, data?: ListTagsCommandOutput) => void): void;
            listTags(args: ListTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsCommandOutput) => void): void;
            /**
                * <p>Returns a list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">versions</a>,
                *       with the version-specific configuration of each. Lambda returns up to 50 versions per call.</p>
                */
            listVersionsByFunction(args: ListVersionsByFunctionCommandInput, options?: __HttpHandlerOptions): Promise<ListVersionsByFunctionCommandOutput>;
            listVersionsByFunction(args: ListVersionsByFunctionCommandInput, cb: (err: any, data?: ListVersionsByFunctionCommandOutput) => void): void;
            listVersionsByFunction(args: ListVersionsByFunctionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListVersionsByFunctionCommandOutput) => void): void;
            /**
                * <p>Creates an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda
                *         layer</a> from a ZIP archive. Each time you call <code>PublishLayerVersion</code> with the same
                *       layer name, a new version is created.</p>
                *          <p>Add layers to your function with <a>CreateFunction</a> or <a>UpdateFunctionConfiguration</a>.</p>
                */
            publishLayerVersion(args: PublishLayerVersionCommandInput, options?: __HttpHandlerOptions): Promise<PublishLayerVersionCommandOutput>;
            publishLayerVersion(args: PublishLayerVersionCommandInput, cb: (err: any, data?: PublishLayerVersionCommandOutput) => void): void;
            publishLayerVersion(args: PublishLayerVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PublishLayerVersionCommandOutput) => void): void;
            /**
                * <p>Creates a <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">version</a> from the
                *       current code and configuration of a function. Use versions to create a snapshot of your function code and
                *       configuration that doesn't change.</p>
                *
                *          <p>Lambda doesn't publish a version if the function's configuration and code haven't changed since the last
                *       version. Use <a>UpdateFunctionCode</a> or <a>UpdateFunctionConfiguration</a> to update the
                *       function before publishing a version.</p>
                *
                *          <p>Clients can invoke versions directly or with an alias. To create an alias, use <a>CreateAlias</a>.</p>
                */
            publishVersion(args: PublishVersionCommandInput, options?: __HttpHandlerOptions): Promise<PublishVersionCommandOutput>;
            publishVersion(args: PublishVersionCommandInput, cb: (err: any, data?: PublishVersionCommandOutput) => void): void;
            publishVersion(args: PublishVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PublishVersionCommandOutput) => void): void;
            /**
                * <p>Update the code signing configuration for the function. Changes to the code signing configuration take effect the
                *       next time a user tries to deploy a code package to the function. </p>
                */
            putFunctionCodeSigningConfig(args: PutFunctionCodeSigningConfigCommandInput, options?: __HttpHandlerOptions): Promise<PutFunctionCodeSigningConfigCommandOutput>;
            putFunctionCodeSigningConfig(args: PutFunctionCodeSigningConfigCommandInput, cb: (err: any, data?: PutFunctionCodeSigningConfigCommandOutput) => void): void;
            putFunctionCodeSigningConfig(args: PutFunctionCodeSigningConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutFunctionCodeSigningConfigCommandOutput) => void): void;
            /**
                * <p>Sets the maximum number of simultaneous executions for a function, and reserves capacity for that concurrency
                *       level.</p>
                *          <p>Concurrency settings apply to the function as a whole, including all published versions and the unpublished
                *       version. Reserving concurrency both ensures that your function has capacity to process the specified number of
                *       events simultaneously, and prevents it from scaling beyond that level. Use <a>GetFunction</a> to see
                *       the current setting for a function.</p>
                *          <p>Use <a>GetAccountSettings</a> to see your Regional concurrency limit. You can reserve concurrency
                *       for as many functions as you like, as long as you leave at least 100 simultaneous executions unreserved for
                *       functions that aren't configured with a per-function limit. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html">Managing Concurrency</a>.</p>
                */
            putFunctionConcurrency(args: PutFunctionConcurrencyCommandInput, options?: __HttpHandlerOptions): Promise<PutFunctionConcurrencyCommandOutput>;
            putFunctionConcurrency(args: PutFunctionConcurrencyCommandInput, cb: (err: any, data?: PutFunctionConcurrencyCommandOutput) => void): void;
            putFunctionConcurrency(args: PutFunctionConcurrencyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutFunctionConcurrencyCommandOutput) => void): void;
            /**
                * <p>Configures options for <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html">asynchronous
                *         invocation</a> on a function, version, or alias. If a configuration already exists for a function, version,
                *       or alias, this operation overwrites it. If you exclude any settings, they are removed. To set one option without
                *       affecting existing settings for other options, use <a>UpdateFunctionEventInvokeConfig</a>.</p>
                *          <p>By default, Lambda retries an asynchronous invocation twice if the function returns an error. It retains
                *       events in a queue for up to six hours. When an event fails all processing attempts or stays in the asynchronous
                *       invocation queue for too long, Lambda discards it. To retain discarded events, configure a dead-letter queue with
                *         <a>UpdateFunctionConfiguration</a>.</p>
                *          <p>To send an invocation record to a queue, topic, function, or event bus, specify a <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations">destination</a>. You can configure separate destinations for successful invocations (on-success) and events
                *       that fail all processing attempts (on-failure). You can configure destinations in addition to or instead of a
                *       dead-letter queue.</p>
                */
            putFunctionEventInvokeConfig(args: PutFunctionEventInvokeConfigCommandInput, options?: __HttpHandlerOptions): Promise<PutFunctionEventInvokeConfigCommandOutput>;
            putFunctionEventInvokeConfig(args: PutFunctionEventInvokeConfigCommandInput, cb: (err: any, data?: PutFunctionEventInvokeConfigCommandOutput) => void): void;
            putFunctionEventInvokeConfig(args: PutFunctionEventInvokeConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutFunctionEventInvokeConfigCommandOutput) => void): void;
            /**
                * <p>Adds a provisioned concurrency configuration to a function's alias or version.</p>
                */
            putProvisionedConcurrencyConfig(args: PutProvisionedConcurrencyConfigCommandInput, options?: __HttpHandlerOptions): Promise<PutProvisionedConcurrencyConfigCommandOutput>;
            putProvisionedConcurrencyConfig(args: PutProvisionedConcurrencyConfigCommandInput, cb: (err: any, data?: PutProvisionedConcurrencyConfigCommandOutput) => void): void;
            putProvisionedConcurrencyConfig(args: PutProvisionedConcurrencyConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutProvisionedConcurrencyConfigCommandOutput) => void): void;
            /**
                * <p>Removes a statement from the permissions policy for a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda
                *         layer</a>. For more information, see
                *         <a>AddLayerVersionPermission</a>.</p>
                */
            removeLayerVersionPermission(args: RemoveLayerVersionPermissionCommandInput, options?: __HttpHandlerOptions): Promise<RemoveLayerVersionPermissionCommandOutput>;
            removeLayerVersionPermission(args: RemoveLayerVersionPermissionCommandInput, cb: (err: any, data?: RemoveLayerVersionPermissionCommandOutput) => void): void;
            removeLayerVersionPermission(args: RemoveLayerVersionPermissionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveLayerVersionPermissionCommandOutput) => void): void;
            /**
                * <p>Revokes function-use permission from an Amazon Web Services service or another account. You can get the ID of the statement
                *       from the output of <a>GetPolicy</a>.</p>
                */
            removePermission(args: RemovePermissionCommandInput, options?: __HttpHandlerOptions): Promise<RemovePermissionCommandOutput>;
            removePermission(args: RemovePermissionCommandInput, cb: (err: any, data?: RemovePermissionCommandOutput) => void): void;
            removePermission(args: RemovePermissionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemovePermissionCommandOutput) => void): void;
            /**
                * <p>Adds <a href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a> to a function.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes <a href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a> from a function.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates the configuration of a Lambda function <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a>.</p>
                */
            updateAlias(args: UpdateAliasCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAliasCommandOutput>;
            updateAlias(args: UpdateAliasCommandInput, cb: (err: any, data?: UpdateAliasCommandOutput) => void): void;
            updateAlias(args: UpdateAliasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAliasCommandOutput) => void): void;
            /**
                * <p>Update the code signing configuration. Changes to the code signing configuration take effect the next time a
                *       user tries to deploy a code package to the function. </p>
                */
            updateCodeSigningConfig(args: UpdateCodeSigningConfigCommandInput, options?: __HttpHandlerOptions): Promise<UpdateCodeSigningConfigCommandOutput>;
            updateCodeSigningConfig(args: UpdateCodeSigningConfigCommandInput, cb: (err: any, data?: UpdateCodeSigningConfigCommandOutput) => void): void;
            updateCodeSigningConfig(args: UpdateCodeSigningConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateCodeSigningConfigCommandOutput) => void): void;
            /**
                * <p>Updates an event source mapping. You can change the function that Lambda invokes, or pause
                *       invocation and resume later from the same location.</p>
                *          <p>For details about how to configure different event sources, see the following topics. </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-dynamodb-eventsourcemapping">
                *             Amazon DynamoDB Streams</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-eventsourcemapping">
                *             Amazon Kinesis</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-eventsource">
                *             Amazon SQS</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-mq.html#services-mq-eventsourcemapping">
                *             Amazon MQ and RabbitMQ</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html">
                *             Amazon MSK</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/kafka-smaa.html">
                *             Apache Kafka</a>
                *                </p>
                *             </li>
                *          </ul>
                *
                *          <p>The following error handling options are only available for stream sources (DynamoDB and Kinesis):</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>BisectBatchOnFunctionError</code> - If the function returns an error, split the batch in two and retry.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DestinationConfig</code> - Send discarded records to an Amazon SQS queue or Amazon SNS topic.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MaximumRecordAgeInSeconds</code> - Discard records older than the specified age. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MaximumRetryAttempts</code> - Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ParallelizationFactor</code> - Process multiple batches from each shard concurrently.</p>
                *             </li>
                *          </ul>
                *          <p>For information about which configuration parameters apply to each event source, see the following topics.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-ddb-params">
                *           Amazon DynamoDB Streams</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-params">
                *           Amazon Kinesis</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#services-sqs-params">
                *           Amazon SQS</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-mq.html#services-mq-params">
                *           Amazon MQ and RabbitMQ</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html#services-msk-parms">
                *           Amazon MSK</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-kafka.html#services-kafka-parms">
                *           Apache Kafka</a>
                *                </p>
                *             </li>
                *          </ul>
                */
            updateEventSourceMapping(args: UpdateEventSourceMappingCommandInput, options?: __HttpHandlerOptions): Promise<UpdateEventSourceMappingCommandOutput>;
            updateEventSourceMapping(args: UpdateEventSourceMappingCommandInput, cb: (err: any, data?: UpdateEventSourceMappingCommandOutput) => void): void;
            updateEventSourceMapping(args: UpdateEventSourceMappingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateEventSourceMappingCommandOutput) => void): void;
            /**
                * <p>Updates a Lambda function's code. If code signing is enabled for the function, the code package must be signed
                *       by a trusted publisher. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-trustedcode.html">Configuring code signing</a>.</p>
                *
                *          <p>If the function's package type is <code>Image</code>, you must specify the code package in <code>ImageUri</code> as
                *       the URI of a
                *       <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html">container image</a>
                *       in the Amazon ECR registry.
                *        </p>
                *
                *          <p>If the function's package type is <code>Zip</code>, you must specify the deployment
                *       package as a <a href="https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html#gettingstarted-package-zip">.zip file
                *         archive</a>. Enter the Amazon S3 bucket and key of the code .zip file location.
                *       You can also provide the function code inline using the <code>ZipFile</code> field. </p>
                *          <p>The code in the deployment package must be compatible with the target instruction set
                *       architecture of the function (<code>x86-64</code> or <code>arm64</code>). </p>
                *
                *          <p>The function's code is locked when you publish a version. You can't modify the code of a published version,
                *       only the unpublished version.</p>
                *          <note>
                *             <p>For a function defined as a container image, Lambda resolves the image tag to an image digest. In Amazon ECR, if
                *       you update the image tag to a new image, Lambda does not automatically update the function.</p>
                *          </note>
                */
            updateFunctionCode(args: UpdateFunctionCodeCommandInput, options?: __HttpHandlerOptions): Promise<UpdateFunctionCodeCommandOutput>;
            updateFunctionCode(args: UpdateFunctionCodeCommandInput, cb: (err: any, data?: UpdateFunctionCodeCommandOutput) => void): void;
            updateFunctionCode(args: UpdateFunctionCodeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateFunctionCodeCommandOutput) => void): void;
            /**
                * <p>Modify the version-specific settings of a Lambda function.</p>
                *
                *          <p>When you update a function, Lambda provisions an instance of the function and its supporting resources. If
                *       your function connects to a VPC, this process can take a minute. During this time, you can't modify the function,
                *       but you can still invoke it. The <code>LastUpdateStatus</code>, <code>LastUpdateStatusReason</code>, and
                *         <code>LastUpdateStatusReasonCode</code> fields in the response from <a>GetFunctionConfiguration</a>
                *       indicate when the update is complete and the function is processing events with the new configuration. For more
                *       information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/functions-states.html">Function
                *       States</a>.</p>
                *
                *          <p>These settings can vary between versions of a function and are locked when you publish a version. You can't
                *       modify the configuration of a published version, only the unpublished version.</p>
                *
                *          <p>To configure function concurrency, use <a>PutFunctionConcurrency</a>. To grant invoke permissions
                *       to an account or Amazon Web Services service, use <a>AddPermission</a>.</p>
                */
            updateFunctionConfiguration(args: UpdateFunctionConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateFunctionConfigurationCommandOutput>;
            updateFunctionConfiguration(args: UpdateFunctionConfigurationCommandInput, cb: (err: any, data?: UpdateFunctionConfigurationCommandOutput) => void): void;
            updateFunctionConfiguration(args: UpdateFunctionConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateFunctionConfigurationCommandOutput) => void): void;
            /**
                * <p>Updates the configuration for asynchronous invocation for a function, version, or alias.</p>
                *          <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>
                */
            updateFunctionEventInvokeConfig(args: UpdateFunctionEventInvokeConfigCommandInput, options?: __HttpHandlerOptions): Promise<UpdateFunctionEventInvokeConfigCommandOutput>;
            updateFunctionEventInvokeConfig(args: UpdateFunctionEventInvokeConfigCommandInput, cb: (err: any, data?: UpdateFunctionEventInvokeConfigCommandOutput) => void): void;
            updateFunctionEventInvokeConfig(args: UpdateFunctionEventInvokeConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateFunctionEventInvokeConfigCommandOutput) => void): void;
            /**
                * <p>Updates the configuration for a Lambda function URL.</p>
                */
            updateFunctionUrlConfig(args: UpdateFunctionUrlConfigCommandInput, options?: __HttpHandlerOptions): Promise<UpdateFunctionUrlConfigCommandOutput>;
            updateFunctionUrlConfig(args: UpdateFunctionUrlConfigCommandInput, cb: (err: any, data?: UpdateFunctionUrlConfigCommandOutput) => void): void;
            updateFunctionUrlConfig(args: UpdateFunctionUrlConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateFunctionUrlConfigCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/AddLayerVersionPermissionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { AddLayerVersionPermissionRequest, AddLayerVersionPermissionResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface AddLayerVersionPermissionCommandInput extends AddLayerVersionPermissionRequest {
    }
    export interface AddLayerVersionPermissionCommandOutput extends AddLayerVersionPermissionResponse, __MetadataBearer {
    }
    /**
        * <p>Adds permissions to the resource-based policy of a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda
        *         layer</a>. Use this action to grant layer
        *       usage permission to other accounts. You can grant permission to a single account, all accounts in an organization,
        *       or all Amazon Web Services accounts.  </p>
        *          <p>To revoke permission, call <a>RemoveLayerVersionPermission</a> with the statement ID that you
        *       specified when you added it.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, AddLayerVersionPermissionCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, AddLayerVersionPermissionCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new AddLayerVersionPermissionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddLayerVersionPermissionCommandInput} for command's `input` shape.
        * @see {@link AddLayerVersionPermissionCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class AddLayerVersionPermissionCommand extends $Command<AddLayerVersionPermissionCommandInput, AddLayerVersionPermissionCommandOutput, LambdaClientResolvedConfig> {
            readonly input: AddLayerVersionPermissionCommandInput;
            constructor(input: AddLayerVersionPermissionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddLayerVersionPermissionCommandInput, AddLayerVersionPermissionCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/AddPermissionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { AddPermissionRequest, AddPermissionResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface AddPermissionCommandInput extends AddPermissionRequest {
    }
    export interface AddPermissionCommandOutput extends AddPermissionResponse, __MetadataBearer {
    }
    /**
        * <p>Grants an Amazon Web Services service, account, or organization permission to use a function. You can apply the
        *       policy at the function level, or specify a qualifier to restrict access to a single version or alias. If you use a qualifier,
        *       the invoker must use the full Amazon Resource Name (ARN) of that version or alias to invoke the function.
        *       Note: Lambda does not support adding policies to version $LATEST.</p>
        *
        *          <p>To grant permission to another account, specify the account ID as the <code>Principal</code>. To grant permission to an
        *       organization defined in Organizations, specify the organization ID as the <code>PrincipalOrgID</code>.
        *       For Amazon Web Services services, the principal is a domain-style identifier defined by the service,
        *       like <code>s3.amazonaws.com</code> or <code>sns.amazonaws.com</code>. For Amazon Web Services services, you can also specify
        *       the ARN of the associated resource as the <code>SourceArn</code>. If you grant permission to a service principal without
        *       specifying the source, other accounts could potentially configure resources in their account to invoke your
        *       Lambda function.</p>
        *
        *          <p>This action adds a statement to a resource-based permissions policy for the function. For more information
        *       about function policies, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html">Lambda Function Policies</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, AddPermissionCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, AddPermissionCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new AddPermissionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddPermissionCommandInput} for command's `input` shape.
        * @see {@link AddPermissionCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class AddPermissionCommand extends $Command<AddPermissionCommandInput, AddPermissionCommandOutput, LambdaClientResolvedConfig> {
            readonly input: AddPermissionCommandInput;
            constructor(input: AddPermissionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddPermissionCommandInput, AddPermissionCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/CreateAliasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { AliasConfiguration, CreateAliasRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface CreateAliasCommandInput extends CreateAliasRequest {
    }
    export interface CreateAliasCommandOutput extends AliasConfiguration, __MetadataBearer {
    }
    /**
        * <p>Creates an <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a> for a
        *       Lambda function version. Use aliases to provide clients with a function identifier that you can update to invoke a
        *       different version.</p>
        *          <p>You can also map an alias to split invocation requests between two versions. Use the
        *         <code>RoutingConfig</code> parameter to specify a second version and the percentage of invocation requests that
        *       it receives.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, CreateAliasCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, CreateAliasCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new CreateAliasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAliasCommandInput} for command's `input` shape.
        * @see {@link CreateAliasCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class CreateAliasCommand extends $Command<CreateAliasCommandInput, CreateAliasCommandOutput, LambdaClientResolvedConfig> {
            readonly input: CreateAliasCommandInput;
            constructor(input: CreateAliasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAliasCommandInput, CreateAliasCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/CreateCodeSigningConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { CreateCodeSigningConfigRequest, CreateCodeSigningConfigResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface CreateCodeSigningConfigCommandInput extends CreateCodeSigningConfigRequest {
    }
    export interface CreateCodeSigningConfigCommandOutput extends CreateCodeSigningConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a code signing configuration. A <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-trustedcode.html">code signing configuration</a> defines a list of
        *       allowed signing profiles and defines the code-signing validation policy (action to be taken if deployment
        *       validation checks fail). </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, CreateCodeSigningConfigCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, CreateCodeSigningConfigCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new CreateCodeSigningConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateCodeSigningConfigCommandInput} for command's `input` shape.
        * @see {@link CreateCodeSigningConfigCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class CreateCodeSigningConfigCommand extends $Command<CreateCodeSigningConfigCommandInput, CreateCodeSigningConfigCommandOutput, LambdaClientResolvedConfig> {
            readonly input: CreateCodeSigningConfigCommandInput;
            constructor(input: CreateCodeSigningConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateCodeSigningConfigCommandInput, CreateCodeSigningConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/CreateEventSourceMappingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { CreateEventSourceMappingRequest, EventSourceMappingConfiguration } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface CreateEventSourceMappingCommandInput extends CreateEventSourceMappingRequest {
    }
    export interface CreateEventSourceMappingCommandOutput extends EventSourceMappingConfiguration, __MetadataBearer {
    }
    /**
        * <p>Creates a mapping between an event source and an Lambda function. Lambda reads items from the
        *       event source and triggers the function.</p>
        *          <p>For details about how to configure different event sources, see the following topics. </p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-dynamodb-eventsourcemapping">
        *             Amazon DynamoDB Streams</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-eventsourcemapping">
        *             Amazon Kinesis</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-eventsource">
        *             Amazon SQS</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-mq.html#services-mq-eventsourcemapping">
        *             Amazon MQ and RabbitMQ</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html">
        *             Amazon MSK</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/kafka-smaa.html">
        *             Apache Kafka</a>
        *                </p>
        *             </li>
        *          </ul>
        *
        *          <p>The following error handling options are only available for stream sources (DynamoDB and Kinesis):</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>BisectBatchOnFunctionError</code> - If the function returns an error, split the batch in two and retry.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DestinationConfig</code> - Send discarded records to an Amazon SQS queue or Amazon SNS topic.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>MaximumRecordAgeInSeconds</code> - Discard records older than the specified age. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>MaximumRetryAttempts</code> - Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ParallelizationFactor</code> - Process multiple batches from each shard concurrently.</p>
        *             </li>
        *          </ul>
        *          <p>For information about which configuration parameters apply to each event source, see the following topics.</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-ddb-params">
        *           Amazon DynamoDB Streams</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-params">
        *           Amazon Kinesis</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#services-sqs-params">
        *           Amazon SQS</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-mq.html#services-mq-params">
        *           Amazon MQ and RabbitMQ</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html#services-msk-parms">
        *           Amazon MSK</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-kafka.html#services-kafka-parms">
        *           Apache Kafka</a>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, CreateEventSourceMappingCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, CreateEventSourceMappingCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new CreateEventSourceMappingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateEventSourceMappingCommandInput} for command's `input` shape.
        * @see {@link CreateEventSourceMappingCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class CreateEventSourceMappingCommand extends $Command<CreateEventSourceMappingCommandInput, CreateEventSourceMappingCommandOutput, LambdaClientResolvedConfig> {
            readonly input: CreateEventSourceMappingCommandInput;
            constructor(input: CreateEventSourceMappingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateEventSourceMappingCommandInput, CreateEventSourceMappingCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/CreateFunctionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { CreateFunctionRequest, FunctionConfiguration } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface CreateFunctionCommandInput extends CreateFunctionRequest {
    }
    export interface CreateFunctionCommandOutput extends FunctionConfiguration, __MetadataBearer {
    }
    /**
        * <p>Creates a Lambda function. To create a function, you need a <a href="https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html">deployment package</a> and an <a href="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role">execution role</a>. The
        *       deployment package is a .zip file  archive or container image that contains your function code. The execution role grants the function permission to use Amazon Web Services
        *       services, such as Amazon CloudWatch Logs for log streaming and X-Ray for request tracing.</p>
        *
        *          <p>You set the package type to <code>Image</code> if the deployment package is a
        *       <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html">container image</a>. For a container image,
        *       the code property must include the URI of a container image in the Amazon ECR registry.
        *       You do not need to specify the handler and runtime properties. </p>
        *
        *          <p>You set the package type to <code>Zip</code> if the deployment package is a <a href="https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html#gettingstarted-package-zip">.zip file
        *         archive</a>. For a .zip file archive, the code property specifies the location of the
        *       .zip file. You must also specify the handler and runtime properties. The code in the
        *       deployment package must be compatible with the target instruction set architecture of the
        *       function (<code>x86-64</code> or <code>arm64</code>). If you do not specify the architecture, the default value is
        *       <code>x86-64</code>.</p>
        *
        *          <p>When you create a function, Lambda provisions an instance of the function and its supporting resources. If
        *       your function connects to a VPC, this process can take a minute or so. During this time, you can't invoke or
        *       modify the function. The <code>State</code>, <code>StateReason</code>, and <code>StateReasonCode</code> fields in
        *       the response from <a>GetFunctionConfiguration</a> indicate when the function is ready to invoke. For
        *       more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/functions-states.html">Function
        *         States</a>.</p>
        *
        *          <p>A function has an unpublished version, and can have published versions and aliases. The unpublished version
        *       changes when you update your function's code and configuration. A published version is a snapshot of your function
        *       code and configuration that can't be changed. An alias is a named resource that maps to a version, and can be
        *       changed to map to a different version. Use the <code>Publish</code> parameter to create version <code>1</code> of
        *       your function from its initial configuration.</p>
        *
        *          <p>The other parameters let you configure version-specific and function-level settings. You can modify
        *       version-specific settings later with <a>UpdateFunctionConfiguration</a>. Function-level settings apply
        *       to both the unpublished and published versions of the function, and include tags (<a>TagResource</a>)
        *       and per-function concurrency limits (<a>PutFunctionConcurrency</a>).</p>
        *
        *          <p>You can use code signing if your deployment package is a .zip file archive. To enable code signing for this function,
        *       specify the ARN of a code-signing configuration. When a user
        *       attempts to deploy a code package with <a>UpdateFunctionCode</a>, Lambda checks that the code
        *       package has a valid signature from a trusted publisher. The code-signing configuration
        *       includes set set of signing profiles, which define the trusted publishers for this function.</p>
        *
        *          <p>If another account or an Amazon Web Services service invokes your function, use <a>AddPermission</a> to grant
        *       permission by creating a resource-based IAM policy. You can grant permissions at the function level, on a version,
        *       or on an alias.</p>
        *
        *          <p>To invoke your function directly, use <a>Invoke</a>. To invoke your function in response to events
        *       in other Amazon Web Services services, create an event source mapping (<a>CreateEventSourceMapping</a>), or configure a
        *       function trigger in the other service. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-invocation.html">Invoking Functions</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, CreateFunctionCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, CreateFunctionCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new CreateFunctionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateFunctionCommandInput} for command's `input` shape.
        * @see {@link CreateFunctionCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class CreateFunctionCommand extends $Command<CreateFunctionCommandInput, CreateFunctionCommandOutput, LambdaClientResolvedConfig> {
            readonly input: CreateFunctionCommandInput;
            constructor(input: CreateFunctionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateFunctionCommandInput, CreateFunctionCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/CreateFunctionUrlConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { CreateFunctionUrlConfigRequest, CreateFunctionUrlConfigResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface CreateFunctionUrlConfigCommandInput extends CreateFunctionUrlConfigRequest {
    }
    export interface CreateFunctionUrlConfigCommandOutput extends CreateFunctionUrlConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a Lambda function URL with the specified configuration parameters. A function URL is
        *       a dedicated HTTP(S) endpoint that you can use to invoke your function.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, CreateFunctionUrlConfigCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, CreateFunctionUrlConfigCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new CreateFunctionUrlConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateFunctionUrlConfigCommandInput} for command's `input` shape.
        * @see {@link CreateFunctionUrlConfigCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class CreateFunctionUrlConfigCommand extends $Command<CreateFunctionUrlConfigCommandInput, CreateFunctionUrlConfigCommandOutput, LambdaClientResolvedConfig> {
            readonly input: CreateFunctionUrlConfigCommandInput;
            constructor(input: CreateFunctionUrlConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateFunctionUrlConfigCommandInput, CreateFunctionUrlConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteAliasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { DeleteAliasRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface DeleteAliasCommandInput extends DeleteAliasRequest {
    }
    export interface DeleteAliasCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a Lambda function <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, DeleteAliasCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, DeleteAliasCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new DeleteAliasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAliasCommandInput} for command's `input` shape.
        * @see {@link DeleteAliasCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class DeleteAliasCommand extends $Command<DeleteAliasCommandInput, DeleteAliasCommandOutput, LambdaClientResolvedConfig> {
            readonly input: DeleteAliasCommandInput;
            constructor(input: DeleteAliasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAliasCommandInput, DeleteAliasCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteCodeSigningConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { DeleteCodeSigningConfigRequest, DeleteCodeSigningConfigResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface DeleteCodeSigningConfigCommandInput extends DeleteCodeSigningConfigRequest {
    }
    export interface DeleteCodeSigningConfigCommandOutput extends DeleteCodeSigningConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the code signing configuration. You can delete the code signing configuration only if no function is
        *       using it. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, DeleteCodeSigningConfigCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, DeleteCodeSigningConfigCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new DeleteCodeSigningConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteCodeSigningConfigCommandInput} for command's `input` shape.
        * @see {@link DeleteCodeSigningConfigCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class DeleteCodeSigningConfigCommand extends $Command<DeleteCodeSigningConfigCommandInput, DeleteCodeSigningConfigCommandOutput, LambdaClientResolvedConfig> {
            readonly input: DeleteCodeSigningConfigCommandInput;
            constructor(input: DeleteCodeSigningConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteCodeSigningConfigCommandInput, DeleteCodeSigningConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteEventSourceMappingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { DeleteEventSourceMappingRequest, EventSourceMappingConfiguration } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface DeleteEventSourceMappingCommandInput extends DeleteEventSourceMappingRequest {
    }
    export interface DeleteEventSourceMappingCommandOutput extends EventSourceMappingConfiguration, __MetadataBearer {
    }
    /**
        * <p>Deletes an <a href="https://docs.aws.amazon.com/lambda/latest/dg/intro-invocation-modes.html">event source
        *         mapping</a>. You can get the identifier of a mapping from the output of <a>ListEventSourceMappings</a>.</p>
        *          <p>When you delete an event source mapping, it enters a <code>Deleting</code> state and might not be completely
        *       deleted for several seconds.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, DeleteEventSourceMappingCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, DeleteEventSourceMappingCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new DeleteEventSourceMappingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEventSourceMappingCommandInput} for command's `input` shape.
        * @see {@link DeleteEventSourceMappingCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class DeleteEventSourceMappingCommand extends $Command<DeleteEventSourceMappingCommandInput, DeleteEventSourceMappingCommandOutput, LambdaClientResolvedConfig> {
            readonly input: DeleteEventSourceMappingCommandInput;
            constructor(input: DeleteEventSourceMappingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEventSourceMappingCommandInput, DeleteEventSourceMappingCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteFunctionCodeSigningConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { DeleteFunctionCodeSigningConfigRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface DeleteFunctionCodeSigningConfigCommandInput extends DeleteFunctionCodeSigningConfigRequest {
    }
    export interface DeleteFunctionCodeSigningConfigCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the code signing configuration from the function.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, DeleteFunctionCodeSigningConfigCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, DeleteFunctionCodeSigningConfigCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new DeleteFunctionCodeSigningConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFunctionCodeSigningConfigCommandInput} for command's `input` shape.
        * @see {@link DeleteFunctionCodeSigningConfigCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class DeleteFunctionCodeSigningConfigCommand extends $Command<DeleteFunctionCodeSigningConfigCommandInput, DeleteFunctionCodeSigningConfigCommandOutput, LambdaClientResolvedConfig> {
            readonly input: DeleteFunctionCodeSigningConfigCommandInput;
            constructor(input: DeleteFunctionCodeSigningConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFunctionCodeSigningConfigCommandInput, DeleteFunctionCodeSigningConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteFunctionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { DeleteFunctionRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface DeleteFunctionCommandInput extends DeleteFunctionRequest {
    }
    export interface DeleteFunctionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a Lambda function. To delete a specific function version, use the <code>Qualifier</code> parameter.
        *       Otherwise, all versions and aliases are deleted.</p>
        *
        *          <p>To delete Lambda event source mappings that invoke a function, use <a>DeleteEventSourceMapping</a>.
        *       For Amazon Web Services services and resources that invoke your function directly, delete the trigger in the service where you
        *       originally configured it.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, DeleteFunctionCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, DeleteFunctionCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new DeleteFunctionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFunctionCommandInput} for command's `input` shape.
        * @see {@link DeleteFunctionCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class DeleteFunctionCommand extends $Command<DeleteFunctionCommandInput, DeleteFunctionCommandOutput, LambdaClientResolvedConfig> {
            readonly input: DeleteFunctionCommandInput;
            constructor(input: DeleteFunctionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFunctionCommandInput, DeleteFunctionCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteFunctionConcurrencyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { DeleteFunctionConcurrencyRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface DeleteFunctionConcurrencyCommandInput extends DeleteFunctionConcurrencyRequest {
    }
    export interface DeleteFunctionConcurrencyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes a concurrent execution limit from a function.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, DeleteFunctionConcurrencyCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, DeleteFunctionConcurrencyCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new DeleteFunctionConcurrencyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFunctionConcurrencyCommandInput} for command's `input` shape.
        * @see {@link DeleteFunctionConcurrencyCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class DeleteFunctionConcurrencyCommand extends $Command<DeleteFunctionConcurrencyCommandInput, DeleteFunctionConcurrencyCommandOutput, LambdaClientResolvedConfig> {
            readonly input: DeleteFunctionConcurrencyCommandInput;
            constructor(input: DeleteFunctionConcurrencyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFunctionConcurrencyCommandInput, DeleteFunctionConcurrencyCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteFunctionEventInvokeConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { DeleteFunctionEventInvokeConfigRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface DeleteFunctionEventInvokeConfigCommandInput extends DeleteFunctionEventInvokeConfigRequest {
    }
    export interface DeleteFunctionEventInvokeConfigCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the configuration for asynchronous invocation for a function, version, or alias.</p>
        *          <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, DeleteFunctionEventInvokeConfigCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, DeleteFunctionEventInvokeConfigCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new DeleteFunctionEventInvokeConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFunctionEventInvokeConfigCommandInput} for command's `input` shape.
        * @see {@link DeleteFunctionEventInvokeConfigCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class DeleteFunctionEventInvokeConfigCommand extends $Command<DeleteFunctionEventInvokeConfigCommandInput, DeleteFunctionEventInvokeConfigCommandOutput, LambdaClientResolvedConfig> {
            readonly input: DeleteFunctionEventInvokeConfigCommandInput;
            constructor(input: DeleteFunctionEventInvokeConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFunctionEventInvokeConfigCommandInput, DeleteFunctionEventInvokeConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteFunctionUrlConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { DeleteFunctionUrlConfigRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface DeleteFunctionUrlConfigCommandInput extends DeleteFunctionUrlConfigRequest {
    }
    export interface DeleteFunctionUrlConfigCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a Lambda function URL. When you delete a function URL, you
        *       can't recover it. Creating a new function URL results in a different URL address.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, DeleteFunctionUrlConfigCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, DeleteFunctionUrlConfigCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new DeleteFunctionUrlConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFunctionUrlConfigCommandInput} for command's `input` shape.
        * @see {@link DeleteFunctionUrlConfigCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class DeleteFunctionUrlConfigCommand extends $Command<DeleteFunctionUrlConfigCommandInput, DeleteFunctionUrlConfigCommandOutput, LambdaClientResolvedConfig> {
            readonly input: DeleteFunctionUrlConfigCommandInput;
            constructor(input: DeleteFunctionUrlConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFunctionUrlConfigCommandInput, DeleteFunctionUrlConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteLayerVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { DeleteLayerVersionRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface DeleteLayerVersionCommandInput extends DeleteLayerVersionRequest {
    }
    export interface DeleteLayerVersionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda
        *         layer</a>. Deleted versions can no longer be viewed or added to functions. To avoid
        *       breaking functions, a copy of the version remains in Lambda until no functions refer to it.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, DeleteLayerVersionCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, DeleteLayerVersionCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new DeleteLayerVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLayerVersionCommandInput} for command's `input` shape.
        * @see {@link DeleteLayerVersionCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class DeleteLayerVersionCommand extends $Command<DeleteLayerVersionCommandInput, DeleteLayerVersionCommandOutput, LambdaClientResolvedConfig> {
            readonly input: DeleteLayerVersionCommandInput;
            constructor(input: DeleteLayerVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLayerVersionCommandInput, DeleteLayerVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteProvisionedConcurrencyConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { DeleteProvisionedConcurrencyConfigRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface DeleteProvisionedConcurrencyConfigCommandInput extends DeleteProvisionedConcurrencyConfigRequest {
    }
    export interface DeleteProvisionedConcurrencyConfigCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the provisioned concurrency configuration for a function.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, DeleteProvisionedConcurrencyConfigCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, DeleteProvisionedConcurrencyConfigCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new DeleteProvisionedConcurrencyConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteProvisionedConcurrencyConfigCommandInput} for command's `input` shape.
        * @see {@link DeleteProvisionedConcurrencyConfigCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class DeleteProvisionedConcurrencyConfigCommand extends $Command<DeleteProvisionedConcurrencyConfigCommandInput, DeleteProvisionedConcurrencyConfigCommandOutput, LambdaClientResolvedConfig> {
            readonly input: DeleteProvisionedConcurrencyConfigCommandInput;
            constructor(input: DeleteProvisionedConcurrencyConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteProvisionedConcurrencyConfigCommandInput, DeleteProvisionedConcurrencyConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetAccountSettingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { GetAccountSettingsRequest, GetAccountSettingsResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface GetAccountSettingsCommandInput extends GetAccountSettingsRequest {
    }
    export interface GetAccountSettingsCommandOutput extends GetAccountSettingsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves details about your account's <a href="https://docs.aws.amazon.com/lambda/latest/dg/limits.html">limits</a> and usage in an Amazon Web Services Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, GetAccountSettingsCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, GetAccountSettingsCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new GetAccountSettingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAccountSettingsCommandInput} for command's `input` shape.
        * @see {@link GetAccountSettingsCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class GetAccountSettingsCommand extends $Command<GetAccountSettingsCommandInput, GetAccountSettingsCommandOutput, LambdaClientResolvedConfig> {
            readonly input: GetAccountSettingsCommandInput;
            constructor(input: GetAccountSettingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAccountSettingsCommandInput, GetAccountSettingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetAliasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { AliasConfiguration, GetAliasRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface GetAliasCommandInput extends GetAliasRequest {
    }
    export interface GetAliasCommandOutput extends AliasConfiguration, __MetadataBearer {
    }
    /**
        * <p>Returns details about a Lambda function <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, GetAliasCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, GetAliasCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new GetAliasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAliasCommandInput} for command's `input` shape.
        * @see {@link GetAliasCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class GetAliasCommand extends $Command<GetAliasCommandInput, GetAliasCommandOutput, LambdaClientResolvedConfig> {
            readonly input: GetAliasCommandInput;
            constructor(input: GetAliasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAliasCommandInput, GetAliasCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetCodeSigningConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { GetCodeSigningConfigRequest, GetCodeSigningConfigResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface GetCodeSigningConfigCommandInput extends GetCodeSigningConfigRequest {
    }
    export interface GetCodeSigningConfigCommandOutput extends GetCodeSigningConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the specified code signing configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, GetCodeSigningConfigCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, GetCodeSigningConfigCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new GetCodeSigningConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCodeSigningConfigCommandInput} for command's `input` shape.
        * @see {@link GetCodeSigningConfigCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class GetCodeSigningConfigCommand extends $Command<GetCodeSigningConfigCommandInput, GetCodeSigningConfigCommandOutput, LambdaClientResolvedConfig> {
            readonly input: GetCodeSigningConfigCommandInput;
            constructor(input: GetCodeSigningConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCodeSigningConfigCommandInput, GetCodeSigningConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetEventSourceMappingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { EventSourceMappingConfiguration, GetEventSourceMappingRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface GetEventSourceMappingCommandInput extends GetEventSourceMappingRequest {
    }
    export interface GetEventSourceMappingCommandOutput extends EventSourceMappingConfiguration, __MetadataBearer {
    }
    /**
        * <p>Returns details about an event source mapping. You can get the identifier of a mapping from the output of
        *         <a>ListEventSourceMappings</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, GetEventSourceMappingCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, GetEventSourceMappingCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new GetEventSourceMappingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetEventSourceMappingCommandInput} for command's `input` shape.
        * @see {@link GetEventSourceMappingCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class GetEventSourceMappingCommand extends $Command<GetEventSourceMappingCommandInput, GetEventSourceMappingCommandOutput, LambdaClientResolvedConfig> {
            readonly input: GetEventSourceMappingCommandInput;
            constructor(input: GetEventSourceMappingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetEventSourceMappingCommandInput, GetEventSourceMappingCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetFunctionCodeSigningConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { GetFunctionCodeSigningConfigRequest, GetFunctionCodeSigningConfigResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface GetFunctionCodeSigningConfigCommandInput extends GetFunctionCodeSigningConfigRequest {
    }
    export interface GetFunctionCodeSigningConfigCommandOutput extends GetFunctionCodeSigningConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the code signing configuration for the specified function.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, GetFunctionCodeSigningConfigCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, GetFunctionCodeSigningConfigCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new GetFunctionCodeSigningConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetFunctionCodeSigningConfigCommandInput} for command's `input` shape.
        * @see {@link GetFunctionCodeSigningConfigCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class GetFunctionCodeSigningConfigCommand extends $Command<GetFunctionCodeSigningConfigCommandInput, GetFunctionCodeSigningConfigCommandOutput, LambdaClientResolvedConfig> {
            readonly input: GetFunctionCodeSigningConfigCommandInput;
            constructor(input: GetFunctionCodeSigningConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetFunctionCodeSigningConfigCommandInput, GetFunctionCodeSigningConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetFunctionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { GetFunctionRequest, GetFunctionResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface GetFunctionCommandInput extends GetFunctionRequest {
    }
    export interface GetFunctionCommandOutput extends GetFunctionResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the function or function version, with a link to download the deployment package
        *       that's valid for 10 minutes. If you specify a function version, only details that are specific to that version are
        *       returned.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, GetFunctionCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, GetFunctionCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new GetFunctionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetFunctionCommandInput} for command's `input` shape.
        * @see {@link GetFunctionCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class GetFunctionCommand extends $Command<GetFunctionCommandInput, GetFunctionCommandOutput, LambdaClientResolvedConfig> {
            readonly input: GetFunctionCommandInput;
            constructor(input: GetFunctionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetFunctionCommandInput, GetFunctionCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetFunctionConcurrencyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { GetFunctionConcurrencyRequest, GetFunctionConcurrencyResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface GetFunctionConcurrencyCommandInput extends GetFunctionConcurrencyRequest {
    }
    export interface GetFunctionConcurrencyCommandOutput extends GetFunctionConcurrencyResponse, __MetadataBearer {
    }
    /**
        * <p>Returns details about the reserved concurrency configuration for a function. To set a concurrency limit for a
        *       function, use <a>PutFunctionConcurrency</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, GetFunctionConcurrencyCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, GetFunctionConcurrencyCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new GetFunctionConcurrencyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetFunctionConcurrencyCommandInput} for command's `input` shape.
        * @see {@link GetFunctionConcurrencyCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class GetFunctionConcurrencyCommand extends $Command<GetFunctionConcurrencyCommandInput, GetFunctionConcurrencyCommandOutput, LambdaClientResolvedConfig> {
            readonly input: GetFunctionConcurrencyCommandInput;
            constructor(input: GetFunctionConcurrencyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetFunctionConcurrencyCommandInput, GetFunctionConcurrencyCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetFunctionConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { FunctionConfiguration, GetFunctionConfigurationRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface GetFunctionConfigurationCommandInput extends GetFunctionConfigurationRequest {
    }
    export interface GetFunctionConfigurationCommandOutput extends FunctionConfiguration, __MetadataBearer {
    }
    /**
        * <p>Returns the version-specific settings of a Lambda function or version. The output includes only options that
        *       can vary between versions of a function. To modify these settings, use <a>UpdateFunctionConfiguration</a>.</p>
        *          <p>To get all of a function's details, including function-level settings, use <a>GetFunction</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, GetFunctionConfigurationCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, GetFunctionConfigurationCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new GetFunctionConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetFunctionConfigurationCommandInput} for command's `input` shape.
        * @see {@link GetFunctionConfigurationCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class GetFunctionConfigurationCommand extends $Command<GetFunctionConfigurationCommandInput, GetFunctionConfigurationCommandOutput, LambdaClientResolvedConfig> {
            readonly input: GetFunctionConfigurationCommandInput;
            constructor(input: GetFunctionConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetFunctionConfigurationCommandInput, GetFunctionConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetFunctionEventInvokeConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { FunctionEventInvokeConfig, GetFunctionEventInvokeConfigRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface GetFunctionEventInvokeConfigCommandInput extends GetFunctionEventInvokeConfigRequest {
    }
    export interface GetFunctionEventInvokeConfigCommandOutput extends FunctionEventInvokeConfig, __MetadataBearer {
    }
    /**
        * <p>Retrieves the configuration for asynchronous invocation for a function, version, or alias.</p>
        *          <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, GetFunctionEventInvokeConfigCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, GetFunctionEventInvokeConfigCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new GetFunctionEventInvokeConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetFunctionEventInvokeConfigCommandInput} for command's `input` shape.
        * @see {@link GetFunctionEventInvokeConfigCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class GetFunctionEventInvokeConfigCommand extends $Command<GetFunctionEventInvokeConfigCommandInput, GetFunctionEventInvokeConfigCommandOutput, LambdaClientResolvedConfig> {
            readonly input: GetFunctionEventInvokeConfigCommandInput;
            constructor(input: GetFunctionEventInvokeConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetFunctionEventInvokeConfigCommandInput, GetFunctionEventInvokeConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetFunctionUrlConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { GetFunctionUrlConfigRequest, GetFunctionUrlConfigResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface GetFunctionUrlConfigCommandInput extends GetFunctionUrlConfigRequest {
    }
    export interface GetFunctionUrlConfigCommandOutput extends GetFunctionUrlConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Returns details about a Lambda function URL.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, GetFunctionUrlConfigCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, GetFunctionUrlConfigCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new GetFunctionUrlConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetFunctionUrlConfigCommandInput} for command's `input` shape.
        * @see {@link GetFunctionUrlConfigCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class GetFunctionUrlConfigCommand extends $Command<GetFunctionUrlConfigCommandInput, GetFunctionUrlConfigCommandOutput, LambdaClientResolvedConfig> {
            readonly input: GetFunctionUrlConfigCommandInput;
            constructor(input: GetFunctionUrlConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetFunctionUrlConfigCommandInput, GetFunctionUrlConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetLayerVersionByArnCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { GetLayerVersionByArnRequest, GetLayerVersionResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface GetLayerVersionByArnCommandInput extends GetLayerVersionByArnRequest {
    }
    export interface GetLayerVersionByArnCommandOutput extends GetLayerVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda
        *         layer</a>, with a link to download the layer archive
        *         that's valid for 10 minutes.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, GetLayerVersionByArnCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, GetLayerVersionByArnCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new GetLayerVersionByArnCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLayerVersionByArnCommandInput} for command's `input` shape.
        * @see {@link GetLayerVersionByArnCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class GetLayerVersionByArnCommand extends $Command<GetLayerVersionByArnCommandInput, GetLayerVersionByArnCommandOutput, LambdaClientResolvedConfig> {
            readonly input: GetLayerVersionByArnCommandInput;
            constructor(input: GetLayerVersionByArnCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLayerVersionByArnCommandInput, GetLayerVersionByArnCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetLayerVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { GetLayerVersionRequest, GetLayerVersionResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface GetLayerVersionCommandInput extends GetLayerVersionRequest {
    }
    export interface GetLayerVersionCommandOutput extends GetLayerVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda
        *         layer</a>, with a link to download the layer archive
        *         that's valid for 10 minutes.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, GetLayerVersionCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, GetLayerVersionCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new GetLayerVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLayerVersionCommandInput} for command's `input` shape.
        * @see {@link GetLayerVersionCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class GetLayerVersionCommand extends $Command<GetLayerVersionCommandInput, GetLayerVersionCommandOutput, LambdaClientResolvedConfig> {
            readonly input: GetLayerVersionCommandInput;
            constructor(input: GetLayerVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLayerVersionCommandInput, GetLayerVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetLayerVersionPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { GetLayerVersionPolicyRequest, GetLayerVersionPolicyResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface GetLayerVersionPolicyCommandInput extends GetLayerVersionPolicyRequest {
    }
    export interface GetLayerVersionPolicyCommandOutput extends GetLayerVersionPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the permission policy for a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda
        *         layer</a>. For more information, see <a>AddLayerVersionPermission</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, GetLayerVersionPolicyCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, GetLayerVersionPolicyCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new GetLayerVersionPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLayerVersionPolicyCommandInput} for command's `input` shape.
        * @see {@link GetLayerVersionPolicyCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class GetLayerVersionPolicyCommand extends $Command<GetLayerVersionPolicyCommandInput, GetLayerVersionPolicyCommandOutput, LambdaClientResolvedConfig> {
            readonly input: GetLayerVersionPolicyCommandInput;
            constructor(input: GetLayerVersionPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLayerVersionPolicyCommandInput, GetLayerVersionPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { GetPolicyRequest, GetPolicyResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface GetPolicyCommandInput extends GetPolicyRequest {
    }
    export interface GetPolicyCommandOutput extends GetPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the <a href="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html">resource-based IAM policy</a> for a function, version, or alias.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, GetPolicyCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, GetPolicyCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new GetPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPolicyCommandInput} for command's `input` shape.
        * @see {@link GetPolicyCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class GetPolicyCommand extends $Command<GetPolicyCommandInput, GetPolicyCommandOutput, LambdaClientResolvedConfig> {
            readonly input: GetPolicyCommandInput;
            constructor(input: GetPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPolicyCommandInput, GetPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetProvisionedConcurrencyConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { GetProvisionedConcurrencyConfigRequest, GetProvisionedConcurrencyConfigResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface GetProvisionedConcurrencyConfigCommandInput extends GetProvisionedConcurrencyConfigRequest {
    }
    export interface GetProvisionedConcurrencyConfigCommandOutput extends GetProvisionedConcurrencyConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the provisioned concurrency configuration for a function's alias or version.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, GetProvisionedConcurrencyConfigCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, GetProvisionedConcurrencyConfigCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new GetProvisionedConcurrencyConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetProvisionedConcurrencyConfigCommandInput} for command's `input` shape.
        * @see {@link GetProvisionedConcurrencyConfigCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class GetProvisionedConcurrencyConfigCommand extends $Command<GetProvisionedConcurrencyConfigCommandInput, GetProvisionedConcurrencyConfigCommandOutput, LambdaClientResolvedConfig> {
            readonly input: GetProvisionedConcurrencyConfigCommandInput;
            constructor(input: GetProvisionedConcurrencyConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetProvisionedConcurrencyConfigCommandInput, GetProvisionedConcurrencyConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/InvokeAsyncCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { InvokeAsyncRequest, InvokeAsyncResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    type InvokeAsyncCommandInputType = Omit<InvokeAsyncRequest, "InvokeArgs"> & {
            /**
                * For *`InvokeAsyncRequest["InvokeArgs"]`*, see {@link InvokeAsyncRequest.InvokeArgs}.
                */
            InvokeArgs: InvokeAsyncRequest["InvokeArgs"] | string | Uint8Array | Buffer;
    };
    /**
        * This interface extends from `InvokeAsyncRequest` interface. There are more parameters than `InvokeArgs` defined in {@link InvokeAsyncRequest}
        */
    export interface InvokeAsyncCommandInput extends InvokeAsyncCommandInputType {
    }
    export interface InvokeAsyncCommandOutput extends InvokeAsyncResponse, __MetadataBearer {
    }
    /**
        * @deprecated
        *
        * <important>
        *             <p>For asynchronous function invocation, use <a>Invoke</a>.</p>
        *          </important>
        *          <p>Invokes a function asynchronously.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, InvokeAsyncCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, InvokeAsyncCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new InvokeAsyncCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link InvokeAsyncCommandInput} for command's `input` shape.
        * @see {@link InvokeAsyncCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class InvokeAsyncCommand extends $Command<InvokeAsyncCommandInput, InvokeAsyncCommandOutput, LambdaClientResolvedConfig> {
            readonly input: InvokeAsyncCommandInput;
            constructor(input: InvokeAsyncCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<InvokeAsyncCommandInput, InvokeAsyncCommandOutput>;
    }
    export {};
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/InvokeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { InvocationRequest, InvocationResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface InvokeCommandInput extends InvocationRequest {
    }
    export interface InvokeCommandOutput extends InvocationResponse, __MetadataBearer {
    }
    /**
        * <p>Invokes a Lambda function. You can invoke a function synchronously (and wait for the response), or
        *       asynchronously. To invoke a function asynchronously, set <code>InvocationType</code> to <code>Event</code>.</p>
        *
        *          <p>For <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-sync.html">synchronous invocation</a>,
        *       details about the function response, including errors, are included in the response body and headers. For either
        *       invocation type, you can find more information in the <a href="https://docs.aws.amazon.com/lambda/latest/dg/monitoring-functions.html">execution log</a> and <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html">trace</a>.</p>
        *
        *          <p>When an error occurs, your function may be invoked multiple times. Retry behavior varies by error type,
        *       client, event source, and invocation type. For example, if you invoke a function asynchronously and it returns an
        *       error, Lambda executes the function up to two more times. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/retries-on-errors.html">Retry Behavior</a>.</p>
        *
        *          <p>For <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html">asynchronous invocation</a>,
        *       Lambda adds events to a queue before sending them to your function. If your function does not have enough capacity
        *       to keep up with the queue, events may be lost. Occasionally, your function may receive the same event multiple
        *       times, even if no error occurs. To retain events that were not processed, configure your function with a <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq">dead-letter queue</a>.</p>
        *
        *          <p>The status code in the API response doesn't reflect function errors. Error codes are reserved for errors that
        *       prevent your function from executing, such as permissions errors, <a href="https://docs.aws.amazon.com/lambda/latest/dg/limits.html">limit errors</a>, or issues with your function's code and configuration.
        *       For example, Lambda returns <code>TooManyRequestsException</code> if executing the function would cause you to
        *       exceed a concurrency limit at either the account level (<code>ConcurrentInvocationLimitExceeded</code>) or
        *       function level (<code>ReservedFunctionConcurrentInvocationLimitExceeded</code>).</p>
        *
        *          <p>For functions with a long timeout, your client might be disconnected during synchronous invocation while it
        *       waits for a response. Configure your HTTP client, SDK, firewall, proxy, or operating system to allow for long
        *       connections with timeout or keep-alive settings.</p>
        *
        *          <p>This operation requires permission for the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_awslambda.html">lambda:InvokeFunction</a> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, InvokeCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, InvokeCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new InvokeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link InvokeCommandInput} for command's `input` shape.
        * @see {@link InvokeCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class InvokeCommand extends $Command<InvokeCommandInput, InvokeCommandOutput, LambdaClientResolvedConfig> {
            readonly input: InvokeCommandInput;
            constructor(input: InvokeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<InvokeCommandInput, InvokeCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListAliasesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { ListAliasesRequest, ListAliasesResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface ListAliasesCommandInput extends ListAliasesRequest {
    }
    export interface ListAliasesCommandOutput extends ListAliasesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">aliases</a>
        *       for a Lambda function.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, ListAliasesCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, ListAliasesCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new ListAliasesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAliasesCommandInput} for command's `input` shape.
        * @see {@link ListAliasesCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class ListAliasesCommand extends $Command<ListAliasesCommandInput, ListAliasesCommandOutput, LambdaClientResolvedConfig> {
            readonly input: ListAliasesCommandInput;
            constructor(input: ListAliasesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAliasesCommandInput, ListAliasesCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListCodeSigningConfigsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { ListCodeSigningConfigsRequest, ListCodeSigningConfigsResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface ListCodeSigningConfigsCommandInput extends ListCodeSigningConfigsRequest {
    }
    export interface ListCodeSigningConfigsCommandOutput extends ListCodeSigningConfigsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuring-codesigning.html">code
        *         signing configurations</a>. A request returns up to 10,000 configurations per
        *       call. You can use the <code>MaxItems</code> parameter to return fewer configurations per call. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, ListCodeSigningConfigsCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, ListCodeSigningConfigsCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new ListCodeSigningConfigsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListCodeSigningConfigsCommandInput} for command's `input` shape.
        * @see {@link ListCodeSigningConfigsCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class ListCodeSigningConfigsCommand extends $Command<ListCodeSigningConfigsCommandInput, ListCodeSigningConfigsCommandOutput, LambdaClientResolvedConfig> {
            readonly input: ListCodeSigningConfigsCommandInput;
            constructor(input: ListCodeSigningConfigsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListCodeSigningConfigsCommandInput, ListCodeSigningConfigsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListEventSourceMappingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { ListEventSourceMappingsRequest, ListEventSourceMappingsResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface ListEventSourceMappingsCommandInput extends ListEventSourceMappingsRequest {
    }
    export interface ListEventSourceMappingsCommandOutput extends ListEventSourceMappingsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists event source mappings. Specify an <code>EventSourceArn</code> to only show event source mappings for a
        *       single event source.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, ListEventSourceMappingsCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, ListEventSourceMappingsCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new ListEventSourceMappingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEventSourceMappingsCommandInput} for command's `input` shape.
        * @see {@link ListEventSourceMappingsCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class ListEventSourceMappingsCommand extends $Command<ListEventSourceMappingsCommandInput, ListEventSourceMappingsCommandOutput, LambdaClientResolvedConfig> {
            readonly input: ListEventSourceMappingsCommandInput;
            constructor(input: ListEventSourceMappingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEventSourceMappingsCommandInput, ListEventSourceMappingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListFunctionEventInvokeConfigsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { ListFunctionEventInvokeConfigsRequest, ListFunctionEventInvokeConfigsResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface ListFunctionEventInvokeConfigsCommandInput extends ListFunctionEventInvokeConfigsRequest {
    }
    export interface ListFunctionEventInvokeConfigsCommandOutput extends ListFunctionEventInvokeConfigsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of configurations for asynchronous invocation for a function.</p>
        *          <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, ListFunctionEventInvokeConfigsCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, ListFunctionEventInvokeConfigsCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new ListFunctionEventInvokeConfigsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFunctionEventInvokeConfigsCommandInput} for command's `input` shape.
        * @see {@link ListFunctionEventInvokeConfigsCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class ListFunctionEventInvokeConfigsCommand extends $Command<ListFunctionEventInvokeConfigsCommandInput, ListFunctionEventInvokeConfigsCommandOutput, LambdaClientResolvedConfig> {
            readonly input: ListFunctionEventInvokeConfigsCommandInput;
            constructor(input: ListFunctionEventInvokeConfigsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFunctionEventInvokeConfigsCommandInput, ListFunctionEventInvokeConfigsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListFunctionsByCodeSigningConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { ListFunctionsByCodeSigningConfigRequest, ListFunctionsByCodeSigningConfigResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface ListFunctionsByCodeSigningConfigCommandInput extends ListFunctionsByCodeSigningConfigRequest {
    }
    export interface ListFunctionsByCodeSigningConfigCommandOutput extends ListFunctionsByCodeSigningConfigResponse, __MetadataBearer {
    }
    /**
        * <p>List the functions that use the specified code signing configuration. You can use this method prior to deleting a
        *       code signing configuration, to verify that no functions are using it.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, ListFunctionsByCodeSigningConfigCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, ListFunctionsByCodeSigningConfigCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new ListFunctionsByCodeSigningConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFunctionsByCodeSigningConfigCommandInput} for command's `input` shape.
        * @see {@link ListFunctionsByCodeSigningConfigCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class ListFunctionsByCodeSigningConfigCommand extends $Command<ListFunctionsByCodeSigningConfigCommandInput, ListFunctionsByCodeSigningConfigCommandOutput, LambdaClientResolvedConfig> {
            readonly input: ListFunctionsByCodeSigningConfigCommandInput;
            constructor(input: ListFunctionsByCodeSigningConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFunctionsByCodeSigningConfigCommandInput, ListFunctionsByCodeSigningConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListFunctionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { ListFunctionsRequest, ListFunctionsResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface ListFunctionsCommandInput extends ListFunctionsRequest {
    }
    export interface ListFunctionsCommandOutput extends ListFunctionsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of Lambda functions, with the version-specific configuration of each. Lambda returns up to 50
        *       functions per call.</p>
        *          <p>Set <code>FunctionVersion</code> to <code>ALL</code> to include all published versions of each function in
        *       addition to the unpublished version. </p>
        *          <note>
        *             <p>The <code>ListFunctions</code> action returns a subset of the <a>FunctionConfiguration</a> fields.
        *       To get the additional fields (State, StateReasonCode, StateReason, LastUpdateStatus, LastUpdateStatusReason, LastUpdateStatusReasonCode)
        *       for a function or version, use <a>GetFunction</a>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, ListFunctionsCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, ListFunctionsCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new ListFunctionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFunctionsCommandInput} for command's `input` shape.
        * @see {@link ListFunctionsCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class ListFunctionsCommand extends $Command<ListFunctionsCommandInput, ListFunctionsCommandOutput, LambdaClientResolvedConfig> {
            readonly input: ListFunctionsCommandInput;
            constructor(input: ListFunctionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFunctionsCommandInput, ListFunctionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListFunctionUrlConfigsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { ListFunctionUrlConfigsRequest, ListFunctionUrlConfigsResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface ListFunctionUrlConfigsCommandInput extends ListFunctionUrlConfigsRequest {
    }
    export interface ListFunctionUrlConfigsCommandOutput extends ListFunctionUrlConfigsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of Lambda function URLs for the specified function.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, ListFunctionUrlConfigsCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, ListFunctionUrlConfigsCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new ListFunctionUrlConfigsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFunctionUrlConfigsCommandInput} for command's `input` shape.
        * @see {@link ListFunctionUrlConfigsCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class ListFunctionUrlConfigsCommand extends $Command<ListFunctionUrlConfigsCommandInput, ListFunctionUrlConfigsCommandOutput, LambdaClientResolvedConfig> {
            readonly input: ListFunctionUrlConfigsCommandInput;
            constructor(input: ListFunctionUrlConfigsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFunctionUrlConfigsCommandInput, ListFunctionUrlConfigsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListLayersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { ListLayersRequest, ListLayersResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface ListLayersCommandInput extends ListLayersRequest {
    }
    export interface ListLayersCommandOutput extends ListLayersResponse, __MetadataBearer {
    }
    /**
        * <p>Lists <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-layers.html">Lambda
        *         layers</a> and shows information about the latest version of each. Specify a
        *         <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime
        *         identifier</a> to list only layers that indicate that they're compatible with that
        *       runtime. Specify a compatible architecture to include only layers that are compatible with
        *       that  <a href="https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html">instruction set architecture</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, ListLayersCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, ListLayersCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new ListLayersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListLayersCommandInput} for command's `input` shape.
        * @see {@link ListLayersCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class ListLayersCommand extends $Command<ListLayersCommandInput, ListLayersCommandOutput, LambdaClientResolvedConfig> {
            readonly input: ListLayersCommandInput;
            constructor(input: ListLayersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListLayersCommandInput, ListLayersCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListLayerVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { ListLayerVersionsRequest, ListLayerVersionsResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface ListLayerVersionsCommandInput extends ListLayerVersionsRequest {
    }
    export interface ListLayerVersionsCommandOutput extends ListLayerVersionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the versions of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda
        *         layer</a>. Versions that have been deleted aren't listed. Specify a <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime identifier</a> to list only
        *       versions that indicate that they're compatible with that runtime. Specify a compatible architecture to include only
        *       layer versions that are compatible with that architecture.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, ListLayerVersionsCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, ListLayerVersionsCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new ListLayerVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListLayerVersionsCommandInput} for command's `input` shape.
        * @see {@link ListLayerVersionsCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class ListLayerVersionsCommand extends $Command<ListLayerVersionsCommandInput, ListLayerVersionsCommandOutput, LambdaClientResolvedConfig> {
            readonly input: ListLayerVersionsCommandInput;
            constructor(input: ListLayerVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListLayerVersionsCommandInput, ListLayerVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListProvisionedConcurrencyConfigsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { ListProvisionedConcurrencyConfigsRequest, ListProvisionedConcurrencyConfigsResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface ListProvisionedConcurrencyConfigsCommandInput extends ListProvisionedConcurrencyConfigsRequest {
    }
    export interface ListProvisionedConcurrencyConfigsCommandOutput extends ListProvisionedConcurrencyConfigsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of provisioned concurrency configurations for a function.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, ListProvisionedConcurrencyConfigsCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, ListProvisionedConcurrencyConfigsCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new ListProvisionedConcurrencyConfigsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListProvisionedConcurrencyConfigsCommandInput} for command's `input` shape.
        * @see {@link ListProvisionedConcurrencyConfigsCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class ListProvisionedConcurrencyConfigsCommand extends $Command<ListProvisionedConcurrencyConfigsCommandInput, ListProvisionedConcurrencyConfigsCommandOutput, LambdaClientResolvedConfig> {
            readonly input: ListProvisionedConcurrencyConfigsCommandInput;
            constructor(input: ListProvisionedConcurrencyConfigsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListProvisionedConcurrencyConfigsCommandInput, ListProvisionedConcurrencyConfigsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { ListTagsRequest, ListTagsResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface ListTagsCommandInput extends ListTagsRequest {
    }
    export interface ListTagsCommandOutput extends ListTagsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a>. You can
        *       also view tags with <a>GetFunction</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, ListTagsCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, ListTagsCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new ListTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsCommandInput} for command's `input` shape.
        * @see {@link ListTagsCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class ListTagsCommand extends $Command<ListTagsCommandInput, ListTagsCommandOutput, LambdaClientResolvedConfig> {
            readonly input: ListTagsCommandInput;
            constructor(input: ListTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsCommandInput, ListTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListVersionsByFunctionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { ListVersionsByFunctionRequest, ListVersionsByFunctionResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface ListVersionsByFunctionCommandInput extends ListVersionsByFunctionRequest {
    }
    export interface ListVersionsByFunctionCommandOutput extends ListVersionsByFunctionResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">versions</a>,
        *       with the version-specific configuration of each. Lambda returns up to 50 versions per call.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, ListVersionsByFunctionCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, ListVersionsByFunctionCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new ListVersionsByFunctionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListVersionsByFunctionCommandInput} for command's `input` shape.
        * @see {@link ListVersionsByFunctionCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class ListVersionsByFunctionCommand extends $Command<ListVersionsByFunctionCommandInput, ListVersionsByFunctionCommandOutput, LambdaClientResolvedConfig> {
            readonly input: ListVersionsByFunctionCommandInput;
            constructor(input: ListVersionsByFunctionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListVersionsByFunctionCommandInput, ListVersionsByFunctionCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/PublishLayerVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { PublishLayerVersionRequest, PublishLayerVersionResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface PublishLayerVersionCommandInput extends PublishLayerVersionRequest {
    }
    export interface PublishLayerVersionCommandOutput extends PublishLayerVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda
        *         layer</a> from a ZIP archive. Each time you call <code>PublishLayerVersion</code> with the same
        *       layer name, a new version is created.</p>
        *          <p>Add layers to your function with <a>CreateFunction</a> or <a>UpdateFunctionConfiguration</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, PublishLayerVersionCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, PublishLayerVersionCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new PublishLayerVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PublishLayerVersionCommandInput} for command's `input` shape.
        * @see {@link PublishLayerVersionCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class PublishLayerVersionCommand extends $Command<PublishLayerVersionCommandInput, PublishLayerVersionCommandOutput, LambdaClientResolvedConfig> {
            readonly input: PublishLayerVersionCommandInput;
            constructor(input: PublishLayerVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PublishLayerVersionCommandInput, PublishLayerVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/PublishVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { FunctionConfiguration, PublishVersionRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface PublishVersionCommandInput extends PublishVersionRequest {
    }
    export interface PublishVersionCommandOutput extends FunctionConfiguration, __MetadataBearer {
    }
    /**
        * <p>Creates a <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">version</a> from the
        *       current code and configuration of a function. Use versions to create a snapshot of your function code and
        *       configuration that doesn't change.</p>
        *
        *          <p>Lambda doesn't publish a version if the function's configuration and code haven't changed since the last
        *       version. Use <a>UpdateFunctionCode</a> or <a>UpdateFunctionConfiguration</a> to update the
        *       function before publishing a version.</p>
        *
        *          <p>Clients can invoke versions directly or with an alias. To create an alias, use <a>CreateAlias</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, PublishVersionCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, PublishVersionCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new PublishVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PublishVersionCommandInput} for command's `input` shape.
        * @see {@link PublishVersionCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class PublishVersionCommand extends $Command<PublishVersionCommandInput, PublishVersionCommandOutput, LambdaClientResolvedConfig> {
            readonly input: PublishVersionCommandInput;
            constructor(input: PublishVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PublishVersionCommandInput, PublishVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/PutFunctionCodeSigningConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { PutFunctionCodeSigningConfigRequest, PutFunctionCodeSigningConfigResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface PutFunctionCodeSigningConfigCommandInput extends PutFunctionCodeSigningConfigRequest {
    }
    export interface PutFunctionCodeSigningConfigCommandOutput extends PutFunctionCodeSigningConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Update the code signing configuration for the function. Changes to the code signing configuration take effect the
        *       next time a user tries to deploy a code package to the function. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, PutFunctionCodeSigningConfigCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, PutFunctionCodeSigningConfigCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new PutFunctionCodeSigningConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutFunctionCodeSigningConfigCommandInput} for command's `input` shape.
        * @see {@link PutFunctionCodeSigningConfigCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class PutFunctionCodeSigningConfigCommand extends $Command<PutFunctionCodeSigningConfigCommandInput, PutFunctionCodeSigningConfigCommandOutput, LambdaClientResolvedConfig> {
            readonly input: PutFunctionCodeSigningConfigCommandInput;
            constructor(input: PutFunctionCodeSigningConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutFunctionCodeSigningConfigCommandInput, PutFunctionCodeSigningConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/PutFunctionConcurrencyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { Concurrency, PutFunctionConcurrencyRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface PutFunctionConcurrencyCommandInput extends PutFunctionConcurrencyRequest {
    }
    export interface PutFunctionConcurrencyCommandOutput extends Concurrency, __MetadataBearer {
    }
    /**
        * <p>Sets the maximum number of simultaneous executions for a function, and reserves capacity for that concurrency
        *       level.</p>
        *          <p>Concurrency settings apply to the function as a whole, including all published versions and the unpublished
        *       version. Reserving concurrency both ensures that your function has capacity to process the specified number of
        *       events simultaneously, and prevents it from scaling beyond that level. Use <a>GetFunction</a> to see
        *       the current setting for a function.</p>
        *          <p>Use <a>GetAccountSettings</a> to see your Regional concurrency limit. You can reserve concurrency
        *       for as many functions as you like, as long as you leave at least 100 simultaneous executions unreserved for
        *       functions that aren't configured with a per-function limit. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html">Managing Concurrency</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, PutFunctionConcurrencyCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, PutFunctionConcurrencyCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new PutFunctionConcurrencyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutFunctionConcurrencyCommandInput} for command's `input` shape.
        * @see {@link PutFunctionConcurrencyCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class PutFunctionConcurrencyCommand extends $Command<PutFunctionConcurrencyCommandInput, PutFunctionConcurrencyCommandOutput, LambdaClientResolvedConfig> {
            readonly input: PutFunctionConcurrencyCommandInput;
            constructor(input: PutFunctionConcurrencyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutFunctionConcurrencyCommandInput, PutFunctionConcurrencyCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/PutFunctionEventInvokeConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { FunctionEventInvokeConfig, PutFunctionEventInvokeConfigRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface PutFunctionEventInvokeConfigCommandInput extends PutFunctionEventInvokeConfigRequest {
    }
    export interface PutFunctionEventInvokeConfigCommandOutput extends FunctionEventInvokeConfig, __MetadataBearer {
    }
    /**
        * <p>Configures options for <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html">asynchronous
        *         invocation</a> on a function, version, or alias. If a configuration already exists for a function, version,
        *       or alias, this operation overwrites it. If you exclude any settings, they are removed. To set one option without
        *       affecting existing settings for other options, use <a>UpdateFunctionEventInvokeConfig</a>.</p>
        *          <p>By default, Lambda retries an asynchronous invocation twice if the function returns an error. It retains
        *       events in a queue for up to six hours. When an event fails all processing attempts or stays in the asynchronous
        *       invocation queue for too long, Lambda discards it. To retain discarded events, configure a dead-letter queue with
        *         <a>UpdateFunctionConfiguration</a>.</p>
        *          <p>To send an invocation record to a queue, topic, function, or event bus, specify a <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations">destination</a>. You can configure separate destinations for successful invocations (on-success) and events
        *       that fail all processing attempts (on-failure). You can configure destinations in addition to or instead of a
        *       dead-letter queue.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, PutFunctionEventInvokeConfigCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, PutFunctionEventInvokeConfigCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new PutFunctionEventInvokeConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutFunctionEventInvokeConfigCommandInput} for command's `input` shape.
        * @see {@link PutFunctionEventInvokeConfigCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class PutFunctionEventInvokeConfigCommand extends $Command<PutFunctionEventInvokeConfigCommandInput, PutFunctionEventInvokeConfigCommandOutput, LambdaClientResolvedConfig> {
            readonly input: PutFunctionEventInvokeConfigCommandInput;
            constructor(input: PutFunctionEventInvokeConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutFunctionEventInvokeConfigCommandInput, PutFunctionEventInvokeConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/PutProvisionedConcurrencyConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { PutProvisionedConcurrencyConfigRequest, PutProvisionedConcurrencyConfigResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface PutProvisionedConcurrencyConfigCommandInput extends PutProvisionedConcurrencyConfigRequest {
    }
    export interface PutProvisionedConcurrencyConfigCommandOutput extends PutProvisionedConcurrencyConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Adds a provisioned concurrency configuration to a function's alias or version.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, PutProvisionedConcurrencyConfigCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, PutProvisionedConcurrencyConfigCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new PutProvisionedConcurrencyConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutProvisionedConcurrencyConfigCommandInput} for command's `input` shape.
        * @see {@link PutProvisionedConcurrencyConfigCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class PutProvisionedConcurrencyConfigCommand extends $Command<PutProvisionedConcurrencyConfigCommandInput, PutProvisionedConcurrencyConfigCommandOutput, LambdaClientResolvedConfig> {
            readonly input: PutProvisionedConcurrencyConfigCommandInput;
            constructor(input: PutProvisionedConcurrencyConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutProvisionedConcurrencyConfigCommandInput, PutProvisionedConcurrencyConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/RemoveLayerVersionPermissionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { RemoveLayerVersionPermissionRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface RemoveLayerVersionPermissionCommandInput extends RemoveLayerVersionPermissionRequest {
    }
    export interface RemoveLayerVersionPermissionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes a statement from the permissions policy for a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda
        *         layer</a>. For more information, see
        *         <a>AddLayerVersionPermission</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, RemoveLayerVersionPermissionCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, RemoveLayerVersionPermissionCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new RemoveLayerVersionPermissionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveLayerVersionPermissionCommandInput} for command's `input` shape.
        * @see {@link RemoveLayerVersionPermissionCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class RemoveLayerVersionPermissionCommand extends $Command<RemoveLayerVersionPermissionCommandInput, RemoveLayerVersionPermissionCommandOutput, LambdaClientResolvedConfig> {
            readonly input: RemoveLayerVersionPermissionCommandInput;
            constructor(input: RemoveLayerVersionPermissionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveLayerVersionPermissionCommandInput, RemoveLayerVersionPermissionCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/RemovePermissionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { RemovePermissionRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface RemovePermissionCommandInput extends RemovePermissionRequest {
    }
    export interface RemovePermissionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Revokes function-use permission from an Amazon Web Services service or another account. You can get the ID of the statement
        *       from the output of <a>GetPolicy</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, RemovePermissionCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, RemovePermissionCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new RemovePermissionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemovePermissionCommandInput} for command's `input` shape.
        * @see {@link RemovePermissionCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class RemovePermissionCommand extends $Command<RemovePermissionCommandInput, RemovePermissionCommandOutput, LambdaClientResolvedConfig> {
            readonly input: RemovePermissionCommandInput;
            constructor(input: RemovePermissionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemovePermissionCommandInput, RemovePermissionCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { TagResourceRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds <a href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a> to a function.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, TagResourceCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, TagResourceCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, LambdaClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { UntagResourceRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes <a href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a> from a function.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, UntagResourceCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, UntagResourceCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, LambdaClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UpdateAliasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { AliasConfiguration, UpdateAliasRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface UpdateAliasCommandInput extends UpdateAliasRequest {
    }
    export interface UpdateAliasCommandOutput extends AliasConfiguration, __MetadataBearer {
    }
    /**
        * <p>Updates the configuration of a Lambda function <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, UpdateAliasCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, UpdateAliasCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new UpdateAliasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAliasCommandInput} for command's `input` shape.
        * @see {@link UpdateAliasCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class UpdateAliasCommand extends $Command<UpdateAliasCommandInput, UpdateAliasCommandOutput, LambdaClientResolvedConfig> {
            readonly input: UpdateAliasCommandInput;
            constructor(input: UpdateAliasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAliasCommandInput, UpdateAliasCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UpdateCodeSigningConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { UpdateCodeSigningConfigRequest, UpdateCodeSigningConfigResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface UpdateCodeSigningConfigCommandInput extends UpdateCodeSigningConfigRequest {
    }
    export interface UpdateCodeSigningConfigCommandOutput extends UpdateCodeSigningConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Update the code signing configuration. Changes to the code signing configuration take effect the next time a
        *       user tries to deploy a code package to the function. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, UpdateCodeSigningConfigCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, UpdateCodeSigningConfigCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new UpdateCodeSigningConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateCodeSigningConfigCommandInput} for command's `input` shape.
        * @see {@link UpdateCodeSigningConfigCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class UpdateCodeSigningConfigCommand extends $Command<UpdateCodeSigningConfigCommandInput, UpdateCodeSigningConfigCommandOutput, LambdaClientResolvedConfig> {
            readonly input: UpdateCodeSigningConfigCommandInput;
            constructor(input: UpdateCodeSigningConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateCodeSigningConfigCommandInput, UpdateCodeSigningConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UpdateEventSourceMappingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { EventSourceMappingConfiguration, UpdateEventSourceMappingRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface UpdateEventSourceMappingCommandInput extends UpdateEventSourceMappingRequest {
    }
    export interface UpdateEventSourceMappingCommandOutput extends EventSourceMappingConfiguration, __MetadataBearer {
    }
    /**
        * <p>Updates an event source mapping. You can change the function that Lambda invokes, or pause
        *       invocation and resume later from the same location.</p>
        *          <p>For details about how to configure different event sources, see the following topics. </p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-dynamodb-eventsourcemapping">
        *             Amazon DynamoDB Streams</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-eventsourcemapping">
        *             Amazon Kinesis</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-eventsource">
        *             Amazon SQS</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-mq.html#services-mq-eventsourcemapping">
        *             Amazon MQ and RabbitMQ</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html">
        *             Amazon MSK</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/kafka-smaa.html">
        *             Apache Kafka</a>
        *                </p>
        *             </li>
        *          </ul>
        *
        *          <p>The following error handling options are only available for stream sources (DynamoDB and Kinesis):</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>BisectBatchOnFunctionError</code> - If the function returns an error, split the batch in two and retry.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DestinationConfig</code> - Send discarded records to an Amazon SQS queue or Amazon SNS topic.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>MaximumRecordAgeInSeconds</code> - Discard records older than the specified age. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>MaximumRetryAttempts</code> - Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ParallelizationFactor</code> - Process multiple batches from each shard concurrently.</p>
        *             </li>
        *          </ul>
        *          <p>For information about which configuration parameters apply to each event source, see the following topics.</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-ddb-params">
        *           Amazon DynamoDB Streams</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-params">
        *           Amazon Kinesis</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#services-sqs-params">
        *           Amazon SQS</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-mq.html#services-mq-params">
        *           Amazon MQ and RabbitMQ</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html#services-msk-parms">
        *           Amazon MSK</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-kafka.html#services-kafka-parms">
        *           Apache Kafka</a>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, UpdateEventSourceMappingCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, UpdateEventSourceMappingCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new UpdateEventSourceMappingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateEventSourceMappingCommandInput} for command's `input` shape.
        * @see {@link UpdateEventSourceMappingCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class UpdateEventSourceMappingCommand extends $Command<UpdateEventSourceMappingCommandInput, UpdateEventSourceMappingCommandOutput, LambdaClientResolvedConfig> {
            readonly input: UpdateEventSourceMappingCommandInput;
            constructor(input: UpdateEventSourceMappingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateEventSourceMappingCommandInput, UpdateEventSourceMappingCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UpdateFunctionCodeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { FunctionConfiguration, UpdateFunctionCodeRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface UpdateFunctionCodeCommandInput extends UpdateFunctionCodeRequest {
    }
    export interface UpdateFunctionCodeCommandOutput extends FunctionConfiguration, __MetadataBearer {
    }
    /**
        * <p>Updates a Lambda function's code. If code signing is enabled for the function, the code package must be signed
        *       by a trusted publisher. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-trustedcode.html">Configuring code signing</a>.</p>
        *
        *          <p>If the function's package type is <code>Image</code>, you must specify the code package in <code>ImageUri</code> as
        *       the URI of a
        *       <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html">container image</a>
        *       in the Amazon ECR registry.
        *        </p>
        *
        *          <p>If the function's package type is <code>Zip</code>, you must specify the deployment
        *       package as a <a href="https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html#gettingstarted-package-zip">.zip file
        *         archive</a>. Enter the Amazon S3 bucket and key of the code .zip file location.
        *       You can also provide the function code inline using the <code>ZipFile</code> field. </p>
        *          <p>The code in the deployment package must be compatible with the target instruction set
        *       architecture of the function (<code>x86-64</code> or <code>arm64</code>). </p>
        *
        *          <p>The function's code is locked when you publish a version. You can't modify the code of a published version,
        *       only the unpublished version.</p>
        *          <note>
        *             <p>For a function defined as a container image, Lambda resolves the image tag to an image digest. In Amazon ECR, if
        *       you update the image tag to a new image, Lambda does not automatically update the function.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, UpdateFunctionCodeCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, UpdateFunctionCodeCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new UpdateFunctionCodeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateFunctionCodeCommandInput} for command's `input` shape.
        * @see {@link UpdateFunctionCodeCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class UpdateFunctionCodeCommand extends $Command<UpdateFunctionCodeCommandInput, UpdateFunctionCodeCommandOutput, LambdaClientResolvedConfig> {
            readonly input: UpdateFunctionCodeCommandInput;
            constructor(input: UpdateFunctionCodeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateFunctionCodeCommandInput, UpdateFunctionCodeCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UpdateFunctionConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { FunctionConfiguration, UpdateFunctionConfigurationRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface UpdateFunctionConfigurationCommandInput extends UpdateFunctionConfigurationRequest {
    }
    export interface UpdateFunctionConfigurationCommandOutput extends FunctionConfiguration, __MetadataBearer {
    }
    /**
        * <p>Modify the version-specific settings of a Lambda function.</p>
        *
        *          <p>When you update a function, Lambda provisions an instance of the function and its supporting resources. If
        *       your function connects to a VPC, this process can take a minute. During this time, you can't modify the function,
        *       but you can still invoke it. The <code>LastUpdateStatus</code>, <code>LastUpdateStatusReason</code>, and
        *         <code>LastUpdateStatusReasonCode</code> fields in the response from <a>GetFunctionConfiguration</a>
        *       indicate when the update is complete and the function is processing events with the new configuration. For more
        *       information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/functions-states.html">Function
        *       States</a>.</p>
        *
        *          <p>These settings can vary between versions of a function and are locked when you publish a version. You can't
        *       modify the configuration of a published version, only the unpublished version.</p>
        *
        *          <p>To configure function concurrency, use <a>PutFunctionConcurrency</a>. To grant invoke permissions
        *       to an account or Amazon Web Services service, use <a>AddPermission</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, UpdateFunctionConfigurationCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, UpdateFunctionConfigurationCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new UpdateFunctionConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateFunctionConfigurationCommandInput} for command's `input` shape.
        * @see {@link UpdateFunctionConfigurationCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class UpdateFunctionConfigurationCommand extends $Command<UpdateFunctionConfigurationCommandInput, UpdateFunctionConfigurationCommandOutput, LambdaClientResolvedConfig> {
            readonly input: UpdateFunctionConfigurationCommandInput;
            constructor(input: UpdateFunctionConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateFunctionConfigurationCommandInput, UpdateFunctionConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UpdateFunctionEventInvokeConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { FunctionEventInvokeConfig, UpdateFunctionEventInvokeConfigRequest } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface UpdateFunctionEventInvokeConfigCommandInput extends UpdateFunctionEventInvokeConfigRequest {
    }
    export interface UpdateFunctionEventInvokeConfigCommandOutput extends FunctionEventInvokeConfig, __MetadataBearer {
    }
    /**
        * <p>Updates the configuration for asynchronous invocation for a function, version, or alias.</p>
        *          <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, UpdateFunctionEventInvokeConfigCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, UpdateFunctionEventInvokeConfigCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new UpdateFunctionEventInvokeConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateFunctionEventInvokeConfigCommandInput} for command's `input` shape.
        * @see {@link UpdateFunctionEventInvokeConfigCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class UpdateFunctionEventInvokeConfigCommand extends $Command<UpdateFunctionEventInvokeConfigCommandInput, UpdateFunctionEventInvokeConfigCommandOutput, LambdaClientResolvedConfig> {
            readonly input: UpdateFunctionEventInvokeConfigCommandInput;
            constructor(input: UpdateFunctionEventInvokeConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateFunctionEventInvokeConfigCommandInput, UpdateFunctionEventInvokeConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UpdateFunctionUrlConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LambdaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient";
    import { UpdateFunctionUrlConfigRequest, UpdateFunctionUrlConfigResponse } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0";
    export interface UpdateFunctionUrlConfigCommandInput extends UpdateFunctionUrlConfigRequest {
    }
    export interface UpdateFunctionUrlConfigCommandOutput extends UpdateFunctionUrlConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the configuration for a Lambda function URL.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LambdaClient, UpdateFunctionUrlConfigCommand } from "@aws-sdk/client-lambda"; // ES Modules import
        * // const { LambdaClient, UpdateFunctionUrlConfigCommand } = require("@aws-sdk/client-lambda"); // CommonJS import
        * const client = new LambdaClient(config);
        * const command = new UpdateFunctionUrlConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateFunctionUrlConfigCommandInput} for command's `input` shape.
        * @see {@link UpdateFunctionUrlConfigCommandOutput} for command's `response` shape.
        * @see {@link LambdaClientResolvedConfig | config} for LambdaClient's `config` shape.
        *
        */
    export class UpdateFunctionUrlConfigCommand extends $Command<UpdateFunctionUrlConfigCommandInput, UpdateFunctionUrlConfigCommandOutput, LambdaClientResolvedConfig> {
            readonly input: UpdateFunctionUrlConfigCommandInput;
            constructor(input: UpdateFunctionUrlConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LambdaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateFunctionUrlConfigCommandInput, UpdateFunctionUrlConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/LambdaClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AddLayerVersionPermissionCommandInput, AddLayerVersionPermissionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/AddLayerVersionPermissionCommand";
    import { AddPermissionCommandInput, AddPermissionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/AddPermissionCommand";
    import { CreateAliasCommandInput, CreateAliasCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/CreateAliasCommand";
    import { CreateCodeSigningConfigCommandInput, CreateCodeSigningConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/CreateCodeSigningConfigCommand";
    import { CreateEventSourceMappingCommandInput, CreateEventSourceMappingCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/CreateEventSourceMappingCommand";
    import { CreateFunctionCommandInput, CreateFunctionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/CreateFunctionCommand";
    import { CreateFunctionUrlConfigCommandInput, CreateFunctionUrlConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/CreateFunctionUrlConfigCommand";
    import { DeleteAliasCommandInput, DeleteAliasCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteAliasCommand";
    import { DeleteCodeSigningConfigCommandInput, DeleteCodeSigningConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteCodeSigningConfigCommand";
    import { DeleteEventSourceMappingCommandInput, DeleteEventSourceMappingCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteEventSourceMappingCommand";
    import { DeleteFunctionCodeSigningConfigCommandInput, DeleteFunctionCodeSigningConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteFunctionCodeSigningConfigCommand";
    import { DeleteFunctionCommandInput, DeleteFunctionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteFunctionCommand";
    import { DeleteFunctionConcurrencyCommandInput, DeleteFunctionConcurrencyCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteFunctionConcurrencyCommand";
    import { DeleteFunctionEventInvokeConfigCommandInput, DeleteFunctionEventInvokeConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteFunctionEventInvokeConfigCommand";
    import { DeleteFunctionUrlConfigCommandInput, DeleteFunctionUrlConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteFunctionUrlConfigCommand";
    import { DeleteLayerVersionCommandInput, DeleteLayerVersionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteLayerVersionCommand";
    import { DeleteProvisionedConcurrencyConfigCommandInput, DeleteProvisionedConcurrencyConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/DeleteProvisionedConcurrencyConfigCommand";
    import { GetAccountSettingsCommandInput, GetAccountSettingsCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetAccountSettingsCommand";
    import { GetAliasCommandInput, GetAliasCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetAliasCommand";
    import { GetCodeSigningConfigCommandInput, GetCodeSigningConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetCodeSigningConfigCommand";
    import { GetEventSourceMappingCommandInput, GetEventSourceMappingCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetEventSourceMappingCommand";
    import { GetFunctionCodeSigningConfigCommandInput, GetFunctionCodeSigningConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetFunctionCodeSigningConfigCommand";
    import { GetFunctionCommandInput, GetFunctionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetFunctionCommand";
    import { GetFunctionConcurrencyCommandInput, GetFunctionConcurrencyCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetFunctionConcurrencyCommand";
    import { GetFunctionConfigurationCommandInput, GetFunctionConfigurationCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetFunctionConfigurationCommand";
    import { GetFunctionEventInvokeConfigCommandInput, GetFunctionEventInvokeConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetFunctionEventInvokeConfigCommand";
    import { GetFunctionUrlConfigCommandInput, GetFunctionUrlConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetFunctionUrlConfigCommand";
    import { GetLayerVersionByArnCommandInput, GetLayerVersionByArnCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetLayerVersionByArnCommand";
    import { GetLayerVersionCommandInput, GetLayerVersionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetLayerVersionCommand";
    import { GetLayerVersionPolicyCommandInput, GetLayerVersionPolicyCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetLayerVersionPolicyCommand";
    import { GetPolicyCommandInput, GetPolicyCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetPolicyCommand";
    import { GetProvisionedConcurrencyConfigCommandInput, GetProvisionedConcurrencyConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/GetProvisionedConcurrencyConfigCommand";
    import { InvokeAsyncCommandInput, InvokeAsyncCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/InvokeAsyncCommand";
    import { InvokeCommandInput, InvokeCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/InvokeCommand";
    import { ListAliasesCommandInput, ListAliasesCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListAliasesCommand";
    import { ListCodeSigningConfigsCommandInput, ListCodeSigningConfigsCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListCodeSigningConfigsCommand";
    import { ListEventSourceMappingsCommandInput, ListEventSourceMappingsCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListEventSourceMappingsCommand";
    import { ListFunctionEventInvokeConfigsCommandInput, ListFunctionEventInvokeConfigsCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListFunctionEventInvokeConfigsCommand";
    import { ListFunctionsByCodeSigningConfigCommandInput, ListFunctionsByCodeSigningConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListFunctionsByCodeSigningConfigCommand";
    import { ListFunctionsCommandInput, ListFunctionsCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListFunctionsCommand";
    import { ListFunctionUrlConfigsCommandInput, ListFunctionUrlConfigsCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListFunctionUrlConfigsCommand";
    import { ListLayersCommandInput, ListLayersCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListLayersCommand";
    import { ListLayerVersionsCommandInput, ListLayerVersionsCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListLayerVersionsCommand";
    import { ListProvisionedConcurrencyConfigsCommandInput, ListProvisionedConcurrencyConfigsCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListProvisionedConcurrencyConfigsCommand";
    import { ListTagsCommandInput, ListTagsCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListTagsCommand";
    import { ListVersionsByFunctionCommandInput, ListVersionsByFunctionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/ListVersionsByFunctionCommand";
    import { PublishLayerVersionCommandInput, PublishLayerVersionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/PublishLayerVersionCommand";
    import { PublishVersionCommandInput, PublishVersionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/PublishVersionCommand";
    import { PutFunctionCodeSigningConfigCommandInput, PutFunctionCodeSigningConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/PutFunctionCodeSigningConfigCommand";
    import { PutFunctionConcurrencyCommandInput, PutFunctionConcurrencyCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/PutFunctionConcurrencyCommand";
    import { PutFunctionEventInvokeConfigCommandInput, PutFunctionEventInvokeConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/PutFunctionEventInvokeConfigCommand";
    import { PutProvisionedConcurrencyConfigCommandInput, PutProvisionedConcurrencyConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/PutProvisionedConcurrencyConfigCommand";
    import { RemoveLayerVersionPermissionCommandInput, RemoveLayerVersionPermissionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/RemoveLayerVersionPermissionCommand";
    import { RemovePermissionCommandInput, RemovePermissionCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/RemovePermissionCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UntagResourceCommand";
    import { UpdateAliasCommandInput, UpdateAliasCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UpdateAliasCommand";
    import { UpdateCodeSigningConfigCommandInput, UpdateCodeSigningConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UpdateCodeSigningConfigCommand";
    import { UpdateEventSourceMappingCommandInput, UpdateEventSourceMappingCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UpdateEventSourceMappingCommand";
    import { UpdateFunctionCodeCommandInput, UpdateFunctionCodeCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UpdateFunctionCodeCommand";
    import { UpdateFunctionConfigurationCommandInput, UpdateFunctionConfigurationCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UpdateFunctionConfigurationCommand";
    import { UpdateFunctionEventInvokeConfigCommandInput, UpdateFunctionEventInvokeConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UpdateFunctionEventInvokeConfigCommand";
    import { UpdateFunctionUrlConfigCommandInput, UpdateFunctionUrlConfigCommandOutput } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/commands/UpdateFunctionUrlConfigCommand";
    export type ServiceInputTypes = AddLayerVersionPermissionCommandInput | AddPermissionCommandInput | CreateAliasCommandInput | CreateCodeSigningConfigCommandInput | CreateEventSourceMappingCommandInput | CreateFunctionCommandInput | CreateFunctionUrlConfigCommandInput | DeleteAliasCommandInput | DeleteCodeSigningConfigCommandInput | DeleteEventSourceMappingCommandInput | DeleteFunctionCodeSigningConfigCommandInput | DeleteFunctionCommandInput | DeleteFunctionConcurrencyCommandInput | DeleteFunctionEventInvokeConfigCommandInput | DeleteFunctionUrlConfigCommandInput | DeleteLayerVersionCommandInput | DeleteProvisionedConcurrencyConfigCommandInput | GetAccountSettingsCommandInput | GetAliasCommandInput | GetCodeSigningConfigCommandInput | GetEventSourceMappingCommandInput | GetFunctionCodeSigningConfigCommandInput | GetFunctionCommandInput | GetFunctionConcurrencyCommandInput | GetFunctionConfigurationCommandInput | GetFunctionEventInvokeConfigCommandInput | GetFunctionUrlConfigCommandInput | GetLayerVersionByArnCommandInput | GetLayerVersionCommandInput | GetLayerVersionPolicyCommandInput | GetPolicyCommandInput | GetProvisionedConcurrencyConfigCommandInput | InvokeAsyncCommandInput | InvokeCommandInput | ListAliasesCommandInput | ListCodeSigningConfigsCommandInput | ListEventSourceMappingsCommandInput | ListFunctionEventInvokeConfigsCommandInput | ListFunctionUrlConfigsCommandInput | ListFunctionsByCodeSigningConfigCommandInput | ListFunctionsCommandInput | ListLayerVersionsCommandInput | ListLayersCommandInput | ListProvisionedConcurrencyConfigsCommandInput | ListTagsCommandInput | ListVersionsByFunctionCommandInput | PublishLayerVersionCommandInput | PublishVersionCommandInput | PutFunctionCodeSigningConfigCommandInput | PutFunctionConcurrencyCommandInput | PutFunctionEventInvokeConfigCommandInput | PutProvisionedConcurrencyConfigCommandInput | RemoveLayerVersionPermissionCommandInput | RemovePermissionCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateAliasCommandInput | UpdateCodeSigningConfigCommandInput | UpdateEventSourceMappingCommandInput | UpdateFunctionCodeCommandInput | UpdateFunctionConfigurationCommandInput | UpdateFunctionEventInvokeConfigCommandInput | UpdateFunctionUrlConfigCommandInput;
    export type ServiceOutputTypes = AddLayerVersionPermissionCommandOutput | AddPermissionCommandOutput | CreateAliasCommandOutput | CreateCodeSigningConfigCommandOutput | CreateEventSourceMappingCommandOutput | CreateFunctionCommandOutput | CreateFunctionUrlConfigCommandOutput | DeleteAliasCommandOutput | DeleteCodeSigningConfigCommandOutput | DeleteEventSourceMappingCommandOutput | DeleteFunctionCodeSigningConfigCommandOutput | DeleteFunctionCommandOutput | DeleteFunctionConcurrencyCommandOutput | DeleteFunctionEventInvokeConfigCommandOutput | DeleteFunctionUrlConfigCommandOutput | DeleteLayerVersionCommandOutput | DeleteProvisionedConcurrencyConfigCommandOutput | GetAccountSettingsCommandOutput | GetAliasCommandOutput | GetCodeSigningConfigCommandOutput | GetEventSourceMappingCommandOutput | GetFunctionCodeSigningConfigCommandOutput | GetFunctionCommandOutput | GetFunctionConcurrencyCommandOutput | GetFunctionConfigurationCommandOutput | GetFunctionEventInvokeConfigCommandOutput | GetFunctionUrlConfigCommandOutput | GetLayerVersionByArnCommandOutput | GetLayerVersionCommandOutput | GetLayerVersionPolicyCommandOutput | GetPolicyCommandOutput | GetProvisionedConcurrencyConfigCommandOutput | InvokeAsyncCommandOutput | InvokeCommandOutput | ListAliasesCommandOutput | ListCodeSigningConfigsCommandOutput | ListEventSourceMappingsCommandOutput | ListFunctionEventInvokeConfigsCommandOutput | ListFunctionUrlConfigsCommandOutput | ListFunctionsByCodeSigningConfigCommandOutput | ListFunctionsCommandOutput | ListLayerVersionsCommandOutput | ListLayersCommandOutput | ListProvisionedConcurrencyConfigsCommandOutput | ListTagsCommandOutput | ListVersionsByFunctionCommandOutput | PublishLayerVersionCommandOutput | PublishVersionCommandOutput | PutFunctionCodeSigningConfigCommandOutput | PutFunctionConcurrencyCommandOutput | PutFunctionEventInvokeConfigCommandOutput | PutProvisionedConcurrencyConfigCommandOutput | RemoveLayerVersionPermissionCommandOutput | RemovePermissionCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateAliasCommandOutput | UpdateCodeSigningConfigCommandOutput | UpdateEventSourceMappingCommandOutput | UpdateFunctionCodeCommandOutput | UpdateFunctionConfigurationCommandOutput | UpdateFunctionEventInvokeConfigCommandOutput | UpdateFunctionUrlConfigCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type LambdaClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of LambdaClient class constructor that set the region, credentials and other options.
        */
    export interface LambdaClientConfig extends LambdaClientConfigType {
    }
    type LambdaClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of LambdaClient class. This is resolved and normalized from the {@link LambdaClientConfig | constructor configuration interface}.
        */
    export interface LambdaClientResolvedConfig extends LambdaClientResolvedConfigType {
    }
    /**
        * <fullname>Lambda</fullname>
        *          <p>
        *             <b>Overview</b>
        *          </p>
        *          <p>Lambda is a compute service that lets you run code without provisioning or managing servers.
        *         Lambda runs your code on a high-availability compute infrastructure and performs all of the
        *       administration of the compute resources, including server and operating system maintenance, capacity provisioning
        *       and automatic scaling, code monitoring and logging. With Lambda, you can run code for virtually any
        *       type of application or backend service. For more information about the Lambda service, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/welcome.html">What is Lambda</a> in the <b>Lambda Developer Guide</b>.</p>
        *          <p>The <i>Lambda API Reference</i> provides information about
        *       each of the API methods, including details about the parameters in each API request and
        *       response. </p>
        *          <p></p>
        *          <p>You can use Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command
        *       line tools to access the API. For installation instructions, see <a href="http://aws.amazon.com/tools/">Tools for
        *         Amazon Web Services</a>. </p>
        *          <p>For a list of Region-specific endpoints that Lambda supports,
        *       see <a href="https://docs.aws.amazon.com/general/latest/gr/lambda-service.html/">Lambda
        *         endpoints and quotas </a> in the <i>Amazon Web Services General Reference.</i>. </p>
        *          <p>When making the API calls, you will need to
        *       authenticate your request by providing a signature. Lambda supports signature version 4. For more information,
        *       see <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 signing process</a> in the
        *       <i>Amazon Web Services General Reference.</i>. </p>
        *          <p>
        *             <b>CA certificates</b>
        *          </p>
        *
        *          <p>Because Amazon Web Services SDKs use the CA certificates from your computer, changes to the certificates on the Amazon Web Services servers
        *         can cause connection failures when you attempt to use an SDK. You can prevent these failures by keeping your
        *         computer's CA certificates and operating system up-to-date. If you encounter this issue in a corporate
        *         environment and do not manage your own computer, you might need to ask an administrator to assist with the
        *         update process. The following list shows minimum operating system and Java versions:</p>
        *          <ul>
        *             <li>
        *                <p>Microsoft Windows versions that have updates from January 2005 or later installed contain at least one
        *             of the required CAs in their trust list. </p>
        *             </li>
        *             <li>
        *                <p>Mac OS X 10.4 with Java for Mac OS X 10.4 Release 5 (February 2007), Mac OS X 10.5 (October 2007), and
        *             later versions contain at least one of the required CAs in their trust list. </p>
        *             </li>
        *             <li>
        *                <p>Red Hat Enterprise Linux 5 (March 2007), 6, and 7 and CentOS 5, 6, and 7 all contain at least one of the
        *             required CAs in their default trusted CA list. </p>
        *             </li>
        *             <li>
        *                <p>Java 1.4.2_12 (May 2006), 5 Update 2 (March 2005), and all later versions, including Java 6 (December
        *             2006), 7, and 8, contain at least one of the required CAs in their default trusted CA list. </p>
        *             </li>
        *          </ul>
        *          <p>When accessing the Lambda management console or Lambda API endpoints, whether through browsers or
        *         programmatically, you will need to ensure your client machines support any of the following CAs: </p>
        *          <ul>
        *             <li>
        *                <p>Amazon Root CA 1</p>
        *             </li>
        *             <li>
        *                <p>Starfield Services Root Certificate Authority - G2</p>
        *             </li>
        *             <li>
        *                <p>Starfield Class 2 Certification Authority</p>
        *             </li>
        *          </ul>
        *          <p>Root certificates from the first two authorities are available from <a href="https://www.amazontrust.com/repository/">Amazon trust services</a>, but keeping your computer
        *         up-to-date is the more straightforward solution. To learn more about ACM-provided certificates, see <a href="http://aws.amazon.com/certificate-manager/faqs/#certificates">Amazon Web Services Certificate Manager FAQs.</a>
        *          </p>
        */
    export class LambdaClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, LambdaClientResolvedConfig> {
            /**
                * The resolved configuration of LambdaClient class. This is resolved and normalized from the {@link LambdaClientConfig | constructor configuration interface}.
                */
            readonly config: LambdaClientResolvedConfig;
            constructor(configuration: LambdaClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { Readable } from "stream";
    import { LambdaServiceException as __BaseException } from "@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/LambdaServiceException";
    /**
        * <p>Limits that are related to concurrency and storage. All file and storage sizes are in bytes.</p>
        */
    export interface AccountLimit {
            /**
                * <p>The amount of storage space that you can use for all deployment packages and layer archives.</p>
                */
            TotalCodeSize?: number;
            /**
                * <p>The maximum size of a function's deployment package and layers when they're extracted.</p>
                */
            CodeSizeUnzipped?: number;
            /**
                * <p>The maximum size of a deployment package when it's uploaded directly to Lambda. Use Amazon S3 for larger
                *       files.</p>
                */
            CodeSizeZipped?: number;
            /**
                * <p>The maximum number of simultaneous function executions.</p>
                */
            ConcurrentExecutions?: number;
            /**
                * <p>The maximum number of simultaneous function executions, minus the capacity that's reserved for individual
                *       functions with <a>PutFunctionConcurrency</a>.</p>
                */
            UnreservedConcurrentExecutions?: number;
    }
    export namespace AccountLimit {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountLimit) => any;
    }
    /**
        * <p>The number of functions and amount of storage in use.</p>
        */
    export interface AccountUsage {
            /**
                * <p>The amount of storage space, in bytes, that's being used by deployment packages and layer archives.</p>
                */
            TotalCodeSize?: number;
            /**
                * <p>The number of Lambda functions.</p>
                */
            FunctionCount?: number;
    }
    export namespace AccountUsage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountUsage) => any;
    }
    export interface AddLayerVersionPermissionRequest {
            /**
                * <p>The name or Amazon Resource Name (ARN) of the layer.</p>
                */
            LayerName: string | undefined;
            /**
                * <p>The version number.</p>
                */
            VersionNumber: number | undefined;
            /**
                * <p>An identifier that distinguishes the policy from others on the same layer version.</p>
                */
            StatementId: string | undefined;
            /**
                * <p>The API action that grants access to the layer. For example, <code>lambda:GetLayerVersion</code>.</p>
                */
            Action: string | undefined;
            /**
                * <p>An account ID, or <code>*</code> to grant layer usage permission to all
                *       accounts in an organization, or all Amazon Web Services accounts (if <code>organizationId</code> is not specified).
                *       For the last case, make sure that you really do want all Amazon Web Services accounts to have usage permission to this layer.
                *     </p>
                */
            Principal: string | undefined;
            /**
                * <p>With the principal set to <code>*</code>, grant permission to all accounts in the specified
                *       organization.</p>
                */
            OrganizationId?: string;
            /**
                * <p>Only update the policy if the revision ID matches the ID specified. Use this option to avoid modifying a
                *       policy that has changed since you last read it.</p>
                */
            RevisionId?: string;
    }
    export namespace AddLayerVersionPermissionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddLayerVersionPermissionRequest) => any;
    }
    export interface AddLayerVersionPermissionResponse {
            /**
                * <p>The permission statement.</p>
                */
            Statement?: string;
            /**
                * <p>A unique identifier for the current revision of the policy.</p>
                */
            RevisionId?: string;
    }
    export namespace AddLayerVersionPermissionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddLayerVersionPermissionResponse) => any;
    }
    /**
        * <p>One of the parameters in the request is invalid.</p>
        */
    export class InvalidParameterValueException extends __BaseException {
            readonly name: "InvalidParameterValueException";
            readonly $fault: "client";
            /**
                * <p>The exception type.</p>
                */
            Type?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidParameterValueException, __BaseException>);
    }
    /**
        * <p>The permissions policy for the resource is too large. <a href="https://docs.aws.amazon.com/lambda/latest/dg/limits.html">Learn more</a>
        *          </p>
        */
    export class PolicyLengthExceededException extends __BaseException {
            readonly name: "PolicyLengthExceededException";
            readonly $fault: "client";
            Type?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PolicyLengthExceededException, __BaseException>);
    }
    /**
        * <p>The RevisionId provided does not match the latest RevisionId for the Lambda function or alias. Call the
        *         <code>GetFunction</code> or the <code>GetAlias</code> API to retrieve the latest RevisionId for your
        *       resource.</p>
        */
    export class PreconditionFailedException extends __BaseException {
            readonly name: "PreconditionFailedException";
            readonly $fault: "client";
            /**
                * <p>The exception type.</p>
                */
            Type?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PreconditionFailedException, __BaseException>);
    }
    /**
        * <p>The resource already exists, or another operation is in progress.</p>
        */
    export class ResourceConflictException extends __BaseException {
            readonly name: "ResourceConflictException";
            readonly $fault: "client";
            /**
                * <p>The exception type.</p>
                */
            Type?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceConflictException, __BaseException>);
    }
    /**
        * <p>The resource specified in the request does not exist.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Type?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>The Lambda service encountered an internal error.</p>
        */
    export class ServiceException extends __BaseException {
            readonly name: "ServiceException";
            readonly $fault: "server";
            Type?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceException, __BaseException>);
    }
    export enum ThrottleReason {
            CallerRateLimitExceeded = "CallerRateLimitExceeded",
            ConcurrentInvocationLimitExceeded = "ConcurrentInvocationLimitExceeded",
            FunctionInvocationRateLimitExceeded = "FunctionInvocationRateLimitExceeded",
            ReservedFunctionConcurrentInvocationLimitExceeded = "ReservedFunctionConcurrentInvocationLimitExceeded",
            ReservedFunctionInvocationRateLimitExceeded = "ReservedFunctionInvocationRateLimitExceeded"
    }
    /**
        * <p>The request throughput limit was exceeded.</p>
        */
    export class TooManyRequestsException extends __BaseException {
            readonly name: "TooManyRequestsException";
            readonly $fault: "client";
            /**
                * <p>The number of seconds the caller should wait before retrying.</p>
                */
            retryAfterSeconds?: string;
            Type?: string;
            Reason?: ThrottleReason | string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
    }
    export enum FunctionUrlAuthType {
            AWS_IAM = "AWS_IAM",
            NONE = "NONE"
    }
    export interface AddPermissionRequest {
            /**
                * <p>The name of the Lambda function, version, or alias.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN.
                *       If you specify only the function name, it is limited to 64 characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>A statement identifier that differentiates the statement from others in the same policy.</p>
                */
            StatementId: string | undefined;
            /**
                * <p>The action that the principal can use on the function. For example, <code>lambda:InvokeFunction</code> or
                *         <code>lambda:GetFunction</code>.</p>
                */
            Action: string | undefined;
            /**
                * <p>The Amazon Web Services service or account that invokes the function. If you specify a service, use <code>SourceArn</code> or
                *         <code>SourceAccount</code> to limit who can invoke the function through that service.</p>
                */
            Principal: string | undefined;
            /**
                * <p>For Amazon Web Services services, the ARN of the Amazon Web Services resource that invokes the function. For example, an Amazon S3 bucket or
                *       Amazon SNS topic.</p>
                *          <p>Note that Lambda configures the comparison using the <code>StringLike</code> operator.</p>
                */
            SourceArn?: string;
            /**
                * <p>For Amazon S3, the ID of the account that owns the resource. Use this together with <code>SourceArn</code> to
                *       ensure that the resource is owned by the specified account. It is possible for an Amazon S3 bucket to be deleted
                *       by its owner and recreated by another account.</p>
                */
            SourceAccount?: string;
            /**
                * <p>For Alexa Smart Home functions, a token that must be supplied by the invoker.</p>
                */
            EventSourceToken?: string;
            /**
                * <p>Specify a version or alias to add permissions to a published version of the function.</p>
                */
            Qualifier?: string;
            /**
                * <p>Only update the policy if the revision ID matches the ID that's specified. Use this option to avoid modifying a
                *       policy that has changed since you last read it.</p>
                */
            RevisionId?: string;
            /**
                * <p>The identifier for your organization in Organizations. Use this to grant permissions to all the Amazon Web Services
                *       accounts under this organization.</p>
                */
            PrincipalOrgID?: string;
            /**
                * <p>The type of authentication that your function URL uses. Set to <code>AWS_IAM</code> if you want to restrict access to authenticated
                *   <code>IAM</code> users only. Set to <code>NONE</code> if you want to bypass IAM authentication to create a public endpoint. For more information,
                *   see <a href="https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html"> Security and auth model for Lambda function URLs</a>.</p>
                */
            FunctionUrlAuthType?: FunctionUrlAuthType | string;
    }
    export namespace AddPermissionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddPermissionRequest) => any;
    }
    export interface AddPermissionResponse {
            /**
                * <p>The permission statement that's added to the function policy.</p>
                */
            Statement?: string;
    }
    export namespace AddPermissionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddPermissionResponse) => any;
    }
    /**
        * <p>The <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html">traffic-shifting</a> configuration of a Lambda function alias.</p>
        */
    export interface AliasRoutingConfiguration {
            /**
                * <p>The second version, and the percentage of traffic that's routed to it.</p>
                */
            AdditionalVersionWeights?: Record<string, number>;
    }
    export namespace AliasRoutingConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AliasRoutingConfiguration) => any;
    }
    /**
        * <p>Provides configuration information about a Lambda function <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a>.</p>
        */
    export interface AliasConfiguration {
            /**
                * <p>The Amazon Resource Name (ARN) of the alias.</p>
                */
            AliasArn?: string;
            /**
                * <p>The name of the alias.</p>
                */
            Name?: string;
            /**
                * <p>The function version that the alias invokes.</p>
                */
            FunctionVersion?: string;
            /**
                * <p>A description of the alias.</p>
                */
            Description?: string;
            /**
                * <p>The <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html">routing
                *         configuration</a> of the alias.</p>
                */
            RoutingConfig?: AliasRoutingConfiguration;
            /**
                * <p>A unique identifier that changes when you update the alias.</p>
                */
            RevisionId?: string;
    }
    export namespace AliasConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AliasConfiguration) => any;
    }
    /**
        * <p>List of signing profiles that can sign a code package. </p>
        */
    export interface AllowedPublishers {
            /**
                * <p>The Amazon Resource Name (ARN) for each of the signing profiles. A signing profile defines a trusted user
                *       who can sign a code package. </p>
                */
            SigningProfileVersionArns: string[] | undefined;
    }
    export namespace AllowedPublishers {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AllowedPublishers) => any;
    }
    export enum Architecture {
            arm64 = "arm64",
            x86_64 = "x86_64"
    }
    export interface CreateAliasRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>The name of the alias.</p>
                */
            Name: string | undefined;
            /**
                * <p>The function version that the alias invokes.</p>
                */
            FunctionVersion: string | undefined;
            /**
                * <p>A description of the alias.</p>
                */
            Description?: string;
            /**
                * <p>The <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html#configuring-alias-routing">routing
                *         configuration</a> of the alias.</p>
                */
            RoutingConfig?: AliasRoutingConfiguration;
    }
    export namespace CreateAliasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAliasRequest) => any;
    }
    export enum CodeSigningPolicy {
            Enforce = "Enforce",
            Warn = "Warn"
    }
    /**
        * <p>Code signing configuration <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html#config-codesigning-policies">policies</a> specify the validation failure action for signature mismatch or
        *        expiry.</p>
        */
    export interface CodeSigningPolicies {
            /**
                * <p>Code signing configuration policy for deployment validation failure. If you set the policy to
                *       <code>Enforce</code>, Lambda blocks the deployment request if signature validation checks fail. If you set the
                *       policy to <code>Warn</code>, Lambda allows the deployment and creates a CloudWatch log. </p>
                *          <p>Default value: <code>Warn</code>
                *          </p>
                */
            UntrustedArtifactOnDeployment?: CodeSigningPolicy | string;
    }
    export namespace CodeSigningPolicies {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CodeSigningPolicies) => any;
    }
    export interface CreateCodeSigningConfigRequest {
            /**
                * <p>Descriptive name for this code signing configuration.</p>
                */
            Description?: string;
            /**
                * <p>Signing profiles for this code signing configuration.</p>
                */
            AllowedPublishers: AllowedPublishers | undefined;
            /**
                * <p>The code signing policies define the actions to take if the validation checks fail. </p>
                */
            CodeSigningPolicies?: CodeSigningPolicies;
    }
    export namespace CreateCodeSigningConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCodeSigningConfigRequest) => any;
    }
    /**
        * <p>Details about a <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html">Code signing configuration</a>. </p>
        */
    export interface CodeSigningConfig {
            /**
                * <p>Unique identifer for the Code signing configuration.</p>
                */
            CodeSigningConfigId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the Code signing configuration.</p>
                */
            CodeSigningConfigArn: string | undefined;
            /**
                * <p>Code signing configuration description.</p>
                */
            Description?: string;
            /**
                * <p>List of allowed publishers.</p>
                */
            AllowedPublishers: AllowedPublishers | undefined;
            /**
                * <p>The code signing policy controls the validation failure action for signature mismatch or expiry.</p>
                */
            CodeSigningPolicies: CodeSigningPolicies | undefined;
            /**
                * <p>The date and time that the Code signing configuration was last modified, in ISO-8601 format (YYYY-MM-DDThh:mm:ss.sTZD). </p>
                */
            LastModified: string | undefined;
    }
    export namespace CodeSigningConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CodeSigningConfig) => any;
    }
    export interface CreateCodeSigningConfigResponse {
            /**
                * <p>The code signing configuration.</p>
                */
            CodeSigningConfig: CodeSigningConfig | undefined;
    }
    export namespace CreateCodeSigningConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCodeSigningConfigResponse) => any;
    }
    /**
        * <p>A destination for events that failed processing.</p>
        */
    export interface OnFailure {
            /**
                * <p>The Amazon Resource Name (ARN) of the destination resource.</p>
                */
            Destination?: string;
    }
    export namespace OnFailure {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OnFailure) => any;
    }
    /**
        * <p>A destination for events that were processed successfully.</p>
        */
    export interface OnSuccess {
            /**
                * <p>The Amazon Resource Name (ARN) of the destination resource.</p>
                */
            Destination?: string;
    }
    export namespace OnSuccess {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OnSuccess) => any;
    }
    /**
        * <p>A configuration object that specifies the destination of an event after Lambda processes it.</p>
        */
    export interface DestinationConfig {
            /**
                * <p>The destination configuration for successful invocations.</p>
                */
            OnSuccess?: OnSuccess;
            /**
                * <p>The destination configuration for failed invocations.</p>
                */
            OnFailure?: OnFailure;
    }
    export namespace DestinationConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DestinationConfig) => any;
    }
    /**
        * <p>
        *       A structure within a <code>FilterCriteria</code> object that defines an event filtering pattern.
        *     </p>
        */
    export interface Filter {
            /**
                * <p>
                *       A filter pattern. For more information on the syntax of a filter pattern, see
                *       <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-syntax">
                *         Filter rule syntax</a>.
                *     </p>
                */
            Pattern?: string;
    }
    export namespace Filter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Filter) => any;
    }
    /**
        * <p>
        *       An object that contains the filters for an event source.
        *     </p>
        */
    export interface FilterCriteria {
            /**
                * <p>
                *       A list of filters.
                *     </p>
                */
            Filters?: Filter[];
    }
    export namespace FilterCriteria {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FilterCriteria) => any;
    }
    export enum FunctionResponseType {
            ReportBatchItemFailures = "ReportBatchItemFailures"
    }
    export enum EndPointType {
            KAFKA_BOOTSTRAP_SERVERS = "KAFKA_BOOTSTRAP_SERVERS"
    }
    /**
        * <p>The self-managed Apache Kafka cluster for your event source.</p>
        */
    export interface SelfManagedEventSource {
            /**
                * <p>The list of bootstrap servers for your Kafka brokers in the following format: <code>"KAFKA_BOOTSTRAP_SERVERS":
                *         ["abc.xyz.com:xxxx","abc2.xyz.com:xxxx"]</code>.</p>
                */
            Endpoints?: Record<string, string[]>;
    }
    export namespace SelfManagedEventSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SelfManagedEventSource) => any;
    }
    export enum SourceAccessType {
            BASIC_AUTH = "BASIC_AUTH",
            CLIENT_CERTIFICATE_TLS_AUTH = "CLIENT_CERTIFICATE_TLS_AUTH",
            SASL_SCRAM_256_AUTH = "SASL_SCRAM_256_AUTH",
            SASL_SCRAM_512_AUTH = "SASL_SCRAM_512_AUTH",
            SERVER_ROOT_CA_CERTIFICATE = "SERVER_ROOT_CA_CERTIFICATE",
            VIRTUAL_HOST = "VIRTUAL_HOST",
            VPC_SECURITY_GROUP = "VPC_SECURITY_GROUP",
            VPC_SUBNET = "VPC_SUBNET"
    }
    /**
        * <p>To secure and define access to your event source, you can specify the authentication protocol, VPC components, or virtual host.</p>
        */
    export interface SourceAccessConfiguration {
            /**
                * <p>The type of authentication protocol, VPC components, or virtual host for your event source. For example: <code>"Type":"SASL_SCRAM_512_AUTH"</code>.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>BASIC_AUTH</code> - (Amazon MQ) The Secrets Manager secret that stores your broker credentials.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>BASIC_AUTH</code> - (Self-managed Apache Kafka) The Secrets Manager ARN of your secret key used for SASL/PLAIN authentication of your Apache Kafka brokers.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>VPC_SUBNET</code> - The subnets associated with your VPC. Lambda connects to these subnets to fetch data from your self-managed Apache Kafka cluster.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>VPC_SECURITY_GROUP</code> - The VPC security group used to manage access to your self-managed Apache Kafka brokers.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SASL_SCRAM_256_AUTH</code> - The Secrets Manager ARN of your secret key used for SASL SCRAM-256 authentication of your self-managed Apache Kafka brokers.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SASL_SCRAM_512_AUTH</code> - The Secrets Manager ARN of your secret key used for SASL SCRAM-512 authentication of your self-managed Apache Kafka brokers.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>VIRTUAL_HOST</code> - (Amazon MQ) The name of the virtual host in your RabbitMQ broker. Lambda uses this RabbitMQ host as the event source.
                *   This property cannot be specified in an UpdateEventSourceMapping API call.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CLIENT_CERTIFICATE_TLS_AUTH</code> - (Amazon MSK, Self-managed Apache Kafka) The Secrets Manager ARN of your secret key containing the certificate chain (X.509 PEM),
                *   private key (PKCS#8 PEM), and private key password (optional) used for mutual TLS authentication of your MSK/Apache Kafka brokers.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SERVER_ROOT_CA_CERTIFICATE</code> - (Self-managed Apache Kafka) The Secrets Manager ARN of your secret key containing the root CA certificate (X.509 PEM) used for TLS encryption of your Apache Kafka brokers.
                *   </p>
                *             </li>
                *          </ul>
                */
            Type?: SourceAccessType | string;
            /**
                * <p>The value for your chosen configuration in <code>Type</code>. For example: <code>"URI": "arn:aws:secretsmanager:us-east-1:01234567890:secret:MyBrokerSecretName"</code>.</p>
                */
            URI?: string;
    }
    export namespace SourceAccessConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SourceAccessConfiguration) => any;
    }
    export enum EventSourcePosition {
            AT_TIMESTAMP = "AT_TIMESTAMP",
            LATEST = "LATEST",
            TRIM_HORIZON = "TRIM_HORIZON"
    }
    export interface CreateEventSourceMappingRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the event source.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Amazon Kinesis</b> - The ARN of the data stream or a stream consumer.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Amazon DynamoDB Streams</b> - The ARN of the stream.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Amazon Simple Queue Service</b> - The ARN of the queue.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Amazon Managed Streaming for Apache Kafka</b> - The ARN of the cluster.</p>
                *             </li>
                *          </ul>
                */
            EventSourceArn?: string;
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Version or Alias ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>When true, the event source mapping is active. When false, Lambda pauses polling and invocation.</p>
                *          <p>Default: True</p>
                */
            Enabled?: boolean;
            /**
                * <p>The maximum number of records in each batch that Lambda pulls from your stream or queue and sends to your function. Lambda passes all of the records in the batch to the function in a single call, up to the payload limit for synchronous invocation
                *   (6 MB).</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Amazon Kinesis</b> - Default 100. Max 10,000.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Amazon DynamoDB Streams</b> - Default 100. Max 10,000.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Amazon Simple Queue Service</b> - Default 10. For standard queues the max is 10,000. For FIFO queues the max is 10.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Amazon Managed Streaming for Apache Kafka</b> - Default 100. Max 10,000.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Self-Managed Apache Kafka</b> - Default 100. Max 10,000.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Amazon MQ (ActiveMQ and RabbitMQ)</b> - Default 100. Max 10,000.</p>
                *             </li>
                *          </ul>
                */
            BatchSize?: number;
            /**
                * <p>(Streams and Amazon SQS) An object that defines the filter criteria that
                *     determine whether Lambda should process an event. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html">Lambda event filtering</a>.</p>
                */
            FilterCriteria?: FilterCriteria;
            /**
                * <p>(Streams and Amazon SQS standard queues) The maximum amount of time, in seconds, that Lambda spends gathering records before invoking the function.</p>
                *          <p>Default: 0</p>
                *          <p>Related setting: When you set <code>BatchSize</code> to a value greater than 10, you must set <code>MaximumBatchingWindowInSeconds</code> to at least 1.</p>
                */
            MaximumBatchingWindowInSeconds?: number;
            /**
                * <p>(Streams only) The number of batches to process from each shard concurrently.</p>
                */
            ParallelizationFactor?: number;
            /**
                * <p>The position in a stream from which to start reading. Required for Amazon Kinesis, Amazon DynamoDB, and Amazon
                *       MSK Streams sources. <code>AT_TIMESTAMP</code> is only supported for Amazon Kinesis streams.</p>
                */
            StartingPosition?: EventSourcePosition | string;
            /**
                * <p>With <code>StartingPosition</code> set to <code>AT_TIMESTAMP</code>, the time from which to start
                *       reading.</p>
                */
            StartingPositionTimestamp?: Date;
            /**
                * <p>(Streams only) An Amazon SQS queue or Amazon SNS topic destination for discarded records.</p>
                */
            DestinationConfig?: DestinationConfig;
            /**
                * <p>(Streams only) Discard records older than the specified age. The default value is infinite (-1).</p>
                */
            MaximumRecordAgeInSeconds?: number;
            /**
                * <p>(Streams only) If the function returns an error, split the batch in two and retry.</p>
                */
            BisectBatchOnFunctionError?: boolean;
            /**
                * <p>(Streams only) Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records will be retried until the record expires.</p>
                */
            MaximumRetryAttempts?: number;
            /**
                * <p>(Streams only) The duration in seconds of a processing window. The range is between 1 second up to 900 seconds.</p>
                */
            TumblingWindowInSeconds?: number;
            /**
                * <p>The name of the Kafka topic.</p>
                */
            Topics?: string[];
            /**
                * <p> (MQ) The name of the Amazon MQ broker destination queue to consume. </p>
                */
            Queues?: string[];
            /**
                * <p>An array of authentication protocols or VPC components required to secure your event source.</p>
                */
            SourceAccessConfigurations?: SourceAccessConfiguration[];
            /**
                * <p>The Self-Managed Apache Kafka cluster to send records.</p>
                */
            SelfManagedEventSource?: SelfManagedEventSource;
            /**
                * <p>(Streams and Amazon SQS) A list of current response type enums applied to the event source mapping.</p>
                */
            FunctionResponseTypes?: (FunctionResponseType | string)[];
    }
    export namespace CreateEventSourceMappingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEventSourceMappingRequest) => any;
    }
    /**
        * <p>A mapping between an Amazon Web Services resource and a Lambda function. For details, see <a>CreateEventSourceMapping</a>.</p>
        */
    export interface EventSourceMappingConfiguration {
            /**
                * <p>The identifier of the event source mapping.</p>
                */
            UUID?: string;
            /**
                * <p>The position in a stream from which to start reading. Required for Amazon Kinesis, Amazon DynamoDB, and Amazon MSK stream sources. <code>AT_TIMESTAMP</code> is supported only for Amazon Kinesis
                *       streams.</p>
                */
            StartingPosition?: EventSourcePosition | string;
            /**
                * <p>With <code>StartingPosition</code> set to <code>AT_TIMESTAMP</code>, the time from which to start
                *       reading.</p>
                */
            StartingPositionTimestamp?: Date;
            /**
                * <p>The maximum number of records in each batch that Lambda pulls from your stream or queue and sends to your function. Lambda passes all of the records in the batch to the function in a single call, up to the payload limit for synchronous invocation (6 MB).</p>
                *          <p>Default value: Varies by service. For Amazon SQS, the default is 10. For all other services, the default is 100.</p>
                *          <p>Related setting: When you set <code>BatchSize</code> to a value greater than 10, you must set <code>MaximumBatchingWindowInSeconds</code> to at least 1.</p>
                */
            BatchSize?: number;
            /**
                * <p>(Streams and Amazon SQS standard queues) The maximum amount of time, in seconds, that Lambda spends gathering records before invoking the function.</p>
                *          <p>Default: 0</p>
                *          <p>Related setting: When you set <code>BatchSize</code> to a value greater than 10, you must set <code>MaximumBatchingWindowInSeconds</code> to at least 1.</p>
                */
            MaximumBatchingWindowInSeconds?: number;
            /**
                * <p>(Streams only) The number of batches to process concurrently from each shard. The default value is 1.</p>
                */
            ParallelizationFactor?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the event source.</p>
                */
            EventSourceArn?: string;
            /**
                * <p>(Streams and Amazon SQS) An object that defines the filter criteria that
                *     determine whether Lambda should process an event. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html">Lambda event filtering</a>.</p>
                */
            FilterCriteria?: FilterCriteria;
            /**
                * <p>The ARN of the Lambda function.</p>
                */
            FunctionArn?: string;
            /**
                * <p>The date that the event source mapping was last updated or that its state changed.</p>
                */
            LastModified?: Date;
            /**
                * <p>The result of the last Lambda invocation of your function.</p>
                */
            LastProcessingResult?: string;
            /**
                * <p>The state of the event source mapping. It can be one of the following: <code>Creating</code>,
                *         <code>Enabling</code>, <code>Enabled</code>, <code>Disabling</code>, <code>Disabled</code>,
                *         <code>Updating</code>, or <code>Deleting</code>.</p>
                */
            State?: string;
            /**
                * <p>Indicates whether a user or Lambda made the last change to the event source mapping.</p>
                */
            StateTransitionReason?: string;
            /**
                * <p>(Streams only) An Amazon SQS queue or Amazon SNS topic destination for discarded records.</p>
                */
            DestinationConfig?: DestinationConfig;
            /**
                * <p>The name of the Kafka topic.</p>
                */
            Topics?: string[];
            /**
                * <p> (Amazon MQ) The name of the Amazon MQ broker destination queue to consume.</p>
                */
            Queues?: string[];
            /**
                * <p>An array of the authentication protocol, VPC components, or virtual host to secure and define your event source.</p>
                */
            SourceAccessConfigurations?: SourceAccessConfiguration[];
            /**
                * <p>The self-managed Apache Kafka cluster for your event source.</p>
                */
            SelfManagedEventSource?: SelfManagedEventSource;
            /**
                * <p>(Streams only) Discard records older than the specified age. The default value is -1,
                * which sets the maximum age to infinite. When the value is set to infinite, Lambda never discards old records.  </p>
                */
            MaximumRecordAgeInSeconds?: number;
            /**
                * <p>(Streams only) If the function returns an error, split the batch in two and retry. The default value is false.</p>
                */
            BisectBatchOnFunctionError?: boolean;
            /**
                * <p>(Streams only) Discard records after the specified number of retries. The default value is -1,
                * which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, Lambda retries failed records until the record expires in the event source.</p>
                */
            MaximumRetryAttempts?: number;
            /**
                * <p>(Streams only) The duration in seconds of a processing window. The range is 1–900 seconds.</p>
                */
            TumblingWindowInSeconds?: number;
            /**
                * <p>(Streams and Amazon SQS) A list of current response type enums applied to the event source mapping.</p>
                */
            FunctionResponseTypes?: (FunctionResponseType | string)[];
    }
    export namespace EventSourceMappingConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventSourceMappingConfiguration) => any;
    }
    /**
        * <p>The specified code signing configuration does not exist.</p>
        */
    export class CodeSigningConfigNotFoundException extends __BaseException {
            readonly name: "CodeSigningConfigNotFoundException";
            readonly $fault: "client";
            Type?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CodeSigningConfigNotFoundException, __BaseException>);
    }
    /**
        * <p>You have exceeded your maximum total code size per account. <a href="https://docs.aws.amazon.com/lambda/latest/dg/limits.html">Learn more</a>
        *          </p>
        */
    export class CodeStorageExceededException extends __BaseException {
            readonly name: "CodeStorageExceededException";
            readonly $fault: "client";
            /**
                * <p>The exception type.</p>
                */
            Type?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CodeStorageExceededException, __BaseException>);
    }
    /**
        * <p>The code signature failed one or more of the validation checks for signature mismatch or expiry, and the code signing policy
        *       is set to ENFORCE. Lambda blocks the deployment. </p>
        */
    export class CodeVerificationFailedException extends __BaseException {
            readonly name: "CodeVerificationFailedException";
            readonly $fault: "client";
            Type?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CodeVerificationFailedException, __BaseException>);
    }
    /**
        * <p>The code for the Lambda function. You can specify either an object in Amazon S3, upload a .zip file archive deployment
        *       package directly, or specify the URI of a container image.</p>
        */
    export interface FunctionCode {
            /**
                * <p>The base64-encoded contents of the deployment package. Amazon Web Services SDK and Amazon Web Services CLI clients handle the encoding for
                *   you.</p>
                */
            ZipFile?: Uint8Array;
            /**
                * <p>An Amazon S3 bucket in the same Amazon Web Services Region as your function. The bucket can be in a different Amazon Web Services account.</p>
                */
            S3Bucket?: string;
            /**
                * <p>The Amazon S3 key of the deployment package.</p>
                */
            S3Key?: string;
            /**
                * <p>For versioned objects, the version of the deployment package object to use.</p>
                */
            S3ObjectVersion?: string;
            /**
                * <p>URI of a <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html">container image</a> in the Amazon ECR registry.</p>
                */
            ImageUri?: string;
    }
    export namespace FunctionCode {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FunctionCode) => any;
    }
    /**
        * <p>The <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq">dead-letter queue</a> for
        *       failed asynchronous invocations.</p>
        */
    export interface DeadLetterConfig {
            /**
                * <p>The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic.</p>
                */
            TargetArn?: string;
    }
    export namespace DeadLetterConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeadLetterConfig) => any;
    }
    /**
        * <p>A function's environment variable settings.
        *     You can use environment variables to adjust your function's behavior without updating code.
        *     An environment variable is a pair of strings that are stored in a function's version-specific configuration. </p>
        */
    export interface Environment {
            /**
                * <p>Environment variable key-value pairs. For more information, see
                *     <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html">Using Lambda environment variables</a>.</p>
                */
            Variables?: Record<string, string>;
    }
    export namespace Environment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Environment) => any;
    }
    /**
        * <p>The size of the function’s /tmp directory in MB. The default value is 512, but can be any whole number between 512 and 10240 MB.</p>
        */
    export interface EphemeralStorage {
            /**
                * <p>The size of the function’s /tmp directory.</p>
                */
            Size: number | undefined;
    }
    export namespace EphemeralStorage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EphemeralStorage) => any;
    }
    /**
        * <p>Details about the connection between a Lambda function and an
        *       <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-filesystem.html">Amazon EFS file system</a>.</p>
        */
    export interface FileSystemConfig {
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon EFS access point that provides access to the file system.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The path where the function can access the file system, starting with <code>/mnt/</code>.</p>
                */
            LocalMountPath: string | undefined;
    }
    export namespace FileSystemConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FileSystemConfig) => any;
    }
    /**
        * <p>Configuration values that override the container image Dockerfile settings. See
        *       <a href="https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms">Container settings</a>. </p>
        */
    export interface ImageConfig {
            /**
                * <p>Specifies the entry point to their application, which is typically the location of the runtime
                *       executable.</p>
                */
            EntryPoint?: string[];
            /**
                * <p>Specifies parameters that you want to pass in with ENTRYPOINT. </p>
                */
            Command?: string[];
            /**
                * <p>Specifies the working directory.</p>
                */
            WorkingDirectory?: string;
    }
    export namespace ImageConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImageConfig) => any;
    }
    export enum PackageType {
            Image = "Image",
            Zip = "Zip"
    }
    export enum Runtime {
            dotnet6 = "dotnet6",
            dotnetcore10 = "dotnetcore1.0",
            dotnetcore20 = "dotnetcore2.0",
            dotnetcore21 = "dotnetcore2.1",
            dotnetcore31 = "dotnetcore3.1",
            go1x = "go1.x",
            java11 = "java11",
            java8 = "java8",
            java8al2 = "java8.al2",
            nodejs = "nodejs",
            nodejs10x = "nodejs10.x",
            nodejs12x = "nodejs12.x",
            nodejs14x = "nodejs14.x",
            nodejs16x = "nodejs16.x",
            nodejs43 = "nodejs4.3",
            nodejs43edge = "nodejs4.3-edge",
            nodejs610 = "nodejs6.10",
            nodejs810 = "nodejs8.10",
            provided = "provided",
            providedal2 = "provided.al2",
            python27 = "python2.7",
            python36 = "python3.6",
            python37 = "python3.7",
            python38 = "python3.8",
            python39 = "python3.9",
            ruby25 = "ruby2.5",
            ruby27 = "ruby2.7"
    }
    export enum TracingMode {
            Active = "Active",
            PassThrough = "PassThrough"
    }
    /**
        * <p>The function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html">X-Ray</a> tracing configuration.
        *       To sample and record incoming requests, set <code>Mode</code> to <code>Active</code>.</p>
        */
    export interface TracingConfig {
            /**
                * <p>The tracing mode.</p>
                */
            Mode?: TracingMode | string;
    }
    export namespace TracingConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TracingConfig) => any;
    }
    /**
        * <p>The VPC security groups and subnets that are attached to a Lambda function. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html">VPC Settings</a>.</p>
        */
    export interface VpcConfig {
            /**
                * <p>A list of VPC subnet IDs.</p>
                */
            SubnetIds?: string[];
            /**
                * <p>A list of VPC security groups IDs.</p>
                */
            SecurityGroupIds?: string[];
    }
    export namespace VpcConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VpcConfig) => any;
    }
    export interface CreateFunctionRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>The identifier of the function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime</a>. Runtime is required if the deployment package is a .zip file archive.
                *         </p>
                */
            Runtime?: Runtime | string;
            /**
                * <p>The Amazon Resource Name (ARN) of the function's execution role.</p>
                */
            Role: string | undefined;
            /**
                * <p>The name of the method within your code that Lambda calls to execute your function.
                * Handler is required if the deployment package is a .zip file archive. The format includes the
                *       file name. It can also include namespaces and other qualifiers, depending on the runtime. For more information,
                *       see <a href="https://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html">Programming Model</a>.</p>
                */
            Handler?: string;
            /**
                * <p>The code for the function.</p>
                */
            Code: FunctionCode | undefined;
            /**
                * <p>A description of the function.</p>
                */
            Description?: string;
            /**
                * <p>The amount of time (in seconds) that Lambda allows a function to run before stopping it. The default is 3 seconds. The
                *       maximum allowed value is 900 seconds. For additional information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/runtimes-context.html">Lambda execution environment</a>.</p>
                */
            Timeout?: number;
            /**
                * <p>The amount of  <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-memory.html">memory available to the function</a> at runtime.
                *       Increasing the function memory also increases its CPU allocation. The default value is 128 MB. The value can be any multiple of 1 MB.</p>
                */
            MemorySize?: number;
            /**
                * <p>Set to true to publish the first version of the function during creation.</p>
                */
            Publish?: boolean;
            /**
                * <p>For network connectivity to Amazon Web Services resources in a VPC, specify a list of security groups and subnets in the VPC.
                *       When you connect a function to a VPC, it can only access resources and the internet through that VPC. For more
                *       information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html">VPC Settings</a>.</p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>The type of deployment package. Set to <code>Image</code> for container image and set <code>Zip</code> for ZIP archive.</p>
                */
            PackageType?: PackageType | string;
            /**
                * <p>A dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events
                *       when they fail processing. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq">Dead Letter Queues</a>.</p>
                */
            DeadLetterConfig?: DeadLetterConfig;
            /**
                * <p>Environment variables that are accessible from function code during execution.</p>
                */
            Environment?: Environment;
            /**
                * <p>The ARN of the Amazon Web Services Key Management Service (KMS) key that's used to encrypt your function's environment
                *       variables. If it's not provided, Lambda uses a default service key.</p>
                */
            KMSKeyArn?: string;
            /**
                * <p>Set <code>Mode</code> to <code>Active</code> to sample and trace a subset of incoming requests with
                * <a href="https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html">X-Ray</a>.</p>
                */
            TracingConfig?: TracingConfig;
            /**
                * <p>A list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a> to apply to the
                *       function.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>A list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">function layers</a>
                *       to add to the function's execution environment. Specify each layer by its ARN, including the version.</p>
                */
            Layers?: string[];
            /**
                * <p>Connection settings for an Amazon EFS file system.</p>
                */
            FileSystemConfigs?: FileSystemConfig[];
            /**
                * <p>Container image <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-images.html#configuration-images-settings">configuration
                *       values</a> that override the values in the container image Dockerfile.</p>
                */
            ImageConfig?: ImageConfig;
            /**
                * <p>To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration
                * includes a set of signing profiles, which define the trusted publishers for this function.</p>
                */
            CodeSigningConfigArn?: string;
            /**
                * <p>The instruction set architecture that the function supports. Enter a string array with one of the valid values (arm64 or x86_64).
                *      The default value is <code>x86_64</code>.</p>
                */
            Architectures?: (Architecture | string)[];
            /**
                * <p>The size of the function’s /tmp directory in MB. The default value is 512, but can be any whole number between 512 and 10240 MB.</p>
                */
            EphemeralStorage?: EphemeralStorage;
    }
    export namespace CreateFunctionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFunctionRequest) => any;
    }
    /**
        * <p>Error messages for environment variables that couldn't be applied.</p>
        */
    export interface EnvironmentError {
            /**
                * <p>The error code.</p>
                */
            ErrorCode?: string;
            /**
                * <p>The error message.</p>
                */
            Message?: string;
    }
    export namespace EnvironmentError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnvironmentError) => any;
    }
    /**
        * <p>The results of an operation to update or read environment variables. If the operation is successful, the
        *       response contains the environment variables. If it failed, the response contains details about the error.</p>
        */
    export interface EnvironmentResponse {
            /**
                * <p>Environment variable key-value pairs.</p>
                */
            Variables?: Record<string, string>;
            /**
                * <p>Error messages for environment variables that couldn't be applied.</p>
                */
            Error?: EnvironmentError;
    }
    export namespace EnvironmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnvironmentResponse) => any;
    }
    /**
        * <p>Error response to GetFunctionConfiguration.</p>
        */
    export interface ImageConfigError {
            /**
                * <p>Error code.</p>
                */
            ErrorCode?: string;
            /**
                * <p>Error message.</p>
                */
            Message?: string;
    }
    export namespace ImageConfigError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImageConfigError) => any;
    }
    /**
        * <p>Response to GetFunctionConfiguration request.</p>
        */
    export interface ImageConfigResponse {
            /**
                * <p>Configuration values that override the container image Dockerfile.</p>
                */
            ImageConfig?: ImageConfig;
            /**
                * <p>Error response to GetFunctionConfiguration.</p>
                */
            Error?: ImageConfigError;
    }
    export namespace ImageConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImageConfigResponse) => any;
    }
    export enum LastUpdateStatus {
            Failed = "Failed",
            InProgress = "InProgress",
            Successful = "Successful"
    }
    export enum LastUpdateStatusReasonCode {
            EniLimitExceeded = "EniLimitExceeded",
            ImageAccessDenied = "ImageAccessDenied",
            ImageDeleted = "ImageDeleted",
            InsufficientRolePermissions = "InsufficientRolePermissions",
            InternalError = "InternalError",
            InvalidConfiguration = "InvalidConfiguration",
            InvalidImage = "InvalidImage",
            InvalidSecurityGroup = "InvalidSecurityGroup",
            InvalidSubnet = "InvalidSubnet",
            SubnetOutOfIPAddresses = "SubnetOutOfIPAddresses"
    }
    /**
        * <p>An <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda
        *         layer</a>.</p>
        */
    export interface Layer {
            /**
                * <p>The Amazon Resource Name (ARN) of the function layer.</p>
                */
            Arn?: string;
            /**
                * <p>The size of the layer archive in bytes.</p>
                */
            CodeSize?: number;
            /**
                * <p>The Amazon Resource Name (ARN) for a signing profile version.</p>
                */
            SigningProfileVersionArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN)  of a signing job.</p>
                */
            SigningJobArn?: string;
    }
    export namespace Layer {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Layer) => any;
    }
    export enum State {
            Active = "Active",
            Failed = "Failed",
            Inactive = "Inactive",
            Pending = "Pending"
    }
    export enum StateReasonCode {
            Creating = "Creating",
            EniLimitExceeded = "EniLimitExceeded",
            Idle = "Idle",
            ImageAccessDenied = "ImageAccessDenied",
            ImageDeleted = "ImageDeleted",
            InsufficientRolePermissions = "InsufficientRolePermissions",
            InternalError = "InternalError",
            InvalidConfiguration = "InvalidConfiguration",
            InvalidImage = "InvalidImage",
            InvalidSecurityGroup = "InvalidSecurityGroup",
            InvalidSubnet = "InvalidSubnet",
            Restoring = "Restoring",
            SubnetOutOfIPAddresses = "SubnetOutOfIPAddresses"
    }
    /**
        * <p>The function's X-Ray tracing configuration.</p>
        */
    export interface TracingConfigResponse {
            /**
                * <p>The tracing mode.</p>
                */
            Mode?: TracingMode | string;
    }
    export namespace TracingConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TracingConfigResponse) => any;
    }
    /**
        * <p>The VPC security groups and subnets that are attached to a Lambda function.</p>
        */
    export interface VpcConfigResponse {
            /**
                * <p>A list of VPC subnet IDs.</p>
                */
            SubnetIds?: string[];
            /**
                * <p>A list of VPC security groups IDs.</p>
                */
            SecurityGroupIds?: string[];
            /**
                * <p>The ID of the VPC.</p>
                */
            VpcId?: string;
    }
    export namespace VpcConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VpcConfigResponse) => any;
    }
    /**
        * <p>Details about a function's configuration.</p>
        */
    export interface FunctionConfiguration {
            /**
                * <p>The name of the function.</p>
                */
            FunctionName?: string;
            /**
                * <p>The function's Amazon Resource Name (ARN).</p>
                */
            FunctionArn?: string;
            /**
                * <p>The runtime environment for the Lambda function.</p>
                */
            Runtime?: Runtime | string;
            /**
                * <p>The function's execution role.</p>
                */
            Role?: string;
            /**
                * <p>The function that Lambda calls to begin executing your function.</p>
                */
            Handler?: string;
            /**
                * <p>The size of the function's deployment package, in bytes.</p>
                */
            CodeSize?: number;
            /**
                * <p>The function's description.</p>
                */
            Description?: string;
            /**
                * <p>The amount of time in seconds that Lambda allows a function to run before stopping it.</p>
                */
            Timeout?: number;
            /**
                * <p>The amount of memory available to the function at runtime. </p>
                */
            MemorySize?: number;
            /**
                * <p>The date and time that the function was last updated, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).</p>
                */
            LastModified?: string;
            /**
                * <p>The SHA256 hash of the function's deployment package.</p>
                */
            CodeSha256?: string;
            /**
                * <p>The version of the Lambda function.</p>
                */
            Version?: string;
            /**
                * <p>The function's networking configuration.</p>
                */
            VpcConfig?: VpcConfigResponse;
            /**
                * <p>The function's dead letter queue.</p>
                */
            DeadLetterConfig?: DeadLetterConfig;
            /**
                * <p>The function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html">environment variables</a>.</p>
                */
            Environment?: EnvironmentResponse;
            /**
                * <p>The KMS key that's used to encrypt the function's environment variables. This key is only returned if you've
                *       configured a customer managed key.</p>
                */
            KMSKeyArn?: string;
            /**
                * <p>The function's X-Ray tracing configuration.</p>
                */
            TracingConfig?: TracingConfigResponse;
            /**
                * <p>For Lambda@Edge functions, the ARN of the main function.</p>
                */
            MasterArn?: string;
            /**
                * <p>The latest updated revision of the function or alias.</p>
                */
            RevisionId?: string;
            /**
                * <p>The function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">
                *       layers</a>.</p>
                */
            Layers?: Layer[];
            /**
                * <p>The current state of the function. When the state is <code>Inactive</code>, you can reactivate the function by
                *       invoking it.</p>
                */
            State?: State | string;
            /**
                * <p>The reason for the function's current state.</p>
                */
            StateReason?: string;
            /**
                * <p>The reason code for the function's current state. When the code is <code>Creating</code>, you can't invoke or
                *       modify the function.</p>
                */
            StateReasonCode?: StateReasonCode | string;
            /**
                * <p>The status of the last update that was performed on the function. This is first set to <code>Successful</code>
                *       after function creation completes.</p>
                */
            LastUpdateStatus?: LastUpdateStatus | string;
            /**
                * <p>The reason for the last update that was performed on the function.</p>
                */
            LastUpdateStatusReason?: string;
            /**
                * <p>The reason code for the last update that was performed on the function.</p>
                */
            LastUpdateStatusReasonCode?: LastUpdateStatusReasonCode | string;
            /**
                * <p>Connection settings for an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-filesystem.html">Amazon EFS file system</a>.</p>
                */
            FileSystemConfigs?: FileSystemConfig[];
            /**
                * <p>The type of deployment package. Set to <code>Image</code> for container image and set <code>Zip</code> for .zip file archive.</p>
                */
            PackageType?: PackageType | string;
            /**
                * <p>The function's image configuration values.</p>
                */
            ImageConfigResponse?: ImageConfigResponse;
            /**
                * <p>The ARN of the signing profile version.</p>
                */
            SigningProfileVersionArn?: string;
            /**
                * <p>The ARN of the signing job.</p>
                */
            SigningJobArn?: string;
            /**
                * <p>The instruction set architecture that the function supports. Architecture is a string array with one of the
                *       valid values. The default architecture value is <code>x86_64</code>.</p>
                */
            Architectures?: (Architecture | string)[];
            /**
                * <p>The size of the function’s /tmp directory in MB. The default value is 512, but can be any whole number between 512 and 10240 MB.</p>
                */
            EphemeralStorage?: EphemeralStorage;
    }
    export namespace FunctionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FunctionConfiguration) => any;
    }
    /**
        * <p>The code signature failed the integrity check. Lambda always blocks deployment if the integrity check
        *       fails, even if code signing policy is set to WARN.</p>
        */
    export class InvalidCodeSignatureException extends __BaseException {
            readonly name: "InvalidCodeSignatureException";
            readonly $fault: "client";
            Type?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidCodeSignatureException, __BaseException>);
    }
    /**
        * <p>The <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">cross-origin resource sharing
        *         (CORS)</a> settings for your Lambda function URL. Use CORS to grant access to your function URL
        *       from any origin. You can also use CORS to control access for specific HTTP headers and methods in requests to your
        *       function URL.</p>
        */
    export interface Cors {
            /**
                * <p>Whether to allow cookies or other credentials in requests to your function URL. The default is
                *         <code>false</code>.</p>
                */
            AllowCredentials?: boolean;
            /**
                * <p>The HTTP headers that origins can include in requests to your function URL. For example: <code>Date</code>, <code>Keep-Alive</code>,
                *       <code>X-Custom-Header</code>.</p>
                */
            AllowHeaders?: string[];
            /**
                * <p>The HTTP methods that are allowed when calling your function URL. For example: <code>GET</code>, <code>POST</code>, <code>DELETE</code>,
                *       or the wildcard character (<code>*</code>).</p>
                */
            AllowMethods?: string[];
            /**
                * <p>The origins that can access your function URL. You can list any number of specific origins, separated by a comma. For example:
                *       <code>https://www.example.com</code>, <code>http://localhost:60905</code>.</p>
                *          <p>Alternatively, you can grant access to all origins using the wildcard character (<code>*</code>).</p>
                */
            AllowOrigins?: string[];
            /**
                * <p>The HTTP headers in your function response that you want to expose to origins that call your function URL. For example:
                *       <code>Date</code>, <code>Keep-Alive</code>, <code>X-Custom-Header</code>.</p>
                */
            ExposeHeaders?: string[];
            /**
                * <p>The maximum amount of time, in seconds, that web browsers can cache results of a preflight request. By
                *       default, this is set to <code>0</code>, which means that the browser doesn't cache results.</p>
                */
            MaxAge?: number;
    }
    export namespace Cors {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Cors) => any;
    }
    export interface CreateFunctionUrlConfigRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>The alias name.</p>
                */
            Qualifier?: string;
            /**
                * <p>The type of authentication that your function URL uses. Set to <code>AWS_IAM</code> if you want to restrict access to authenticated
                *   <code>IAM</code> users only. Set to <code>NONE</code> if you want to bypass IAM authentication to create a public endpoint. For more information,
                *   see <a href="https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html"> Security and auth model for Lambda function URLs</a>.</p>
                */
            AuthType: FunctionUrlAuthType | string | undefined;
            /**
                * <p>The <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">cross-origin resource sharing (CORS)</a> settings
                *   for your function URL.</p>
                */
            Cors?: Cors;
    }
    export namespace CreateFunctionUrlConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFunctionUrlConfigRequest) => any;
    }
    export interface CreateFunctionUrlConfigResponse {
            /**
                * <p>The HTTP URL endpoint for your function.</p>
                */
            FunctionUrl: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of your function.</p>
                */
            FunctionArn: string | undefined;
            /**
                * <p>The type of authentication that your function URL uses. Set to <code>AWS_IAM</code> if you want to restrict access to authenticated
                *   <code>IAM</code> users only. Set to <code>NONE</code> if you want to bypass IAM authentication to create a public endpoint. For more information,
                *   see <a href="https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html"> Security and auth model for Lambda function URLs</a>.</p>
                */
            AuthType: FunctionUrlAuthType | string | undefined;
            /**
                * <p>The <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">cross-origin resource sharing (CORS)</a> settings
                *   for your function URL.</p>
                */
            Cors?: Cors;
            /**
                * <p>When the function URL was created, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).</p>
                */
            CreationTime: string | undefined;
    }
    export namespace CreateFunctionUrlConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFunctionUrlConfigResponse) => any;
    }
    export interface DeleteAliasRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>The name of the alias.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteAliasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAliasRequest) => any;
    }
    export interface DeleteCodeSigningConfigRequest {
            /**
                * <p>The The Amazon Resource Name (ARN) of the code signing configuration.</p>
                */
            CodeSigningConfigArn: string | undefined;
    }
    export namespace DeleteCodeSigningConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCodeSigningConfigRequest) => any;
    }
    export interface DeleteCodeSigningConfigResponse {
    }
    export namespace DeleteCodeSigningConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCodeSigningConfigResponse) => any;
    }
    export interface DeleteEventSourceMappingRequest {
            /**
                * <p>The identifier of the event source mapping.</p>
                */
            UUID: string | undefined;
    }
    export namespace DeleteEventSourceMappingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEventSourceMappingRequest) => any;
    }
    /**
        * <p>The operation conflicts with the resource's availability. For example, you attempted to update an EventSource
        *       Mapping in CREATING, or tried to delete a EventSource mapping currently in the UPDATING state.</p>
        */
    export class ResourceInUseException extends __BaseException {
            readonly name: "ResourceInUseException";
            readonly $fault: "client";
            Type?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceInUseException, __BaseException>);
    }
    export interface DeleteFunctionRequest {
            /**
                * <p>The name of the Lambda function or version.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:1</code> (with version).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN.
                *       If you specify only the function name, it is limited to 64 characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>Specify a version to delete. You can't delete a version that's referenced by an alias.</p>
                */
            Qualifier?: string;
    }
    export namespace DeleteFunctionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFunctionRequest) => any;
    }
    export interface DeleteFunctionCodeSigningConfigRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
    }
    export namespace DeleteFunctionCodeSigningConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFunctionCodeSigningConfigRequest) => any;
    }
    export interface DeleteFunctionConcurrencyRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
    }
    export namespace DeleteFunctionConcurrencyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFunctionConcurrencyRequest) => any;
    }
    export interface DeleteFunctionEventInvokeConfigRequest {
            /**
                * <p>The name of the Lambda function, version, or alias.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN.
                *       If you specify only the function name, it is limited to 64 characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>A version number or alias name.</p>
                */
            Qualifier?: string;
    }
    export namespace DeleteFunctionEventInvokeConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFunctionEventInvokeConfigRequest) => any;
    }
    export interface DeleteFunctionUrlConfigRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>The alias name.</p>
                */
            Qualifier?: string;
    }
    export namespace DeleteFunctionUrlConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFunctionUrlConfigRequest) => any;
    }
    export interface DeleteLayerVersionRequest {
            /**
                * <p>The name or Amazon Resource Name (ARN) of the layer.</p>
                */
            LayerName: string | undefined;
            /**
                * <p>The version number.</p>
                */
            VersionNumber: number | undefined;
    }
    export namespace DeleteLayerVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLayerVersionRequest) => any;
    }
    export interface DeleteProvisionedConcurrencyConfigRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>The version number or alias name.</p>
                */
            Qualifier: string | undefined;
    }
    export namespace DeleteProvisionedConcurrencyConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteProvisionedConcurrencyConfigRequest) => any;
    }
    export interface GetAccountSettingsRequest {
    }
    export namespace GetAccountSettingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAccountSettingsRequest) => any;
    }
    export interface GetAccountSettingsResponse {
            /**
                * <p>Limits that are related to concurrency and code storage.</p>
                */
            AccountLimit?: AccountLimit;
            /**
                * <p>The number of functions and amount of storage in use.</p>
                */
            AccountUsage?: AccountUsage;
    }
    export namespace GetAccountSettingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAccountSettingsResponse) => any;
    }
    export interface GetAliasRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>The name of the alias.</p>
                */
            Name: string | undefined;
    }
    export namespace GetAliasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAliasRequest) => any;
    }
    export interface GetCodeSigningConfigRequest {
            /**
                * <p>The The Amazon Resource Name (ARN) of the code signing configuration. </p>
                */
            CodeSigningConfigArn: string | undefined;
    }
    export namespace GetCodeSigningConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCodeSigningConfigRequest) => any;
    }
    export interface GetCodeSigningConfigResponse {
            /**
                * <p>The code signing configuration</p>
                */
            CodeSigningConfig: CodeSigningConfig | undefined;
    }
    export namespace GetCodeSigningConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCodeSigningConfigResponse) => any;
    }
    export interface GetEventSourceMappingRequest {
            /**
                * <p>The identifier of the event source mapping.</p>
                */
            UUID: string | undefined;
    }
    export namespace GetEventSourceMappingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEventSourceMappingRequest) => any;
    }
    export interface GetFunctionRequest {
            /**
                * <p>The name of the Lambda function, version, or alias.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN.
                *       If you specify only the function name, it is limited to 64 characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>Specify a version or alias to get details about a published version of the function.</p>
                */
            Qualifier?: string;
    }
    export namespace GetFunctionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFunctionRequest) => any;
    }
    /**
        * <p>Details about a function's deployment package.</p>
        */
    export interface FunctionCodeLocation {
            /**
                * <p>The service that's hosting the file.</p>
                */
            RepositoryType?: string;
            /**
                * <p>A presigned URL that you can use to download the deployment package.</p>
                */
            Location?: string;
            /**
                * <p>URI of a container image in the Amazon ECR registry.</p>
                */
            ImageUri?: string;
            /**
                * <p>The resolved URI for the image.</p>
                */
            ResolvedImageUri?: string;
    }
    export namespace FunctionCodeLocation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FunctionCodeLocation) => any;
    }
    export interface Concurrency {
            /**
                * <p>The number of concurrent executions that are reserved for this function. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-concurrency.html">Managing Concurrency</a>.</p>
                */
            ReservedConcurrentExecutions?: number;
    }
    export namespace Concurrency {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Concurrency) => any;
    }
    export interface GetFunctionResponse {
            /**
                * <p>The configuration of the function or version.</p>
                */
            Configuration?: FunctionConfiguration;
            /**
                * <p>The deployment package of the function or version.</p>
                */
            Code?: FunctionCodeLocation;
            /**
                * <p>The function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a>.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html">reserved
                *         concurrency</a>.</p>
                */
            Concurrency?: Concurrency;
    }
    export namespace GetFunctionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFunctionResponse) => any;
    }
    export interface GetFunctionCodeSigningConfigRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
    }
    export namespace GetFunctionCodeSigningConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFunctionCodeSigningConfigRequest) => any;
    }
    export interface GetFunctionCodeSigningConfigResponse {
            /**
                * <p>The The Amazon Resource Name (ARN) of the code signing configuration.</p>
                */
            CodeSigningConfigArn: string | undefined;
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
    }
    export namespace GetFunctionCodeSigningConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFunctionCodeSigningConfigResponse) => any;
    }
    export interface GetFunctionConcurrencyRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
    }
    export namespace GetFunctionConcurrencyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFunctionConcurrencyRequest) => any;
    }
    export interface GetFunctionConcurrencyResponse {
            /**
                * <p>The number of simultaneous executions that are reserved for the function.</p>
                */
            ReservedConcurrentExecutions?: number;
    }
    export namespace GetFunctionConcurrencyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFunctionConcurrencyResponse) => any;
    }
    export interface GetFunctionConfigurationRequest {
            /**
                * <p>The name of the Lambda function, version, or alias.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN.
                *       If you specify only the function name, it is limited to 64 characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>Specify a version or alias to get details about a published version of the function.</p>
                */
            Qualifier?: string;
    }
    export namespace GetFunctionConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFunctionConfigurationRequest) => any;
    }
    export interface FunctionEventInvokeConfig {
            /**
                * <p>The date and time that the configuration was last updated.</p>
                */
            LastModified?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the function.</p>
                */
            FunctionArn?: string;
            /**
                * <p>The maximum number of times to retry when the function returns an error.</p>
                */
            MaximumRetryAttempts?: number;
            /**
                * <p>The maximum age of a request that Lambda sends to a function for processing.</p>
                */
            MaximumEventAgeInSeconds?: number;
            /**
                * <p>A destination for events after they have been sent to a function for processing.</p>
                *          <p class="title">
                *             <b>Destinations</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function</b> - The Amazon Resource Name (ARN) of a Lambda function.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Queue</b> - The ARN of an SQS queue.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Topic</b> - The ARN of an SNS topic.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Event Bus</b> - The ARN of an Amazon EventBridge event bus.</p>
                *             </li>
                *          </ul>
                */
            DestinationConfig?: DestinationConfig;
    }
    export namespace FunctionEventInvokeConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FunctionEventInvokeConfig) => any;
    }
    export interface GetFunctionEventInvokeConfigRequest {
            /**
                * <p>The name of the Lambda function, version, or alias.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN.
                *       If you specify only the function name, it is limited to 64 characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>A version number or alias name.</p>
                */
            Qualifier?: string;
    }
    export namespace GetFunctionEventInvokeConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFunctionEventInvokeConfigRequest) => any;
    }
    export interface GetFunctionUrlConfigRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>The alias name.</p>
                */
            Qualifier?: string;
    }
    export namespace GetFunctionUrlConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFunctionUrlConfigRequest) => any;
    }
    export interface GetFunctionUrlConfigResponse {
            /**
                * <p>The HTTP URL endpoint for your function.</p>
                */
            FunctionUrl: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of your function.</p>
                */
            FunctionArn: string | undefined;
            /**
                * <p>The type of authentication that your function URL uses. Set to <code>AWS_IAM</code> if you want to restrict access to authenticated
                *   <code>IAM</code> users only. Set to <code>NONE</code> if you want to bypass IAM authentication to create a public endpoint. For more information,
                *   see <a href="https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html"> Security and auth model for Lambda function URLs</a>.</p>
                */
            AuthType: FunctionUrlAuthType | string | undefined;
            /**
                * <p>The <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">cross-origin resource sharing (CORS)</a> settings
                *   for your function URL.</p>
                */
            Cors?: Cors;
            /**
                * <p>When the function URL was created, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).</p>
                */
            CreationTime: string | undefined;
            /**
                * <p>When the function URL configuration was last updated, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).</p>
                */
            LastModifiedTime: string | undefined;
    }
    export namespace GetFunctionUrlConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFunctionUrlConfigResponse) => any;
    }
    export interface GetLayerVersionRequest {
            /**
                * <p>The name or Amazon Resource Name (ARN) of the layer.</p>
                */
            LayerName: string | undefined;
            /**
                * <p>The version number.</p>
                */
            VersionNumber: number | undefined;
    }
    export namespace GetLayerVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLayerVersionRequest) => any;
    }
    /**
        * <p>Details about a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda
        *         layer</a>.</p>
        */
    export interface LayerVersionContentOutput {
            /**
                * <p>A link to the layer archive in Amazon S3 that is valid for 10 minutes.</p>
                */
            Location?: string;
            /**
                * <p>The SHA-256 hash of the layer archive.</p>
                */
            CodeSha256?: string;
            /**
                * <p>The size of the layer archive in bytes.</p>
                */
            CodeSize?: number;
            /**
                * <p>The Amazon Resource Name (ARN) for a signing profile version.</p>
                */
            SigningProfileVersionArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN)  of a signing job.</p>
                */
            SigningJobArn?: string;
    }
    export namespace LayerVersionContentOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LayerVersionContentOutput) => any;
    }
    export interface GetLayerVersionResponse {
            /**
                * <p>Details about the layer version.</p>
                */
            Content?: LayerVersionContentOutput;
            /**
                * <p>The ARN of the layer.</p>
                */
            LayerArn?: string;
            /**
                * <p>The ARN of the layer version.</p>
                */
            LayerVersionArn?: string;
            /**
                * <p>The description of the version.</p>
                */
            Description?: string;
            /**
                * <p>The date that the layer version was created, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).</p>
                */
            CreatedDate?: string;
            /**
                * <p>The version number.</p>
                */
            Version?: number;
            /**
                * <p>The layer's compatible runtimes.</p>
                */
            CompatibleRuntimes?: (Runtime | string)[];
            /**
                * <p>The layer's software license.</p>
                */
            LicenseInfo?: string;
            /**
                * <p>A list of compatible
                * <a href="https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html">instruction set architectures</a>.</p>
                */
            CompatibleArchitectures?: (Architecture | string)[];
    }
    export namespace GetLayerVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLayerVersionResponse) => any;
    }
    export interface GetLayerVersionByArnRequest {
            /**
                * <p>The ARN of the layer version.</p>
                */
            Arn: string | undefined;
    }
    export namespace GetLayerVersionByArnRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLayerVersionByArnRequest) => any;
    }
    export interface GetLayerVersionPolicyRequest {
            /**
                * <p>The name or Amazon Resource Name (ARN) of the layer.</p>
                */
            LayerName: string | undefined;
            /**
                * <p>The version number.</p>
                */
            VersionNumber: number | undefined;
    }
    export namespace GetLayerVersionPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLayerVersionPolicyRequest) => any;
    }
    export interface GetLayerVersionPolicyResponse {
            /**
                * <p>The policy document.</p>
                */
            Policy?: string;
            /**
                * <p>A unique identifier for the current revision of the policy.</p>
                */
            RevisionId?: string;
    }
    export namespace GetLayerVersionPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLayerVersionPolicyResponse) => any;
    }
    export interface GetPolicyRequest {
            /**
                * <p>The name of the Lambda function, version, or alias.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN.
                *       If you specify only the function name, it is limited to 64 characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>Specify a version or alias to get the policy for that resource.</p>
                */
            Qualifier?: string;
    }
    export namespace GetPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPolicyRequest) => any;
    }
    export interface GetPolicyResponse {
            /**
                * <p>The resource-based policy.</p>
                */
            Policy?: string;
            /**
                * <p>A unique identifier for the current revision of the policy.</p>
                */
            RevisionId?: string;
    }
    export namespace GetPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPolicyResponse) => any;
    }
    export interface GetProvisionedConcurrencyConfigRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>The version number or alias name.</p>
                */
            Qualifier: string | undefined;
    }
    export namespace GetProvisionedConcurrencyConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetProvisionedConcurrencyConfigRequest) => any;
    }
    export enum ProvisionedConcurrencyStatusEnum {
            FAILED = "FAILED",
            IN_PROGRESS = "IN_PROGRESS",
            READY = "READY"
    }
    export interface GetProvisionedConcurrencyConfigResponse {
            /**
                * <p>The amount of provisioned concurrency requested.</p>
                */
            RequestedProvisionedConcurrentExecutions?: number;
            /**
                * <p>The amount of provisioned concurrency available.</p>
                */
            AvailableProvisionedConcurrentExecutions?: number;
            /**
                * <p>The amount of provisioned concurrency allocated.</p>
                */
            AllocatedProvisionedConcurrentExecutions?: number;
            /**
                * <p>The status of the allocation process.</p>
                */
            Status?: ProvisionedConcurrencyStatusEnum | string;
            /**
                * <p>For failed allocations, the reason that provisioned concurrency could not be allocated.</p>
                */
            StatusReason?: string;
            /**
                * <p>The date and time that a user last updated the configuration, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601 format</a>.</p>
                */
            LastModified?: string;
    }
    export namespace GetProvisionedConcurrencyConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetProvisionedConcurrencyConfigResponse) => any;
    }
    /**
        * <p>The specified configuration does not exist.</p>
        */
    export class ProvisionedConcurrencyConfigNotFoundException extends __BaseException {
            readonly name: "ProvisionedConcurrencyConfigNotFoundException";
            readonly $fault: "client";
            Type?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ProvisionedConcurrencyConfigNotFoundException, __BaseException>);
    }
    /**
        * <p>Need additional permissions to configure VPC settings.</p>
        */
    export class EC2AccessDeniedException extends __BaseException {
            readonly name: "EC2AccessDeniedException";
            readonly $fault: "server";
            Type?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EC2AccessDeniedException, __BaseException>);
    }
    /**
        * <p>Lambda was throttled by Amazon EC2 during Lambda function initialization using the execution role provided
        *       for the Lambda function.</p>
        */
    export class EC2ThrottledException extends __BaseException {
            readonly name: "EC2ThrottledException";
            readonly $fault: "server";
            Type?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EC2ThrottledException, __BaseException>);
    }
    /**
        * <p>Lambda received an unexpected EC2 client exception while setting up for the Lambda function.</p>
        */
    export class EC2UnexpectedException extends __BaseException {
            readonly name: "EC2UnexpectedException";
            readonly $fault: "server";
            Type?: string;
            Message?: string;
            EC2ErrorCode?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EC2UnexpectedException, __BaseException>);
    }
    /**
        * <p>An error occurred when reading from or writing to a connected file system.</p>
        */
    export class EFSIOException extends __BaseException {
            readonly name: "EFSIOException";
            readonly $fault: "client";
            Type?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EFSIOException, __BaseException>);
    }
    /**
        * <p>The function couldn't make a network connection to the configured file system.</p>
        */
    export class EFSMountConnectivityException extends __BaseException {
            readonly name: "EFSMountConnectivityException";
            readonly $fault: "client";
            Type?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EFSMountConnectivityException, __BaseException>);
    }
    /**
        * <p>The function couldn't mount the configured file system due to a permission or configuration issue.</p>
        */
    export class EFSMountFailureException extends __BaseException {
            readonly name: "EFSMountFailureException";
            readonly $fault: "client";
            Type?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EFSMountFailureException, __BaseException>);
    }
    /**
        * <p>The function was able to make a network connection to the configured file system, but the mount operation
        *       timed out.</p>
        */
    export class EFSMountTimeoutException extends __BaseException {
            readonly name: "EFSMountTimeoutException";
            readonly $fault: "client";
            Type?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EFSMountTimeoutException, __BaseException>);
    }
    /**
        * <p>Lambda was not able to create an elastic network interface in the VPC, specified as part of Lambda
        *       function configuration, because the limit for network interfaces has been reached.</p>
        */
    export class ENILimitReachedException extends __BaseException {
            readonly name: "ENILimitReachedException";
            readonly $fault: "server";
            Type?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ENILimitReachedException, __BaseException>);
    }
    /**
        * <p>The request body could not be parsed as JSON.</p>
        */
    export class InvalidRequestContentException extends __BaseException {
            readonly name: "InvalidRequestContentException";
            readonly $fault: "client";
            /**
                * <p>The exception type.</p>
                */
            Type?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRequestContentException, __BaseException>);
    }
    /**
        * <p>The runtime or runtime version specified is not supported.</p>
        */
    export class InvalidRuntimeException extends __BaseException {
            readonly name: "InvalidRuntimeException";
            readonly $fault: "server";
            Type?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRuntimeException, __BaseException>);
    }
    /**
        * <p>The Security Group ID provided in the Lambda function VPC configuration is invalid.</p>
        */
    export class InvalidSecurityGroupIDException extends __BaseException {
            readonly name: "InvalidSecurityGroupIDException";
            readonly $fault: "server";
            Type?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSecurityGroupIDException, __BaseException>);
    }
    /**
        * <p>The Subnet ID provided in the Lambda function VPC configuration is invalid.</p>
        */
    export class InvalidSubnetIDException extends __BaseException {
            readonly name: "InvalidSubnetIDException";
            readonly $fault: "server";
            Type?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSubnetIDException, __BaseException>);
    }
    /**
        * <p>Lambda could not unzip the deployment package.</p>
        */
    export class InvalidZipFileException extends __BaseException {
            readonly name: "InvalidZipFileException";
            readonly $fault: "server";
            Type?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidZipFileException, __BaseException>);
    }
    export enum InvocationType {
            DryRun = "DryRun",
            Event = "Event",
            RequestResponse = "RequestResponse"
    }
    export enum LogType {
            None = "None",
            Tail = "Tail"
    }
    export interface InvocationRequest {
            /**
                * <p>The name of the Lambda function, version, or alias.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN.
                *       If you specify only the function name, it is limited to 64 characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>Choose from the following options.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>RequestResponse</code> (default) - Invoke the function synchronously. Keep the connection open until
                *           the function returns a response or times out. The API response includes the function response and additional
                *           data.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Event</code> - Invoke the function asynchronously. Send events that fail multiple times to the
                *           function's dead-letter queue (if it's configured). The API response only includes a status code.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DryRun</code> - Validate parameter values and verify that the user or role has permission to invoke
                *           the function.</p>
                *             </li>
                *          </ul>
                */
            InvocationType?: InvocationType | string;
            /**
                * <p>Set to <code>Tail</code> to include the execution log in the response. Applies to synchronously invoked functions only.</p>
                */
            LogType?: LogType | string;
            /**
                * <p>Up to 3583 bytes of base64-encoded data about the invoking client to pass to the function in the context
                *       object.</p>
                */
            ClientContext?: string;
            /**
                * <p>The JSON that you want to provide to your Lambda function as input.</p>
                *          <p>You can enter the JSON directly. For example, <code>--payload '{ "key": "value" }'</code>.
                *       You can also specify a file path. For example, <code>--payload file://payload.json</code>.
                *     </p>
                */
            Payload?: Uint8Array;
            /**
                * <p>Specify a version or alias to invoke a published version of the function.</p>
                */
            Qualifier?: string;
    }
    export namespace InvocationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InvocationRequest) => any;
    }
    export interface InvocationResponse {
            /**
                * <p>The HTTP status code is in the 200 range for a successful request. For the <code>RequestResponse</code>
                *       invocation type, this status code is 200. For the <code>Event</code> invocation type, this status code is 202. For
                *       the <code>DryRun</code> invocation type, the status code is 204.</p>
                */
            StatusCode?: number;
            /**
                * <p>If present, indicates that an error occurred during function execution. Details about the error are included
                *       in the response payload.</p>
                */
            FunctionError?: string;
            /**
                * <p>The last 4 KB of the execution log, which is base64 encoded.</p>
                */
            LogResult?: string;
            /**
                * <p>The response from the function, or an error object.</p>
                */
            Payload?: Uint8Array;
            /**
                * <p>The version of the function that executed. When you invoke a function with an alias, this indicates which
                *       version the alias resolved to.</p>
                */
            ExecutedVersion?: string;
    }
    export namespace InvocationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InvocationResponse) => any;
    }
    /**
        * <p>Lambda was unable to decrypt the environment variables because KMS access was denied. Check the Lambda
        *       function's KMS permissions.</p>
        */
    export class KMSAccessDeniedException extends __BaseException {
            readonly name: "KMSAccessDeniedException";
            readonly $fault: "server";
            Type?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KMSAccessDeniedException, __BaseException>);
    }
    /**
        * <p>Lambda was unable to decrypt the environment variables because the KMS key used is disabled. Check the Lambda
        *       function's KMS key settings.</p>
        */
    export class KMSDisabledException extends __BaseException {
            readonly name: "KMSDisabledException";
            readonly $fault: "server";
            Type?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KMSDisabledException, __BaseException>);
    }
    /**
        * <p>Lambda was unable to decrypt the environment variables because the KMS key used is in an invalid state for
        *       Decrypt. Check the function's KMS key settings.</p>
        */
    export class KMSInvalidStateException extends __BaseException {
            readonly name: "KMSInvalidStateException";
            readonly $fault: "server";
            Type?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KMSInvalidStateException, __BaseException>);
    }
    /**
        * <p>Lambda was unable to decrypt the environment variables because the KMS key was not found. Check the function's
        *       KMS key settings. </p>
        */
    export class KMSNotFoundException extends __BaseException {
            readonly name: "KMSNotFoundException";
            readonly $fault: "server";
            Type?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KMSNotFoundException, __BaseException>);
    }
    /**
        * <p>The request payload exceeded the <code>Invoke</code> request body JSON input limit. For more information, see
        *         <a href="https://docs.aws.amazon.com/lambda/latest/dg/limits.html">Limits</a>. </p>
        */
    export class RequestTooLargeException extends __BaseException {
            readonly name: "RequestTooLargeException";
            readonly $fault: "client";
            Type?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RequestTooLargeException, __BaseException>);
    }
    /**
        * <p>The function is inactive and its VPC connection is no longer available. Wait for the VPC connection to
        *       reestablish and try again.</p>
        */
    export class ResourceNotReadyException extends __BaseException {
            readonly name: "ResourceNotReadyException";
            readonly $fault: "server";
            /**
                * <p>The exception type.</p>
                */
            Type?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotReadyException, __BaseException>);
    }
    /**
        * <p>Lambda was not able to set up VPC access for the Lambda function because one or more configured subnets
        *       has no available IP addresses.</p>
        */
    export class SubnetIPAddressLimitReachedException extends __BaseException {
            readonly name: "SubnetIPAddressLimitReachedException";
            readonly $fault: "server";
            Type?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SubnetIPAddressLimitReachedException, __BaseException>);
    }
    /**
        * <p>The content type of the <code>Invoke</code> request body is not JSON.</p>
        */
    export class UnsupportedMediaTypeException extends __BaseException {
            readonly name: "UnsupportedMediaTypeException";
            readonly $fault: "client";
            Type?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedMediaTypeException, __BaseException>);
    }
    export interface InvokeAsyncRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>The JSON that you want to provide to your Lambda function as input.</p>
                */
            InvokeArgs: Readable | ReadableStream | Blob | undefined;
    }
    export namespace InvokeAsyncRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InvokeAsyncRequest) => any;
    }
    /**
        * @deprecated
        *
        * <p>A success response (<code>202 Accepted</code>) indicates that the request is queued for invocation. </p>
        */
    export interface InvokeAsyncResponse {
            /**
                * <p>The status code.</p>
                */
            Status?: number;
    }
    export namespace InvokeAsyncResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InvokeAsyncResponse) => any;
    }
    export interface ListAliasesRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>Specify a function version to only list aliases that invoke that version.</p>
                */
            FunctionVersion?: string;
            /**
                * <p>Specify the pagination token that's returned by a previous request to retrieve the next page of results.</p>
                */
            Marker?: string;
            /**
                * <p>Limit the number of aliases returned.</p>
                */
            MaxItems?: number;
    }
    export namespace ListAliasesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAliasesRequest) => any;
    }
    export interface ListAliasesResponse {
            /**
                * <p>The pagination token that's included if more results are available.</p>
                */
            NextMarker?: string;
            /**
                * <p>A list of aliases.</p>
                */
            Aliases?: AliasConfiguration[];
    }
    export namespace ListAliasesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAliasesResponse) => any;
    }
    export interface ListCodeSigningConfigsRequest {
            /**
                * <p>Specify the pagination token that's returned by a previous request to retrieve the next page of results.</p>
                */
            Marker?: string;
            /**
                * <p>Maximum number of items to return.</p>
                */
            MaxItems?: number;
    }
    export namespace ListCodeSigningConfigsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCodeSigningConfigsRequest) => any;
    }
    export interface ListCodeSigningConfigsResponse {
            /**
                * <p>The pagination token that's included if more results are available.</p>
                */
            NextMarker?: string;
            /**
                * <p>The code signing configurations</p>
                */
            CodeSigningConfigs?: CodeSigningConfig[];
    }
    export namespace ListCodeSigningConfigsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCodeSigningConfigsResponse) => any;
    }
    export interface ListEventSourceMappingsRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the event source.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Amazon Kinesis</b> - The ARN of the data stream or a stream consumer.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Amazon DynamoDB Streams</b> - The ARN of the stream.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Amazon Simple Queue Service</b> - The ARN of the queue.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Amazon Managed Streaming for Apache Kafka</b> - The ARN of the cluster.</p>
                *             </li>
                *          </ul>
                */
            EventSourceArn?: string;
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Version or Alias ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64
                *       characters in length.</p>
                */
            FunctionName?: string;
            /**
                * <p>A pagination token returned by a previous call.</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of event source mappings to return. Note that ListEventSourceMappings returns a maximum of
                *       100 items in each response, even if you set the number higher.</p>
                */
            MaxItems?: number;
    }
    export namespace ListEventSourceMappingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEventSourceMappingsRequest) => any;
    }
    export interface ListEventSourceMappingsResponse {
            /**
                * <p>A pagination token that's returned when the response doesn't contain all event source mappings.</p>
                */
            NextMarker?: string;
            /**
                * <p>A list of event source mappings.</p>
                */
            EventSourceMappings?: EventSourceMappingConfiguration[];
    }
    export namespace ListEventSourceMappingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEventSourceMappingsResponse) => any;
    }
    export interface ListFunctionEventInvokeConfigsRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>Specify the pagination token that's returned by a previous request to retrieve the next page of results.</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of configurations to return.</p>
                */
            MaxItems?: number;
    }
    export namespace ListFunctionEventInvokeConfigsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFunctionEventInvokeConfigsRequest) => any;
    }
    export interface ListFunctionEventInvokeConfigsResponse {
            /**
                * <p>A list of configurations.</p>
                */
            FunctionEventInvokeConfigs?: FunctionEventInvokeConfig[];
            /**
                * <p>The pagination token that's included if more results are available.</p>
                */
            NextMarker?: string;
    }
    export namespace ListFunctionEventInvokeConfigsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFunctionEventInvokeConfigsResponse) => any;
    }
    export enum FunctionVersion {
            ALL = "ALL"
    }
    export interface ListFunctionsRequest {
            /**
                * <p>For Lambda@Edge functions, the Amazon Web Services Region of the master function. For example, <code>us-east-1</code> filters
                *       the list of functions to only include Lambda@Edge functions replicated from a master function in US East (N.
                *       Virginia). If specified, you must set <code>FunctionVersion</code> to <code>ALL</code>.</p>
                */
            MasterRegion?: string;
            /**
                * <p>Set to <code>ALL</code> to include entries for all published versions of each function.</p>
                */
            FunctionVersion?: FunctionVersion | string;
            /**
                * <p>Specify the pagination token that's returned by a previous request to retrieve the next page of results.</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of functions to return in the response. Note that <code>ListFunctions</code> returns a maximum of 50 items in each response,
                *       even if you set the number higher.</p>
                */
            MaxItems?: number;
    }
    export namespace ListFunctionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFunctionsRequest) => any;
    }
    /**
        * <p>A list of Lambda functions.</p>
        */
    export interface ListFunctionsResponse {
            /**
                * <p>The pagination token that's included if more results are available.</p>
                */
            NextMarker?: string;
            /**
                * <p>A list of Lambda functions.</p>
                */
            Functions?: FunctionConfiguration[];
    }
    export namespace ListFunctionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFunctionsResponse) => any;
    }
    export interface ListFunctionsByCodeSigningConfigRequest {
            /**
                * <p>The The Amazon Resource Name (ARN) of the code signing configuration.</p>
                */
            CodeSigningConfigArn: string | undefined;
            /**
                * <p>Specify the pagination token that's returned by a previous request to retrieve the next page of results.</p>
                */
            Marker?: string;
            /**
                * <p>Maximum number of items to return.</p>
                */
            MaxItems?: number;
    }
    export namespace ListFunctionsByCodeSigningConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFunctionsByCodeSigningConfigRequest) => any;
    }
    export interface ListFunctionsByCodeSigningConfigResponse {
            /**
                * <p>The pagination token that's included if more results are available.</p>
                */
            NextMarker?: string;
            /**
                * <p>The function ARNs. </p>
                */
            FunctionArns?: string[];
    }
    export namespace ListFunctionsByCodeSigningConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFunctionsByCodeSigningConfigResponse) => any;
    }
    export interface ListFunctionUrlConfigsRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>Specify the pagination token that's returned by a previous request to retrieve the next page of results.</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of function URLs to return in the response. Note that <code>ListFunctionUrlConfigs</code>
                *       returns a maximum of 50 items in each response, even if you set the number higher.</p>
                */
            MaxItems?: number;
    }
    export namespace ListFunctionUrlConfigsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFunctionUrlConfigsRequest) => any;
    }
    /**
        * <p>Details about a Lambda function URL.</p>
        */
    export interface FunctionUrlConfig {
            /**
                * <p>The HTTP URL endpoint for your function.</p>
                */
            FunctionUrl: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of your function.</p>
                */
            FunctionArn: string | undefined;
            /**
                * <p>When the function URL was created, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).</p>
                */
            CreationTime: string | undefined;
            /**
                * <p>When the function URL configuration was last updated, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).</p>
                */
            LastModifiedTime: string | undefined;
            /**
                * <p>The <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">cross-origin resource sharing (CORS)</a> settings
                *   for your function URL.</p>
                */
            Cors?: Cors;
            /**
                * <p>The type of authentication that your function URL uses. Set to <code>AWS_IAM</code> if you want to restrict access to authenticated
                *   <code>IAM</code> users only. Set to <code>NONE</code> if you want to bypass IAM authentication to create a public endpoint. For more information,
                *   see <a href="https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html"> Security and auth model for Lambda function URLs</a>.</p>
                */
            AuthType: FunctionUrlAuthType | string | undefined;
    }
    export namespace FunctionUrlConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FunctionUrlConfig) => any;
    }
    export interface ListFunctionUrlConfigsResponse {
            /**
                * <p>A list of function URL configurations.</p>
                */
            FunctionUrlConfigs: FunctionUrlConfig[] | undefined;
            /**
                * <p>The pagination token that's included if more results are available.</p>
                */
            NextMarker?: string;
    }
    export namespace ListFunctionUrlConfigsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFunctionUrlConfigsResponse) => any;
    }
    export interface ListLayersRequest {
            /**
                * <p>A runtime identifier. For example, <code>go1.x</code>.</p>
                */
            CompatibleRuntime?: Runtime | string;
            /**
                * <p>A pagination token returned by a previous call.</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of layers to return.</p>
                */
            MaxItems?: number;
            /**
                * <p>The compatible
                * <a href="https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html">instruction set architecture</a>.</p>
                */
            CompatibleArchitecture?: Architecture | string;
    }
    export namespace ListLayersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLayersRequest) => any;
    }
    /**
        * <p>Details about a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda
        *         layer</a>.</p>
        */
    export interface LayerVersionsListItem {
            /**
                * <p>The ARN of the layer version.</p>
                */
            LayerVersionArn?: string;
            /**
                * <p>The version number.</p>
                */
            Version?: number;
            /**
                * <p>The description of the version.</p>
                */
            Description?: string;
            /**
                * <p>The date that the version was created, in ISO 8601 format. For example, <code>2018-11-27T15:10:45.123+0000</code>.</p>
                */
            CreatedDate?: string;
            /**
                * <p>The layer's compatible runtimes.</p>
                */
            CompatibleRuntimes?: (Runtime | string)[];
            /**
                * <p>The layer's open-source license.</p>
                */
            LicenseInfo?: string;
            /**
                * <p>A list of compatible
                *       <a href="https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html">instruction set architectures</a>.</p>
                */
            CompatibleArchitectures?: (Architecture | string)[];
    }
    export namespace LayerVersionsListItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LayerVersionsListItem) => any;
    }
    /**
        * <p>Details about an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda
        *         layer</a>.</p>
        */
    export interface LayersListItem {
            /**
                * <p>The name of the layer.</p>
                */
            LayerName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the function layer.</p>
                */
            LayerArn?: string;
            /**
                * <p>The newest version of the layer.</p>
                */
            LatestMatchingVersion?: LayerVersionsListItem;
    }
    export namespace LayersListItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LayersListItem) => any;
    }
    export interface ListLayersResponse {
            /**
                * <p>A pagination token returned when the response doesn't contain all layers.</p>
                */
            NextMarker?: string;
            /**
                * <p>A list of function layers.</p>
                */
            Layers?: LayersListItem[];
    }
    export namespace ListLayersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLayersResponse) => any;
    }
    export interface ListLayerVersionsRequest {
            /**
                * <p>A runtime identifier. For example, <code>go1.x</code>.</p>
                */
            CompatibleRuntime?: Runtime | string;
            /**
                * <p>The name or Amazon Resource Name (ARN) of the layer.</p>
                */
            LayerName: string | undefined;
            /**
                * <p>A pagination token returned by a previous call.</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of versions to return.</p>
                */
            MaxItems?: number;
            /**
                * <p>The compatible
                * <a href="https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html">instruction set architecture</a>.</p>
                */
            CompatibleArchitecture?: Architecture | string;
    }
    export namespace ListLayerVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLayerVersionsRequest) => any;
    }
    export interface ListLayerVersionsResponse {
            /**
                * <p>A pagination token returned when the response doesn't contain all versions.</p>
                */
            NextMarker?: string;
            /**
                * <p>A list of versions.</p>
                */
            LayerVersions?: LayerVersionsListItem[];
    }
    export namespace ListLayerVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLayerVersionsResponse) => any;
    }
    export interface ListProvisionedConcurrencyConfigsRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>Specify the pagination token that's returned by a previous request to retrieve the next page of results.</p>
                */
            Marker?: string;
            /**
                * <p>Specify a number to limit the number of configurations returned.</p>
                */
            MaxItems?: number;
    }
    export namespace ListProvisionedConcurrencyConfigsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProvisionedConcurrencyConfigsRequest) => any;
    }
    /**
        * <p>Details about the provisioned concurrency configuration for a function alias or version.</p>
        */
    export interface ProvisionedConcurrencyConfigListItem {
            /**
                * <p>The Amazon Resource Name (ARN) of the alias or version.</p>
                */
            FunctionArn?: string;
            /**
                * <p>The amount of provisioned concurrency requested.</p>
                */
            RequestedProvisionedConcurrentExecutions?: number;
            /**
                * <p>The amount of provisioned concurrency available.</p>
                */
            AvailableProvisionedConcurrentExecutions?: number;
            /**
                * <p>The amount of provisioned concurrency allocated.</p>
                */
            AllocatedProvisionedConcurrentExecutions?: number;
            /**
                * <p>The status of the allocation process.</p>
                */
            Status?: ProvisionedConcurrencyStatusEnum | string;
            /**
                * <p>For failed allocations, the reason that provisioned concurrency could not be allocated.</p>
                */
            StatusReason?: string;
            /**
                * <p>The date and time that a user last updated the configuration, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601 format</a>.</p>
                */
            LastModified?: string;
    }
    export namespace ProvisionedConcurrencyConfigListItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProvisionedConcurrencyConfigListItem) => any;
    }
    export interface ListProvisionedConcurrencyConfigsResponse {
            /**
                * <p>A list of provisioned concurrency configurations.</p>
                */
            ProvisionedConcurrencyConfigs?: ProvisionedConcurrencyConfigListItem[];
            /**
                * <p>The pagination token that's included if more results are available.</p>
                */
            NextMarker?: string;
    }
    export namespace ListProvisionedConcurrencyConfigsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProvisionedConcurrencyConfigsResponse) => any;
    }
    export interface ListTagsRequest {
            /**
                * <p>The function's Amazon Resource Name (ARN).
                *       Note: Lambda does not support adding tags to aliases or versions.</p>
                */
            Resource: string | undefined;
    }
    export namespace ListTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsRequest) => any;
    }
    export interface ListTagsResponse {
            /**
                * <p>The function's tags.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListTagsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsResponse) => any;
    }
    export interface ListVersionsByFunctionRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>Specify the pagination token that's returned by a previous request to retrieve the next page of results.</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of versions to return. Note that <code>ListVersionsByFunction</code> returns a maximum of 50 items in each response,
                *       even if you set the number higher.</p>
                */
            MaxItems?: number;
    }
    export namespace ListVersionsByFunctionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListVersionsByFunctionRequest) => any;
    }
    export interface ListVersionsByFunctionResponse {
            /**
                * <p>The pagination token that's included if more results are available.</p>
                */
            NextMarker?: string;
            /**
                * <p>A list of Lambda function versions.</p>
                */
            Versions?: FunctionConfiguration[];
    }
    export namespace ListVersionsByFunctionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListVersionsByFunctionResponse) => any;
    }
    /**
        * <p>A ZIP archive that contains the contents of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda
        *         layer</a>. You can specify either an Amazon S3 location,
        *       or upload a layer archive directly.</p>
        */
    export interface LayerVersionContentInput {
            /**
                * <p>The Amazon S3 bucket of the layer archive.</p>
                */
            S3Bucket?: string;
            /**
                * <p>The Amazon S3 key of the layer archive.</p>
                */
            S3Key?: string;
            /**
                * <p>For versioned objects, the version of the layer archive object to use.</p>
                */
            S3ObjectVersion?: string;
            /**
                * <p>The base64-encoded contents of the layer archive. Amazon Web Services SDK and Amazon Web Services CLI clients handle the encoding for
                *       you.</p>
                */
            ZipFile?: Uint8Array;
    }
    export namespace LayerVersionContentInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LayerVersionContentInput) => any;
    }
    export interface PublishLayerVersionRequest {
            /**
                * <p>The name or Amazon Resource Name (ARN) of the layer.</p>
                */
            LayerName: string | undefined;
            /**
                * <p>The description of the version.</p>
                */
            Description?: string;
            /**
                * <p>The function layer archive.</p>
                */
            Content: LayerVersionContentInput | undefined;
            /**
                * <p>A list of compatible <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">function
                *         runtimes</a>. Used for filtering with <a>ListLayers</a> and <a>ListLayerVersions</a>.</p>
                */
            CompatibleRuntimes?: (Runtime | string)[];
            /**
                * <p>The layer's software license. It can be any of the following:</p>
                *          <ul>
                *             <li>
                *                <p>An <a href="https://spdx.org/licenses/">SPDX license identifier</a>. For example,
                *           <code>MIT</code>.</p>
                *             </li>
                *             <li>
                *                <p>The URL of a license hosted on the internet. For example,
                *           <code>https://opensource.org/licenses/MIT</code>.</p>
                *             </li>
                *             <li>
                *                <p>The full text of the license.</p>
                *             </li>
                *          </ul>
                */
            LicenseInfo?: string;
            /**
                * <p>A list of compatible
                * <a href="https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html">instruction set architectures</a>.</p>
                */
            CompatibleArchitectures?: (Architecture | string)[];
    }
    export namespace PublishLayerVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PublishLayerVersionRequest) => any;
    }
    export interface PublishLayerVersionResponse {
            /**
                * <p>Details about the layer version.</p>
                */
            Content?: LayerVersionContentOutput;
            /**
                * <p>The ARN of the layer.</p>
                */
            LayerArn?: string;
            /**
                * <p>The ARN of the layer version.</p>
                */
            LayerVersionArn?: string;
            /**
                * <p>The description of the version.</p>
                */
            Description?: string;
            /**
                * <p>The date that the layer version was created, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).</p>
                */
            CreatedDate?: string;
            /**
                * <p>The version number.</p>
                */
            Version?: number;
            /**
                * <p>The layer's compatible runtimes.</p>
                */
            CompatibleRuntimes?: (Runtime | string)[];
            /**
                * <p>The layer's software license.</p>
                */
            LicenseInfo?: string;
            /**
                * <p>A list of compatible
                * <a href="https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html">instruction set architectures</a>.</p>
                */
            CompatibleArchitectures?: (Architecture | string)[];
    }
    export namespace PublishLayerVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PublishLayerVersionResponse) => any;
    }
    export interface PublishVersionRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>Only publish a version if the hash value matches the value that's specified. Use this option to avoid
                *       publishing a version if the function code has changed since you last updated it. You can get the hash for the
                *       version that you uploaded from the output of <a>UpdateFunctionCode</a>.</p>
                */
            CodeSha256?: string;
            /**
                * <p>A description for the version to override the description in the function configuration.</p>
                */
            Description?: string;
            /**
                * <p>Only update the function if the revision ID matches the ID that's specified. Use this option to avoid
                *       publishing a version if the function configuration has changed since you last updated it.</p>
                */
            RevisionId?: string;
    }
    export namespace PublishVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PublishVersionRequest) => any;
    }
    export interface PutFunctionCodeSigningConfigRequest {
            /**
                * <p>The The Amazon Resource Name (ARN) of the code signing configuration.</p>
                */
            CodeSigningConfigArn: string | undefined;
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
    }
    export namespace PutFunctionCodeSigningConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutFunctionCodeSigningConfigRequest) => any;
    }
    export interface PutFunctionCodeSigningConfigResponse {
            /**
                * <p>The The Amazon Resource Name (ARN) of the code signing configuration.</p>
                */
            CodeSigningConfigArn: string | undefined;
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
    }
    export namespace PutFunctionCodeSigningConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutFunctionCodeSigningConfigResponse) => any;
    }
    export interface PutFunctionConcurrencyRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>The number of simultaneous executions to reserve for the function.</p>
                */
            ReservedConcurrentExecutions: number | undefined;
    }
    export namespace PutFunctionConcurrencyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutFunctionConcurrencyRequest) => any;
    }
    export interface PutFunctionEventInvokeConfigRequest {
            /**
                * <p>The name of the Lambda function, version, or alias.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN.
                *       If you specify only the function name, it is limited to 64 characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>A version number or alias name.</p>
                */
            Qualifier?: string;
            /**
                * <p>The maximum number of times to retry when the function returns an error.</p>
                */
            MaximumRetryAttempts?: number;
            /**
                * <p>The maximum age of a request that Lambda sends to a function for processing.</p>
                */
            MaximumEventAgeInSeconds?: number;
            /**
                * <p>A destination for events after they have been sent to a function for processing.</p>
                *          <p class="title">
                *             <b>Destinations</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function</b> - The Amazon Resource Name (ARN) of a Lambda function.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Queue</b> - The ARN of an SQS queue.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Topic</b> - The ARN of an SNS topic.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Event Bus</b> - The ARN of an Amazon EventBridge event bus.</p>
                *             </li>
                *          </ul>
                */
            DestinationConfig?: DestinationConfig;
    }
    export namespace PutFunctionEventInvokeConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutFunctionEventInvokeConfigRequest) => any;
    }
    export interface PutProvisionedConcurrencyConfigRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>The version number or alias name.</p>
                */
            Qualifier: string | undefined;
            /**
                * <p>The amount of provisioned concurrency to allocate for the version or alias.</p>
                */
            ProvisionedConcurrentExecutions: number | undefined;
    }
    export namespace PutProvisionedConcurrencyConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutProvisionedConcurrencyConfigRequest) => any;
    }
    export interface PutProvisionedConcurrencyConfigResponse {
            /**
                * <p>The amount of provisioned concurrency requested.</p>
                */
            RequestedProvisionedConcurrentExecutions?: number;
            /**
                * <p>The amount of provisioned concurrency available.</p>
                */
            AvailableProvisionedConcurrentExecutions?: number;
            /**
                * <p>The amount of provisioned concurrency allocated.</p>
                */
            AllocatedProvisionedConcurrentExecutions?: number;
            /**
                * <p>The status of the allocation process.</p>
                */
            Status?: ProvisionedConcurrencyStatusEnum | string;
            /**
                * <p>For failed allocations, the reason that provisioned concurrency could not be allocated.</p>
                */
            StatusReason?: string;
            /**
                * <p>The date and time that a user last updated the configuration, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601 format</a>.</p>
                */
            LastModified?: string;
    }
    export namespace PutProvisionedConcurrencyConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutProvisionedConcurrencyConfigResponse) => any;
    }
    export interface RemoveLayerVersionPermissionRequest {
            /**
                * <p>The name or Amazon Resource Name (ARN) of the layer.</p>
                */
            LayerName: string | undefined;
            /**
                * <p>The version number.</p>
                */
            VersionNumber: number | undefined;
            /**
                * <p>The identifier that was specified when the statement was added.</p>
                */
            StatementId: string | undefined;
            /**
                * <p>Only update the policy if the revision ID matches the ID specified. Use this option to avoid modifying a
                *       policy that has changed since you last read it.</p>
                */
            RevisionId?: string;
    }
    export namespace RemoveLayerVersionPermissionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveLayerVersionPermissionRequest) => any;
    }
    export interface RemovePermissionRequest {
            /**
                * <p>The name of the Lambda function, version, or alias.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN.
                *       If you specify only the function name, it is limited to 64 characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>Statement ID of the permission to remove.</p>
                */
            StatementId: string | undefined;
            /**
                * <p>Specify a version or alias to remove permissions from a published version of the function.</p>
                */
            Qualifier?: string;
            /**
                * <p>Only update the policy if the revision ID matches the ID that's specified. Use this option to avoid modifying a
                *       policy that has changed since you last read it.</p>
                */
            RevisionId?: string;
    }
    export namespace RemovePermissionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemovePermissionRequest) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The function's Amazon Resource Name (ARN).</p>
                */
            Resource: string | undefined;
            /**
                * <p>A list of tags to apply to the function.</p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The function's Amazon Resource Name (ARN).</p>
                */
            Resource: string | undefined;
            /**
                * <p>A list of tag keys to remove from the function.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UpdateAliasRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>The name of the alias.</p>
                */
            Name: string | undefined;
            /**
                * <p>The function version that the alias invokes.</p>
                */
            FunctionVersion?: string;
            /**
                * <p>A description of the alias.</p>
                */
            Description?: string;
            /**
                * <p>The <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html#configuring-alias-routing">routing
                *         configuration</a> of the alias.</p>
                */
            RoutingConfig?: AliasRoutingConfiguration;
            /**
                * <p>Only update the alias if the revision ID matches the ID that's specified. Use this option to avoid modifying
                *       an alias that has changed since you last read it.</p>
                */
            RevisionId?: string;
    }
    export namespace UpdateAliasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAliasRequest) => any;
    }
    export interface UpdateCodeSigningConfigRequest {
            /**
                * <p>The The Amazon Resource Name (ARN) of the code signing configuration.</p>
                */
            CodeSigningConfigArn: string | undefined;
            /**
                * <p>Descriptive name for this code signing configuration.</p>
                */
            Description?: string;
            /**
                * <p>Signing profiles for this code signing configuration.</p>
                */
            AllowedPublishers?: AllowedPublishers;
            /**
                * <p>The code signing policy.</p>
                */
            CodeSigningPolicies?: CodeSigningPolicies;
    }
    export namespace UpdateCodeSigningConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateCodeSigningConfigRequest) => any;
    }
    export interface UpdateCodeSigningConfigResponse {
            /**
                * <p>The code signing configuration</p>
                */
            CodeSigningConfig: CodeSigningConfig | undefined;
    }
    export namespace UpdateCodeSigningConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateCodeSigningConfigResponse) => any;
    }
    export interface UpdateEventSourceMappingRequest {
            /**
                * <p>The identifier of the event source mapping.</p>
                */
            UUID: string | undefined;
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Version or Alias ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64
                *       characters in length.</p>
                */
            FunctionName?: string;
            /**
                * <p>When true, the event source mapping is active. When false, Lambda pauses polling and invocation.</p>
                *          <p>Default: True</p>
                */
            Enabled?: boolean;
            /**
                * <p>The maximum number of records in each batch that Lambda pulls from your stream or queue and sends to your function. Lambda passes all of the records in the batch to the function in a single call, up to the payload limit for synchronous invocation
                *   (6 MB).</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Amazon Kinesis</b> - Default 100. Max 10,000.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Amazon DynamoDB Streams</b> - Default 100. Max 10,000.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Amazon Simple Queue Service</b> - Default 10. For standard queues the max is 10,000. For FIFO queues the max is 10.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Amazon Managed Streaming for Apache Kafka</b> - Default 100. Max 10,000.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Self-Managed Apache Kafka</b> - Default 100. Max 10,000.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Amazon MQ (ActiveMQ and RabbitMQ)</b> - Default 100. Max 10,000.</p>
                *             </li>
                *          </ul>
                */
            BatchSize?: number;
            /**
                * <p>(Streams and Amazon SQS) An object that defines the filter criteria that
                *     determine whether Lambda should process an event. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html">Lambda event filtering</a>.</p>
                */
            FilterCriteria?: FilterCriteria;
            /**
                * <p>(Streams and Amazon SQS standard queues) The maximum amount of time, in seconds, that Lambda spends gathering records before invoking the function.</p>
                *          <p>Default: 0</p>
                *          <p>Related setting: When you set <code>BatchSize</code> to a value greater than 10, you must set <code>MaximumBatchingWindowInSeconds</code> to at least 1.</p>
                */
            MaximumBatchingWindowInSeconds?: number;
            /**
                * <p>(Streams only) An Amazon SQS queue or Amazon SNS topic destination for discarded records.</p>
                */
            DestinationConfig?: DestinationConfig;
            /**
                * <p>(Streams only) Discard records older than the specified age. The default value is infinite (-1).</p>
                */
            MaximumRecordAgeInSeconds?: number;
            /**
                * <p>(Streams only) If the function returns an error, split the batch in two and retry.</p>
                */
            BisectBatchOnFunctionError?: boolean;
            /**
                * <p>(Streams only) Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records will be retried until the record expires.</p>
                */
            MaximumRetryAttempts?: number;
            /**
                * <p>(Streams only) The number of batches to process from each shard concurrently.</p>
                */
            ParallelizationFactor?: number;
            /**
                * <p>An array of authentication protocols or VPC components required to secure your event source.</p>
                */
            SourceAccessConfigurations?: SourceAccessConfiguration[];
            /**
                * <p>(Streams only) The duration in seconds of a processing window. The range is between 1 second up to 900 seconds.</p>
                */
            TumblingWindowInSeconds?: number;
            /**
                * <p>(Streams and Amazon SQS) A list of current response type enums applied to the event source mapping.</p>
                */
            FunctionResponseTypes?: (FunctionResponseType | string)[];
    }
    export namespace UpdateEventSourceMappingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateEventSourceMappingRequest) => any;
    }
    export interface UpdateFunctionCodeRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>The base64-encoded contents of the deployment package. Amazon Web Services SDK and Amazon Web Services CLI clients
                * handle the encoding for you. Use only with a function defined with a .zip file archive deployment package.</p>
                */
            ZipFile?: Uint8Array;
            /**
                * <p>An Amazon S3 bucket in the same Amazon Web Services Region as your function. The bucket can be in a different
                * Amazon Web Services account. Use only with a function defined with a .zip file archive deployment package.</p>
                */
            S3Bucket?: string;
            /**
                * <p>The Amazon S3 key of the deployment package. Use only with a function defined with a .zip file archive deployment package.</p>
                */
            S3Key?: string;
            /**
                * <p>For versioned objects, the version of the deployment package object to use.</p>
                */
            S3ObjectVersion?: string;
            /**
                * <p>URI of a container image in the Amazon ECR registry. Do not use for a function defined
                *     with a .zip file archive.</p>
                */
            ImageUri?: string;
            /**
                * <p>Set to true to publish a new version of the function after updating the code. This has the same effect as
                *       calling <a>PublishVersion</a> separately.</p>
                */
            Publish?: boolean;
            /**
                * <p>Set to true to validate the request parameters and access permissions without modifying the function
                *       code.</p>
                */
            DryRun?: boolean;
            /**
                * <p>Only update the function if the revision ID matches the ID that's specified. Use this option to avoid modifying a
                *       function that has changed since you last read it.</p>
                */
            RevisionId?: string;
            /**
                * <p>The instruction set architecture that the function supports. Enter a string array with one of the valid values (arm64 or x86_64).
                *      The default value is <code>x86_64</code>.</p>
                */
            Architectures?: (Architecture | string)[];
    }
    export namespace UpdateFunctionCodeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFunctionCodeRequest) => any;
    }
    export interface UpdateFunctionConfigurationRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the function's execution role.</p>
                */
            Role?: string;
            /**
                * <p>The name of the method within your code that Lambda calls to execute your function.
                * Handler is required if the deployment package is a .zip file archive. The format includes the
                *       file name. It can also include namespaces and other qualifiers, depending on the runtime. For more information,
                *       see <a href="https://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html">Programming Model</a>.</p>
                */
            Handler?: string;
            /**
                * <p>A description of the function.</p>
                */
            Description?: string;
            /**
                * <p>The amount of time (in seconds) that Lambda allows a function to run before stopping it. The default is 3 seconds. The
                *       maximum allowed value is 900 seconds. For additional information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/runtimes-context.html">Lambda execution environment</a>.</p>
                */
            Timeout?: number;
            /**
                * <p>The amount of  <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-memory.html">memory available to the function</a> at runtime.
                *       Increasing the function memory also increases its CPU allocation. The default value is 128 MB. The value can be any multiple of 1 MB.</p>
                */
            MemorySize?: number;
            /**
                * <p>For network connectivity to Amazon Web Services resources in a VPC, specify a list of security groups and subnets in the VPC.
                *       When you connect a function to a VPC, it can only access resources and the internet through that VPC. For more
                *       information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html">VPC Settings</a>.</p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>Environment variables that are accessible from function code during execution.</p>
                */
            Environment?: Environment;
            /**
                * <p>The identifier of the function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime</a>. Runtime is required if the deployment package is a .zip file archive.
                *         </p>
                */
            Runtime?: Runtime | string;
            /**
                * <p>A dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events
                *       when they fail processing. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq">Dead Letter Queues</a>.</p>
                */
            DeadLetterConfig?: DeadLetterConfig;
            /**
                * <p>The ARN of the Amazon Web Services Key Management Service (KMS) key that's used to encrypt your function's environment
                *       variables. If it's not provided, Lambda uses a default service key.</p>
                */
            KMSKeyArn?: string;
            /**
                * <p>Set <code>Mode</code> to <code>Active</code> to sample and trace a subset of incoming requests with
                * <a href="https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html">X-Ray</a>.</p>
                */
            TracingConfig?: TracingConfig;
            /**
                * <p>Only update the function if the revision ID matches the ID that's specified. Use this option to avoid modifying a
                *       function that has changed since you last read it.</p>
                */
            RevisionId?: string;
            /**
                * <p>A list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">function layers</a>
                *       to add to the function's execution environment. Specify each layer by its ARN, including the version.</p>
                */
            Layers?: string[];
            /**
                * <p>Connection settings for an Amazon EFS file system.</p>
                */
            FileSystemConfigs?: FileSystemConfig[];
            /**
                * <p>
                *             <a href="https://docs.aws.amazon.com/lambda/latest/dg/images-parms.html">Container image configuration
                *         values</a> that override the values in the container image Docker file.</p>
                */
            ImageConfig?: ImageConfig;
            /**
                * <p>The size of the function’s /tmp directory in MB. The default value is 512, but can be any whole number between 512 and 10240 MB.</p>
                */
            EphemeralStorage?: EphemeralStorage;
    }
    export namespace UpdateFunctionConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFunctionConfigurationRequest) => any;
    }
    export interface UpdateFunctionEventInvokeConfigRequest {
            /**
                * <p>The name of the Lambda function, version, or alias.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN.
                *       If you specify only the function name, it is limited to 64 characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>A version number or alias name.</p>
                */
            Qualifier?: string;
            /**
                * <p>The maximum number of times to retry when the function returns an error.</p>
                */
            MaximumRetryAttempts?: number;
            /**
                * <p>The maximum age of a request that Lambda sends to a function for processing.</p>
                */
            MaximumEventAgeInSeconds?: number;
            /**
                * <p>A destination for events after they have been sent to a function for processing.</p>
                *          <p class="title">
                *             <b>Destinations</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function</b> - The Amazon Resource Name (ARN) of a Lambda function.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Queue</b> - The ARN of an SQS queue.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Topic</b> - The ARN of an SNS topic.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Event Bus</b> - The ARN of an Amazon EventBridge event bus.</p>
                *             </li>
                *          </ul>
                */
            DestinationConfig?: DestinationConfig;
    }
    export namespace UpdateFunctionEventInvokeConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFunctionEventInvokeConfigRequest) => any;
    }
    export interface UpdateFunctionUrlConfigRequest {
            /**
                * <p>The name of the Lambda function.</p>
                *          <p class="title">
                *             <b>Name formats</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Function name</b> - <code>my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p>
                *             </li>
                *          </ul>
                *          <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64
                *       characters in length.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>The alias name.</p>
                */
            Qualifier?: string;
            /**
                * <p>The type of authentication that your function URL uses. Set to <code>AWS_IAM</code> if you want to restrict access to authenticated
                *   <code>IAM</code> users only. Set to <code>NONE</code> if you want to bypass IAM authentication to create a public endpoint. For more information,
                *   see <a href="https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html"> Security and auth model for Lambda function URLs</a>.</p>
                */
            AuthType?: FunctionUrlAuthType | string;
            /**
                * <p>The <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">cross-origin resource sharing (CORS)</a> settings
                *   for your function URL.</p>
                */
            Cors?: Cors;
    }
    export namespace UpdateFunctionUrlConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFunctionUrlConfigRequest) => any;
    }
    export interface UpdateFunctionUrlConfigResponse {
            /**
                * <p>The HTTP URL endpoint for your function.</p>
                */
            FunctionUrl: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of your function.</p>
                */
            FunctionArn: string | undefined;
            /**
                * <p>The type of authentication that your function URL uses. Set to <code>AWS_IAM</code> if you want to restrict access to authenticated
                *   <code>IAM</code> users only. Set to <code>NONE</code> if you want to bypass IAM authentication to create a public endpoint. For more information,
                *   see <a href="https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html"> Security and auth model for Lambda function URLs</a>.</p>
                */
            AuthType: FunctionUrlAuthType | string | undefined;
            /**
                * <p>The <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">cross-origin resource sharing (CORS)</a> settings
                *   for your function URL.</p>
                */
            Cors?: Cors;
            /**
                * <p>When the function URL was created, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).</p>
                */
            CreationTime: string | undefined;
            /**
                * <p>When the function URL configuration was last updated, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).</p>
                */
            LastModifiedTime: string | undefined;
    }
    export namespace UpdateFunctionUrlConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFunctionUrlConfigResponse) => any;
    }
}

declare module '@aws-sdk/client-lambda/node_modules/@aws-sdk/client-lambda/dist-types/models/LambdaServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Lambda service.
        */
    export class LambdaServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

