// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-device-farm' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CreateDevicePoolCommandInput, CreateDevicePoolCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateDevicePoolCommand";
    import { CreateInstanceProfileCommandInput, CreateInstanceProfileCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateInstanceProfileCommand";
    import { CreateNetworkProfileCommandInput, CreateNetworkProfileCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateNetworkProfileCommand";
    import { CreateProjectCommandInput, CreateProjectCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateProjectCommand";
    import { CreateRemoteAccessSessionCommandInput, CreateRemoteAccessSessionCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateRemoteAccessSessionCommand";
    import { CreateTestGridProjectCommandInput, CreateTestGridProjectCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateTestGridProjectCommand";
    import { CreateTestGridUrlCommandInput, CreateTestGridUrlCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateTestGridUrlCommand";
    import { CreateUploadCommandInput, CreateUploadCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateUploadCommand";
    import { CreateVPCEConfigurationCommandInput, CreateVPCEConfigurationCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateVPCEConfigurationCommand";
    import { DeleteDevicePoolCommandInput, DeleteDevicePoolCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteDevicePoolCommand";
    import { DeleteInstanceProfileCommandInput, DeleteInstanceProfileCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteInstanceProfileCommand";
    import { DeleteNetworkProfileCommandInput, DeleteNetworkProfileCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteNetworkProfileCommand";
    import { DeleteProjectCommandInput, DeleteProjectCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteProjectCommand";
    import { DeleteRemoteAccessSessionCommandInput, DeleteRemoteAccessSessionCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteRemoteAccessSessionCommand";
    import { DeleteRunCommandInput, DeleteRunCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteRunCommand";
    import { DeleteTestGridProjectCommandInput, DeleteTestGridProjectCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteTestGridProjectCommand";
    import { DeleteUploadCommandInput, DeleteUploadCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteUploadCommand";
    import { DeleteVPCEConfigurationCommandInput, DeleteVPCEConfigurationCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteVPCEConfigurationCommand";
    import { GetAccountSettingsCommandInput, GetAccountSettingsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetAccountSettingsCommand";
    import { GetDeviceCommandInput, GetDeviceCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetDeviceCommand";
    import { GetDeviceInstanceCommandInput, GetDeviceInstanceCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetDeviceInstanceCommand";
    import { GetDevicePoolCommandInput, GetDevicePoolCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetDevicePoolCommand";
    import { GetDevicePoolCompatibilityCommandInput, GetDevicePoolCompatibilityCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetDevicePoolCompatibilityCommand";
    import { GetInstanceProfileCommandInput, GetInstanceProfileCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetInstanceProfileCommand";
    import { GetJobCommandInput, GetJobCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetJobCommand";
    import { GetNetworkProfileCommandInput, GetNetworkProfileCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetNetworkProfileCommand";
    import { GetOfferingStatusCommandInput, GetOfferingStatusCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetOfferingStatusCommand";
    import { GetProjectCommandInput, GetProjectCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetProjectCommand";
    import { GetRemoteAccessSessionCommandInput, GetRemoteAccessSessionCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetRemoteAccessSessionCommand";
    import { GetRunCommandInput, GetRunCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetRunCommand";
    import { GetSuiteCommandInput, GetSuiteCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetSuiteCommand";
    import { GetTestCommandInput, GetTestCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetTestCommand";
    import { GetTestGridProjectCommandInput, GetTestGridProjectCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetTestGridProjectCommand";
    import { GetTestGridSessionCommandInput, GetTestGridSessionCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetTestGridSessionCommand";
    import { GetUploadCommandInput, GetUploadCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetUploadCommand";
    import { GetVPCEConfigurationCommandInput, GetVPCEConfigurationCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetVPCEConfigurationCommand";
    import { InstallToRemoteAccessSessionCommandInput, InstallToRemoteAccessSessionCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/InstallToRemoteAccessSessionCommand";
    import { ListArtifactsCommandInput, ListArtifactsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListArtifactsCommand";
    import { ListDeviceInstancesCommandInput, ListDeviceInstancesCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListDeviceInstancesCommand";
    import { ListDevicePoolsCommandInput, ListDevicePoolsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListDevicePoolsCommand";
    import { ListDevicesCommandInput, ListDevicesCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListDevicesCommand";
    import { ListInstanceProfilesCommandInput, ListInstanceProfilesCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListInstanceProfilesCommand";
    import { ListJobsCommandInput, ListJobsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListJobsCommand";
    import { ListNetworkProfilesCommandInput, ListNetworkProfilesCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListNetworkProfilesCommand";
    import { ListOfferingPromotionsCommandInput, ListOfferingPromotionsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListOfferingPromotionsCommand";
    import { ListOfferingsCommandInput, ListOfferingsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListOfferingsCommand";
    import { ListOfferingTransactionsCommandInput, ListOfferingTransactionsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListOfferingTransactionsCommand";
    import { ListProjectsCommandInput, ListProjectsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListProjectsCommand";
    import { ListRemoteAccessSessionsCommandInput, ListRemoteAccessSessionsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListRemoteAccessSessionsCommand";
    import { ListRunsCommandInput, ListRunsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListRunsCommand";
    import { ListSamplesCommandInput, ListSamplesCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListSamplesCommand";
    import { ListSuitesCommandInput, ListSuitesCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListSuitesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListTagsForResourceCommand";
    import { ListTestGridProjectsCommandInput, ListTestGridProjectsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListTestGridProjectsCommand";
    import { ListTestGridSessionActionsCommandInput, ListTestGridSessionActionsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListTestGridSessionActionsCommand";
    import { ListTestGridSessionArtifactsCommandInput, ListTestGridSessionArtifactsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListTestGridSessionArtifactsCommand";
    import { ListTestGridSessionsCommandInput, ListTestGridSessionsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListTestGridSessionsCommand";
    import { ListTestsCommandInput, ListTestsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListTestsCommand";
    import { ListUniqueProblemsCommandInput, ListUniqueProblemsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListUniqueProblemsCommand";
    import { ListUploadsCommandInput, ListUploadsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListUploadsCommand";
    import { ListVPCEConfigurationsCommandInput, ListVPCEConfigurationsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListVPCEConfigurationsCommand";
    import { PurchaseOfferingCommandInput, PurchaseOfferingCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/PurchaseOfferingCommand";
    import { RenewOfferingCommandInput, RenewOfferingCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/RenewOfferingCommand";
    import { ScheduleRunCommandInput, ScheduleRunCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ScheduleRunCommand";
    import { StopJobCommandInput, StopJobCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/StopJobCommand";
    import { StopRemoteAccessSessionCommandInput, StopRemoteAccessSessionCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/StopRemoteAccessSessionCommand";
    import { StopRunCommandInput, StopRunCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/StopRunCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UntagResourceCommand";
    import { UpdateDeviceInstanceCommandInput, UpdateDeviceInstanceCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateDeviceInstanceCommand";
    import { UpdateDevicePoolCommandInput, UpdateDevicePoolCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateDevicePoolCommand";
    import { UpdateInstanceProfileCommandInput, UpdateInstanceProfileCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateInstanceProfileCommand";
    import { UpdateNetworkProfileCommandInput, UpdateNetworkProfileCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateNetworkProfileCommand";
    import { UpdateProjectCommandInput, UpdateProjectCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateProjectCommand";
    import { UpdateTestGridProjectCommandInput, UpdateTestGridProjectCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateTestGridProjectCommand";
    import { UpdateUploadCommandInput, UpdateUploadCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateUploadCommand";
    import { UpdateVPCEConfigurationCommandInput, UpdateVPCEConfigurationCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateVPCEConfigurationCommand";
    import { DeviceFarmClient } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    /**
        * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p>
        *         <ul>
        *             <li>
        *                 <p>Testing on desktop browsers</p>
        *                 <p> Device Farm makes it possible for you to test your web applications on desktop browsers using
        *                     Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For
        *                     more information, see <a href="https://docs.aws.amazon.com/devicefarm/latest/testgrid/">Testing Web
        *                         Applications on Selenium with Device Farm</a>.</p>
        *             </li>
        *             <li>
        *                 <p>Testing on real mobile devices</p>
        *                 <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other
        *                     devices in the cloud. For more information, see the <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/">Device Farm Developer Guide</a>.</p>
        *             </li>
        *          </ul>
        */
    export class DeviceFarm extends DeviceFarmClient {
            /**
                * <p>Creates a device pool.</p>
                */
            createDevicePool(args: CreateDevicePoolCommandInput, options?: __HttpHandlerOptions): Promise<CreateDevicePoolCommandOutput>;
            createDevicePool(args: CreateDevicePoolCommandInput, cb: (err: any, data?: CreateDevicePoolCommandOutput) => void): void;
            createDevicePool(args: CreateDevicePoolCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDevicePoolCommandOutput) => void): void;
            /**
                * <p>Creates a profile that can be applied to one or more private fleet device
                *             instances.</p>
                */
            createInstanceProfile(args: CreateInstanceProfileCommandInput, options?: __HttpHandlerOptions): Promise<CreateInstanceProfileCommandOutput>;
            createInstanceProfile(args: CreateInstanceProfileCommandInput, cb: (err: any, data?: CreateInstanceProfileCommandOutput) => void): void;
            createInstanceProfile(args: CreateInstanceProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateInstanceProfileCommandOutput) => void): void;
            /**
                * <p>Creates a network profile.</p>
                */
            createNetworkProfile(args: CreateNetworkProfileCommandInput, options?: __HttpHandlerOptions): Promise<CreateNetworkProfileCommandOutput>;
            createNetworkProfile(args: CreateNetworkProfileCommandInput, cb: (err: any, data?: CreateNetworkProfileCommandOutput) => void): void;
            createNetworkProfile(args: CreateNetworkProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateNetworkProfileCommandOutput) => void): void;
            /**
                * <p>Creates a project.</p>
                */
            createProject(args: CreateProjectCommandInput, options?: __HttpHandlerOptions): Promise<CreateProjectCommandOutput>;
            createProject(args: CreateProjectCommandInput, cb: (err: any, data?: CreateProjectCommandOutput) => void): void;
            createProject(args: CreateProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateProjectCommandOutput) => void): void;
            /**
                * <p>Specifies and starts a remote access session.</p>
                */
            createRemoteAccessSession(args: CreateRemoteAccessSessionCommandInput, options?: __HttpHandlerOptions): Promise<CreateRemoteAccessSessionCommandOutput>;
            createRemoteAccessSession(args: CreateRemoteAccessSessionCommandInput, cb: (err: any, data?: CreateRemoteAccessSessionCommandOutput) => void): void;
            createRemoteAccessSession(args: CreateRemoteAccessSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRemoteAccessSessionCommandOutput) => void): void;
            /**
                * <p>Creates a Selenium testing project. Projects are used to track <a>TestGridSession</a>
                *          instances.</p>
                */
            createTestGridProject(args: CreateTestGridProjectCommandInput, options?: __HttpHandlerOptions): Promise<CreateTestGridProjectCommandOutput>;
            createTestGridProject(args: CreateTestGridProjectCommandInput, cb: (err: any, data?: CreateTestGridProjectCommandOutput) => void): void;
            createTestGridProject(args: CreateTestGridProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTestGridProjectCommandOutput) => void): void;
            /**
                * <p>Creates a signed, short-term URL that can be passed to a Selenium <code>RemoteWebDriver</code>
                *          constructor.</p>
                */
            createTestGridUrl(args: CreateTestGridUrlCommandInput, options?: __HttpHandlerOptions): Promise<CreateTestGridUrlCommandOutput>;
            createTestGridUrl(args: CreateTestGridUrlCommandInput, cb: (err: any, data?: CreateTestGridUrlCommandOutput) => void): void;
            createTestGridUrl(args: CreateTestGridUrlCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTestGridUrlCommandOutput) => void): void;
            /**
                * <p>Uploads an app or test scripts.</p>
                */
            createUpload(args: CreateUploadCommandInput, options?: __HttpHandlerOptions): Promise<CreateUploadCommandOutput>;
            createUpload(args: CreateUploadCommandInput, cb: (err: any, data?: CreateUploadCommandOutput) => void): void;
            createUpload(args: CreateUploadCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateUploadCommandOutput) => void): void;
            /**
                * <p>Creates a configuration record in Device Farm for your Amazon Virtual Private Cloud
                *             (VPC) endpoint.</p>
                */
            createVPCEConfiguration(args: CreateVPCEConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<CreateVPCEConfigurationCommandOutput>;
            createVPCEConfiguration(args: CreateVPCEConfigurationCommandInput, cb: (err: any, data?: CreateVPCEConfigurationCommandOutput) => void): void;
            createVPCEConfiguration(args: CreateVPCEConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateVPCEConfigurationCommandOutput) => void): void;
            /**
                * <p>Deletes a device pool given the pool ARN. Does not allow deletion of curated pools
                *             owned by the system.</p>
                */
            deleteDevicePool(args: DeleteDevicePoolCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDevicePoolCommandOutput>;
            deleteDevicePool(args: DeleteDevicePoolCommandInput, cb: (err: any, data?: DeleteDevicePoolCommandOutput) => void): void;
            deleteDevicePool(args: DeleteDevicePoolCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDevicePoolCommandOutput) => void): void;
            /**
                * <p>Deletes a profile that can be applied to one or more private device instances.</p>
                */
            deleteInstanceProfile(args: DeleteInstanceProfileCommandInput, options?: __HttpHandlerOptions): Promise<DeleteInstanceProfileCommandOutput>;
            deleteInstanceProfile(args: DeleteInstanceProfileCommandInput, cb: (err: any, data?: DeleteInstanceProfileCommandOutput) => void): void;
            deleteInstanceProfile(args: DeleteInstanceProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteInstanceProfileCommandOutput) => void): void;
            /**
                * <p>Deletes a network profile.</p>
                */
            deleteNetworkProfile(args: DeleteNetworkProfileCommandInput, options?: __HttpHandlerOptions): Promise<DeleteNetworkProfileCommandOutput>;
            deleteNetworkProfile(args: DeleteNetworkProfileCommandInput, cb: (err: any, data?: DeleteNetworkProfileCommandOutput) => void): void;
            deleteNetworkProfile(args: DeleteNetworkProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteNetworkProfileCommandOutput) => void): void;
            /**
                * <p>Deletes an AWS Device Farm project, given the project ARN.</p>
                *         <p> Deleting this resource does not stop an in-progress run.</p>
                */
            deleteProject(args: DeleteProjectCommandInput, options?: __HttpHandlerOptions): Promise<DeleteProjectCommandOutput>;
            deleteProject(args: DeleteProjectCommandInput, cb: (err: any, data?: DeleteProjectCommandOutput) => void): void;
            deleteProject(args: DeleteProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteProjectCommandOutput) => void): void;
            /**
                * <p>Deletes a completed remote access session and its results.</p>
                */
            deleteRemoteAccessSession(args: DeleteRemoteAccessSessionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRemoteAccessSessionCommandOutput>;
            deleteRemoteAccessSession(args: DeleteRemoteAccessSessionCommandInput, cb: (err: any, data?: DeleteRemoteAccessSessionCommandOutput) => void): void;
            deleteRemoteAccessSession(args: DeleteRemoteAccessSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRemoteAccessSessionCommandOutput) => void): void;
            /**
                * <p>Deletes the run, given the run ARN.</p>
                *         <p> Deleting this resource does not stop an in-progress run.</p>
                */
            deleteRun(args: DeleteRunCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRunCommandOutput>;
            deleteRun(args: DeleteRunCommandInput, cb: (err: any, data?: DeleteRunCommandOutput) => void): void;
            deleteRun(args: DeleteRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRunCommandOutput) => void): void;
            /**
                * <p> Deletes a Selenium testing project and all content generated under it. </p>
                *          <important>
                *             <p>You cannot undo this operation.</p>
                *          </important>
                *          <note>
                *             <p>You cannot delete a project if it has active sessions.</p>
                *          </note>
                */
            deleteTestGridProject(args: DeleteTestGridProjectCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTestGridProjectCommandOutput>;
            deleteTestGridProject(args: DeleteTestGridProjectCommandInput, cb: (err: any, data?: DeleteTestGridProjectCommandOutput) => void): void;
            deleteTestGridProject(args: DeleteTestGridProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTestGridProjectCommandOutput) => void): void;
            /**
                * <p>Deletes an upload given the upload ARN.</p>
                */
            deleteUpload(args: DeleteUploadCommandInput, options?: __HttpHandlerOptions): Promise<DeleteUploadCommandOutput>;
            deleteUpload(args: DeleteUploadCommandInput, cb: (err: any, data?: DeleteUploadCommandOutput) => void): void;
            deleteUpload(args: DeleteUploadCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteUploadCommandOutput) => void): void;
            /**
                * <p>Deletes a configuration for your Amazon Virtual Private Cloud (VPC) endpoint.</p>
                */
            deleteVPCEConfiguration(args: DeleteVPCEConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteVPCEConfigurationCommandOutput>;
            deleteVPCEConfiguration(args: DeleteVPCEConfigurationCommandInput, cb: (err: any, data?: DeleteVPCEConfigurationCommandOutput) => void): void;
            deleteVPCEConfiguration(args: DeleteVPCEConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteVPCEConfigurationCommandOutput) => void): void;
            /**
                * <p>Returns the number of unmetered iOS or unmetered Android devices that have been purchased by the
                *             account.</p>
                */
            getAccountSettings(args: GetAccountSettingsCommandInput, options?: __HttpHandlerOptions): Promise<GetAccountSettingsCommandOutput>;
            getAccountSettings(args: GetAccountSettingsCommandInput, cb: (err: any, data?: GetAccountSettingsCommandOutput) => void): void;
            getAccountSettings(args: GetAccountSettingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAccountSettingsCommandOutput) => void): void;
            /**
                * <p>Gets information about a unique device type.</p>
                */
            getDevice(args: GetDeviceCommandInput, options?: __HttpHandlerOptions): Promise<GetDeviceCommandOutput>;
            getDevice(args: GetDeviceCommandInput, cb: (err: any, data?: GetDeviceCommandOutput) => void): void;
            getDevice(args: GetDeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeviceCommandOutput) => void): void;
            /**
                * <p>Returns information about a device instance that belongs to a private device fleet.</p>
                */
            getDeviceInstance(args: GetDeviceInstanceCommandInput, options?: __HttpHandlerOptions): Promise<GetDeviceInstanceCommandOutput>;
            getDeviceInstance(args: GetDeviceInstanceCommandInput, cb: (err: any, data?: GetDeviceInstanceCommandOutput) => void): void;
            getDeviceInstance(args: GetDeviceInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeviceInstanceCommandOutput) => void): void;
            /**
                * <p>Gets information about a device pool.</p>
                */
            getDevicePool(args: GetDevicePoolCommandInput, options?: __HttpHandlerOptions): Promise<GetDevicePoolCommandOutput>;
            getDevicePool(args: GetDevicePoolCommandInput, cb: (err: any, data?: GetDevicePoolCommandOutput) => void): void;
            getDevicePool(args: GetDevicePoolCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDevicePoolCommandOutput) => void): void;
            /**
                * <p>Gets information about compatibility with a device pool.</p>
                */
            getDevicePoolCompatibility(args: GetDevicePoolCompatibilityCommandInput, options?: __HttpHandlerOptions): Promise<GetDevicePoolCompatibilityCommandOutput>;
            getDevicePoolCompatibility(args: GetDevicePoolCompatibilityCommandInput, cb: (err: any, data?: GetDevicePoolCompatibilityCommandOutput) => void): void;
            getDevicePoolCompatibility(args: GetDevicePoolCompatibilityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDevicePoolCompatibilityCommandOutput) => void): void;
            /**
                * <p>Returns information about the specified instance profile.</p>
                */
            getInstanceProfile(args: GetInstanceProfileCommandInput, options?: __HttpHandlerOptions): Promise<GetInstanceProfileCommandOutput>;
            getInstanceProfile(args: GetInstanceProfileCommandInput, cb: (err: any, data?: GetInstanceProfileCommandOutput) => void): void;
            getInstanceProfile(args: GetInstanceProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetInstanceProfileCommandOutput) => void): void;
            /**
                * <p>Gets information about a job.</p>
                */
            getJob(args: GetJobCommandInput, options?: __HttpHandlerOptions): Promise<GetJobCommandOutput>;
            getJob(args: GetJobCommandInput, cb: (err: any, data?: GetJobCommandOutput) => void): void;
            getJob(args: GetJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetJobCommandOutput) => void): void;
            /**
                * <p>Returns information about a network profile.</p>
                */
            getNetworkProfile(args: GetNetworkProfileCommandInput, options?: __HttpHandlerOptions): Promise<GetNetworkProfileCommandOutput>;
            getNetworkProfile(args: GetNetworkProfileCommandInput, cb: (err: any, data?: GetNetworkProfileCommandOutput) => void): void;
            getNetworkProfile(args: GetNetworkProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetNetworkProfileCommandOutput) => void): void;
            /**
                * <p>Gets the current status and future status of all offerings purchased by an AWS account. The response
                *             indicates how many offerings are currently available and the offerings that will be available in the next
                *             period. The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the
                *             operation. If you must be able to invoke this operation, contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.</p>
                */
            getOfferingStatus(args: GetOfferingStatusCommandInput, options?: __HttpHandlerOptions): Promise<GetOfferingStatusCommandOutput>;
            getOfferingStatus(args: GetOfferingStatusCommandInput, cb: (err: any, data?: GetOfferingStatusCommandOutput) => void): void;
            getOfferingStatus(args: GetOfferingStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetOfferingStatusCommandOutput) => void): void;
            /**
                * <p>Gets information about a project.</p>
                */
            getProject(args: GetProjectCommandInput, options?: __HttpHandlerOptions): Promise<GetProjectCommandOutput>;
            getProject(args: GetProjectCommandInput, cb: (err: any, data?: GetProjectCommandOutput) => void): void;
            getProject(args: GetProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetProjectCommandOutput) => void): void;
            /**
                * <p>Returns a link to a currently running remote access session.</p>
                */
            getRemoteAccessSession(args: GetRemoteAccessSessionCommandInput, options?: __HttpHandlerOptions): Promise<GetRemoteAccessSessionCommandOutput>;
            getRemoteAccessSession(args: GetRemoteAccessSessionCommandInput, cb: (err: any, data?: GetRemoteAccessSessionCommandOutput) => void): void;
            getRemoteAccessSession(args: GetRemoteAccessSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRemoteAccessSessionCommandOutput) => void): void;
            /**
                * <p>Gets information about a run.</p>
                */
            getRun(args: GetRunCommandInput, options?: __HttpHandlerOptions): Promise<GetRunCommandOutput>;
            getRun(args: GetRunCommandInput, cb: (err: any, data?: GetRunCommandOutput) => void): void;
            getRun(args: GetRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRunCommandOutput) => void): void;
            /**
                * <p>Gets information about a suite.</p>
                */
            getSuite(args: GetSuiteCommandInput, options?: __HttpHandlerOptions): Promise<GetSuiteCommandOutput>;
            getSuite(args: GetSuiteCommandInput, cb: (err: any, data?: GetSuiteCommandOutput) => void): void;
            getSuite(args: GetSuiteCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSuiteCommandOutput) => void): void;
            /**
                * <p>Gets information about a test.</p>
                */
            getTest(args: GetTestCommandInput, options?: __HttpHandlerOptions): Promise<GetTestCommandOutput>;
            getTest(args: GetTestCommandInput, cb: (err: any, data?: GetTestCommandOutput) => void): void;
            getTest(args: GetTestCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTestCommandOutput) => void): void;
            /**
                * <p>Retrieves information about a Selenium testing project.</p>
                */
            getTestGridProject(args: GetTestGridProjectCommandInput, options?: __HttpHandlerOptions): Promise<GetTestGridProjectCommandOutput>;
            getTestGridProject(args: GetTestGridProjectCommandInput, cb: (err: any, data?: GetTestGridProjectCommandOutput) => void): void;
            getTestGridProject(args: GetTestGridProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTestGridProjectCommandOutput) => void): void;
            /**
                * <p>A session is an instance of a browser created through a <code>RemoteWebDriver</code> with the URL from <a>CreateTestGridUrlResult$url</a>. You can use the following to look up sessions:</p>
                *          <ul>
                *             <li>
                *                <p>The session ARN (<a>GetTestGridSessionRequest$sessionArn</a>).</p>
                *             </li>
                *             <li>
                *                <p>The project ARN and a session ID (<a>GetTestGridSessionRequest$projectArn</a> and <a>GetTestGridSessionRequest$sessionId</a>).</p>
                *             </li>
                *          </ul>
                *          <p></p>
                */
            getTestGridSession(args: GetTestGridSessionCommandInput, options?: __HttpHandlerOptions): Promise<GetTestGridSessionCommandOutput>;
            getTestGridSession(args: GetTestGridSessionCommandInput, cb: (err: any, data?: GetTestGridSessionCommandOutput) => void): void;
            getTestGridSession(args: GetTestGridSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTestGridSessionCommandOutput) => void): void;
            /**
                * <p>Gets information about an upload.</p>
                */
            getUpload(args: GetUploadCommandInput, options?: __HttpHandlerOptions): Promise<GetUploadCommandOutput>;
            getUpload(args: GetUploadCommandInput, cb: (err: any, data?: GetUploadCommandOutput) => void): void;
            getUpload(args: GetUploadCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetUploadCommandOutput) => void): void;
            /**
                * <p>Returns information about the configuration settings for your Amazon Virtual Private
                *             Cloud (VPC) endpoint.</p>
                */
            getVPCEConfiguration(args: GetVPCEConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<GetVPCEConfigurationCommandOutput>;
            getVPCEConfiguration(args: GetVPCEConfigurationCommandInput, cb: (err: any, data?: GetVPCEConfigurationCommandOutput) => void): void;
            getVPCEConfiguration(args: GetVPCEConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetVPCEConfigurationCommandOutput) => void): void;
            /**
                * <p>Installs an application to the device in a remote access session. For Android
                *             applications, the file must be in .apk format. For iOS applications, the file must be in
                *             .ipa format.</p>
                */
            installToRemoteAccessSession(args: InstallToRemoteAccessSessionCommandInput, options?: __HttpHandlerOptions): Promise<InstallToRemoteAccessSessionCommandOutput>;
            installToRemoteAccessSession(args: InstallToRemoteAccessSessionCommandInput, cb: (err: any, data?: InstallToRemoteAccessSessionCommandOutput) => void): void;
            installToRemoteAccessSession(args: InstallToRemoteAccessSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: InstallToRemoteAccessSessionCommandOutput) => void): void;
            /**
                * <p>Gets information about artifacts.</p>
                */
            listArtifacts(args: ListArtifactsCommandInput, options?: __HttpHandlerOptions): Promise<ListArtifactsCommandOutput>;
            listArtifacts(args: ListArtifactsCommandInput, cb: (err: any, data?: ListArtifactsCommandOutput) => void): void;
            listArtifacts(args: ListArtifactsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListArtifactsCommandOutput) => void): void;
            /**
                * <p>Returns information about the private device instances associated with one or more AWS
                *             accounts.</p>
                */
            listDeviceInstances(args: ListDeviceInstancesCommandInput, options?: __HttpHandlerOptions): Promise<ListDeviceInstancesCommandOutput>;
            listDeviceInstances(args: ListDeviceInstancesCommandInput, cb: (err: any, data?: ListDeviceInstancesCommandOutput) => void): void;
            listDeviceInstances(args: ListDeviceInstancesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDeviceInstancesCommandOutput) => void): void;
            /**
                * <p>Gets information about device pools.</p>
                */
            listDevicePools(args: ListDevicePoolsCommandInput, options?: __HttpHandlerOptions): Promise<ListDevicePoolsCommandOutput>;
            listDevicePools(args: ListDevicePoolsCommandInput, cb: (err: any, data?: ListDevicePoolsCommandOutput) => void): void;
            listDevicePools(args: ListDevicePoolsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDevicePoolsCommandOutput) => void): void;
            /**
                * <p>Gets information about unique device types.</p>
                */
            listDevices(args: ListDevicesCommandInput, options?: __HttpHandlerOptions): Promise<ListDevicesCommandOutput>;
            listDevices(args: ListDevicesCommandInput, cb: (err: any, data?: ListDevicesCommandOutput) => void): void;
            listDevices(args: ListDevicesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDevicesCommandOutput) => void): void;
            /**
                * <p>Returns information about all the instance profiles in an AWS account.</p>
                */
            listInstanceProfiles(args: ListInstanceProfilesCommandInput, options?: __HttpHandlerOptions): Promise<ListInstanceProfilesCommandOutput>;
            listInstanceProfiles(args: ListInstanceProfilesCommandInput, cb: (err: any, data?: ListInstanceProfilesCommandOutput) => void): void;
            listInstanceProfiles(args: ListInstanceProfilesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListInstanceProfilesCommandOutput) => void): void;
            /**
                * <p>Gets information about jobs for a given test run.</p>
                */
            listJobs(args: ListJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListJobsCommandOutput>;
            listJobs(args: ListJobsCommandInput, cb: (err: any, data?: ListJobsCommandOutput) => void): void;
            listJobs(args: ListJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListJobsCommandOutput) => void): void;
            /**
                * <p>Returns the list of available network profiles.</p>
                */
            listNetworkProfiles(args: ListNetworkProfilesCommandInput, options?: __HttpHandlerOptions): Promise<ListNetworkProfilesCommandOutput>;
            listNetworkProfiles(args: ListNetworkProfilesCommandInput, cb: (err: any, data?: ListNetworkProfilesCommandOutput) => void): void;
            listNetworkProfiles(args: ListNetworkProfilesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListNetworkProfilesCommandOutput) => void): void;
            /**
                * <p>Returns a list of offering promotions. Each offering promotion record contains the ID and description
                *             of the promotion. The API returns a <code>NotEligible</code> error if the caller is not permitted to invoke
                *             the operation. Contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a> if you must be able to invoke this operation.</p>
                */
            listOfferingPromotions(args: ListOfferingPromotionsCommandInput, options?: __HttpHandlerOptions): Promise<ListOfferingPromotionsCommandOutput>;
            listOfferingPromotions(args: ListOfferingPromotionsCommandInput, cb: (err: any, data?: ListOfferingPromotionsCommandOutput) => void): void;
            listOfferingPromotions(args: ListOfferingPromotionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListOfferingPromotionsCommandOutput) => void): void;
            /**
                * <p>Returns a list of products or offerings that the user can manage through the API. Each offering record
                *             indicates the recurring price per unit and the frequency for that offering. The API returns a
                *                 <code>NotEligible</code> error if the user is not permitted to invoke the operation.  If you must be
                *             able to invoke this operation, contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.</p>
                */
            listOfferings(args: ListOfferingsCommandInput, options?: __HttpHandlerOptions): Promise<ListOfferingsCommandOutput>;
            listOfferings(args: ListOfferingsCommandInput, cb: (err: any, data?: ListOfferingsCommandOutput) => void): void;
            listOfferings(args: ListOfferingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListOfferingsCommandOutput) => void): void;
            /**
                * <p>Returns a list of all historical purchases, renewals, and system renewal transactions for an AWS
                *             account. The list is paginated and ordered by a descending timestamp (most recent transactions are first).
                *             The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. If
                *             you must be able to invoke this operation, contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.</p>
                */
            listOfferingTransactions(args: ListOfferingTransactionsCommandInput, options?: __HttpHandlerOptions): Promise<ListOfferingTransactionsCommandOutput>;
            listOfferingTransactions(args: ListOfferingTransactionsCommandInput, cb: (err: any, data?: ListOfferingTransactionsCommandOutput) => void): void;
            listOfferingTransactions(args: ListOfferingTransactionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListOfferingTransactionsCommandOutput) => void): void;
            /**
                * <p>Gets information about projects.</p>
                */
            listProjects(args: ListProjectsCommandInput, options?: __HttpHandlerOptions): Promise<ListProjectsCommandOutput>;
            listProjects(args: ListProjectsCommandInput, cb: (err: any, data?: ListProjectsCommandOutput) => void): void;
            listProjects(args: ListProjectsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListProjectsCommandOutput) => void): void;
            /**
                * <p>Returns a list of all currently running remote access sessions.</p>
                */
            listRemoteAccessSessions(args: ListRemoteAccessSessionsCommandInput, options?: __HttpHandlerOptions): Promise<ListRemoteAccessSessionsCommandOutput>;
            listRemoteAccessSessions(args: ListRemoteAccessSessionsCommandInput, cb: (err: any, data?: ListRemoteAccessSessionsCommandOutput) => void): void;
            listRemoteAccessSessions(args: ListRemoteAccessSessionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRemoteAccessSessionsCommandOutput) => void): void;
            /**
                * <p>Gets information about runs, given an AWS Device Farm project ARN.</p>
                */
            listRuns(args: ListRunsCommandInput, options?: __HttpHandlerOptions): Promise<ListRunsCommandOutput>;
            listRuns(args: ListRunsCommandInput, cb: (err: any, data?: ListRunsCommandOutput) => void): void;
            listRuns(args: ListRunsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRunsCommandOutput) => void): void;
            /**
                * <p>Gets information about samples, given an AWS Device Farm job ARN.</p>
                */
            listSamples(args: ListSamplesCommandInput, options?: __HttpHandlerOptions): Promise<ListSamplesCommandOutput>;
            listSamples(args: ListSamplesCommandInput, cb: (err: any, data?: ListSamplesCommandOutput) => void): void;
            listSamples(args: ListSamplesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSamplesCommandOutput) => void): void;
            /**
                * <p>Gets information about test suites for a given job.</p>
                */
            listSuites(args: ListSuitesCommandInput, options?: __HttpHandlerOptions): Promise<ListSuitesCommandOutput>;
            listSuites(args: ListSuitesCommandInput, cb: (err: any, data?: ListSuitesCommandOutput) => void): void;
            listSuites(args: ListSuitesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSuitesCommandOutput) => void): void;
            /**
                * <p>List the tags for an AWS Device Farm resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Gets a list of all Selenium testing projects in your account.</p>
                */
            listTestGridProjects(args: ListTestGridProjectsCommandInput, options?: __HttpHandlerOptions): Promise<ListTestGridProjectsCommandOutput>;
            listTestGridProjects(args: ListTestGridProjectsCommandInput, cb: (err: any, data?: ListTestGridProjectsCommandOutput) => void): void;
            listTestGridProjects(args: ListTestGridProjectsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTestGridProjectsCommandOutput) => void): void;
            /**
                * <p>Returns a list of the actions taken in a <a>TestGridSession</a>.</p>
                */
            listTestGridSessionActions(args: ListTestGridSessionActionsCommandInput, options?: __HttpHandlerOptions): Promise<ListTestGridSessionActionsCommandOutput>;
            listTestGridSessionActions(args: ListTestGridSessionActionsCommandInput, cb: (err: any, data?: ListTestGridSessionActionsCommandOutput) => void): void;
            listTestGridSessionActions(args: ListTestGridSessionActionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTestGridSessionActionsCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of artifacts created during the session.</p>
                */
            listTestGridSessionArtifacts(args: ListTestGridSessionArtifactsCommandInput, options?: __HttpHandlerOptions): Promise<ListTestGridSessionArtifactsCommandOutput>;
            listTestGridSessionArtifacts(args: ListTestGridSessionArtifactsCommandInput, cb: (err: any, data?: ListTestGridSessionArtifactsCommandOutput) => void): void;
            listTestGridSessionArtifacts(args: ListTestGridSessionArtifactsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTestGridSessionArtifactsCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of sessions for a <a>TestGridProject</a>.</p>
                */
            listTestGridSessions(args: ListTestGridSessionsCommandInput, options?: __HttpHandlerOptions): Promise<ListTestGridSessionsCommandOutput>;
            listTestGridSessions(args: ListTestGridSessionsCommandInput, cb: (err: any, data?: ListTestGridSessionsCommandOutput) => void): void;
            listTestGridSessions(args: ListTestGridSessionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTestGridSessionsCommandOutput) => void): void;
            /**
                * <p>Gets information about tests in a given test suite.</p>
                */
            listTests(args: ListTestsCommandInput, options?: __HttpHandlerOptions): Promise<ListTestsCommandOutput>;
            listTests(args: ListTestsCommandInput, cb: (err: any, data?: ListTestsCommandOutput) => void): void;
            listTests(args: ListTestsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTestsCommandOutput) => void): void;
            /**
                * <p>Gets information about unique problems, such as exceptions or crashes.</p>
                *         <p>Unique problems are defined as a single instance of an error across a run, job, or suite. For example,
                *             if a call in your application consistently raises an exception (<code>OutOfBoundsException in
                *                 MyActivity.java:386</code>), <code>ListUniqueProblems</code> returns a single entry instead of many
                *             individual entries for that exception.</p>
                */
            listUniqueProblems(args: ListUniqueProblemsCommandInput, options?: __HttpHandlerOptions): Promise<ListUniqueProblemsCommandOutput>;
            listUniqueProblems(args: ListUniqueProblemsCommandInput, cb: (err: any, data?: ListUniqueProblemsCommandOutput) => void): void;
            listUniqueProblems(args: ListUniqueProblemsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListUniqueProblemsCommandOutput) => void): void;
            /**
                * <p>Gets information about uploads, given an AWS Device Farm project ARN.</p>
                */
            listUploads(args: ListUploadsCommandInput, options?: __HttpHandlerOptions): Promise<ListUploadsCommandOutput>;
            listUploads(args: ListUploadsCommandInput, cb: (err: any, data?: ListUploadsCommandOutput) => void): void;
            listUploads(args: ListUploadsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListUploadsCommandOutput) => void): void;
            /**
                * <p>Returns information about all Amazon Virtual Private Cloud (VPC) endpoint
                *             configurations in the AWS account.</p>
                */
            listVPCEConfigurations(args: ListVPCEConfigurationsCommandInput, options?: __HttpHandlerOptions): Promise<ListVPCEConfigurationsCommandOutput>;
            listVPCEConfigurations(args: ListVPCEConfigurationsCommandInput, cb: (err: any, data?: ListVPCEConfigurationsCommandOutput) => void): void;
            listVPCEConfigurations(args: ListVPCEConfigurationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListVPCEConfigurationsCommandOutput) => void): void;
            /**
                * <p>Immediately purchases offerings for an AWS account. Offerings renew with the latest total purchased
                *             quantity for an offering, unless the renewal was overridden. The API returns a <code>NotEligible</code>
                *             error if the user is not permitted to invoke the operation. If you must be able to invoke this operation,
                *             contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.</p>
                */
            purchaseOffering(args: PurchaseOfferingCommandInput, options?: __HttpHandlerOptions): Promise<PurchaseOfferingCommandOutput>;
            purchaseOffering(args: PurchaseOfferingCommandInput, cb: (err: any, data?: PurchaseOfferingCommandOutput) => void): void;
            purchaseOffering(args: PurchaseOfferingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PurchaseOfferingCommandOutput) => void): void;
            /**
                * <p>Explicitly sets the quantity of devices to renew for an offering, starting from the
                *                 <code>effectiveDate</code> of the next period. The API returns a <code>NotEligible</code> error if the
                *             user is not permitted to invoke the operation. If you must be able to invoke this operation, contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.</p>
                */
            renewOffering(args: RenewOfferingCommandInput, options?: __HttpHandlerOptions): Promise<RenewOfferingCommandOutput>;
            renewOffering(args: RenewOfferingCommandInput, cb: (err: any, data?: RenewOfferingCommandOutput) => void): void;
            renewOffering(args: RenewOfferingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RenewOfferingCommandOutput) => void): void;
            /**
                * <p>Schedules a run.</p>
                */
            scheduleRun(args: ScheduleRunCommandInput, options?: __HttpHandlerOptions): Promise<ScheduleRunCommandOutput>;
            scheduleRun(args: ScheduleRunCommandInput, cb: (err: any, data?: ScheduleRunCommandOutput) => void): void;
            scheduleRun(args: ScheduleRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ScheduleRunCommandOutput) => void): void;
            /**
                * <p>Initiates a stop request for the current job. AWS Device Farm immediately stops the job on the device
                *             where tests have not started. You are not billed for this device. On the device where tests have started,
                *             setup suite and teardown suite tests run to completion on the device. You are billed for setup, teardown,
                *             and any tests that were in progress or already completed.</p>
                */
            stopJob(args: StopJobCommandInput, options?: __HttpHandlerOptions): Promise<StopJobCommandOutput>;
            stopJob(args: StopJobCommandInput, cb: (err: any, data?: StopJobCommandOutput) => void): void;
            stopJob(args: StopJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopJobCommandOutput) => void): void;
            /**
                * <p>Ends a specified remote access session.</p>
                */
            stopRemoteAccessSession(args: StopRemoteAccessSessionCommandInput, options?: __HttpHandlerOptions): Promise<StopRemoteAccessSessionCommandOutput>;
            stopRemoteAccessSession(args: StopRemoteAccessSessionCommandInput, cb: (err: any, data?: StopRemoteAccessSessionCommandOutput) => void): void;
            stopRemoteAccessSession(args: StopRemoteAccessSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopRemoteAccessSessionCommandOutput) => void): void;
            /**
                * <p>Initiates a stop request for the current test run. AWS Device Farm immediately stops the run on devices
                *             where tests have not started. You are not billed for these devices. On devices where tests have started
                *             executing, setup suite and teardown suite tests run to completion on those devices. You are billed for
                *             setup, teardown, and any tests that were in progress or already completed.</p>
                */
            stopRun(args: StopRunCommandInput, options?: __HttpHandlerOptions): Promise<StopRunCommandOutput>;
            stopRun(args: StopRunCommandInput, cb: (err: any, data?: StopRunCommandOutput) => void): void;
            stopRun(args: StopRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopRunCommandOutput) => void): void;
            /**
                * <p>Associates the specified tags to a resource with the specified <code>resourceArn</code>. If existing tags
                *             on a resource are not specified in the request parameters, they are not changed. When a resource is deleted,
                *             the tags associated with that resource are also deleted.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Deletes the specified tags from a resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates information about a private device instance.</p>
                */
            updateDeviceInstance(args: UpdateDeviceInstanceCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDeviceInstanceCommandOutput>;
            updateDeviceInstance(args: UpdateDeviceInstanceCommandInput, cb: (err: any, data?: UpdateDeviceInstanceCommandOutput) => void): void;
            updateDeviceInstance(args: UpdateDeviceInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDeviceInstanceCommandOutput) => void): void;
            /**
                * <p>Modifies the name, description, and rules in a device pool given the attributes and
                *             the pool ARN. Rule updates are all-or-nothing, meaning they can only be updated as a
                *             whole (or not at all).</p>
                */
            updateDevicePool(args: UpdateDevicePoolCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDevicePoolCommandOutput>;
            updateDevicePool(args: UpdateDevicePoolCommandInput, cb: (err: any, data?: UpdateDevicePoolCommandOutput) => void): void;
            updateDevicePool(args: UpdateDevicePoolCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDevicePoolCommandOutput) => void): void;
            /**
                * <p>Updates information about an existing private device instance profile.</p>
                */
            updateInstanceProfile(args: UpdateInstanceProfileCommandInput, options?: __HttpHandlerOptions): Promise<UpdateInstanceProfileCommandOutput>;
            updateInstanceProfile(args: UpdateInstanceProfileCommandInput, cb: (err: any, data?: UpdateInstanceProfileCommandOutput) => void): void;
            updateInstanceProfile(args: UpdateInstanceProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateInstanceProfileCommandOutput) => void): void;
            /**
                * <p>Updates the network profile.</p>
                */
            updateNetworkProfile(args: UpdateNetworkProfileCommandInput, options?: __HttpHandlerOptions): Promise<UpdateNetworkProfileCommandOutput>;
            updateNetworkProfile(args: UpdateNetworkProfileCommandInput, cb: (err: any, data?: UpdateNetworkProfileCommandOutput) => void): void;
            updateNetworkProfile(args: UpdateNetworkProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateNetworkProfileCommandOutput) => void): void;
            /**
                * <p>Modifies the specified project name, given the project ARN and a new
                *             name.</p>
                */
            updateProject(args: UpdateProjectCommandInput, options?: __HttpHandlerOptions): Promise<UpdateProjectCommandOutput>;
            updateProject(args: UpdateProjectCommandInput, cb: (err: any, data?: UpdateProjectCommandOutput) => void): void;
            updateProject(args: UpdateProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateProjectCommandOutput) => void): void;
            /**
                * <p>Change details of a project.</p>
                */
            updateTestGridProject(args: UpdateTestGridProjectCommandInput, options?: __HttpHandlerOptions): Promise<UpdateTestGridProjectCommandOutput>;
            updateTestGridProject(args: UpdateTestGridProjectCommandInput, cb: (err: any, data?: UpdateTestGridProjectCommandOutput) => void): void;
            updateTestGridProject(args: UpdateTestGridProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateTestGridProjectCommandOutput) => void): void;
            /**
                * <p>Updates an uploaded test spec.</p>
                */
            updateUpload(args: UpdateUploadCommandInput, options?: __HttpHandlerOptions): Promise<UpdateUploadCommandOutput>;
            updateUpload(args: UpdateUploadCommandInput, cb: (err: any, data?: UpdateUploadCommandOutput) => void): void;
            updateUpload(args: UpdateUploadCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateUploadCommandOutput) => void): void;
            /**
                * <p>Updates information about an Amazon Virtual Private Cloud (VPC) endpoint configuration.</p>
                */
            updateVPCEConfiguration(args: UpdateVPCEConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateVPCEConfigurationCommandOutput>;
            updateVPCEConfiguration(args: UpdateVPCEConfigurationCommandInput, cb: (err: any, data?: UpdateVPCEConfigurationCommandOutput) => void): void;
            updateVPCEConfiguration(args: UpdateVPCEConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateVPCEConfigurationCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateDevicePoolCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { CreateDevicePoolRequest, CreateDevicePoolResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface CreateDevicePoolCommandInput extends CreateDevicePoolRequest {
    }
    export interface CreateDevicePoolCommandOutput extends CreateDevicePoolResult, __MetadataBearer {
    }
    /**
        * <p>Creates a device pool.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, CreateDevicePoolCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, CreateDevicePoolCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new CreateDevicePoolCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDevicePoolCommandInput} for command's `input` shape.
        * @see {@link CreateDevicePoolCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class CreateDevicePoolCommand extends $Command<CreateDevicePoolCommandInput, CreateDevicePoolCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: CreateDevicePoolCommandInput;
            constructor(input: CreateDevicePoolCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDevicePoolCommandInput, CreateDevicePoolCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateInstanceProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { CreateInstanceProfileRequest, CreateInstanceProfileResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface CreateInstanceProfileCommandInput extends CreateInstanceProfileRequest {
    }
    export interface CreateInstanceProfileCommandOutput extends CreateInstanceProfileResult, __MetadataBearer {
    }
    /**
        * <p>Creates a profile that can be applied to one or more private fleet device
        *             instances.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, CreateInstanceProfileCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, CreateInstanceProfileCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new CreateInstanceProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateInstanceProfileCommandInput} for command's `input` shape.
        * @see {@link CreateInstanceProfileCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class CreateInstanceProfileCommand extends $Command<CreateInstanceProfileCommandInput, CreateInstanceProfileCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: CreateInstanceProfileCommandInput;
            constructor(input: CreateInstanceProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateInstanceProfileCommandInput, CreateInstanceProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateNetworkProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { CreateNetworkProfileRequest, CreateNetworkProfileResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface CreateNetworkProfileCommandInput extends CreateNetworkProfileRequest {
    }
    export interface CreateNetworkProfileCommandOutput extends CreateNetworkProfileResult, __MetadataBearer {
    }
    /**
        * <p>Creates a network profile.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, CreateNetworkProfileCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, CreateNetworkProfileCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new CreateNetworkProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateNetworkProfileCommandInput} for command's `input` shape.
        * @see {@link CreateNetworkProfileCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class CreateNetworkProfileCommand extends $Command<CreateNetworkProfileCommandInput, CreateNetworkProfileCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: CreateNetworkProfileCommandInput;
            constructor(input: CreateNetworkProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateNetworkProfileCommandInput, CreateNetworkProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { CreateProjectRequest, CreateProjectResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface CreateProjectCommandInput extends CreateProjectRequest {
    }
    export interface CreateProjectCommandOutput extends CreateProjectResult, __MetadataBearer {
    }
    /**
        * <p>Creates a project.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, CreateProjectCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, CreateProjectCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new CreateProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateProjectCommandInput} for command's `input` shape.
        * @see {@link CreateProjectCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class CreateProjectCommand extends $Command<CreateProjectCommandInput, CreateProjectCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: CreateProjectCommandInput;
            constructor(input: CreateProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateProjectCommandInput, CreateProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateRemoteAccessSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { CreateRemoteAccessSessionRequest, CreateRemoteAccessSessionResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface CreateRemoteAccessSessionCommandInput extends CreateRemoteAccessSessionRequest {
    }
    export interface CreateRemoteAccessSessionCommandOutput extends CreateRemoteAccessSessionResult, __MetadataBearer {
    }
    /**
        * <p>Specifies and starts a remote access session.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, CreateRemoteAccessSessionCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, CreateRemoteAccessSessionCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new CreateRemoteAccessSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRemoteAccessSessionCommandInput} for command's `input` shape.
        * @see {@link CreateRemoteAccessSessionCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class CreateRemoteAccessSessionCommand extends $Command<CreateRemoteAccessSessionCommandInput, CreateRemoteAccessSessionCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: CreateRemoteAccessSessionCommandInput;
            constructor(input: CreateRemoteAccessSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRemoteAccessSessionCommandInput, CreateRemoteAccessSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateTestGridProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { CreateTestGridProjectRequest, CreateTestGridProjectResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface CreateTestGridProjectCommandInput extends CreateTestGridProjectRequest {
    }
    export interface CreateTestGridProjectCommandOutput extends CreateTestGridProjectResult, __MetadataBearer {
    }
    /**
        * <p>Creates a Selenium testing project. Projects are used to track <a>TestGridSession</a>
        *          instances.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, CreateTestGridProjectCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, CreateTestGridProjectCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new CreateTestGridProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateTestGridProjectCommandInput} for command's `input` shape.
        * @see {@link CreateTestGridProjectCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class CreateTestGridProjectCommand extends $Command<CreateTestGridProjectCommandInput, CreateTestGridProjectCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: CreateTestGridProjectCommandInput;
            constructor(input: CreateTestGridProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateTestGridProjectCommandInput, CreateTestGridProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateTestGridUrlCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { CreateTestGridUrlRequest, CreateTestGridUrlResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface CreateTestGridUrlCommandInput extends CreateTestGridUrlRequest {
    }
    export interface CreateTestGridUrlCommandOutput extends CreateTestGridUrlResult, __MetadataBearer {
    }
    /**
        * <p>Creates a signed, short-term URL that can be passed to a Selenium <code>RemoteWebDriver</code>
        *          constructor.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, CreateTestGridUrlCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, CreateTestGridUrlCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new CreateTestGridUrlCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateTestGridUrlCommandInput} for command's `input` shape.
        * @see {@link CreateTestGridUrlCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class CreateTestGridUrlCommand extends $Command<CreateTestGridUrlCommandInput, CreateTestGridUrlCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: CreateTestGridUrlCommandInput;
            constructor(input: CreateTestGridUrlCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateTestGridUrlCommandInput, CreateTestGridUrlCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateUploadCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { CreateUploadRequest, CreateUploadResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface CreateUploadCommandInput extends CreateUploadRequest {
    }
    export interface CreateUploadCommandOutput extends CreateUploadResult, __MetadataBearer {
    }
    /**
        * <p>Uploads an app or test scripts.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, CreateUploadCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, CreateUploadCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new CreateUploadCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateUploadCommandInput} for command's `input` shape.
        * @see {@link CreateUploadCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class CreateUploadCommand extends $Command<CreateUploadCommandInput, CreateUploadCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: CreateUploadCommandInput;
            constructor(input: CreateUploadCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateUploadCommandInput, CreateUploadCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateVPCEConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { CreateVPCEConfigurationRequest, CreateVPCEConfigurationResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface CreateVPCEConfigurationCommandInput extends CreateVPCEConfigurationRequest {
    }
    export interface CreateVPCEConfigurationCommandOutput extends CreateVPCEConfigurationResult, __MetadataBearer {
    }
    /**
        * <p>Creates a configuration record in Device Farm for your Amazon Virtual Private Cloud
        *             (VPC) endpoint.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, CreateVPCEConfigurationCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, CreateVPCEConfigurationCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new CreateVPCEConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateVPCEConfigurationCommandInput} for command's `input` shape.
        * @see {@link CreateVPCEConfigurationCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class CreateVPCEConfigurationCommand extends $Command<CreateVPCEConfigurationCommandInput, CreateVPCEConfigurationCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: CreateVPCEConfigurationCommandInput;
            constructor(input: CreateVPCEConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateVPCEConfigurationCommandInput, CreateVPCEConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteDevicePoolCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { DeleteDevicePoolRequest, DeleteDevicePoolResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface DeleteDevicePoolCommandInput extends DeleteDevicePoolRequest {
    }
    export interface DeleteDevicePoolCommandOutput extends DeleteDevicePoolResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a device pool given the pool ARN. Does not allow deletion of curated pools
        *             owned by the system.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, DeleteDevicePoolCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, DeleteDevicePoolCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new DeleteDevicePoolCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDevicePoolCommandInput} for command's `input` shape.
        * @see {@link DeleteDevicePoolCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class DeleteDevicePoolCommand extends $Command<DeleteDevicePoolCommandInput, DeleteDevicePoolCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: DeleteDevicePoolCommandInput;
            constructor(input: DeleteDevicePoolCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDevicePoolCommandInput, DeleteDevicePoolCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteInstanceProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { DeleteInstanceProfileRequest, DeleteInstanceProfileResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface DeleteInstanceProfileCommandInput extends DeleteInstanceProfileRequest {
    }
    export interface DeleteInstanceProfileCommandOutput extends DeleteInstanceProfileResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a profile that can be applied to one or more private device instances.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, DeleteInstanceProfileCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, DeleteInstanceProfileCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new DeleteInstanceProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteInstanceProfileCommandInput} for command's `input` shape.
        * @see {@link DeleteInstanceProfileCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class DeleteInstanceProfileCommand extends $Command<DeleteInstanceProfileCommandInput, DeleteInstanceProfileCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: DeleteInstanceProfileCommandInput;
            constructor(input: DeleteInstanceProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteInstanceProfileCommandInput, DeleteInstanceProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteNetworkProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { DeleteNetworkProfileRequest, DeleteNetworkProfileResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface DeleteNetworkProfileCommandInput extends DeleteNetworkProfileRequest {
    }
    export interface DeleteNetworkProfileCommandOutput extends DeleteNetworkProfileResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a network profile.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, DeleteNetworkProfileCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, DeleteNetworkProfileCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new DeleteNetworkProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteNetworkProfileCommandInput} for command's `input` shape.
        * @see {@link DeleteNetworkProfileCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class DeleteNetworkProfileCommand extends $Command<DeleteNetworkProfileCommandInput, DeleteNetworkProfileCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: DeleteNetworkProfileCommandInput;
            constructor(input: DeleteNetworkProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteNetworkProfileCommandInput, DeleteNetworkProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { DeleteProjectRequest, DeleteProjectResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface DeleteProjectCommandInput extends DeleteProjectRequest {
    }
    export interface DeleteProjectCommandOutput extends DeleteProjectResult, __MetadataBearer {
    }
    /**
        * <p>Deletes an AWS Device Farm project, given the project ARN.</p>
        *         <p> Deleting this resource does not stop an in-progress run.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, DeleteProjectCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, DeleteProjectCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new DeleteProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteProjectCommandInput} for command's `input` shape.
        * @see {@link DeleteProjectCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class DeleteProjectCommand extends $Command<DeleteProjectCommandInput, DeleteProjectCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: DeleteProjectCommandInput;
            constructor(input: DeleteProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteProjectCommandInput, DeleteProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteRemoteAccessSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { DeleteRemoteAccessSessionRequest, DeleteRemoteAccessSessionResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface DeleteRemoteAccessSessionCommandInput extends DeleteRemoteAccessSessionRequest {
    }
    export interface DeleteRemoteAccessSessionCommandOutput extends DeleteRemoteAccessSessionResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a completed remote access session and its results.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, DeleteRemoteAccessSessionCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, DeleteRemoteAccessSessionCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new DeleteRemoteAccessSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRemoteAccessSessionCommandInput} for command's `input` shape.
        * @see {@link DeleteRemoteAccessSessionCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class DeleteRemoteAccessSessionCommand extends $Command<DeleteRemoteAccessSessionCommandInput, DeleteRemoteAccessSessionCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: DeleteRemoteAccessSessionCommandInput;
            constructor(input: DeleteRemoteAccessSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRemoteAccessSessionCommandInput, DeleteRemoteAccessSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { DeleteRunRequest, DeleteRunResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface DeleteRunCommandInput extends DeleteRunRequest {
    }
    export interface DeleteRunCommandOutput extends DeleteRunResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the run, given the run ARN.</p>
        *         <p> Deleting this resource does not stop an in-progress run.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, DeleteRunCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, DeleteRunCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new DeleteRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRunCommandInput} for command's `input` shape.
        * @see {@link DeleteRunCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class DeleteRunCommand extends $Command<DeleteRunCommandInput, DeleteRunCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: DeleteRunCommandInput;
            constructor(input: DeleteRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRunCommandInput, DeleteRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteTestGridProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { DeleteTestGridProjectRequest, DeleteTestGridProjectResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface DeleteTestGridProjectCommandInput extends DeleteTestGridProjectRequest {
    }
    export interface DeleteTestGridProjectCommandOutput extends DeleteTestGridProjectResult, __MetadataBearer {
    }
    /**
        * <p> Deletes a Selenium testing project and all content generated under it. </p>
        *          <important>
        *             <p>You cannot undo this operation.</p>
        *          </important>
        *          <note>
        *             <p>You cannot delete a project if it has active sessions.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, DeleteTestGridProjectCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, DeleteTestGridProjectCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new DeleteTestGridProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteTestGridProjectCommandInput} for command's `input` shape.
        * @see {@link DeleteTestGridProjectCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class DeleteTestGridProjectCommand extends $Command<DeleteTestGridProjectCommandInput, DeleteTestGridProjectCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: DeleteTestGridProjectCommandInput;
            constructor(input: DeleteTestGridProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteTestGridProjectCommandInput, DeleteTestGridProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteUploadCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { DeleteUploadRequest, DeleteUploadResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface DeleteUploadCommandInput extends DeleteUploadRequest {
    }
    export interface DeleteUploadCommandOutput extends DeleteUploadResult, __MetadataBearer {
    }
    /**
        * <p>Deletes an upload given the upload ARN.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, DeleteUploadCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, DeleteUploadCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new DeleteUploadCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteUploadCommandInput} for command's `input` shape.
        * @see {@link DeleteUploadCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class DeleteUploadCommand extends $Command<DeleteUploadCommandInput, DeleteUploadCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: DeleteUploadCommandInput;
            constructor(input: DeleteUploadCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteUploadCommandInput, DeleteUploadCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteVPCEConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { DeleteVPCEConfigurationRequest, DeleteVPCEConfigurationResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface DeleteVPCEConfigurationCommandInput extends DeleteVPCEConfigurationRequest {
    }
    export interface DeleteVPCEConfigurationCommandOutput extends DeleteVPCEConfigurationResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a configuration for your Amazon Virtual Private Cloud (VPC) endpoint.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, DeleteVPCEConfigurationCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, DeleteVPCEConfigurationCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new DeleteVPCEConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteVPCEConfigurationCommandInput} for command's `input` shape.
        * @see {@link DeleteVPCEConfigurationCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class DeleteVPCEConfigurationCommand extends $Command<DeleteVPCEConfigurationCommandInput, DeleteVPCEConfigurationCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: DeleteVPCEConfigurationCommandInput;
            constructor(input: DeleteVPCEConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteVPCEConfigurationCommandInput, DeleteVPCEConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetAccountSettingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { GetAccountSettingsRequest, GetAccountSettingsResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface GetAccountSettingsCommandInput extends GetAccountSettingsRequest {
    }
    export interface GetAccountSettingsCommandOutput extends GetAccountSettingsResult, __MetadataBearer {
    }
    /**
        * <p>Returns the number of unmetered iOS or unmetered Android devices that have been purchased by the
        *             account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, GetAccountSettingsCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, GetAccountSettingsCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new GetAccountSettingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAccountSettingsCommandInput} for command's `input` shape.
        * @see {@link GetAccountSettingsCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class GetAccountSettingsCommand extends $Command<GetAccountSettingsCommandInput, GetAccountSettingsCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: GetAccountSettingsCommandInput;
            constructor(input: GetAccountSettingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAccountSettingsCommandInput, GetAccountSettingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetDeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { GetDeviceRequest, GetDeviceResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface GetDeviceCommandInput extends GetDeviceRequest {
    }
    export interface GetDeviceCommandOutput extends GetDeviceResult, __MetadataBearer {
    }
    /**
        * <p>Gets information about a unique device type.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, GetDeviceCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, GetDeviceCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new GetDeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDeviceCommandInput} for command's `input` shape.
        * @see {@link GetDeviceCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class GetDeviceCommand extends $Command<GetDeviceCommandInput, GetDeviceCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: GetDeviceCommandInput;
            constructor(input: GetDeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDeviceCommandInput, GetDeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetDeviceInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { GetDeviceInstanceRequest, GetDeviceInstanceResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface GetDeviceInstanceCommandInput extends GetDeviceInstanceRequest {
    }
    export interface GetDeviceInstanceCommandOutput extends GetDeviceInstanceResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about a device instance that belongs to a private device fleet.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, GetDeviceInstanceCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, GetDeviceInstanceCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new GetDeviceInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDeviceInstanceCommandInput} for command's `input` shape.
        * @see {@link GetDeviceInstanceCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class GetDeviceInstanceCommand extends $Command<GetDeviceInstanceCommandInput, GetDeviceInstanceCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: GetDeviceInstanceCommandInput;
            constructor(input: GetDeviceInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDeviceInstanceCommandInput, GetDeviceInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetDevicePoolCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { GetDevicePoolRequest, GetDevicePoolResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface GetDevicePoolCommandInput extends GetDevicePoolRequest {
    }
    export interface GetDevicePoolCommandOutput extends GetDevicePoolResult, __MetadataBearer {
    }
    /**
        * <p>Gets information about a device pool.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, GetDevicePoolCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, GetDevicePoolCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new GetDevicePoolCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDevicePoolCommandInput} for command's `input` shape.
        * @see {@link GetDevicePoolCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class GetDevicePoolCommand extends $Command<GetDevicePoolCommandInput, GetDevicePoolCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: GetDevicePoolCommandInput;
            constructor(input: GetDevicePoolCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDevicePoolCommandInput, GetDevicePoolCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetDevicePoolCompatibilityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { GetDevicePoolCompatibilityRequest, GetDevicePoolCompatibilityResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface GetDevicePoolCompatibilityCommandInput extends GetDevicePoolCompatibilityRequest {
    }
    export interface GetDevicePoolCompatibilityCommandOutput extends GetDevicePoolCompatibilityResult, __MetadataBearer {
    }
    /**
        * <p>Gets information about compatibility with a device pool.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, GetDevicePoolCompatibilityCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, GetDevicePoolCompatibilityCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new GetDevicePoolCompatibilityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDevicePoolCompatibilityCommandInput} for command's `input` shape.
        * @see {@link GetDevicePoolCompatibilityCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class GetDevicePoolCompatibilityCommand extends $Command<GetDevicePoolCompatibilityCommandInput, GetDevicePoolCompatibilityCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: GetDevicePoolCompatibilityCommandInput;
            constructor(input: GetDevicePoolCompatibilityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDevicePoolCompatibilityCommandInput, GetDevicePoolCompatibilityCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetInstanceProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { GetInstanceProfileRequest, GetInstanceProfileResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface GetInstanceProfileCommandInput extends GetInstanceProfileRequest {
    }
    export interface GetInstanceProfileCommandOutput extends GetInstanceProfileResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about the specified instance profile.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, GetInstanceProfileCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, GetInstanceProfileCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new GetInstanceProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetInstanceProfileCommandInput} for command's `input` shape.
        * @see {@link GetInstanceProfileCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class GetInstanceProfileCommand extends $Command<GetInstanceProfileCommandInput, GetInstanceProfileCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: GetInstanceProfileCommandInput;
            constructor(input: GetInstanceProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetInstanceProfileCommandInput, GetInstanceProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { GetJobRequest, GetJobResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface GetJobCommandInput extends GetJobRequest {
    }
    export interface GetJobCommandOutput extends GetJobResult, __MetadataBearer {
    }
    /**
        * <p>Gets information about a job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, GetJobCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, GetJobCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new GetJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetJobCommandInput} for command's `input` shape.
        * @see {@link GetJobCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class GetJobCommand extends $Command<GetJobCommandInput, GetJobCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: GetJobCommandInput;
            constructor(input: GetJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetJobCommandInput, GetJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetNetworkProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { GetNetworkProfileRequest, GetNetworkProfileResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface GetNetworkProfileCommandInput extends GetNetworkProfileRequest {
    }
    export interface GetNetworkProfileCommandOutput extends GetNetworkProfileResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about a network profile.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, GetNetworkProfileCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, GetNetworkProfileCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new GetNetworkProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetNetworkProfileCommandInput} for command's `input` shape.
        * @see {@link GetNetworkProfileCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class GetNetworkProfileCommand extends $Command<GetNetworkProfileCommandInput, GetNetworkProfileCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: GetNetworkProfileCommandInput;
            constructor(input: GetNetworkProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetNetworkProfileCommandInput, GetNetworkProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetOfferingStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { GetOfferingStatusRequest, GetOfferingStatusResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface GetOfferingStatusCommandInput extends GetOfferingStatusRequest {
    }
    export interface GetOfferingStatusCommandOutput extends GetOfferingStatusResult, __MetadataBearer {
    }
    /**
        * <p>Gets the current status and future status of all offerings purchased by an AWS account. The response
        *             indicates how many offerings are currently available and the offerings that will be available in the next
        *             period. The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the
        *             operation. If you must be able to invoke this operation, contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, GetOfferingStatusCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, GetOfferingStatusCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new GetOfferingStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetOfferingStatusCommandInput} for command's `input` shape.
        * @see {@link GetOfferingStatusCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class GetOfferingStatusCommand extends $Command<GetOfferingStatusCommandInput, GetOfferingStatusCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: GetOfferingStatusCommandInput;
            constructor(input: GetOfferingStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetOfferingStatusCommandInput, GetOfferingStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { GetProjectRequest, GetProjectResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface GetProjectCommandInput extends GetProjectRequest {
    }
    export interface GetProjectCommandOutput extends GetProjectResult, __MetadataBearer {
    }
    /**
        * <p>Gets information about a project.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, GetProjectCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, GetProjectCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new GetProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetProjectCommandInput} for command's `input` shape.
        * @see {@link GetProjectCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class GetProjectCommand extends $Command<GetProjectCommandInput, GetProjectCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: GetProjectCommandInput;
            constructor(input: GetProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetProjectCommandInput, GetProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetRemoteAccessSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { GetRemoteAccessSessionRequest, GetRemoteAccessSessionResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface GetRemoteAccessSessionCommandInput extends GetRemoteAccessSessionRequest {
    }
    export interface GetRemoteAccessSessionCommandOutput extends GetRemoteAccessSessionResult, __MetadataBearer {
    }
    /**
        * <p>Returns a link to a currently running remote access session.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, GetRemoteAccessSessionCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, GetRemoteAccessSessionCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new GetRemoteAccessSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRemoteAccessSessionCommandInput} for command's `input` shape.
        * @see {@link GetRemoteAccessSessionCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class GetRemoteAccessSessionCommand extends $Command<GetRemoteAccessSessionCommandInput, GetRemoteAccessSessionCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: GetRemoteAccessSessionCommandInput;
            constructor(input: GetRemoteAccessSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRemoteAccessSessionCommandInput, GetRemoteAccessSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { GetRunRequest, GetRunResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface GetRunCommandInput extends GetRunRequest {
    }
    export interface GetRunCommandOutput extends GetRunResult, __MetadataBearer {
    }
    /**
        * <p>Gets information about a run.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, GetRunCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, GetRunCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new GetRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRunCommandInput} for command's `input` shape.
        * @see {@link GetRunCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class GetRunCommand extends $Command<GetRunCommandInput, GetRunCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: GetRunCommandInput;
            constructor(input: GetRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRunCommandInput, GetRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetSuiteCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { GetSuiteRequest, GetSuiteResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface GetSuiteCommandInput extends GetSuiteRequest {
    }
    export interface GetSuiteCommandOutput extends GetSuiteResult, __MetadataBearer {
    }
    /**
        * <p>Gets information about a suite.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, GetSuiteCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, GetSuiteCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new GetSuiteCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSuiteCommandInput} for command's `input` shape.
        * @see {@link GetSuiteCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class GetSuiteCommand extends $Command<GetSuiteCommandInput, GetSuiteCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: GetSuiteCommandInput;
            constructor(input: GetSuiteCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSuiteCommandInput, GetSuiteCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetTestCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { GetTestRequest, GetTestResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface GetTestCommandInput extends GetTestRequest {
    }
    export interface GetTestCommandOutput extends GetTestResult, __MetadataBearer {
    }
    /**
        * <p>Gets information about a test.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, GetTestCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, GetTestCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new GetTestCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTestCommandInput} for command's `input` shape.
        * @see {@link GetTestCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class GetTestCommand extends $Command<GetTestCommandInput, GetTestCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: GetTestCommandInput;
            constructor(input: GetTestCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTestCommandInput, GetTestCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetTestGridProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { GetTestGridProjectRequest, GetTestGridProjectResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface GetTestGridProjectCommandInput extends GetTestGridProjectRequest {
    }
    export interface GetTestGridProjectCommandOutput extends GetTestGridProjectResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about a Selenium testing project.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, GetTestGridProjectCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, GetTestGridProjectCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new GetTestGridProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTestGridProjectCommandInput} for command's `input` shape.
        * @see {@link GetTestGridProjectCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class GetTestGridProjectCommand extends $Command<GetTestGridProjectCommandInput, GetTestGridProjectCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: GetTestGridProjectCommandInput;
            constructor(input: GetTestGridProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTestGridProjectCommandInput, GetTestGridProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetTestGridSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { GetTestGridSessionRequest, GetTestGridSessionResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface GetTestGridSessionCommandInput extends GetTestGridSessionRequest {
    }
    export interface GetTestGridSessionCommandOutput extends GetTestGridSessionResult, __MetadataBearer {
    }
    /**
        * <p>A session is an instance of a browser created through a <code>RemoteWebDriver</code> with the URL from <a>CreateTestGridUrlResult$url</a>. You can use the following to look up sessions:</p>
        *          <ul>
        *             <li>
        *                <p>The session ARN (<a>GetTestGridSessionRequest$sessionArn</a>).</p>
        *             </li>
        *             <li>
        *                <p>The project ARN and a session ID (<a>GetTestGridSessionRequest$projectArn</a> and <a>GetTestGridSessionRequest$sessionId</a>).</p>
        *             </li>
        *          </ul>
        *          <p></p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, GetTestGridSessionCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, GetTestGridSessionCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new GetTestGridSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTestGridSessionCommandInput} for command's `input` shape.
        * @see {@link GetTestGridSessionCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class GetTestGridSessionCommand extends $Command<GetTestGridSessionCommandInput, GetTestGridSessionCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: GetTestGridSessionCommandInput;
            constructor(input: GetTestGridSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTestGridSessionCommandInput, GetTestGridSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetUploadCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { GetUploadRequest, GetUploadResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface GetUploadCommandInput extends GetUploadRequest {
    }
    export interface GetUploadCommandOutput extends GetUploadResult, __MetadataBearer {
    }
    /**
        * <p>Gets information about an upload.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, GetUploadCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, GetUploadCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new GetUploadCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetUploadCommandInput} for command's `input` shape.
        * @see {@link GetUploadCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class GetUploadCommand extends $Command<GetUploadCommandInput, GetUploadCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: GetUploadCommandInput;
            constructor(input: GetUploadCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetUploadCommandInput, GetUploadCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetVPCEConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { GetVPCEConfigurationRequest, GetVPCEConfigurationResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface GetVPCEConfigurationCommandInput extends GetVPCEConfigurationRequest {
    }
    export interface GetVPCEConfigurationCommandOutput extends GetVPCEConfigurationResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about the configuration settings for your Amazon Virtual Private
        *             Cloud (VPC) endpoint.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, GetVPCEConfigurationCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, GetVPCEConfigurationCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new GetVPCEConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetVPCEConfigurationCommandInput} for command's `input` shape.
        * @see {@link GetVPCEConfigurationCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class GetVPCEConfigurationCommand extends $Command<GetVPCEConfigurationCommandInput, GetVPCEConfigurationCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: GetVPCEConfigurationCommandInput;
            constructor(input: GetVPCEConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetVPCEConfigurationCommandInput, GetVPCEConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/InstallToRemoteAccessSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { InstallToRemoteAccessSessionRequest, InstallToRemoteAccessSessionResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface InstallToRemoteAccessSessionCommandInput extends InstallToRemoteAccessSessionRequest {
    }
    export interface InstallToRemoteAccessSessionCommandOutput extends InstallToRemoteAccessSessionResult, __MetadataBearer {
    }
    /**
        * <p>Installs an application to the device in a remote access session. For Android
        *             applications, the file must be in .apk format. For iOS applications, the file must be in
        *             .ipa format.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, InstallToRemoteAccessSessionCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, InstallToRemoteAccessSessionCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new InstallToRemoteAccessSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link InstallToRemoteAccessSessionCommandInput} for command's `input` shape.
        * @see {@link InstallToRemoteAccessSessionCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class InstallToRemoteAccessSessionCommand extends $Command<InstallToRemoteAccessSessionCommandInput, InstallToRemoteAccessSessionCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: InstallToRemoteAccessSessionCommandInput;
            constructor(input: InstallToRemoteAccessSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<InstallToRemoteAccessSessionCommandInput, InstallToRemoteAccessSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListArtifactsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListArtifactsRequest, ListArtifactsResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListArtifactsCommandInput extends ListArtifactsRequest {
    }
    export interface ListArtifactsCommandOutput extends ListArtifactsResult, __MetadataBearer {
    }
    /**
        * <p>Gets information about artifacts.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListArtifactsCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListArtifactsCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListArtifactsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListArtifactsCommandInput} for command's `input` shape.
        * @see {@link ListArtifactsCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListArtifactsCommand extends $Command<ListArtifactsCommandInput, ListArtifactsCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListArtifactsCommandInput;
            constructor(input: ListArtifactsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListArtifactsCommandInput, ListArtifactsCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListDeviceInstancesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListDeviceInstancesRequest, ListDeviceInstancesResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListDeviceInstancesCommandInput extends ListDeviceInstancesRequest {
    }
    export interface ListDeviceInstancesCommandOutput extends ListDeviceInstancesResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about the private device instances associated with one or more AWS
        *             accounts.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListDeviceInstancesCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListDeviceInstancesCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListDeviceInstancesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDeviceInstancesCommandInput} for command's `input` shape.
        * @see {@link ListDeviceInstancesCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListDeviceInstancesCommand extends $Command<ListDeviceInstancesCommandInput, ListDeviceInstancesCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListDeviceInstancesCommandInput;
            constructor(input: ListDeviceInstancesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDeviceInstancesCommandInput, ListDeviceInstancesCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListDevicePoolsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListDevicePoolsRequest, ListDevicePoolsResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListDevicePoolsCommandInput extends ListDevicePoolsRequest {
    }
    export interface ListDevicePoolsCommandOutput extends ListDevicePoolsResult, __MetadataBearer {
    }
    /**
        * <p>Gets information about device pools.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListDevicePoolsCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListDevicePoolsCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListDevicePoolsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDevicePoolsCommandInput} for command's `input` shape.
        * @see {@link ListDevicePoolsCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListDevicePoolsCommand extends $Command<ListDevicePoolsCommandInput, ListDevicePoolsCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListDevicePoolsCommandInput;
            constructor(input: ListDevicePoolsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDevicePoolsCommandInput, ListDevicePoolsCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListDevicesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListDevicesRequest, ListDevicesResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListDevicesCommandInput extends ListDevicesRequest {
    }
    export interface ListDevicesCommandOutput extends ListDevicesResult, __MetadataBearer {
    }
    /**
        * <p>Gets information about unique device types.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListDevicesCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListDevicesCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListDevicesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDevicesCommandInput} for command's `input` shape.
        * @see {@link ListDevicesCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListDevicesCommand extends $Command<ListDevicesCommandInput, ListDevicesCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListDevicesCommandInput;
            constructor(input: ListDevicesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDevicesCommandInput, ListDevicesCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListInstanceProfilesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListInstanceProfilesRequest, ListInstanceProfilesResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListInstanceProfilesCommandInput extends ListInstanceProfilesRequest {
    }
    export interface ListInstanceProfilesCommandOutput extends ListInstanceProfilesResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about all the instance profiles in an AWS account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListInstanceProfilesCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListInstanceProfilesCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListInstanceProfilesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListInstanceProfilesCommandInput} for command's `input` shape.
        * @see {@link ListInstanceProfilesCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListInstanceProfilesCommand extends $Command<ListInstanceProfilesCommandInput, ListInstanceProfilesCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListInstanceProfilesCommandInput;
            constructor(input: ListInstanceProfilesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListInstanceProfilesCommandInput, ListInstanceProfilesCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListJobsRequest, ListJobsResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListJobsCommandInput extends ListJobsRequest {
    }
    export interface ListJobsCommandOutput extends ListJobsResult, __MetadataBearer {
    }
    /**
        * <p>Gets information about jobs for a given test run.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListJobsCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListJobsCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListJobsCommandInput} for command's `input` shape.
        * @see {@link ListJobsCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListJobsCommand extends $Command<ListJobsCommandInput, ListJobsCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListJobsCommandInput;
            constructor(input: ListJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListJobsCommandInput, ListJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListNetworkProfilesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListNetworkProfilesRequest, ListNetworkProfilesResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListNetworkProfilesCommandInput extends ListNetworkProfilesRequest {
    }
    export interface ListNetworkProfilesCommandOutput extends ListNetworkProfilesResult, __MetadataBearer {
    }
    /**
        * <p>Returns the list of available network profiles.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListNetworkProfilesCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListNetworkProfilesCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListNetworkProfilesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListNetworkProfilesCommandInput} for command's `input` shape.
        * @see {@link ListNetworkProfilesCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListNetworkProfilesCommand extends $Command<ListNetworkProfilesCommandInput, ListNetworkProfilesCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListNetworkProfilesCommandInput;
            constructor(input: ListNetworkProfilesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListNetworkProfilesCommandInput, ListNetworkProfilesCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListOfferingPromotionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListOfferingPromotionsRequest, ListOfferingPromotionsResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListOfferingPromotionsCommandInput extends ListOfferingPromotionsRequest {
    }
    export interface ListOfferingPromotionsCommandOutput extends ListOfferingPromotionsResult, __MetadataBearer {
    }
    /**
        * <p>Returns a list of offering promotions. Each offering promotion record contains the ID and description
        *             of the promotion. The API returns a <code>NotEligible</code> error if the caller is not permitted to invoke
        *             the operation. Contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a> if you must be able to invoke this operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListOfferingPromotionsCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListOfferingPromotionsCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListOfferingPromotionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListOfferingPromotionsCommandInput} for command's `input` shape.
        * @see {@link ListOfferingPromotionsCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListOfferingPromotionsCommand extends $Command<ListOfferingPromotionsCommandInput, ListOfferingPromotionsCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListOfferingPromotionsCommandInput;
            constructor(input: ListOfferingPromotionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListOfferingPromotionsCommandInput, ListOfferingPromotionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListOfferingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListOfferingsRequest, ListOfferingsResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListOfferingsCommandInput extends ListOfferingsRequest {
    }
    export interface ListOfferingsCommandOutput extends ListOfferingsResult, __MetadataBearer {
    }
    /**
        * <p>Returns a list of products or offerings that the user can manage through the API. Each offering record
        *             indicates the recurring price per unit and the frequency for that offering. The API returns a
        *                 <code>NotEligible</code> error if the user is not permitted to invoke the operation.  If you must be
        *             able to invoke this operation, contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListOfferingsCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListOfferingsCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListOfferingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListOfferingsCommandInput} for command's `input` shape.
        * @see {@link ListOfferingsCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListOfferingsCommand extends $Command<ListOfferingsCommandInput, ListOfferingsCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListOfferingsCommandInput;
            constructor(input: ListOfferingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListOfferingsCommandInput, ListOfferingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListOfferingTransactionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListOfferingTransactionsRequest, ListOfferingTransactionsResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListOfferingTransactionsCommandInput extends ListOfferingTransactionsRequest {
    }
    export interface ListOfferingTransactionsCommandOutput extends ListOfferingTransactionsResult, __MetadataBearer {
    }
    /**
        * <p>Returns a list of all historical purchases, renewals, and system renewal transactions for an AWS
        *             account. The list is paginated and ordered by a descending timestamp (most recent transactions are first).
        *             The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. If
        *             you must be able to invoke this operation, contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListOfferingTransactionsCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListOfferingTransactionsCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListOfferingTransactionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListOfferingTransactionsCommandInput} for command's `input` shape.
        * @see {@link ListOfferingTransactionsCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListOfferingTransactionsCommand extends $Command<ListOfferingTransactionsCommandInput, ListOfferingTransactionsCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListOfferingTransactionsCommandInput;
            constructor(input: ListOfferingTransactionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListOfferingTransactionsCommandInput, ListOfferingTransactionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListProjectsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListProjectsRequest, ListProjectsResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListProjectsCommandInput extends ListProjectsRequest {
    }
    export interface ListProjectsCommandOutput extends ListProjectsResult, __MetadataBearer {
    }
    /**
        * <p>Gets information about projects.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListProjectsCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListProjectsCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListProjectsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListProjectsCommandInput} for command's `input` shape.
        * @see {@link ListProjectsCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListProjectsCommand extends $Command<ListProjectsCommandInput, ListProjectsCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListProjectsCommandInput;
            constructor(input: ListProjectsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListProjectsCommandInput, ListProjectsCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListRemoteAccessSessionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListRemoteAccessSessionsRequest, ListRemoteAccessSessionsResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListRemoteAccessSessionsCommandInput extends ListRemoteAccessSessionsRequest {
    }
    export interface ListRemoteAccessSessionsCommandOutput extends ListRemoteAccessSessionsResult, __MetadataBearer {
    }
    /**
        * <p>Returns a list of all currently running remote access sessions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListRemoteAccessSessionsCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListRemoteAccessSessionsCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListRemoteAccessSessionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRemoteAccessSessionsCommandInput} for command's `input` shape.
        * @see {@link ListRemoteAccessSessionsCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListRemoteAccessSessionsCommand extends $Command<ListRemoteAccessSessionsCommandInput, ListRemoteAccessSessionsCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListRemoteAccessSessionsCommandInput;
            constructor(input: ListRemoteAccessSessionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRemoteAccessSessionsCommandInput, ListRemoteAccessSessionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListRunsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListRunsRequest, ListRunsResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListRunsCommandInput extends ListRunsRequest {
    }
    export interface ListRunsCommandOutput extends ListRunsResult, __MetadataBearer {
    }
    /**
        * <p>Gets information about runs, given an AWS Device Farm project ARN.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListRunsCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListRunsCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListRunsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRunsCommandInput} for command's `input` shape.
        * @see {@link ListRunsCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListRunsCommand extends $Command<ListRunsCommandInput, ListRunsCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListRunsCommandInput;
            constructor(input: ListRunsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRunsCommandInput, ListRunsCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListSamplesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListSamplesRequest, ListSamplesResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListSamplesCommandInput extends ListSamplesRequest {
    }
    export interface ListSamplesCommandOutput extends ListSamplesResult, __MetadataBearer {
    }
    /**
        * <p>Gets information about samples, given an AWS Device Farm job ARN.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListSamplesCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListSamplesCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListSamplesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSamplesCommandInput} for command's `input` shape.
        * @see {@link ListSamplesCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListSamplesCommand extends $Command<ListSamplesCommandInput, ListSamplesCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListSamplesCommandInput;
            constructor(input: ListSamplesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSamplesCommandInput, ListSamplesCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListSuitesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListSuitesRequest, ListSuitesResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListSuitesCommandInput extends ListSuitesRequest {
    }
    export interface ListSuitesCommandOutput extends ListSuitesResult, __MetadataBearer {
    }
    /**
        * <p>Gets information about test suites for a given job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListSuitesCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListSuitesCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListSuitesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSuitesCommandInput} for command's `input` shape.
        * @see {@link ListSuitesCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListSuitesCommand extends $Command<ListSuitesCommandInput, ListSuitesCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListSuitesCommandInput;
            constructor(input: ListSuitesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSuitesCommandInput, ListSuitesCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>List the tags for an AWS Device Farm resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListTagsForResourceCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListTagsForResourceCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListTestGridProjectsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListTestGridProjectsRequest, ListTestGridProjectsResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListTestGridProjectsCommandInput extends ListTestGridProjectsRequest {
    }
    export interface ListTestGridProjectsCommandOutput extends ListTestGridProjectsResult, __MetadataBearer {
    }
    /**
        * <p>Gets a list of all Selenium testing projects in your account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListTestGridProjectsCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListTestGridProjectsCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListTestGridProjectsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTestGridProjectsCommandInput} for command's `input` shape.
        * @see {@link ListTestGridProjectsCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListTestGridProjectsCommand extends $Command<ListTestGridProjectsCommandInput, ListTestGridProjectsCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListTestGridProjectsCommandInput;
            constructor(input: ListTestGridProjectsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTestGridProjectsCommandInput, ListTestGridProjectsCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListTestGridSessionActionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListTestGridSessionActionsRequest, ListTestGridSessionActionsResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListTestGridSessionActionsCommandInput extends ListTestGridSessionActionsRequest {
    }
    export interface ListTestGridSessionActionsCommandOutput extends ListTestGridSessionActionsResult, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the actions taken in a <a>TestGridSession</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListTestGridSessionActionsCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListTestGridSessionActionsCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListTestGridSessionActionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTestGridSessionActionsCommandInput} for command's `input` shape.
        * @see {@link ListTestGridSessionActionsCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListTestGridSessionActionsCommand extends $Command<ListTestGridSessionActionsCommandInput, ListTestGridSessionActionsCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListTestGridSessionActionsCommandInput;
            constructor(input: ListTestGridSessionActionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTestGridSessionActionsCommandInput, ListTestGridSessionActionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListTestGridSessionArtifactsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListTestGridSessionArtifactsRequest, ListTestGridSessionArtifactsResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListTestGridSessionArtifactsCommandInput extends ListTestGridSessionArtifactsRequest {
    }
    export interface ListTestGridSessionArtifactsCommandOutput extends ListTestGridSessionArtifactsResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of artifacts created during the session.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListTestGridSessionArtifactsCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListTestGridSessionArtifactsCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListTestGridSessionArtifactsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTestGridSessionArtifactsCommandInput} for command's `input` shape.
        * @see {@link ListTestGridSessionArtifactsCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListTestGridSessionArtifactsCommand extends $Command<ListTestGridSessionArtifactsCommandInput, ListTestGridSessionArtifactsCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListTestGridSessionArtifactsCommandInput;
            constructor(input: ListTestGridSessionArtifactsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTestGridSessionArtifactsCommandInput, ListTestGridSessionArtifactsCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListTestGridSessionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListTestGridSessionsRequest, ListTestGridSessionsResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListTestGridSessionsCommandInput extends ListTestGridSessionsRequest {
    }
    export interface ListTestGridSessionsCommandOutput extends ListTestGridSessionsResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of sessions for a <a>TestGridProject</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListTestGridSessionsCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListTestGridSessionsCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListTestGridSessionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTestGridSessionsCommandInput} for command's `input` shape.
        * @see {@link ListTestGridSessionsCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListTestGridSessionsCommand extends $Command<ListTestGridSessionsCommandInput, ListTestGridSessionsCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListTestGridSessionsCommandInput;
            constructor(input: ListTestGridSessionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTestGridSessionsCommandInput, ListTestGridSessionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListTestsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListTestsRequest, ListTestsResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListTestsCommandInput extends ListTestsRequest {
    }
    export interface ListTestsCommandOutput extends ListTestsResult, __MetadataBearer {
    }
    /**
        * <p>Gets information about tests in a given test suite.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListTestsCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListTestsCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListTestsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTestsCommandInput} for command's `input` shape.
        * @see {@link ListTestsCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListTestsCommand extends $Command<ListTestsCommandInput, ListTestsCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListTestsCommandInput;
            constructor(input: ListTestsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTestsCommandInput, ListTestsCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListUniqueProblemsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListUniqueProblemsRequest, ListUniqueProblemsResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListUniqueProblemsCommandInput extends ListUniqueProblemsRequest {
    }
    export interface ListUniqueProblemsCommandOutput extends ListUniqueProblemsResult, __MetadataBearer {
    }
    /**
        * <p>Gets information about unique problems, such as exceptions or crashes.</p>
        *         <p>Unique problems are defined as a single instance of an error across a run, job, or suite. For example,
        *             if a call in your application consistently raises an exception (<code>OutOfBoundsException in
        *                 MyActivity.java:386</code>), <code>ListUniqueProblems</code> returns a single entry instead of many
        *             individual entries for that exception.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListUniqueProblemsCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListUniqueProblemsCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListUniqueProblemsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListUniqueProblemsCommandInput} for command's `input` shape.
        * @see {@link ListUniqueProblemsCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListUniqueProblemsCommand extends $Command<ListUniqueProblemsCommandInput, ListUniqueProblemsCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListUniqueProblemsCommandInput;
            constructor(input: ListUniqueProblemsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListUniqueProblemsCommandInput, ListUniqueProblemsCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListUploadsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListUploadsRequest, ListUploadsResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListUploadsCommandInput extends ListUploadsRequest {
    }
    export interface ListUploadsCommandOutput extends ListUploadsResult, __MetadataBearer {
    }
    /**
        * <p>Gets information about uploads, given an AWS Device Farm project ARN.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListUploadsCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListUploadsCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListUploadsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListUploadsCommandInput} for command's `input` shape.
        * @see {@link ListUploadsCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListUploadsCommand extends $Command<ListUploadsCommandInput, ListUploadsCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListUploadsCommandInput;
            constructor(input: ListUploadsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListUploadsCommandInput, ListUploadsCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListVPCEConfigurationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ListVPCEConfigurationsRequest, ListVPCEConfigurationsResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ListVPCEConfigurationsCommandInput extends ListVPCEConfigurationsRequest {
    }
    export interface ListVPCEConfigurationsCommandOutput extends ListVPCEConfigurationsResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about all Amazon Virtual Private Cloud (VPC) endpoint
        *             configurations in the AWS account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ListVPCEConfigurationsCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ListVPCEConfigurationsCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ListVPCEConfigurationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListVPCEConfigurationsCommandInput} for command's `input` shape.
        * @see {@link ListVPCEConfigurationsCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ListVPCEConfigurationsCommand extends $Command<ListVPCEConfigurationsCommandInput, ListVPCEConfigurationsCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ListVPCEConfigurationsCommandInput;
            constructor(input: ListVPCEConfigurationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListVPCEConfigurationsCommandInput, ListVPCEConfigurationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/PurchaseOfferingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { PurchaseOfferingRequest, PurchaseOfferingResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface PurchaseOfferingCommandInput extends PurchaseOfferingRequest {
    }
    export interface PurchaseOfferingCommandOutput extends PurchaseOfferingResult, __MetadataBearer {
    }
    /**
        * <p>Immediately purchases offerings for an AWS account. Offerings renew with the latest total purchased
        *             quantity for an offering, unless the renewal was overridden. The API returns a <code>NotEligible</code>
        *             error if the user is not permitted to invoke the operation. If you must be able to invoke this operation,
        *             contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, PurchaseOfferingCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, PurchaseOfferingCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new PurchaseOfferingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PurchaseOfferingCommandInput} for command's `input` shape.
        * @see {@link PurchaseOfferingCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class PurchaseOfferingCommand extends $Command<PurchaseOfferingCommandInput, PurchaseOfferingCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: PurchaseOfferingCommandInput;
            constructor(input: PurchaseOfferingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PurchaseOfferingCommandInput, PurchaseOfferingCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/RenewOfferingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { RenewOfferingRequest, RenewOfferingResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface RenewOfferingCommandInput extends RenewOfferingRequest {
    }
    export interface RenewOfferingCommandOutput extends RenewOfferingResult, __MetadataBearer {
    }
    /**
        * <p>Explicitly sets the quantity of devices to renew for an offering, starting from the
        *                 <code>effectiveDate</code> of the next period. The API returns a <code>NotEligible</code> error if the
        *             user is not permitted to invoke the operation. If you must be able to invoke this operation, contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, RenewOfferingCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, RenewOfferingCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new RenewOfferingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RenewOfferingCommandInput} for command's `input` shape.
        * @see {@link RenewOfferingCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class RenewOfferingCommand extends $Command<RenewOfferingCommandInput, RenewOfferingCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: RenewOfferingCommandInput;
            constructor(input: RenewOfferingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RenewOfferingCommandInput, RenewOfferingCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ScheduleRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { ScheduleRunRequest, ScheduleRunResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface ScheduleRunCommandInput extends ScheduleRunRequest {
    }
    export interface ScheduleRunCommandOutput extends ScheduleRunResult, __MetadataBearer {
    }
    /**
        * <p>Schedules a run.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, ScheduleRunCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, ScheduleRunCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new ScheduleRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ScheduleRunCommandInput} for command's `input` shape.
        * @see {@link ScheduleRunCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class ScheduleRunCommand extends $Command<ScheduleRunCommandInput, ScheduleRunCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: ScheduleRunCommandInput;
            constructor(input: ScheduleRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ScheduleRunCommandInput, ScheduleRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/StopJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { StopJobRequest, StopJobResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface StopJobCommandInput extends StopJobRequest {
    }
    export interface StopJobCommandOutput extends StopJobResult, __MetadataBearer {
    }
    /**
        * <p>Initiates a stop request for the current job. AWS Device Farm immediately stops the job on the device
        *             where tests have not started. You are not billed for this device. On the device where tests have started,
        *             setup suite and teardown suite tests run to completion on the device. You are billed for setup, teardown,
        *             and any tests that were in progress or already completed.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, StopJobCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, StopJobCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new StopJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopJobCommandInput} for command's `input` shape.
        * @see {@link StopJobCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class StopJobCommand extends $Command<StopJobCommandInput, StopJobCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: StopJobCommandInput;
            constructor(input: StopJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopJobCommandInput, StopJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/StopRemoteAccessSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { StopRemoteAccessSessionRequest, StopRemoteAccessSessionResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface StopRemoteAccessSessionCommandInput extends StopRemoteAccessSessionRequest {
    }
    export interface StopRemoteAccessSessionCommandOutput extends StopRemoteAccessSessionResult, __MetadataBearer {
    }
    /**
        * <p>Ends a specified remote access session.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, StopRemoteAccessSessionCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, StopRemoteAccessSessionCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new StopRemoteAccessSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopRemoteAccessSessionCommandInput} for command's `input` shape.
        * @see {@link StopRemoteAccessSessionCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class StopRemoteAccessSessionCommand extends $Command<StopRemoteAccessSessionCommandInput, StopRemoteAccessSessionCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: StopRemoteAccessSessionCommandInput;
            constructor(input: StopRemoteAccessSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopRemoteAccessSessionCommandInput, StopRemoteAccessSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/StopRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { StopRunRequest, StopRunResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface StopRunCommandInput extends StopRunRequest {
    }
    export interface StopRunCommandOutput extends StopRunResult, __MetadataBearer {
    }
    /**
        * <p>Initiates a stop request for the current test run. AWS Device Farm immediately stops the run on devices
        *             where tests have not started. You are not billed for these devices. On devices where tests have started
        *             executing, setup suite and teardown suite tests run to completion on those devices. You are billed for
        *             setup, teardown, and any tests that were in progress or already completed.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, StopRunCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, StopRunCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new StopRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopRunCommandInput} for command's `input` shape.
        * @see {@link StopRunCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class StopRunCommand extends $Command<StopRunCommandInput, StopRunCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: StopRunCommandInput;
            constructor(input: StopRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopRunCommandInput, StopRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Associates the specified tags to a resource with the specified <code>resourceArn</code>. If existing tags
        *             on a resource are not specified in the request parameters, they are not changed. When a resource is deleted,
        *             the tags associated with that resource are also deleted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, TagResourceCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, TagResourceCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified tags from a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, UntagResourceCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, UntagResourceCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateDeviceInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { UpdateDeviceInstanceRequest, UpdateDeviceInstanceResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface UpdateDeviceInstanceCommandInput extends UpdateDeviceInstanceRequest {
    }
    export interface UpdateDeviceInstanceCommandOutput extends UpdateDeviceInstanceResult, __MetadataBearer {
    }
    /**
        * <p>Updates information about a private device instance.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, UpdateDeviceInstanceCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, UpdateDeviceInstanceCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new UpdateDeviceInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDeviceInstanceCommandInput} for command's `input` shape.
        * @see {@link UpdateDeviceInstanceCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class UpdateDeviceInstanceCommand extends $Command<UpdateDeviceInstanceCommandInput, UpdateDeviceInstanceCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: UpdateDeviceInstanceCommandInput;
            constructor(input: UpdateDeviceInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDeviceInstanceCommandInput, UpdateDeviceInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateDevicePoolCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { UpdateDevicePoolRequest, UpdateDevicePoolResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface UpdateDevicePoolCommandInput extends UpdateDevicePoolRequest {
    }
    export interface UpdateDevicePoolCommandOutput extends UpdateDevicePoolResult, __MetadataBearer {
    }
    /**
        * <p>Modifies the name, description, and rules in a device pool given the attributes and
        *             the pool ARN. Rule updates are all-or-nothing, meaning they can only be updated as a
        *             whole (or not at all).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, UpdateDevicePoolCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, UpdateDevicePoolCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new UpdateDevicePoolCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDevicePoolCommandInput} for command's `input` shape.
        * @see {@link UpdateDevicePoolCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class UpdateDevicePoolCommand extends $Command<UpdateDevicePoolCommandInput, UpdateDevicePoolCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: UpdateDevicePoolCommandInput;
            constructor(input: UpdateDevicePoolCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDevicePoolCommandInput, UpdateDevicePoolCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateInstanceProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { UpdateInstanceProfileRequest, UpdateInstanceProfileResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface UpdateInstanceProfileCommandInput extends UpdateInstanceProfileRequest {
    }
    export interface UpdateInstanceProfileCommandOutput extends UpdateInstanceProfileResult, __MetadataBearer {
    }
    /**
        * <p>Updates information about an existing private device instance profile.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, UpdateInstanceProfileCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, UpdateInstanceProfileCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new UpdateInstanceProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateInstanceProfileCommandInput} for command's `input` shape.
        * @see {@link UpdateInstanceProfileCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class UpdateInstanceProfileCommand extends $Command<UpdateInstanceProfileCommandInput, UpdateInstanceProfileCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: UpdateInstanceProfileCommandInput;
            constructor(input: UpdateInstanceProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateInstanceProfileCommandInput, UpdateInstanceProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateNetworkProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { UpdateNetworkProfileRequest, UpdateNetworkProfileResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface UpdateNetworkProfileCommandInput extends UpdateNetworkProfileRequest {
    }
    export interface UpdateNetworkProfileCommandOutput extends UpdateNetworkProfileResult, __MetadataBearer {
    }
    /**
        * <p>Updates the network profile.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, UpdateNetworkProfileCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, UpdateNetworkProfileCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new UpdateNetworkProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateNetworkProfileCommandInput} for command's `input` shape.
        * @see {@link UpdateNetworkProfileCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class UpdateNetworkProfileCommand extends $Command<UpdateNetworkProfileCommandInput, UpdateNetworkProfileCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: UpdateNetworkProfileCommandInput;
            constructor(input: UpdateNetworkProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateNetworkProfileCommandInput, UpdateNetworkProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { UpdateProjectRequest, UpdateProjectResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface UpdateProjectCommandInput extends UpdateProjectRequest {
    }
    export interface UpdateProjectCommandOutput extends UpdateProjectResult, __MetadataBearer {
    }
    /**
        * <p>Modifies the specified project name, given the project ARN and a new
        *             name.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, UpdateProjectCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, UpdateProjectCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new UpdateProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateProjectCommandInput} for command's `input` shape.
        * @see {@link UpdateProjectCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class UpdateProjectCommand extends $Command<UpdateProjectCommandInput, UpdateProjectCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: UpdateProjectCommandInput;
            constructor(input: UpdateProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateProjectCommandInput, UpdateProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateTestGridProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { UpdateTestGridProjectRequest, UpdateTestGridProjectResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface UpdateTestGridProjectCommandInput extends UpdateTestGridProjectRequest {
    }
    export interface UpdateTestGridProjectCommandOutput extends UpdateTestGridProjectResult, __MetadataBearer {
    }
    /**
        * <p>Change details of a project.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, UpdateTestGridProjectCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, UpdateTestGridProjectCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new UpdateTestGridProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateTestGridProjectCommandInput} for command's `input` shape.
        * @see {@link UpdateTestGridProjectCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class UpdateTestGridProjectCommand extends $Command<UpdateTestGridProjectCommandInput, UpdateTestGridProjectCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: UpdateTestGridProjectCommandInput;
            constructor(input: UpdateTestGridProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateTestGridProjectCommandInput, UpdateTestGridProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateUploadCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { UpdateUploadRequest, UpdateUploadResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface UpdateUploadCommandInput extends UpdateUploadRequest {
    }
    export interface UpdateUploadCommandOutput extends UpdateUploadResult, __MetadataBearer {
    }
    /**
        * <p>Updates an uploaded test spec.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, UpdateUploadCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, UpdateUploadCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new UpdateUploadCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateUploadCommandInput} for command's `input` shape.
        * @see {@link UpdateUploadCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class UpdateUploadCommand extends $Command<UpdateUploadCommandInput, UpdateUploadCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: UpdateUploadCommandInput;
            constructor(input: UpdateUploadCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateUploadCommandInput, UpdateUploadCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateVPCEConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeviceFarmClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient";
    import { UpdateVPCEConfigurationRequest, UpdateVPCEConfigurationResult } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0";
    export interface UpdateVPCEConfigurationCommandInput extends UpdateVPCEConfigurationRequest {
    }
    export interface UpdateVPCEConfigurationCommandOutput extends UpdateVPCEConfigurationResult, __MetadataBearer {
    }
    /**
        * <p>Updates information about an Amazon Virtual Private Cloud (VPC) endpoint configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DeviceFarmClient, UpdateVPCEConfigurationCommand } from "@aws-sdk/client-device-farm"; // ES Modules import
        * // const { DeviceFarmClient, UpdateVPCEConfigurationCommand } = require("@aws-sdk/client-device-farm"); // CommonJS import
        * const client = new DeviceFarmClient(config);
        * const command = new UpdateVPCEConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateVPCEConfigurationCommandInput} for command's `input` shape.
        * @see {@link UpdateVPCEConfigurationCommandOutput} for command's `response` shape.
        * @see {@link DeviceFarmClientResolvedConfig | config} for DeviceFarmClient's `config` shape.
        *
        */
    export class UpdateVPCEConfigurationCommand extends $Command<UpdateVPCEConfigurationCommandInput, UpdateVPCEConfigurationCommandOutput, DeviceFarmClientResolvedConfig> {
            readonly input: UpdateVPCEConfigurationCommandInput;
            constructor(input: UpdateVPCEConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DeviceFarmClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateVPCEConfigurationCommandInput, UpdateVPCEConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/DeviceFarmClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateDevicePoolCommandInput, CreateDevicePoolCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateDevicePoolCommand";
    import { CreateInstanceProfileCommandInput, CreateInstanceProfileCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateInstanceProfileCommand";
    import { CreateNetworkProfileCommandInput, CreateNetworkProfileCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateNetworkProfileCommand";
    import { CreateProjectCommandInput, CreateProjectCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateProjectCommand";
    import { CreateRemoteAccessSessionCommandInput, CreateRemoteAccessSessionCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateRemoteAccessSessionCommand";
    import { CreateTestGridProjectCommandInput, CreateTestGridProjectCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateTestGridProjectCommand";
    import { CreateTestGridUrlCommandInput, CreateTestGridUrlCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateTestGridUrlCommand";
    import { CreateUploadCommandInput, CreateUploadCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateUploadCommand";
    import { CreateVPCEConfigurationCommandInput, CreateVPCEConfigurationCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/CreateVPCEConfigurationCommand";
    import { DeleteDevicePoolCommandInput, DeleteDevicePoolCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteDevicePoolCommand";
    import { DeleteInstanceProfileCommandInput, DeleteInstanceProfileCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteInstanceProfileCommand";
    import { DeleteNetworkProfileCommandInput, DeleteNetworkProfileCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteNetworkProfileCommand";
    import { DeleteProjectCommandInput, DeleteProjectCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteProjectCommand";
    import { DeleteRemoteAccessSessionCommandInput, DeleteRemoteAccessSessionCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteRemoteAccessSessionCommand";
    import { DeleteRunCommandInput, DeleteRunCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteRunCommand";
    import { DeleteTestGridProjectCommandInput, DeleteTestGridProjectCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteTestGridProjectCommand";
    import { DeleteUploadCommandInput, DeleteUploadCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteUploadCommand";
    import { DeleteVPCEConfigurationCommandInput, DeleteVPCEConfigurationCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/DeleteVPCEConfigurationCommand";
    import { GetAccountSettingsCommandInput, GetAccountSettingsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetAccountSettingsCommand";
    import { GetDeviceCommandInput, GetDeviceCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetDeviceCommand";
    import { GetDeviceInstanceCommandInput, GetDeviceInstanceCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetDeviceInstanceCommand";
    import { GetDevicePoolCommandInput, GetDevicePoolCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetDevicePoolCommand";
    import { GetDevicePoolCompatibilityCommandInput, GetDevicePoolCompatibilityCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetDevicePoolCompatibilityCommand";
    import { GetInstanceProfileCommandInput, GetInstanceProfileCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetInstanceProfileCommand";
    import { GetJobCommandInput, GetJobCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetJobCommand";
    import { GetNetworkProfileCommandInput, GetNetworkProfileCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetNetworkProfileCommand";
    import { GetOfferingStatusCommandInput, GetOfferingStatusCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetOfferingStatusCommand";
    import { GetProjectCommandInput, GetProjectCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetProjectCommand";
    import { GetRemoteAccessSessionCommandInput, GetRemoteAccessSessionCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetRemoteAccessSessionCommand";
    import { GetRunCommandInput, GetRunCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetRunCommand";
    import { GetSuiteCommandInput, GetSuiteCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetSuiteCommand";
    import { GetTestCommandInput, GetTestCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetTestCommand";
    import { GetTestGridProjectCommandInput, GetTestGridProjectCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetTestGridProjectCommand";
    import { GetTestGridSessionCommandInput, GetTestGridSessionCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetTestGridSessionCommand";
    import { GetUploadCommandInput, GetUploadCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetUploadCommand";
    import { GetVPCEConfigurationCommandInput, GetVPCEConfigurationCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/GetVPCEConfigurationCommand";
    import { InstallToRemoteAccessSessionCommandInput, InstallToRemoteAccessSessionCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/InstallToRemoteAccessSessionCommand";
    import { ListArtifactsCommandInput, ListArtifactsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListArtifactsCommand";
    import { ListDeviceInstancesCommandInput, ListDeviceInstancesCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListDeviceInstancesCommand";
    import { ListDevicePoolsCommandInput, ListDevicePoolsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListDevicePoolsCommand";
    import { ListDevicesCommandInput, ListDevicesCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListDevicesCommand";
    import { ListInstanceProfilesCommandInput, ListInstanceProfilesCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListInstanceProfilesCommand";
    import { ListJobsCommandInput, ListJobsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListJobsCommand";
    import { ListNetworkProfilesCommandInput, ListNetworkProfilesCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListNetworkProfilesCommand";
    import { ListOfferingPromotionsCommandInput, ListOfferingPromotionsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListOfferingPromotionsCommand";
    import { ListOfferingsCommandInput, ListOfferingsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListOfferingsCommand";
    import { ListOfferingTransactionsCommandInput, ListOfferingTransactionsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListOfferingTransactionsCommand";
    import { ListProjectsCommandInput, ListProjectsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListProjectsCommand";
    import { ListRemoteAccessSessionsCommandInput, ListRemoteAccessSessionsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListRemoteAccessSessionsCommand";
    import { ListRunsCommandInput, ListRunsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListRunsCommand";
    import { ListSamplesCommandInput, ListSamplesCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListSamplesCommand";
    import { ListSuitesCommandInput, ListSuitesCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListSuitesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListTagsForResourceCommand";
    import { ListTestGridProjectsCommandInput, ListTestGridProjectsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListTestGridProjectsCommand";
    import { ListTestGridSessionActionsCommandInput, ListTestGridSessionActionsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListTestGridSessionActionsCommand";
    import { ListTestGridSessionArtifactsCommandInput, ListTestGridSessionArtifactsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListTestGridSessionArtifactsCommand";
    import { ListTestGridSessionsCommandInput, ListTestGridSessionsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListTestGridSessionsCommand";
    import { ListTestsCommandInput, ListTestsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListTestsCommand";
    import { ListUniqueProblemsCommandInput, ListUniqueProblemsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListUniqueProblemsCommand";
    import { ListUploadsCommandInput, ListUploadsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListUploadsCommand";
    import { ListVPCEConfigurationsCommandInput, ListVPCEConfigurationsCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ListVPCEConfigurationsCommand";
    import { PurchaseOfferingCommandInput, PurchaseOfferingCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/PurchaseOfferingCommand";
    import { RenewOfferingCommandInput, RenewOfferingCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/RenewOfferingCommand";
    import { ScheduleRunCommandInput, ScheduleRunCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/ScheduleRunCommand";
    import { StopJobCommandInput, StopJobCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/StopJobCommand";
    import { StopRemoteAccessSessionCommandInput, StopRemoteAccessSessionCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/StopRemoteAccessSessionCommand";
    import { StopRunCommandInput, StopRunCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/StopRunCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UntagResourceCommand";
    import { UpdateDeviceInstanceCommandInput, UpdateDeviceInstanceCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateDeviceInstanceCommand";
    import { UpdateDevicePoolCommandInput, UpdateDevicePoolCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateDevicePoolCommand";
    import { UpdateInstanceProfileCommandInput, UpdateInstanceProfileCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateInstanceProfileCommand";
    import { UpdateNetworkProfileCommandInput, UpdateNetworkProfileCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateNetworkProfileCommand";
    import { UpdateProjectCommandInput, UpdateProjectCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateProjectCommand";
    import { UpdateTestGridProjectCommandInput, UpdateTestGridProjectCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateTestGridProjectCommand";
    import { UpdateUploadCommandInput, UpdateUploadCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateUploadCommand";
    import { UpdateVPCEConfigurationCommandInput, UpdateVPCEConfigurationCommandOutput } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/commands/UpdateVPCEConfigurationCommand";
    export type ServiceInputTypes = CreateDevicePoolCommandInput | CreateInstanceProfileCommandInput | CreateNetworkProfileCommandInput | CreateProjectCommandInput | CreateRemoteAccessSessionCommandInput | CreateTestGridProjectCommandInput | CreateTestGridUrlCommandInput | CreateUploadCommandInput | CreateVPCEConfigurationCommandInput | DeleteDevicePoolCommandInput | DeleteInstanceProfileCommandInput | DeleteNetworkProfileCommandInput | DeleteProjectCommandInput | DeleteRemoteAccessSessionCommandInput | DeleteRunCommandInput | DeleteTestGridProjectCommandInput | DeleteUploadCommandInput | DeleteVPCEConfigurationCommandInput | GetAccountSettingsCommandInput | GetDeviceCommandInput | GetDeviceInstanceCommandInput | GetDevicePoolCommandInput | GetDevicePoolCompatibilityCommandInput | GetInstanceProfileCommandInput | GetJobCommandInput | GetNetworkProfileCommandInput | GetOfferingStatusCommandInput | GetProjectCommandInput | GetRemoteAccessSessionCommandInput | GetRunCommandInput | GetSuiteCommandInput | GetTestCommandInput | GetTestGridProjectCommandInput | GetTestGridSessionCommandInput | GetUploadCommandInput | GetVPCEConfigurationCommandInput | InstallToRemoteAccessSessionCommandInput | ListArtifactsCommandInput | ListDeviceInstancesCommandInput | ListDevicePoolsCommandInput | ListDevicesCommandInput | ListInstanceProfilesCommandInput | ListJobsCommandInput | ListNetworkProfilesCommandInput | ListOfferingPromotionsCommandInput | ListOfferingTransactionsCommandInput | ListOfferingsCommandInput | ListProjectsCommandInput | ListRemoteAccessSessionsCommandInput | ListRunsCommandInput | ListSamplesCommandInput | ListSuitesCommandInput | ListTagsForResourceCommandInput | ListTestGridProjectsCommandInput | ListTestGridSessionActionsCommandInput | ListTestGridSessionArtifactsCommandInput | ListTestGridSessionsCommandInput | ListTestsCommandInput | ListUniqueProblemsCommandInput | ListUploadsCommandInput | ListVPCEConfigurationsCommandInput | PurchaseOfferingCommandInput | RenewOfferingCommandInput | ScheduleRunCommandInput | StopJobCommandInput | StopRemoteAccessSessionCommandInput | StopRunCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateDeviceInstanceCommandInput | UpdateDevicePoolCommandInput | UpdateInstanceProfileCommandInput | UpdateNetworkProfileCommandInput | UpdateProjectCommandInput | UpdateTestGridProjectCommandInput | UpdateUploadCommandInput | UpdateVPCEConfigurationCommandInput;
    export type ServiceOutputTypes = CreateDevicePoolCommandOutput | CreateInstanceProfileCommandOutput | CreateNetworkProfileCommandOutput | CreateProjectCommandOutput | CreateRemoteAccessSessionCommandOutput | CreateTestGridProjectCommandOutput | CreateTestGridUrlCommandOutput | CreateUploadCommandOutput | CreateVPCEConfigurationCommandOutput | DeleteDevicePoolCommandOutput | DeleteInstanceProfileCommandOutput | DeleteNetworkProfileCommandOutput | DeleteProjectCommandOutput | DeleteRemoteAccessSessionCommandOutput | DeleteRunCommandOutput | DeleteTestGridProjectCommandOutput | DeleteUploadCommandOutput | DeleteVPCEConfigurationCommandOutput | GetAccountSettingsCommandOutput | GetDeviceCommandOutput | GetDeviceInstanceCommandOutput | GetDevicePoolCommandOutput | GetDevicePoolCompatibilityCommandOutput | GetInstanceProfileCommandOutput | GetJobCommandOutput | GetNetworkProfileCommandOutput | GetOfferingStatusCommandOutput | GetProjectCommandOutput | GetRemoteAccessSessionCommandOutput | GetRunCommandOutput | GetSuiteCommandOutput | GetTestCommandOutput | GetTestGridProjectCommandOutput | GetTestGridSessionCommandOutput | GetUploadCommandOutput | GetVPCEConfigurationCommandOutput | InstallToRemoteAccessSessionCommandOutput | ListArtifactsCommandOutput | ListDeviceInstancesCommandOutput | ListDevicePoolsCommandOutput | ListDevicesCommandOutput | ListInstanceProfilesCommandOutput | ListJobsCommandOutput | ListNetworkProfilesCommandOutput | ListOfferingPromotionsCommandOutput | ListOfferingTransactionsCommandOutput | ListOfferingsCommandOutput | ListProjectsCommandOutput | ListRemoteAccessSessionsCommandOutput | ListRunsCommandOutput | ListSamplesCommandOutput | ListSuitesCommandOutput | ListTagsForResourceCommandOutput | ListTestGridProjectsCommandOutput | ListTestGridSessionActionsCommandOutput | ListTestGridSessionArtifactsCommandOutput | ListTestGridSessionsCommandOutput | ListTestsCommandOutput | ListUniqueProblemsCommandOutput | ListUploadsCommandOutput | ListVPCEConfigurationsCommandOutput | PurchaseOfferingCommandOutput | RenewOfferingCommandOutput | ScheduleRunCommandOutput | StopJobCommandOutput | StopRemoteAccessSessionCommandOutput | StopRunCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateDeviceInstanceCommandOutput | UpdateDevicePoolCommandOutput | UpdateInstanceProfileCommandOutput | UpdateNetworkProfileCommandOutput | UpdateProjectCommandOutput | UpdateTestGridProjectCommandOutput | UpdateUploadCommandOutput | UpdateVPCEConfigurationCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type DeviceFarmClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of DeviceFarmClient class constructor that set the region, credentials and other options.
        */
    export interface DeviceFarmClientConfig extends DeviceFarmClientConfigType {
    }
    type DeviceFarmClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of DeviceFarmClient class. This is resolved and normalized from the {@link DeviceFarmClientConfig | constructor configuration interface}.
        */
    export interface DeviceFarmClientResolvedConfig extends DeviceFarmClientResolvedConfigType {
    }
    /**
        * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p>
        *         <ul>
        *             <li>
        *                 <p>Testing on desktop browsers</p>
        *                 <p> Device Farm makes it possible for you to test your web applications on desktop browsers using
        *                     Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For
        *                     more information, see <a href="https://docs.aws.amazon.com/devicefarm/latest/testgrid/">Testing Web
        *                         Applications on Selenium with Device Farm</a>.</p>
        *             </li>
        *             <li>
        *                 <p>Testing on real mobile devices</p>
        *                 <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other
        *                     devices in the cloud. For more information, see the <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/">Device Farm Developer Guide</a>.</p>
        *             </li>
        *          </ul>
        */
    export class DeviceFarmClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, DeviceFarmClientResolvedConfig> {
            /**
                * The resolved configuration of DeviceFarmClient class. This is resolved and normalized from the {@link DeviceFarmClientConfig | constructor configuration interface}.
                */
            readonly config: DeviceFarmClientResolvedConfig;
            constructor(configuration: DeviceFarmClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { DeviceFarmServiceException as __BaseException } from "@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/DeviceFarmServiceException";
    /**
        * <p>Represents information about free trial device minutes for an AWS
        *             account.</p>
        */
    export interface TrialMinutes {
            /**
                * <p>The total number of free trial minutes that the account started with.</p>
                */
            total?: number;
            /**
                * <p>The number of free trial minutes remaining in the account.</p>
                */
            remaining?: number;
    }
    export namespace TrialMinutes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrialMinutes) => any;
    }
    export enum DevicePlatform {
            ANDROID = "ANDROID",
            IOS = "IOS"
    }
    /**
        * <p>A container for account-level settings in AWS Device Farm.</p>
        */
    export interface AccountSettings {
            /**
                * <p>The AWS account number specified in the <code>AccountSettings</code>
                *             container.</p>
                */
            awsAccountNumber?: string;
            /**
                * <p>Returns the unmetered devices you have purchased or want to purchase.</p>
                */
            unmeteredDevices?: Record<string, number>;
            /**
                * <p>Returns the unmetered remote access devices you have purchased or want to
                *             purchase.</p>
                */
            unmeteredRemoteAccessDevices?: Record<string, number>;
            /**
                * <p>The maximum number of minutes a test run executes before it times out.</p>
                */
            maxJobTimeoutMinutes?: number;
            /**
                * <p>Information about an AWS account's usage of free trial device minutes.</p>
                */
            trialMinutes?: TrialMinutes;
            /**
                * <p>The maximum number of device slots that the AWS account can purchase. Each maximum
                *             is expressed as an <code>offering-id:number</code> pair, where the
                *                 <code>offering-id</code> represents one of the IDs returned by the
                *                 <code>ListOfferings</code> command.</p>
                */
            maxSlots?: Record<string, number>;
            /**
                * <p>The default number of minutes (at the account level) a test run executes before it times out. The
                *             default value is 150 minutes.</p>
                */
            defaultJobTimeoutMinutes?: number;
            /**
                * <p>When set to <code>true</code>, for private devices, Device Farm does not sign your app again. For public
                *             devices, Device Farm always signs your apps again.</p>
                *         <p>For more information about how Device Farm re-signs your apps, see <a href="https://aws.amazon.com/device-farm/faq/">Do you modify my app?</a> in the <i>AWS Device
                *                 Farm FAQs</i>.</p>
                */
            skipAppResign?: boolean;
    }
    export namespace AccountSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountSettings) => any;
    }
    /**
        * <p>An invalid argument was specified.</p>
        */
    export class ArgumentException extends __BaseException {
            readonly name: "ArgumentException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ArgumentException, __BaseException>);
    }
    export enum ArtifactType {
            APPIUM_JAVA_OUTPUT = "APPIUM_JAVA_OUTPUT",
            APPIUM_JAVA_XML_OUTPUT = "APPIUM_JAVA_XML_OUTPUT",
            APPIUM_PYTHON_OUTPUT = "APPIUM_PYTHON_OUTPUT",
            APPIUM_PYTHON_XML_OUTPUT = "APPIUM_PYTHON_XML_OUTPUT",
            APPIUM_SERVER_OUTPUT = "APPIUM_SERVER_OUTPUT",
            APPLICATION_CRASH_REPORT = "APPLICATION_CRASH_REPORT",
            AUTOMATION_OUTPUT = "AUTOMATION_OUTPUT",
            CALABASH_JAVA_XML_OUTPUT = "CALABASH_JAVA_XML_OUTPUT",
            CALABASH_JSON_OUTPUT = "CALABASH_JSON_OUTPUT",
            CALABASH_PRETTY_OUTPUT = "CALABASH_PRETTY_OUTPUT",
            CALABASH_STANDARD_OUTPUT = "CALABASH_STANDARD_OUTPUT",
            CUSTOMER_ARTIFACT = "CUSTOMER_ARTIFACT",
            CUSTOMER_ARTIFACT_LOG = "CUSTOMER_ARTIFACT_LOG",
            DEVICE_LOG = "DEVICE_LOG",
            EXERCISER_MONKEY_OUTPUT = "EXERCISER_MONKEY_OUTPUT",
            EXPLORER_EVENT_LOG = "EXPLORER_EVENT_LOG",
            EXPLORER_SUMMARY_LOG = "EXPLORER_SUMMARY_LOG",
            INSTRUMENTATION_OUTPUT = "INSTRUMENTATION_OUTPUT",
            MESSAGE_LOG = "MESSAGE_LOG",
            RESULT_LOG = "RESULT_LOG",
            SCREENSHOT = "SCREENSHOT",
            SERVICE_LOG = "SERVICE_LOG",
            TESTSPEC_OUTPUT = "TESTSPEC_OUTPUT",
            UNKNOWN = "UNKNOWN",
            VIDEO = "VIDEO",
            VIDEO_LOG = "VIDEO_LOG",
            WEBKIT_LOG = "WEBKIT_LOG",
            XCTEST_LOG = "XCTEST_LOG"
    }
    /**
        * <p>Represents the output of a test. Examples of artifacts include logs and
        *             screenshots.</p>
        */
    export interface Artifact {
            /**
                * <p>The artifact's ARN.</p>
                */
            arn?: string;
            /**
                * <p>The artifact's name.</p>
                */
            name?: string;
            /**
                * <p>The artifact's type.</p>
                *         <p>Allowed values include the following:</p>
                *         <ul>
                *             <li>
                *                 <p>UNKNOWN</p>
                *             </li>
                *             <li>
                *                 <p>SCREENSHOT</p>
                *             </li>
                *             <li>
                *                 <p>DEVICE_LOG</p>
                *             </li>
                *             <li>
                *                 <p>MESSAGE_LOG</p>
                *             </li>
                *             <li>
                *                 <p>VIDEO_LOG</p>
                *             </li>
                *             <li>
                *                 <p>RESULT_LOG</p>
                *             </li>
                *             <li>
                *                 <p>SERVICE_LOG</p>
                *             </li>
                *             <li>
                *                 <p>WEBKIT_LOG</p>
                *             </li>
                *             <li>
                *                 <p>INSTRUMENTATION_OUTPUT</p>
                *             </li>
                *             <li>
                *                 <p>EXERCISER_MONKEY_OUTPUT: the artifact (log) generated by an Android fuzz test.</p>
                *             </li>
                *             <li>
                *                 <p>CALABASH_JSON_OUTPUT</p>
                *             </li>
                *             <li>
                *                 <p>CALABASH_PRETTY_OUTPUT</p>
                *             </li>
                *             <li>
                *                 <p>CALABASH_STANDARD_OUTPUT</p>
                *             </li>
                *             <li>
                *                 <p>CALABASH_JAVA_XML_OUTPUT</p>
                *             </li>
                *             <li>
                *                 <p>AUTOMATION_OUTPUT</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_SERVER_OUTPUT</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_OUTPUT</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_XML_OUTPUT</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_PYTHON_OUTPUT</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_PYTHON_XML_OUTPUT</p>
                *             </li>
                *             <li>
                *                 <p>EXPLORER_EVENT_LOG</p>
                *             </li>
                *             <li>
                *                 <p>EXPLORER_SUMMARY_LOG</p>
                *             </li>
                *             <li>
                *                 <p>APPLICATION_CRASH_REPORT</p>
                *             </li>
                *             <li>
                *                 <p>XCTEST_LOG</p>
                *             </li>
                *             <li>
                *                 <p>VIDEO</p>
                *             </li>
                *             <li>
                *                 <p>CUSTOMER_ARTIFACT</p>
                *             </li>
                *             <li>
                *                 <p>CUSTOMER_ARTIFACT_LOG</p>
                *             </li>
                *             <li>
                *                 <p>TESTSPEC_OUTPUT</p>
                *             </li>
                *          </ul>
                */
            type?: ArtifactType | string;
            /**
                * <p>The artifact's file extension.</p>
                */
            extension?: string;
            /**
                * <p>The presigned Amazon S3 URL that can be used with a GET request to download the artifact's
                *             file.</p>
                */
            url?: string;
    }
    export namespace Artifact {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Artifact) => any;
    }
    export enum ArtifactCategory {
            FILE = "FILE",
            LOG = "LOG",
            SCREENSHOT = "SCREENSHOT"
    }
    export enum BillingMethod {
            METERED = "METERED",
            UNMETERED = "UNMETERED"
    }
    /**
        * <p>The requested object could not be deleted.</p>
        */
    export class CannotDeleteException extends __BaseException {
            readonly name: "CannotDeleteException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CannotDeleteException, __BaseException>);
    }
    /**
        * <p>Represents entity counters.</p>
        */
    export interface Counters {
            /**
                * <p>The total number of entities.</p>
                */
            total?: number;
            /**
                * <p>The number of passed entities.</p>
                */
            passed?: number;
            /**
                * <p>The number of failed entities.</p>
                */
            failed?: number;
            /**
                * <p>The number of warned entities.</p>
                */
            warned?: number;
            /**
                * <p>The number of errored entities.</p>
                */
            errored?: number;
            /**
                * <p>The number of stopped entities.</p>
                */
            stopped?: number;
            /**
                * <p>The number of skipped entities.</p>
                */
            skipped?: number;
    }
    export namespace Counters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Counters) => any;
    }
    /**
        * <p>Represents the amount of CPU that an app is using on a physical device. Does not represent system-wide
        *             CPU usage.</p>
        */
    export interface CPU {
            /**
                * <p>The CPU's frequency.</p>
                */
            frequency?: string;
            /**
                * <p>The CPU's architecture (for example, x86 or ARM).</p>
                */
            architecture?: string;
            /**
                * <p>The clock speed of the device's CPU, expressed in hertz (Hz). For example, a 1.2
                *             GHz CPU is expressed as 1200000000.</p>
                */
            clock?: number;
    }
    export namespace CPU {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CPU) => any;
    }
    export enum DeviceAttribute {
            APPIUM_VERSION = "APPIUM_VERSION",
            ARN = "ARN",
            AVAILABILITY = "AVAILABILITY",
            FLEET_TYPE = "FLEET_TYPE",
            FORM_FACTOR = "FORM_FACTOR",
            INSTANCE_ARN = "INSTANCE_ARN",
            INSTANCE_LABELS = "INSTANCE_LABELS",
            MANUFACTURER = "MANUFACTURER",
            MODEL = "MODEL",
            OS_VERSION = "OS_VERSION",
            PLATFORM = "PLATFORM",
            REMOTE_ACCESS_ENABLED = "REMOTE_ACCESS_ENABLED",
            REMOTE_DEBUG_ENABLED = "REMOTE_DEBUG_ENABLED"
    }
    export enum RuleOperator {
            CONTAINS = "CONTAINS",
            EQUALS = "EQUALS",
            GREATER_THAN = "GREATER_THAN",
            GREATER_THAN_OR_EQUALS = "GREATER_THAN_OR_EQUALS",
            IN = "IN",
            LESS_THAN = "LESS_THAN",
            LESS_THAN_OR_EQUALS = "LESS_THAN_OR_EQUALS",
            NOT_IN = "NOT_IN"
    }
    /**
        * <p>Represents a condition for a device pool.</p>
        */
    export interface Rule {
            /**
                * <p>The rule's stringified attribute. For example, specify the value as
                *                 <code>"\"abc\""</code>.</p>
                *         <p>The supported operators for each attribute are provided in the following
                *             list.</p>
                *         <dl>
                *             <dt>APPIUM_VERSION</dt>
                *             <dd>
                *                     <p>The Appium version for the test.</p>
                *                     <p>Supported operators: <code>CONTAINS</code>
                *                </p>
                *                 </dd>
                *             <dt>ARN</dt>
                *             <dd>
                *                     <p>The Amazon Resource Name (ARN) of the device (for example,
                *                         <code>arn:aws:devicefarm:us-west-2::device:12345Example</code>.</p>
                *                     <p>Supported operators: <code>EQUALS</code>,
                *                             <code>IN</code>, <code>NOT_IN</code>
                *                </p>
                *                 </dd>
                *             <dt>AVAILABILITY</dt>
                *             <dd>
                *                     <p>The current availability of the device. Valid values are AVAILABLE,
                *                         HIGHLY_AVAILABLE, BUSY, or TEMPORARY_NOT_AVAILABLE.</p>
                *                     <p>Supported operators: <code>EQUALS</code>
                *                </p>
                *                 </dd>
                *             <dt>FLEET_TYPE</dt>
                *             <dd>
                *                     <p>The fleet type. Valid values are PUBLIC or PRIVATE.</p>
                *                     <p>Supported operators: <code>EQUALS</code>
                *                </p>
                *                 </dd>
                *             <dt>FORM_FACTOR</dt>
                *             <dd>
                *                     <p>The device form factor. Valid values are PHONE or TABLET.</p>
                *                     <p>Supported operators: <code>EQUALS</code>,
                *                             <code>IN</code>, <code>NOT_IN</code>
                *                </p>
                *                 </dd>
                *             <dt>INSTANCE_ARN</dt>
                *             <dd>
                *                     <p>The Amazon Resource Name (ARN) of the device instance.</p>
                *                     <p>Supported operators: <code>IN</code>,
                *                             <code>NOT_IN</code>
                *                </p>
                *                 </dd>
                *             <dt>INSTANCE_LABELS</dt>
                *             <dd>
                *                     <p>The label of the device instance.</p>
                *                     <p>Supported operators: <code>CONTAINS</code>
                *                </p>
                *                 </dd>
                *             <dt>MANUFACTURER</dt>
                *             <dd>
                *                     <p>The device manufacturer (for example, Apple).</p>
                *                     <p>Supported operators: <code>EQUALS</code>,
                *                             <code>IN</code>, <code>NOT_IN</code>
                *                </p>
                *                 </dd>
                *             <dt>MODEL</dt>
                *             <dd>
                *                     <p>The device model, such as Apple iPad Air 2 or Google Pixel.</p>
                *                     <p>Supported operators: <code>CONTAINS</code>,
                *                             <code>EQUALS</code>, <code>IN</code>, <code>NOT_IN</code>
                *                </p>
                *                 </dd>
                *             <dt>OS_VERSION</dt>
                *             <dd>
                *                     <p>The operating system version (for example, 10.3.2).</p>
                *                     <p>Supported operators: <code>EQUALS</code>,
                *                             <code>GREATER_THAN</code>, <code>GREATER_THAN_OR_EQUALS</code>,
                *                             <code>IN</code>, <code>LESS_THAN</code>,
                *                             <code>LESS_THAN_OR_EQUALS</code>, <code>NOT_IN</code>
                *                </p>
                *                 </dd>
                *             <dt>PLATFORM</dt>
                *             <dd>
                *                     <p>The device platform. Valid values are ANDROID or IOS.</p>
                *                     <p>Supported operators: <code>EQUALS</code>,
                *                             <code>IN</code>, <code>NOT_IN</code>
                *                </p>
                *                 </dd>
                *             <dt>REMOTE_ACCESS_ENABLED</dt>
                *             <dd>
                *                     <p>Whether the device is enabled for remote access. Valid values are TRUE
                *                         or FALSE.</p>
                *                     <p>Supported operators: <code>EQUALS</code>
                *                </p>
                *                 </dd>
                *             <dt>REMOTE_DEBUG_ENABLED</dt>
                *             <dd>
                *                     <p>Whether the device is enabled for remote debugging. Valid values are
                *                         TRUE or FALSE.</p>
                *                     <p>Supported operators: <code>EQUALS</code>
                *                </p>
                *                     <p>Because remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no longer
                *                             supported</a>, this filter is ignored.</p>
                *                 </dd>
                *          </dl>
                */
            attribute?: DeviceAttribute | string;
            /**
                * <p>Specifies how Device Farm compares the rule's attribute to the value. For the
                *             operators that are supported by each attribute, see the attribute
                *             descriptions.</p>
                */
            operator?: RuleOperator | string;
            /**
                * <p>The rule's value.</p>
                */
            value?: string;
    }
    export namespace Rule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Rule) => any;
    }
    /**
        * <p>Represents a request to the create device pool operation.</p>
        */
    export interface CreateDevicePoolRequest {
            /**
                * <p>The ARN of the project for the device pool.</p>
                */
            projectArn: string | undefined;
            /**
                * <p>The device pool's name.</p>
                */
            name: string | undefined;
            /**
                * <p>The device pool's description.</p>
                */
            description?: string;
            /**
                * <p>The device pool's rules.</p>
                */
            rules: Rule[] | undefined;
            /**
                * <p>The number of devices that Device Farm can add to your device pool. Device Farm adds devices that are
                *             available and meet the criteria that you assign for the <code>rules</code> parameter. Depending on how many
                *             devices meet these constraints, your device pool might contain fewer devices than the value for this
                *             parameter.</p>
                *         <p>By specifying the maximum number of devices, you can control the costs that you incur
                *             by running tests.</p>
                */
            maxDevices?: number;
    }
    export namespace CreateDevicePoolRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDevicePoolRequest) => any;
    }
    export enum DevicePoolType {
            CURATED = "CURATED",
            PRIVATE = "PRIVATE"
    }
    /**
        * <p>Represents a collection of device types.</p>
        */
    export interface DevicePool {
            /**
                * <p>The device pool's ARN.</p>
                */
            arn?: string;
            /**
                * <p>The device pool's name.</p>
                */
            name?: string;
            /**
                * <p>The device pool's description.</p>
                */
            description?: string;
            /**
                * <p>The device pool's type.</p>
                *         <p>Allowed values include:</p>
                *         <ul>
                *             <li>
                *                 <p>CURATED: A device pool that is created and managed by AWS Device
                *                     Farm.</p>
                *             </li>
                *             <li>
                *                 <p>PRIVATE: A device pool that is created and managed by the device pool
                *                     developer.</p>
                *             </li>
                *          </ul>
                */
            type?: DevicePoolType | string;
            /**
                * <p>Information about the device pool's rules.</p>
                */
            rules?: Rule[];
            /**
                * <p>The number of devices that Device Farm can add to your device pool. Device Farm adds devices that are
                *             available and meet the criteria that you assign for the <code>rules</code> parameter. Depending on how many
                *             devices meet these constraints, your device pool might contain fewer devices than the value for this
                *             parameter.</p>
                *         <p>By specifying the maximum number of devices, you can control the costs that you incur
                *             by running tests.</p>
                */
            maxDevices?: number;
    }
    export namespace DevicePool {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DevicePool) => any;
    }
    /**
        * <p>Represents the result of a create device pool request.</p>
        */
    export interface CreateDevicePoolResult {
            /**
                * <p>The newly created device pool.</p>
                */
            devicePool?: DevicePool;
    }
    export namespace CreateDevicePoolResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDevicePoolResult) => any;
    }
    /**
        * <p>A limit was exceeded.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>The specified entity was not found.</p>
        */
    export class NotFoundException extends __BaseException {
            readonly name: "NotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
    }
    /**
        * <p>There was a problem with the service account.</p>
        */
    export class ServiceAccountException extends __BaseException {
            readonly name: "ServiceAccountException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceAccountException, __BaseException>);
    }
    export interface CreateInstanceProfileRequest {
            /**
                * <p>The name of your instance profile.</p>
                */
            name: string | undefined;
            /**
                * <p>The description of your instance profile.</p>
                */
            description?: string;
            /**
                * <p>When set to <code>true</code>, Device Farm removes app packages after a test run. The default value is
                *                 <code>false</code> for private devices.</p>
                */
            packageCleanup?: boolean;
            /**
                * <p>An array of strings that specifies the list of app packages that should not be cleaned up from the device
                *             after a test run.</p>
                *         <p>The list of packages is considered only if you set <code>packageCleanup</code> to
                *             <code>true</code>.</p>
                */
            excludeAppPackagesFromCleanup?: string[];
            /**
                * <p>When set to <code>true</code>, Device Farm reboots the instance after a test run. The default value is
                *                 <code>true</code>.</p>
                */
            rebootAfterUse?: boolean;
    }
    export namespace CreateInstanceProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateInstanceProfileRequest) => any;
    }
    /**
        * <p>Represents the instance profile.</p>
        */
    export interface InstanceProfile {
            /**
                * <p>The Amazon Resource Name (ARN) of the instance profile.</p>
                */
            arn?: string;
            /**
                * <p>When set to <code>true</code>, Device Farm removes app packages after a test run. The default value is
                *                 <code>false</code> for private devices.</p>
                */
            packageCleanup?: boolean;
            /**
                * <p>An array of strings containing the list of app packages that should not be cleaned up from the device
                *             after a test run completes.</p>
                *         <p>The list of packages is considered only if you set <code>packageCleanup</code> to
                *             <code>true</code>.</p>
                */
            excludeAppPackagesFromCleanup?: string[];
            /**
                * <p>When set to <code>true</code>, Device Farm reboots the instance after a test run. The default value is
                *                 <code>true</code>.</p>
                */
            rebootAfterUse?: boolean;
            /**
                * <p>The name of the instance profile.</p>
                */
            name?: string;
            /**
                * <p>The description of the instance profile.</p>
                */
            description?: string;
    }
    export namespace InstanceProfile {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceProfile) => any;
    }
    export interface CreateInstanceProfileResult {
            /**
                * <p>An object that contains information about your instance profile.</p>
                */
            instanceProfile?: InstanceProfile;
    }
    export namespace CreateInstanceProfileResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateInstanceProfileResult) => any;
    }
    export enum NetworkProfileType {
            CURATED = "CURATED",
            PRIVATE = "PRIVATE"
    }
    export interface CreateNetworkProfileRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the project for which you want to create a
                *             network profile.</p>
                */
            projectArn: string | undefined;
            /**
                * <p>The name for the new network profile.</p>
                */
            name: string | undefined;
            /**
                * <p>The description of the network profile.</p>
                */
            description?: string;
            /**
                * <p>The type of network profile to create. Valid values are listed here.</p>
                */
            type?: NetworkProfileType | string;
            /**
                * <p>The data throughput rate in bits per second, as an integer from 0 to
                *             104857600.</p>
                */
            uplinkBandwidthBits?: number;
            /**
                * <p>The data throughput rate in bits per second, as an integer from 0 to
                *             104857600.</p>
                */
            downlinkBandwidthBits?: number;
            /**
                * <p>Delay time for all packets to destination in milliseconds as an integer from 0 to
                *             2000.</p>
                */
            uplinkDelayMs?: number;
            /**
                * <p>Delay time for all packets to destination in milliseconds as an integer from 0 to
                *             2000.</p>
                */
            downlinkDelayMs?: number;
            /**
                * <p>Time variation in the delay of received packets in milliseconds as an integer from
                *             0 to 2000.</p>
                */
            uplinkJitterMs?: number;
            /**
                * <p>Time variation in the delay of received packets in milliseconds as an integer from
                *             0 to 2000.</p>
                */
            downlinkJitterMs?: number;
            /**
                * <p>Proportion of transmitted packets that fail to arrive from 0 to 100
                *             percent.</p>
                */
            uplinkLossPercent?: number;
            /**
                * <p>Proportion of received packets that fail to arrive from 0 to 100 percent.</p>
                */
            downlinkLossPercent?: number;
    }
    export namespace CreateNetworkProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateNetworkProfileRequest) => any;
    }
    /**
        * <p>An array of settings that describes characteristics of a network profile.</p>
        */
    export interface NetworkProfile {
            /**
                * <p>The Amazon Resource Name (ARN) of the network profile.</p>
                */
            arn?: string;
            /**
                * <p>The name of the network profile.</p>
                */
            name?: string;
            /**
                * <p>The description of the network profile.</p>
                */
            description?: string;
            /**
                * <p>The type of network profile. Valid values are listed here.</p>
                */
            type?: NetworkProfileType | string;
            /**
                * <p>The data throughput rate in bits per second, as an integer from 0 to
                *             104857600.</p>
                */
            uplinkBandwidthBits?: number;
            /**
                * <p>The data throughput rate in bits per second, as an integer from 0 to
                *             104857600.</p>
                */
            downlinkBandwidthBits?: number;
            /**
                * <p>Delay time for all packets to destination in milliseconds as an integer from 0 to
                *             2000.</p>
                */
            uplinkDelayMs?: number;
            /**
                * <p>Delay time for all packets to destination in milliseconds as an integer from 0 to
                *             2000.</p>
                */
            downlinkDelayMs?: number;
            /**
                * <p>Time variation in the delay of received packets in milliseconds as an integer from
                *             0 to 2000.</p>
                */
            uplinkJitterMs?: number;
            /**
                * <p>Time variation in the delay of received packets in milliseconds as an integer from
                *             0 to 2000.</p>
                */
            downlinkJitterMs?: number;
            /**
                * <p>Proportion of transmitted packets that fail to arrive from 0 to 100
                *             percent.</p>
                */
            uplinkLossPercent?: number;
            /**
                * <p>Proportion of received packets that fail to arrive from 0 to 100 percent.</p>
                */
            downlinkLossPercent?: number;
    }
    export namespace NetworkProfile {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkProfile) => any;
    }
    export interface CreateNetworkProfileResult {
            /**
                * <p>The network profile that is returned by the create network profile
                *             request.</p>
                */
            networkProfile?: NetworkProfile;
    }
    export namespace CreateNetworkProfileResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateNetworkProfileResult) => any;
    }
    /**
        * <p>Represents a request to the create project operation.</p>
        */
    export interface CreateProjectRequest {
            /**
                * <p>The project's name.</p>
                */
            name: string | undefined;
            /**
                * <p>Sets the execution timeout value (in minutes) for a project. All test runs in this project use the
                *             specified execution timeout value unless overridden when scheduling a run.</p>
                */
            defaultJobTimeoutMinutes?: number;
    }
    export namespace CreateProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateProjectRequest) => any;
    }
    /**
        * <p>Represents an operating-system neutral workspace for running and managing
        *             tests.</p>
        */
    export interface Project {
            /**
                * <p>The project's ARN.</p>
                */
            arn?: string;
            /**
                * <p>The project's name.</p>
                */
            name?: string;
            /**
                * <p>The default number of minutes (at the project level) a test run executes before it times out. The
                *             default value is 150 minutes.</p>
                */
            defaultJobTimeoutMinutes?: number;
            /**
                * <p>When the project was created.</p>
                */
            created?: Date;
    }
    export namespace Project {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Project) => any;
    }
    /**
        * <p>Represents the result of a create project request.</p>
        */
    export interface CreateProjectResult {
            /**
                * <p>The newly created project.</p>
                */
            project?: Project;
    }
    export namespace CreateProjectResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateProjectResult) => any;
    }
    /**
        * <p>The operation was not successful. Try again.</p>
        */
    export class TagOperationException extends __BaseException {
            readonly name: "TagOperationException";
            readonly $fault: "client";
            resourceName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TagOperationException, __BaseException>);
    }
    /**
        * <p>Configuration settings for a remote access session, including billing
        *             method.</p>
        */
    export interface CreateRemoteAccessSessionConfiguration {
            /**
                * <p>The billing method for the remote access session.</p>
                */
            billingMethod?: BillingMethod | string;
            /**
                * <p>An array of ARNs included in the VPC endpoint configuration.</p>
                */
            vpceConfigurationArns?: string[];
    }
    export namespace CreateRemoteAccessSessionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRemoteAccessSessionConfiguration) => any;
    }
    export enum InteractionMode {
            INTERACTIVE = "INTERACTIVE",
            NO_VIDEO = "NO_VIDEO",
            VIDEO_ONLY = "VIDEO_ONLY"
    }
    /**
        * <p>Creates and submits a request to start a remote access session.</p>
        */
    export interface CreateRemoteAccessSessionRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the project for which you want to create a remote
                *             access session.</p>
                */
            projectArn: string | undefined;
            /**
                * <p>The ARN of the device for which you want to create a remote access session.</p>
                */
            deviceArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the device instance for which you want to create a
                *             remote access session.</p>
                */
            instanceArn?: string;
            /**
                * <p>Ignored. The public key of the <code>ssh</code> key pair you want to use for connecting to remote
                *             devices in your remote debugging session. This key is required only if <code>remoteDebugEnabled</code> is
                *             set to <code>true</code>.</p>
                *         <p>Remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no
                *                 longer supported</a>.</p>
                */
            sshPublicKey?: string;
            /**
                * <p>Set to <code>true</code> if you want to access devices remotely for debugging in
                *             your remote access session.</p>
                *         <p>Remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no
                *                 longer supported</a>.</p>
                */
            remoteDebugEnabled?: boolean;
            /**
                * <p>Set to <code>true</code> to enable remote recording for the remote access
                *             session.</p>
                */
            remoteRecordEnabled?: boolean;
            /**
                * <p>The Amazon Resource Name (ARN) for the app to be recorded in the remote access
                *             session.</p>
                */
            remoteRecordAppArn?: string;
            /**
                * <p>The name of the remote access session to create.</p>
                */
            name?: string;
            /**
                * <p>Unique identifier for the client. If you want access to multiple devices on the same client, you should
                *             pass the same <code>clientId</code> value in each call to <code>CreateRemoteAccessSession</code>. This
                *             identifier is required only if <code>remoteDebugEnabled</code> is set to <code>true</code>.</p>
                *         <p>Remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no
                *                 longer supported</a>.</p>
                */
            clientId?: string;
            /**
                * <p>The configuration information for the remote access session request.</p>
                */
            configuration?: CreateRemoteAccessSessionConfiguration;
            /**
                * <p>The interaction mode of the remote access session. Valid values are:</p>
                *         <ul>
                *             <li>
                *                 <p>INTERACTIVE: You can interact with the iOS device by viewing, touching, and
                *                     rotating the screen. You cannot run XCUITest framework-based tests in this
                *                     mode.</p>
                *             </li>
                *             <li>
                *                 <p>NO_VIDEO: You are connected to the device, but cannot interact with it or view the screen. This
                *                     mode has the fastest test execution speed. You can run XCUITest framework-based tests in this
                *                     mode.</p>
                *             </li>
                *             <li>
                *                 <p>VIDEO_ONLY: You can view the screen, but cannot touch or rotate it. You can run XCUITest
                *                     framework-based tests and watch the screen in this mode.</p>
                *             </li>
                *          </ul>
                */
            interactionMode?: InteractionMode | string;
            /**
                * <p>When set to <code>true</code>, for private devices, Device Farm does not sign your app again. For public
                *             devices, Device Farm always signs your apps again.</p>
                *         <p>For more information on how Device Farm modifies your uploads during tests, see <a href="https://aws.amazon.com/device-farm/faq/">Do you modify my app?</a>
                *          </p>
                */
            skipAppResign?: boolean;
    }
    export namespace CreateRemoteAccessSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRemoteAccessSessionRequest) => any;
    }
    export enum DeviceAvailability {
            AVAILABLE = "AVAILABLE",
            BUSY = "BUSY",
            HIGHLY_AVAILABLE = "HIGHLY_AVAILABLE",
            TEMPORARY_NOT_AVAILABLE = "TEMPORARY_NOT_AVAILABLE"
    }
    export enum DeviceFormFactor {
            PHONE = "PHONE",
            TABLET = "TABLET"
    }
    export enum InstanceStatus {
            AVAILABLE = "AVAILABLE",
            IN_USE = "IN_USE",
            NOT_AVAILABLE = "NOT_AVAILABLE",
            PREPARING = "PREPARING"
    }
    /**
        * <p>Represents the device instance.</p>
        */
    export interface DeviceInstance {
            /**
                * <p>The Amazon Resource Name (ARN) of the device instance.</p>
                */
            arn?: string;
            /**
                * <p>The ARN of the device.</p>
                */
            deviceArn?: string;
            /**
                * <p>An array of strings that describe the device instance.</p>
                */
            labels?: string[];
            /**
                * <p>The status of the device instance. Valid values are listed here.</p>
                */
            status?: InstanceStatus | string;
            /**
                * <p>Unique device identifier for the device instance.</p>
                */
            udid?: string;
            /**
                * <p>A object that contains information about the instance profile.</p>
                */
            instanceProfile?: InstanceProfile;
    }
    export namespace DeviceInstance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeviceInstance) => any;
    }
    /**
        * <p>Represents the screen resolution of a device in height and width, expressed in
        *             pixels.</p>
        */
    export interface Resolution {
            /**
                * <p>The screen resolution's width, expressed in pixels.</p>
                */
            width?: number;
            /**
                * <p>The screen resolution's height, expressed in pixels.</p>
                */
            height?: number;
    }
    export namespace Resolution {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Resolution) => any;
    }
    /**
        * <p>Represents a device type that an app is tested against.</p>
        */
    export interface Device {
            /**
                * <p>The device's ARN.</p>
                */
            arn?: string;
            /**
                * <p>The device's display name.</p>
                */
            name?: string;
            /**
                * <p>The device's manufacturer name.</p>
                */
            manufacturer?: string;
            /**
                * <p>The device's model name.</p>
                */
            model?: string;
            /**
                * <p>The device's model ID.</p>
                */
            modelId?: string;
            /**
                * <p>The device's form factor.</p>
                *         <p>Allowed values include:</p>
                *         <ul>
                *             <li>
                *                 <p>PHONE</p>
                *             </li>
                *             <li>
                *                 <p>TABLET</p>
                *             </li>
                *          </ul>
                */
            formFactor?: DeviceFormFactor | string;
            /**
                * <p>The device's platform.</p>
                *         <p>Allowed values include:</p>
                *         <ul>
                *             <li>
                *                 <p>ANDROID</p>
                *             </li>
                *             <li>
                *                 <p>IOS</p>
                *             </li>
                *          </ul>
                */
            platform?: DevicePlatform | string;
            /**
                * <p>The device's operating system type.</p>
                */
            os?: string;
            /**
                * <p>Information about the device's CPU.</p>
                */
            cpu?: CPU;
            /**
                * <p>The resolution of the device.</p>
                */
            resolution?: Resolution;
            /**
                * <p>The device's heap size, expressed in bytes.</p>
                */
            heapSize?: number;
            /**
                * <p>The device's total memory size, expressed in bytes.</p>
                */
            memory?: number;
            /**
                * <p>The device's image name.</p>
                */
            image?: string;
            /**
                * <p>The device's carrier.</p>
                */
            carrier?: string;
            /**
                * <p>The device's radio.</p>
                */
            radio?: string;
            /**
                * <p>Specifies whether remote access has been enabled for the specified
                *             device.</p>
                */
            remoteAccessEnabled?: boolean;
            /**
                * <p>This flag is set to <code>true</code> if remote debugging is enabled for the
                *             device.</p>
                *         <p>Remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no
                *                 longer supported</a>.</p>
                */
            remoteDebugEnabled?: boolean;
            /**
                * <p>The type of fleet to which this device belongs. Possible values are PRIVATE and PUBLIC.</p>
                */
            fleetType?: string;
            /**
                * <p>The name of the fleet to which this device belongs.</p>
                */
            fleetName?: string;
            /**
                * <p>The instances that belong to this device.</p>
                */
            instances?: DeviceInstance[];
            /**
                * <p>Indicates how likely a device is available for a test run. Currently available in the <a>ListDevices</a> and GetDevice API methods.</p>
                */
            availability?: DeviceAvailability | string;
    }
    export namespace Device {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Device) => any;
    }
    /**
        * <p>Represents the total (metered or unmetered) minutes used by the resource to run
        *             tests. Contains the sum of minutes consumed by all children.</p>
        */
    export interface DeviceMinutes {
            /**
                * <p>When specified, represents the total minutes used by the resource to run
                *             tests.</p>
                */
            total?: number;
            /**
                * <p>When specified, represents only the sum of metered minutes used by the resource to
                *             run tests.</p>
                */
            metered?: number;
            /**
                * <p>When specified, represents only the sum of unmetered minutes used by the resource
                *             to run tests.</p>
                */
            unmetered?: number;
    }
    export namespace DeviceMinutes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeviceMinutes) => any;
    }
    export enum ExecutionResult {
            ERRORED = "ERRORED",
            FAILED = "FAILED",
            PASSED = "PASSED",
            PENDING = "PENDING",
            SKIPPED = "SKIPPED",
            STOPPED = "STOPPED",
            WARNED = "WARNED"
    }
    export enum ExecutionStatus {
            COMPLETED = "COMPLETED",
            PENDING = "PENDING",
            PENDING_CONCURRNECY = "PENDING_CONCURRENCY",
            PENDING_DEVICE = "PENDING_DEVICE",
            PREPARING = "PREPARING",
            PROCESSING = "PROCESSING",
            RUNNING = "RUNNING",
            SCHEDULING = "SCHEDULING",
            STOPPING = "STOPPING"
    }
    /**
        * <p>Represents information about the remote access session.</p>
        */
    export interface RemoteAccessSession {
            /**
                * <p>The Amazon Resource Name (ARN) of the remote access session.</p>
                */
            arn?: string;
            /**
                * <p>The name of the remote access session.</p>
                */
            name?: string;
            /**
                * <p>The date and time the remote access session was created.</p>
                */
            created?: Date;
            /**
                * <p>The status of the remote access session. Can be any of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>PENDING.</p>
                *             </li>
                *             <li>
                *                 <p>PENDING_CONCURRENCY.</p>
                *             </li>
                *             <li>
                *                 <p>PENDING_DEVICE.</p>
                *             </li>
                *             <li>
                *                 <p>PROCESSING.</p>
                *             </li>
                *             <li>
                *                 <p>SCHEDULING.</p>
                *             </li>
                *             <li>
                *                 <p>PREPARING.</p>
                *             </li>
                *             <li>
                *                 <p>RUNNING.</p>
                *             </li>
                *             <li>
                *                 <p>COMPLETED.</p>
                *             </li>
                *             <li>
                *                 <p>STOPPING.</p>
                *             </li>
                *          </ul>
                */
            status?: ExecutionStatus | string;
            /**
                * <p>The result of the remote access session. Can be any of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>PENDING.</p>
                *             </li>
                *             <li>
                *                 <p>PASSED.</p>
                *             </li>
                *             <li>
                *                 <p>WARNED.</p>
                *             </li>
                *             <li>
                *                 <p>FAILED.</p>
                *             </li>
                *             <li>
                *                 <p>SKIPPED.</p>
                *             </li>
                *             <li>
                *                 <p>ERRORED.</p>
                *             </li>
                *             <li>
                *                 <p>STOPPED.</p>
                *             </li>
                *          </ul>
                */
            result?: ExecutionResult | string;
            /**
                * <p>A message about the remote access session.</p>
                */
            message?: string;
            /**
                * <p>The date and time the remote access session was started.</p>
                */
            started?: Date;
            /**
                * <p>The date and time the remote access session was stopped.</p>
                */
            stopped?: Date;
            /**
                * <p>The device (phone or tablet) used in the remote access session.</p>
                */
            device?: Device;
            /**
                * <p>The ARN of the instance.</p>
                */
            instanceArn?: string;
            /**
                * <p>This flag is set to <code>true</code> if remote debugging is enabled for the remote
                *             access session.</p>
                *         <p>Remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no
                *                 longer supported</a>.</p>
                */
            remoteDebugEnabled?: boolean;
            /**
                * <p>This flag is set to <code>true</code> if remote recording is enabled for the remote
                *             access session.</p>
                */
            remoteRecordEnabled?: boolean;
            /**
                * <p>The ARN for the app to be recorded in the remote access session.</p>
                */
            remoteRecordAppArn?: string;
            /**
                * <p>IP address of the EC2 host where you need to connect to remotely debug devices.
                *             Only returned if remote debugging is enabled for the remote access session.</p>
                *         <p>Remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no
                *                 longer supported</a>.</p>
                */
            hostAddress?: string;
            /**
                * <p>Unique identifier of your client for the remote access session. Only returned if
                *             remote debugging is enabled for the remote access session.</p>
                *         <p>Remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no
                *                 longer supported</a>.</p>
                */
            clientId?: string;
            /**
                * <p>The billing method of the remote access session. Possible values include <code>METERED</code> or
                *                 <code>UNMETERED</code>. For more information about metered devices, see <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/welcome.html#welcome-terminology">AWS Device Farm
                *                 terminology</a>.</p>
                */
            billingMethod?: BillingMethod | string;
            /**
                * <p>The number of minutes a device is used in a remote access session (including setup
                *             and teardown minutes).</p>
                */
            deviceMinutes?: DeviceMinutes;
            /**
                * <p>The endpoint for the remote access sesssion.</p>
                */
            endpoint?: string;
            /**
                * <p>Unique device identifier for the remote device. Only returned if remote debugging
                *             is enabled for the remote access session.</p>
                *         <p>Remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no
                *                 longer supported</a>.</p>
                */
            deviceUdid?: string;
            /**
                * <p>The interaction mode of the remote access session. Valid values are:</p>
                *         <ul>
                *             <li>
                *                 <p>INTERACTIVE: You can interact with the iOS device by viewing, touching, and
                *                     rotating the screen. You cannot run XCUITest framework-based tests in this
                *                     mode.</p>
                *             </li>
                *             <li>
                *                 <p>NO_VIDEO: You are connected to the device, but cannot interact with it or view the screen. This
                *                     mode has the fastest test execution speed. You can run XCUITest framework-based tests in this
                *                     mode.</p>
                *             </li>
                *             <li>
                *                 <p>VIDEO_ONLY: You can view the screen, but cannot touch or rotate it. You can run XCUITest
                *                     framework-based tests and watch the screen in this mode.</p>
                *             </li>
                *          </ul>
                */
            interactionMode?: InteractionMode | string;
            /**
                * <p>When set to <code>true</code>, for private devices, Device Farm does not sign your app again. For public
                *             devices, Device Farm always signs your apps again.</p>
                *         <p>For more information about how Device Farm re-signs your apps, see <a href="https://aws.amazon.com/device-farm/faq/">Do you modify my app?</a> in the <i>AWS Device
                *                 Farm FAQs</i>.</p>
                */
            skipAppResign?: boolean;
    }
    export namespace RemoteAccessSession {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoteAccessSession) => any;
    }
    /**
        * <p>Represents the server response from a request to create a remote access
        *             session.</p>
        */
    export interface CreateRemoteAccessSessionResult {
            /**
                * <p>A container that describes the remote access session when the request to create a
                *             remote access session is sent.</p>
                */
            remoteAccessSession?: RemoteAccessSession;
    }
    export namespace CreateRemoteAccessSessionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRemoteAccessSessionResult) => any;
    }
    /**
        * <p>The VPC security groups and subnets that are attached to a project.</p>
        */
    export interface TestGridVpcConfig {
            /**
                * <p>A list of VPC security group IDs in your Amazon VPC.</p>
                */
            securityGroupIds: string[] | undefined;
            /**
                * <p>A list of VPC subnet IDs in your Amazon VPC.</p>
                */
            subnetIds: string[] | undefined;
            /**
                * <p>The ID of the Amazon VPC.</p>
                */
            vpcId: string | undefined;
    }
    export namespace TestGridVpcConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestGridVpcConfig) => any;
    }
    export interface CreateTestGridProjectRequest {
            /**
                * <p>Human-readable name of the Selenium testing project.</p>
                */
            name: string | undefined;
            /**
                * <p>Human-readable description of the project.</p>
                */
            description?: string;
            /**
                * <p>The VPC security groups and subnets that are attached to a project.</p>
                */
            vpcConfig?: TestGridVpcConfig;
    }
    export namespace CreateTestGridProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTestGridProjectRequest) => any;
    }
    /**
        * <p>A Selenium testing project. Projects are used to collect and collate sessions.</p>
        */
    export interface TestGridProject {
            /**
                * <p>The ARN for the project.</p>
                */
            arn?: string;
            /**
                * <p>A human-readable name for the project.</p>
                */
            name?: string;
            /**
                * <p>A human-readable description for the project.</p>
                */
            description?: string;
            /**
                * <p>The VPC security groups and subnets that are attached to a project.</p>
                */
            vpcConfig?: TestGridVpcConfig;
            /**
                * <p>When the project was created.</p>
                */
            created?: Date;
    }
    export namespace TestGridProject {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestGridProject) => any;
    }
    export interface CreateTestGridProjectResult {
            /**
                * <p>ARN of the Selenium testing project that was created.</p>
                */
            testGridProject?: TestGridProject;
    }
    export namespace CreateTestGridProjectResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTestGridProjectResult) => any;
    }
    /**
        * <p>An internal exception was raised in the service. Contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a> if you see this
        *          error. </p>
        */
    export class InternalServiceException extends __BaseException {
            readonly name: "InternalServiceException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServiceException, __BaseException>);
    }
    export interface CreateTestGridUrlRequest {
            /**
                * <p>ARN (from <a>CreateTestGridProject</a> or <a>ListTestGridProjects</a>) to associate
                *          with the short-term URL. </p>
                */
            projectArn: string | undefined;
            /**
                * <p>Lifetime, in seconds, of the URL.</p>
                */
            expiresInSeconds: number | undefined;
    }
    export namespace CreateTestGridUrlRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTestGridUrlRequest) => any;
    }
    export interface CreateTestGridUrlResult {
            /**
                * <p>A signed URL, expiring in <a>CreateTestGridUrlRequest$expiresInSeconds</a> seconds, to be passed
                *          to a <code>RemoteWebDriver</code>. </p>
                */
            url?: string;
            /**
                * <p>The number of seconds the URL from <a>CreateTestGridUrlResult$url</a> stays active.</p>
                */
            expires?: Date;
    }
    export namespace CreateTestGridUrlResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTestGridUrlResult) => any;
    }
    export enum UploadType {
            ANDROID_APP = "ANDROID_APP",
            APPIUM_JAVA_JUNIT_TEST_PACKAGE = "APPIUM_JAVA_JUNIT_TEST_PACKAGE",
            APPIUM_JAVA_JUNIT_TEST_SPEC = "APPIUM_JAVA_JUNIT_TEST_SPEC",
            APPIUM_JAVA_TESTNG_TEST_PACKAGE = "APPIUM_JAVA_TESTNG_TEST_PACKAGE",
            APPIUM_JAVA_TESTNG_TEST_SPEC = "APPIUM_JAVA_TESTNG_TEST_SPEC",
            APPIUM_NODE_TEST_PACKAGE = "APPIUM_NODE_TEST_PACKAGE",
            APPIUM_NODE_TEST_SPEC = "APPIUM_NODE_TEST_SPEC",
            APPIUM_PYTHON_TEST_PACKAGE = "APPIUM_PYTHON_TEST_PACKAGE",
            APPIUM_PYTHON_TEST_SPEC = "APPIUM_PYTHON_TEST_SPEC",
            APPIUM_RUBY_TEST_PACKAGE = "APPIUM_RUBY_TEST_PACKAGE",
            APPIUM_RUBY_TEST_SPEC = "APPIUM_RUBY_TEST_SPEC",
            APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE = "APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE",
            APPIUM_WEB_JAVA_JUNIT_TEST_SPEC = "APPIUM_WEB_JAVA_JUNIT_TEST_SPEC",
            APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE = "APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE",
            APPIUM_WEB_JAVA_TESTNG_TEST_SPEC = "APPIUM_WEB_JAVA_TESTNG_TEST_SPEC",
            APPIUM_WEB_NODE_TEST_PACKAGE = "APPIUM_WEB_NODE_TEST_PACKAGE",
            APPIUM_WEB_NODE_TEST_SPEC = "APPIUM_WEB_NODE_TEST_SPEC",
            APPIUM_WEB_PYTHON_TEST_PACKAGE = "APPIUM_WEB_PYTHON_TEST_PACKAGE",
            APPIUM_WEB_PYTHON_TEST_SPEC = "APPIUM_WEB_PYTHON_TEST_SPEC",
            APPIUM_WEB_RUBY_TEST_PACKAGE = "APPIUM_WEB_RUBY_TEST_PACKAGE",
            APPIUM_WEB_RUBY_TEST_SPEC = "APPIUM_WEB_RUBY_TEST_SPEC",
            CALABASH_TEST_PACKAGE = "CALABASH_TEST_PACKAGE",
            EXTERNAL_DATA = "EXTERNAL_DATA",
            INSTRUMENTATION_TEST_PACKAGE = "INSTRUMENTATION_TEST_PACKAGE",
            INSTRUMENTATION_TEST_SPEC = "INSTRUMENTATION_TEST_SPEC",
            IOS_APP = "IOS_APP",
            UIAUTOMATION_TEST_PACKAGE = "UIAUTOMATION_TEST_PACKAGE",
            UIAUTOMATOR_TEST_PACKAGE = "UIAUTOMATOR_TEST_PACKAGE",
            WEB_APP = "WEB_APP",
            XCTEST_TEST_PACKAGE = "XCTEST_TEST_PACKAGE",
            XCTEST_UI_TEST_PACKAGE = "XCTEST_UI_TEST_PACKAGE",
            XCTEST_UI_TEST_SPEC = "XCTEST_UI_TEST_SPEC"
    }
    /**
        * <p>Represents a request to the create upload operation.</p>
        */
    export interface CreateUploadRequest {
            /**
                * <p>The ARN of the project for the upload.</p>
                */
            projectArn: string | undefined;
            /**
                * <p>The upload's file name. The name should not contain any forward slashes (<code>/</code>). If you are
                *             uploading an iOS app, the file name must end with the <code>.ipa</code> extension. If you are uploading an
                *             Android app, the file name must end with the <code>.apk</code> extension. For all others, the file name must
                *             end with the <code>.zip</code> file extension.</p>
                */
            name: string | undefined;
            /**
                * <p>The upload's upload type.</p>
                *         <p>Must be one of the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>ANDROID_APP</p>
                *             </li>
                *             <li>
                *                 <p>IOS_APP</p>
                *             </li>
                *             <li>
                *                 <p>WEB_APP</p>
                *             </li>
                *             <li>
                *                 <p>EXTERNAL_DATA</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_JUNIT_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_TESTNG_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_PYTHON_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_NODE_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_RUBY_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_PYTHON_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_NODE_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_RUBY_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>CALABASH_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>INSTRUMENTATION_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>UIAUTOMATION_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>UIAUTOMATOR_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>XCTEST_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>XCTEST_UI_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_JUNIT_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_TESTNG_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_PYTHON_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_NODE_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_RUBY_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_JUNIT_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_TESTNG_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_PYTHON_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_NODE_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_RUBY_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>INSTRUMENTATION_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>XCTEST_UI_TEST_SPEC</p>
                *             </li>
                *          </ul>
                *         <p> If you call <code>CreateUpload</code> with <code>WEB_APP</code> specified, AWS
                *             Device Farm throws an <code>ArgumentException</code> error.</p>
                */
            type: UploadType | string | undefined;
            /**
                * <p>The upload's content type (for example, <code>application/octet-stream</code>).</p>
                */
            contentType?: string;
    }
    export namespace CreateUploadRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUploadRequest) => any;
    }
    export enum UploadCategory {
            CURATED = "CURATED",
            PRIVATE = "PRIVATE"
    }
    export enum UploadStatus {
            FAILED = "FAILED",
            INITIALIZED = "INITIALIZED",
            PROCESSING = "PROCESSING",
            SUCCEEDED = "SUCCEEDED"
    }
    /**
        * <p>An app or a set of one or more tests to upload or that have been
        *             uploaded.</p>
        */
    export interface Upload {
            /**
                * <p>The upload's ARN.</p>
                */
            arn?: string;
            /**
                * <p>The upload's file name.</p>
                */
            name?: string;
            /**
                * <p>When the upload was created.</p>
                */
            created?: Date;
            /**
                * <p>The upload's type.</p>
                *         <p>Must be one of the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>ANDROID_APP</p>
                *             </li>
                *             <li>
                *                 <p>IOS_APP</p>
                *             </li>
                *             <li>
                *                 <p>WEB_APP</p>
                *             </li>
                *             <li>
                *                 <p>EXTERNAL_DATA</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_JUNIT_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_TESTNG_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_PYTHON_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_NODE_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_RUBY_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_PYTHON_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_NODE_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_RUBY_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>CALABASH_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>INSTRUMENTATION_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>UIAUTOMATION_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>UIAUTOMATOR_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>XCTEST_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>XCTEST_UI_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_JUNIT_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_TESTNG_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_PYTHON_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_NODE_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_RUBY_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_JUNIT_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_TESTNG_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_PYTHON_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_NODE_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_RUBY_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>INSTRUMENTATION_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>XCTEST_UI_TEST_SPEC</p>
                *             </li>
                *          </ul>
                */
            type?: UploadType | string;
            /**
                * <p>The upload's status.</p>
                *         <p>Must be one of the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>FAILED</p>
                *             </li>
                *             <li>
                *                 <p>INITIALIZED</p>
                *             </li>
                *             <li>
                *                 <p>PROCESSING</p>
                *             </li>
                *             <li>
                *                 <p>SUCCEEDED</p>
                *             </li>
                *          </ul>
                */
            status?: UploadStatus | string;
            /**
                * <p>The presigned Amazon S3 URL that was used to store a file using a PUT request.</p>
                */
            url?: string;
            /**
                * <p>The upload's metadata. For example, for Android, this contains information that is
                *             parsed from the manifest and is displayed in the AWS Device Farm console after the
                *             associated app is uploaded.</p>
                */
            metadata?: string;
            /**
                * <p>The upload's content type (for example, <code>application/octet-stream</code>).</p>
                */
            contentType?: string;
            /**
                * <p>A message about the upload's result.</p>
                */
            message?: string;
            /**
                * <p>The upload's category. Allowed values include:</p>
                *         <ul>
                *             <li>
                *                 <p>CURATED: An upload managed by AWS Device Farm.</p>
                *             </li>
                *             <li>
                *                 <p>PRIVATE: An upload managed by the AWS Device Farm customer.</p>
                *             </li>
                *          </ul>
                */
            category?: UploadCategory | string;
    }
    export namespace Upload {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Upload) => any;
    }
    /**
        * <p>Represents the result of a create upload request.</p>
        */
    export interface CreateUploadResult {
            /**
                * <p>The newly created upload.</p>
                */
            upload?: Upload;
    }
    export namespace CreateUploadResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUploadResult) => any;
    }
    export interface CreateVPCEConfigurationRequest {
            /**
                * <p>The friendly name you give to your VPC endpoint configuration, to manage your
                *             configurations more easily.</p>
                */
            vpceConfigurationName: string | undefined;
            /**
                * <p>The name of the VPC endpoint service running in your AWS account that you want Device Farm to test.</p>
                */
            vpceServiceName: string | undefined;
            /**
                * <p>The DNS name of the service running in your VPC that you want Device Farm to
                *             test.</p>
                */
            serviceDnsName: string | undefined;
            /**
                * <p>An optional description that provides details about your VPC endpoint configuration.</p>
                */
            vpceConfigurationDescription?: string;
    }
    export namespace CreateVPCEConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateVPCEConfigurationRequest) => any;
    }
    /**
        * <p>Represents an Amazon Virtual Private Cloud (VPC) endpoint configuration.</p>
        */
    export interface VPCEConfiguration {
            /**
                * <p>The Amazon Resource Name (ARN) of the VPC endpoint configuration.</p>
                */
            arn?: string;
            /**
                * <p>The friendly name you give to your VPC endpoint configuration to manage your configurations more
                *             easily.</p>
                */
            vpceConfigurationName?: string;
            /**
                * <p>The name of the VPC endpoint service running in your AWS account that you want Device Farm to test.</p>
                */
            vpceServiceName?: string;
            /**
                * <p>The DNS name that maps to the private IP address of the service you want to
                *             access.</p>
                */
            serviceDnsName?: string;
            /**
                * <p>An optional description that provides details about your VPC endpoint configuration.</p>
                */
            vpceConfigurationDescription?: string;
    }
    export namespace VPCEConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VPCEConfiguration) => any;
    }
    export interface CreateVPCEConfigurationResult {
            /**
                * <p>An object that contains information about your VPC endpoint configuration.</p>
                */
            vpceConfiguration?: VPCEConfiguration;
    }
    export namespace CreateVPCEConfigurationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateVPCEConfigurationResult) => any;
    }
    export enum CurrencyCode {
            USD = "USD"
    }
    /**
        * <p>A JSON object that specifies the paths where the artifacts generated by the customer's tests, on the
        *             device or in the test environment, are pulled from.</p>
        *         <p>Specify <code>deviceHostPaths</code> and optionally specify either
        *                 <code>iosPaths</code> or <code>androidPaths</code>.</p>
        *         <p>For web app tests, you can specify both <code>iosPaths</code> and
        *                 <code>androidPaths</code>.</p>
        */
    export interface CustomerArtifactPaths {
            /**
                * <p>Comma-separated list of paths on the iOS device where the artifacts generated by the customer's tests
                *             are pulled from.</p>
                */
            iosPaths?: string[];
            /**
                * <p>Comma-separated list of paths on the Android device where the artifacts generated by the customer's
                *             tests are pulled from.</p>
                */
            androidPaths?: string[];
            /**
                * <p>Comma-separated list of paths in the test execution environment where the artifacts generated by the
                *             customer's tests are pulled from.</p>
                */
            deviceHostPaths?: string[];
    }
    export namespace CustomerArtifactPaths {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomerArtifactPaths) => any;
    }
    /**
        * <p>Represents a request to the delete device pool operation.</p>
        */
    export interface DeleteDevicePoolRequest {
            /**
                * <p>Represents the Amazon Resource Name (ARN) of the Device Farm device pool to delete.</p>
                */
            arn: string | undefined;
    }
    export namespace DeleteDevicePoolRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDevicePoolRequest) => any;
    }
    /**
        * <p>Represents the result of a delete device pool request.</p>
        */
    export interface DeleteDevicePoolResult {
    }
    export namespace DeleteDevicePoolResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDevicePoolResult) => any;
    }
    export interface DeleteInstanceProfileRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the instance profile you are requesting to
                *             delete.</p>
                */
            arn: string | undefined;
    }
    export namespace DeleteInstanceProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteInstanceProfileRequest) => any;
    }
    export interface DeleteInstanceProfileResult {
    }
    export namespace DeleteInstanceProfileResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteInstanceProfileResult) => any;
    }
    export interface DeleteNetworkProfileRequest {
            /**
                * <p>The ARN of the network profile to delete.</p>
                */
            arn: string | undefined;
    }
    export namespace DeleteNetworkProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteNetworkProfileRequest) => any;
    }
    export interface DeleteNetworkProfileResult {
    }
    export namespace DeleteNetworkProfileResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteNetworkProfileResult) => any;
    }
    /**
        * <p>Represents a request to the delete project operation.</p>
        */
    export interface DeleteProjectRequest {
            /**
                * <p>Represents the Amazon Resource Name (ARN) of the Device Farm project to delete.</p>
                */
            arn: string | undefined;
    }
    export namespace DeleteProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteProjectRequest) => any;
    }
    /**
        * <p>Represents the result of a delete project request.</p>
        */
    export interface DeleteProjectResult {
    }
    export namespace DeleteProjectResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteProjectResult) => any;
    }
    /**
        * <p>Represents the request to delete the specified remote access session.</p>
        */
    export interface DeleteRemoteAccessSessionRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the session for which you want to delete remote
                *             access.</p>
                */
            arn: string | undefined;
    }
    export namespace DeleteRemoteAccessSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRemoteAccessSessionRequest) => any;
    }
    /**
        * <p>The response from the server when a request is made to delete the remote access
        *             session.</p>
        */
    export interface DeleteRemoteAccessSessionResult {
    }
    export namespace DeleteRemoteAccessSessionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRemoteAccessSessionResult) => any;
    }
    /**
        * <p>Represents a request to the delete run operation.</p>
        */
    export interface DeleteRunRequest {
            /**
                * <p>The Amazon Resource Name (ARN) for the run to delete.</p>
                */
            arn: string | undefined;
    }
    export namespace DeleteRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRunRequest) => any;
    }
    /**
        * <p>Represents the result of a delete run request.</p>
        */
    export interface DeleteRunResult {
    }
    export namespace DeleteRunResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRunResult) => any;
    }
    export interface DeleteTestGridProjectRequest {
            /**
                * <p>The ARN of the project to delete, from <a>CreateTestGridProject</a> or <a>ListTestGridProjects</a>.</p>
                */
            projectArn: string | undefined;
    }
    export namespace DeleteTestGridProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTestGridProjectRequest) => any;
    }
    export interface DeleteTestGridProjectResult {
    }
    export namespace DeleteTestGridProjectResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTestGridProjectResult) => any;
    }
    /**
        * <p>Represents a request to the delete upload operation.</p>
        */
    export interface DeleteUploadRequest {
            /**
                * <p>Represents the Amazon Resource Name (ARN) of the Device Farm upload to delete.</p>
                */
            arn: string | undefined;
    }
    export namespace DeleteUploadRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUploadRequest) => any;
    }
    /**
        * <p>Represents the result of a delete upload request.</p>
        */
    export interface DeleteUploadResult {
    }
    export namespace DeleteUploadResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUploadResult) => any;
    }
    export interface DeleteVPCEConfigurationRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the VPC endpoint configuration you want to
                *             delete.</p>
                */
            arn: string | undefined;
    }
    export namespace DeleteVPCEConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteVPCEConfigurationRequest) => any;
    }
    export interface DeleteVPCEConfigurationResult {
    }
    export namespace DeleteVPCEConfigurationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteVPCEConfigurationResult) => any;
    }
    /**
        * <p>There was an error with the update request, or you do not have sufficient permissions
        *             to update this VPC endpoint configuration.</p>
        */
    export class InvalidOperationException extends __BaseException {
            readonly name: "InvalidOperationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidOperationException, __BaseException>);
    }
    /**
        * <p>Represents the request sent to retrieve the account settings.</p>
        */
    export interface GetAccountSettingsRequest {
    }
    export namespace GetAccountSettingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAccountSettingsRequest) => any;
    }
    /**
        * <p>Represents the account settings return values from the
        *                 <code>GetAccountSettings</code> request.</p>
        */
    export interface GetAccountSettingsResult {
            /**
                * <p>The account settings.</p>
                */
            accountSettings?: AccountSettings;
    }
    export namespace GetAccountSettingsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAccountSettingsResult) => any;
    }
    /**
        * <p>Represents a request to the get device request.</p>
        */
    export interface GetDeviceRequest {
            /**
                * <p>The device type's ARN.</p>
                */
            arn: string | undefined;
    }
    export namespace GetDeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeviceRequest) => any;
    }
    /**
        * <p>Represents the result of a get device request.</p>
        */
    export interface GetDeviceResult {
            /**
                * <p>An object that contains information about the requested device.</p>
                */
            device?: Device;
    }
    export namespace GetDeviceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeviceResult) => any;
    }
    export interface GetDeviceInstanceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the instance you're requesting information
                *             about.</p>
                */
            arn: string | undefined;
    }
    export namespace GetDeviceInstanceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeviceInstanceRequest) => any;
    }
    export interface GetDeviceInstanceResult {
            /**
                * <p>An object that contains information about your device instance.</p>
                */
            deviceInstance?: DeviceInstance;
    }
    export namespace GetDeviceInstanceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeviceInstanceResult) => any;
    }
    /**
        * <p>Represents a request to the get device pool operation.</p>
        */
    export interface GetDevicePoolRequest {
            /**
                * <p>The device pool's ARN.</p>
                */
            arn: string | undefined;
    }
    export namespace GetDevicePoolRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDevicePoolRequest) => any;
    }
    /**
        * <p>Represents the result of a get device pool request.</p>
        */
    export interface GetDevicePoolResult {
            /**
                * <p>An object that contains information about the requested device pool.</p>
                */
            devicePool?: DevicePool;
    }
    export namespace GetDevicePoolResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDevicePoolResult) => any;
    }
    /**
        * <p>Represents a latitude and longitude pair, expressed in geographic coordinate system degrees (for
        *             example, 47.6204, -122.3491).</p>
        *         <p>Elevation is currently not supported.</p>
        */
    export interface Location {
            /**
                * <p>The latitude.</p>
                */
            latitude: number | undefined;
            /**
                * <p>The longitude.</p>
                */
            longitude: number | undefined;
    }
    export namespace Location {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Location) => any;
    }
    /**
        * <p>Represents the set of radios and their states on a device. Examples of radios
        *             include Wi-Fi, GPS, Bluetooth, and NFC.</p>
        */
    export interface Radios {
            /**
                * <p>True if Wi-Fi is enabled at the beginning of the test. Otherwise, false.</p>
                */
            wifi?: boolean;
            /**
                * <p>True if Bluetooth is enabled at the beginning of the test. Otherwise, false.</p>
                */
            bluetooth?: boolean;
            /**
                * <p>True if NFC is enabled at the beginning of the test. Otherwise, false.</p>
                */
            nfc?: boolean;
            /**
                * <p>True if GPS is enabled at the beginning of the test. Otherwise, false.</p>
                */
            gps?: boolean;
    }
    export namespace Radios {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Radios) => any;
    }
    /**
        * <p>Represents the settings for a run. Includes things like location, radio states,
        *             auxiliary apps, and network profiles.</p>
        */
    export interface ScheduleRunConfiguration {
            /**
                * <p>The ARN of the extra data for the run. The extra data is a .zip file that AWS Device Farm extracts to
                *             external data for Android or the app's sandbox for iOS.</p>
                */
            extraDataPackageArn?: string;
            /**
                * <p>Reserved for internal use.</p>
                */
            networkProfileArn?: string;
            /**
                * <p>Information about the locale that is used for the run.</p>
                */
            locale?: string;
            /**
                * <p>Information about the location that is used for the run.</p>
                */
            location?: Location;
            /**
                * <p>An array of ARNs for your VPC endpoint configurations.</p>
                */
            vpceConfigurationArns?: string[];
            /**
                * <p>Input <code>CustomerArtifactPaths</code> object for the scheduled run
                *             configuration.</p>
                */
            customerArtifactPaths?: CustomerArtifactPaths;
            /**
                * <p>Information about the radio states for the run.</p>
                */
            radios?: Radios;
            /**
                * <p>A list of upload ARNs for app packages to be installed with your app.</p>
                */
            auxiliaryApps?: string[];
            /**
                * <p>Specifies the billing method for a test run: <code>metered</code> or
                *                 <code>unmetered</code>. If the parameter is not specified, the default value is
                *                 <code>metered</code>.</p>
                *         <note>
                *             <p>If you have purchased unmetered device slots, you must set this parameter to <code>unmetered</code> to
                *                 make use of them. Otherwise, your run counts against your metered time.</p>
                *         </note>
                */
            billingMethod?: BillingMethod | string;
    }
    export namespace ScheduleRunConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScheduleRunConfiguration) => any;
    }
    export enum TestType {
            APPIUM_JAVA_JUNIT = "APPIUM_JAVA_JUNIT",
            APPIUM_JAVA_TESTNG = "APPIUM_JAVA_TESTNG",
            APPIUM_NODE = "APPIUM_NODE",
            APPIUM_PYTHON = "APPIUM_PYTHON",
            APPIUM_RUBY = "APPIUM_RUBY",
            APPIUM_WEB_JAVA_JUNIT = "APPIUM_WEB_JAVA_JUNIT",
            APPIUM_WEB_JAVA_TESTNG = "APPIUM_WEB_JAVA_TESTNG",
            APPIUM_WEB_NODE = "APPIUM_WEB_NODE",
            APPIUM_WEB_PYTHON = "APPIUM_WEB_PYTHON",
            APPIUM_WEB_RUBY = "APPIUM_WEB_RUBY",
            BUILTIN_EXPLORER = "BUILTIN_EXPLORER",
            BUILTIN_FUZZ = "BUILTIN_FUZZ",
            CALABASH = "CALABASH",
            INSTRUMENTATION = "INSTRUMENTATION",
            REMOTE_ACCESS_RECORD = "REMOTE_ACCESS_RECORD",
            REMOTE_ACCESS_REPLAY = "REMOTE_ACCESS_REPLAY",
            UIAUTOMATION = "UIAUTOMATION",
            UIAUTOMATOR = "UIAUTOMATOR",
            WEB_PERFORMANCE_PROFILE = "WEB_PERFORMANCE_PROFILE",
            XCTEST = "XCTEST",
            XCTEST_UI = "XCTEST_UI"
    }
    /**
        * <p>Represents test settings. This data structure is passed in as the test parameter to ScheduleRun. For an
        *             example of the JSON request syntax, see <a>ScheduleRun</a>.</p>
        */
    export interface ScheduleRunTest {
            /**
                * <p>The test's type.</p>
                *         <p>Must be one of the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>BUILTIN_FUZZ</p>
                *             </li>
                *             <li>
                *                 <p>BUILTIN_EXPLORER. For Android, an app explorer that traverses an
                *                     Android app, interacting with it and capturing screenshots at the same
                *                     time.</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_JUNIT</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_TESTNG</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_PYTHON</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_NODE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_RUBY</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_JUNIT</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_TESTNG</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_PYTHON</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_NODE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_RUBY</p>
                *             </li>
                *             <li>
                *                 <p>CALABASH</p>
                *             </li>
                *             <li>
                *                 <p>INSTRUMENTATION</p>
                *             </li>
                *             <li>
                *                 <p>UIAUTOMATION</p>
                *             </li>
                *             <li>
                *                 <p>UIAUTOMATOR</p>
                *             </li>
                *             <li>
                *                 <p>XCTEST</p>
                *             </li>
                *             <li>
                *                 <p>XCTEST_UI</p>
                *             </li>
                *          </ul>
                */
            type: TestType | string | undefined;
            /**
                * <p>The ARN of the uploaded test to be run.</p>
                */
            testPackageArn?: string;
            /**
                * <p>The ARN of the YAML-formatted test specification.</p>
                */
            testSpecArn?: string;
            /**
                * <p>The test's filter.</p>
                */
            filter?: string;
            /**
                * <p>The test's parameters, such as test framework parameters and fixture settings.
                *             Parameters are represented by name-value pairs of strings.</p>
                *         <p>For all tests:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>app_performance_monitoring</code>: Performance monitoring is enabled by default.
                *                     Set this parameter to false to disable it.</p>
                *             </li>
                *          </ul>
                *         <p>For Calabash tests:</p>
                *         <ul>
                *             <li>
                *                 <p>profile: A cucumber profile (for example, <code>my_profile_name</code>).</p>
                *             </li>
                *             <li>
                *                 <p>tags: You can limit execution to features or scenarios that have (or don't
                *                     have) certain tags (for example, @smoke or @smoke,~@wip).</p>
                *             </li>
                *          </ul>
                *         <p>For Appium tests (all types):</p>
                *         <ul>
                *             <li>
                *                 <p>appium_version: The Appium version. Currently supported values are 1.6.5
                *                     (and later), latest, and default.</p>
                *                 <ul>
                *                   <li>
                *
                *                         <p>latest runs the latest Appium version supported by Device
                *                             Farm (1.9.1).</p>
                *                     </li>
                *                   <li>
                *                         <p>For default, Device Farm selects a compatible version of
                *                             Appium for the device. The current behavior is to run 1.7.2 on Android
                *                             devices and iOS 9 and earlier and 1.7.2 for iOS 10 and later.</p>
                *                     </li>
                *                   <li>
                *                         <p>This behavior is subject to change.</p>
                *                     </li>
                *                </ul>
                *             </li>
                *          </ul>
                *         <p>For fuzz tests (Android only):</p>
                *         <ul>
                *             <li>
                *                 <p>event_count: The number of events, between 1 and 10000, that the UI fuzz
                *                     test should perform.</p>
                *             </li>
                *             <li>
                *                 <p>throttle: The time, in ms, between 0 and 1000, that the UI fuzz test should
                *                     wait between events.</p>
                *             </li>
                *             <li>
                *                 <p>seed: A seed to use for randomizing the UI fuzz test. Using the same seed
                *                     value between tests ensures identical event sequences.</p>
                *             </li>
                *          </ul>
                *         <p>For Explorer tests:</p>
                *         <ul>
                *             <li>
                *                 <p>username: A user name to use if the Explorer encounters a login form. If not supplied, no user
                *                     name is inserted.</p>
                *             </li>
                *             <li>
                *                 <p>password: A password to use if the Explorer encounters a login form. If not supplied, no
                *                     password is inserted.</p>
                *             </li>
                *          </ul>
                *         <p>For Instrumentation:</p>
                *         <ul>
                *             <li>
                *                 <p>filter: A test filter string. Examples:</p>
                *                 <ul>
                *                   <li>
                *                         <p>Running a single test case: <code>com.android.abc.Test1</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>Running a single test: <code>com.android.abc.Test1#smoke</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>Running multiple tests:
                *                             <code>com.android.abc.Test1,com.android.abc.Test2</code>
                *                      </p>
                *                     </li>
                *                </ul>
                *             </li>
                *          </ul>
                *         <p>For XCTest and XCTestUI:</p>
                *         <ul>
                *             <li>
                *                 <p>filter: A test filter string. Examples:</p>
                *                 <ul>
                *                   <li>
                *                         <p>Running a single test class: <code>LoginTests</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>Running a multiple test classes: <code>LoginTests,SmokeTests</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>Running a single test: <code>LoginTests/testValid</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>Running multiple tests:
                *                             <code>LoginTests/testValid,LoginTests/testInvalid</code>
                *                      </p>
                *                     </li>
                *                </ul>
                *             </li>
                *          </ul>
                *         <p>For UIAutomator:</p>
                *         <ul>
                *             <li>
                *                 <p>filter: A test filter string. Examples:</p>
                *                 <ul>
                *                   <li>
                *                         <p>Running a single test case: <code>com.android.abc.Test1</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>Running a single test: <code>com.android.abc.Test1#smoke</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>Running multiple tests:
                *                             <code>com.android.abc.Test1,com.android.abc.Test2</code>
                *                      </p>
                *                     </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            parameters?: Record<string, string>;
    }
    export namespace ScheduleRunTest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScheduleRunTest) => any;
    }
    /**
        * <p>Represents a request to the get device pool compatibility operation.</p>
        */
    export interface GetDevicePoolCompatibilityRequest {
            /**
                * <p>The device pool's ARN.</p>
                */
            devicePoolArn: string | undefined;
            /**
                * <p>The ARN of the app that is associated with the specified device pool.</p>
                */
            appArn?: string;
            /**
                * <p>The test type for the specified device pool.</p>
                *         <p>Allowed values include the following:</p>
                *         <ul>
                *             <li>
                *                 <p>BUILTIN_FUZZ.</p>
                *             </li>
                *             <li>
                *                 <p>BUILTIN_EXPLORER. For Android, an app explorer that traverses an Android app, interacting with
                *                     it and capturing screenshots at the same time.</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_JUNIT.</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_TESTNG.</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_PYTHON.</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_NODE.</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_RUBY.</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_JUNIT.</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_TESTNG.</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_PYTHON.</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_NODE.</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_RUBY.</p>
                *             </li>
                *             <li>
                *                 <p>CALABASH.</p>
                *             </li>
                *             <li>
                *                 <p>INSTRUMENTATION.</p>
                *             </li>
                *             <li>
                *                 <p>UIAUTOMATION.</p>
                *             </li>
                *             <li>
                *                 <p>UIAUTOMATOR.</p>
                *             </li>
                *             <li>
                *                 <p>XCTEST.</p>
                *             </li>
                *             <li>
                *                 <p>XCTEST_UI.</p>
                *             </li>
                *          </ul>
                */
            testType?: TestType | string;
            /**
                * <p>Information about the uploaded test to be run against the device pool.</p>
                */
            test?: ScheduleRunTest;
            /**
                * <p>An object that contains information about the settings for a run.</p>
                */
            configuration?: ScheduleRunConfiguration;
    }
    export namespace GetDevicePoolCompatibilityRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDevicePoolCompatibilityRequest) => any;
    }
    /**
        * <p>Represents information about incompatibility.</p>
        */
    export interface IncompatibilityMessage {
            /**
                * <p>A message about the incompatibility.</p>
                */
            message?: string;
            /**
                * <p>The type of incompatibility.</p>
                *         <p>Allowed values include:</p>
                *         <ul>
                *             <li>
                *                 <p>ARN</p>
                *             </li>
                *             <li>
                *                 <p>FORM_FACTOR (for example, phone or tablet)</p>
                *             </li>
                *             <li>
                *                 <p>MANUFACTURER</p>
                *             </li>
                *             <li>
                *                 <p>PLATFORM (for example, Android or iOS)</p>
                *             </li>
                *             <li>
                *                 <p>REMOTE_ACCESS_ENABLED</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_VERSION</p>
                *             </li>
                *          </ul>
                */
            type?: DeviceAttribute | string;
    }
    export namespace IncompatibilityMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IncompatibilityMessage) => any;
    }
    /**
        * <p>Represents a device pool compatibility result.</p>
        */
    export interface DevicePoolCompatibilityResult {
            /**
                * <p>The device (phone or tablet) to return information about.</p>
                */
            device?: Device;
            /**
                * <p>Whether the result was compatible with the device pool.</p>
                */
            compatible?: boolean;
            /**
                * <p>Information about the compatibility.</p>
                */
            incompatibilityMessages?: IncompatibilityMessage[];
    }
    export namespace DevicePoolCompatibilityResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DevicePoolCompatibilityResult) => any;
    }
    /**
        * <p>Represents the result of describe device pool compatibility request.</p>
        */
    export interface GetDevicePoolCompatibilityResult {
            /**
                * <p>Information about compatible devices.</p>
                */
            compatibleDevices?: DevicePoolCompatibilityResult[];
            /**
                * <p>Information about incompatible devices.</p>
                */
            incompatibleDevices?: DevicePoolCompatibilityResult[];
    }
    export namespace GetDevicePoolCompatibilityResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDevicePoolCompatibilityResult) => any;
    }
    export interface GetInstanceProfileRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of an instance profile.</p>
                */
            arn: string | undefined;
    }
    export namespace GetInstanceProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInstanceProfileRequest) => any;
    }
    export interface GetInstanceProfileResult {
            /**
                * <p>An object that contains information about an instance profile.</p>
                */
            instanceProfile?: InstanceProfile;
    }
    export namespace GetInstanceProfileResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInstanceProfileResult) => any;
    }
    /**
        * <p>Represents a request to the get job operation.</p>
        */
    export interface GetJobRequest {
            /**
                * <p>The job's ARN.</p>
                */
            arn: string | undefined;
    }
    export namespace GetJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetJobRequest) => any;
    }
    /**
        * <p>Represents a device.</p>
        */
    export interface Job {
            /**
                * <p>The job's ARN.</p>
                */
            arn?: string;
            /**
                * <p>The job's name.</p>
                */
            name?: string;
            /**
                * <p>The job's type.</p>
                *         <p>Allowed values include the following:</p>
                *         <ul>
                *             <li>
                *                 <p>BUILTIN_FUZZ</p>
                *             </li>
                *             <li>
                *                 <p>BUILTIN_EXPLORER. For Android, an app explorer that traverses an Android app, interacting with
                *                     it and capturing screenshots at the same time.</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_JUNIT</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_TESTNG</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_PYTHON</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_NODE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_RUBY</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_JUNIT</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_TESTNG</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_PYTHON</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_NODE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_RUBY</p>
                *             </li>
                *             <li>
                *                 <p>CALABASH</p>
                *             </li>
                *             <li>
                *                 <p>INSTRUMENTATION</p>
                *             </li>
                *             <li>
                *                 <p>UIAUTOMATION</p>
                *             </li>
                *             <li>
                *                 <p>UIAUTOMATOR</p>
                *             </li>
                *             <li>
                *                 <p>XCTEST</p>
                *             </li>
                *             <li>
                *                 <p>XCTEST_UI</p>
                *             </li>
                *          </ul>
                */
            type?: TestType | string;
            /**
                * <p>When the job was created.</p>
                */
            created?: Date;
            /**
                * <p>The job's status.</p>
                *         <p>Allowed values include:</p>
                *         <ul>
                *             <li>
                *                 <p>PENDING</p>
                *             </li>
                *             <li>
                *                 <p>PENDING_CONCURRENCY</p>
                *             </li>
                *             <li>
                *                 <p>PENDING_DEVICE</p>
                *             </li>
                *             <li>
                *                 <p>PROCESSING</p>
                *             </li>
                *             <li>
                *                 <p>SCHEDULING</p>
                *             </li>
                *             <li>
                *                 <p>PREPARING</p>
                *             </li>
                *             <li>
                *                 <p>RUNNING</p>
                *             </li>
                *             <li>
                *                 <p>COMPLETED</p>
                *             </li>
                *             <li>
                *                 <p>STOPPING</p>
                *             </li>
                *          </ul>
                */
            status?: ExecutionStatus | string;
            /**
                * <p>The job's result.</p>
                *         <p>Allowed values include:</p>
                *         <ul>
                *             <li>
                *                 <p>PENDING</p>
                *             </li>
                *             <li>
                *                 <p>PASSED</p>
                *             </li>
                *             <li>
                *                 <p>WARNED</p>
                *             </li>
                *             <li>
                *                 <p>FAILED</p>
                *             </li>
                *             <li>
                *                 <p>SKIPPED</p>
                *             </li>
                *             <li>
                *                 <p>ERRORED</p>
                *             </li>
                *             <li>
                *                 <p>STOPPED</p>
                *             </li>
                *          </ul>
                */
            result?: ExecutionResult | string;
            /**
                * <p>The job's start time.</p>
                */
            started?: Date;
            /**
                * <p>The job's stop time.</p>
                */
            stopped?: Date;
            /**
                * <p>The job's result counters.</p>
                */
            counters?: Counters;
            /**
                * <p>A message about the job's result.</p>
                */
            message?: string;
            /**
                * <p>The device (phone or tablet).</p>
                */
            device?: Device;
            /**
                * <p>The ARN of the instance.</p>
                */
            instanceArn?: string;
            /**
                * <p>Represents the total (metered or unmetered) minutes used by the job.</p>
                */
            deviceMinutes?: DeviceMinutes;
            /**
                * <p>The endpoint for streaming device video.</p>
                */
            videoEndpoint?: string;
            /**
                * <p>This value is set to true if video capture is enabled. Otherwise, it is set to false.</p>
                */
            videoCapture?: boolean;
    }
    export namespace Job {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Job) => any;
    }
    /**
        * <p>Represents the result of a get job request.</p>
        */
    export interface GetJobResult {
            /**
                * <p>An object that contains information about the requested job.</p>
                */
            job?: Job;
    }
    export namespace GetJobResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetJobResult) => any;
    }
    export interface GetNetworkProfileRequest {
            /**
                * <p>The ARN of the network profile to return information about.</p>
                */
            arn: string | undefined;
    }
    export namespace GetNetworkProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetNetworkProfileRequest) => any;
    }
    export interface GetNetworkProfileResult {
            /**
                * <p>The network profile.</p>
                */
            networkProfile?: NetworkProfile;
    }
    export namespace GetNetworkProfileResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetNetworkProfileResult) => any;
    }
    /**
        * <p>Represents the request to retrieve the offering status for the specified customer
        *             or account.</p>
        */
    export interface GetOfferingStatusRequest {
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can
                *             be used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace GetOfferingStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOfferingStatusRequest) => any;
    }
    /**
        * <p>A number that represents the monetary amount for an offering or transaction.</p>
        */
    export interface MonetaryAmount {
            /**
                * <p>The numerical amount of an offering or transaction.</p>
                */
            amount?: number;
            /**
                * <p>The currency code of a monetary amount. For example, <code>USD</code> means U.S. dollars.</p>
                */
            currencyCode?: CurrencyCode | string;
    }
    export namespace MonetaryAmount {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MonetaryAmount) => any;
    }
    export enum RecurringChargeFrequency {
            MONTHLY = "MONTHLY"
    }
    /**
        * <p>Specifies whether charges for devices are recurring.</p>
        */
    export interface RecurringCharge {
            /**
                * <p>The cost of the recurring charge.</p>
                */
            cost?: MonetaryAmount;
            /**
                * <p>The frequency in which charges recur.</p>
                */
            frequency?: RecurringChargeFrequency | string;
    }
    export namespace RecurringCharge {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RecurringCharge) => any;
    }
    export enum OfferingType {
            RECURRING = "RECURRING"
    }
    /**
        * <p>Represents the metadata of a device offering.</p>
        */
    export interface Offering {
            /**
                * <p>The ID that corresponds to a device offering.</p>
                */
            id?: string;
            /**
                * <p>A string that describes the offering.</p>
                */
            description?: string;
            /**
                * <p>The type of offering (for example, <code>RECURRING</code>) for a device.</p>
                */
            type?: OfferingType | string;
            /**
                * <p>The platform of the device (for example, <code>ANDROID</code> or <code>IOS</code>).</p>
                */
            platform?: DevicePlatform | string;
            /**
                * <p>Specifies whether there are recurring charges for the offering.</p>
                */
            recurringCharges?: RecurringCharge[];
    }
    export namespace Offering {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Offering) => any;
    }
    export enum OfferingTransactionType {
            PURCHASE = "PURCHASE",
            RENEW = "RENEW",
            SYSTEM = "SYSTEM"
    }
    /**
        * <p>The status of the offering.</p>
        */
    export interface OfferingStatus {
            /**
                * <p>The type specified for the offering status.</p>
                */
            type?: OfferingTransactionType | string;
            /**
                * <p>Represents the metadata of an offering status.</p>
                */
            offering?: Offering;
            /**
                * <p>The number of available devices in the offering.</p>
                */
            quantity?: number;
            /**
                * <p>The date on which the offering is effective.</p>
                */
            effectiveOn?: Date;
    }
    export namespace OfferingStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OfferingStatus) => any;
    }
    /**
        * <p>Returns the status result for a device offering.</p>
        */
    export interface GetOfferingStatusResult {
            /**
                * <p>When specified, gets the offering status for the current period.</p>
                */
            current?: Record<string, OfferingStatus>;
            /**
                * <p>When specified, gets the offering status for the next period.</p>
                */
            nextPeriod?: Record<string, OfferingStatus>;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can
                *             be used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace GetOfferingStatusResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOfferingStatusResult) => any;
    }
    /**
        * <p>Exception gets thrown when a user is not eligible to perform the specified
        *             transaction.</p>
        */
    export class NotEligibleException extends __BaseException {
            readonly name: "NotEligibleException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotEligibleException, __BaseException>);
    }
    /**
        * <p>Represents a request to the get project operation.</p>
        */
    export interface GetProjectRequest {
            /**
                * <p>The project's ARN.</p>
                */
            arn: string | undefined;
    }
    export namespace GetProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetProjectRequest) => any;
    }
    /**
        * <p>Represents the result of a get project request.</p>
        */
    export interface GetProjectResult {
            /**
                * <p>The project to get information about.</p>
                */
            project?: Project;
    }
    export namespace GetProjectResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetProjectResult) => any;
    }
    /**
        * <p>Represents the request to get information about the specified remote access
        *             session.</p>
        */
    export interface GetRemoteAccessSessionRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the remote access session about which you want to
                *             get session information.</p>
                */
            arn: string | undefined;
    }
    export namespace GetRemoteAccessSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRemoteAccessSessionRequest) => any;
    }
    /**
        * <p>Represents the response from the server that lists detailed information about the
        *             remote access session.</p>
        */
    export interface GetRemoteAccessSessionResult {
            /**
                * <p>A container that lists detailed information about the remote access
                *             session.</p>
                */
            remoteAccessSession?: RemoteAccessSession;
    }
    export namespace GetRemoteAccessSessionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRemoteAccessSessionResult) => any;
    }
    /**
        * <p>Represents a request to the get run operation.</p>
        */
    export interface GetRunRequest {
            /**
                * <p>The run's ARN.</p>
                */
            arn: string | undefined;
    }
    export namespace GetRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRunRequest) => any;
    }
    export enum DeviceFilterAttribute {
            ARN = "ARN",
            AVAILABILITY = "AVAILABILITY",
            FLEET_TYPE = "FLEET_TYPE",
            FORM_FACTOR = "FORM_FACTOR",
            INSTANCE_ARN = "INSTANCE_ARN",
            INSTANCE_LABELS = "INSTANCE_LABELS",
            MANUFACTURER = "MANUFACTURER",
            MODEL = "MODEL",
            OS_VERSION = "OS_VERSION",
            PLATFORM = "PLATFORM",
            REMOTE_ACCESS_ENABLED = "REMOTE_ACCESS_ENABLED",
            REMOTE_DEBUG_ENABLED = "REMOTE_DEBUG_ENABLED"
    }
    /**
        * <p>Represents a device filter used to select a set of devices to be included in a test
        *             run. This data structure is passed in as the <code>deviceSelectionConfiguration</code>
        *             parameter to <code>ScheduleRun</code>. For an example of the JSON request syntax, see
        *                 <a>ScheduleRun</a>.</p>
        *         <p>It is also passed in as the <code>filters</code> parameter to
        *             <code>ListDevices</code>. For an example of the JSON request syntax, see <a>ListDevices</a>.</p>
        */
    export interface DeviceFilter {
            /**
                * <p>The aspect of a device such as platform or model used as the selection criteria in a
                *             device filter.</p>
                *         <p>The supported operators for each attribute are provided in the following list.</p>
                *         <dl>
                *             <dt>ARN</dt>
                *             <dd>
                *                     <p>The Amazon Resource Name (ARN) of the device (for example,
                *                             <code>arn:aws:devicefarm:us-west-2::device:12345Example</code>).</p>
                *                     <p>Supported operators: <code>EQUALS</code>, <code>IN</code>, <code>NOT_IN</code>
                *                </p>
                *                 </dd>
                *             <dt>PLATFORM</dt>
                *             <dd>
                *                     <p>The device platform. Valid values are ANDROID or IOS.</p>
                *                     <p>Supported operators: <code>EQUALS</code>
                *                </p>
                *                 </dd>
                *             <dt>OS_VERSION</dt>
                *             <dd>
                *                     <p>The operating system version (for example, 10.3.2).</p>
                *                     <p>Supported operators: <code>EQUALS</code>, <code>GREATER_THAN</code>,
                *                             <code>GREATER_THAN_OR_EQUALS</code>, <code>IN</code>,
                *                             <code>LESS_THAN</code>, <code>LESS_THAN_OR_EQUALS</code>,
                *                             <code>NOT_IN</code>
                *                </p>
                *                 </dd>
                *             <dt>MODEL</dt>
                *             <dd>
                *                     <p>The device model (for example, iPad 5th Gen).</p>
                *                     <p>Supported operators: <code>CONTAINS</code>, <code>EQUALS</code>,
                *                             <code>IN</code>, <code>NOT_IN</code>
                *                </p>
                *                 </dd>
                *             <dt>AVAILABILITY</dt>
                *             <dd>
                *                     <p>The current availability of the device. Valid values are AVAILABLE,
                *                         HIGHLY_AVAILABLE, BUSY, or TEMPORARY_NOT_AVAILABLE.</p>
                *                     <p>Supported operators: <code>EQUALS</code>
                *                </p>
                *                 </dd>
                *             <dt>FORM_FACTOR</dt>
                *             <dd>
                *                     <p>The device form factor. Valid values are PHONE or TABLET.</p>
                *                     <p>Supported operators: <code>EQUALS</code>
                *                </p>
                *                 </dd>
                *             <dt>MANUFACTURER</dt>
                *             <dd>
                *                     <p>The device manufacturer (for example, Apple).</p>
                *                     <p>Supported operators: <code>EQUALS</code>, <code>IN</code>,
                *                             <code>NOT_IN</code>
                *                </p>
                *                 </dd>
                *             <dt>REMOTE_ACCESS_ENABLED</dt>
                *             <dd>
                *                     <p>Whether the device is enabled for remote access. Valid values are TRUE or
                *                         FALSE.</p>
                *                     <p>Supported operators: <code>EQUALS</code>
                *                </p>
                *                 </dd>
                *             <dt>REMOTE_DEBUG_ENABLED</dt>
                *             <dd>
                *                     <p>Whether the device is enabled for remote debugging. Valid values are TRUE or FALSE.</p>
                *                     <p>Supported operators: <code>EQUALS</code>
                *                </p>
                *                     <p>Because remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no longer
                *                             supported</a>, this filter is ignored.</p>
                *                 </dd>
                *             <dt>INSTANCE_ARN</dt>
                *             <dd>
                *                     <p>The Amazon Resource Name (ARN) of the device instance.</p>
                *                     <p>Supported operators: <code>EQUALS</code>, <code>IN</code>,
                *                             <code>NOT_IN</code>
                *                </p>
                *                 </dd>
                *             <dt>INSTANCE_LABELS</dt>
                *             <dd>
                *                     <p>The label of the device instance.</p>
                *                     <p>Supported operators: <code>CONTAINS</code>
                *                </p>
                *                 </dd>
                *             <dt>FLEET_TYPE</dt>
                *             <dd>
                *                     <p>The fleet type. Valid values are PUBLIC or PRIVATE.</p>
                *                     <p>Supported operators: <code>EQUALS</code>
                *                </p>
                *                 </dd>
                *          </dl>
                */
            attribute: DeviceFilterAttribute | string | undefined;
            /**
                * <p>Specifies how Device Farm compares the filter's attribute to the value. See the attribute
                *             descriptions.</p>
                */
            operator: RuleOperator | string | undefined;
            /**
                * <p>An array of one or more filter values used in a device filter.</p>
                *         <p class="title">
                *             <b>Operator Values</b>
                *          </p>
                *          <ul>
                *             <li>
                *                 <p>The IN and NOT_IN operators can take a values array that has more than one
                *                     element.</p>
                *             </li>
                *             <li>
                *                 <p>The other operators require an array with a single element.</p>
                *             </li>
                *          </ul>
                *         <p class="title">
                *             <b>Attribute Values</b>
                *          </p>
                *          <ul>
                *             <li>
                *                 <p>The PLATFORM attribute can be set to ANDROID or IOS.</p>
                *             </li>
                *             <li>
                *                 <p>The AVAILABILITY attribute can be set to AVAILABLE, HIGHLY_AVAILABLE, BUSY, or
                *                     TEMPORARY_NOT_AVAILABLE.</p>
                *             </li>
                *             <li>
                *                 <p>The FORM_FACTOR attribute can be set to PHONE or TABLET.</p>
                *             </li>
                *             <li>
                *                 <p>The FLEET_TYPE attribute can be set to PUBLIC or PRIVATE.</p>
                *             </li>
                *          </ul>
                */
            values: string[] | undefined;
    }
    export namespace DeviceFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeviceFilter) => any;
    }
    /**
        * <p>Contains the run results requested by the device selection configuration and how many devices were
        *             returned. For an example of the JSON response syntax, see <a>ScheduleRun</a>.</p>
        */
    export interface DeviceSelectionResult {
            /**
                * <p>The filters in a device selection result.</p>
                */
            filters?: DeviceFilter[];
            /**
                * <p>The number of devices that matched the device filter selection criteria.</p>
                */
            matchedDevicesCount?: number;
            /**
                * <p>The maximum number of devices to be selected by a device filter and included in a test
                *             run.</p>
                */
            maxDevices?: number;
    }
    export namespace DeviceSelectionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeviceSelectionResult) => any;
    }
    export enum ExecutionResultCode {
            PARSING_FAILED = "PARSING_FAILED",
            VPC_ENDPOINT_SETUP_FAILED = "VPC_ENDPOINT_SETUP_FAILED"
    }
    /**
        * <p>Represents a test run on a set of devices with a given app package, test parameters, and so
        *             on.</p>
        */
    export interface Run {
            /**
                * <p>The run's ARN.</p>
                */
            arn?: string;
            /**
                * <p>The run's name.</p>
                */
            name?: string;
            /**
                * <p>The run's type.</p>
                *         <p>Must be one of the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>BUILTIN_FUZZ</p>
                *             </li>
                *             <li>
                *                 <p>BUILTIN_EXPLORER</p>
                *                 <note>
                *                     <p>For Android, an app explorer that traverses an Android app, interacting with it and capturing
                *                         screenshots at the same time.</p>
                *                 </note>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_JUNIT</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_TESTNG</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_PYTHON</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_NODE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_RUBY</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_JUNIT</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_TESTNG</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_PYTHON</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_NODE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_RUBY</p>
                *             </li>
                *             <li>
                *                 <p>CALABASH</p>
                *             </li>
                *             <li>
                *                 <p>INSTRUMENTATION</p>
                *             </li>
                *             <li>
                *                 <p>UIAUTOMATION</p>
                *             </li>
                *             <li>
                *                 <p>UIAUTOMATOR</p>
                *             </li>
                *             <li>
                *                 <p>XCTEST</p>
                *             </li>
                *             <li>
                *                 <p>XCTEST_UI</p>
                *             </li>
                *          </ul>
                */
            type?: TestType | string;
            /**
                * <p>The run's platform.</p>
                *         <p>Allowed values include:</p>
                *         <ul>
                *             <li>
                *                 <p>ANDROID</p>
                *             </li>
                *             <li>
                *                 <p>IOS</p>
                *             </li>
                *          </ul>
                */
            platform?: DevicePlatform | string;
            /**
                * <p>When the run was created.</p>
                */
            created?: Date;
            /**
                * <p>The run's status.</p>
                *         <p>Allowed values include:</p>
                *         <ul>
                *             <li>
                *                 <p>PENDING</p>
                *             </li>
                *             <li>
                *                 <p>PENDING_CONCURRENCY</p>
                *             </li>
                *             <li>
                *                 <p>PENDING_DEVICE</p>
                *             </li>
                *             <li>
                *                 <p>PROCESSING</p>
                *             </li>
                *             <li>
                *                 <p>SCHEDULING</p>
                *             </li>
                *             <li>
                *                 <p>PREPARING</p>
                *             </li>
                *             <li>
                *                 <p>RUNNING</p>
                *             </li>
                *             <li>
                *                 <p>COMPLETED</p>
                *             </li>
                *             <li>
                *                 <p>STOPPING</p>
                *             </li>
                *          </ul>
                */
            status?: ExecutionStatus | string;
            /**
                * <p>The run's result.</p>
                *         <p>Allowed values include:</p>
                *         <ul>
                *             <li>
                *                 <p>PENDING</p>
                *             </li>
                *             <li>
                *                 <p>PASSED</p>
                *             </li>
                *             <li>
                *                 <p>WARNED</p>
                *             </li>
                *             <li>
                *                 <p>FAILED</p>
                *             </li>
                *             <li>
                *                 <p>SKIPPED</p>
                *             </li>
                *             <li>
                *                 <p>ERRORED</p>
                *             </li>
                *             <li>
                *                 <p>STOPPED</p>
                *             </li>
                *          </ul>
                */
            result?: ExecutionResult | string;
            /**
                * <p>The run's start time.</p>
                */
            started?: Date;
            /**
                * <p>The run's stop time.</p>
                */
            stopped?: Date;
            /**
                * <p>The run's result counters.</p>
                */
            counters?: Counters;
            /**
                * <p>A message about the run's result.</p>
                */
            message?: string;
            /**
                * <p>The total number of jobs for the run.</p>
                */
            totalJobs?: number;
            /**
                * <p>The total number of completed jobs.</p>
                */
            completedJobs?: number;
            /**
                * <p>Specifies the billing method for a test run: <code>metered</code> or
                *                 <code>unmetered</code>. If the parameter is not specified, the default value is
                *                 <code>metered</code>.</p>
                *         <note>
                *             <p>If you have unmetered device slots, you must set this to <code>unmetered</code> to use them.
                *                 Otherwise, the run is counted toward metered device minutes.</p>
                *         </note>
                */
            billingMethod?: BillingMethod | string;
            /**
                * <p>Represents the total (metered or unmetered) minutes used by the test run.</p>
                */
            deviceMinutes?: DeviceMinutes;
            /**
                * <p>The network profile being used for a test run.</p>
                */
            networkProfile?: NetworkProfile;
            /**
                * <p>Read-only URL for an object in an S3 bucket where you can get the parsing results of the test package.
                *             If the test package doesn't parse, the reason why it doesn't parse appears in the file that this URL points
                *             to.</p>
                */
            parsingResultUrl?: string;
            /**
                * <p>Supporting field for the result field. Set only if <code>result</code> is <code>SKIPPED</code>.
                *                 <code>PARSING_FAILED</code> if the result is skipped because of test package parsing failure.</p>
                */
            resultCode?: ExecutionResultCode | string;
            /**
                * <p>For fuzz tests, this is a seed to use for randomizing the UI fuzz test. Using the same
                *             seed value between tests ensures identical event sequences.</p>
                */
            seed?: number;
            /**
                * <p>An app to upload or that has been uploaded.</p>
                */
            appUpload?: string;
            /**
                * <p>For fuzz tests, this is the number of events, between 1 and 10000, that the UI fuzz
                *             test should perform.</p>
                */
            eventCount?: number;
            /**
                * <p>The number of minutes the job executes before it times out.</p>
                */
            jobTimeoutMinutes?: number;
            /**
                * <p>The ARN of the device pool for the run.</p>
                */
            devicePoolArn?: string;
            /**
                * <p>Information about the locale that is used for the run.</p>
                */
            locale?: string;
            /**
                * <p>Information about the radio states for the run.</p>
                */
            radios?: Radios;
            /**
                * <p>Information about the location that is used for the run.</p>
                */
            location?: Location;
            /**
                * <p>Output <code>CustomerArtifactPaths</code> object for the test run.</p>
                */
            customerArtifactPaths?: CustomerArtifactPaths;
            /**
                * <p>The Device Farm console URL for the recording of the run.</p>
                */
            webUrl?: string;
            /**
                * <p>When set to <code>true</code>, for private devices, Device Farm does not sign your app again. For public
                *             devices, Device Farm always signs your apps again.</p>
                *         <p>For more information about how Device Farm re-signs your apps, see <a href="https://aws.amazon.com/device-farm/faq/">Do you modify my app?</a> in the <i>AWS Device
                *                 Farm FAQs</i>.</p>
                */
            skipAppResign?: boolean;
            /**
                * <p>The ARN of the YAML-formatted test specification for the run.</p>
                */
            testSpecArn?: string;
            /**
                * <p>The results of a device filter used to select the devices for a test run.</p>
                */
            deviceSelectionResult?: DeviceSelectionResult;
    }
    export namespace Run {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Run) => any;
    }
    /**
        * <p>Represents the result of a get run request.</p>
        */
    export interface GetRunResult {
            /**
                * <p>The run to get results from.</p>
                */
            run?: Run;
    }
    export namespace GetRunResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRunResult) => any;
    }
    /**
        * <p>Represents a request to the get suite operation.</p>
        */
    export interface GetSuiteRequest {
            /**
                * <p>The suite's ARN.</p>
                */
            arn: string | undefined;
    }
    export namespace GetSuiteRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSuiteRequest) => any;
    }
    /**
        * <p>Represents a collection of one or more tests.</p>
        */
    export interface Suite {
            /**
                * <p>The suite's ARN.</p>
                */
            arn?: string;
            /**
                * <p>The suite's name.</p>
                */
            name?: string;
            /**
                * <p>The suite's type.</p>
                *         <p>Must be one of the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>BUILTIN_FUZZ</p>
                *             </li>
                *             <li>
                *                 <p>BUILTIN_EXPLORER </p>
                *                 <note>
                *                     <p>Only available for Android; an app explorer that traverses an Android app, interacting with it
                *                         and capturing screenshots at the same time.</p>
                *                 </note>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_JUNIT</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_TESTNG</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_PYTHON</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_NODE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_RUBY</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_JUNIT</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_TESTNG</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_PYTHON</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_NODE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_RUBY</p>
                *             </li>
                *             <li>
                *                 <p>CALABASH</p>
                *             </li>
                *             <li>
                *                 <p>INSTRUMENTATION</p>
                *             </li>
                *             <li>
                *                 <p>UIAUTOMATION</p>
                *             </li>
                *             <li>
                *                 <p>UIAUTOMATOR</p>
                *             </li>
                *             <li>
                *                 <p>XCTEST</p>
                *             </li>
                *             <li>
                *                 <p>XCTEST_UI</p>
                *             </li>
                *          </ul>
                */
            type?: TestType | string;
            /**
                * <p>When the suite was created.</p>
                */
            created?: Date;
            /**
                * <p>The suite's status.</p>
                *         <p>Allowed values include:</p>
                *         <ul>
                *             <li>
                *                 <p>PENDING</p>
                *             </li>
                *             <li>
                *                 <p>PENDING_CONCURRENCY</p>
                *             </li>
                *             <li>
                *                 <p>PENDING_DEVICE</p>
                *             </li>
                *             <li>
                *                 <p>PROCESSING</p>
                *             </li>
                *             <li>
                *                 <p>SCHEDULING</p>
                *             </li>
                *             <li>
                *                 <p>PREPARING</p>
                *             </li>
                *             <li>
                *                 <p>RUNNING</p>
                *             </li>
                *             <li>
                *                 <p>COMPLETED</p>
                *             </li>
                *             <li>
                *                 <p>STOPPING</p>
                *             </li>
                *          </ul>
                */
            status?: ExecutionStatus | string;
            /**
                * <p>The suite's result.</p>
                *         <p>Allowed values include:</p>
                *         <ul>
                *             <li>
                *                 <p>PENDING</p>
                *             </li>
                *             <li>
                *                 <p>PASSED</p>
                *             </li>
                *             <li>
                *                 <p>WARNED</p>
                *             </li>
                *             <li>
                *                 <p>FAILED</p>
                *             </li>
                *             <li>
                *                 <p>SKIPPED</p>
                *             </li>
                *             <li>
                *                 <p>ERRORED</p>
                *             </li>
                *             <li>
                *                 <p>STOPPED</p>
                *             </li>
                *          </ul>
                */
            result?: ExecutionResult | string;
            /**
                * <p>The suite's start time.</p>
                */
            started?: Date;
            /**
                * <p>The suite's stop time.</p>
                */
            stopped?: Date;
            /**
                * <p>The suite's result counters.</p>
                */
            counters?: Counters;
            /**
                * <p>A message about the suite's result.</p>
                */
            message?: string;
            /**
                * <p>Represents the total (metered or unmetered) minutes used by the test
                *             suite.</p>
                */
            deviceMinutes?: DeviceMinutes;
    }
    export namespace Suite {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Suite) => any;
    }
    /**
        * <p>Represents the result of a get suite request.</p>
        */
    export interface GetSuiteResult {
            /**
                * <p>A collection of one or more tests.</p>
                */
            suite?: Suite;
    }
    export namespace GetSuiteResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSuiteResult) => any;
    }
    /**
        * <p>Represents a request to the get test operation.</p>
        */
    export interface GetTestRequest {
            /**
                * <p>The test's ARN.</p>
                */
            arn: string | undefined;
    }
    export namespace GetTestRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTestRequest) => any;
    }
    /**
        * <p>Represents a condition that is evaluated.</p>
        */
    export interface Test {
            /**
                * <p>The test's ARN.</p>
                */
            arn?: string;
            /**
                * <p>The test's name.</p>
                */
            name?: string;
            /**
                * <p>The test's type.</p>
                *         <p>Must be one of the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>BUILTIN_FUZZ</p>
                *             </li>
                *             <li>
                *                 <p>BUILTIN_EXPLORER</p>
                *                 <note>
                *                     <p>For Android, an app explorer that traverses an Android app, interacting with it and capturing
                *                         screenshots at the same time.</p>
                *                 </note>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_JUNIT</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_TESTNG</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_PYTHON</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_NODE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_RUBY</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_JUNIT</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_TESTNG</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_PYTHON</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_NODE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_RUBY</p>
                *             </li>
                *             <li>
                *                 <p>CALABASH</p>
                *             </li>
                *             <li>
                *                 <p>INSTRUMENTATION</p>
                *             </li>
                *             <li>
                *                 <p>UIAUTOMATION</p>
                *             </li>
                *             <li>
                *                 <p>UIAUTOMATOR</p>
                *             </li>
                *             <li>
                *                 <p>XCTEST</p>
                *             </li>
                *             <li>
                *                 <p>XCTEST_UI</p>
                *             </li>
                *          </ul>
                */
            type?: TestType | string;
            /**
                * <p>When the test was created.</p>
                */
            created?: Date;
            /**
                * <p>The test's status.</p>
                *         <p>Allowed values include:</p>
                *         <ul>
                *             <li>
                *                 <p>PENDING</p>
                *             </li>
                *             <li>
                *                 <p>PENDING_CONCURRENCY</p>
                *             </li>
                *             <li>
                *                 <p>PENDING_DEVICE</p>
                *             </li>
                *             <li>
                *                 <p>PROCESSING</p>
                *             </li>
                *             <li>
                *                 <p>SCHEDULING</p>
                *             </li>
                *             <li>
                *                 <p>PREPARING</p>
                *             </li>
                *             <li>
                *                 <p>RUNNING</p>
                *             </li>
                *             <li>
                *                 <p>COMPLETED</p>
                *             </li>
                *             <li>
                *                 <p>STOPPING</p>
                *             </li>
                *          </ul>
                */
            status?: ExecutionStatus | string;
            /**
                * <p>The test's result.</p>
                *         <p>Allowed values include:</p>
                *         <ul>
                *             <li>
                *                 <p>PENDING</p>
                *             </li>
                *             <li>
                *                 <p>PASSED</p>
                *             </li>
                *             <li>
                *                 <p>WARNED</p>
                *             </li>
                *             <li>
                *                 <p>FAILED</p>
                *             </li>
                *             <li>
                *                 <p>SKIPPED</p>
                *             </li>
                *             <li>
                *                 <p>ERRORED</p>
                *             </li>
                *             <li>
                *                 <p>STOPPED</p>
                *             </li>
                *          </ul>
                */
            result?: ExecutionResult | string;
            /**
                * <p>The test's start time.</p>
                */
            started?: Date;
            /**
                * <p>The test's stop time.</p>
                */
            stopped?: Date;
            /**
                * <p>The test's result counters.</p>
                */
            counters?: Counters;
            /**
                * <p>A message about the test's result.</p>
                */
            message?: string;
            /**
                * <p>Represents the total (metered or unmetered) minutes used by the test.</p>
                */
            deviceMinutes?: DeviceMinutes;
    }
    export namespace Test {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Test) => any;
    }
    /**
        * <p>Represents the result of a get test request.</p>
        */
    export interface GetTestResult {
            /**
                * <p>A test condition that is evaluated.</p>
                */
            test?: Test;
    }
    export namespace GetTestResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTestResult) => any;
    }
    export interface GetTestGridProjectRequest {
            /**
                * <p>The ARN of the Selenium testing project, from either <a>CreateTestGridProject</a> or <a>ListTestGridProjects</a>.</p>
                */
            projectArn: string | undefined;
    }
    export namespace GetTestGridProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTestGridProjectRequest) => any;
    }
    export interface GetTestGridProjectResult {
            /**
                * <p>A <a>TestGridProject</a>.</p>
                */
            testGridProject?: TestGridProject;
    }
    export namespace GetTestGridProjectResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTestGridProjectResult) => any;
    }
    export interface GetTestGridSessionRequest {
            /**
                * <p>The ARN for the project that this session belongs to. See <a>CreateTestGridProject</a> and <a>ListTestGridProjects</a>.</p>
                */
            projectArn?: string;
            /**
                * <p>An ID associated with this session.</p>
                */
            sessionId?: string;
            /**
                * <p>An ARN that uniquely identifies a <a>TestGridSession</a>.</p>
                */
            sessionArn?: string;
    }
    export namespace GetTestGridSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTestGridSessionRequest) => any;
    }
    export enum TestGridSessionStatus {
            ACTIVE = "ACTIVE",
            CLOSED = "CLOSED",
            ERRORED = "ERRORED"
    }
    /**
        * <p>A <a>TestGridSession</a> is a single instance of a browser launched from the URL provided by a
        *          call to <a>CreateTestGridUrl</a>.</p>
        */
    export interface TestGridSession {
            /**
                * <p>The ARN of the session.</p>
                */
            arn?: string;
            /**
                * <p>The state of the session.</p>
                */
            status?: TestGridSessionStatus | string;
            /**
                * <p>The time that the session was started.</p>
                */
            created?: Date;
            /**
                * <p>The time the session ended.</p>
                */
            ended?: Date;
            /**
                * <p>The number of billed minutes that were used for this session. </p>
                */
            billingMinutes?: number;
            /**
                * <p>A JSON object of options and parameters passed to the Selenium WebDriver.</p>
                */
            seleniumProperties?: string;
    }
    export namespace TestGridSession {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestGridSession) => any;
    }
    export interface GetTestGridSessionResult {
            /**
                * <p>The <a>TestGridSession</a> that was requested.</p>
                */
            testGridSession?: TestGridSession;
    }
    export namespace GetTestGridSessionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTestGridSessionResult) => any;
    }
    /**
        * <p>Represents a request to the get upload operation.</p>
        */
    export interface GetUploadRequest {
            /**
                * <p>The upload's ARN.</p>
                */
            arn: string | undefined;
    }
    export namespace GetUploadRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUploadRequest) => any;
    }
    /**
        * <p>Represents the result of a get upload request.</p>
        */
    export interface GetUploadResult {
            /**
                * <p>An app or a set of one or more tests to upload or that have been
                *             uploaded.</p>
                */
            upload?: Upload;
    }
    export namespace GetUploadResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUploadResult) => any;
    }
    export interface GetVPCEConfigurationRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the VPC endpoint configuration you want to
                *             describe.</p>
                */
            arn: string | undefined;
    }
    export namespace GetVPCEConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetVPCEConfigurationRequest) => any;
    }
    export interface GetVPCEConfigurationResult {
            /**
                * <p>An object that contains information about your VPC endpoint configuration.</p>
                */
            vpceConfiguration?: VPCEConfiguration;
    }
    export namespace GetVPCEConfigurationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetVPCEConfigurationResult) => any;
    }
    /**
        * <p>Represents the request to install an Android application (in .apk format) or an iOS
        *             application (in .ipa format) as part of a remote access session.</p>
        */
    export interface InstallToRemoteAccessSessionRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the remote access session about which you are
                *             requesting information.</p>
                */
            remoteAccessSessionArn: string | undefined;
            /**
                * <p>The ARN of the app about which you are requesting information.</p>
                */
            appArn: string | undefined;
    }
    export namespace InstallToRemoteAccessSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstallToRemoteAccessSessionRequest) => any;
    }
    /**
        * <p>Represents the response from the server after AWS Device Farm makes a request to
        *             install to a remote access session.</p>
        */
    export interface InstallToRemoteAccessSessionResult {
            /**
                * <p>An app to upload or that has been uploaded.</p>
                */
            appUpload?: Upload;
    }
    export namespace InstallToRemoteAccessSessionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstallToRemoteAccessSessionResult) => any;
    }
    /**
        * <p>Represents a request to the list artifacts operation.</p>
        */
    export interface ListArtifactsRequest {
            /**
                * <p>The run, job, suite, or test ARN.</p>
                */
            arn: string | undefined;
            /**
                * <p>The artifacts' type.</p>
                *         <p>Allowed values include:</p>
                *         <ul>
                *             <li>
                *                 <p>FILE</p>
                *             </li>
                *             <li>
                *                 <p>LOG</p>
                *             </li>
                *             <li>
                *                 <p>SCREENSHOT</p>
                *             </li>
                *          </ul>
                */
            type: ArtifactCategory | string | undefined;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can
                *             be used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListArtifactsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListArtifactsRequest) => any;
    }
    /**
        * <p>Represents the result of a list artifacts operation.</p>
        */
    export interface ListArtifactsResult {
            /**
                * <p>Information about the artifacts.</p>
                */
            artifacts?: Artifact[];
            /**
                * <p>If the number of items that are returned is significantly large, this is an identifier that is also
                *             returned. It can be used in a subsequent call to this operation to return the next set of items in the
                *             list.</p>
                */
            nextToken?: string;
    }
    export namespace ListArtifactsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListArtifactsResult) => any;
    }
    export interface ListDeviceInstancesRequest {
            /**
                * <p>An integer that specifies the maximum number of items you want to return in the API response.</p>
                */
            maxResults?: number;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can be
                *             used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListDeviceInstancesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDeviceInstancesRequest) => any;
    }
    export interface ListDeviceInstancesResult {
            /**
                * <p>An object that contains information about your device instances.</p>
                */
            deviceInstances?: DeviceInstance[];
            /**
                * <p>An identifier that can be used in the next call to this operation to return the next
                *             set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListDeviceInstancesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDeviceInstancesResult) => any;
    }
    /**
        * <p>Represents the result of a list device pools request.</p>
        */
    export interface ListDevicePoolsRequest {
            /**
                * <p>The project ARN.</p>
                */
            arn: string | undefined;
            /**
                * <p>The device pools' type.</p>
                *         <p>Allowed values include:</p>
                *         <ul>
                *             <li>
                *                 <p>CURATED: A device pool that is created and managed by AWS Device
                *                     Farm.</p>
                *             </li>
                *             <li>
                *                 <p>PRIVATE: A device pool that is created and managed by the device pool
                *                     developer.</p>
                *             </li>
                *          </ul>
                */
            type?: DevicePoolType | string;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can
                *             be used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListDevicePoolsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDevicePoolsRequest) => any;
    }
    /**
        * <p>Represents the result of a list device pools request.</p>
        */
    export interface ListDevicePoolsResult {
            /**
                * <p>Information about the device pools.</p>
                */
            devicePools?: DevicePool[];
            /**
                * <p>If the number of items that are returned is significantly large, this is an identifier that is also
                *             returned. It can be used in a subsequent call to this operation to return the next set of items in the
                *             list.</p>
                */
            nextToken?: string;
    }
    export namespace ListDevicePoolsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDevicePoolsResult) => any;
    }
    /**
        * <p>Represents the result of a list devices request.</p>
        */
    export interface ListDevicesRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the project.</p>
                */
            arn?: string;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can
                *             be used to return the next set of items in the list.</p>
                */
            nextToken?: string;
            /**
                * <p>Used to select a set of devices. A filter is made up of an attribute, an operator, and
                *             one or more values.</p>
                *         <ul>
                *             <li>
                *                 <p>Attribute: The aspect of a device such as platform or model used as the
                *                     selection criteria in a device filter.</p>
                *                 <p>Allowed values include:</p>
                *                 <ul>
                *                   <li>
                *                         <p>ARN: The Amazon Resource Name (ARN) of the device (for example,
                *                                 <code>arn:aws:devicefarm:us-west-2::device:12345Example</code>).</p>
                *                     </li>
                *                   <li>
                *                         <p>PLATFORM: The device platform. Valid values are ANDROID or IOS.</p>
                *                     </li>
                *                   <li>
                *                         <p>OS_VERSION: The operating system version (for example, 10.3.2).</p>
                *                     </li>
                *                   <li>
                *                         <p>MODEL: The device model (for example, iPad 5th Gen).</p>
                *                     </li>
                *                   <li>
                *                         <p>AVAILABILITY: The current availability of the device. Valid values are AVAILABLE,
                *                             HIGHLY_AVAILABLE, BUSY, or TEMPORARY_NOT_AVAILABLE.</p>
                *                     </li>
                *                   <li>
                *                         <p>FORM_FACTOR: The device form factor. Valid values are PHONE or TABLET.</p>
                *                     </li>
                *                   <li>
                *                         <p>MANUFACTURER: The device manufacturer (for example, Apple).</p>
                *                     </li>
                *                   <li>
                *                         <p>REMOTE_ACCESS_ENABLED: Whether the device is enabled for remote access. Valid values
                *                             are TRUE or FALSE.</p>
                *                     </li>
                *                   <li>
                *                         <p>REMOTE_DEBUG_ENABLED: Whether the device is enabled for remote debugging. Valid values
                *                             are TRUE or FALSE. Because remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no
                *                                 longer supported</a>, this attribute is ignored.</p>
                *                     </li>
                *                   <li>
                *                         <p>INSTANCE_ARN: The Amazon Resource Name (ARN) of the device
                *                             instance.</p>
                *                     </li>
                *                   <li>
                *                         <p>INSTANCE_LABELS: The label of the device instance.</p>
                *                     </li>
                *                   <li>
                *                         <p>FLEET_TYPE: The fleet type. Valid values are PUBLIC or PRIVATE.</p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>Operator: The filter operator.</p>
                *                 <ul>
                *                   <li>
                *                         <p>The EQUALS operator is available for every attribute except
                *                             INSTANCE_LABELS.</p>
                *                     </li>
                *                   <li>
                *                         <p>The CONTAINS operator is available for the INSTANCE_LABELS and MODEL
                *                             attributes.</p>
                *                     </li>
                *                   <li>
                *                         <p>The IN and NOT_IN operators are available for the ARN, OS_VERSION,
                *                             MODEL, MANUFACTURER, and INSTANCE_ARN attributes.</p>
                *                     </li>
                *                   <li>
                *                         <p>The LESS_THAN, GREATER_THAN, LESS_THAN_OR_EQUALS, and
                *                             GREATER_THAN_OR_EQUALS operators are also available for the OS_VERSION
                *                             attribute.</p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>Values: An array of one or more filter values.</p>
                *                 <ul>
                *                   <li>
                *                         <p>The IN and NOT_IN operators take a values array that has one or more
                *                             elements.</p>
                *                     </li>
                *                   <li>
                *                         <p>The other operators require an array with a single element.</p>
                *                     </li>
                *                   <li>
                *                         <p>In a request, the AVAILABILITY attribute takes the following values: AVAILABLE,
                *                             HIGHLY_AVAILABLE, BUSY, or TEMPORARY_NOT_AVAILABLE.</p>
                *                     </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            filters?: DeviceFilter[];
    }
    export namespace ListDevicesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDevicesRequest) => any;
    }
    /**
        * <p>Represents the result of a list devices operation.</p>
        */
    export interface ListDevicesResult {
            /**
                * <p>Information about the devices.</p>
                */
            devices?: Device[];
            /**
                * <p>If the number of items that are returned is significantly large, this is an identifier that is also
                *             returned. It can be used in a subsequent call to this operation to return the next set of items in the
                *             list.</p>
                */
            nextToken?: string;
    }
    export namespace ListDevicesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDevicesResult) => any;
    }
    export interface ListInstanceProfilesRequest {
            /**
                * <p>An integer that specifies the maximum number of items you want to return in the API response.</p>
                */
            maxResults?: number;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can be
                *             used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListInstanceProfilesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListInstanceProfilesRequest) => any;
    }
    export interface ListInstanceProfilesResult {
            /**
                * <p>An object that contains information about your instance profiles.</p>
                */
            instanceProfiles?: InstanceProfile[];
            /**
                * <p>An identifier that can be used in the next call to this operation to return the next
                *             set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListInstanceProfilesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListInstanceProfilesResult) => any;
    }
    /**
        * <p>Represents a request to the list jobs operation.</p>
        */
    export interface ListJobsRequest {
            /**
                * <p>The run's Amazon Resource Name (ARN).</p>
                */
            arn: string | undefined;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can
                *             be used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListJobsRequest) => any;
    }
    /**
        * <p>Represents the result of a list jobs request.</p>
        */
    export interface ListJobsResult {
            /**
                * <p>Information about the jobs.</p>
                */
            jobs?: Job[];
            /**
                * <p>If the number of items that are returned is significantly large, this is an identifier that is also
                *             returned. It can be used in a subsequent call to this operation to return the next set of items in the
                *             list.</p>
                */
            nextToken?: string;
    }
    export namespace ListJobsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListJobsResult) => any;
    }
    export interface ListNetworkProfilesRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the project for which you want to list network
                *             profiles.</p>
                */
            arn: string | undefined;
            /**
                * <p>The type of network profile to return information about. Valid values are listed here.</p>
                */
            type?: NetworkProfileType | string;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can
                *             be used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListNetworkProfilesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNetworkProfilesRequest) => any;
    }
    export interface ListNetworkProfilesResult {
            /**
                * <p>A list of the available network profiles.</p>
                */
            networkProfiles?: NetworkProfile[];
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can
                *             be used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListNetworkProfilesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNetworkProfilesResult) => any;
    }
    export interface ListOfferingPromotionsRequest {
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can
                *             be used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListOfferingPromotionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOfferingPromotionsRequest) => any;
    }
    /**
        * <p>Represents information about an offering promotion.</p>
        */
    export interface OfferingPromotion {
            /**
                * <p>The ID of the offering promotion.</p>
                */
            id?: string;
            /**
                * <p>A string that describes the offering promotion.</p>
                */
            description?: string;
    }
    export namespace OfferingPromotion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OfferingPromotion) => any;
    }
    export interface ListOfferingPromotionsResult {
            /**
                * <p>Information about the offering promotions.</p>
                */
            offeringPromotions?: OfferingPromotion[];
            /**
                * <p>An identifier to be used in the next call to this operation, to return the next set
                *             of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListOfferingPromotionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOfferingPromotionsResult) => any;
    }
    /**
        * <p>Represents the request to list all offerings.</p>
        */
    export interface ListOfferingsRequest {
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can
                *             be used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListOfferingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOfferingsRequest) => any;
    }
    /**
        * <p>Represents the return values of the list of offerings.</p>
        */
    export interface ListOfferingsResult {
            /**
                * <p>A value that represents the list offering results.</p>
                */
            offerings?: Offering[];
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can
                *             be used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListOfferingsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOfferingsResult) => any;
    }
    /**
        * <p>Represents the request to list the offering transaction history.</p>
        */
    export interface ListOfferingTransactionsRequest {
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can
                *             be used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListOfferingTransactionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOfferingTransactionsRequest) => any;
    }
    /**
        * <p>Represents the metadata of an offering transaction.</p>
        */
    export interface OfferingTransaction {
            /**
                * <p>The status of an offering transaction.</p>
                */
            offeringStatus?: OfferingStatus;
            /**
                * <p>The transaction ID of the offering transaction.</p>
                */
            transactionId?: string;
            /**
                * <p>The ID that corresponds to a device offering promotion.</p>
                */
            offeringPromotionId?: string;
            /**
                * <p>The date on which an offering transaction was created.</p>
                */
            createdOn?: Date;
            /**
                * <p>The cost of an offering transaction.</p>
                */
            cost?: MonetaryAmount;
    }
    export namespace OfferingTransaction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OfferingTransaction) => any;
    }
    /**
        * <p>Returns the transaction log of the specified offerings.</p>
        */
    export interface ListOfferingTransactionsResult {
            /**
                * <p>The audit log of subscriptions you have purchased and modified through AWS Device
                *             Farm.</p>
                */
            offeringTransactions?: OfferingTransaction[];
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can
                *             be used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListOfferingTransactionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOfferingTransactionsResult) => any;
    }
    /**
        * <p>Represents a request to the list projects operation.</p>
        */
    export interface ListProjectsRequest {
            /**
                * <p>Optional. If no Amazon Resource Name (ARN) is specified, then AWS Device Farm
                *             returns a list of all projects for the AWS account. You can also specify a project
                *             ARN.</p>
                */
            arn?: string;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can
                *             be used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListProjectsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProjectsRequest) => any;
    }
    /**
        * <p>Represents the result of a list projects request.</p>
        */
    export interface ListProjectsResult {
            /**
                * <p>Information about the projects.</p>
                */
            projects?: Project[];
            /**
                * <p>If the number of items that are returned is significantly large, this is an identifier that is also
                *             returned. It can be used in a subsequent call to this operation to return the next set of items in the
                *             list.</p>
                */
            nextToken?: string;
    }
    export namespace ListProjectsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProjectsResult) => any;
    }
    /**
        * <p>Represents the request to return information about the remote access
        *             session.</p>
        */
    export interface ListRemoteAccessSessionsRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the project about which you are requesting
                *             information.</p>
                */
            arn: string | undefined;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can
                *             be used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListRemoteAccessSessionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRemoteAccessSessionsRequest) => any;
    }
    /**
        * <p>Represents the response from the server after AWS Device Farm makes a request to
        *             return information about the remote access session.</p>
        */
    export interface ListRemoteAccessSessionsResult {
            /**
                * <p>A container that represents the metadata from the service about each remote access session you are
                *             requesting.</p>
                */
            remoteAccessSessions?: RemoteAccessSession[];
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can
                *             be used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListRemoteAccessSessionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRemoteAccessSessionsResult) => any;
    }
    /**
        * <p>Represents a request to the list runs operation.</p>
        */
    export interface ListRunsRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the project for which you want to list
                *             runs.</p>
                */
            arn: string | undefined;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can
                *             be used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListRunsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRunsRequest) => any;
    }
    /**
        * <p>Represents the result of a list runs request.</p>
        */
    export interface ListRunsResult {
            /**
                * <p>Information about the runs.</p>
                */
            runs?: Run[];
            /**
                * <p>If the number of items that are returned is significantly large, this is an identifier that is also
                *             returned. It can be used in a subsequent call to this operation to return the next set of items in the
                *             list.</p>
                */
            nextToken?: string;
    }
    export namespace ListRunsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRunsResult) => any;
    }
    /**
        * <p>Represents a request to the list samples operation.</p>
        */
    export interface ListSamplesRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the job used to list samples.</p>
                */
            arn: string | undefined;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can
                *             be used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListSamplesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSamplesRequest) => any;
    }
    export enum SampleType {
            CPU = "CPU",
            MEMORY = "MEMORY",
            NATIVE_AVG_DRAWTIME = "NATIVE_AVG_DRAWTIME",
            NATIVE_FPS = "NATIVE_FPS",
            NATIVE_FRAMES = "NATIVE_FRAMES",
            NATIVE_MAX_DRAWTIME = "NATIVE_MAX_DRAWTIME",
            NATIVE_MIN_DRAWTIME = "NATIVE_MIN_DRAWTIME",
            OPENGL_AVG_DRAWTIME = "OPENGL_AVG_DRAWTIME",
            OPENGL_FPS = "OPENGL_FPS",
            OPENGL_FRAMES = "OPENGL_FRAMES",
            OPENGL_MAX_DRAWTIME = "OPENGL_MAX_DRAWTIME",
            OPENGL_MIN_DRAWTIME = "OPENGL_MIN_DRAWTIME",
            RX = "RX",
            RX_RATE = "RX_RATE",
            THREADS = "THREADS",
            TX = "TX",
            TX_RATE = "TX_RATE"
    }
    /**
        * <p>Represents a sample of performance data.</p>
        */
    export interface Sample {
            /**
                * <p>The sample's ARN.</p>
                */
            arn?: string;
            /**
                * <p>The sample's type.</p>
                *         <p>Must be one of the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>CPU: A CPU sample type. This is expressed as the app processing CPU time
                *                     (including child processes) as reported by process, as a percentage.</p>
                *             </li>
                *             <li>
                *                 <p>MEMORY: A memory usage sample type. This is expressed as the total
                *                     proportional set size of an app process, in kilobytes.</p>
                *             </li>
                *             <li>
                *                 <p>NATIVE_AVG_DRAWTIME</p>
                *             </li>
                *             <li>
                *                 <p>NATIVE_FPS</p>
                *             </li>
                *             <li>
                *                 <p>NATIVE_FRAMES</p>
                *             </li>
                *             <li>
                *                 <p>NATIVE_MAX_DRAWTIME</p>
                *             </li>
                *             <li>
                *                 <p>NATIVE_MIN_DRAWTIME</p>
                *             </li>
                *             <li>
                *                 <p>OPENGL_AVG_DRAWTIME</p>
                *             </li>
                *             <li>
                *                 <p>OPENGL_FPS</p>
                *             </li>
                *             <li>
                *                 <p>OPENGL_FRAMES</p>
                *             </li>
                *             <li>
                *                 <p>OPENGL_MAX_DRAWTIME</p>
                *             </li>
                *             <li>
                *                 <p>OPENGL_MIN_DRAWTIME</p>
                *             </li>
                *             <li>
                *                 <p>RX</p>
                *             </li>
                *             <li>
                *                 <p>RX_RATE: The total number of bytes per second (TCP and UDP) that are sent,
                *                     by app process.</p>
                *             </li>
                *             <li>
                *                 <p>THREADS: A threads sample type. This is expressed as the total number of
                *                     threads per app process.</p>
                *             </li>
                *             <li>
                *                 <p>TX</p>
                *             </li>
                *             <li>
                *                 <p>TX_RATE: The total number of bytes per second (TCP and UDP) that are
                *                     received, by app process.</p>
                *             </li>
                *          </ul>
                */
            type?: SampleType | string;
            /**
                * <p>The presigned Amazon S3 URL that can be used with a GET request to download the sample's
                *             file.</p>
                */
            url?: string;
    }
    export namespace Sample {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Sample) => any;
    }
    /**
        * <p>Represents the result of a list samples request.</p>
        */
    export interface ListSamplesResult {
            /**
                * <p>Information about the samples.</p>
                */
            samples?: Sample[];
            /**
                * <p>If the number of items that are returned is significantly large, this is an identifier that is also
                *             returned. It can be used in a subsequent call to this operation to return the next set of items in the
                *             list.</p>
                */
            nextToken?: string;
    }
    export namespace ListSamplesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSamplesResult) => any;
    }
    /**
        * <p>Represents a request to the list suites operation.</p>
        */
    export interface ListSuitesRequest {
            /**
                * <p>The job's Amazon Resource Name (ARN).</p>
                */
            arn: string | undefined;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can
                *             be used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListSuitesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSuitesRequest) => any;
    }
    /**
        * <p>Represents the result of a list suites request.</p>
        */
    export interface ListSuitesResult {
            /**
                * <p>Information about the suites.</p>
                */
            suites?: Suite[];
            /**
                * <p>If the number of items that are returned is significantly large, this is an identifier that is also
                *             returned. It can be used in a subsequent call to this operation to return the next set of items in the
                *             list.</p>
                */
            nextToken?: string;
    }
    export namespace ListSuitesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSuitesResult) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource or resources for which to list tags. You can associate tags
                *             with the following Device Farm resources: <code>PROJECT</code>, <code>RUN</code>,
                *                 <code>NETWORK_PROFILE</code>, <code>INSTANCE_PROFILE</code>, <code>DEVICE_INSTANCE</code>,
                *                 <code>SESSION</code>, <code>DEVICE_POOL</code>, <code>DEVICE</code>, and
                *             <code>VPCE_CONFIGURATION</code>.</p>
                */
            ResourceARN: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    /**
        * <p>The metadata that you apply to a resource to help you categorize and organize it. Each tag consists of a
        *             key and an optional value, both of which you define. Tag keys can have a maximum character length of 128
        *             characters. Tag values can have a maximum length of 256 characters. </p>
        */
    export interface Tag {
            /**
                * <p>One part of a key-value pair that makes up a tag. A <code>key</code> is a general label that acts like a
                *             category for more specific tag values.</p>
                */
            Key: string | undefined;
            /**
                * <p>The optional part of a key-value pair that makes up a tag. A <code>value</code> acts as a descriptor in a
                *             tag category (key).</p>
                */
            Value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can have a maximum
                *             character length of 128 characters. Tag values can have a maximum length of 256 characters.</p>
                */
            Tags?: Tag[];
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface ListTestGridProjectsRequest {
            /**
                * <p>Return no more than this number of results.</p>
                */
            maxResult?: number;
            /**
                * <p>From a response, used to continue a paginated listing. </p>
                */
            nextToken?: string;
    }
    export namespace ListTestGridProjectsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTestGridProjectsRequest) => any;
    }
    export interface ListTestGridProjectsResult {
            /**
                * <p>The list of TestGridProjects, based on a <a>ListTestGridProjectsRequest</a>.</p>
                */
            testGridProjects?: TestGridProject[];
            /**
                * <p>Used for pagination. Pass into <a>ListTestGridProjects</a> to get more results in a paginated
                *          request.</p>
                */
            nextToken?: string;
    }
    export namespace ListTestGridProjectsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTestGridProjectsResult) => any;
    }
    export interface ListTestGridSessionActionsRequest {
            /**
                * <p>The ARN of the session to retrieve.</p>
                */
            sessionArn: string | undefined;
            /**
                * <p>The maximum number of sessions to return per response.</p>
                */
            maxResult?: number;
            /**
                * <p>Pagination token.</p>
                */
            nextToken?: string;
    }
    export namespace ListTestGridSessionActionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTestGridSessionActionsRequest) => any;
    }
    /**
        * <p>An action taken by a <a>TestGridSession</a> browser instance.</p>
        */
    export interface TestGridSessionAction {
            /**
                * <p>The action taken by the session.</p>
                */
            action?: string;
            /**
                * <p>The time that the session invoked the action.</p>
                */
            started?: Date;
            /**
                * <p>The time, in milliseconds, that the action took to complete in the browser.</p>
                */
            duration?: number;
            /**
                * <p>HTTP status code returned to the browser when the action was taken.</p>
                */
            statusCode?: string;
            /**
                * <p>HTTP method that the browser used to make the request.</p>
                */
            requestMethod?: string;
    }
    export namespace TestGridSessionAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestGridSessionAction) => any;
    }
    export interface ListTestGridSessionActionsResult {
            /**
                * <p>The action taken by the session.</p>
                */
            actions?: TestGridSessionAction[];
            /**
                * <p>Pagination token.</p>
                */
            nextToken?: string;
    }
    export namespace ListTestGridSessionActionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTestGridSessionActionsResult) => any;
    }
    export enum TestGridSessionArtifactCategory {
            LOG = "LOG",
            VIDEO = "VIDEO"
    }
    export interface ListTestGridSessionArtifactsRequest {
            /**
                * <p>The ARN of a <a>TestGridSession</a>. </p>
                */
            sessionArn: string | undefined;
            /**
                * <p>Limit results to a specified type of artifact.</p>
                */
            type?: TestGridSessionArtifactCategory | string;
            /**
                * <p>The maximum number of results to be returned by a request.</p>
                */
            maxResult?: number;
            /**
                * <p>Pagination token.</p>
                */
            nextToken?: string;
    }
    export namespace ListTestGridSessionArtifactsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTestGridSessionArtifactsRequest) => any;
    }
    export enum TestGridSessionArtifactType {
            SELENIUM_LOG = "SELENIUM_LOG",
            UNKNOWN = "UNKNOWN",
            VIDEO = "VIDEO"
    }
    /**
        * <p>Artifacts are video and other files that are produced in the process of running a browser in an automated
        *          context. </p>
        *          <note>
        *             <p>Video elements might be broken up into multiple artifacts as they grow in size during creation. </p>
        *          </note>
        */
    export interface TestGridSessionArtifact {
            /**
                * <p>The file name of the artifact.</p>
                */
            filename?: string;
            /**
                * <p>The kind of artifact.</p>
                */
            type?: TestGridSessionArtifactType | string;
            /**
                * <p>A semi-stable URL to the content of the object.</p>
                */
            url?: string;
    }
    export namespace TestGridSessionArtifact {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestGridSessionArtifact) => any;
    }
    export interface ListTestGridSessionArtifactsResult {
            /**
                * <p>A list of test grid session artifacts for a <a>TestGridSession</a>.</p>
                */
            artifacts?: TestGridSessionArtifact[];
            /**
                * <p>Pagination token.</p>
                */
            nextToken?: string;
    }
    export namespace ListTestGridSessionArtifactsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTestGridSessionArtifactsResult) => any;
    }
    export interface ListTestGridSessionsRequest {
            /**
                * <p>ARN of a <a>TestGridProject</a>.</p>
                */
            projectArn: string | undefined;
            /**
                * <p>Return only sessions in this state.</p>
                */
            status?: TestGridSessionStatus | string;
            /**
                * <p>Return only sessions created after this time.</p>
                */
            creationTimeAfter?: Date;
            /**
                * <p>Return only  sessions created before this time.</p>
                */
            creationTimeBefore?: Date;
            /**
                * <p>Return only sessions that ended after this time.</p>
                */
            endTimeAfter?: Date;
            /**
                * <p>Return only sessions that ended before this time.</p>
                */
            endTimeBefore?: Date;
            /**
                * <p>Return only this many results at a time.</p>
                */
            maxResult?: number;
            /**
                * <p>Pagination token.</p>
                */
            nextToken?: string;
    }
    export namespace ListTestGridSessionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTestGridSessionsRequest) => any;
    }
    export interface ListTestGridSessionsResult {
            /**
                * <p>The sessions that match the criteria in a <a>ListTestGridSessionsRequest</a>. </p>
                */
            testGridSessions?: TestGridSession[];
            /**
                * <p>Pagination token.</p>
                */
            nextToken?: string;
    }
    export namespace ListTestGridSessionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTestGridSessionsResult) => any;
    }
    /**
        * <p>Represents a request to the list tests operation.</p>
        */
    export interface ListTestsRequest {
            /**
                * <p>The test suite's Amazon Resource Name (ARN).</p>
                */
            arn: string | undefined;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can
                *             be used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListTestsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTestsRequest) => any;
    }
    /**
        * <p>Represents the result of a list tests request.</p>
        */
    export interface ListTestsResult {
            /**
                * <p>Information about the tests.</p>
                */
            tests?: Test[];
            /**
                * <p>If the number of items that are returned is significantly large, this is an identifier that is also
                *             returned. It can be used in a subsequent call to this operation to return the next set of items in the
                *             list.</p>
                */
            nextToken?: string;
    }
    export namespace ListTestsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTestsResult) => any;
    }
    /**
        * <p>Represents a request to the list unique problems operation.</p>
        */
    export interface ListUniqueProblemsRequest {
            /**
                * <p>The unique problems' ARNs.</p>
                */
            arn: string | undefined;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can
                *             be used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListUniqueProblemsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUniqueProblemsRequest) => any;
    }
    /**
        * <p>Information about a problem detail.</p>
        */
    export interface ProblemDetail {
            /**
                * <p>The problem detail's ARN.</p>
                */
            arn?: string;
            /**
                * <p>The problem detail's name.</p>
                */
            name?: string;
    }
    export namespace ProblemDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProblemDetail) => any;
    }
    /**
        * <p>Represents a specific warning or failure.</p>
        */
    export interface Problem {
            /**
                * <p>Information about the associated run.</p>
                */
            run?: ProblemDetail;
            /**
                * <p>Information about the associated job.</p>
                */
            job?: ProblemDetail;
            /**
                * <p>Information about the associated suite.</p>
                */
            suite?: ProblemDetail;
            /**
                * <p>Information about the associated test.</p>
                */
            test?: ProblemDetail;
            /**
                * <p>Information about the associated device.</p>
                */
            device?: Device;
            /**
                * <p>The problem's result.</p>
                *         <p>Allowed values include:</p>
                *         <ul>
                *             <li>
                *                 <p>PENDING</p>
                *             </li>
                *             <li>
                *                 <p>PASSED</p>
                *             </li>
                *             <li>
                *                 <p>WARNED</p>
                *             </li>
                *             <li>
                *                 <p>FAILED</p>
                *             </li>
                *             <li>
                *                 <p>SKIPPED</p>
                *             </li>
                *             <li>
                *                 <p>ERRORED</p>
                *             </li>
                *             <li>
                *                 <p>STOPPED</p>
                *             </li>
                *          </ul>
                */
            result?: ExecutionResult | string;
            /**
                * <p>A message about the problem's result.</p>
                */
            message?: string;
    }
    export namespace Problem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Problem) => any;
    }
    /**
        * <p>A collection of one or more problems, grouped by their result.</p>
        */
    export interface UniqueProblem {
            /**
                * <p>A message about the unique problems' result.</p>
                */
            message?: string;
            /**
                * <p>Information about the problems.</p>
                */
            problems?: Problem[];
    }
    export namespace UniqueProblem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UniqueProblem) => any;
    }
    /**
        * <p>Represents the result of a list unique problems request.</p>
        */
    export interface ListUniqueProblemsResult {
            /**
                * <p>Information about the unique problems.</p>
                *         <p>Allowed values include:</p>
                *         <ul>
                *             <li>
                *                 <p>PENDING</p>
                *             </li>
                *             <li>
                *                 <p>PASSED</p>
                *             </li>
                *             <li>
                *                 <p>WARNED</p>
                *             </li>
                *             <li>
                *                 <p>FAILED</p>
                *             </li>
                *             <li>
                *                 <p>SKIPPED</p>
                *             </li>
                *             <li>
                *                 <p>ERRORED</p>
                *             </li>
                *             <li>
                *                 <p>STOPPED</p>
                *             </li>
                *          </ul>
                */
            uniqueProblems?: Record<string, UniqueProblem[]>;
            /**
                * <p>If the number of items that are returned is significantly large, this is an identifier that is also
                *             returned. It can be used in a subsequent call to this operation to return the next set of items in the
                *             list.</p>
                */
            nextToken?: string;
    }
    export namespace ListUniqueProblemsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUniqueProblemsResult) => any;
    }
    /**
        * <p>Represents a request to the list uploads operation.</p>
        */
    export interface ListUploadsRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the project for which you want to list
                *             uploads.</p>
                */
            arn: string | undefined;
            /**
                * <p>The type of upload.</p>
                *         <p>Must be one of the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>ANDROID_APP</p>
                *             </li>
                *             <li>
                *                 <p>IOS_APP</p>
                *             </li>
                *             <li>
                *                 <p>WEB_APP</p>
                *             </li>
                *             <li>
                *                 <p>EXTERNAL_DATA</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_JUNIT_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_TESTNG_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_PYTHON_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_NODE_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_RUBY_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_PYTHON_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_NODE_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_RUBY_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>CALABASH_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>INSTRUMENTATION_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>UIAUTOMATION_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>UIAUTOMATOR_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>XCTEST_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>XCTEST_UI_TEST_PACKAGE</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_JUNIT_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_JAVA_TESTNG_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_PYTHON_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_NODE_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p> APPIUM_RUBY_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_JUNIT_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_JAVA_TESTNG_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_PYTHON_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_NODE_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>APPIUM_WEB_RUBY_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>INSTRUMENTATION_TEST_SPEC</p>
                *             </li>
                *             <li>
                *                 <p>XCTEST_UI_TEST_SPEC</p>
                *             </li>
                *          </ul>
                */
            type?: UploadType | string;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can
                *             be used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListUploadsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUploadsRequest) => any;
    }
    /**
        * <p>Represents the result of a list uploads request.</p>
        */
    export interface ListUploadsResult {
            /**
                * <p>Information about the uploads.</p>
                */
            uploads?: Upload[];
            /**
                * <p>If the number of items that are returned is significantly large, this is an identifier that is also
                *             returned. It can be used in a subsequent call to this operation to return the next set of items in the
                *             list.</p>
                */
            nextToken?: string;
    }
    export namespace ListUploadsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUploadsResult) => any;
    }
    export interface ListVPCEConfigurationsRequest {
            /**
                * <p>An integer that specifies the maximum number of items you want to return in the API response.</p>
                */
            maxResults?: number;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can be
                *             used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListVPCEConfigurationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListVPCEConfigurationsRequest) => any;
    }
    export interface ListVPCEConfigurationsResult {
            /**
                * <p>An array of <code>VPCEConfiguration</code> objects that contain information about your VPC endpoint
                *             configuration.</p>
                */
            vpceConfigurations?: VPCEConfiguration[];
            /**
                * <p>An identifier that was returned from the previous call to this operation, which can be
                *             used to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListVPCEConfigurationsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListVPCEConfigurationsResult) => any;
    }
    /**
        * <p>Represents a request for a purchase offering.</p>
        */
    export interface PurchaseOfferingRequest {
            /**
                * <p>The ID of the offering.</p>
                */
            offeringId: string | undefined;
            /**
                * <p>The number of device slots to purchase in an offering request.</p>
                */
            quantity: number | undefined;
            /**
                * <p>The ID of the offering promotion to be applied to the purchase.</p>
                */
            offeringPromotionId?: string;
    }
    export namespace PurchaseOfferingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PurchaseOfferingRequest) => any;
    }
    /**
        * <p>The result of the purchase offering (for example, success or failure).</p>
        */
    export interface PurchaseOfferingResult {
            /**
                * <p>Represents the offering transaction for the purchase result.</p>
                */
            offeringTransaction?: OfferingTransaction;
    }
    export namespace PurchaseOfferingResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PurchaseOfferingResult) => any;
    }
    /**
        * <p>A request that represents an offering renewal.</p>
        */
    export interface RenewOfferingRequest {
            /**
                * <p>The ID of a request to renew an offering.</p>
                */
            offeringId: string | undefined;
            /**
                * <p>The quantity requested in an offering renewal.</p>
                */
            quantity: number | undefined;
    }
    export namespace RenewOfferingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RenewOfferingRequest) => any;
    }
    /**
        * <p>The result of a renewal offering.</p>
        */
    export interface RenewOfferingResult {
            /**
                * <p>Represents the status of the offering transaction for the renewal.</p>
                */
            offeringTransaction?: OfferingTransaction;
    }
    export namespace RenewOfferingResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RenewOfferingResult) => any;
    }
    /**
        * <p>An entity with the same name already exists.</p>
        */
    export class IdempotencyException extends __BaseException {
            readonly name: "IdempotencyException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<IdempotencyException, __BaseException>);
    }
    /**
        * <p>Represents the device filters used in a test run and the maximum number of devices to be included in the
        *             run. It is passed in as the <code>deviceSelectionConfiguration</code> request parameter in <a>ScheduleRun</a>.</p>
        */
    export interface DeviceSelectionConfiguration {
            /**
                * <p>Used to dynamically select a set of devices for a test run. A filter is made up of an
                *             attribute, an operator, and one or more values.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <b>Attribute</b>
                *                </p>
                *                 <p>The aspect of a device such as platform or model used as the selection
                *                     criteria in a device filter.</p>
                *                 <p>Allowed values include:</p>
                *                 <ul>
                *                   <li>
                *                         <p>ARN: The Amazon Resource Name (ARN) of the device (for example,
                *                                 <code>arn:aws:devicefarm:us-west-2::device:12345Example</code>).</p>
                *                     </li>
                *                   <li>
                *                         <p>PLATFORM: The device platform. Valid values are ANDROID or
                *                             IOS.</p>
                *                     </li>
                *                   <li>
                *                         <p>OS_VERSION: The operating system version (for example,
                *                             10.3.2).</p>
                *                     </li>
                *                   <li>
                *                         <p>MODEL: The device model (for example, iPad 5th Gen).</p>
                *                     </li>
                *                   <li>
                *                         <p>AVAILABILITY: The current availability of the device. Valid values
                *                             are AVAILABLE, HIGHLY_AVAILABLE, BUSY, or
                *                             TEMPORARY_NOT_AVAILABLE.</p>
                *                     </li>
                *                   <li>
                *                         <p>FORM_FACTOR: The device form factor. Valid values are PHONE or
                *                             TABLET.</p>
                *                     </li>
                *                   <li>
                *                         <p>MANUFACTURER: The device manufacturer (for example,
                *                             Apple).</p>
                *                     </li>
                *                   <li>
                *                         <p>REMOTE_ACCESS_ENABLED: Whether the device is enabled for remote
                *                             access. Valid values are TRUE or FALSE.</p>
                *                     </li>
                *                   <li>
                *                         <p>REMOTE_DEBUG_ENABLED: Whether the device is enabled for remote debugging. Valid values
                *                             are TRUE or FALSE. Because remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no
                *                                 longer supported</a>, this filter is ignored.</p>
                *                     </li>
                *                   <li>
                *                         <p>INSTANCE_ARN: The Amazon Resource Name (ARN) of the device
                *                             instance.</p>
                *                     </li>
                *                   <li>
                *                         <p>INSTANCE_LABELS: The label of the device instance.</p>
                *                     </li>
                *                   <li>
                *                         <p>FLEET_TYPE: The fleet type. Valid values are PUBLIC or PRIVATE.</p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>
                *                   <b>Operator</b>
                *                </p>
                *                 <p>The filter operator.</p>
                *                 <ul>
                *                   <li>
                *                         <p>The EQUALS operator is available for every attribute except
                *                             INSTANCE_LABELS.</p>
                *                     </li>
                *                   <li>
                *                         <p>The CONTAINS operator is available for the INSTANCE_LABELS and MODEL
                *                             attributes.</p>
                *                     </li>
                *                   <li>
                *                         <p>The IN and NOT_IN operators are available for the ARN, OS_VERSION,
                *                             MODEL, MANUFACTURER, and INSTANCE_ARN attributes.</p>
                *                     </li>
                *                   <li>
                *                         <p>The LESS_THAN, GREATER_THAN, LESS_THAN_OR_EQUALS, and
                *                             GREATER_THAN_OR_EQUALS operators are also available for the OS_VERSION
                *                             attribute.</p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>
                *                   <b>Values</b>
                *                </p>
                *                 <p>An array of one or more filter values.</p>
                *                 <p class="title">
                *                   <b>Operator Values</b>
                *                </p>
                *                <ul>
                *                   <li>
                *                         <p>The IN and NOT_IN operators can take a values array that has more than
                *                             one element.</p>
                *                     </li>
                *                   <li>
                *                         <p>The other operators require an array with a single element.</p>
                *                     </li>
                *                </ul>
                *                 <p class="title">
                *                   <b>Attribute Values</b>
                *                </p>
                *                <ul>
                *                   <li>
                *                         <p>The PLATFORM attribute can be set to ANDROID or IOS.</p>
                *                     </li>
                *                   <li>
                *                         <p>The AVAILABILITY attribute can be set to AVAILABLE, HIGHLY_AVAILABLE, BUSY, or
                *                             TEMPORARY_NOT_AVAILABLE.</p>
                *                     </li>
                *                   <li>
                *                         <p>The FORM_FACTOR attribute can be set to PHONE or TABLET.</p>
                *                     </li>
                *                   <li>
                *                         <p>The FLEET_TYPE attribute can be set to PUBLIC or PRIVATE.</p>
                *                     </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            filters: DeviceFilter[] | undefined;
            /**
                * <p>The maximum number of devices to be included in a test run.</p>
                */
            maxDevices: number | undefined;
    }
    export namespace DeviceSelectionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeviceSelectionConfiguration) => any;
    }
    /**
        * <p>Represents configuration information about a test run, such as the execution
        *             timeout (in minutes).</p>
        */
    export interface ExecutionConfiguration {
            /**
                * <p>The number of minutes a test run executes before it times out.</p>
                */
            jobTimeoutMinutes?: number;
            /**
                * <p>True if account cleanup is enabled at the beginning of the test. Otherwise, false.</p>
                */
            accountsCleanup?: boolean;
            /**
                * <p>True if app package cleanup is enabled at the beginning of the test. Otherwise, false.</p>
                */
            appPackagesCleanup?: boolean;
            /**
                * <p>Set to true to enable video capture. Otherwise, set to false. The default is true.</p>
                */
            videoCapture?: boolean;
            /**
                * <p>When set to <code>true</code>, for private devices, Device Farm does not sign your app again. For public
                *             devices, Device Farm always signs your apps again.</p>
                *         <p>For more information about how Device Farm re-signs your apps, see <a href="https://aws.amazon.com/device-farm/faq/">Do you modify my app?</a> in the <i>AWS Device
                *                 Farm FAQs</i>.</p>
                */
            skipAppResign?: boolean;
    }
    export namespace ExecutionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExecutionConfiguration) => any;
    }
    /**
        * <p>Represents a request to the schedule run operation.</p>
        */
    export interface ScheduleRunRequest {
            /**
                * <p>The ARN of the project for the run to be scheduled.</p>
                */
            projectArn: string | undefined;
            /**
                * <p>The ARN of an application package to run tests against, created with <a>CreateUpload</a>.
                *             See <a>ListUploads</a>.</p>
                */
            appArn?: string;
            /**
                * <p>The ARN of the device pool for the run to be scheduled.</p>
                */
            devicePoolArn?: string;
            /**
                * <p>The filter criteria used to dynamically select a set of devices for a test run and the maximum number of
                *             devices to be included in the run.</p>
                *         <p>Either <b>
                *                <code>devicePoolArn</code>
                *             </b> or <b>
                *                <code>deviceSelectionConfiguration</code>
                *             </b> is required in a
                *             request.</p>
                */
            deviceSelectionConfiguration?: DeviceSelectionConfiguration;
            /**
                * <p>The name for the run to be scheduled.</p>
                */
            name?: string;
            /**
                * <p>Information about the test for the run to be scheduled.</p>
                */
            test: ScheduleRunTest | undefined;
            /**
                * <p>Information about the settings for the run to be scheduled.</p>
                */
            configuration?: ScheduleRunConfiguration;
            /**
                * <p>Specifies configuration information about a test run, such as the execution timeout
                *             (in minutes).</p>
                */
            executionConfiguration?: ExecutionConfiguration;
    }
    export namespace ScheduleRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScheduleRunRequest) => any;
    }
    /**
        * <p>Represents the result of a schedule run request.</p>
        */
    export interface ScheduleRunResult {
            /**
                * <p>Information about the scheduled run.</p>
                */
            run?: Run;
    }
    export namespace ScheduleRunResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScheduleRunResult) => any;
    }
    export interface StopJobRequest {
            /**
                * <p>Represents the Amazon Resource Name (ARN) of the Device Farm job to stop.</p>
                */
            arn: string | undefined;
    }
    export namespace StopJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopJobRequest) => any;
    }
    export interface StopJobResult {
            /**
                * <p>The job that was stopped.</p>
                */
            job?: Job;
    }
    export namespace StopJobResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopJobResult) => any;
    }
    /**
        * <p>Represents the request to stop the remote access session.</p>
        */
    export interface StopRemoteAccessSessionRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the remote access session to stop.</p>
                */
            arn: string | undefined;
    }
    export namespace StopRemoteAccessSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopRemoteAccessSessionRequest) => any;
    }
    /**
        * <p>Represents the response from the server that describes the remote access session
        *             when AWS Device Farm stops the session.</p>
        */
    export interface StopRemoteAccessSessionResult {
            /**
                * <p>A container that represents the metadata from the service about the remote access session you are
                *             stopping.</p>
                */
            remoteAccessSession?: RemoteAccessSession;
    }
    export namespace StopRemoteAccessSessionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopRemoteAccessSessionResult) => any;
    }
    /**
        * <p>Represents the request to stop a specific run.</p>
        */
    export interface StopRunRequest {
            /**
                * <p>Represents the Amazon Resource Name (ARN) of the Device Farm run to stop.</p>
                */
            arn: string | undefined;
    }
    export namespace StopRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopRunRequest) => any;
    }
    /**
        * <p>Represents the results of your stop run attempt.</p>
        */
    export interface StopRunResult {
            /**
                * <p>The run that was stopped.</p>
                */
            run?: Run;
    }
    export namespace StopRunResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopRunResult) => any;
    }
    /**
        * <p>The request doesn't comply with the AWS Identity and Access Management (IAM) tag
        *             policy. Correct your request and then retry it.</p>
        */
    export class TagPolicyException extends __BaseException {
            readonly name: "TagPolicyException";
            readonly $fault: "client";
            resourceName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TagPolicyException, __BaseException>);
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource or resources to which to add tags. You can associate tags
                *             with the following Device Farm resources: <code>PROJECT</code>, <code>RUN</code>,
                *                 <code>NETWORK_PROFILE</code>, <code>INSTANCE_PROFILE</code>, <code>DEVICE_INSTANCE</code>,
                *                 <code>SESSION</code>, <code>DEVICE_POOL</code>, <code>DEVICE</code>, and
                *             <code>VPCE_CONFIGURATION</code>.</p>
                */
            ResourceARN: string | undefined;
            /**
                * <p>The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can have a maximum
                *             character length of 128 characters. Tag values can have a maximum length of 256 characters.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    /**
        * <p>The list of tags on the repository is over the limit. The maximum number of tags that
        *             can be applied to a repository is 50. </p>
        */
    export class TooManyTagsException extends __BaseException {
            readonly name: "TooManyTagsException";
            readonly $fault: "client";
            resourceName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyTagsException, __BaseException>);
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource or resources from which to delete tags. You can associate
                *             tags with the following Device Farm resources: <code>PROJECT</code>, <code>RUN</code>,
                *                 <code>NETWORK_PROFILE</code>, <code>INSTANCE_PROFILE</code>, <code>DEVICE_INSTANCE</code>,
                *                 <code>SESSION</code>, <code>DEVICE_POOL</code>, <code>DEVICE</code>, and
                *             <code>VPCE_CONFIGURATION</code>.</p>
                */
            ResourceARN: string | undefined;
            /**
                * <p>The keys of the tags to be removed.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateDeviceInstanceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the device instance.</p>
                */
            arn: string | undefined;
            /**
                * <p>The ARN of the profile that you want to associate with the device instance.</p>
                */
            profileArn?: string;
            /**
                * <p>An array of strings that you want to associate with the device instance.</p>
                */
            labels?: string[];
    }
    export namespace UpdateDeviceInstanceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDeviceInstanceRequest) => any;
    }
    export interface UpdateDeviceInstanceResult {
            /**
                * <p>An object that contains information about your device instance.</p>
                */
            deviceInstance?: DeviceInstance;
    }
    export namespace UpdateDeviceInstanceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDeviceInstanceResult) => any;
    }
    /**
        * <p>Represents a request to the update device pool operation.</p>
        */
    export interface UpdateDevicePoolRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the Device Farm device pool to update.</p>
                */
            arn: string | undefined;
            /**
                * <p>A string that represents the name of the device pool to update.</p>
                */
            name?: string;
            /**
                * <p>A description of the device pool to update.</p>
                */
            description?: string;
            /**
                * <p>Represents the rules to modify for the device pool. Updating rules is optional. If you update rules for
                *             your request, the update replaces the existing rules.</p>
                */
            rules?: Rule[];
            /**
                * <p>The number of devices that Device Farm can add to your device pool. Device Farm adds
                *             devices that are available and that meet the criteria that you assign for the
                *                 <code>rules</code> parameter. Depending on how many devices meet these constraints,
                *             your device pool might contain fewer devices than the value for this parameter.</p>
                *         <p>By specifying the maximum number of devices, you can control the costs that you incur
                *             by running tests.</p>
                *         <p>If you use this parameter in your request, you cannot use the
                *                 <code>clearMaxDevices</code> parameter in the same request.</p>
                */
            maxDevices?: number;
            /**
                * <p>Sets whether the <code>maxDevices</code> parameter applies to your device pool. If you set this parameter
                *             to <code>true</code>, the <code>maxDevices</code> parameter does not apply, and Device Farm does not limit
                *             the number of devices that it adds to your device pool. In this case, Device Farm adds all available devices
                *             that meet the criteria specified in the <code>rules</code> parameter.</p>
                *         <p>If you use this parameter in your request, you cannot use the <code>maxDevices</code>
                *             parameter in the same request.</p>
                */
            clearMaxDevices?: boolean;
    }
    export namespace UpdateDevicePoolRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDevicePoolRequest) => any;
    }
    /**
        * <p>Represents the result of an update device pool request.</p>
        */
    export interface UpdateDevicePoolResult {
            /**
                * <p>The device pool you just updated.</p>
                */
            devicePool?: DevicePool;
    }
    export namespace UpdateDevicePoolResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDevicePoolResult) => any;
    }
    export interface UpdateInstanceProfileRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the instance profile.</p>
                */
            arn: string | undefined;
            /**
                * <p>The updated name for your instance profile.</p>
                */
            name?: string;
            /**
                * <p>The updated description for your instance profile.</p>
                */
            description?: string;
            /**
                * <p>The updated choice for whether you want to specify package cleanup. The default value
                *             is <code>false</code> for private devices.</p>
                */
            packageCleanup?: boolean;
            /**
                * <p>An array of strings that specifies the list of app packages that should not be cleaned up from the device
                *             after a test run is over.</p>
                *         <p>The list of packages is only considered if you set <code>packageCleanup</code> to
                *                 <code>true</code>.</p>
                */
            excludeAppPackagesFromCleanup?: string[];
            /**
                * <p>The updated choice for whether you want to reboot the device after use. The default
                *             value is <code>true</code>.</p>
                */
            rebootAfterUse?: boolean;
    }
    export namespace UpdateInstanceProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateInstanceProfileRequest) => any;
    }
    export interface UpdateInstanceProfileResult {
            /**
                * <p>An object that contains information about your instance profile.</p>
                */
            instanceProfile?: InstanceProfile;
    }
    export namespace UpdateInstanceProfileResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateInstanceProfileResult) => any;
    }
    export interface UpdateNetworkProfileRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the project for which you want to update network
                *             profile settings.</p>
                */
            arn: string | undefined;
            /**
                * <p>The name of the network profile about which you are returning
                *             information.</p>
                */
            name?: string;
            /**
                * <p>The description of the network profile about which you are returning
                *             information.</p>
                */
            description?: string;
            /**
                * <p>The type of network profile to return information about. Valid values are listed here.</p>
                */
            type?: NetworkProfileType | string;
            /**
                * <p>The data throughput rate in bits per second, as an integer from 0 to
                *             104857600.</p>
                */
            uplinkBandwidthBits?: number;
            /**
                * <p>The data throughput rate in bits per second, as an integer from 0 to
                *             104857600.</p>
                */
            downlinkBandwidthBits?: number;
            /**
                * <p>Delay time for all packets to destination in milliseconds as an integer from 0 to
                *             2000.</p>
                */
            uplinkDelayMs?: number;
            /**
                * <p>Delay time for all packets to destination in milliseconds as an integer from 0 to
                *             2000.</p>
                */
            downlinkDelayMs?: number;
            /**
                * <p>Time variation in the delay of received packets in milliseconds as an integer from
                *             0 to 2000.</p>
                */
            uplinkJitterMs?: number;
            /**
                * <p>Time variation in the delay of received packets in milliseconds as an integer from
                *             0 to 2000.</p>
                */
            downlinkJitterMs?: number;
            /**
                * <p>Proportion of transmitted packets that fail to arrive from 0 to 100
                *             percent.</p>
                */
            uplinkLossPercent?: number;
            /**
                * <p>Proportion of received packets that fail to arrive from 0 to 100 percent.</p>
                */
            downlinkLossPercent?: number;
    }
    export namespace UpdateNetworkProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateNetworkProfileRequest) => any;
    }
    export interface UpdateNetworkProfileResult {
            /**
                * <p>A list of the available network profiles.</p>
                */
            networkProfile?: NetworkProfile;
    }
    export namespace UpdateNetworkProfileResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateNetworkProfileResult) => any;
    }
    /**
        * <p>Represents a request to the update project operation.</p>
        */
    export interface UpdateProjectRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the project whose name to update.</p>
                */
            arn: string | undefined;
            /**
                * <p>A string that represents the new name of the project that you are updating.</p>
                */
            name?: string;
            /**
                * <p>The number of minutes a test run in the project executes before it times out.</p>
                */
            defaultJobTimeoutMinutes?: number;
    }
    export namespace UpdateProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateProjectRequest) => any;
    }
    /**
        * <p>Represents the result of an update project request.</p>
        */
    export interface UpdateProjectResult {
            /**
                * <p>The project to update.</p>
                */
            project?: Project;
    }
    export namespace UpdateProjectResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateProjectResult) => any;
    }
    export interface UpdateTestGridProjectRequest {
            /**
                * <p>ARN of the project to update.</p>
                */
            projectArn: string | undefined;
            /**
                * <p>Human-readable name for the project.</p>
                */
            name?: string;
            /**
                * <p>Human-readable description for the project.</p>
                */
            description?: string;
            /**
                * <p>The VPC security groups and subnets that are attached to a project.</p>
                */
            vpcConfig?: TestGridVpcConfig;
    }
    export namespace UpdateTestGridProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTestGridProjectRequest) => any;
    }
    export interface UpdateTestGridProjectResult {
            /**
                * <p>The project, including updated information.</p>
                */
            testGridProject?: TestGridProject;
    }
    export namespace UpdateTestGridProjectResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTestGridProjectResult) => any;
    }
    export interface UpdateUploadRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the uploaded test spec.</p>
                */
            arn: string | undefined;
            /**
                * <p>The upload's test spec file name. The name must not contain any forward slashes (/). The test spec file
                *             name must end with the <code>.yaml</code> or <code>.yml</code> file extension.</p>
                */
            name?: string;
            /**
                * <p>The upload's content type (for example, <code>application/x-yaml</code>).</p>
                */
            contentType?: string;
            /**
                * <p>Set to true if the YAML file has changed and must be updated. Otherwise, set to false.</p>
                */
            editContent?: boolean;
    }
    export namespace UpdateUploadRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUploadRequest) => any;
    }
    export interface UpdateUploadResult {
            /**
                * <p>A test spec uploaded to Device Farm.</p>
                */
            upload?: Upload;
    }
    export namespace UpdateUploadResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUploadResult) => any;
    }
    export interface UpdateVPCEConfigurationRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the VPC endpoint configuration you want to
                *             update.</p>
                */
            arn: string | undefined;
            /**
                * <p>The friendly name you give to your VPC endpoint configuration to manage your configurations more
                *             easily.</p>
                */
            vpceConfigurationName?: string;
            /**
                * <p>The name of the VPC endpoint service running in your AWS account that you want Device Farm to test.</p>
                */
            vpceServiceName?: string;
            /**
                * <p>The DNS (domain) name used to connect to your private service in your VPC. The DNS name must not already
                *             be in use on the internet.</p>
                */
            serviceDnsName?: string;
            /**
                * <p>An optional description that provides details about your VPC endpoint configuration.</p>
                */
            vpceConfigurationDescription?: string;
    }
    export namespace UpdateVPCEConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateVPCEConfigurationRequest) => any;
    }
    export interface UpdateVPCEConfigurationResult {
            /**
                * <p>An object that contains information about your VPC endpoint configuration.</p>
                */
            vpceConfiguration?: VPCEConfiguration;
    }
    export namespace UpdateVPCEConfigurationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateVPCEConfigurationResult) => any;
    }
}

declare module '@aws-sdk/client-device-farm/node_modules/@aws-sdk/client-device-farm/dist-types/models/DeviceFarmServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from DeviceFarm service.
        */
    export class DeviceFarmServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

