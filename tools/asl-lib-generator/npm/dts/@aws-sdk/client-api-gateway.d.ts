// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client

declare module '@aws-sdk/client-api-gateway' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { APIGatewayClient } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { CreateApiKeyCommandInput, CreateApiKeyCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateApiKeyCommand";
    import { CreateAuthorizerCommandInput, CreateAuthorizerCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateAuthorizerCommand";
    import { CreateBasePathMappingCommandInput, CreateBasePathMappingCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateBasePathMappingCommand";
    import { CreateDeploymentCommandInput, CreateDeploymentCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateDeploymentCommand";
    import { CreateDocumentationPartCommandInput, CreateDocumentationPartCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateDocumentationPartCommand";
    import { CreateDocumentationVersionCommandInput, CreateDocumentationVersionCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateDocumentationVersionCommand";
    import { CreateDomainNameCommandInput, CreateDomainNameCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateDomainNameCommand";
    import { CreateModelCommandInput, CreateModelCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateModelCommand";
    import { CreateRequestValidatorCommandInput, CreateRequestValidatorCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateRequestValidatorCommand";
    import { CreateResourceCommandInput, CreateResourceCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateResourceCommand";
    import { CreateRestApiCommandInput, CreateRestApiCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateRestApiCommand";
    import { CreateStageCommandInput, CreateStageCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateStageCommand";
    import { CreateUsagePlanCommandInput, CreateUsagePlanCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateUsagePlanCommand";
    import { CreateUsagePlanKeyCommandInput, CreateUsagePlanKeyCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateUsagePlanKeyCommand";
    import { CreateVpcLinkCommandInput, CreateVpcLinkCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateVpcLinkCommand";
    import { DeleteApiKeyCommandInput, DeleteApiKeyCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteApiKeyCommand";
    import { DeleteAuthorizerCommandInput, DeleteAuthorizerCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteAuthorizerCommand";
    import { DeleteBasePathMappingCommandInput, DeleteBasePathMappingCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteBasePathMappingCommand";
    import { DeleteClientCertificateCommandInput, DeleteClientCertificateCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteClientCertificateCommand";
    import { DeleteDeploymentCommandInput, DeleteDeploymentCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteDeploymentCommand";
    import { DeleteDocumentationPartCommandInput, DeleteDocumentationPartCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteDocumentationPartCommand";
    import { DeleteDocumentationVersionCommandInput, DeleteDocumentationVersionCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteDocumentationVersionCommand";
    import { DeleteDomainNameCommandInput, DeleteDomainNameCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteDomainNameCommand";
    import { DeleteGatewayResponseCommandInput, DeleteGatewayResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteGatewayResponseCommand";
    import { DeleteIntegrationCommandInput, DeleteIntegrationCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteIntegrationCommand";
    import { DeleteIntegrationResponseCommandInput, DeleteIntegrationResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteIntegrationResponseCommand";
    import { DeleteMethodCommandInput, DeleteMethodCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteMethodCommand";
    import { DeleteMethodResponseCommandInput, DeleteMethodResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteMethodResponseCommand";
    import { DeleteModelCommandInput, DeleteModelCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteModelCommand";
    import { DeleteRequestValidatorCommandInput, DeleteRequestValidatorCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteRequestValidatorCommand";
    import { DeleteResourceCommandInput, DeleteResourceCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteResourceCommand";
    import { DeleteRestApiCommandInput, DeleteRestApiCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteRestApiCommand";
    import { DeleteStageCommandInput, DeleteStageCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteStageCommand";
    import { DeleteUsagePlanCommandInput, DeleteUsagePlanCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteUsagePlanCommand";
    import { DeleteUsagePlanKeyCommandInput, DeleteUsagePlanKeyCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteUsagePlanKeyCommand";
    import { DeleteVpcLinkCommandInput, DeleteVpcLinkCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteVpcLinkCommand";
    import { FlushStageAuthorizersCacheCommandInput, FlushStageAuthorizersCacheCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/FlushStageAuthorizersCacheCommand";
    import { FlushStageCacheCommandInput, FlushStageCacheCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/FlushStageCacheCommand";
    import { GenerateClientCertificateCommandInput, GenerateClientCertificateCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GenerateClientCertificateCommand";
    import { GetAccountCommandInput, GetAccountCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetAccountCommand";
    import { GetApiKeyCommandInput, GetApiKeyCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetApiKeyCommand";
    import { GetApiKeysCommandInput, GetApiKeysCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetApiKeysCommand";
    import { GetAuthorizerCommandInput, GetAuthorizerCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetAuthorizerCommand";
    import { GetAuthorizersCommandInput, GetAuthorizersCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetAuthorizersCommand";
    import { GetBasePathMappingCommandInput, GetBasePathMappingCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetBasePathMappingCommand";
    import { GetBasePathMappingsCommandInput, GetBasePathMappingsCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetBasePathMappingsCommand";
    import { GetClientCertificateCommandInput, GetClientCertificateCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetClientCertificateCommand";
    import { GetClientCertificatesCommandInput, GetClientCertificatesCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetClientCertificatesCommand";
    import { GetDeploymentCommandInput, GetDeploymentCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDeploymentCommand";
    import { GetDeploymentsCommandInput, GetDeploymentsCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDeploymentsCommand";
    import { GetDocumentationPartCommandInput, GetDocumentationPartCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDocumentationPartCommand";
    import { GetDocumentationPartsCommandInput, GetDocumentationPartsCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDocumentationPartsCommand";
    import { GetDocumentationVersionCommandInput, GetDocumentationVersionCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDocumentationVersionCommand";
    import { GetDocumentationVersionsCommandInput, GetDocumentationVersionsCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDocumentationVersionsCommand";
    import { GetDomainNameCommandInput, GetDomainNameCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDomainNameCommand";
    import { GetDomainNamesCommandInput, GetDomainNamesCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDomainNamesCommand";
    import { GetExportCommandInput, GetExportCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetExportCommand";
    import { GetGatewayResponseCommandInput, GetGatewayResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetGatewayResponseCommand";
    import { GetGatewayResponsesCommandInput, GetGatewayResponsesCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetGatewayResponsesCommand";
    import { GetIntegrationCommandInput, GetIntegrationCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetIntegrationCommand";
    import { GetIntegrationResponseCommandInput, GetIntegrationResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetIntegrationResponseCommand";
    import { GetMethodCommandInput, GetMethodCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetMethodCommand";
    import { GetMethodResponseCommandInput, GetMethodResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetMethodResponseCommand";
    import { GetModelCommandInput, GetModelCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetModelCommand";
    import { GetModelsCommandInput, GetModelsCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetModelsCommand";
    import { GetModelTemplateCommandInput, GetModelTemplateCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetModelTemplateCommand";
    import { GetRequestValidatorCommandInput, GetRequestValidatorCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetRequestValidatorCommand";
    import { GetRequestValidatorsCommandInput, GetRequestValidatorsCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetRequestValidatorsCommand";
    import { GetResourceCommandInput, GetResourceCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetResourceCommand";
    import { GetResourcesCommandInput, GetResourcesCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetResourcesCommand";
    import { GetRestApiCommandInput, GetRestApiCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetRestApiCommand";
    import { GetRestApisCommandInput, GetRestApisCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetRestApisCommand";
    import { GetSdkCommandInput, GetSdkCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetSdkCommand";
    import { GetSdkTypeCommandInput, GetSdkTypeCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetSdkTypeCommand";
    import { GetSdkTypesCommandInput, GetSdkTypesCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetSdkTypesCommand";
    import { GetStageCommandInput, GetStageCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetStageCommand";
    import { GetStagesCommandInput, GetStagesCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetStagesCommand";
    import { GetTagsCommandInput, GetTagsCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetTagsCommand";
    import { GetUsageCommandInput, GetUsageCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetUsageCommand";
    import { GetUsagePlanCommandInput, GetUsagePlanCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetUsagePlanCommand";
    import { GetUsagePlanKeyCommandInput, GetUsagePlanKeyCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetUsagePlanKeyCommand";
    import { GetUsagePlanKeysCommandInput, GetUsagePlanKeysCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetUsagePlanKeysCommand";
    import { GetUsagePlansCommandInput, GetUsagePlansCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetUsagePlansCommand";
    import { GetVpcLinkCommandInput, GetVpcLinkCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetVpcLinkCommand";
    import { GetVpcLinksCommandInput, GetVpcLinksCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetVpcLinksCommand";
    import { ImportApiKeysCommandInput, ImportApiKeysCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/ImportApiKeysCommand";
    import { ImportDocumentationPartsCommandInput, ImportDocumentationPartsCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/ImportDocumentationPartsCommand";
    import { ImportRestApiCommandInput, ImportRestApiCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/ImportRestApiCommand";
    import { PutGatewayResponseCommandInput, PutGatewayResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/PutGatewayResponseCommand";
    import { PutIntegrationCommandInput, PutIntegrationCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/PutIntegrationCommand";
    import { PutIntegrationResponseCommandInput, PutIntegrationResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/PutIntegrationResponseCommand";
    import { PutMethodCommandInput, PutMethodCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/PutMethodCommand";
    import { PutMethodResponseCommandInput, PutMethodResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/PutMethodResponseCommand";
    import { PutRestApiCommandInput, PutRestApiCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/PutRestApiCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/TagResourceCommand";
    import { TestInvokeAuthorizerCommandInput, TestInvokeAuthorizerCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/TestInvokeAuthorizerCommand";
    import { TestInvokeMethodCommandInput, TestInvokeMethodCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/TestInvokeMethodCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UntagResourceCommand";
    import { UpdateAccountCommandInput, UpdateAccountCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateAccountCommand";
    import { UpdateApiKeyCommandInput, UpdateApiKeyCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateApiKeyCommand";
    import { UpdateAuthorizerCommandInput, UpdateAuthorizerCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateAuthorizerCommand";
    import { UpdateBasePathMappingCommandInput, UpdateBasePathMappingCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateBasePathMappingCommand";
    import { UpdateClientCertificateCommandInput, UpdateClientCertificateCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateClientCertificateCommand";
    import { UpdateDeploymentCommandInput, UpdateDeploymentCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateDeploymentCommand";
    import { UpdateDocumentationPartCommandInput, UpdateDocumentationPartCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateDocumentationPartCommand";
    import { UpdateDocumentationVersionCommandInput, UpdateDocumentationVersionCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateDocumentationVersionCommand";
    import { UpdateDomainNameCommandInput, UpdateDomainNameCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateDomainNameCommand";
    import { UpdateGatewayResponseCommandInput, UpdateGatewayResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateGatewayResponseCommand";
    import { UpdateIntegrationCommandInput, UpdateIntegrationCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateIntegrationCommand";
    import { UpdateIntegrationResponseCommandInput, UpdateIntegrationResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateIntegrationResponseCommand";
    import { UpdateMethodCommandInput, UpdateMethodCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateMethodCommand";
    import { UpdateMethodResponseCommandInput, UpdateMethodResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateMethodResponseCommand";
    import { UpdateModelCommandInput, UpdateModelCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateModelCommand";
    import { UpdateRequestValidatorCommandInput, UpdateRequestValidatorCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateRequestValidatorCommand";
    import { UpdateResourceCommandInput, UpdateResourceCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateResourceCommand";
    import { UpdateRestApiCommandInput, UpdateRestApiCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateRestApiCommand";
    import { UpdateStageCommandInput, UpdateStageCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateStageCommand";
    import { UpdateUsageCommandInput, UpdateUsageCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateUsageCommand";
    import { UpdateUsagePlanCommandInput, UpdateUsagePlanCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateUsagePlanCommand";
    import { UpdateVpcLinkCommandInput, UpdateVpcLinkCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateVpcLinkCommand";
    /**
        * <fullname>Amazon API Gateway</fullname>
        *         <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
        */
    export class APIGateway extends APIGatewayClient {
            /**
                * <p>Create an ApiKey resource. </p>
                */
            createApiKey(args: CreateApiKeyCommandInput, options?: __HttpHandlerOptions): Promise<CreateApiKeyCommandOutput>;
            createApiKey(args: CreateApiKeyCommandInput, cb: (err: any, data?: CreateApiKeyCommandOutput) => void): void;
            createApiKey(args: CreateApiKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateApiKeyCommandOutput) => void): void;
            /**
                * <p>Adds a new Authorizer resource to an existing RestApi resource.</p>
                */
            createAuthorizer(args: CreateAuthorizerCommandInput, options?: __HttpHandlerOptions): Promise<CreateAuthorizerCommandOutput>;
            createAuthorizer(args: CreateAuthorizerCommandInput, cb: (err: any, data?: CreateAuthorizerCommandOutput) => void): void;
            createAuthorizer(args: CreateAuthorizerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAuthorizerCommandOutput) => void): void;
            /**
                * <p>Creates a new BasePathMapping resource.</p>
                */
            createBasePathMapping(args: CreateBasePathMappingCommandInput, options?: __HttpHandlerOptions): Promise<CreateBasePathMappingCommandOutput>;
            createBasePathMapping(args: CreateBasePathMappingCommandInput, cb: (err: any, data?: CreateBasePathMappingCommandOutput) => void): void;
            createBasePathMapping(args: CreateBasePathMappingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateBasePathMappingCommandOutput) => void): void;
            /**
                * <p>Creates a Deployment resource, which makes a specified RestApi callable over the internet.</p>
                */
            createDeployment(args: CreateDeploymentCommandInput, options?: __HttpHandlerOptions): Promise<CreateDeploymentCommandOutput>;
            createDeployment(args: CreateDeploymentCommandInput, cb: (err: any, data?: CreateDeploymentCommandOutput) => void): void;
            createDeployment(args: CreateDeploymentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDeploymentCommandOutput) => void): void;
            /**
                * <p>Creates a documentation part.</p>
                */
            createDocumentationPart(args: CreateDocumentationPartCommandInput, options?: __HttpHandlerOptions): Promise<CreateDocumentationPartCommandOutput>;
            createDocumentationPart(args: CreateDocumentationPartCommandInput, cb: (err: any, data?: CreateDocumentationPartCommandOutput) => void): void;
            createDocumentationPart(args: CreateDocumentationPartCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDocumentationPartCommandOutput) => void): void;
            /**
                * <p>Creates a documentation version</p>
                */
            createDocumentationVersion(args: CreateDocumentationVersionCommandInput, options?: __HttpHandlerOptions): Promise<CreateDocumentationVersionCommandOutput>;
            createDocumentationVersion(args: CreateDocumentationVersionCommandInput, cb: (err: any, data?: CreateDocumentationVersionCommandOutput) => void): void;
            createDocumentationVersion(args: CreateDocumentationVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDocumentationVersionCommandOutput) => void): void;
            /**
                * <p>Creates a new domain name.</p>
                */
            createDomainName(args: CreateDomainNameCommandInput, options?: __HttpHandlerOptions): Promise<CreateDomainNameCommandOutput>;
            createDomainName(args: CreateDomainNameCommandInput, cb: (err: any, data?: CreateDomainNameCommandOutput) => void): void;
            createDomainName(args: CreateDomainNameCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDomainNameCommandOutput) => void): void;
            /**
                * <p>Adds a new Model resource to an existing RestApi resource.</p>
                */
            createModel(args: CreateModelCommandInput, options?: __HttpHandlerOptions): Promise<CreateModelCommandOutput>;
            createModel(args: CreateModelCommandInput, cb: (err: any, data?: CreateModelCommandOutput) => void): void;
            createModel(args: CreateModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateModelCommandOutput) => void): void;
            /**
                * <p>Creates a RequestValidator of a given RestApi.</p>
                */
            createRequestValidator(args: CreateRequestValidatorCommandInput, options?: __HttpHandlerOptions): Promise<CreateRequestValidatorCommandOutput>;
            createRequestValidator(args: CreateRequestValidatorCommandInput, cb: (err: any, data?: CreateRequestValidatorCommandOutput) => void): void;
            createRequestValidator(args: CreateRequestValidatorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRequestValidatorCommandOutput) => void): void;
            /**
                * <p>Creates a Resource resource.</p>
                */
            createResource(args: CreateResourceCommandInput, options?: __HttpHandlerOptions): Promise<CreateResourceCommandOutput>;
            createResource(args: CreateResourceCommandInput, cb: (err: any, data?: CreateResourceCommandOutput) => void): void;
            createResource(args: CreateResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateResourceCommandOutput) => void): void;
            /**
                * <p>Creates a new RestApi resource.</p>
                */
            createRestApi(args: CreateRestApiCommandInput, options?: __HttpHandlerOptions): Promise<CreateRestApiCommandOutput>;
            createRestApi(args: CreateRestApiCommandInput, cb: (err: any, data?: CreateRestApiCommandOutput) => void): void;
            createRestApi(args: CreateRestApiCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRestApiCommandOutput) => void): void;
            /**
                * <p>Creates a new Stage resource that references a pre-existing Deployment for the API. </p>
                */
            createStage(args: CreateStageCommandInput, options?: __HttpHandlerOptions): Promise<CreateStageCommandOutput>;
            createStage(args: CreateStageCommandInput, cb: (err: any, data?: CreateStageCommandOutput) => void): void;
            createStage(args: CreateStageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateStageCommandOutput) => void): void;
            /**
                * <p>Creates a usage plan with the throttle and quota limits, as well as the associated API stages, specified in the payload. </p>
                */
            createUsagePlan(args: CreateUsagePlanCommandInput, options?: __HttpHandlerOptions): Promise<CreateUsagePlanCommandOutput>;
            createUsagePlan(args: CreateUsagePlanCommandInput, cb: (err: any, data?: CreateUsagePlanCommandOutput) => void): void;
            createUsagePlan(args: CreateUsagePlanCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateUsagePlanCommandOutput) => void): void;
            /**
                * <p>Creates a usage plan key for adding an existing API key to a usage plan.</p>
                */
            createUsagePlanKey(args: CreateUsagePlanKeyCommandInput, options?: __HttpHandlerOptions): Promise<CreateUsagePlanKeyCommandOutput>;
            createUsagePlanKey(args: CreateUsagePlanKeyCommandInput, cb: (err: any, data?: CreateUsagePlanKeyCommandOutput) => void): void;
            createUsagePlanKey(args: CreateUsagePlanKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateUsagePlanKeyCommandOutput) => void): void;
            /**
                * <p>Creates a VPC link, under the caller's account in a selected region, in an asynchronous operation that typically takes 2-4 minutes to complete and become operational. The caller must have permissions to create and update VPC Endpoint services.</p>
                */
            createVpcLink(args: CreateVpcLinkCommandInput, options?: __HttpHandlerOptions): Promise<CreateVpcLinkCommandOutput>;
            createVpcLink(args: CreateVpcLinkCommandInput, cb: (err: any, data?: CreateVpcLinkCommandOutput) => void): void;
            createVpcLink(args: CreateVpcLinkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateVpcLinkCommandOutput) => void): void;
            /**
                * <p>Deletes the ApiKey resource.</p>
                */
            deleteApiKey(args: DeleteApiKeyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteApiKeyCommandOutput>;
            deleteApiKey(args: DeleteApiKeyCommandInput, cb: (err: any, data?: DeleteApiKeyCommandOutput) => void): void;
            deleteApiKey(args: DeleteApiKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteApiKeyCommandOutput) => void): void;
            /**
                * <p>Deletes an existing Authorizer resource.</p>
                */
            deleteAuthorizer(args: DeleteAuthorizerCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAuthorizerCommandOutput>;
            deleteAuthorizer(args: DeleteAuthorizerCommandInput, cb: (err: any, data?: DeleteAuthorizerCommandOutput) => void): void;
            deleteAuthorizer(args: DeleteAuthorizerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAuthorizerCommandOutput) => void): void;
            /**
                * <p>Deletes the BasePathMapping resource.</p>
                */
            deleteBasePathMapping(args: DeleteBasePathMappingCommandInput, options?: __HttpHandlerOptions): Promise<DeleteBasePathMappingCommandOutput>;
            deleteBasePathMapping(args: DeleteBasePathMappingCommandInput, cb: (err: any, data?: DeleteBasePathMappingCommandOutput) => void): void;
            deleteBasePathMapping(args: DeleteBasePathMappingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteBasePathMappingCommandOutput) => void): void;
            /**
                * <p>Deletes the ClientCertificate resource.</p>
                */
            deleteClientCertificate(args: DeleteClientCertificateCommandInput, options?: __HttpHandlerOptions): Promise<DeleteClientCertificateCommandOutput>;
            deleteClientCertificate(args: DeleteClientCertificateCommandInput, cb: (err: any, data?: DeleteClientCertificateCommandOutput) => void): void;
            deleteClientCertificate(args: DeleteClientCertificateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteClientCertificateCommandOutput) => void): void;
            /**
                * <p>Deletes a Deployment resource. Deleting a deployment will only succeed if there are no Stage resources associated with it.</p>
                */
            deleteDeployment(args: DeleteDeploymentCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDeploymentCommandOutput>;
            deleteDeployment(args: DeleteDeploymentCommandInput, cb: (err: any, data?: DeleteDeploymentCommandOutput) => void): void;
            deleteDeployment(args: DeleteDeploymentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDeploymentCommandOutput) => void): void;
            /**
                * <p>Deletes a documentation part</p>
                */
            deleteDocumentationPart(args: DeleteDocumentationPartCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDocumentationPartCommandOutput>;
            deleteDocumentationPart(args: DeleteDocumentationPartCommandInput, cb: (err: any, data?: DeleteDocumentationPartCommandOutput) => void): void;
            deleteDocumentationPart(args: DeleteDocumentationPartCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDocumentationPartCommandOutput) => void): void;
            /**
                * <p>Deletes a documentation version.</p>
                */
            deleteDocumentationVersion(args: DeleteDocumentationVersionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDocumentationVersionCommandOutput>;
            deleteDocumentationVersion(args: DeleteDocumentationVersionCommandInput, cb: (err: any, data?: DeleteDocumentationVersionCommandOutput) => void): void;
            deleteDocumentationVersion(args: DeleteDocumentationVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDocumentationVersionCommandOutput) => void): void;
            /**
                * <p>Deletes the DomainName resource.</p>
                */
            deleteDomainName(args: DeleteDomainNameCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDomainNameCommandOutput>;
            deleteDomainName(args: DeleteDomainNameCommandInput, cb: (err: any, data?: DeleteDomainNameCommandOutput) => void): void;
            deleteDomainName(args: DeleteDomainNameCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDomainNameCommandOutput) => void): void;
            /**
                * <p>Clears any customization of a GatewayResponse of a specified response type on the given RestApi and resets it with the default settings.</p>
                */
            deleteGatewayResponse(args: DeleteGatewayResponseCommandInput, options?: __HttpHandlerOptions): Promise<DeleteGatewayResponseCommandOutput>;
            deleteGatewayResponse(args: DeleteGatewayResponseCommandInput, cb: (err: any, data?: DeleteGatewayResponseCommandOutput) => void): void;
            deleteGatewayResponse(args: DeleteGatewayResponseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteGatewayResponseCommandOutput) => void): void;
            /**
                * <p>Represents a delete integration.</p>
                */
            deleteIntegration(args: DeleteIntegrationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteIntegrationCommandOutput>;
            deleteIntegration(args: DeleteIntegrationCommandInput, cb: (err: any, data?: DeleteIntegrationCommandOutput) => void): void;
            deleteIntegration(args: DeleteIntegrationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteIntegrationCommandOutput) => void): void;
            /**
                * <p>Represents a delete integration response.</p>
                */
            deleteIntegrationResponse(args: DeleteIntegrationResponseCommandInput, options?: __HttpHandlerOptions): Promise<DeleteIntegrationResponseCommandOutput>;
            deleteIntegrationResponse(args: DeleteIntegrationResponseCommandInput, cb: (err: any, data?: DeleteIntegrationResponseCommandOutput) => void): void;
            deleteIntegrationResponse(args: DeleteIntegrationResponseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteIntegrationResponseCommandOutput) => void): void;
            /**
                * <p>Deletes an existing Method resource.</p>
                */
            deleteMethod(args: DeleteMethodCommandInput, options?: __HttpHandlerOptions): Promise<DeleteMethodCommandOutput>;
            deleteMethod(args: DeleteMethodCommandInput, cb: (err: any, data?: DeleteMethodCommandOutput) => void): void;
            deleteMethod(args: DeleteMethodCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteMethodCommandOutput) => void): void;
            /**
                * <p>Deletes an existing MethodResponse resource.</p>
                */
            deleteMethodResponse(args: DeleteMethodResponseCommandInput, options?: __HttpHandlerOptions): Promise<DeleteMethodResponseCommandOutput>;
            deleteMethodResponse(args: DeleteMethodResponseCommandInput, cb: (err: any, data?: DeleteMethodResponseCommandOutput) => void): void;
            deleteMethodResponse(args: DeleteMethodResponseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteMethodResponseCommandOutput) => void): void;
            /**
                * <p>Deletes a model.</p>
                */
            deleteModel(args: DeleteModelCommandInput, options?: __HttpHandlerOptions): Promise<DeleteModelCommandOutput>;
            deleteModel(args: DeleteModelCommandInput, cb: (err: any, data?: DeleteModelCommandOutput) => void): void;
            deleteModel(args: DeleteModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteModelCommandOutput) => void): void;
            /**
                * <p>Deletes a RequestValidator of a given RestApi.</p>
                */
            deleteRequestValidator(args: DeleteRequestValidatorCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRequestValidatorCommandOutput>;
            deleteRequestValidator(args: DeleteRequestValidatorCommandInput, cb: (err: any, data?: DeleteRequestValidatorCommandOutput) => void): void;
            deleteRequestValidator(args: DeleteRequestValidatorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRequestValidatorCommandOutput) => void): void;
            /**
                * <p>Deletes a Resource resource.</p>
                */
            deleteResource(args: DeleteResourceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteResourceCommandOutput>;
            deleteResource(args: DeleteResourceCommandInput, cb: (err: any, data?: DeleteResourceCommandOutput) => void): void;
            deleteResource(args: DeleteResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteResourceCommandOutput) => void): void;
            /**
                * <p>Deletes the specified API.</p>
                */
            deleteRestApi(args: DeleteRestApiCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRestApiCommandOutput>;
            deleteRestApi(args: DeleteRestApiCommandInput, cb: (err: any, data?: DeleteRestApiCommandOutput) => void): void;
            deleteRestApi(args: DeleteRestApiCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRestApiCommandOutput) => void): void;
            /**
                * <p>Deletes a Stage resource.</p>
                */
            deleteStage(args: DeleteStageCommandInput, options?: __HttpHandlerOptions): Promise<DeleteStageCommandOutput>;
            deleteStage(args: DeleteStageCommandInput, cb: (err: any, data?: DeleteStageCommandOutput) => void): void;
            deleteStage(args: DeleteStageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteStageCommandOutput) => void): void;
            /**
                * <p>Deletes a usage plan of a given plan Id.</p>
                */
            deleteUsagePlan(args: DeleteUsagePlanCommandInput, options?: __HttpHandlerOptions): Promise<DeleteUsagePlanCommandOutput>;
            deleteUsagePlan(args: DeleteUsagePlanCommandInput, cb: (err: any, data?: DeleteUsagePlanCommandOutput) => void): void;
            deleteUsagePlan(args: DeleteUsagePlanCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteUsagePlanCommandOutput) => void): void;
            /**
                * <p>Deletes a usage plan key  and remove the underlying API key from the associated usage plan.</p>
                */
            deleteUsagePlanKey(args: DeleteUsagePlanKeyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteUsagePlanKeyCommandOutput>;
            deleteUsagePlanKey(args: DeleteUsagePlanKeyCommandInput, cb: (err: any, data?: DeleteUsagePlanKeyCommandOutput) => void): void;
            deleteUsagePlanKey(args: DeleteUsagePlanKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteUsagePlanKeyCommandOutput) => void): void;
            /**
                * <p>Deletes an existing VpcLink of a specified identifier.</p>
                */
            deleteVpcLink(args: DeleteVpcLinkCommandInput, options?: __HttpHandlerOptions): Promise<DeleteVpcLinkCommandOutput>;
            deleteVpcLink(args: DeleteVpcLinkCommandInput, cb: (err: any, data?: DeleteVpcLinkCommandOutput) => void): void;
            deleteVpcLink(args: DeleteVpcLinkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteVpcLinkCommandOutput) => void): void;
            /**
                * <p>Flushes all authorizer cache entries on a stage.</p>
                */
            flushStageAuthorizersCache(args: FlushStageAuthorizersCacheCommandInput, options?: __HttpHandlerOptions): Promise<FlushStageAuthorizersCacheCommandOutput>;
            flushStageAuthorizersCache(args: FlushStageAuthorizersCacheCommandInput, cb: (err: any, data?: FlushStageAuthorizersCacheCommandOutput) => void): void;
            flushStageAuthorizersCache(args: FlushStageAuthorizersCacheCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: FlushStageAuthorizersCacheCommandOutput) => void): void;
            /**
                * <p>Flushes a stage's cache.</p>
                */
            flushStageCache(args: FlushStageCacheCommandInput, options?: __HttpHandlerOptions): Promise<FlushStageCacheCommandOutput>;
            flushStageCache(args: FlushStageCacheCommandInput, cb: (err: any, data?: FlushStageCacheCommandOutput) => void): void;
            flushStageCache(args: FlushStageCacheCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: FlushStageCacheCommandOutput) => void): void;
            /**
                * <p>Generates a ClientCertificate resource.</p>
                */
            generateClientCertificate(args: GenerateClientCertificateCommandInput, options?: __HttpHandlerOptions): Promise<GenerateClientCertificateCommandOutput>;
            generateClientCertificate(args: GenerateClientCertificateCommandInput, cb: (err: any, data?: GenerateClientCertificateCommandOutput) => void): void;
            generateClientCertificate(args: GenerateClientCertificateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GenerateClientCertificateCommandOutput) => void): void;
            /**
                * <p>Gets information about the current Account resource.</p>
                */
            getAccount(args: GetAccountCommandInput, options?: __HttpHandlerOptions): Promise<GetAccountCommandOutput>;
            getAccount(args: GetAccountCommandInput, cb: (err: any, data?: GetAccountCommandOutput) => void): void;
            getAccount(args: GetAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAccountCommandOutput) => void): void;
            /**
                * <p>Gets information about the current ApiKey resource.</p>
                */
            getApiKey(args: GetApiKeyCommandInput, options?: __HttpHandlerOptions): Promise<GetApiKeyCommandOutput>;
            getApiKey(args: GetApiKeyCommandInput, cb: (err: any, data?: GetApiKeyCommandOutput) => void): void;
            getApiKey(args: GetApiKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetApiKeyCommandOutput) => void): void;
            /**
                * <p>Gets information about the current ApiKeys resource.</p>
                */
            getApiKeys(args: GetApiKeysCommandInput, options?: __HttpHandlerOptions): Promise<GetApiKeysCommandOutput>;
            getApiKeys(args: GetApiKeysCommandInput, cb: (err: any, data?: GetApiKeysCommandOutput) => void): void;
            getApiKeys(args: GetApiKeysCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetApiKeysCommandOutput) => void): void;
            /**
                * <p>Describe an existing Authorizer resource.</p>
                */
            getAuthorizer(args: GetAuthorizerCommandInput, options?: __HttpHandlerOptions): Promise<GetAuthorizerCommandOutput>;
            getAuthorizer(args: GetAuthorizerCommandInput, cb: (err: any, data?: GetAuthorizerCommandOutput) => void): void;
            getAuthorizer(args: GetAuthorizerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAuthorizerCommandOutput) => void): void;
            /**
                * <p>Describe an existing Authorizers resource.</p>
                */
            getAuthorizers(args: GetAuthorizersCommandInput, options?: __HttpHandlerOptions): Promise<GetAuthorizersCommandOutput>;
            getAuthorizers(args: GetAuthorizersCommandInput, cb: (err: any, data?: GetAuthorizersCommandOutput) => void): void;
            getAuthorizers(args: GetAuthorizersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAuthorizersCommandOutput) => void): void;
            /**
                * <p>Describe a BasePathMapping resource.</p>
                */
            getBasePathMapping(args: GetBasePathMappingCommandInput, options?: __HttpHandlerOptions): Promise<GetBasePathMappingCommandOutput>;
            getBasePathMapping(args: GetBasePathMappingCommandInput, cb: (err: any, data?: GetBasePathMappingCommandOutput) => void): void;
            getBasePathMapping(args: GetBasePathMappingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetBasePathMappingCommandOutput) => void): void;
            /**
                * <p>Represents a collection of BasePathMapping resources.</p>
                */
            getBasePathMappings(args: GetBasePathMappingsCommandInput, options?: __HttpHandlerOptions): Promise<GetBasePathMappingsCommandOutput>;
            getBasePathMappings(args: GetBasePathMappingsCommandInput, cb: (err: any, data?: GetBasePathMappingsCommandOutput) => void): void;
            getBasePathMappings(args: GetBasePathMappingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetBasePathMappingsCommandOutput) => void): void;
            /**
                * <p>Gets information about the current ClientCertificate resource.</p>
                */
            getClientCertificate(args: GetClientCertificateCommandInput, options?: __HttpHandlerOptions): Promise<GetClientCertificateCommandOutput>;
            getClientCertificate(args: GetClientCertificateCommandInput, cb: (err: any, data?: GetClientCertificateCommandOutput) => void): void;
            getClientCertificate(args: GetClientCertificateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetClientCertificateCommandOutput) => void): void;
            /**
                * <p>Gets a collection of ClientCertificate resources.</p>
                */
            getClientCertificates(args: GetClientCertificatesCommandInput, options?: __HttpHandlerOptions): Promise<GetClientCertificatesCommandOutput>;
            getClientCertificates(args: GetClientCertificatesCommandInput, cb: (err: any, data?: GetClientCertificatesCommandOutput) => void): void;
            getClientCertificates(args: GetClientCertificatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetClientCertificatesCommandOutput) => void): void;
            /**
                * <p>Gets information about a Deployment resource.</p>
                */
            getDeployment(args: GetDeploymentCommandInput, options?: __HttpHandlerOptions): Promise<GetDeploymentCommandOutput>;
            getDeployment(args: GetDeploymentCommandInput, cb: (err: any, data?: GetDeploymentCommandOutput) => void): void;
            getDeployment(args: GetDeploymentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeploymentCommandOutput) => void): void;
            /**
                * <p>Gets information about a Deployments collection.</p>
                */
            getDeployments(args: GetDeploymentsCommandInput, options?: __HttpHandlerOptions): Promise<GetDeploymentsCommandOutput>;
            getDeployments(args: GetDeploymentsCommandInput, cb: (err: any, data?: GetDeploymentsCommandOutput) => void): void;
            getDeployments(args: GetDeploymentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeploymentsCommandOutput) => void): void;
            /**
                * <p>Gets a documentation part.</p>
                */
            getDocumentationPart(args: GetDocumentationPartCommandInput, options?: __HttpHandlerOptions): Promise<GetDocumentationPartCommandOutput>;
            getDocumentationPart(args: GetDocumentationPartCommandInput, cb: (err: any, data?: GetDocumentationPartCommandOutput) => void): void;
            getDocumentationPart(args: GetDocumentationPartCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDocumentationPartCommandOutput) => void): void;
            /**
                * <p>Gets documentation parts.</p>
                */
            getDocumentationParts(args: GetDocumentationPartsCommandInput, options?: __HttpHandlerOptions): Promise<GetDocumentationPartsCommandOutput>;
            getDocumentationParts(args: GetDocumentationPartsCommandInput, cb: (err: any, data?: GetDocumentationPartsCommandOutput) => void): void;
            getDocumentationParts(args: GetDocumentationPartsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDocumentationPartsCommandOutput) => void): void;
            /**
                * <p>Gets a documentation version.</p>
                */
            getDocumentationVersion(args: GetDocumentationVersionCommandInput, options?: __HttpHandlerOptions): Promise<GetDocumentationVersionCommandOutput>;
            getDocumentationVersion(args: GetDocumentationVersionCommandInput, cb: (err: any, data?: GetDocumentationVersionCommandOutput) => void): void;
            getDocumentationVersion(args: GetDocumentationVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDocumentationVersionCommandOutput) => void): void;
            /**
                * <p>Gets documentation versions.</p>
                */
            getDocumentationVersions(args: GetDocumentationVersionsCommandInput, options?: __HttpHandlerOptions): Promise<GetDocumentationVersionsCommandOutput>;
            getDocumentationVersions(args: GetDocumentationVersionsCommandInput, cb: (err: any, data?: GetDocumentationVersionsCommandOutput) => void): void;
            getDocumentationVersions(args: GetDocumentationVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDocumentationVersionsCommandOutput) => void): void;
            /**
                * <p>Represents a domain name that is contained in a simpler, more intuitive URL that can be called.</p>
                */
            getDomainName(args: GetDomainNameCommandInput, options?: __HttpHandlerOptions): Promise<GetDomainNameCommandOutput>;
            getDomainName(args: GetDomainNameCommandInput, cb: (err: any, data?: GetDomainNameCommandOutput) => void): void;
            getDomainName(args: GetDomainNameCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDomainNameCommandOutput) => void): void;
            /**
                * <p>Represents a collection of DomainName resources.</p>
                */
            getDomainNames(args: GetDomainNamesCommandInput, options?: __HttpHandlerOptions): Promise<GetDomainNamesCommandOutput>;
            getDomainNames(args: GetDomainNamesCommandInput, cb: (err: any, data?: GetDomainNamesCommandOutput) => void): void;
            getDomainNames(args: GetDomainNamesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDomainNamesCommandOutput) => void): void;
            /**
                * <p>Exports a deployed version of a RestApi in a specified format.</p>
                */
            getExport(args: GetExportCommandInput, options?: __HttpHandlerOptions): Promise<GetExportCommandOutput>;
            getExport(args: GetExportCommandInput, cb: (err: any, data?: GetExportCommandOutput) => void): void;
            getExport(args: GetExportCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetExportCommandOutput) => void): void;
            /**
                * <p>Gets a GatewayResponse of a specified response type on the given RestApi.</p>
                */
            getGatewayResponse(args: GetGatewayResponseCommandInput, options?: __HttpHandlerOptions): Promise<GetGatewayResponseCommandOutput>;
            getGatewayResponse(args: GetGatewayResponseCommandInput, cb: (err: any, data?: GetGatewayResponseCommandOutput) => void): void;
            getGatewayResponse(args: GetGatewayResponseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetGatewayResponseCommandOutput) => void): void;
            /**
                * <p>Gets the GatewayResponses collection on the given RestApi. If an API developer has not added any definitions for gateway responses, the result will be the API Gateway-generated default GatewayResponses collection for the supported response types.</p>
                */
            getGatewayResponses(args: GetGatewayResponsesCommandInput, options?: __HttpHandlerOptions): Promise<GetGatewayResponsesCommandOutput>;
            getGatewayResponses(args: GetGatewayResponsesCommandInput, cb: (err: any, data?: GetGatewayResponsesCommandOutput) => void): void;
            getGatewayResponses(args: GetGatewayResponsesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetGatewayResponsesCommandOutput) => void): void;
            /**
                * <p>Get the integration settings.</p>
                */
            getIntegration(args: GetIntegrationCommandInput, options?: __HttpHandlerOptions): Promise<GetIntegrationCommandOutput>;
            getIntegration(args: GetIntegrationCommandInput, cb: (err: any, data?: GetIntegrationCommandOutput) => void): void;
            getIntegration(args: GetIntegrationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetIntegrationCommandOutput) => void): void;
            /**
                * <p>Represents a get integration response.</p>
                */
            getIntegrationResponse(args: GetIntegrationResponseCommandInput, options?: __HttpHandlerOptions): Promise<GetIntegrationResponseCommandOutput>;
            getIntegrationResponse(args: GetIntegrationResponseCommandInput, cb: (err: any, data?: GetIntegrationResponseCommandOutput) => void): void;
            getIntegrationResponse(args: GetIntegrationResponseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetIntegrationResponseCommandOutput) => void): void;
            /**
                * <p>Describe an existing Method resource.</p>
                */
            getMethod(args: GetMethodCommandInput, options?: __HttpHandlerOptions): Promise<GetMethodCommandOutput>;
            getMethod(args: GetMethodCommandInput, cb: (err: any, data?: GetMethodCommandOutput) => void): void;
            getMethod(args: GetMethodCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMethodCommandOutput) => void): void;
            /**
                * <p>Describes a MethodResponse resource.</p>
                */
            getMethodResponse(args: GetMethodResponseCommandInput, options?: __HttpHandlerOptions): Promise<GetMethodResponseCommandOutput>;
            getMethodResponse(args: GetMethodResponseCommandInput, cb: (err: any, data?: GetMethodResponseCommandOutput) => void): void;
            getMethodResponse(args: GetMethodResponseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMethodResponseCommandOutput) => void): void;
            /**
                * <p>Describes an existing model defined for a RestApi resource.</p>
                */
            getModel(args: GetModelCommandInput, options?: __HttpHandlerOptions): Promise<GetModelCommandOutput>;
            getModel(args: GetModelCommandInput, cb: (err: any, data?: GetModelCommandOutput) => void): void;
            getModel(args: GetModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetModelCommandOutput) => void): void;
            /**
                * <p>Describes existing Models defined for a RestApi resource.</p>
                */
            getModels(args: GetModelsCommandInput, options?: __HttpHandlerOptions): Promise<GetModelsCommandOutput>;
            getModels(args: GetModelsCommandInput, cb: (err: any, data?: GetModelsCommandOutput) => void): void;
            getModels(args: GetModelsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetModelsCommandOutput) => void): void;
            /**
                * <p>Generates a sample mapping template that can be used to transform a payload into the structure of a model.</p>
                */
            getModelTemplate(args: GetModelTemplateCommandInput, options?: __HttpHandlerOptions): Promise<GetModelTemplateCommandOutput>;
            getModelTemplate(args: GetModelTemplateCommandInput, cb: (err: any, data?: GetModelTemplateCommandOutput) => void): void;
            getModelTemplate(args: GetModelTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetModelTemplateCommandOutput) => void): void;
            /**
                * <p>Gets a RequestValidator of a given RestApi.</p>
                */
            getRequestValidator(args: GetRequestValidatorCommandInput, options?: __HttpHandlerOptions): Promise<GetRequestValidatorCommandOutput>;
            getRequestValidator(args: GetRequestValidatorCommandInput, cb: (err: any, data?: GetRequestValidatorCommandOutput) => void): void;
            getRequestValidator(args: GetRequestValidatorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRequestValidatorCommandOutput) => void): void;
            /**
                * <p>Gets the RequestValidators collection of a given RestApi.</p>
                */
            getRequestValidators(args: GetRequestValidatorsCommandInput, options?: __HttpHandlerOptions): Promise<GetRequestValidatorsCommandOutput>;
            getRequestValidators(args: GetRequestValidatorsCommandInput, cb: (err: any, data?: GetRequestValidatorsCommandOutput) => void): void;
            getRequestValidators(args: GetRequestValidatorsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRequestValidatorsCommandOutput) => void): void;
            /**
                * <p>Lists information about a resource.</p>
                */
            getResource(args: GetResourceCommandInput, options?: __HttpHandlerOptions): Promise<GetResourceCommandOutput>;
            getResource(args: GetResourceCommandInput, cb: (err: any, data?: GetResourceCommandOutput) => void): void;
            getResource(args: GetResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetResourceCommandOutput) => void): void;
            /**
                * <p>Lists information about a collection of Resource resources.</p>
                */
            getResources(args: GetResourcesCommandInput, options?: __HttpHandlerOptions): Promise<GetResourcesCommandOutput>;
            getResources(args: GetResourcesCommandInput, cb: (err: any, data?: GetResourcesCommandOutput) => void): void;
            getResources(args: GetResourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetResourcesCommandOutput) => void): void;
            /**
                * <p>Lists the RestApi resource in the collection.</p>
                */
            getRestApi(args: GetRestApiCommandInput, options?: __HttpHandlerOptions): Promise<GetRestApiCommandOutput>;
            getRestApi(args: GetRestApiCommandInput, cb: (err: any, data?: GetRestApiCommandOutput) => void): void;
            getRestApi(args: GetRestApiCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRestApiCommandOutput) => void): void;
            /**
                * <p>Lists the RestApis resources for your collection.</p>
                */
            getRestApis(args: GetRestApisCommandInput, options?: __HttpHandlerOptions): Promise<GetRestApisCommandOutput>;
            getRestApis(args: GetRestApisCommandInput, cb: (err: any, data?: GetRestApisCommandOutput) => void): void;
            getRestApis(args: GetRestApisCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRestApisCommandOutput) => void): void;
            /**
                * <p>Generates a client SDK for a RestApi and Stage.</p>
                */
            getSdk(args: GetSdkCommandInput, options?: __HttpHandlerOptions): Promise<GetSdkCommandOutput>;
            getSdk(args: GetSdkCommandInput, cb: (err: any, data?: GetSdkCommandOutput) => void): void;
            getSdk(args: GetSdkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSdkCommandOutput) => void): void;
            /**
                * <p>Gets an SDK type.</p>
                */
            getSdkType(args: GetSdkTypeCommandInput, options?: __HttpHandlerOptions): Promise<GetSdkTypeCommandOutput>;
            getSdkType(args: GetSdkTypeCommandInput, cb: (err: any, data?: GetSdkTypeCommandOutput) => void): void;
            getSdkType(args: GetSdkTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSdkTypeCommandOutput) => void): void;
            /**
                * <p>Gets SDK types</p>
                */
            getSdkTypes(args: GetSdkTypesCommandInput, options?: __HttpHandlerOptions): Promise<GetSdkTypesCommandOutput>;
            getSdkTypes(args: GetSdkTypesCommandInput, cb: (err: any, data?: GetSdkTypesCommandOutput) => void): void;
            getSdkTypes(args: GetSdkTypesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSdkTypesCommandOutput) => void): void;
            /**
                * <p>Gets information about a Stage resource.</p>
                */
            getStage(args: GetStageCommandInput, options?: __HttpHandlerOptions): Promise<GetStageCommandOutput>;
            getStage(args: GetStageCommandInput, cb: (err: any, data?: GetStageCommandOutput) => void): void;
            getStage(args: GetStageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetStageCommandOutput) => void): void;
            /**
                * <p>Gets information about one or more Stage resources.</p>
                */
            getStages(args: GetStagesCommandInput, options?: __HttpHandlerOptions): Promise<GetStagesCommandOutput>;
            getStages(args: GetStagesCommandInput, cb: (err: any, data?: GetStagesCommandOutput) => void): void;
            getStages(args: GetStagesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetStagesCommandOutput) => void): void;
            /**
                * <p>Gets the Tags collection for a given resource.</p>
                */
            getTags(args: GetTagsCommandInput, options?: __HttpHandlerOptions): Promise<GetTagsCommandOutput>;
            getTags(args: GetTagsCommandInput, cb: (err: any, data?: GetTagsCommandOutput) => void): void;
            getTags(args: GetTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTagsCommandOutput) => void): void;
            /**
                * <p>Gets the usage data of a usage plan in a specified time interval.</p>
                */
            getUsage(args: GetUsageCommandInput, options?: __HttpHandlerOptions): Promise<GetUsageCommandOutput>;
            getUsage(args: GetUsageCommandInput, cb: (err: any, data?: GetUsageCommandOutput) => void): void;
            getUsage(args: GetUsageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetUsageCommandOutput) => void): void;
            /**
                * <p>Gets a usage plan of a given plan identifier.</p>
                */
            getUsagePlan(args: GetUsagePlanCommandInput, options?: __HttpHandlerOptions): Promise<GetUsagePlanCommandOutput>;
            getUsagePlan(args: GetUsagePlanCommandInput, cb: (err: any, data?: GetUsagePlanCommandOutput) => void): void;
            getUsagePlan(args: GetUsagePlanCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetUsagePlanCommandOutput) => void): void;
            /**
                * <p>Gets a usage plan key of a given key identifier.</p>
                */
            getUsagePlanKey(args: GetUsagePlanKeyCommandInput, options?: __HttpHandlerOptions): Promise<GetUsagePlanKeyCommandOutput>;
            getUsagePlanKey(args: GetUsagePlanKeyCommandInput, cb: (err: any, data?: GetUsagePlanKeyCommandOutput) => void): void;
            getUsagePlanKey(args: GetUsagePlanKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetUsagePlanKeyCommandOutput) => void): void;
            /**
                * <p>Gets all the usage plan keys representing the API keys added to a specified usage plan.</p>
                */
            getUsagePlanKeys(args: GetUsagePlanKeysCommandInput, options?: __HttpHandlerOptions): Promise<GetUsagePlanKeysCommandOutput>;
            getUsagePlanKeys(args: GetUsagePlanKeysCommandInput, cb: (err: any, data?: GetUsagePlanKeysCommandOutput) => void): void;
            getUsagePlanKeys(args: GetUsagePlanKeysCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetUsagePlanKeysCommandOutput) => void): void;
            /**
                * <p>Gets all the usage plans of the caller's account.</p>
                */
            getUsagePlans(args: GetUsagePlansCommandInput, options?: __HttpHandlerOptions): Promise<GetUsagePlansCommandOutput>;
            getUsagePlans(args: GetUsagePlansCommandInput, cb: (err: any, data?: GetUsagePlansCommandOutput) => void): void;
            getUsagePlans(args: GetUsagePlansCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetUsagePlansCommandOutput) => void): void;
            /**
                * <p>Gets a specified VPC link under the caller's account in a region.</p>
                */
            getVpcLink(args: GetVpcLinkCommandInput, options?: __HttpHandlerOptions): Promise<GetVpcLinkCommandOutput>;
            getVpcLink(args: GetVpcLinkCommandInput, cb: (err: any, data?: GetVpcLinkCommandOutput) => void): void;
            getVpcLink(args: GetVpcLinkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetVpcLinkCommandOutput) => void): void;
            /**
                * <p>Gets the VpcLinks collection under the caller's account in a selected region.</p>
                */
            getVpcLinks(args: GetVpcLinksCommandInput, options?: __HttpHandlerOptions): Promise<GetVpcLinksCommandOutput>;
            getVpcLinks(args: GetVpcLinksCommandInput, cb: (err: any, data?: GetVpcLinksCommandOutput) => void): void;
            getVpcLinks(args: GetVpcLinksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetVpcLinksCommandOutput) => void): void;
            /**
                * <p>Import API keys from an external source, such as a CSV-formatted file.</p>
                */
            importApiKeys(args: ImportApiKeysCommandInput, options?: __HttpHandlerOptions): Promise<ImportApiKeysCommandOutput>;
            importApiKeys(args: ImportApiKeysCommandInput, cb: (err: any, data?: ImportApiKeysCommandOutput) => void): void;
            importApiKeys(args: ImportApiKeysCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ImportApiKeysCommandOutput) => void): void;
            /**
                * <p>Imports documentation parts</p>
                */
            importDocumentationParts(args: ImportDocumentationPartsCommandInput, options?: __HttpHandlerOptions): Promise<ImportDocumentationPartsCommandOutput>;
            importDocumentationParts(args: ImportDocumentationPartsCommandInput, cb: (err: any, data?: ImportDocumentationPartsCommandOutput) => void): void;
            importDocumentationParts(args: ImportDocumentationPartsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ImportDocumentationPartsCommandOutput) => void): void;
            /**
                * <p>A feature of the API Gateway control service for creating a new API from an external API definition file.</p>
                */
            importRestApi(args: ImportRestApiCommandInput, options?: __HttpHandlerOptions): Promise<ImportRestApiCommandOutput>;
            importRestApi(args: ImportRestApiCommandInput, cb: (err: any, data?: ImportRestApiCommandOutput) => void): void;
            importRestApi(args: ImportRestApiCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ImportRestApiCommandOutput) => void): void;
            /**
                * <p>Creates a customization of a GatewayResponse of a specified response type and status code on the given RestApi.</p>
                */
            putGatewayResponse(args: PutGatewayResponseCommandInput, options?: __HttpHandlerOptions): Promise<PutGatewayResponseCommandOutput>;
            putGatewayResponse(args: PutGatewayResponseCommandInput, cb: (err: any, data?: PutGatewayResponseCommandOutput) => void): void;
            putGatewayResponse(args: PutGatewayResponseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutGatewayResponseCommandOutput) => void): void;
            /**
                * <p>Sets up a method's integration.</p>
                */
            putIntegration(args: PutIntegrationCommandInput, options?: __HttpHandlerOptions): Promise<PutIntegrationCommandOutput>;
            putIntegration(args: PutIntegrationCommandInput, cb: (err: any, data?: PutIntegrationCommandOutput) => void): void;
            putIntegration(args: PutIntegrationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutIntegrationCommandOutput) => void): void;
            /**
                * <p>Represents a put integration.</p>
                */
            putIntegrationResponse(args: PutIntegrationResponseCommandInput, options?: __HttpHandlerOptions): Promise<PutIntegrationResponseCommandOutput>;
            putIntegrationResponse(args: PutIntegrationResponseCommandInput, cb: (err: any, data?: PutIntegrationResponseCommandOutput) => void): void;
            putIntegrationResponse(args: PutIntegrationResponseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutIntegrationResponseCommandOutput) => void): void;
            /**
                * <p>Add a method to an existing Resource resource.</p>
                */
            putMethod(args: PutMethodCommandInput, options?: __HttpHandlerOptions): Promise<PutMethodCommandOutput>;
            putMethod(args: PutMethodCommandInput, cb: (err: any, data?: PutMethodCommandOutput) => void): void;
            putMethod(args: PutMethodCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutMethodCommandOutput) => void): void;
            /**
                * <p>Adds a MethodResponse to an existing Method resource.</p>
                */
            putMethodResponse(args: PutMethodResponseCommandInput, options?: __HttpHandlerOptions): Promise<PutMethodResponseCommandOutput>;
            putMethodResponse(args: PutMethodResponseCommandInput, cb: (err: any, data?: PutMethodResponseCommandOutput) => void): void;
            putMethodResponse(args: PutMethodResponseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutMethodResponseCommandOutput) => void): void;
            /**
                * <p>A feature of the API Gateway control service for updating an existing API with an input of external API definitions.
                *             The update can take the form of merging the supplied definition into the existing API or overwriting the existing API.</p>
                */
            putRestApi(args: PutRestApiCommandInput, options?: __HttpHandlerOptions): Promise<PutRestApiCommandOutput>;
            putRestApi(args: PutRestApiCommandInput, cb: (err: any, data?: PutRestApiCommandOutput) => void): void;
            putRestApi(args: PutRestApiCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutRestApiCommandOutput) => void): void;
            /**
                * <p>Adds or updates a tag on a given resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Simulate the execution of an Authorizer in your RestApi with headers, parameters, and an incoming request body.</p>
                */
            testInvokeAuthorizer(args: TestInvokeAuthorizerCommandInput, options?: __HttpHandlerOptions): Promise<TestInvokeAuthorizerCommandOutput>;
            testInvokeAuthorizer(args: TestInvokeAuthorizerCommandInput, cb: (err: any, data?: TestInvokeAuthorizerCommandOutput) => void): void;
            testInvokeAuthorizer(args: TestInvokeAuthorizerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TestInvokeAuthorizerCommandOutput) => void): void;
            /**
                * <p>Simulate the invocation of a Method in your RestApi with headers, parameters, and an incoming request body.</p>
                */
            testInvokeMethod(args: TestInvokeMethodCommandInput, options?: __HttpHandlerOptions): Promise<TestInvokeMethodCommandOutput>;
            testInvokeMethod(args: TestInvokeMethodCommandInput, cb: (err: any, data?: TestInvokeMethodCommandOutput) => void): void;
            testInvokeMethod(args: TestInvokeMethodCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TestInvokeMethodCommandOutput) => void): void;
            /**
                * <p>Removes a tag from a given resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Changes information about the current Account resource.</p>
                */
            updateAccount(args: UpdateAccountCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAccountCommandOutput>;
            updateAccount(args: UpdateAccountCommandInput, cb: (err: any, data?: UpdateAccountCommandOutput) => void): void;
            updateAccount(args: UpdateAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAccountCommandOutput) => void): void;
            /**
                * <p>Changes information about an ApiKey resource.</p>
                */
            updateApiKey(args: UpdateApiKeyCommandInput, options?: __HttpHandlerOptions): Promise<UpdateApiKeyCommandOutput>;
            updateApiKey(args: UpdateApiKeyCommandInput, cb: (err: any, data?: UpdateApiKeyCommandOutput) => void): void;
            updateApiKey(args: UpdateApiKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateApiKeyCommandOutput) => void): void;
            /**
                * <p>Updates an existing Authorizer resource.</p>
                */
            updateAuthorizer(args: UpdateAuthorizerCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAuthorizerCommandOutput>;
            updateAuthorizer(args: UpdateAuthorizerCommandInput, cb: (err: any, data?: UpdateAuthorizerCommandOutput) => void): void;
            updateAuthorizer(args: UpdateAuthorizerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAuthorizerCommandOutput) => void): void;
            /**
                * <p>Changes information about the BasePathMapping resource.</p>
                */
            updateBasePathMapping(args: UpdateBasePathMappingCommandInput, options?: __HttpHandlerOptions): Promise<UpdateBasePathMappingCommandOutput>;
            updateBasePathMapping(args: UpdateBasePathMappingCommandInput, cb: (err: any, data?: UpdateBasePathMappingCommandOutput) => void): void;
            updateBasePathMapping(args: UpdateBasePathMappingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateBasePathMappingCommandOutput) => void): void;
            /**
                * <p>Changes information about an ClientCertificate resource.</p>
                */
            updateClientCertificate(args: UpdateClientCertificateCommandInput, options?: __HttpHandlerOptions): Promise<UpdateClientCertificateCommandOutput>;
            updateClientCertificate(args: UpdateClientCertificateCommandInput, cb: (err: any, data?: UpdateClientCertificateCommandOutput) => void): void;
            updateClientCertificate(args: UpdateClientCertificateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateClientCertificateCommandOutput) => void): void;
            /**
                * <p>Changes information about a Deployment resource.</p>
                */
            updateDeployment(args: UpdateDeploymentCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDeploymentCommandOutput>;
            updateDeployment(args: UpdateDeploymentCommandInput, cb: (err: any, data?: UpdateDeploymentCommandOutput) => void): void;
            updateDeployment(args: UpdateDeploymentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDeploymentCommandOutput) => void): void;
            /**
                * <p>Updates a documentation part.</p>
                */
            updateDocumentationPart(args: UpdateDocumentationPartCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDocumentationPartCommandOutput>;
            updateDocumentationPart(args: UpdateDocumentationPartCommandInput, cb: (err: any, data?: UpdateDocumentationPartCommandOutput) => void): void;
            updateDocumentationPart(args: UpdateDocumentationPartCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDocumentationPartCommandOutput) => void): void;
            /**
                * <p>Updates a documentation version.</p>
                */
            updateDocumentationVersion(args: UpdateDocumentationVersionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDocumentationVersionCommandOutput>;
            updateDocumentationVersion(args: UpdateDocumentationVersionCommandInput, cb: (err: any, data?: UpdateDocumentationVersionCommandOutput) => void): void;
            updateDocumentationVersion(args: UpdateDocumentationVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDocumentationVersionCommandOutput) => void): void;
            /**
                * <p>Changes information about the DomainName resource.</p>
                */
            updateDomainName(args: UpdateDomainNameCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDomainNameCommandOutput>;
            updateDomainName(args: UpdateDomainNameCommandInput, cb: (err: any, data?: UpdateDomainNameCommandOutput) => void): void;
            updateDomainName(args: UpdateDomainNameCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDomainNameCommandOutput) => void): void;
            /**
                * <p>Updates a GatewayResponse of a specified response type on the given RestApi.</p>
                */
            updateGatewayResponse(args: UpdateGatewayResponseCommandInput, options?: __HttpHandlerOptions): Promise<UpdateGatewayResponseCommandOutput>;
            updateGatewayResponse(args: UpdateGatewayResponseCommandInput, cb: (err: any, data?: UpdateGatewayResponseCommandOutput) => void): void;
            updateGatewayResponse(args: UpdateGatewayResponseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateGatewayResponseCommandOutput) => void): void;
            /**
                * <p>Represents an update integration.</p>
                */
            updateIntegration(args: UpdateIntegrationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateIntegrationCommandOutput>;
            updateIntegration(args: UpdateIntegrationCommandInput, cb: (err: any, data?: UpdateIntegrationCommandOutput) => void): void;
            updateIntegration(args: UpdateIntegrationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateIntegrationCommandOutput) => void): void;
            /**
                * <p>Represents an update integration response.</p>
                */
            updateIntegrationResponse(args: UpdateIntegrationResponseCommandInput, options?: __HttpHandlerOptions): Promise<UpdateIntegrationResponseCommandOutput>;
            updateIntegrationResponse(args: UpdateIntegrationResponseCommandInput, cb: (err: any, data?: UpdateIntegrationResponseCommandOutput) => void): void;
            updateIntegrationResponse(args: UpdateIntegrationResponseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateIntegrationResponseCommandOutput) => void): void;
            /**
                * <p>Updates an existing Method resource.</p>
                */
            updateMethod(args: UpdateMethodCommandInput, options?: __HttpHandlerOptions): Promise<UpdateMethodCommandOutput>;
            updateMethod(args: UpdateMethodCommandInput, cb: (err: any, data?: UpdateMethodCommandOutput) => void): void;
            updateMethod(args: UpdateMethodCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateMethodCommandOutput) => void): void;
            /**
                * <p>Updates an existing MethodResponse resource.</p>
                */
            updateMethodResponse(args: UpdateMethodResponseCommandInput, options?: __HttpHandlerOptions): Promise<UpdateMethodResponseCommandOutput>;
            updateMethodResponse(args: UpdateMethodResponseCommandInput, cb: (err: any, data?: UpdateMethodResponseCommandOutput) => void): void;
            updateMethodResponse(args: UpdateMethodResponseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateMethodResponseCommandOutput) => void): void;
            /**
                * <p>Changes information about a model.</p>
                */
            updateModel(args: UpdateModelCommandInput, options?: __HttpHandlerOptions): Promise<UpdateModelCommandOutput>;
            updateModel(args: UpdateModelCommandInput, cb: (err: any, data?: UpdateModelCommandOutput) => void): void;
            updateModel(args: UpdateModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateModelCommandOutput) => void): void;
            /**
                * <p>Updates a RequestValidator of a given RestApi.</p>
                */
            updateRequestValidator(args: UpdateRequestValidatorCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRequestValidatorCommandOutput>;
            updateRequestValidator(args: UpdateRequestValidatorCommandInput, cb: (err: any, data?: UpdateRequestValidatorCommandOutput) => void): void;
            updateRequestValidator(args: UpdateRequestValidatorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRequestValidatorCommandOutput) => void): void;
            /**
                * <p>Changes information about a Resource resource.</p>
                */
            updateResource(args: UpdateResourceCommandInput, options?: __HttpHandlerOptions): Promise<UpdateResourceCommandOutput>;
            updateResource(args: UpdateResourceCommandInput, cb: (err: any, data?: UpdateResourceCommandOutput) => void): void;
            updateResource(args: UpdateResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateResourceCommandOutput) => void): void;
            /**
                * <p>Changes information about the specified API.</p>
                */
            updateRestApi(args: UpdateRestApiCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRestApiCommandOutput>;
            updateRestApi(args: UpdateRestApiCommandInput, cb: (err: any, data?: UpdateRestApiCommandOutput) => void): void;
            updateRestApi(args: UpdateRestApiCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRestApiCommandOutput) => void): void;
            /**
                * <p>Changes information about a Stage resource.</p>
                */
            updateStage(args: UpdateStageCommandInput, options?: __HttpHandlerOptions): Promise<UpdateStageCommandOutput>;
            updateStage(args: UpdateStageCommandInput, cb: (err: any, data?: UpdateStageCommandOutput) => void): void;
            updateStage(args: UpdateStageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateStageCommandOutput) => void): void;
            /**
                * <p>Grants a temporary extension to the remaining quota of a usage plan associated with a specified API key.</p>
                */
            updateUsage(args: UpdateUsageCommandInput, options?: __HttpHandlerOptions): Promise<UpdateUsageCommandOutput>;
            updateUsage(args: UpdateUsageCommandInput, cb: (err: any, data?: UpdateUsageCommandOutput) => void): void;
            updateUsage(args: UpdateUsageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateUsageCommandOutput) => void): void;
            /**
                * <p>Updates a usage plan of a given plan Id.</p>
                */
            updateUsagePlan(args: UpdateUsagePlanCommandInput, options?: __HttpHandlerOptions): Promise<UpdateUsagePlanCommandOutput>;
            updateUsagePlan(args: UpdateUsagePlanCommandInput, cb: (err: any, data?: UpdateUsagePlanCommandOutput) => void): void;
            updateUsagePlan(args: UpdateUsagePlanCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateUsagePlanCommandOutput) => void): void;
            /**
                * <p>Updates an existing VpcLink of a specified identifier.</p>
                */
            updateVpcLink(args: UpdateVpcLinkCommandInput, options?: __HttpHandlerOptions): Promise<UpdateVpcLinkCommandOutput>;
            updateVpcLink(args: UpdateVpcLinkCommandInput, cb: (err: any, data?: UpdateVpcLinkCommandOutput) => void): void;
            updateVpcLink(args: UpdateVpcLinkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateVpcLinkCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateApiKeyCommandInput, CreateApiKeyCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateApiKeyCommand";
    import { CreateAuthorizerCommandInput, CreateAuthorizerCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateAuthorizerCommand";
    import { CreateBasePathMappingCommandInput, CreateBasePathMappingCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateBasePathMappingCommand";
    import { CreateDeploymentCommandInput, CreateDeploymentCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateDeploymentCommand";
    import { CreateDocumentationPartCommandInput, CreateDocumentationPartCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateDocumentationPartCommand";
    import { CreateDocumentationVersionCommandInput, CreateDocumentationVersionCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateDocumentationVersionCommand";
    import { CreateDomainNameCommandInput, CreateDomainNameCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateDomainNameCommand";
    import { CreateModelCommandInput, CreateModelCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateModelCommand";
    import { CreateRequestValidatorCommandInput, CreateRequestValidatorCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateRequestValidatorCommand";
    import { CreateResourceCommandInput, CreateResourceCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateResourceCommand";
    import { CreateRestApiCommandInput, CreateRestApiCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateRestApiCommand";
    import { CreateStageCommandInput, CreateStageCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateStageCommand";
    import { CreateUsagePlanCommandInput, CreateUsagePlanCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateUsagePlanCommand";
    import { CreateUsagePlanKeyCommandInput, CreateUsagePlanKeyCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateUsagePlanKeyCommand";
    import { CreateVpcLinkCommandInput, CreateVpcLinkCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateVpcLinkCommand";
    import { DeleteApiKeyCommandInput, DeleteApiKeyCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteApiKeyCommand";
    import { DeleteAuthorizerCommandInput, DeleteAuthorizerCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteAuthorizerCommand";
    import { DeleteBasePathMappingCommandInput, DeleteBasePathMappingCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteBasePathMappingCommand";
    import { DeleteClientCertificateCommandInput, DeleteClientCertificateCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteClientCertificateCommand";
    import { DeleteDeploymentCommandInput, DeleteDeploymentCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteDeploymentCommand";
    import { DeleteDocumentationPartCommandInput, DeleteDocumentationPartCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteDocumentationPartCommand";
    import { DeleteDocumentationVersionCommandInput, DeleteDocumentationVersionCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteDocumentationVersionCommand";
    import { DeleteDomainNameCommandInput, DeleteDomainNameCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteDomainNameCommand";
    import { DeleteGatewayResponseCommandInput, DeleteGatewayResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteGatewayResponseCommand";
    import { DeleteIntegrationCommandInput, DeleteIntegrationCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteIntegrationCommand";
    import { DeleteIntegrationResponseCommandInput, DeleteIntegrationResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteIntegrationResponseCommand";
    import { DeleteMethodCommandInput, DeleteMethodCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteMethodCommand";
    import { DeleteMethodResponseCommandInput, DeleteMethodResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteMethodResponseCommand";
    import { DeleteModelCommandInput, DeleteModelCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteModelCommand";
    import { DeleteRequestValidatorCommandInput, DeleteRequestValidatorCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteRequestValidatorCommand";
    import { DeleteResourceCommandInput, DeleteResourceCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteResourceCommand";
    import { DeleteRestApiCommandInput, DeleteRestApiCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteRestApiCommand";
    import { DeleteStageCommandInput, DeleteStageCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteStageCommand";
    import { DeleteUsagePlanCommandInput, DeleteUsagePlanCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteUsagePlanCommand";
    import { DeleteUsagePlanKeyCommandInput, DeleteUsagePlanKeyCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteUsagePlanKeyCommand";
    import { DeleteVpcLinkCommandInput, DeleteVpcLinkCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteVpcLinkCommand";
    import { FlushStageAuthorizersCacheCommandInput, FlushStageAuthorizersCacheCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/FlushStageAuthorizersCacheCommand";
    import { FlushStageCacheCommandInput, FlushStageCacheCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/FlushStageCacheCommand";
    import { GenerateClientCertificateCommandInput, GenerateClientCertificateCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GenerateClientCertificateCommand";
    import { GetAccountCommandInput, GetAccountCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetAccountCommand";
    import { GetApiKeyCommandInput, GetApiKeyCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetApiKeyCommand";
    import { GetApiKeysCommandInput, GetApiKeysCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetApiKeysCommand";
    import { GetAuthorizerCommandInput, GetAuthorizerCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetAuthorizerCommand";
    import { GetAuthorizersCommandInput, GetAuthorizersCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetAuthorizersCommand";
    import { GetBasePathMappingCommandInput, GetBasePathMappingCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetBasePathMappingCommand";
    import { GetBasePathMappingsCommandInput, GetBasePathMappingsCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetBasePathMappingsCommand";
    import { GetClientCertificateCommandInput, GetClientCertificateCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetClientCertificateCommand";
    import { GetClientCertificatesCommandInput, GetClientCertificatesCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetClientCertificatesCommand";
    import { GetDeploymentCommandInput, GetDeploymentCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDeploymentCommand";
    import { GetDeploymentsCommandInput, GetDeploymentsCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDeploymentsCommand";
    import { GetDocumentationPartCommandInput, GetDocumentationPartCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDocumentationPartCommand";
    import { GetDocumentationPartsCommandInput, GetDocumentationPartsCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDocumentationPartsCommand";
    import { GetDocumentationVersionCommandInput, GetDocumentationVersionCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDocumentationVersionCommand";
    import { GetDocumentationVersionsCommandInput, GetDocumentationVersionsCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDocumentationVersionsCommand";
    import { GetDomainNameCommandInput, GetDomainNameCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDomainNameCommand";
    import { GetDomainNamesCommandInput, GetDomainNamesCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDomainNamesCommand";
    import { GetExportCommandInput, GetExportCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetExportCommand";
    import { GetGatewayResponseCommandInput, GetGatewayResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetGatewayResponseCommand";
    import { GetGatewayResponsesCommandInput, GetGatewayResponsesCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetGatewayResponsesCommand";
    import { GetIntegrationCommandInput, GetIntegrationCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetIntegrationCommand";
    import { GetIntegrationResponseCommandInput, GetIntegrationResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetIntegrationResponseCommand";
    import { GetMethodCommandInput, GetMethodCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetMethodCommand";
    import { GetMethodResponseCommandInput, GetMethodResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetMethodResponseCommand";
    import { GetModelCommandInput, GetModelCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetModelCommand";
    import { GetModelsCommandInput, GetModelsCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetModelsCommand";
    import { GetModelTemplateCommandInput, GetModelTemplateCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetModelTemplateCommand";
    import { GetRequestValidatorCommandInput, GetRequestValidatorCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetRequestValidatorCommand";
    import { GetRequestValidatorsCommandInput, GetRequestValidatorsCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetRequestValidatorsCommand";
    import { GetResourceCommandInput, GetResourceCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetResourceCommand";
    import { GetResourcesCommandInput, GetResourcesCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetResourcesCommand";
    import { GetRestApiCommandInput, GetRestApiCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetRestApiCommand";
    import { GetRestApisCommandInput, GetRestApisCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetRestApisCommand";
    import { GetSdkCommandInput, GetSdkCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetSdkCommand";
    import { GetSdkTypeCommandInput, GetSdkTypeCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetSdkTypeCommand";
    import { GetSdkTypesCommandInput, GetSdkTypesCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetSdkTypesCommand";
    import { GetStageCommandInput, GetStageCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetStageCommand";
    import { GetStagesCommandInput, GetStagesCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetStagesCommand";
    import { GetTagsCommandInput, GetTagsCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetTagsCommand";
    import { GetUsageCommandInput, GetUsageCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetUsageCommand";
    import { GetUsagePlanCommandInput, GetUsagePlanCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetUsagePlanCommand";
    import { GetUsagePlanKeyCommandInput, GetUsagePlanKeyCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetUsagePlanKeyCommand";
    import { GetUsagePlanKeysCommandInput, GetUsagePlanKeysCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetUsagePlanKeysCommand";
    import { GetUsagePlansCommandInput, GetUsagePlansCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetUsagePlansCommand";
    import { GetVpcLinkCommandInput, GetVpcLinkCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetVpcLinkCommand";
    import { GetVpcLinksCommandInput, GetVpcLinksCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetVpcLinksCommand";
    import { ImportApiKeysCommandInput, ImportApiKeysCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/ImportApiKeysCommand";
    import { ImportDocumentationPartsCommandInput, ImportDocumentationPartsCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/ImportDocumentationPartsCommand";
    import { ImportRestApiCommandInput, ImportRestApiCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/ImportRestApiCommand";
    import { PutGatewayResponseCommandInput, PutGatewayResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/PutGatewayResponseCommand";
    import { PutIntegrationCommandInput, PutIntegrationCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/PutIntegrationCommand";
    import { PutIntegrationResponseCommandInput, PutIntegrationResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/PutIntegrationResponseCommand";
    import { PutMethodCommandInput, PutMethodCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/PutMethodCommand";
    import { PutMethodResponseCommandInput, PutMethodResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/PutMethodResponseCommand";
    import { PutRestApiCommandInput, PutRestApiCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/PutRestApiCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/TagResourceCommand";
    import { TestInvokeAuthorizerCommandInput, TestInvokeAuthorizerCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/TestInvokeAuthorizerCommand";
    import { TestInvokeMethodCommandInput, TestInvokeMethodCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/TestInvokeMethodCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UntagResourceCommand";
    import { UpdateAccountCommandInput, UpdateAccountCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateAccountCommand";
    import { UpdateApiKeyCommandInput, UpdateApiKeyCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateApiKeyCommand";
    import { UpdateAuthorizerCommandInput, UpdateAuthorizerCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateAuthorizerCommand";
    import { UpdateBasePathMappingCommandInput, UpdateBasePathMappingCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateBasePathMappingCommand";
    import { UpdateClientCertificateCommandInput, UpdateClientCertificateCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateClientCertificateCommand";
    import { UpdateDeploymentCommandInput, UpdateDeploymentCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateDeploymentCommand";
    import { UpdateDocumentationPartCommandInput, UpdateDocumentationPartCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateDocumentationPartCommand";
    import { UpdateDocumentationVersionCommandInput, UpdateDocumentationVersionCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateDocumentationVersionCommand";
    import { UpdateDomainNameCommandInput, UpdateDomainNameCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateDomainNameCommand";
    import { UpdateGatewayResponseCommandInput, UpdateGatewayResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateGatewayResponseCommand";
    import { UpdateIntegrationCommandInput, UpdateIntegrationCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateIntegrationCommand";
    import { UpdateIntegrationResponseCommandInput, UpdateIntegrationResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateIntegrationResponseCommand";
    import { UpdateMethodCommandInput, UpdateMethodCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateMethodCommand";
    import { UpdateMethodResponseCommandInput, UpdateMethodResponseCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateMethodResponseCommand";
    import { UpdateModelCommandInput, UpdateModelCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateModelCommand";
    import { UpdateRequestValidatorCommandInput, UpdateRequestValidatorCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateRequestValidatorCommand";
    import { UpdateResourceCommandInput, UpdateResourceCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateResourceCommand";
    import { UpdateRestApiCommandInput, UpdateRestApiCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateRestApiCommand";
    import { UpdateStageCommandInput, UpdateStageCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateStageCommand";
    import { UpdateUsageCommandInput, UpdateUsageCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateUsageCommand";
    import { UpdateUsagePlanCommandInput, UpdateUsagePlanCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateUsagePlanCommand";
    import { UpdateVpcLinkCommandInput, UpdateVpcLinkCommandOutput } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateVpcLinkCommand";
    export type ServiceInputTypes = CreateApiKeyCommandInput | CreateAuthorizerCommandInput | CreateBasePathMappingCommandInput | CreateDeploymentCommandInput | CreateDocumentationPartCommandInput | CreateDocumentationVersionCommandInput | CreateDomainNameCommandInput | CreateModelCommandInput | CreateRequestValidatorCommandInput | CreateResourceCommandInput | CreateRestApiCommandInput | CreateStageCommandInput | CreateUsagePlanCommandInput | CreateUsagePlanKeyCommandInput | CreateVpcLinkCommandInput | DeleteApiKeyCommandInput | DeleteAuthorizerCommandInput | DeleteBasePathMappingCommandInput | DeleteClientCertificateCommandInput | DeleteDeploymentCommandInput | DeleteDocumentationPartCommandInput | DeleteDocumentationVersionCommandInput | DeleteDomainNameCommandInput | DeleteGatewayResponseCommandInput | DeleteIntegrationCommandInput | DeleteIntegrationResponseCommandInput | DeleteMethodCommandInput | DeleteMethodResponseCommandInput | DeleteModelCommandInput | DeleteRequestValidatorCommandInput | DeleteResourceCommandInput | DeleteRestApiCommandInput | DeleteStageCommandInput | DeleteUsagePlanCommandInput | DeleteUsagePlanKeyCommandInput | DeleteVpcLinkCommandInput | FlushStageAuthorizersCacheCommandInput | FlushStageCacheCommandInput | GenerateClientCertificateCommandInput | GetAccountCommandInput | GetApiKeyCommandInput | GetApiKeysCommandInput | GetAuthorizerCommandInput | GetAuthorizersCommandInput | GetBasePathMappingCommandInput | GetBasePathMappingsCommandInput | GetClientCertificateCommandInput | GetClientCertificatesCommandInput | GetDeploymentCommandInput | GetDeploymentsCommandInput | GetDocumentationPartCommandInput | GetDocumentationPartsCommandInput | GetDocumentationVersionCommandInput | GetDocumentationVersionsCommandInput | GetDomainNameCommandInput | GetDomainNamesCommandInput | GetExportCommandInput | GetGatewayResponseCommandInput | GetGatewayResponsesCommandInput | GetIntegrationCommandInput | GetIntegrationResponseCommandInput | GetMethodCommandInput | GetMethodResponseCommandInput | GetModelCommandInput | GetModelTemplateCommandInput | GetModelsCommandInput | GetRequestValidatorCommandInput | GetRequestValidatorsCommandInput | GetResourceCommandInput | GetResourcesCommandInput | GetRestApiCommandInput | GetRestApisCommandInput | GetSdkCommandInput | GetSdkTypeCommandInput | GetSdkTypesCommandInput | GetStageCommandInput | GetStagesCommandInput | GetTagsCommandInput | GetUsageCommandInput | GetUsagePlanCommandInput | GetUsagePlanKeyCommandInput | GetUsagePlanKeysCommandInput | GetUsagePlansCommandInput | GetVpcLinkCommandInput | GetVpcLinksCommandInput | ImportApiKeysCommandInput | ImportDocumentationPartsCommandInput | ImportRestApiCommandInput | PutGatewayResponseCommandInput | PutIntegrationCommandInput | PutIntegrationResponseCommandInput | PutMethodCommandInput | PutMethodResponseCommandInput | PutRestApiCommandInput | TagResourceCommandInput | TestInvokeAuthorizerCommandInput | TestInvokeMethodCommandInput | UntagResourceCommandInput | UpdateAccountCommandInput | UpdateApiKeyCommandInput | UpdateAuthorizerCommandInput | UpdateBasePathMappingCommandInput | UpdateClientCertificateCommandInput | UpdateDeploymentCommandInput | UpdateDocumentationPartCommandInput | UpdateDocumentationVersionCommandInput | UpdateDomainNameCommandInput | UpdateGatewayResponseCommandInput | UpdateIntegrationCommandInput | UpdateIntegrationResponseCommandInput | UpdateMethodCommandInput | UpdateMethodResponseCommandInput | UpdateModelCommandInput | UpdateRequestValidatorCommandInput | UpdateResourceCommandInput | UpdateRestApiCommandInput | UpdateStageCommandInput | UpdateUsageCommandInput | UpdateUsagePlanCommandInput | UpdateVpcLinkCommandInput;
    export type ServiceOutputTypes = CreateApiKeyCommandOutput | CreateAuthorizerCommandOutput | CreateBasePathMappingCommandOutput | CreateDeploymentCommandOutput | CreateDocumentationPartCommandOutput | CreateDocumentationVersionCommandOutput | CreateDomainNameCommandOutput | CreateModelCommandOutput | CreateRequestValidatorCommandOutput | CreateResourceCommandOutput | CreateRestApiCommandOutput | CreateStageCommandOutput | CreateUsagePlanCommandOutput | CreateUsagePlanKeyCommandOutput | CreateVpcLinkCommandOutput | DeleteApiKeyCommandOutput | DeleteAuthorizerCommandOutput | DeleteBasePathMappingCommandOutput | DeleteClientCertificateCommandOutput | DeleteDeploymentCommandOutput | DeleteDocumentationPartCommandOutput | DeleteDocumentationVersionCommandOutput | DeleteDomainNameCommandOutput | DeleteGatewayResponseCommandOutput | DeleteIntegrationCommandOutput | DeleteIntegrationResponseCommandOutput | DeleteMethodCommandOutput | DeleteMethodResponseCommandOutput | DeleteModelCommandOutput | DeleteRequestValidatorCommandOutput | DeleteResourceCommandOutput | DeleteRestApiCommandOutput | DeleteStageCommandOutput | DeleteUsagePlanCommandOutput | DeleteUsagePlanKeyCommandOutput | DeleteVpcLinkCommandOutput | FlushStageAuthorizersCacheCommandOutput | FlushStageCacheCommandOutput | GenerateClientCertificateCommandOutput | GetAccountCommandOutput | GetApiKeyCommandOutput | GetApiKeysCommandOutput | GetAuthorizerCommandOutput | GetAuthorizersCommandOutput | GetBasePathMappingCommandOutput | GetBasePathMappingsCommandOutput | GetClientCertificateCommandOutput | GetClientCertificatesCommandOutput | GetDeploymentCommandOutput | GetDeploymentsCommandOutput | GetDocumentationPartCommandOutput | GetDocumentationPartsCommandOutput | GetDocumentationVersionCommandOutput | GetDocumentationVersionsCommandOutput | GetDomainNameCommandOutput | GetDomainNamesCommandOutput | GetExportCommandOutput | GetGatewayResponseCommandOutput | GetGatewayResponsesCommandOutput | GetIntegrationCommandOutput | GetIntegrationResponseCommandOutput | GetMethodCommandOutput | GetMethodResponseCommandOutput | GetModelCommandOutput | GetModelTemplateCommandOutput | GetModelsCommandOutput | GetRequestValidatorCommandOutput | GetRequestValidatorsCommandOutput | GetResourceCommandOutput | GetResourcesCommandOutput | GetRestApiCommandOutput | GetRestApisCommandOutput | GetSdkCommandOutput | GetSdkTypeCommandOutput | GetSdkTypesCommandOutput | GetStageCommandOutput | GetStagesCommandOutput | GetTagsCommandOutput | GetUsageCommandOutput | GetUsagePlanCommandOutput | GetUsagePlanKeyCommandOutput | GetUsagePlanKeysCommandOutput | GetUsagePlansCommandOutput | GetVpcLinkCommandOutput | GetVpcLinksCommandOutput | ImportApiKeysCommandOutput | ImportDocumentationPartsCommandOutput | ImportRestApiCommandOutput | PutGatewayResponseCommandOutput | PutIntegrationCommandOutput | PutIntegrationResponseCommandOutput | PutMethodCommandOutput | PutMethodResponseCommandOutput | PutRestApiCommandOutput | TagResourceCommandOutput | TestInvokeAuthorizerCommandOutput | TestInvokeMethodCommandOutput | UntagResourceCommandOutput | UpdateAccountCommandOutput | UpdateApiKeyCommandOutput | UpdateAuthorizerCommandOutput | UpdateBasePathMappingCommandOutput | UpdateClientCertificateCommandOutput | UpdateDeploymentCommandOutput | UpdateDocumentationPartCommandOutput | UpdateDocumentationVersionCommandOutput | UpdateDomainNameCommandOutput | UpdateGatewayResponseCommandOutput | UpdateIntegrationCommandOutput | UpdateIntegrationResponseCommandOutput | UpdateMethodCommandOutput | UpdateMethodResponseCommandOutput | UpdateModelCommandOutput | UpdateRequestValidatorCommandOutput | UpdateResourceCommandOutput | UpdateRestApiCommandOutput | UpdateStageCommandOutput | UpdateUsageCommandOutput | UpdateUsagePlanCommandOutput | UpdateVpcLinkCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type APIGatewayClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of APIGatewayClient class constructor that set the region, credentials and other options.
        */
    export interface APIGatewayClientConfig extends APIGatewayClientConfigType {
    }
    type APIGatewayClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of APIGatewayClient class. This is resolved and normalized from the {@link APIGatewayClientConfig | constructor configuration interface}.
        */
    export interface APIGatewayClientResolvedConfig extends APIGatewayClientResolvedConfigType {
    }
    /**
        * <fullname>Amazon API Gateway</fullname>
        *         <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
        */
    export class APIGatewayClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, APIGatewayClientResolvedConfig> {
            /**
                * The resolved configuration of APIGatewayClient class. This is resolved and normalized from the {@link APIGatewayClientConfig | constructor configuration interface}.
                */
            readonly config: APIGatewayClientResolvedConfig;
            constructor(configuration: APIGatewayClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateApiKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { ApiKey, CreateApiKeyRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface CreateApiKeyCommandInput extends CreateApiKeyRequest {
    }
    export interface CreateApiKeyCommandOutput extends ApiKey, __MetadataBearer {
    }
    /**
        * <p>Create an ApiKey resource. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, CreateApiKeyCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, CreateApiKeyCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new CreateApiKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateApiKeyCommandInput} for command's `input` shape.
        * @see {@link CreateApiKeyCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class CreateApiKeyCommand extends $Command<CreateApiKeyCommandInput, CreateApiKeyCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: CreateApiKeyCommandInput;
            constructor(input: CreateApiKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateApiKeyCommandInput, CreateApiKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateAuthorizerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { Authorizer, CreateAuthorizerRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface CreateAuthorizerCommandInput extends CreateAuthorizerRequest {
    }
    export interface CreateAuthorizerCommandOutput extends Authorizer, __MetadataBearer {
    }
    /**
        * <p>Adds a new Authorizer resource to an existing RestApi resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, CreateAuthorizerCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, CreateAuthorizerCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new CreateAuthorizerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAuthorizerCommandInput} for command's `input` shape.
        * @see {@link CreateAuthorizerCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class CreateAuthorizerCommand extends $Command<CreateAuthorizerCommandInput, CreateAuthorizerCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: CreateAuthorizerCommandInput;
            constructor(input: CreateAuthorizerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAuthorizerCommandInput, CreateAuthorizerCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateBasePathMappingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { BasePathMapping, CreateBasePathMappingRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface CreateBasePathMappingCommandInput extends CreateBasePathMappingRequest {
    }
    export interface CreateBasePathMappingCommandOutput extends BasePathMapping, __MetadataBearer {
    }
    /**
        * <p>Creates a new BasePathMapping resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, CreateBasePathMappingCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, CreateBasePathMappingCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new CreateBasePathMappingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateBasePathMappingCommandInput} for command's `input` shape.
        * @see {@link CreateBasePathMappingCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class CreateBasePathMappingCommand extends $Command<CreateBasePathMappingCommandInput, CreateBasePathMappingCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: CreateBasePathMappingCommandInput;
            constructor(input: CreateBasePathMappingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateBasePathMappingCommandInput, CreateBasePathMappingCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateDeploymentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { CreateDeploymentRequest, Deployment } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface CreateDeploymentCommandInput extends CreateDeploymentRequest {
    }
    export interface CreateDeploymentCommandOutput extends Deployment, __MetadataBearer {
    }
    /**
        * <p>Creates a Deployment resource, which makes a specified RestApi callable over the internet.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, CreateDeploymentCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, CreateDeploymentCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new CreateDeploymentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDeploymentCommandInput} for command's `input` shape.
        * @see {@link CreateDeploymentCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class CreateDeploymentCommand extends $Command<CreateDeploymentCommandInput, CreateDeploymentCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: CreateDeploymentCommandInput;
            constructor(input: CreateDeploymentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDeploymentCommandInput, CreateDeploymentCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateDocumentationPartCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { CreateDocumentationPartRequest, DocumentationPart } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface CreateDocumentationPartCommandInput extends CreateDocumentationPartRequest {
    }
    export interface CreateDocumentationPartCommandOutput extends DocumentationPart, __MetadataBearer {
    }
    /**
        * <p>Creates a documentation part.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, CreateDocumentationPartCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, CreateDocumentationPartCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new CreateDocumentationPartCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDocumentationPartCommandInput} for command's `input` shape.
        * @see {@link CreateDocumentationPartCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class CreateDocumentationPartCommand extends $Command<CreateDocumentationPartCommandInput, CreateDocumentationPartCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: CreateDocumentationPartCommandInput;
            constructor(input: CreateDocumentationPartCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDocumentationPartCommandInput, CreateDocumentationPartCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateDocumentationVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { CreateDocumentationVersionRequest, DocumentationVersion } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface CreateDocumentationVersionCommandInput extends CreateDocumentationVersionRequest {
    }
    export interface CreateDocumentationVersionCommandOutput extends DocumentationVersion, __MetadataBearer {
    }
    /**
        * <p>Creates a documentation version</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, CreateDocumentationVersionCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, CreateDocumentationVersionCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new CreateDocumentationVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDocumentationVersionCommandInput} for command's `input` shape.
        * @see {@link CreateDocumentationVersionCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class CreateDocumentationVersionCommand extends $Command<CreateDocumentationVersionCommandInput, CreateDocumentationVersionCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: CreateDocumentationVersionCommandInput;
            constructor(input: CreateDocumentationVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDocumentationVersionCommandInput, CreateDocumentationVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateDomainNameCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { CreateDomainNameRequest, DomainName } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface CreateDomainNameCommandInput extends CreateDomainNameRequest {
    }
    export interface CreateDomainNameCommandOutput extends DomainName, __MetadataBearer {
    }
    /**
        * <p>Creates a new domain name.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, CreateDomainNameCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, CreateDomainNameCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new CreateDomainNameCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDomainNameCommandInput} for command's `input` shape.
        * @see {@link CreateDomainNameCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class CreateDomainNameCommand extends $Command<CreateDomainNameCommandInput, CreateDomainNameCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: CreateDomainNameCommandInput;
            constructor(input: CreateDomainNameCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDomainNameCommandInput, CreateDomainNameCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { CreateModelRequest, Model } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface CreateModelCommandInput extends CreateModelRequest {
    }
    export interface CreateModelCommandOutput extends Model, __MetadataBearer {
    }
    /**
        * <p>Adds a new Model resource to an existing RestApi resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, CreateModelCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, CreateModelCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new CreateModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateModelCommandInput} for command's `input` shape.
        * @see {@link CreateModelCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class CreateModelCommand extends $Command<CreateModelCommandInput, CreateModelCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: CreateModelCommandInput;
            constructor(input: CreateModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateModelCommandInput, CreateModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateRequestValidatorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { CreateRequestValidatorRequest, RequestValidator } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface CreateRequestValidatorCommandInput extends CreateRequestValidatorRequest {
    }
    export interface CreateRequestValidatorCommandOutput extends RequestValidator, __MetadataBearer {
    }
    /**
        * <p>Creates a RequestValidator of a given RestApi.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, CreateRequestValidatorCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, CreateRequestValidatorCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new CreateRequestValidatorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRequestValidatorCommandInput} for command's `input` shape.
        * @see {@link CreateRequestValidatorCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class CreateRequestValidatorCommand extends $Command<CreateRequestValidatorCommandInput, CreateRequestValidatorCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: CreateRequestValidatorCommandInput;
            constructor(input: CreateRequestValidatorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRequestValidatorCommandInput, CreateRequestValidatorCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { CreateResourceRequest, Resource } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface CreateResourceCommandInput extends CreateResourceRequest {
    }
    export interface CreateResourceCommandOutput extends Resource, __MetadataBearer {
    }
    /**
        * <p>Creates a Resource resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, CreateResourceCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, CreateResourceCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new CreateResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateResourceCommandInput} for command's `input` shape.
        * @see {@link CreateResourceCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class CreateResourceCommand extends $Command<CreateResourceCommandInput, CreateResourceCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: CreateResourceCommandInput;
            constructor(input: CreateResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateResourceCommandInput, CreateResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateRestApiCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { CreateRestApiRequest, RestApi } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface CreateRestApiCommandInput extends CreateRestApiRequest {
    }
    export interface CreateRestApiCommandOutput extends RestApi, __MetadataBearer {
    }
    /**
        * <p>Creates a new RestApi resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, CreateRestApiCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, CreateRestApiCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new CreateRestApiCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRestApiCommandInput} for command's `input` shape.
        * @see {@link CreateRestApiCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class CreateRestApiCommand extends $Command<CreateRestApiCommandInput, CreateRestApiCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: CreateRestApiCommandInput;
            constructor(input: CreateRestApiCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRestApiCommandInput, CreateRestApiCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateStageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { CreateStageRequest, Stage } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface CreateStageCommandInput extends CreateStageRequest {
    }
    export interface CreateStageCommandOutput extends Stage, __MetadataBearer {
    }
    /**
        * <p>Creates a new Stage resource that references a pre-existing Deployment for the API. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, CreateStageCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, CreateStageCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new CreateStageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateStageCommandInput} for command's `input` shape.
        * @see {@link CreateStageCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class CreateStageCommand extends $Command<CreateStageCommandInput, CreateStageCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: CreateStageCommandInput;
            constructor(input: CreateStageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateStageCommandInput, CreateStageCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateUsagePlanCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { CreateUsagePlanRequest, UsagePlan } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface CreateUsagePlanCommandInput extends CreateUsagePlanRequest {
    }
    export interface CreateUsagePlanCommandOutput extends UsagePlan, __MetadataBearer {
    }
    /**
        * <p>Creates a usage plan with the throttle and quota limits, as well as the associated API stages, specified in the payload. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, CreateUsagePlanCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, CreateUsagePlanCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new CreateUsagePlanCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateUsagePlanCommandInput} for command's `input` shape.
        * @see {@link CreateUsagePlanCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class CreateUsagePlanCommand extends $Command<CreateUsagePlanCommandInput, CreateUsagePlanCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: CreateUsagePlanCommandInput;
            constructor(input: CreateUsagePlanCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateUsagePlanCommandInput, CreateUsagePlanCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateUsagePlanKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { CreateUsagePlanKeyRequest, UsagePlanKey } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface CreateUsagePlanKeyCommandInput extends CreateUsagePlanKeyRequest {
    }
    export interface CreateUsagePlanKeyCommandOutput extends UsagePlanKey, __MetadataBearer {
    }
    /**
        * <p>Creates a usage plan key for adding an existing API key to a usage plan.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, CreateUsagePlanKeyCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, CreateUsagePlanKeyCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new CreateUsagePlanKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateUsagePlanKeyCommandInput} for command's `input` shape.
        * @see {@link CreateUsagePlanKeyCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class CreateUsagePlanKeyCommand extends $Command<CreateUsagePlanKeyCommandInput, CreateUsagePlanKeyCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: CreateUsagePlanKeyCommandInput;
            constructor(input: CreateUsagePlanKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateUsagePlanKeyCommandInput, CreateUsagePlanKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/CreateVpcLinkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { CreateVpcLinkRequest, VpcLink } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface CreateVpcLinkCommandInput extends CreateVpcLinkRequest {
    }
    export interface CreateVpcLinkCommandOutput extends VpcLink, __MetadataBearer {
    }
    /**
        * <p>Creates a VPC link, under the caller's account in a selected region, in an asynchronous operation that typically takes 2-4 minutes to complete and become operational. The caller must have permissions to create and update VPC Endpoint services.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, CreateVpcLinkCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, CreateVpcLinkCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new CreateVpcLinkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateVpcLinkCommandInput} for command's `input` shape.
        * @see {@link CreateVpcLinkCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class CreateVpcLinkCommand extends $Command<CreateVpcLinkCommandInput, CreateVpcLinkCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: CreateVpcLinkCommandInput;
            constructor(input: CreateVpcLinkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateVpcLinkCommandInput, CreateVpcLinkCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteApiKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DeleteApiKeyRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface DeleteApiKeyCommandInput extends DeleteApiKeyRequest {
    }
    export interface DeleteApiKeyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the ApiKey resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, DeleteApiKeyCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, DeleteApiKeyCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new DeleteApiKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteApiKeyCommandInput} for command's `input` shape.
        * @see {@link DeleteApiKeyCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class DeleteApiKeyCommand extends $Command<DeleteApiKeyCommandInput, DeleteApiKeyCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: DeleteApiKeyCommandInput;
            constructor(input: DeleteApiKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteApiKeyCommandInput, DeleteApiKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteAuthorizerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DeleteAuthorizerRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface DeleteAuthorizerCommandInput extends DeleteAuthorizerRequest {
    }
    export interface DeleteAuthorizerCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an existing Authorizer resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, DeleteAuthorizerCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, DeleteAuthorizerCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new DeleteAuthorizerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAuthorizerCommandInput} for command's `input` shape.
        * @see {@link DeleteAuthorizerCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class DeleteAuthorizerCommand extends $Command<DeleteAuthorizerCommandInput, DeleteAuthorizerCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: DeleteAuthorizerCommandInput;
            constructor(input: DeleteAuthorizerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAuthorizerCommandInput, DeleteAuthorizerCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteBasePathMappingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DeleteBasePathMappingRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface DeleteBasePathMappingCommandInput extends DeleteBasePathMappingRequest {
    }
    export interface DeleteBasePathMappingCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the BasePathMapping resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, DeleteBasePathMappingCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, DeleteBasePathMappingCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new DeleteBasePathMappingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteBasePathMappingCommandInput} for command's `input` shape.
        * @see {@link DeleteBasePathMappingCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class DeleteBasePathMappingCommand extends $Command<DeleteBasePathMappingCommandInput, DeleteBasePathMappingCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: DeleteBasePathMappingCommandInput;
            constructor(input: DeleteBasePathMappingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteBasePathMappingCommandInput, DeleteBasePathMappingCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteClientCertificateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DeleteClientCertificateRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface DeleteClientCertificateCommandInput extends DeleteClientCertificateRequest {
    }
    export interface DeleteClientCertificateCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the ClientCertificate resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, DeleteClientCertificateCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, DeleteClientCertificateCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new DeleteClientCertificateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteClientCertificateCommandInput} for command's `input` shape.
        * @see {@link DeleteClientCertificateCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class DeleteClientCertificateCommand extends $Command<DeleteClientCertificateCommandInput, DeleteClientCertificateCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: DeleteClientCertificateCommandInput;
            constructor(input: DeleteClientCertificateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteClientCertificateCommandInput, DeleteClientCertificateCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteDeploymentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DeleteDeploymentRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface DeleteDeploymentCommandInput extends DeleteDeploymentRequest {
    }
    export interface DeleteDeploymentCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a Deployment resource. Deleting a deployment will only succeed if there are no Stage resources associated with it.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, DeleteDeploymentCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, DeleteDeploymentCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new DeleteDeploymentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDeploymentCommandInput} for command's `input` shape.
        * @see {@link DeleteDeploymentCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class DeleteDeploymentCommand extends $Command<DeleteDeploymentCommandInput, DeleteDeploymentCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: DeleteDeploymentCommandInput;
            constructor(input: DeleteDeploymentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDeploymentCommandInput, DeleteDeploymentCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteDocumentationPartCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DeleteDocumentationPartRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface DeleteDocumentationPartCommandInput extends DeleteDocumentationPartRequest {
    }
    export interface DeleteDocumentationPartCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a documentation part</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, DeleteDocumentationPartCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, DeleteDocumentationPartCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new DeleteDocumentationPartCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDocumentationPartCommandInput} for command's `input` shape.
        * @see {@link DeleteDocumentationPartCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class DeleteDocumentationPartCommand extends $Command<DeleteDocumentationPartCommandInput, DeleteDocumentationPartCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: DeleteDocumentationPartCommandInput;
            constructor(input: DeleteDocumentationPartCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDocumentationPartCommandInput, DeleteDocumentationPartCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteDocumentationVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DeleteDocumentationVersionRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface DeleteDocumentationVersionCommandInput extends DeleteDocumentationVersionRequest {
    }
    export interface DeleteDocumentationVersionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a documentation version.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, DeleteDocumentationVersionCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, DeleteDocumentationVersionCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new DeleteDocumentationVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDocumentationVersionCommandInput} for command's `input` shape.
        * @see {@link DeleteDocumentationVersionCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class DeleteDocumentationVersionCommand extends $Command<DeleteDocumentationVersionCommandInput, DeleteDocumentationVersionCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: DeleteDocumentationVersionCommandInput;
            constructor(input: DeleteDocumentationVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDocumentationVersionCommandInput, DeleteDocumentationVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteDomainNameCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DeleteDomainNameRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface DeleteDomainNameCommandInput extends DeleteDomainNameRequest {
    }
    export interface DeleteDomainNameCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the DomainName resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, DeleteDomainNameCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, DeleteDomainNameCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new DeleteDomainNameCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDomainNameCommandInput} for command's `input` shape.
        * @see {@link DeleteDomainNameCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class DeleteDomainNameCommand extends $Command<DeleteDomainNameCommandInput, DeleteDomainNameCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: DeleteDomainNameCommandInput;
            constructor(input: DeleteDomainNameCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDomainNameCommandInput, DeleteDomainNameCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteGatewayResponseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DeleteGatewayResponseRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface DeleteGatewayResponseCommandInput extends DeleteGatewayResponseRequest {
    }
    export interface DeleteGatewayResponseCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Clears any customization of a GatewayResponse of a specified response type on the given RestApi and resets it with the default settings.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, DeleteGatewayResponseCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, DeleteGatewayResponseCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new DeleteGatewayResponseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteGatewayResponseCommandInput} for command's `input` shape.
        * @see {@link DeleteGatewayResponseCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class DeleteGatewayResponseCommand extends $Command<DeleteGatewayResponseCommandInput, DeleteGatewayResponseCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: DeleteGatewayResponseCommandInput;
            constructor(input: DeleteGatewayResponseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteGatewayResponseCommandInput, DeleteGatewayResponseCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteIntegrationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DeleteIntegrationRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface DeleteIntegrationCommandInput extends DeleteIntegrationRequest {
    }
    export interface DeleteIntegrationCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Represents a delete integration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, DeleteIntegrationCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, DeleteIntegrationCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new DeleteIntegrationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteIntegrationCommandInput} for command's `input` shape.
        * @see {@link DeleteIntegrationCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class DeleteIntegrationCommand extends $Command<DeleteIntegrationCommandInput, DeleteIntegrationCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: DeleteIntegrationCommandInput;
            constructor(input: DeleteIntegrationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteIntegrationCommandInput, DeleteIntegrationCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteIntegrationResponseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DeleteIntegrationResponseRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface DeleteIntegrationResponseCommandInput extends DeleteIntegrationResponseRequest {
    }
    export interface DeleteIntegrationResponseCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Represents a delete integration response.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, DeleteIntegrationResponseCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, DeleteIntegrationResponseCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new DeleteIntegrationResponseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteIntegrationResponseCommandInput} for command's `input` shape.
        * @see {@link DeleteIntegrationResponseCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class DeleteIntegrationResponseCommand extends $Command<DeleteIntegrationResponseCommandInput, DeleteIntegrationResponseCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: DeleteIntegrationResponseCommandInput;
            constructor(input: DeleteIntegrationResponseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteIntegrationResponseCommandInput, DeleteIntegrationResponseCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteMethodCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DeleteMethodRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface DeleteMethodCommandInput extends DeleteMethodRequest {
    }
    export interface DeleteMethodCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an existing Method resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, DeleteMethodCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, DeleteMethodCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new DeleteMethodCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteMethodCommandInput} for command's `input` shape.
        * @see {@link DeleteMethodCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class DeleteMethodCommand extends $Command<DeleteMethodCommandInput, DeleteMethodCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: DeleteMethodCommandInput;
            constructor(input: DeleteMethodCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteMethodCommandInput, DeleteMethodCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteMethodResponseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DeleteMethodResponseRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface DeleteMethodResponseCommandInput extends DeleteMethodResponseRequest {
    }
    export interface DeleteMethodResponseCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an existing MethodResponse resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, DeleteMethodResponseCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, DeleteMethodResponseCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new DeleteMethodResponseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteMethodResponseCommandInput} for command's `input` shape.
        * @see {@link DeleteMethodResponseCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class DeleteMethodResponseCommand extends $Command<DeleteMethodResponseCommandInput, DeleteMethodResponseCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: DeleteMethodResponseCommandInput;
            constructor(input: DeleteMethodResponseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteMethodResponseCommandInput, DeleteMethodResponseCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DeleteModelRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface DeleteModelCommandInput extends DeleteModelRequest {
    }
    export interface DeleteModelCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a model.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, DeleteModelCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, DeleteModelCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new DeleteModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteModelCommandInput} for command's `input` shape.
        * @see {@link DeleteModelCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class DeleteModelCommand extends $Command<DeleteModelCommandInput, DeleteModelCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: DeleteModelCommandInput;
            constructor(input: DeleteModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteModelCommandInput, DeleteModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteRequestValidatorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DeleteRequestValidatorRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface DeleteRequestValidatorCommandInput extends DeleteRequestValidatorRequest {
    }
    export interface DeleteRequestValidatorCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a RequestValidator of a given RestApi.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, DeleteRequestValidatorCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, DeleteRequestValidatorCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new DeleteRequestValidatorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRequestValidatorCommandInput} for command's `input` shape.
        * @see {@link DeleteRequestValidatorCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class DeleteRequestValidatorCommand extends $Command<DeleteRequestValidatorCommandInput, DeleteRequestValidatorCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: DeleteRequestValidatorCommandInput;
            constructor(input: DeleteRequestValidatorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRequestValidatorCommandInput, DeleteRequestValidatorCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DeleteResourceRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface DeleteResourceCommandInput extends DeleteResourceRequest {
    }
    export interface DeleteResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a Resource resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, DeleteResourceCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, DeleteResourceCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new DeleteResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteResourceCommandInput} for command's `input` shape.
        * @see {@link DeleteResourceCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class DeleteResourceCommand extends $Command<DeleteResourceCommandInput, DeleteResourceCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: DeleteResourceCommandInput;
            constructor(input: DeleteResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteResourceCommandInput, DeleteResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteRestApiCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DeleteRestApiRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface DeleteRestApiCommandInput extends DeleteRestApiRequest {
    }
    export interface DeleteRestApiCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, DeleteRestApiCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, DeleteRestApiCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new DeleteRestApiCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRestApiCommandInput} for command's `input` shape.
        * @see {@link DeleteRestApiCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class DeleteRestApiCommand extends $Command<DeleteRestApiCommandInput, DeleteRestApiCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: DeleteRestApiCommandInput;
            constructor(input: DeleteRestApiCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRestApiCommandInput, DeleteRestApiCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteStageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DeleteStageRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface DeleteStageCommandInput extends DeleteStageRequest {
    }
    export interface DeleteStageCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a Stage resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, DeleteStageCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, DeleteStageCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new DeleteStageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteStageCommandInput} for command's `input` shape.
        * @see {@link DeleteStageCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class DeleteStageCommand extends $Command<DeleteStageCommandInput, DeleteStageCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: DeleteStageCommandInput;
            constructor(input: DeleteStageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteStageCommandInput, DeleteStageCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteUsagePlanCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DeleteUsagePlanRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface DeleteUsagePlanCommandInput extends DeleteUsagePlanRequest {
    }
    export interface DeleteUsagePlanCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a usage plan of a given plan Id.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, DeleteUsagePlanCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, DeleteUsagePlanCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new DeleteUsagePlanCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteUsagePlanCommandInput} for command's `input` shape.
        * @see {@link DeleteUsagePlanCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class DeleteUsagePlanCommand extends $Command<DeleteUsagePlanCommandInput, DeleteUsagePlanCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: DeleteUsagePlanCommandInput;
            constructor(input: DeleteUsagePlanCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteUsagePlanCommandInput, DeleteUsagePlanCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteUsagePlanKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DeleteUsagePlanKeyRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface DeleteUsagePlanKeyCommandInput extends DeleteUsagePlanKeyRequest {
    }
    export interface DeleteUsagePlanKeyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a usage plan key  and remove the underlying API key from the associated usage plan.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, DeleteUsagePlanKeyCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, DeleteUsagePlanKeyCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new DeleteUsagePlanKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteUsagePlanKeyCommandInput} for command's `input` shape.
        * @see {@link DeleteUsagePlanKeyCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class DeleteUsagePlanKeyCommand extends $Command<DeleteUsagePlanKeyCommandInput, DeleteUsagePlanKeyCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: DeleteUsagePlanKeyCommandInput;
            constructor(input: DeleteUsagePlanKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteUsagePlanKeyCommandInput, DeleteUsagePlanKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/DeleteVpcLinkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DeleteVpcLinkRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface DeleteVpcLinkCommandInput extends DeleteVpcLinkRequest {
    }
    export interface DeleteVpcLinkCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an existing VpcLink of a specified identifier.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, DeleteVpcLinkCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, DeleteVpcLinkCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new DeleteVpcLinkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteVpcLinkCommandInput} for command's `input` shape.
        * @see {@link DeleteVpcLinkCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class DeleteVpcLinkCommand extends $Command<DeleteVpcLinkCommandInput, DeleteVpcLinkCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: DeleteVpcLinkCommandInput;
            constructor(input: DeleteVpcLinkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteVpcLinkCommandInput, DeleteVpcLinkCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/FlushStageAuthorizersCacheCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { FlushStageAuthorizersCacheRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface FlushStageAuthorizersCacheCommandInput extends FlushStageAuthorizersCacheRequest {
    }
    export interface FlushStageAuthorizersCacheCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Flushes all authorizer cache entries on a stage.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, FlushStageAuthorizersCacheCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, FlushStageAuthorizersCacheCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new FlushStageAuthorizersCacheCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link FlushStageAuthorizersCacheCommandInput} for command's `input` shape.
        * @see {@link FlushStageAuthorizersCacheCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class FlushStageAuthorizersCacheCommand extends $Command<FlushStageAuthorizersCacheCommandInput, FlushStageAuthorizersCacheCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: FlushStageAuthorizersCacheCommandInput;
            constructor(input: FlushStageAuthorizersCacheCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<FlushStageAuthorizersCacheCommandInput, FlushStageAuthorizersCacheCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/FlushStageCacheCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { FlushStageCacheRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface FlushStageCacheCommandInput extends FlushStageCacheRequest {
    }
    export interface FlushStageCacheCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Flushes a stage's cache.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, FlushStageCacheCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, FlushStageCacheCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new FlushStageCacheCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link FlushStageCacheCommandInput} for command's `input` shape.
        * @see {@link FlushStageCacheCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class FlushStageCacheCommand extends $Command<FlushStageCacheCommandInput, FlushStageCacheCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: FlushStageCacheCommandInput;
            constructor(input: FlushStageCacheCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<FlushStageCacheCommandInput, FlushStageCacheCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GenerateClientCertificateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { ClientCertificate, GenerateClientCertificateRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GenerateClientCertificateCommandInput extends GenerateClientCertificateRequest {
    }
    export interface GenerateClientCertificateCommandOutput extends ClientCertificate, __MetadataBearer {
    }
    /**
        * <p>Generates a ClientCertificate resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GenerateClientCertificateCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GenerateClientCertificateCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GenerateClientCertificateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GenerateClientCertificateCommandInput} for command's `input` shape.
        * @see {@link GenerateClientCertificateCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GenerateClientCertificateCommand extends $Command<GenerateClientCertificateCommandInput, GenerateClientCertificateCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GenerateClientCertificateCommandInput;
            constructor(input: GenerateClientCertificateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GenerateClientCertificateCommandInput, GenerateClientCertificateCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { Account, GetAccountRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetAccountCommandInput extends GetAccountRequest {
    }
    export interface GetAccountCommandOutput extends Account, __MetadataBearer {
    }
    /**
        * <p>Gets information about the current Account resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetAccountCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetAccountCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAccountCommandInput} for command's `input` shape.
        * @see {@link GetAccountCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetAccountCommand extends $Command<GetAccountCommandInput, GetAccountCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetAccountCommandInput;
            constructor(input: GetAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAccountCommandInput, GetAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetApiKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { ApiKey, GetApiKeyRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetApiKeyCommandInput extends GetApiKeyRequest {
    }
    export interface GetApiKeyCommandOutput extends ApiKey, __MetadataBearer {
    }
    /**
        * <p>Gets information about the current ApiKey resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetApiKeyCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetApiKeyCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetApiKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetApiKeyCommandInput} for command's `input` shape.
        * @see {@link GetApiKeyCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetApiKeyCommand extends $Command<GetApiKeyCommandInput, GetApiKeyCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetApiKeyCommandInput;
            constructor(input: GetApiKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetApiKeyCommandInput, GetApiKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetApiKeysCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { ApiKeys, GetApiKeysRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetApiKeysCommandInput extends GetApiKeysRequest {
    }
    export interface GetApiKeysCommandOutput extends ApiKeys, __MetadataBearer {
    }
    /**
        * <p>Gets information about the current ApiKeys resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetApiKeysCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetApiKeysCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetApiKeysCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetApiKeysCommandInput} for command's `input` shape.
        * @see {@link GetApiKeysCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetApiKeysCommand extends $Command<GetApiKeysCommandInput, GetApiKeysCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetApiKeysCommandInput;
            constructor(input: GetApiKeysCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetApiKeysCommandInput, GetApiKeysCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetAuthorizerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { Authorizer, GetAuthorizerRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetAuthorizerCommandInput extends GetAuthorizerRequest {
    }
    export interface GetAuthorizerCommandOutput extends Authorizer, __MetadataBearer {
    }
    /**
        * <p>Describe an existing Authorizer resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetAuthorizerCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetAuthorizerCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetAuthorizerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAuthorizerCommandInput} for command's `input` shape.
        * @see {@link GetAuthorizerCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetAuthorizerCommand extends $Command<GetAuthorizerCommandInput, GetAuthorizerCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetAuthorizerCommandInput;
            constructor(input: GetAuthorizerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAuthorizerCommandInput, GetAuthorizerCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetAuthorizersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { Authorizers, GetAuthorizersRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetAuthorizersCommandInput extends GetAuthorizersRequest {
    }
    export interface GetAuthorizersCommandOutput extends Authorizers, __MetadataBearer {
    }
    /**
        * <p>Describe an existing Authorizers resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetAuthorizersCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetAuthorizersCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetAuthorizersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAuthorizersCommandInput} for command's `input` shape.
        * @see {@link GetAuthorizersCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetAuthorizersCommand extends $Command<GetAuthorizersCommandInput, GetAuthorizersCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetAuthorizersCommandInput;
            constructor(input: GetAuthorizersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAuthorizersCommandInput, GetAuthorizersCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetBasePathMappingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { BasePathMapping, GetBasePathMappingRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetBasePathMappingCommandInput extends GetBasePathMappingRequest {
    }
    export interface GetBasePathMappingCommandOutput extends BasePathMapping, __MetadataBearer {
    }
    /**
        * <p>Describe a BasePathMapping resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetBasePathMappingCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetBasePathMappingCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetBasePathMappingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetBasePathMappingCommandInput} for command's `input` shape.
        * @see {@link GetBasePathMappingCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetBasePathMappingCommand extends $Command<GetBasePathMappingCommandInput, GetBasePathMappingCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetBasePathMappingCommandInput;
            constructor(input: GetBasePathMappingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetBasePathMappingCommandInput, GetBasePathMappingCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetBasePathMappingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { BasePathMappings, GetBasePathMappingsRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetBasePathMappingsCommandInput extends GetBasePathMappingsRequest {
    }
    export interface GetBasePathMappingsCommandOutput extends BasePathMappings, __MetadataBearer {
    }
    /**
        * <p>Represents a collection of BasePathMapping resources.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetBasePathMappingsCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetBasePathMappingsCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetBasePathMappingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetBasePathMappingsCommandInput} for command's `input` shape.
        * @see {@link GetBasePathMappingsCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetBasePathMappingsCommand extends $Command<GetBasePathMappingsCommandInput, GetBasePathMappingsCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetBasePathMappingsCommandInput;
            constructor(input: GetBasePathMappingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetBasePathMappingsCommandInput, GetBasePathMappingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetClientCertificateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { ClientCertificate, GetClientCertificateRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetClientCertificateCommandInput extends GetClientCertificateRequest {
    }
    export interface GetClientCertificateCommandOutput extends ClientCertificate, __MetadataBearer {
    }
    /**
        * <p>Gets information about the current ClientCertificate resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetClientCertificateCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetClientCertificateCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetClientCertificateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetClientCertificateCommandInput} for command's `input` shape.
        * @see {@link GetClientCertificateCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetClientCertificateCommand extends $Command<GetClientCertificateCommandInput, GetClientCertificateCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetClientCertificateCommandInput;
            constructor(input: GetClientCertificateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetClientCertificateCommandInput, GetClientCertificateCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetClientCertificatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { ClientCertificates, GetClientCertificatesRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetClientCertificatesCommandInput extends GetClientCertificatesRequest {
    }
    export interface GetClientCertificatesCommandOutput extends ClientCertificates, __MetadataBearer {
    }
    /**
        * <p>Gets a collection of ClientCertificate resources.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetClientCertificatesCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetClientCertificatesCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetClientCertificatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetClientCertificatesCommandInput} for command's `input` shape.
        * @see {@link GetClientCertificatesCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetClientCertificatesCommand extends $Command<GetClientCertificatesCommandInput, GetClientCertificatesCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetClientCertificatesCommandInput;
            constructor(input: GetClientCertificatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetClientCertificatesCommandInput, GetClientCertificatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDeploymentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { Deployment, GetDeploymentRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetDeploymentCommandInput extends GetDeploymentRequest {
    }
    export interface GetDeploymentCommandOutput extends Deployment, __MetadataBearer {
    }
    /**
        * <p>Gets information about a Deployment resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetDeploymentCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetDeploymentCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetDeploymentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDeploymentCommandInput} for command's `input` shape.
        * @see {@link GetDeploymentCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetDeploymentCommand extends $Command<GetDeploymentCommandInput, GetDeploymentCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetDeploymentCommandInput;
            constructor(input: GetDeploymentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDeploymentCommandInput, GetDeploymentCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDeploymentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { Deployments, GetDeploymentsRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetDeploymentsCommandInput extends GetDeploymentsRequest {
    }
    export interface GetDeploymentsCommandOutput extends Deployments, __MetadataBearer {
    }
    /**
        * <p>Gets information about a Deployments collection.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetDeploymentsCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetDeploymentsCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetDeploymentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDeploymentsCommandInput} for command's `input` shape.
        * @see {@link GetDeploymentsCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetDeploymentsCommand extends $Command<GetDeploymentsCommandInput, GetDeploymentsCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetDeploymentsCommandInput;
            constructor(input: GetDeploymentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDeploymentsCommandInput, GetDeploymentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDocumentationPartCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DocumentationPart, GetDocumentationPartRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetDocumentationPartCommandInput extends GetDocumentationPartRequest {
    }
    export interface GetDocumentationPartCommandOutput extends DocumentationPart, __MetadataBearer {
    }
    /**
        * <p>Gets a documentation part.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetDocumentationPartCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetDocumentationPartCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetDocumentationPartCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDocumentationPartCommandInput} for command's `input` shape.
        * @see {@link GetDocumentationPartCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetDocumentationPartCommand extends $Command<GetDocumentationPartCommandInput, GetDocumentationPartCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetDocumentationPartCommandInput;
            constructor(input: GetDocumentationPartCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDocumentationPartCommandInput, GetDocumentationPartCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDocumentationPartsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DocumentationParts, GetDocumentationPartsRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetDocumentationPartsCommandInput extends GetDocumentationPartsRequest {
    }
    export interface GetDocumentationPartsCommandOutput extends DocumentationParts, __MetadataBearer {
    }
    /**
        * <p>Gets documentation parts.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetDocumentationPartsCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetDocumentationPartsCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetDocumentationPartsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDocumentationPartsCommandInput} for command's `input` shape.
        * @see {@link GetDocumentationPartsCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetDocumentationPartsCommand extends $Command<GetDocumentationPartsCommandInput, GetDocumentationPartsCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetDocumentationPartsCommandInput;
            constructor(input: GetDocumentationPartsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDocumentationPartsCommandInput, GetDocumentationPartsCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDocumentationVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DocumentationVersion, GetDocumentationVersionRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetDocumentationVersionCommandInput extends GetDocumentationVersionRequest {
    }
    export interface GetDocumentationVersionCommandOutput extends DocumentationVersion, __MetadataBearer {
    }
    /**
        * <p>Gets a documentation version.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetDocumentationVersionCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetDocumentationVersionCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetDocumentationVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDocumentationVersionCommandInput} for command's `input` shape.
        * @see {@link GetDocumentationVersionCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetDocumentationVersionCommand extends $Command<GetDocumentationVersionCommandInput, GetDocumentationVersionCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetDocumentationVersionCommandInput;
            constructor(input: GetDocumentationVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDocumentationVersionCommandInput, GetDocumentationVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDocumentationVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DocumentationVersions, GetDocumentationVersionsRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetDocumentationVersionsCommandInput extends GetDocumentationVersionsRequest {
    }
    export interface GetDocumentationVersionsCommandOutput extends DocumentationVersions, __MetadataBearer {
    }
    /**
        * <p>Gets documentation versions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetDocumentationVersionsCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetDocumentationVersionsCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetDocumentationVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDocumentationVersionsCommandInput} for command's `input` shape.
        * @see {@link GetDocumentationVersionsCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetDocumentationVersionsCommand extends $Command<GetDocumentationVersionsCommandInput, GetDocumentationVersionsCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetDocumentationVersionsCommandInput;
            constructor(input: GetDocumentationVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDocumentationVersionsCommandInput, GetDocumentationVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDomainNameCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DomainName, GetDomainNameRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetDomainNameCommandInput extends GetDomainNameRequest {
    }
    export interface GetDomainNameCommandOutput extends DomainName, __MetadataBearer {
    }
    /**
        * <p>Represents a domain name that is contained in a simpler, more intuitive URL that can be called.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetDomainNameCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetDomainNameCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetDomainNameCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDomainNameCommandInput} for command's `input` shape.
        * @see {@link GetDomainNameCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetDomainNameCommand extends $Command<GetDomainNameCommandInput, GetDomainNameCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetDomainNameCommandInput;
            constructor(input: GetDomainNameCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDomainNameCommandInput, GetDomainNameCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetDomainNamesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DomainNames, GetDomainNamesRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetDomainNamesCommandInput extends GetDomainNamesRequest {
    }
    export interface GetDomainNamesCommandOutput extends DomainNames, __MetadataBearer {
    }
    /**
        * <p>Represents a collection of DomainName resources.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetDomainNamesCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetDomainNamesCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetDomainNamesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDomainNamesCommandInput} for command's `input` shape.
        * @see {@link GetDomainNamesCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetDomainNamesCommand extends $Command<GetDomainNamesCommandInput, GetDomainNamesCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetDomainNamesCommandInput;
            constructor(input: GetDomainNamesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDomainNamesCommandInput, GetDomainNamesCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetExportCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { ExportResponse, GetExportRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetExportCommandInput extends GetExportRequest {
    }
    export interface GetExportCommandOutput extends ExportResponse, __MetadataBearer {
    }
    /**
        * <p>Exports a deployed version of a RestApi in a specified format.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetExportCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetExportCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetExportCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetExportCommandInput} for command's `input` shape.
        * @see {@link GetExportCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetExportCommand extends $Command<GetExportCommandInput, GetExportCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetExportCommandInput;
            constructor(input: GetExportCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetExportCommandInput, GetExportCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetGatewayResponseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GatewayResponse, GetGatewayResponseRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetGatewayResponseCommandInput extends GetGatewayResponseRequest {
    }
    export interface GetGatewayResponseCommandOutput extends GatewayResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a GatewayResponse of a specified response type on the given RestApi.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetGatewayResponseCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetGatewayResponseCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetGatewayResponseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetGatewayResponseCommandInput} for command's `input` shape.
        * @see {@link GetGatewayResponseCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetGatewayResponseCommand extends $Command<GetGatewayResponseCommandInput, GetGatewayResponseCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetGatewayResponseCommandInput;
            constructor(input: GetGatewayResponseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetGatewayResponseCommandInput, GetGatewayResponseCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetGatewayResponsesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GatewayResponses, GetGatewayResponsesRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetGatewayResponsesCommandInput extends GetGatewayResponsesRequest {
    }
    export interface GetGatewayResponsesCommandOutput extends GatewayResponses, __MetadataBearer {
    }
    /**
        * <p>Gets the GatewayResponses collection on the given RestApi. If an API developer has not added any definitions for gateway responses, the result will be the API Gateway-generated default GatewayResponses collection for the supported response types.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetGatewayResponsesCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetGatewayResponsesCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetGatewayResponsesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetGatewayResponsesCommandInput} for command's `input` shape.
        * @see {@link GetGatewayResponsesCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetGatewayResponsesCommand extends $Command<GetGatewayResponsesCommandInput, GetGatewayResponsesCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetGatewayResponsesCommandInput;
            constructor(input: GetGatewayResponsesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetGatewayResponsesCommandInput, GetGatewayResponsesCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetIntegrationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetIntegrationRequest, Integration } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetIntegrationCommandInput extends GetIntegrationRequest {
    }
    export interface GetIntegrationCommandOutput extends Integration, __MetadataBearer {
    }
    /**
        * <p>Get the integration settings.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetIntegrationCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetIntegrationCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetIntegrationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetIntegrationCommandInput} for command's `input` shape.
        * @see {@link GetIntegrationCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetIntegrationCommand extends $Command<GetIntegrationCommandInput, GetIntegrationCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetIntegrationCommandInput;
            constructor(input: GetIntegrationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetIntegrationCommandInput, GetIntegrationCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetIntegrationResponseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetIntegrationResponseRequest, IntegrationResponse } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetIntegrationResponseCommandInput extends GetIntegrationResponseRequest {
    }
    export interface GetIntegrationResponseCommandOutput extends IntegrationResponse, __MetadataBearer {
    }
    /**
        * <p>Represents a get integration response.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetIntegrationResponseCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetIntegrationResponseCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetIntegrationResponseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetIntegrationResponseCommandInput} for command's `input` shape.
        * @see {@link GetIntegrationResponseCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetIntegrationResponseCommand extends $Command<GetIntegrationResponseCommandInput, GetIntegrationResponseCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetIntegrationResponseCommandInput;
            constructor(input: GetIntegrationResponseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetIntegrationResponseCommandInput, GetIntegrationResponseCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetMethodCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetMethodRequest, Method } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetMethodCommandInput extends GetMethodRequest {
    }
    export interface GetMethodCommandOutput extends Method, __MetadataBearer {
    }
    /**
        * <p>Describe an existing Method resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetMethodCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetMethodCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetMethodCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMethodCommandInput} for command's `input` shape.
        * @see {@link GetMethodCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetMethodCommand extends $Command<GetMethodCommandInput, GetMethodCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetMethodCommandInput;
            constructor(input: GetMethodCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMethodCommandInput, GetMethodCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetMethodResponseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetMethodResponseRequest, MethodResponse } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetMethodResponseCommandInput extends GetMethodResponseRequest {
    }
    export interface GetMethodResponseCommandOutput extends MethodResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a MethodResponse resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetMethodResponseCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetMethodResponseCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetMethodResponseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMethodResponseCommandInput} for command's `input` shape.
        * @see {@link GetMethodResponseCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetMethodResponseCommand extends $Command<GetMethodResponseCommandInput, GetMethodResponseCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetMethodResponseCommandInput;
            constructor(input: GetMethodResponseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMethodResponseCommandInput, GetMethodResponseCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetModelRequest, Model } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetModelCommandInput extends GetModelRequest {
    }
    export interface GetModelCommandOutput extends Model, __MetadataBearer {
    }
    /**
        * <p>Describes an existing model defined for a RestApi resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetModelCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetModelCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetModelCommandInput} for command's `input` shape.
        * @see {@link GetModelCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetModelCommand extends $Command<GetModelCommandInput, GetModelCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetModelCommandInput;
            constructor(input: GetModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetModelCommandInput, GetModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetModelsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetModelsRequest, Models } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetModelsCommandInput extends GetModelsRequest {
    }
    export interface GetModelsCommandOutput extends Models, __MetadataBearer {
    }
    /**
        * <p>Describes existing Models defined for a RestApi resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetModelsCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetModelsCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetModelsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetModelsCommandInput} for command's `input` shape.
        * @see {@link GetModelsCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetModelsCommand extends $Command<GetModelsCommandInput, GetModelsCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetModelsCommandInput;
            constructor(input: GetModelsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetModelsCommandInput, GetModelsCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetModelTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetModelTemplateRequest, Template } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetModelTemplateCommandInput extends GetModelTemplateRequest {
    }
    export interface GetModelTemplateCommandOutput extends Template, __MetadataBearer {
    }
    /**
        * <p>Generates a sample mapping template that can be used to transform a payload into the structure of a model.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetModelTemplateCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetModelTemplateCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetModelTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetModelTemplateCommandInput} for command's `input` shape.
        * @see {@link GetModelTemplateCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetModelTemplateCommand extends $Command<GetModelTemplateCommandInput, GetModelTemplateCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetModelTemplateCommandInput;
            constructor(input: GetModelTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetModelTemplateCommandInput, GetModelTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetRequestValidatorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetRequestValidatorRequest, RequestValidator } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetRequestValidatorCommandInput extends GetRequestValidatorRequest {
    }
    export interface GetRequestValidatorCommandOutput extends RequestValidator, __MetadataBearer {
    }
    /**
        * <p>Gets a RequestValidator of a given RestApi.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetRequestValidatorCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetRequestValidatorCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetRequestValidatorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRequestValidatorCommandInput} for command's `input` shape.
        * @see {@link GetRequestValidatorCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetRequestValidatorCommand extends $Command<GetRequestValidatorCommandInput, GetRequestValidatorCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetRequestValidatorCommandInput;
            constructor(input: GetRequestValidatorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRequestValidatorCommandInput, GetRequestValidatorCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetRequestValidatorsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetRequestValidatorsRequest, RequestValidators } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetRequestValidatorsCommandInput extends GetRequestValidatorsRequest {
    }
    export interface GetRequestValidatorsCommandOutput extends RequestValidators, __MetadataBearer {
    }
    /**
        * <p>Gets the RequestValidators collection of a given RestApi.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetRequestValidatorsCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetRequestValidatorsCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetRequestValidatorsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRequestValidatorsCommandInput} for command's `input` shape.
        * @see {@link GetRequestValidatorsCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetRequestValidatorsCommand extends $Command<GetRequestValidatorsCommandInput, GetRequestValidatorsCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetRequestValidatorsCommandInput;
            constructor(input: GetRequestValidatorsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRequestValidatorsCommandInput, GetRequestValidatorsCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetResourceRequest, Resource } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetResourceCommandInput extends GetResourceRequest {
    }
    export interface GetResourceCommandOutput extends Resource, __MetadataBearer {
    }
    /**
        * <p>Lists information about a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetResourceCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetResourceCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetResourceCommandInput} for command's `input` shape.
        * @see {@link GetResourceCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetResourceCommand extends $Command<GetResourceCommandInput, GetResourceCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetResourceCommandInput;
            constructor(input: GetResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetResourceCommandInput, GetResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetResourcesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetResourcesRequest, Resources } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetResourcesCommandInput extends GetResourcesRequest {
    }
    export interface GetResourcesCommandOutput extends Resources, __MetadataBearer {
    }
    /**
        * <p>Lists information about a collection of Resource resources.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetResourcesCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetResourcesCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetResourcesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetResourcesCommandInput} for command's `input` shape.
        * @see {@link GetResourcesCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetResourcesCommand extends $Command<GetResourcesCommandInput, GetResourcesCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetResourcesCommandInput;
            constructor(input: GetResourcesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetResourcesCommandInput, GetResourcesCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetRestApiCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetRestApiRequest, RestApi } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetRestApiCommandInput extends GetRestApiRequest {
    }
    export interface GetRestApiCommandOutput extends RestApi, __MetadataBearer {
    }
    /**
        * <p>Lists the RestApi resource in the collection.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetRestApiCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetRestApiCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetRestApiCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRestApiCommandInput} for command's `input` shape.
        * @see {@link GetRestApiCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetRestApiCommand extends $Command<GetRestApiCommandInput, GetRestApiCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetRestApiCommandInput;
            constructor(input: GetRestApiCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRestApiCommandInput, GetRestApiCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetRestApisCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetRestApisRequest, RestApis } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetRestApisCommandInput extends GetRestApisRequest {
    }
    export interface GetRestApisCommandOutput extends RestApis, __MetadataBearer {
    }
    /**
        * <p>Lists the RestApis resources for your collection.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetRestApisCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetRestApisCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetRestApisCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRestApisCommandInput} for command's `input` shape.
        * @see {@link GetRestApisCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetRestApisCommand extends $Command<GetRestApisCommandInput, GetRestApisCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetRestApisCommandInput;
            constructor(input: GetRestApisCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRestApisCommandInput, GetRestApisCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetSdkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetSdkRequest, SdkResponse } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetSdkCommandInput extends GetSdkRequest {
    }
    export interface GetSdkCommandOutput extends SdkResponse, __MetadataBearer {
    }
    /**
        * <p>Generates a client SDK for a RestApi and Stage.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetSdkCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetSdkCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetSdkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSdkCommandInput} for command's `input` shape.
        * @see {@link GetSdkCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetSdkCommand extends $Command<GetSdkCommandInput, GetSdkCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetSdkCommandInput;
            constructor(input: GetSdkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSdkCommandInput, GetSdkCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetSdkTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetSdkTypeRequest, SdkType } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetSdkTypeCommandInput extends GetSdkTypeRequest {
    }
    export interface GetSdkTypeCommandOutput extends SdkType, __MetadataBearer {
    }
    /**
        * <p>Gets an SDK type.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetSdkTypeCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetSdkTypeCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetSdkTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSdkTypeCommandInput} for command's `input` shape.
        * @see {@link GetSdkTypeCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetSdkTypeCommand extends $Command<GetSdkTypeCommandInput, GetSdkTypeCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetSdkTypeCommandInput;
            constructor(input: GetSdkTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSdkTypeCommandInput, GetSdkTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetSdkTypesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetSdkTypesRequest, SdkTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetSdkTypesCommandInput extends GetSdkTypesRequest {
    }
    export interface GetSdkTypesCommandOutput extends SdkTypes, __MetadataBearer {
    }
    /**
        * <p>Gets SDK types</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetSdkTypesCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetSdkTypesCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetSdkTypesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSdkTypesCommandInput} for command's `input` shape.
        * @see {@link GetSdkTypesCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetSdkTypesCommand extends $Command<GetSdkTypesCommandInput, GetSdkTypesCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetSdkTypesCommandInput;
            constructor(input: GetSdkTypesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSdkTypesCommandInput, GetSdkTypesCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetStageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetStageRequest, Stage } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetStageCommandInput extends GetStageRequest {
    }
    export interface GetStageCommandOutput extends Stage, __MetadataBearer {
    }
    /**
        * <p>Gets information about a Stage resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetStageCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetStageCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetStageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetStageCommandInput} for command's `input` shape.
        * @see {@link GetStageCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetStageCommand extends $Command<GetStageCommandInput, GetStageCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetStageCommandInput;
            constructor(input: GetStageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetStageCommandInput, GetStageCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetStagesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetStagesRequest, Stages } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetStagesCommandInput extends GetStagesRequest {
    }
    export interface GetStagesCommandOutput extends Stages, __MetadataBearer {
    }
    /**
        * <p>Gets information about one or more Stage resources.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetStagesCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetStagesCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetStagesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetStagesCommandInput} for command's `input` shape.
        * @see {@link GetStagesCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetStagesCommand extends $Command<GetStagesCommandInput, GetStagesCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetStagesCommandInput;
            constructor(input: GetStagesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetStagesCommandInput, GetStagesCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetTagsRequest, Tags } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetTagsCommandInput extends GetTagsRequest {
    }
    export interface GetTagsCommandOutput extends Tags, __MetadataBearer {
    }
    /**
        * <p>Gets the Tags collection for a given resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetTagsCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetTagsCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTagsCommandInput} for command's `input` shape.
        * @see {@link GetTagsCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetTagsCommand extends $Command<GetTagsCommandInput, GetTagsCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetTagsCommandInput;
            constructor(input: GetTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTagsCommandInput, GetTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetUsageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetUsageRequest, Usage } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetUsageCommandInput extends GetUsageRequest {
    }
    export interface GetUsageCommandOutput extends Usage, __MetadataBearer {
    }
    /**
        * <p>Gets the usage data of a usage plan in a specified time interval.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetUsageCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetUsageCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetUsageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetUsageCommandInput} for command's `input` shape.
        * @see {@link GetUsageCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetUsageCommand extends $Command<GetUsageCommandInput, GetUsageCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetUsageCommandInput;
            constructor(input: GetUsageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetUsageCommandInput, GetUsageCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetUsagePlanCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetUsagePlanRequest, UsagePlan } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetUsagePlanCommandInput extends GetUsagePlanRequest {
    }
    export interface GetUsagePlanCommandOutput extends UsagePlan, __MetadataBearer {
    }
    /**
        * <p>Gets a usage plan of a given plan identifier.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetUsagePlanCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetUsagePlanCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetUsagePlanCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetUsagePlanCommandInput} for command's `input` shape.
        * @see {@link GetUsagePlanCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetUsagePlanCommand extends $Command<GetUsagePlanCommandInput, GetUsagePlanCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetUsagePlanCommandInput;
            constructor(input: GetUsagePlanCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetUsagePlanCommandInput, GetUsagePlanCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetUsagePlanKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetUsagePlanKeyRequest, UsagePlanKey } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetUsagePlanKeyCommandInput extends GetUsagePlanKeyRequest {
    }
    export interface GetUsagePlanKeyCommandOutput extends UsagePlanKey, __MetadataBearer {
    }
    /**
        * <p>Gets a usage plan key of a given key identifier.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetUsagePlanKeyCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetUsagePlanKeyCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetUsagePlanKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetUsagePlanKeyCommandInput} for command's `input` shape.
        * @see {@link GetUsagePlanKeyCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetUsagePlanKeyCommand extends $Command<GetUsagePlanKeyCommandInput, GetUsagePlanKeyCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetUsagePlanKeyCommandInput;
            constructor(input: GetUsagePlanKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetUsagePlanKeyCommandInput, GetUsagePlanKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetUsagePlanKeysCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetUsagePlanKeysRequest, UsagePlanKeys } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetUsagePlanKeysCommandInput extends GetUsagePlanKeysRequest {
    }
    export interface GetUsagePlanKeysCommandOutput extends UsagePlanKeys, __MetadataBearer {
    }
    /**
        * <p>Gets all the usage plan keys representing the API keys added to a specified usage plan.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetUsagePlanKeysCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetUsagePlanKeysCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetUsagePlanKeysCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetUsagePlanKeysCommandInput} for command's `input` shape.
        * @see {@link GetUsagePlanKeysCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetUsagePlanKeysCommand extends $Command<GetUsagePlanKeysCommandInput, GetUsagePlanKeysCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetUsagePlanKeysCommandInput;
            constructor(input: GetUsagePlanKeysCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetUsagePlanKeysCommandInput, GetUsagePlanKeysCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetUsagePlansCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetUsagePlansRequest, UsagePlans } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetUsagePlansCommandInput extends GetUsagePlansRequest {
    }
    export interface GetUsagePlansCommandOutput extends UsagePlans, __MetadataBearer {
    }
    /**
        * <p>Gets all the usage plans of the caller's account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetUsagePlansCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetUsagePlansCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetUsagePlansCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetUsagePlansCommandInput} for command's `input` shape.
        * @see {@link GetUsagePlansCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetUsagePlansCommand extends $Command<GetUsagePlansCommandInput, GetUsagePlansCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetUsagePlansCommandInput;
            constructor(input: GetUsagePlansCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetUsagePlansCommandInput, GetUsagePlansCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetVpcLinkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetVpcLinkRequest, VpcLink } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetVpcLinkCommandInput extends GetVpcLinkRequest {
    }
    export interface GetVpcLinkCommandOutput extends VpcLink, __MetadataBearer {
    }
    /**
        * <p>Gets a specified VPC link under the caller's account in a region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetVpcLinkCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetVpcLinkCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetVpcLinkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetVpcLinkCommandInput} for command's `input` shape.
        * @see {@link GetVpcLinkCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetVpcLinkCommand extends $Command<GetVpcLinkCommandInput, GetVpcLinkCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetVpcLinkCommandInput;
            constructor(input: GetVpcLinkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetVpcLinkCommandInput, GetVpcLinkCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/GetVpcLinksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GetVpcLinksRequest, VpcLinks } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface GetVpcLinksCommandInput extends GetVpcLinksRequest {
    }
    export interface GetVpcLinksCommandOutput extends VpcLinks, __MetadataBearer {
    }
    /**
        * <p>Gets the VpcLinks collection under the caller's account in a selected region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, GetVpcLinksCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, GetVpcLinksCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new GetVpcLinksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetVpcLinksCommandInput} for command's `input` shape.
        * @see {@link GetVpcLinksCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class GetVpcLinksCommand extends $Command<GetVpcLinksCommandInput, GetVpcLinksCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: GetVpcLinksCommandInput;
            constructor(input: GetVpcLinksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetVpcLinksCommandInput, GetVpcLinksCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/ImportApiKeysCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { ApiKeyIds, ImportApiKeysRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface ImportApiKeysCommandInput extends ImportApiKeysRequest {
    }
    export interface ImportApiKeysCommandOutput extends ApiKeyIds, __MetadataBearer {
    }
    /**
        * <p>Import API keys from an external source, such as a CSV-formatted file.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, ImportApiKeysCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, ImportApiKeysCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new ImportApiKeysCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ImportApiKeysCommandInput} for command's `input` shape.
        * @see {@link ImportApiKeysCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class ImportApiKeysCommand extends $Command<ImportApiKeysCommandInput, ImportApiKeysCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: ImportApiKeysCommandInput;
            constructor(input: ImportApiKeysCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ImportApiKeysCommandInput, ImportApiKeysCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/ImportDocumentationPartsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DocumentationPartIds, ImportDocumentationPartsRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface ImportDocumentationPartsCommandInput extends ImportDocumentationPartsRequest {
    }
    export interface ImportDocumentationPartsCommandOutput extends DocumentationPartIds, __MetadataBearer {
    }
    /**
        * <p>Imports documentation parts</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, ImportDocumentationPartsCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, ImportDocumentationPartsCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new ImportDocumentationPartsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ImportDocumentationPartsCommandInput} for command's `input` shape.
        * @see {@link ImportDocumentationPartsCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class ImportDocumentationPartsCommand extends $Command<ImportDocumentationPartsCommandInput, ImportDocumentationPartsCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: ImportDocumentationPartsCommandInput;
            constructor(input: ImportDocumentationPartsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ImportDocumentationPartsCommandInput, ImportDocumentationPartsCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/ImportRestApiCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { ImportRestApiRequest, RestApi } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface ImportRestApiCommandInput extends ImportRestApiRequest {
    }
    export interface ImportRestApiCommandOutput extends RestApi, __MetadataBearer {
    }
    /**
        * <p>A feature of the API Gateway control service for creating a new API from an external API definition file.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, ImportRestApiCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, ImportRestApiCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new ImportRestApiCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ImportRestApiCommandInput} for command's `input` shape.
        * @see {@link ImportRestApiCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class ImportRestApiCommand extends $Command<ImportRestApiCommandInput, ImportRestApiCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: ImportRestApiCommandInput;
            constructor(input: ImportRestApiCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ImportRestApiCommandInput, ImportRestApiCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/PutGatewayResponseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GatewayResponse, PutGatewayResponseRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface PutGatewayResponseCommandInput extends PutGatewayResponseRequest {
    }
    export interface PutGatewayResponseCommandOutput extends GatewayResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a customization of a GatewayResponse of a specified response type and status code on the given RestApi.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, PutGatewayResponseCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, PutGatewayResponseCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new PutGatewayResponseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutGatewayResponseCommandInput} for command's `input` shape.
        * @see {@link PutGatewayResponseCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class PutGatewayResponseCommand extends $Command<PutGatewayResponseCommandInput, PutGatewayResponseCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: PutGatewayResponseCommandInput;
            constructor(input: PutGatewayResponseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutGatewayResponseCommandInput, PutGatewayResponseCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/PutIntegrationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { Integration, PutIntegrationRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface PutIntegrationCommandInput extends PutIntegrationRequest {
    }
    export interface PutIntegrationCommandOutput extends Integration, __MetadataBearer {
    }
    /**
        * <p>Sets up a method's integration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, PutIntegrationCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, PutIntegrationCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new PutIntegrationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutIntegrationCommandInput} for command's `input` shape.
        * @see {@link PutIntegrationCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class PutIntegrationCommand extends $Command<PutIntegrationCommandInput, PutIntegrationCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: PutIntegrationCommandInput;
            constructor(input: PutIntegrationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutIntegrationCommandInput, PutIntegrationCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/PutIntegrationResponseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { IntegrationResponse, PutIntegrationResponseRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface PutIntegrationResponseCommandInput extends PutIntegrationResponseRequest {
    }
    export interface PutIntegrationResponseCommandOutput extends IntegrationResponse, __MetadataBearer {
    }
    /**
        * <p>Represents a put integration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, PutIntegrationResponseCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, PutIntegrationResponseCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new PutIntegrationResponseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutIntegrationResponseCommandInput} for command's `input` shape.
        * @see {@link PutIntegrationResponseCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class PutIntegrationResponseCommand extends $Command<PutIntegrationResponseCommandInput, PutIntegrationResponseCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: PutIntegrationResponseCommandInput;
            constructor(input: PutIntegrationResponseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutIntegrationResponseCommandInput, PutIntegrationResponseCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/PutMethodCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { Method, PutMethodRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface PutMethodCommandInput extends PutMethodRequest {
    }
    export interface PutMethodCommandOutput extends Method, __MetadataBearer {
    }
    /**
        * <p>Add a method to an existing Resource resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, PutMethodCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, PutMethodCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new PutMethodCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutMethodCommandInput} for command's `input` shape.
        * @see {@link PutMethodCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class PutMethodCommand extends $Command<PutMethodCommandInput, PutMethodCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: PutMethodCommandInput;
            constructor(input: PutMethodCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutMethodCommandInput, PutMethodCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/PutMethodResponseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { MethodResponse, PutMethodResponseRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface PutMethodResponseCommandInput extends PutMethodResponseRequest {
    }
    export interface PutMethodResponseCommandOutput extends MethodResponse, __MetadataBearer {
    }
    /**
        * <p>Adds a MethodResponse to an existing Method resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, PutMethodResponseCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, PutMethodResponseCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new PutMethodResponseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutMethodResponseCommandInput} for command's `input` shape.
        * @see {@link PutMethodResponseCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class PutMethodResponseCommand extends $Command<PutMethodResponseCommandInput, PutMethodResponseCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: PutMethodResponseCommandInput;
            constructor(input: PutMethodResponseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutMethodResponseCommandInput, PutMethodResponseCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/PutRestApiCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { PutRestApiRequest, RestApi } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface PutRestApiCommandInput extends PutRestApiRequest {
    }
    export interface PutRestApiCommandOutput extends RestApi, __MetadataBearer {
    }
    /**
        * <p>A feature of the API Gateway control service for updating an existing API with an input of external API definitions.
        *             The update can take the form of merging the supplied definition into the existing API or overwriting the existing API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, PutRestApiCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, PutRestApiCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new PutRestApiCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutRestApiCommandInput} for command's `input` shape.
        * @see {@link PutRestApiCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class PutRestApiCommand extends $Command<PutRestApiCommandInput, PutRestApiCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: PutRestApiCommandInput;
            constructor(input: PutRestApiCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutRestApiCommandInput, PutRestApiCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { TagResourceRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds or updates a tag on a given resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, TagResourceCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, TagResourceCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/TestInvokeAuthorizerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { TestInvokeAuthorizerRequest, TestInvokeAuthorizerResponse } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface TestInvokeAuthorizerCommandInput extends TestInvokeAuthorizerRequest {
    }
    export interface TestInvokeAuthorizerCommandOutput extends TestInvokeAuthorizerResponse, __MetadataBearer {
    }
    /**
        * <p>Simulate the execution of an Authorizer in your RestApi with headers, parameters, and an incoming request body.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, TestInvokeAuthorizerCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, TestInvokeAuthorizerCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new TestInvokeAuthorizerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TestInvokeAuthorizerCommandInput} for command's `input` shape.
        * @see {@link TestInvokeAuthorizerCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class TestInvokeAuthorizerCommand extends $Command<TestInvokeAuthorizerCommandInput, TestInvokeAuthorizerCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: TestInvokeAuthorizerCommandInput;
            constructor(input: TestInvokeAuthorizerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TestInvokeAuthorizerCommandInput, TestInvokeAuthorizerCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/TestInvokeMethodCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { TestInvokeMethodRequest, TestInvokeMethodResponse } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface TestInvokeMethodCommandInput extends TestInvokeMethodRequest {
    }
    export interface TestInvokeMethodCommandOutput extends TestInvokeMethodResponse, __MetadataBearer {
    }
    /**
        * <p>Simulate the invocation of a Method in your RestApi with headers, parameters, and an incoming request body.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, TestInvokeMethodCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, TestInvokeMethodCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new TestInvokeMethodCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TestInvokeMethodCommandInput} for command's `input` shape.
        * @see {@link TestInvokeMethodCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class TestInvokeMethodCommand extends $Command<TestInvokeMethodCommandInput, TestInvokeMethodCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: TestInvokeMethodCommandInput;
            constructor(input: TestInvokeMethodCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TestInvokeMethodCommandInput, TestInvokeMethodCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { UntagResourceRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes a tag from a given resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UntagResourceCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UntagResourceCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { Account, UpdateAccountRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UpdateAccountCommandInput extends UpdateAccountRequest {
    }
    export interface UpdateAccountCommandOutput extends Account, __MetadataBearer {
    }
    /**
        * <p>Changes information about the current Account resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UpdateAccountCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UpdateAccountCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UpdateAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAccountCommandInput} for command's `input` shape.
        * @see {@link UpdateAccountCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UpdateAccountCommand extends $Command<UpdateAccountCommandInput, UpdateAccountCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UpdateAccountCommandInput;
            constructor(input: UpdateAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAccountCommandInput, UpdateAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateApiKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { ApiKey, UpdateApiKeyRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UpdateApiKeyCommandInput extends UpdateApiKeyRequest {
    }
    export interface UpdateApiKeyCommandOutput extends ApiKey, __MetadataBearer {
    }
    /**
        * <p>Changes information about an ApiKey resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UpdateApiKeyCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UpdateApiKeyCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UpdateApiKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateApiKeyCommandInput} for command's `input` shape.
        * @see {@link UpdateApiKeyCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UpdateApiKeyCommand extends $Command<UpdateApiKeyCommandInput, UpdateApiKeyCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UpdateApiKeyCommandInput;
            constructor(input: UpdateApiKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateApiKeyCommandInput, UpdateApiKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateAuthorizerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { Authorizer, UpdateAuthorizerRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UpdateAuthorizerCommandInput extends UpdateAuthorizerRequest {
    }
    export interface UpdateAuthorizerCommandOutput extends Authorizer, __MetadataBearer {
    }
    /**
        * <p>Updates an existing Authorizer resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UpdateAuthorizerCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UpdateAuthorizerCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UpdateAuthorizerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAuthorizerCommandInput} for command's `input` shape.
        * @see {@link UpdateAuthorizerCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UpdateAuthorizerCommand extends $Command<UpdateAuthorizerCommandInput, UpdateAuthorizerCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UpdateAuthorizerCommandInput;
            constructor(input: UpdateAuthorizerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAuthorizerCommandInput, UpdateAuthorizerCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateBasePathMappingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { BasePathMapping, UpdateBasePathMappingRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UpdateBasePathMappingCommandInput extends UpdateBasePathMappingRequest {
    }
    export interface UpdateBasePathMappingCommandOutput extends BasePathMapping, __MetadataBearer {
    }
    /**
        * <p>Changes information about the BasePathMapping resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UpdateBasePathMappingCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UpdateBasePathMappingCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UpdateBasePathMappingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateBasePathMappingCommandInput} for command's `input` shape.
        * @see {@link UpdateBasePathMappingCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UpdateBasePathMappingCommand extends $Command<UpdateBasePathMappingCommandInput, UpdateBasePathMappingCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UpdateBasePathMappingCommandInput;
            constructor(input: UpdateBasePathMappingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateBasePathMappingCommandInput, UpdateBasePathMappingCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateClientCertificateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { ClientCertificate, UpdateClientCertificateRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UpdateClientCertificateCommandInput extends UpdateClientCertificateRequest {
    }
    export interface UpdateClientCertificateCommandOutput extends ClientCertificate, __MetadataBearer {
    }
    /**
        * <p>Changes information about an ClientCertificate resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UpdateClientCertificateCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UpdateClientCertificateCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UpdateClientCertificateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateClientCertificateCommandInput} for command's `input` shape.
        * @see {@link UpdateClientCertificateCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UpdateClientCertificateCommand extends $Command<UpdateClientCertificateCommandInput, UpdateClientCertificateCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UpdateClientCertificateCommandInput;
            constructor(input: UpdateClientCertificateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateClientCertificateCommandInput, UpdateClientCertificateCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateDeploymentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { Deployment, UpdateDeploymentRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UpdateDeploymentCommandInput extends UpdateDeploymentRequest {
    }
    export interface UpdateDeploymentCommandOutput extends Deployment, __MetadataBearer {
    }
    /**
        * <p>Changes information about a Deployment resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UpdateDeploymentCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UpdateDeploymentCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UpdateDeploymentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDeploymentCommandInput} for command's `input` shape.
        * @see {@link UpdateDeploymentCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UpdateDeploymentCommand extends $Command<UpdateDeploymentCommandInput, UpdateDeploymentCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UpdateDeploymentCommandInput;
            constructor(input: UpdateDeploymentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDeploymentCommandInput, UpdateDeploymentCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateDocumentationPartCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DocumentationPart, UpdateDocumentationPartRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UpdateDocumentationPartCommandInput extends UpdateDocumentationPartRequest {
    }
    export interface UpdateDocumentationPartCommandOutput extends DocumentationPart, __MetadataBearer {
    }
    /**
        * <p>Updates a documentation part.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UpdateDocumentationPartCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UpdateDocumentationPartCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UpdateDocumentationPartCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDocumentationPartCommandInput} for command's `input` shape.
        * @see {@link UpdateDocumentationPartCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UpdateDocumentationPartCommand extends $Command<UpdateDocumentationPartCommandInput, UpdateDocumentationPartCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UpdateDocumentationPartCommandInput;
            constructor(input: UpdateDocumentationPartCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDocumentationPartCommandInput, UpdateDocumentationPartCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateDocumentationVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DocumentationVersion, UpdateDocumentationVersionRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UpdateDocumentationVersionCommandInput extends UpdateDocumentationVersionRequest {
    }
    export interface UpdateDocumentationVersionCommandOutput extends DocumentationVersion, __MetadataBearer {
    }
    /**
        * <p>Updates a documentation version.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UpdateDocumentationVersionCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UpdateDocumentationVersionCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UpdateDocumentationVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDocumentationVersionCommandInput} for command's `input` shape.
        * @see {@link UpdateDocumentationVersionCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UpdateDocumentationVersionCommand extends $Command<UpdateDocumentationVersionCommandInput, UpdateDocumentationVersionCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UpdateDocumentationVersionCommandInput;
            constructor(input: UpdateDocumentationVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDocumentationVersionCommandInput, UpdateDocumentationVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateDomainNameCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { DomainName, UpdateDomainNameRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UpdateDomainNameCommandInput extends UpdateDomainNameRequest {
    }
    export interface UpdateDomainNameCommandOutput extends DomainName, __MetadataBearer {
    }
    /**
        * <p>Changes information about the DomainName resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UpdateDomainNameCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UpdateDomainNameCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UpdateDomainNameCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDomainNameCommandInput} for command's `input` shape.
        * @see {@link UpdateDomainNameCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UpdateDomainNameCommand extends $Command<UpdateDomainNameCommandInput, UpdateDomainNameCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UpdateDomainNameCommandInput;
            constructor(input: UpdateDomainNameCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDomainNameCommandInput, UpdateDomainNameCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateGatewayResponseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { GatewayResponse, UpdateGatewayResponseRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UpdateGatewayResponseCommandInput extends UpdateGatewayResponseRequest {
    }
    export interface UpdateGatewayResponseCommandOutput extends GatewayResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a GatewayResponse of a specified response type on the given RestApi.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UpdateGatewayResponseCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UpdateGatewayResponseCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UpdateGatewayResponseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateGatewayResponseCommandInput} for command's `input` shape.
        * @see {@link UpdateGatewayResponseCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UpdateGatewayResponseCommand extends $Command<UpdateGatewayResponseCommandInput, UpdateGatewayResponseCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UpdateGatewayResponseCommandInput;
            constructor(input: UpdateGatewayResponseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateGatewayResponseCommandInput, UpdateGatewayResponseCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateIntegrationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { Integration, UpdateIntegrationRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UpdateIntegrationCommandInput extends UpdateIntegrationRequest {
    }
    export interface UpdateIntegrationCommandOutput extends Integration, __MetadataBearer {
    }
    /**
        * <p>Represents an update integration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UpdateIntegrationCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UpdateIntegrationCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UpdateIntegrationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateIntegrationCommandInput} for command's `input` shape.
        * @see {@link UpdateIntegrationCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UpdateIntegrationCommand extends $Command<UpdateIntegrationCommandInput, UpdateIntegrationCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UpdateIntegrationCommandInput;
            constructor(input: UpdateIntegrationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateIntegrationCommandInput, UpdateIntegrationCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateIntegrationResponseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { IntegrationResponse, UpdateIntegrationResponseRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UpdateIntegrationResponseCommandInput extends UpdateIntegrationResponseRequest {
    }
    export interface UpdateIntegrationResponseCommandOutput extends IntegrationResponse, __MetadataBearer {
    }
    /**
        * <p>Represents an update integration response.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UpdateIntegrationResponseCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UpdateIntegrationResponseCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UpdateIntegrationResponseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateIntegrationResponseCommandInput} for command's `input` shape.
        * @see {@link UpdateIntegrationResponseCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UpdateIntegrationResponseCommand extends $Command<UpdateIntegrationResponseCommandInput, UpdateIntegrationResponseCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UpdateIntegrationResponseCommandInput;
            constructor(input: UpdateIntegrationResponseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateIntegrationResponseCommandInput, UpdateIntegrationResponseCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateMethodCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { Method, UpdateMethodRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UpdateMethodCommandInput extends UpdateMethodRequest {
    }
    export interface UpdateMethodCommandOutput extends Method, __MetadataBearer {
    }
    /**
        * <p>Updates an existing Method resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UpdateMethodCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UpdateMethodCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UpdateMethodCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateMethodCommandInput} for command's `input` shape.
        * @see {@link UpdateMethodCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UpdateMethodCommand extends $Command<UpdateMethodCommandInput, UpdateMethodCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UpdateMethodCommandInput;
            constructor(input: UpdateMethodCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateMethodCommandInput, UpdateMethodCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateMethodResponseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { MethodResponse, UpdateMethodResponseRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UpdateMethodResponseCommandInput extends UpdateMethodResponseRequest {
    }
    export interface UpdateMethodResponseCommandOutput extends MethodResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an existing MethodResponse resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UpdateMethodResponseCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UpdateMethodResponseCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UpdateMethodResponseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateMethodResponseCommandInput} for command's `input` shape.
        * @see {@link UpdateMethodResponseCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UpdateMethodResponseCommand extends $Command<UpdateMethodResponseCommandInput, UpdateMethodResponseCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UpdateMethodResponseCommandInput;
            constructor(input: UpdateMethodResponseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateMethodResponseCommandInput, UpdateMethodResponseCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { Model, UpdateModelRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UpdateModelCommandInput extends UpdateModelRequest {
    }
    export interface UpdateModelCommandOutput extends Model, __MetadataBearer {
    }
    /**
        * <p>Changes information about a model.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UpdateModelCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UpdateModelCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UpdateModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateModelCommandInput} for command's `input` shape.
        * @see {@link UpdateModelCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UpdateModelCommand extends $Command<UpdateModelCommandInput, UpdateModelCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UpdateModelCommandInput;
            constructor(input: UpdateModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateModelCommandInput, UpdateModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateRequestValidatorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { RequestValidator, UpdateRequestValidatorRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UpdateRequestValidatorCommandInput extends UpdateRequestValidatorRequest {
    }
    export interface UpdateRequestValidatorCommandOutput extends RequestValidator, __MetadataBearer {
    }
    /**
        * <p>Updates a RequestValidator of a given RestApi.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UpdateRequestValidatorCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UpdateRequestValidatorCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UpdateRequestValidatorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRequestValidatorCommandInput} for command's `input` shape.
        * @see {@link UpdateRequestValidatorCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UpdateRequestValidatorCommand extends $Command<UpdateRequestValidatorCommandInput, UpdateRequestValidatorCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UpdateRequestValidatorCommandInput;
            constructor(input: UpdateRequestValidatorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRequestValidatorCommandInput, UpdateRequestValidatorCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { Resource, UpdateResourceRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UpdateResourceCommandInput extends UpdateResourceRequest {
    }
    export interface UpdateResourceCommandOutput extends Resource, __MetadataBearer {
    }
    /**
        * <p>Changes information about a Resource resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UpdateResourceCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UpdateResourceCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UpdateResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateResourceCommandInput} for command's `input` shape.
        * @see {@link UpdateResourceCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UpdateResourceCommand extends $Command<UpdateResourceCommandInput, UpdateResourceCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UpdateResourceCommandInput;
            constructor(input: UpdateResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateResourceCommandInput, UpdateResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateRestApiCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { RestApi, UpdateRestApiRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UpdateRestApiCommandInput extends UpdateRestApiRequest {
    }
    export interface UpdateRestApiCommandOutput extends RestApi, __MetadataBearer {
    }
    /**
        * <p>Changes information about the specified API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UpdateRestApiCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UpdateRestApiCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UpdateRestApiCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRestApiCommandInput} for command's `input` shape.
        * @see {@link UpdateRestApiCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UpdateRestApiCommand extends $Command<UpdateRestApiCommandInput, UpdateRestApiCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UpdateRestApiCommandInput;
            constructor(input: UpdateRestApiCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRestApiCommandInput, UpdateRestApiCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateStageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { Stage, UpdateStageRequest } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UpdateStageCommandInput extends UpdateStageRequest {
    }
    export interface UpdateStageCommandOutput extends Stage, __MetadataBearer {
    }
    /**
        * <p>Changes information about a Stage resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UpdateStageCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UpdateStageCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UpdateStageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateStageCommandInput} for command's `input` shape.
        * @see {@link UpdateStageCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UpdateStageCommand extends $Command<UpdateStageCommandInput, UpdateStageCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UpdateStageCommandInput;
            constructor(input: UpdateStageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateStageCommandInput, UpdateStageCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateUsageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { UpdateUsageRequest, Usage } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UpdateUsageCommandInput extends UpdateUsageRequest {
    }
    export interface UpdateUsageCommandOutput extends Usage, __MetadataBearer {
    }
    /**
        * <p>Grants a temporary extension to the remaining quota of a usage plan associated with a specified API key.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UpdateUsageCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UpdateUsageCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UpdateUsageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateUsageCommandInput} for command's `input` shape.
        * @see {@link UpdateUsageCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UpdateUsageCommand extends $Command<UpdateUsageCommandInput, UpdateUsageCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UpdateUsageCommandInput;
            constructor(input: UpdateUsageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateUsageCommandInput, UpdateUsageCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateUsagePlanCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { UpdateUsagePlanRequest, UsagePlan } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UpdateUsagePlanCommandInput extends UpdateUsagePlanRequest {
    }
    export interface UpdateUsagePlanCommandOutput extends UsagePlan, __MetadataBearer {
    }
    /**
        * <p>Updates a usage plan of a given plan Id.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UpdateUsagePlanCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UpdateUsagePlanCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UpdateUsagePlanCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateUsagePlanCommandInput} for command's `input` shape.
        * @see {@link UpdateUsagePlanCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UpdateUsagePlanCommand extends $Command<UpdateUsagePlanCommandInput, UpdateUsagePlanCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UpdateUsagePlanCommandInput;
            constructor(input: UpdateUsagePlanCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateUsagePlanCommandInput, UpdateUsagePlanCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/commands/UpdateVpcLinkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { APIGatewayClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/APIGatewayClient";
    import { UpdateVpcLinkRequest, VpcLink } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0";
    export interface UpdateVpcLinkCommandInput extends UpdateVpcLinkRequest {
    }
    export interface UpdateVpcLinkCommandOutput extends VpcLink, __MetadataBearer {
    }
    /**
        * <p>Updates an existing VpcLink of a specified identifier.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { APIGatewayClient, UpdateVpcLinkCommand } from "@aws-sdk/client-api-gateway"; // ES Modules import
        * // const { APIGatewayClient, UpdateVpcLinkCommand } = require("@aws-sdk/client-api-gateway"); // CommonJS import
        * const client = new APIGatewayClient(config);
        * const command = new UpdateVpcLinkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateVpcLinkCommandInput} for command's `input` shape.
        * @see {@link UpdateVpcLinkCommandOutput} for command's `response` shape.
        * @see {@link APIGatewayClientResolvedConfig | config} for APIGatewayClient's `config` shape.
        *
        */
    export class UpdateVpcLinkCommand extends $Command<UpdateVpcLinkCommandInput, UpdateVpcLinkCommandOutput, APIGatewayClientResolvedConfig> {
            readonly input: UpdateVpcLinkCommandInput;
            constructor(input: UpdateVpcLinkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: APIGatewayClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateVpcLinkCommandInput, UpdateVpcLinkCommandOutput>;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { APIGatewayServiceException as __BaseException } from "@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/APIGatewayServiceException";
    /**
        * <p>Access log settings, including the access log format and access log destination ARN.</p>
        */
    export interface AccessLogSettings {
            /**
                * <p>A single line format of the access logs of data, as specified by selected $context variables. The format must include at least <code>$context.requestId</code>.</p>
                */
            format?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with <code>amazon-apigateway-</code>.</p>
                */
            destinationArn?: string;
    }
    export namespace AccessLogSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccessLogSettings) => any;
    }
    /**
        * <p> The API request rate limits.</p>
        */
    export interface ThrottleSettings {
            /**
                * <p>The API target request burst rate limit. This allows more requests through for a period of time than the target rate limit.</p>
                */
            burstLimit?: number;
            /**
                * <p>The API target request rate limit.</p>
                */
            rateLimit?: number;
    }
    export namespace ThrottleSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ThrottleSettings) => any;
    }
    /**
        * <p>Represents an AWS account that is associated with API Gateway.</p>
        */
    export interface Account {
            /**
                * <p>The ARN of an Amazon CloudWatch role for the current Account. </p>
                */
            cloudwatchRoleArn?: string;
            /**
                * <p>Specifies the API request limits configured for the current Account.</p>
                */
            throttleSettings?: ThrottleSettings;
            /**
                * <p>A list of features supported for the account. When usage plans are enabled, the features list will include an entry of <code>"UsagePlans"</code>.</p>
                */
            features?: string[];
            /**
                * <p>The version of the API keys used for the account.</p>
                */
            apiKeyVersion?: string;
    }
    export namespace Account {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Account) => any;
    }
    /**
        * <p>A resource that can be distributed to callers for executing Method resources that require an API key. API keys can be mapped to any Stage on any RestApi, which indicates that the callers with the API key can make requests to that stage.</p>
        */
    export interface ApiKey {
            /**
                * <p>The identifier of the API Key.</p>
                */
            id?: string;
            /**
                * <p>The value of the API Key.</p>
                */
            value?: string;
            /**
                * <p>The name of the API Key.</p>
                */
            name?: string;
            /**
                * <p>An AWS Marketplace customer identifier , when integrating with the AWS SaaS Marketplace.</p>
                */
            customerId?: string;
            /**
                * <p>The description of the API Key.</p>
                */
            description?: string;
            /**
                * <p>Specifies whether the API Key can be used by callers.</p>
                */
            enabled?: boolean;
            /**
                * <p>The timestamp when the API Key was created.</p>
                */
            createdDate?: Date;
            /**
                * <p>The timestamp when the API Key was last updated.</p>
                */
            lastUpdatedDate?: Date;
            /**
                * <p>A list of Stage resources that are associated with the ApiKey resource.</p>
                */
            stageKeys?: string[];
            /**
                * <p>The collection of tags. Each tag element is associated with a given resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ApiKey {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApiKey) => any;
    }
    /**
        * <p>The identifier of an ApiKey used in a UsagePlan.</p>
        */
    export interface ApiKeyIds {
            /**
                * <p>A list of all the ApiKey identifiers.</p>
                */
            ids?: string[];
            /**
                * <p>A list of warning messages.</p>
                */
            warnings?: string[];
    }
    export namespace ApiKeyIds {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApiKeyIds) => any;
    }
    /**
        * <p>Represents a collection of API keys as represented by an ApiKeys resource.</p>
        */
    export interface ApiKeys {
            /**
                * <p>A list of warning messages logged during the import of API keys when the <code>failOnWarnings</code> option is set to true.</p>
                */
            warnings?: string[];
            /**
                * <p>The current page of elements from this collection.</p>
                */
            items?: ApiKey[];
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
    }
    export namespace ApiKeys {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApiKeys) => any;
    }
    export enum ApiKeysFormat {
            csv = "csv"
    }
    export enum ApiKeySourceType {
            AUTHORIZER = "AUTHORIZER",
            HEADER = "HEADER"
    }
    /**
        * <p>API stage name of the associated API stage in a usage plan.</p>
        */
    export interface ApiStage {
            /**
                * <p>API Id of the associated API stage in a usage plan.</p>
                */
            apiId?: string;
            /**
                * <p>API stage name of the associated API stage in a usage plan.</p>
                */
            stage?: string;
            /**
                * <p>Map containing method level throttling information for API stage in a usage plan.</p>
                */
            throttle?: Record<string, ThrottleSettings>;
    }
    export namespace ApiStage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApiStage) => any;
    }
    export enum AuthorizerType {
            COGNITO_USER_POOLS = "COGNITO_USER_POOLS",
            REQUEST = "REQUEST",
            TOKEN = "TOKEN"
    }
    /**
        * <p>Represents an authorization layer for methods. If enabled on a method, API Gateway will activate the authorizer when a client calls the method.</p>
        */
    export interface Authorizer {
            /**
                * <p>The identifier for the authorizer resource.</p>
                */
            id?: string;
            /**
                * <p>The name of the authorizer.</p>
                */
            name?: string;
            /**
                * <p>The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.</p>
                */
            type?: AuthorizerType | string;
            /**
                * <p>A list of the Amazon Cognito user pool ARNs for the <code>COGNITO_USER_POOLS</code> authorizer. Each element is of this format: <code>arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}</code>. For a <code>TOKEN</code> or <code>REQUEST</code> authorizer, this is not defined. </p>
                */
            providerARNs?: string[];
            /**
                * <p>Optional customer-defined field, used in OpenAPI imports and exports without functional impact.</p>
                */
            authType?: string;
            /**
                * <p>Specifies the authorizer's Uniform Resource Identifier (URI). For <code>TOKEN</code> or <code>REQUEST</code> authorizers, this must be a well-formed Lambda function URI, for example, <code>arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations</code>. In general, the URI has this form  <code>arn:aws:apigateway:{region}:lambda:path/{service_api}</code>, where <code>{region}</code> is the same as the region hosting the Lambda function, <code>path</code> indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial <code>/</code>. For Lambda functions, this is usually of the form <code>/2015-03-31/functions/[FunctionARN]/invocations</code>.</p>
                */
            authorizerUri?: string;
            /**
                * <p>Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.</p>
                */
            authorizerCredentials?: string;
            /**
                * <p>The identity source for which authorization is requested. For a <code>TOKEN</code> or
                *         <code>COGNITO_USER_POOLS</code> authorizer, this is required and specifies the request
                *       header mapping expression for the custom header holding the authorization token submitted by
                *       the client. For example, if the token header name is <code>Auth</code>, the header mapping expression is
                *       <code>method.request.header.Auth</code>. For the <code>REQUEST</code> authorizer, this is required when authorization
                *       caching is enabled. The value is a comma-separated string of one or more mapping expressions
                *       of the specified request parameters. For example, if an <code>Auth</code> header, a <code>Name</code> query string
                *       parameter are defined as identity sources, this value is <code>method.request.header.Auth</code>,
                *       <code>method.request.querystring.Name</code>. These parameters will be used to derive the authorization
                *       caching key and to perform runtime validation of the <code>REQUEST</code> authorizer by verifying all of
                *       the identity-related request parameters are present, not null and non-empty. Only when this is
                *       true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401
                *       Unauthorized response without calling the Lambda function. The valid value is a string of
                *       comma-separated mapping expressions of the specified request parameters. When the
                *       authorization caching is not enabled, this property is optional. </p>
                */
            identitySource?: string;
            /**
                * <p>A validation expression for the incoming identity token. For <code>TOKEN</code> authorizers, this value is a regular expression. For <code>COGNITO_USER_POOLS</code> authorizers, API Gateway will match the <code>aud</code> field of the incoming token from the client against the specified regular expression. It will invoke the authorizer's Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression does not apply to the <code>REQUEST</code> authorizer.</p>
                */
            identityValidationExpression?: string;
            /**
                * <p>The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.</p>
                */
            authorizerResultTtlInSeconds?: number;
    }
    export namespace Authorizer {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Authorizer) => any;
    }
    /**
        * <p>Represents a collection of Authorizer resources.</p>
        */
    export interface Authorizers {
            /**
                * <p>The current page of elements from this collection.</p>
                */
            items?: Authorizer[];
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
    }
    export namespace Authorizers {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Authorizers) => any;
    }
    /**
        * <p>The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.</p>
        */
    export class BadRequestException extends __BaseException {
            readonly name: "BadRequestException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BadRequestException, __BaseException>);
    }
    /**
        * <p>The request configuration has conflicts. For details, see the accompanying error message.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>A reference to a unique stage identified in the format <code>{restApiId}/{stage}</code>.</p>
        */
    export interface StageKey {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId?: string;
            /**
                * <p>The stage name associated with the stage key.</p>
                */
            stageName?: string;
    }
    export namespace StageKey {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StageKey) => any;
    }
    /**
        * <p>Request to create an ApiKey resource.</p>
        */
    export interface CreateApiKeyRequest {
            /**
                * <p>The name of the ApiKey.</p>
                */
            name?: string;
            /**
                * <p>The description of the ApiKey.</p>
                */
            description?: string;
            /**
                * <p>Specifies whether the ApiKey can be used by callers.</p>
                */
            enabled?: boolean;
            /**
                * <p>Specifies whether (<code>true</code>) or not (<code>false</code>) the key identifier is distinct from the created API key value. This parameter is deprecated and should not be used.</p>
                */
            generateDistinctId?: boolean;
            /**
                * <p>Specifies a value of the API key.</p>
                */
            value?: string;
            /**
                * <p>DEPRECATED FOR USAGE PLANS - Specifies stages associated with the API key.</p>
                */
            stageKeys?: StageKey[];
            /**
                * <p>An AWS Marketplace customer identifier , when integrating with the AWS SaaS Marketplace.</p>
                */
            customerId?: string;
            /**
                * <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateApiKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateApiKeyRequest) => any;
    }
    /**
        * <p>The request exceeded the rate limit. Retry after the specified time period.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            retryAfterSeconds?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>The requested resource is not found. Make sure that the request URI is correct.</p>
        */
    export class NotFoundException extends __BaseException {
            readonly name: "NotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
    }
    /**
        * <p>The request has reached its throttling limit. Retry after the specified time period.</p>
        */
    export class TooManyRequestsException extends __BaseException {
            readonly name: "TooManyRequestsException";
            readonly $fault: "client";
            retryAfterSeconds?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
    }
    /**
        * <p>The request is denied because the caller has insufficient permissions.</p>
        */
    export class UnauthorizedException extends __BaseException {
            readonly name: "UnauthorizedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnauthorizedException, __BaseException>);
    }
    /**
        * <p>Request to add a new Authorizer to an existing RestApi resource.</p>
        */
    export interface CreateAuthorizerRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The name of the authorizer.</p>
                */
            name: string | undefined;
            /**
                * <p>The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.</p>
                */
            type: AuthorizerType | string | undefined;
            /**
                * <p>A list of the Amazon Cognito user pool ARNs for the <code>COGNITO_USER_POOLS</code> authorizer. Each element is of this format: <code>arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}</code>. For a <code>TOKEN</code> or <code>REQUEST</code> authorizer, this is not defined. </p>
                */
            providerARNs?: string[];
            /**
                * <p>Optional customer-defined field, used in OpenAPI imports and exports without functional impact.</p>
                */
            authType?: string;
            /**
                * <p>Specifies the authorizer's Uniform Resource Identifier (URI). For <code>TOKEN</code> or <code>REQUEST</code> authorizers, this must be a well-formed Lambda function URI, for example, <code>arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations</code>. In general, the URI has this form  <code>arn:aws:apigateway:{region}:lambda:path/{service_api}</code>, where <code>{region}</code> is the same as the region hosting the Lambda function, <code>path</code> indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial <code>/</code>. For Lambda functions, this is usually of the form <code>/2015-03-31/functions/[FunctionARN]/invocations</code>.</p>
                */
            authorizerUri?: string;
            /**
                * <p>Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.</p>
                */
            authorizerCredentials?: string;
            /**
                * <p>The identity source for which authorization is requested. For a <code>TOKEN</code> or
                *         <code>COGNITO_USER_POOLS</code> authorizer, this is required and specifies the request
                *       header mapping expression for the custom header holding the authorization token submitted by
                *       the client. For example, if the token header name is <code>Auth</code>, the header mapping
                *       expression is <code>method.request.header.Auth</code>. For the <code>REQUEST</code>
                *       authorizer, this is required when authorization caching is enabled. The value is a
                *       comma-separated string of one or more mapping expressions of the specified request parameters.
                *       For example, if an <code>Auth</code> header, a <code>Name</code> query string parameter are
                *       defined as identity sources, this value is <code>method.request.header.Auth,
                *         method.request.querystring.Name</code>. These parameters will be used to derive the
                *       authorization caching key and to perform runtime validation of the <code>REQUEST</code>
                *       authorizer by verifying all of the identity-related request parameters are present, not null
                *       and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda
                *       function, otherwise, it returns a 401 Unauthorized response without calling the Lambda
                *       function. The valid value is a string of comma-separated mapping expressions of the specified
                *       request parameters. When the authorization caching is not enabled, this property is
                *       optional.</p>
                */
            identitySource?: string;
            /**
                * <p>A validation expression for the incoming identity token. For <code>TOKEN</code> authorizers, this value is a regular expression. For <code>COGNITO_USER_POOLS</code> authorizers, API Gateway will match the <code>aud</code> field of the incoming token from the client against the specified regular expression. It will invoke the authorizer's Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression does not apply to the <code>REQUEST</code> authorizer.</p>
                */
            identityValidationExpression?: string;
            /**
                * <p>The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.</p>
                */
            authorizerResultTtlInSeconds?: number;
    }
    export namespace CreateAuthorizerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAuthorizerRequest) => any;
    }
    /**
        * <p>Represents the base path that callers of the API must provide as part of the URL after the domain name.</p>
        */
    export interface BasePathMapping {
            /**
                * <p>The base path name that callers of the API must provide as part of the URL after the domain name.</p>
                */
            basePath?: string;
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId?: string;
            /**
                * <p>The name of the associated stage.</p>
                */
            stage?: string;
    }
    export namespace BasePathMapping {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BasePathMapping) => any;
    }
    /**
        * <p>Requests API Gateway to create a new BasePathMapping resource.</p>
        */
    export interface CreateBasePathMappingRequest {
            /**
                * <p>The domain name of the BasePathMapping resource to create.</p>
                */
            domainName: string | undefined;
            /**
                * <p>The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Specify '(none)' if you do not want callers to specify a base path name after the domain name.</p>
                */
            basePath?: string;
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The name of the API's stage that you want to use for this mapping. Specify '(none)' if you want callers to explicitly specify the stage name after any base path name.</p>
                */
            stage?: string;
    }
    export namespace CreateBasePathMappingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateBasePathMappingRequest) => any;
    }
    export enum CacheClusterSize {
            SIZE_0_POINT_5_GB = "0.5",
            SIZE_118_GB = "118",
            SIZE_13_POINT_5_GB = "13.5",
            SIZE_1_POINT_6_GB = "1.6",
            SIZE_237_GB = "237",
            SIZE_28_POINT_4_GB = "28.4",
            SIZE_58_POINT_2_GB = "58.2",
            SIZE_6_POINT_1_GB = "6.1"
    }
    /**
        * <p>The input configuration for a canary deployment.</p>
        */
    export interface DeploymentCanarySettings {
            /**
                * <p>The percentage (0.0-100.0) of traffic routed to the canary deployment.</p>
                */
            percentTraffic?: number;
            /**
                * <p>A stage variable overrides used for the canary release deployment. They can override existing stage variables or add new stage variables for the canary release deployment. These stage variables are represented as a string-to-string map between stage variable names and their values.</p>
                */
            stageVariableOverrides?: Record<string, string>;
            /**
                * <p>A Boolean flag to indicate whether the canary release deployment uses the stage cache or not.</p>
                */
            useStageCache?: boolean;
    }
    export namespace DeploymentCanarySettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeploymentCanarySettings) => any;
    }
    /**
        * <p>Requests API Gateway to create a Deployment resource.</p>
        */
    export interface CreateDeploymentRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The name of the Stage resource for the Deployment resource to create.</p>
                */
            stageName?: string;
            /**
                * <p>The description of the Stage resource for the Deployment resource to create.</p>
                */
            stageDescription?: string;
            /**
                * <p>The description for the Deployment resource to create.</p>
                */
            description?: string;
            /**
                * <p>Enables a cache cluster for the Stage resource specified in the input.</p>
                */
            cacheClusterEnabled?: boolean;
            /**
                * <p>Specifies the cache cluster size for the Stage resource specified in the input, if a cache cluster is enabled.</p>
                */
            cacheClusterSize?: CacheClusterSize | string;
            /**
                * <p>A map that defines the stage variables for the Stage resource that is associated
                *           with the new deployment. Variable names can have alphanumeric and underscore characters, and the values
                *           must match <code>[A-Za-z0-9-._~:/?#&=,]+</code>.</p>
                */
            variables?: Record<string, string>;
            /**
                * <p>The input configuration for the canary deployment when the deployment is a canary release deployment. </p>
                */
            canarySettings?: DeploymentCanarySettings;
            /**
                * <p>Specifies whether active tracing with X-ray is enabled for the Stage.</p>
                */
            tracingEnabled?: boolean;
    }
    export namespace CreateDeploymentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDeploymentRequest) => any;
    }
    /**
        * <p>Represents a summary of a Method resource, given a particular date and time.</p>
        */
    export interface MethodSnapshot {
            /**
                * <p>The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.</p>
                */
            authorizationType?: string;
            /**
                * <p>Specifies whether the method requires a valid ApiKey.</p>
                */
            apiKeyRequired?: boolean;
    }
    export namespace MethodSnapshot {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MethodSnapshot) => any;
    }
    /**
        * <p>An immutable representation of a RestApi resource that can be called by users using Stages. A deployment must be associated with a Stage for it to be callable over the Internet.</p>
        */
    export interface Deployment {
            /**
                * <p>The identifier for the deployment resource.</p>
                */
            id?: string;
            /**
                * <p>The description for the deployment resource.</p>
                */
            description?: string;
            /**
                * <p>The date and time that the deployment resource was created.</p>
                */
            createdDate?: Date;
            /**
                * <p>A summary of the RestApi at the date and time that the deployment resource was created.</p>
                */
            apiSummary?: Record<string, Record<string, MethodSnapshot>>;
    }
    export namespace Deployment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Deployment) => any;
    }
    /**
        * <p>The requested service is not available. For details see the accompanying error message. Retry after the specified time period.</p>
        */
    export class ServiceUnavailableException extends __BaseException {
            readonly name: "ServiceUnavailableException";
            readonly $fault: "server";
            retryAfterSeconds?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>);
    }
    export enum DocumentationPartType {
            API = "API",
            AUTHORIZER = "AUTHORIZER",
            METHOD = "METHOD",
            MODEL = "MODEL",
            PATH_PARAMETER = "PATH_PARAMETER",
            QUERY_PARAMETER = "QUERY_PARAMETER",
            REQUEST_BODY = "REQUEST_BODY",
            REQUEST_HEADER = "REQUEST_HEADER",
            RESOURCE = "RESOURCE",
            RESPONSE = "RESPONSE",
            RESPONSE_BODY = "RESPONSE_BODY",
            RESPONSE_HEADER = "RESPONSE_HEADER"
    }
    /**
        * <p>Specifies the target API entity to which the documentation applies.</p>
        */
    export interface DocumentationPartLocation {
            /**
                * <p>The type of API entity to which the documentation content applies. Valid values are <code>API</code>, <code>AUTHORIZER</code>, <code>MODEL</code>, <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>,  <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. Content inheritance does not apply to any entity of the <code>API</code>, <code>AUTHORIZER</code>, <code>METHOD</code>,  <code>MODEL</code>, <code>REQUEST_BODY</code>, or <code>RESOURCE</code> type.</p>
                */
            type: DocumentationPartType | string | undefined;
            /**
                * <p>The URL path of the target. It is a valid field for the API entity types of <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>/</code> for the root resource. When an applicable child entity inherits the content of another entity of the same type with more general specifications of the other <code>location</code> attributes,  the child entity's <code>path</code> attribute must match that of the parent entity as a prefix.</p>
                */
            path?: string;
            /**
                * <p>The HTTP verb of a method. It is a valid field for the API entity types of  <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>,  <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>*</code> for any method.  When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other <code>location</code> attributes,  the child entity's <code>method</code> attribute must match that of the parent entity exactly.</p>
                */
            method?: string;
            /**
                * <p>The HTTP status code of a response. It is a valid field for the API entity types of <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>*</code> for any status code. When an applicable child  entity inherits the content of an entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity's <code>statusCode</code> attribute must match that of the parent entity exactly.</p>
                */
            statusCode?: string;
            /**
                * <p>The name of the targeted API entity. It is a valid and required field for the API entity types of <code>AUTHORIZER</code>, <code>MODEL</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code> and <code>RESPONSE_HEADER</code>. It is an invalid field for any other entity type.</p>
                */
            name?: string;
    }
    export namespace DocumentationPartLocation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentationPartLocation) => any;
    }
    /**
        * <p>Creates a new documentation part of a given API.</p>
        */
    export interface CreateDocumentationPartRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The location of the targeted API entity of the to-be-created documentation part.</p>
                */
            location: DocumentationPartLocation | undefined;
            /**
                * <p>The new documentation content map of the targeted API entity. Enclosed key-value pairs are API-specific, but only OpenAPI-compliant key-value pairs can be exported and, hence, published.</p>
                */
            properties: string | undefined;
    }
    export namespace CreateDocumentationPartRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDocumentationPartRequest) => any;
    }
    /**
        * <p>A documentation part for a targeted API entity.</p>
        */
    export interface DocumentationPart {
            /**
                * <p>The DocumentationPart identifier, generated by API Gateway when the <code>DocumentationPart</code> is created.</p>
                */
            id?: string;
            /**
                * <p>The location of the API entity to which the documentation applies. Valid fields depend on the targeted API entity type. All the valid location fields are not required. If not explicitly specified, a valid location field is treated as a wildcard and associated documentation content may be inherited by matching entities, unless overridden.</p>
                */
            location?: DocumentationPartLocation;
            /**
                * <p>A content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., <code>"{ \"description\": \"The API does ...\" }"</code>.  Only OpenAPI-compliant documentation-related fields from the properties map are exported and, hence, published as part of the API entity definitions, while the original documentation parts are exported in a OpenAPI extension of <code>x-amazon-apigateway-documentation</code>.</p>
                */
            properties?: string;
    }
    export namespace DocumentationPart {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentationPart) => any;
    }
    /**
        * <p>Creates a new documentation version of a given API.</p>
        */
    export interface CreateDocumentationVersionRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The version identifier of the new snapshot.</p>
                */
            documentationVersion: string | undefined;
            /**
                * <p>The stage name to be associated with the new documentation snapshot.</p>
                */
            stageName?: string;
            /**
                * <p>A description about the new documentation snapshot.</p>
                */
            description?: string;
    }
    export namespace CreateDocumentationVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDocumentationVersionRequest) => any;
    }
    /**
        * <p>A snapshot of the documentation of an API.</p>
        */
    export interface DocumentationVersion {
            /**
                * <p>The version identifier of the API documentation snapshot.</p>
                */
            version?: string;
            /**
                * <p>The date when the API documentation snapshot is created.</p>
                */
            createdDate?: Date;
            /**
                * <p>The description of the API documentation snapshot.</p>
                */
            description?: string;
    }
    export namespace DocumentationVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentationVersion) => any;
    }
    export type EndpointType = "EDGE" | "PRIVATE" | "REGIONAL";
    /**
        * <p>The endpoint configuration to indicate the types of endpoints an API (RestApi) or its custom domain name (DomainName) has. </p>
        */
    export interface EndpointConfiguration {
            /**
                * <p>A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For an edge-optimized API and its custom domain name, the endpoint type is <code>"EDGE"</code>. For a regional API and its custom domain name, the endpoint type is <code>REGIONAL</code>. For a private API, the endpoint type is <code>PRIVATE</code>.</p>
                */
            types?: (EndpointType | string)[];
            /**
                * <p>A list of VpcEndpointIds of an API (RestApi) against which to create Route53 ALIASes. It is only supported for <code>PRIVATE</code> endpoint type.</p>
                */
            vpcEndpointIds?: string[];
    }
    export namespace EndpointConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EndpointConfiguration) => any;
    }
    /**
        * <p>The mutual TLS authentication configuration for a custom domain name. If specified, API Gateway
        *       performs two-way authentication between the client and the server. Clients must present a
        *       trusted certificate to access your API.</p>
        */
    export interface MutualTlsAuthenticationInput {
            /**
                * <p>An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example
                *       <code>s3://bucket-name/key-name</code>. The truststore can contain certificates from public or private
                *       certificate authorities. To update the truststore, upload a new version to S3, and then update
                *       your custom domain name to use the new version. To update the truststore, you must have
                *       permissions to access the S3 object.</p>
                */
            truststoreUri?: string;
            /**
                * <p>The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket</p>
                */
            truststoreVersion?: string;
    }
    export namespace MutualTlsAuthenticationInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MutualTlsAuthenticationInput) => any;
    }
    export type SecurityPolicy = "TLS_1_0" | "TLS_1_2";
    /**
        * <p>A request to create a new domain name.</p>
        */
    export interface CreateDomainNameRequest {
            /**
                * <p>The name of the DomainName resource.</p>
                */
            domainName: string | undefined;
            /**
                * <p>The user-friendly name of the certificate that will be used by edge-optimized endpoint for this domain name.</p>
                */
            certificateName?: string;
            /**
                * <p>[Deprecated] The body of the server certificate that will be used by edge-optimized endpoint for this domain name provided by your certificate authority.</p>
                */
            certificateBody?: string;
            /**
                * <p>[Deprecated] Your edge-optimized endpoint's domain name certificate's private key.</p>
                */
            certificatePrivateKey?: string;
            /**
                * <p>[Deprecated] The intermediate certificates and optionally the root certificate, one after the other without any blank lines, used by an edge-optimized endpoint for this domain name. If you include the root certificate, your certificate chain must start with intermediate certificates and end with the root certificate. Use the intermediate certificates that were provided by your certificate authority. Do not include any intermediaries that are not in the chain of trust path.</p>
                */
            certificateChain?: string;
            /**
                * <p>The reference to an AWS-managed certificate that will be used by edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.</p>
                */
            certificateArn?: string;
            /**
                * <p>The user-friendly name of the certificate that will be used by regional endpoint for this domain name.</p>
                */
            regionalCertificateName?: string;
            /**
                * <p>The reference to an AWS-managed certificate that will be used by regional endpoint for this domain name. AWS Certificate Manager is the only supported source.</p>
                */
            regionalCertificateArn?: string;
            /**
                * <p>The endpoint configuration of this DomainName showing the endpoint types of the domain name. </p>
                */
            endpointConfiguration?: EndpointConfiguration;
            /**
                * <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are <code>TLS_1_0</code> and <code>TLS_1_2</code>.</p>
                */
            securityPolicy?: SecurityPolicy | string;
            /**
                * <p>The mutual TLS authentication configuration for a custom domain name. If specified, API Gateway
                *       performs two-way authentication between the client and the server. Clients must present a
                *       trusted certificate to access your API.</p>
                */
            mutualTlsAuthentication?: MutualTlsAuthenticationInput;
            /**
                * <p>The ARN of the public certificate issued by ACM to validate ownership of your custom
                *       domain. Only required when configuring mutual TLS and using an ACM imported or private CA
                *       certificate ARN as the regionalCertificateArn.</p>
                */
            ownershipVerificationCertificateArn?: string;
    }
    export namespace CreateDomainNameRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDomainNameRequest) => any;
    }
    export enum DomainNameStatus {
            AVAILABLE = "AVAILABLE",
            PENDING = "PENDING",
            PENDING_CERTIFICATE_REIMPORT = "PENDING_CERTIFICATE_REIMPORT",
            PENDING_OWNERSHIP_VERIFICATION = "PENDING_OWNERSHIP_VERIFICATION",
            UPDATING = "UPDATING"
    }
    /**
        * <p>The mutual TLS authentication configuration for a custom domain name. If specified, API Gateway
        *       performs two-way authentication between the client and the server. Clients must present a
        *       trusted certificate to access your API.</p>
        */
    export interface MutualTlsAuthentication {
            /**
                * <p>An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example
                *       <code>s3://bucket-name/key-name</code>. The truststore can contain certificates from public or private
                *       certificate authorities. To update the truststore, upload a new version to S3, and then update
                *       your custom domain name to use the new version. To update the truststore, you must have
                *       permissions to access the S3 object.</p>
                */
            truststoreUri?: string;
            /**
                * <p>The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.</p>
                */
            truststoreVersion?: string;
            /**
                * <p>A list of warnings that API Gateway returns while processing your truststore. Invalid
                *       certificates produce warnings. Mutual TLS is still enabled, but some clients might not be able
                *       to access your API. To resolve warnings, upload a new truststore to S3, and then update you
                *       domain name to use the new version.</p>
                */
            truststoreWarnings?: string[];
    }
    export namespace MutualTlsAuthentication {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MutualTlsAuthentication) => any;
    }
    /**
        * <p>Represents a custom domain name as a user-friendly host name of an API (RestApi).</p>
        */
    export interface DomainName {
            /**
                * <p>The custom domain name as an API host name, for example, <code>my-api.example.com</code>.</p>
                */
            domainName?: string;
            /**
                * <p>The name of the certificate that will be used by edge-optimized endpoint for this domain name.</p>
                */
            certificateName?: string;
            /**
                * <p>The reference to an AWS-managed certificate that will be used by edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.</p>
                */
            certificateArn?: string;
            /**
                * <p>The timestamp when the certificate that was used by edge-optimized endpoint for this domain name was uploaded.</p>
                */
            certificateUploadDate?: Date;
            /**
                * <p>The domain name associated with the regional endpoint for this custom domain name. You set up this association by adding a DNS record that points the custom domain name to this regional domain name. The regional domain name is returned by API Gateway when you create a regional endpoint.</p>
                */
            regionalDomainName?: string;
            /**
                * <p>The region-specific Amazon Route 53 Hosted Zone ID of the regional endpoint. For more information, see Set up a Regional Custom Domain Name and AWS Regions and Endpoints for API Gateway. </p>
                */
            regionalHostedZoneId?: string;
            /**
                * <p>The name of the certificate that will be used for validating the regional domain name.</p>
                */
            regionalCertificateName?: string;
            /**
                * <p>The reference to an AWS-managed certificate that will be used for validating the regional domain name. AWS Certificate Manager is the only supported source.</p>
                */
            regionalCertificateArn?: string;
            /**
                * <p>The domain name of the Amazon CloudFront distribution associated with this custom domain name for an edge-optimized endpoint. You set up this association when adding a DNS record pointing the custom domain name to this distribution name. For more information about CloudFront distributions, see the Amazon CloudFront documentation.</p>
                */
            distributionDomainName?: string;
            /**
                * <p>The region-agnostic Amazon Route 53 Hosted Zone ID of the edge-optimized endpoint. The valid value is <code>Z2FDTNDATAQYW2</code> for all the regions. For more information, see Set up a Regional Custom Domain Name and AWS Regions and Endpoints for API Gateway. </p>
                */
            distributionHostedZoneId?: string;
            /**
                * <p>The endpoint configuration of this DomainName showing the endpoint types of the domain name. </p>
                */
            endpointConfiguration?: EndpointConfiguration;
            /**
                * <p>The status of the DomainName migration. The valid values are <code>AVAILABLE</code> and <code>UPDATING</code>. If the status is <code>UPDATING</code>, the domain cannot be modified further until the existing operation is complete. If it is <code>AVAILABLE</code>, the domain can be updated.</p>
                */
            domainNameStatus?: DomainNameStatus | string;
            /**
                * <p>An optional text message containing detailed information about status of the DomainName migration.</p>
                */
            domainNameStatusMessage?: string;
            /**
                * <p>The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are <code>TLS_1_0</code> and <code>TLS_1_2</code>.</p>
                */
            securityPolicy?: SecurityPolicy | string;
            /**
                * <p>The collection of tags. Each tag element is associated with a given resource.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The mutual TLS authentication configuration for a custom domain name. If specified, API Gateway
                *       performs two-way authentication between the client and the server. Clients must present a
                *       trusted certificate to access your API.</p>
                */
            mutualTlsAuthentication?: MutualTlsAuthentication;
            /**
                * <p>The ARN of the public certificate issued by ACM to validate ownership of your custom
                *       domain. Only required when configuring mutual TLS and using an ACM imported or private CA
                *       certificate ARN as the regionalCertificateArn.</p>
                */
            ownershipVerificationCertificateArn?: string;
    }
    export namespace DomainName {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainName) => any;
    }
    /**
        * <p>Request to add a new Model to an existing RestApi resource.</p>
        */
    export interface CreateModelRequest {
            /**
                * <p>The RestApi identifier under which the Model will be created.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The name of the model. Must be alphanumeric.</p>
                */
            name: string | undefined;
            /**
                * <p>The description of the model.</p>
                */
            description?: string;
            /**
                * <p>The schema for the model. For <code>application/json</code> models, this should be JSON schema draft 4 model.</p>
                */
            schema?: string;
            /**
                * <p>The content-type for the model.</p>
                */
            contentType: string | undefined;
    }
    export namespace CreateModelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateModelRequest) => any;
    }
    /**
        * <p>Represents the data structure of a method's request or response payload.</p>
        */
    export interface Model {
            /**
                * <p>The identifier for the model resource.</p>
                */
            id?: string;
            /**
                * <p>The name of the model. Must be an alphanumeric string.</p>
                */
            name?: string;
            /**
                * <p>The description of the model.</p>
                */
            description?: string;
            /**
                * <p>The schema for the model. For <code>application/json</code> models, this should be JSON schema draft 4 model. Do not include "\*\/" characters in the description of any properties because such "\*\/" characters may be interpreted as the closing marker for comments in some languages, such as Java or JavaScript, causing the installation of your API's SDK generated by API Gateway to fail.</p>
                */
            schema?: string;
            /**
                * <p>The content-type for the model.</p>
                */
            contentType?: string;
    }
    export namespace Model {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Model) => any;
    }
    /**
        * <p>Creates a RequestValidator of a given RestApi.</p>
        */
    export interface CreateRequestValidatorRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The name of the to-be-created RequestValidator.</p>
                */
            name?: string;
            /**
                * <p>A Boolean flag to indicate whether to validate request body according to the configured model schema for the method (<code>true</code>) or not (<code>false</code>).</p>
                */
            validateRequestBody?: boolean;
            /**
                * <p>A Boolean flag to indicate whether to validate request parameters, <code>true</code>, or not <code>false</code>.</p>
                */
            validateRequestParameters?: boolean;
    }
    export namespace CreateRequestValidatorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRequestValidatorRequest) => any;
    }
    /**
        * <p>A set of validation rules for incoming Method requests.</p>
        */
    export interface RequestValidator {
            /**
                * <p>The identifier of this RequestValidator.</p>
                */
            id?: string;
            /**
                * <p>The name of this RequestValidator</p>
                */
            name?: string;
            /**
                * <p>A Boolean flag to indicate whether to validate a request body according to the configured Model schema.</p>
                */
            validateRequestBody?: boolean;
            /**
                * <p>A Boolean flag to indicate whether to validate request parameters (<code>true</code>) or not (<code>false</code>).</p>
                */
            validateRequestParameters?: boolean;
    }
    export namespace RequestValidator {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RequestValidator) => any;
    }
    /**
        * <p>Requests API Gateway to create a Resource resource.</p>
        */
    export interface CreateResourceRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The parent resource's identifier.</p>
                */
            parentId: string | undefined;
            /**
                * <p>The last path segment for this resource.</p>
                */
            pathPart: string | undefined;
    }
    export namespace CreateResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateResourceRequest) => any;
    }
    export enum ConnectionType {
            INTERNET = "INTERNET",
            VPC_LINK = "VPC_LINK"
    }
    export enum ContentHandlingStrategy {
            CONVERT_TO_BINARY = "CONVERT_TO_BINARY",
            CONVERT_TO_TEXT = "CONVERT_TO_TEXT"
    }
    /**
        * <p>Represents an integration response. The status code must map to an existing MethodResponse, and parameters and templates can be used to transform the back-end response.</p>
        */
    export interface IntegrationResponse {
            /**
                * <p>Specifies the status code that is used to map the integration response to an existing MethodResponse.</p>
                */
            statusCode?: string;
            /**
                * <p>Specifies the regular expression (regex) pattern used to choose an integration response based on the response from the back end. For example, if the success response returns nothing and the error response returns some string, you could use the <code>.+</code> regex to match error response. However, make sure that the error response does not contain any newline (<code>\n</code>) character in such cases. If the back end is an AWS Lambda function, the AWS Lambda function error header is matched. For all other HTTP and AWS back ends, the HTTP status code is matched.</p>
                */
            selectionPattern?: string;
            /**
                * <p>A key-value map specifying response parameters that are passed to the method response from the back end.
                *             The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> is a valid and unique response header name and <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.</p>
                */
            responseParameters?: Record<string, string>;
            /**
                * <p>Specifies the templates used to transform the integration response body. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.</p>
                */
            responseTemplates?: Record<string, string>;
            /**
                * <p>Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p>
                *
                *          <p>If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.</p>
                */
            contentHandling?: ContentHandlingStrategy | string;
    }
    export namespace IntegrationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IntegrationResponse) => any;
    }
    /**
        * <p>Specifies the TLS configuration for an integration.</p>
        */
    export interface TlsConfig {
            /**
                * <p>Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is
                *             issued by a supported certificate authority. This isn’t recommended, but it enables you to
                *             use certificates that are signed by private certificate authorities, or certificates
                *             that are self-signed. If enabled, API Gateway still performs basic certificate
                *             validation, which includes checking the certificate's expiration date, hostname, and
                *             presence of a root certificate authority. Supported only for <code>HTTP</code> and
                *             <code>HTTP_PROXY</code> integrations.</p>
                *          <important>
                *             <p>Enabling <code>insecureSkipVerification</code> isn't recommended, especially for integrations with public
                *           HTTPS endpoints. If you enable <code>insecureSkipVerification</code>, you increase the risk of man-in-the-middle attacks.</p>
                *          </important>
                */
            insecureSkipVerification?: boolean;
    }
    export namespace TlsConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TlsConfig) => any;
    }
    export enum IntegrationType {
            AWS = "AWS",
            AWS_PROXY = "AWS_PROXY",
            HTTP = "HTTP",
            HTTP_PROXY = "HTTP_PROXY",
            MOCK = "MOCK"
    }
    /**
        * <p>Represents an HTTP, HTTP_PROXY, AWS, AWS_PROXY, or Mock integration.</p>
        */
    export interface Integration {
            /**
                * <p>Specifies an API method integration type. The valid value is one of the following:</p>
                *
                *         <p>For the HTTP and HTTP proxy integrations, each integration can specify a protocol (<code>http/https</code>), port and path. Standard 80 and 443 ports are supported as well as custom ports above 1024. An HTTP or HTTP proxy integration with a <code>connectionType</code> of <code>VPC_LINK</code> is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.</p>
                */
            type?: IntegrationType | string;
            /**
                * <p>Specifies the integration's HTTP method type.</p>
                */
            httpMethod?: string;
            /**
                * <p>Specifies Uniform Resource Identifier (URI) of the integration endpoint.</p>
                *          <p>For <code>HTTP</code> or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL
                *       according to the RFC-3986 specification, for either standard integration, where <code>connectionType</code>
                *       is not <code>VPC_LINK</code>, or private integration, where <code>connectionType</code> is <code>VPC_LINK</code>. For a private HTTP
                *       integration, the URI is not used for routing. For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of
                *       the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}</code>.
                *       Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the
                *       integrated Amazon Web Services service (e.g., s3); and {subdomain} is a designated subdomain supported by
                *       certain Amazon Web Services  service for fast host-name lookup. action can be used for an Amazon Web Services  service
                *       action-based API, using an Action={name}&{p1}={v1}&p2={v2}... query string. The ensuing
                *       {service_api} refers to a supported action {name} plus any required input parameters.
                *       Alternatively, path can be used for an AWS service path-based API. The ensuing service_api
                *       refers to the path to an Amazon Web Services  service resource, including the region of the integrated Amazon Web Services
                *       service, if applicable. For example, for integration with the S3 API of GetObject, the uri can
                *       be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&Bucket={bucket}&Key={key}</code> or
                *       <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code>
                *          </p>
                */
            uri?: string;
            /**
                * <p>The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.</p>
                */
            connectionType?: ConnectionType | string;
            /**
                * <p>The ID of the VpcLink used for the integration when <code>connectionType=VPC_LINK</code> and undefined, otherwise.</p>
                */
            connectionId?: string;
            /**
                * <p>Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string <code>arn:aws:iam::\*:user/\*</code>. To use resource-based permissions on supported AWS services, specify null.</p>
                */
            credentials?: string;
            /**
                * <p>A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of  <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.</p>
                */
            requestParameters?: Record<string, string>;
            /**
                * <p>Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.</p>
                */
            requestTemplates?: Record<string, string>;
            /**
                * <p>Specifies how the method request body of an unmapped content type will be passed through
                *       the integration request to the back end without transformation. A content type is unmapped if
                *       no mapping template is defined in the integration or the content type does not match any of
                *       the mapped content types, as specified in <code>requestTemplates</code>. The valid value is one of the
                *       following: <code>WHEN_NO_MATCH</code>: passes the method request body through the integration request to
                *       the back end without transformation when the method request content type does not match any
                *       content type associated with the mapping templates defined in the integration request.
                *       <code>WHEN_NO_TEMPLATES</code>: passes the method request body through the integration request to the back
                *       end without transformation when no mapping template is defined in the integration request. If
                *       a template is defined when this option is selected, the method request of an unmapped
                *       content-type will be rejected with an HTTP 415 Unsupported Media Type response. <code>NEVER</code>: rejects
                *       the method request with an HTTP 415 Unsupported Media Type response when either the method
                *       request content type does not match any content type associated with the mapping templates
                *       defined in the integration request or no mapping template is defined in the integration
                *       request.</p>
                */
            passthroughBehavior?: string;
            /**
                * <p>Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p>
                *
                *          <p>If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.</p>
                */
            contentHandling?: ContentHandlingStrategy | string;
            /**
                * <p>Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.</p>
                */
            timeoutInMillis?: number;
            /**
                * <p>Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.</p>
                */
            cacheNamespace?: string;
            /**
                * <p>A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for Method <code>requestParameters</code>.</p>
                */
            cacheKeyParameters?: string[];
            /**
                * <p>Specifies the integration's responses.</p>
                */
            integrationResponses?: Record<string, IntegrationResponse>;
            /**
                * <p>Specifies the TLS configuration for an integration.</p>
                */
            tlsConfig?: TlsConfig;
    }
    export namespace Integration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Integration) => any;
    }
    /**
        * <p>Represents a method response of a given HTTP status code returned to the client. The method response is passed from the back end through the associated integration response that can be transformed using a mapping template. </p>
        */
    export interface MethodResponse {
            /**
                * <p>The method response's status code.</p>
                */
            statusCode?: string;
            /**
                * <p>A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header and the value specifies whether the associated method response header is required or not. The expression of the key must match the pattern <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. API Gateway passes certain integration response data to the method response headers specified here according to the mapping you prescribe in the API's IntegrationResponse. The integration response data that can be mapped include an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)</p>
                */
            responseParameters?: Record<string, boolean>;
            /**
                * <p>Specifies the Model resources used for the response's content-type. Response models are represented as a key/value map, with a content-type as the key and a Model name as the value.</p>
                */
            responseModels?: Record<string, string>;
    }
    export namespace MethodResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MethodResponse) => any;
    }
    /**
        * <p>
        *             Represents a client-facing interface by which the client calls the API to access back-end resources. A Method resource is
        *             integrated with an Integration resource. Both consist of a request and one or more responses. The method request takes
        *             the client input that is passed to the back end through the integration request. A method response returns the output from
        *             the back end to the client through an integration response. A method request is embodied in a Method resource, whereas
        *             an integration request is embodied in an Integration resource.  On the other hand, a method response is represented
        *             by a MethodResponse resource, whereas an integration response is represented by an IntegrationResponse resource.
        *         </p>
        */
    export interface Method {
            /**
                * <p>The method's HTTP verb.</p>
                */
            httpMethod?: string;
            /**
                * <p>The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.</p>
                */
            authorizationType?: string;
            /**
                * <p>The identifier of an Authorizer to use on this method. The <code>authorizationType</code> must be <code>CUSTOM</code>.</p>
                */
            authorizerId?: string;
            /**
                * <p>A boolean flag specifying whether a valid ApiKey is required to invoke this method.</p>
                */
            apiKeyRequired?: boolean;
            /**
                * <p>The identifier of a RequestValidator for request validation.</p>
                */
            requestValidatorId?: string;
            /**
                * <p>A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.</p>
                */
            operationName?: string;
            /**
                * <p>A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key is a method request parameter name matching the pattern of  <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>).  The method request parameter names defined here are available in Integration to be mapped to integration request parameters or templates.</p>
                */
            requestParameters?: Record<string, boolean>;
            /**
                * <p>A key-value map specifying data schemas, represented by Model resources, (as the mapped value) of the request payloads of given content types (as the mapping key).</p>
                */
            requestModels?: Record<string, string>;
            /**
                * <p>Gets a method response associated with a given HTTP status code. </p>
                */
            methodResponses?: Record<string, MethodResponse>;
            /**
                * <p>Gets the method's integration responsible for passing the client-submitted request to the back end and performing necessary transformations to make the request compliant with the back end.</p>
                */
            methodIntegration?: Integration;
            /**
                * <p>A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.</p>
                */
            authorizationScopes?: string[];
    }
    export namespace Method {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Method) => any;
    }
    /**
        * <p>Represents an API resource.</p>
        */
    export interface Resource {
            /**
                * <p>The resource's identifier.</p>
                */
            id?: string;
            /**
                * <p>The parent resource's identifier.</p>
                */
            parentId?: string;
            /**
                * <p>The last path segment for this resource.</p>
                */
            pathPart?: string;
            /**
                * <p>The full path for this resource.</p>
                */
            path?: string;
            /**
                * <p>Gets an API resource's method of a given HTTP verb.</p>
                */
            resourceMethods?: Record<string, Method>;
    }
    export namespace Resource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Resource) => any;
    }
    /**
        * <p>The POST Request to add a new RestApi resource to your collection.</p>
        */
    export interface CreateRestApiRequest {
            /**
                * <p>The name of the RestApi.</p>
                */
            name: string | undefined;
            /**
                * <p>The description of the RestApi.</p>
                */
            description?: string;
            /**
                * <p>A version identifier for the API.</p>
                */
            version?: string;
            /**
                * <p>The ID of the RestApi that you want to clone from.</p>
                */
            cloneFrom?: string;
            /**
                * <p>The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.</p>
                */
            binaryMediaTypes?: string[];
            /**
                * <p>A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.</p>
                */
            minimumCompressionSize?: number;
            /**
                * <p>The source of the API key for metering requests according to a usage plan. Valid values
                *       are: ><code>HEADER</code> to read the API key from the <code>X-API-Key</code> header of a
                *       request. <code>AUTHORIZER</code> to read the API key from the <code>UsageIdentifierKey</code>
                *       from a custom authorizer.</p>
                */
            apiKeySource?: ApiKeySourceType | string;
            /**
                * <p>The endpoint configuration of this RestApi showing the endpoint types of the API. </p>
                */
            endpointConfiguration?: EndpointConfiguration;
            /**
                * <p>A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration.</p>
                */
            policy?: string;
            /**
                * <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>Specifies whether clients can invoke your API by using the default <code>execute-api</code> endpoint.
                *       By default, clients can invoke your API with the default
                *       <code>https://{api_id}.execute-api.{region}.amazonaws.com</code> endpoint. To require that clients use a
                *       custom domain name to invoke your API, disable the default endpoint</p>
                */
            disableExecuteApiEndpoint?: boolean;
    }
    export namespace CreateRestApiRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRestApiRequest) => any;
    }
    /**
        * <p>Represents a REST API.</p>
        */
    export interface RestApi {
            /**
                * <p>The API's identifier. This identifier is unique across all of your APIs in API Gateway.</p>
                */
            id?: string;
            /**
                * <p>The API's name.</p>
                */
            name?: string;
            /**
                * <p>The API's description.</p>
                */
            description?: string;
            /**
                * <p>The timestamp when the API was created.</p>
                */
            createdDate?: Date;
            /**
                * <p>A version identifier for the API.</p>
                */
            version?: string;
            /**
                * <p>The warning messages reported when <code>failonwarnings</code> is turned on during API import.</p>
                */
            warnings?: string[];
            /**
                * <p>The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.</p>
                */
            binaryMediaTypes?: string[];
            /**
                * <p>A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.</p>
                */
            minimumCompressionSize?: number;
            /**
                * <p>The source of the API key for metering requests according to a usage plan. Valid values
                *       are: ><code>HEADER</code> to read the API key from the <code>X-API-Key</code> header of a
                *       request. <code>AUTHORIZER</code> to read the API key from the <code>UsageIdentifierKey</code>
                *       from a custom authorizer.</p>
                */
            apiKeySource?: ApiKeySourceType | string;
            /**
                * <p>The endpoint configuration of this RestApi showing the endpoint types of the API. </p>
                */
            endpointConfiguration?: EndpointConfiguration;
            /**
                * <p>A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration.</p>
                */
            policy?: string;
            /**
                * <p>The collection of tags. Each tag element is associated with a given resource.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>Specifies whether clients can invoke your API by using the default <code>execute-api</code> endpoint.
                *       By default, clients can invoke your API with the default
                *       <code>https://{api_id}.execute-api.{region}.amazonaws.com</code> endpoint. To require that clients use a
                *       custom domain name to invoke your API, disable the default endpoint.</p>
                */
            disableExecuteApiEndpoint?: boolean;
    }
    export namespace RestApi {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestApi) => any;
    }
    /**
        * <p>Configuration settings of a canary deployment.</p>
        */
    export interface CanarySettings {
            /**
                * <p>The percent (0-100) of traffic diverted to a canary deployment.</p>
                */
            percentTraffic?: number;
            /**
                * <p>The ID of the canary deployment.</p>
                */
            deploymentId?: string;
            /**
                * <p>Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values.</p>
                */
            stageVariableOverrides?: Record<string, string>;
            /**
                * <p>A Boolean flag to indicate whether the canary deployment uses the stage cache or not.</p>
                */
            useStageCache?: boolean;
    }
    export namespace CanarySettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CanarySettings) => any;
    }
    /**
        * <p>Requests API Gateway to create a Stage resource.</p>
        */
    export interface CreateStageRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The name for the Stage resource. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.</p>
                */
            stageName: string | undefined;
            /**
                * <p>The identifier of the Deployment resource for the Stage resource.</p>
                */
            deploymentId: string | undefined;
            /**
                * <p>The description of the Stage resource.</p>
                */
            description?: string;
            /**
                * <p>Whether cache clustering is enabled for the stage.</p>
                */
            cacheClusterEnabled?: boolean;
            /**
                * <p>The stage's cache cluster size.</p>
                */
            cacheClusterSize?: CacheClusterSize | string;
            /**
                * <p>A map that defines the stage variables for the new Stage resource. Variable names
                *           can have alphanumeric and underscore characters, and the values must match
                *           <code>[A-Za-z0-9-._~:/?#&=,]+</code>.</p>
                */
            variables?: Record<string, string>;
            /**
                * <p>The version of the associated API documentation.</p>
                */
            documentationVersion?: string;
            /**
                * <p>The canary deployment settings of this stage.</p>
                */
            canarySettings?: CanarySettings;
            /**
                * <p>Specifies whether active tracing with X-ray is enabled for the Stage.</p>
                */
            tracingEnabled?: boolean;
            /**
                * <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateStageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateStageRequest) => any;
    }
    export enum CacheClusterStatus {
            AVAILABLE = "AVAILABLE",
            CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS",
            DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS",
            FLUSH_IN_PROGRESS = "FLUSH_IN_PROGRESS",
            NOT_AVAILABLE = "NOT_AVAILABLE"
    }
    export enum UnauthorizedCacheControlHeaderStrategy {
            FAIL_WITH_403 = "FAIL_WITH_403",
            SUCCEED_WITHOUT_RESPONSE_HEADER = "SUCCEED_WITHOUT_RESPONSE_HEADER",
            SUCCEED_WITH_RESPONSE_HEADER = "SUCCEED_WITH_RESPONSE_HEADER"
    }
    /**
        * <p>Specifies the method setting properties.</p>
        */
    export interface MethodSetting {
            /**
                * <p>Specifies whether Amazon CloudWatch metrics are enabled for this method. The PATCH path for this setting is <code>/{method_setting_key}/metrics/enabled</code>, and the value is a Boolean.</p>
                */
            metricsEnabled?: boolean;
            /**
                * <p>Specifies the logging level for this method, which affects the log entries pushed to Amazon CloudWatch Logs. The PATCH path for this setting is <code>/{method_setting_key}/logging/loglevel</code>, and the available levels are <code>OFF</code>, <code>ERROR</code>, and <code>INFO</code>. Choose <code>ERROR</code> to write only error-level entries to CloudWatch Logs, or choose <code>INFO</code> to include all <code>ERROR</code> events as well as extra informational events.</p>
                */
            loggingLevel?: string;
            /**
                * <p>Specifies whether data trace logging is enabled for this method, which affects the log entries pushed to Amazon CloudWatch Logs. The PATCH path for this setting is <code>/{method_setting_key}/logging/dataTrace</code>, and the value is a Boolean.</p>
                */
            dataTraceEnabled?: boolean;
            /**
                * <p>Specifies the throttling burst limit. The PATCH path for this setting is <code>/{method_setting_key}/throttling/burstLimit</code>, and the value is an integer.</p>
                */
            throttlingBurstLimit?: number;
            /**
                * <p>Specifies the throttling rate limit. The PATCH path for this setting is <code>/{method_setting_key}/throttling/rateLimit</code>, and the value is a double.</p>
                */
            throttlingRateLimit?: number;
            /**
                * <p>Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached. The PATCH path for this setting is <code>/{method_setting_key}/caching/enabled</code>, and the value is a Boolean.</p>
                */
            cachingEnabled?: boolean;
            /**
                * <p>Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached. The PATCH path for this setting is <code>/{method_setting_key}/caching/ttlInSeconds</code>, and the value is an integer.</p>
                */
            cacheTtlInSeconds?: number;
            /**
                * <p>Specifies whether the cached responses are encrypted. The PATCH path for this setting is <code>/{method_setting_key}/caching/dataEncrypted</code>, and the value is a Boolean.</p>
                */
            cacheDataEncrypted?: boolean;
            /**
                * <p>Specifies whether authorization is required for a cache invalidation request. The PATCH path for this setting is <code>/{method_setting_key}/caching/requireAuthorizationForCacheControl</code>, and the value is a Boolean.</p>
                */
            requireAuthorizationForCacheControl?: boolean;
            /**
                * <p>Specifies how to handle unauthorized requests for cache invalidation. The PATCH path for this setting is <code>/{method_setting_key}/caching/unauthorizedCacheControlHeaderStrategy</code>, and the available values are <code>FAIL_WITH_403</code>, <code>SUCCEED_WITH_RESPONSE_HEADER</code>, <code>SUCCEED_WITHOUT_RESPONSE_HEADER</code>.</p>
                */
            unauthorizedCacheControlHeaderStrategy?: UnauthorizedCacheControlHeaderStrategy | string;
    }
    export namespace MethodSetting {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MethodSetting) => any;
    }
    /**
        * <p>Represents a unique identifier for a version of a deployed RestApi that is callable by users.</p>
        */
    export interface Stage {
            /**
                * <p>The identifier of the Deployment that the stage points to.</p>
                */
            deploymentId?: string;
            /**
                * <p>The identifier of a client certificate for an API stage.</p>
                */
            clientCertificateId?: string;
            /**
                * <p>The name of the stage is the first path segment in the Uniform Resource Identifier (URI) of a call to API Gateway. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.</p>
                */
            stageName?: string;
            /**
                * <p>The stage's description.</p>
                */
            description?: string;
            /**
                * <p>Specifies whether a cache cluster is enabled for the stage.</p>
                */
            cacheClusterEnabled?: boolean;
            /**
                * <p>The size of the cache cluster for the stage, if enabled.</p>
                */
            cacheClusterSize?: CacheClusterSize | string;
            /**
                * <p>The status of the cache cluster for the stage, if enabled.</p>
                */
            cacheClusterStatus?: CacheClusterStatus | string;
            /**
                * <p>A map that defines the method settings for a Stage resource. Keys (designated as <code>/{method_setting_key</code> below) are method paths defined as <code>{resource_path}/{http_method}</code> for an individual method override, or <code>/\*\/\*</code> for overriding all methods in the stage.  </p>
                */
            methodSettings?: Record<string, MethodSetting>;
            /**
                * <p>A map that defines the stage variables for a Stage resource. Variable names can
                *           have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&=,]+</code>.</p>
                */
            variables?: Record<string, string>;
            /**
                * <p>The version of the associated API documentation.</p>
                */
            documentationVersion?: string;
            /**
                * <p>Settings for logging access in this stage.</p>
                */
            accessLogSettings?: AccessLogSettings;
            /**
                * <p>Settings for the canary deployment in this stage.</p>
                */
            canarySettings?: CanarySettings;
            /**
                * <p>Specifies whether active tracing with X-ray is enabled for the Stage.</p>
                */
            tracingEnabled?: boolean;
            /**
                * <p>The ARN of the WebAcl associated with the Stage.</p>
                */
            webAclArn?: string;
            /**
                * <p>The collection of tags. Each tag element is associated with a given resource.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The timestamp when the stage was created.</p>
                */
            createdDate?: Date;
            /**
                * <p>The timestamp when the stage last updated.</p>
                */
            lastUpdatedDate?: Date;
    }
    export namespace Stage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Stage) => any;
    }
    export enum QuotaPeriodType {
            DAY = "DAY",
            MONTH = "MONTH",
            WEEK = "WEEK"
    }
    /**
        * <p>Quotas configured for a usage plan.</p>
        */
    export interface QuotaSettings {
            /**
                * <p>The target maximum number of requests that can be made in a given time period.</p>
                */
            limit?: number;
            /**
                * <p>The number of requests subtracted from the given limit in the initial time period.</p>
                */
            offset?: number;
            /**
                * <p>The time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".</p>
                */
            period?: QuotaPeriodType | string;
    }
    export namespace QuotaSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QuotaSettings) => any;
    }
    /**
        * <p>The POST request to create a usage plan with the name, description, throttle limits and quota limits, as well as the associated API stages, specified in the payload.</p>
        */
    export interface CreateUsagePlanRequest {
            /**
                * <p>The name of the usage plan.</p>
                */
            name: string | undefined;
            /**
                * <p>The description of the usage plan.</p>
                */
            description?: string;
            /**
                * <p>The associated API stages of the usage plan.</p>
                */
            apiStages?: ApiStage[];
            /**
                * <p>The throttling limits of the usage plan.</p>
                */
            throttle?: ThrottleSettings;
            /**
                * <p>The quota of the usage plan.</p>
                */
            quota?: QuotaSettings;
            /**
                * <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateUsagePlanRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUsagePlanRequest) => any;
    }
    /**
        * <p>Represents a usage plan used to specify who can assess associated API stages. Optionally, target request rate and quota limits can be set.
        *         In some cases clients can exceed the targets that you set. Don’t rely on usage plans to control costs.
        *         Consider using <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/budgets-managing-costs.html">Amazon Web Services Budgets</a> to monitor costs
        *         and <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF</a> to manage API requests.</p>
        */
    export interface UsagePlan {
            /**
                * <p>The identifier of a UsagePlan resource.</p>
                */
            id?: string;
            /**
                * <p>The name of a usage plan.</p>
                */
            name?: string;
            /**
                * <p>The description of a usage plan.</p>
                */
            description?: string;
            /**
                * <p>The associated API stages of a usage plan.</p>
                */
            apiStages?: ApiStage[];
            /**
                * <p>A map containing method level throttling information for API stage in a usage plan.</p>
                */
            throttle?: ThrottleSettings;
            /**
                * <p>The target maximum number of permitted requests per a given unit time interval.</p>
                */
            quota?: QuotaSettings;
            /**
                * <p>The AWS Markeplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.</p>
                */
            productCode?: string;
            /**
                * <p>The collection of tags. Each tag element is associated with a given resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace UsagePlan {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UsagePlan) => any;
    }
    /**
        * <p>The POST request to create a usage plan key for adding an existing API key to a usage plan.</p>
        */
    export interface CreateUsagePlanKeyRequest {
            /**
                * <p>The Id of the UsagePlan resource representing the usage plan containing the to-be-created UsagePlanKey resource representing a plan customer.</p>
                */
            usagePlanId: string | undefined;
            /**
                * <p>The identifier of a UsagePlanKey resource for a plan customer.</p>
                */
            keyId: string | undefined;
            /**
                * <p>The type of a UsagePlanKey resource for a plan customer.</p>
                */
            keyType: string | undefined;
    }
    export namespace CreateUsagePlanKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUsagePlanKeyRequest) => any;
    }
    /**
        * <p>Represents a usage plan key to identify a plan customer.</p>
        */
    export interface UsagePlanKey {
            /**
                * <p>The Id of a usage plan key.</p>
                */
            id?: string;
            /**
                * <p>The type of a usage plan key. Currently, the valid key type is <code>API_KEY</code>.</p>
                */
            type?: string;
            /**
                * <p>The value of a usage plan key.</p>
                */
            value?: string;
            /**
                * <p>The name of a usage plan key.</p>
                */
            name?: string;
    }
    export namespace UsagePlanKey {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UsagePlanKey) => any;
    }
    /**
        * <p>Creates a VPC link, under the caller's account in a selected region, in an asynchronous operation that typically takes 2-4 minutes to complete and become operational. The caller must have permissions to create and update VPC Endpoint services.</p>
        */
    export interface CreateVpcLinkRequest {
            /**
                * <p>The name used to label and identify the VPC link.</p>
                */
            name: string | undefined;
            /**
                * <p>The description of the VPC link.</p>
                */
            description?: string;
            /**
                * <p>The ARN of the network load balancer of the VPC targeted by the VPC link. The network load balancer must be owned by the same AWS account of the API owner.</p>
                */
            targetArns: string[] | undefined;
            /**
                * <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateVpcLinkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateVpcLinkRequest) => any;
    }
    export enum VpcLinkStatus {
            AVAILABLE = "AVAILABLE",
            DELETING = "DELETING",
            FAILED = "FAILED",
            PENDING = "PENDING"
    }
    /**
        * <p>An API Gateway VPC link for a RestApi to access resources in an Amazon Virtual Private Cloud (VPC).</p>
        */
    export interface VpcLink {
            /**
                * <p>The identifier of the  VpcLink. It is used in an Integration to reference this VpcLink.</p>
                */
            id?: string;
            /**
                * <p>The name used to label and identify the VPC link.</p>
                */
            name?: string;
            /**
                * <p>The description of the VPC link.</p>
                */
            description?: string;
            /**
                * <p>The ARN of the network load balancer of the VPC targeted by the VPC link. The network load balancer must be owned by the same AWS account of the API owner.</p>
                */
            targetArns?: string[];
            /**
                * <p>The status of the VPC link. The valid values are <code>AVAILABLE</code>, <code>PENDING</code>, <code>DELETING</code>, or <code>FAILED</code>. Deploying an API will wait if the status is <code>PENDING</code> and will fail if the status is <code>DELETING</code>.  </p>
                */
            status?: VpcLinkStatus | string;
            /**
                * <p>A description about the VPC link status.</p>
                */
            statusMessage?: string;
            /**
                * <p>The collection of tags. Each tag element is associated with a given resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace VpcLink {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VpcLink) => any;
    }
    /**
        * <p>A request to delete the ApiKey resource.</p>
        */
    export interface DeleteApiKeyRequest {
            /**
                * <p>The identifier of the ApiKey resource to be deleted.</p>
                */
            apiKey: string | undefined;
    }
    export namespace DeleteApiKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteApiKeyRequest) => any;
    }
    /**
        * <p>Request to delete an existing Authorizer resource.</p>
        */
    export interface DeleteAuthorizerRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The identifier of the Authorizer resource.</p>
                */
            authorizerId: string | undefined;
    }
    export namespace DeleteAuthorizerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAuthorizerRequest) => any;
    }
    /**
        * <p>A request to delete the BasePathMapping resource.</p>
        */
    export interface DeleteBasePathMappingRequest {
            /**
                * <p>The domain name of the BasePathMapping resource to delete.</p>
                */
            domainName: string | undefined;
            /**
                * <p>The base path name of the BasePathMapping resource to delete.</p>
                *         <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>
                */
            basePath: string | undefined;
    }
    export namespace DeleteBasePathMappingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteBasePathMappingRequest) => any;
    }
    /**
        * <p>A request to delete the ClientCertificate resource.</p>
        */
    export interface DeleteClientCertificateRequest {
            /**
                * <p>The identifier of the ClientCertificate resource to be deleted.</p>
                */
            clientCertificateId: string | undefined;
    }
    export namespace DeleteClientCertificateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteClientCertificateRequest) => any;
    }
    /**
        * <p>Requests API Gateway to delete a Deployment resource.</p>
        */
    export interface DeleteDeploymentRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The identifier of the Deployment resource to delete.</p>
                */
            deploymentId: string | undefined;
    }
    export namespace DeleteDeploymentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDeploymentRequest) => any;
    }
    /**
        * <p>Deletes an existing documentation part of an API.</p>
        */
    export interface DeleteDocumentationPartRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The identifier of the to-be-deleted documentation part.</p>
                */
            documentationPartId: string | undefined;
    }
    export namespace DeleteDocumentationPartRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDocumentationPartRequest) => any;
    }
    /**
        * <p>Deletes an existing documentation version of an API.</p>
        */
    export interface DeleteDocumentationVersionRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The version identifier of a to-be-deleted documentation snapshot.</p>
                */
            documentationVersion: string | undefined;
    }
    export namespace DeleteDocumentationVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDocumentationVersionRequest) => any;
    }
    /**
        * <p>A request to delete the DomainName resource.</p>
        */
    export interface DeleteDomainNameRequest {
            /**
                * <p>The name of the DomainName resource to be deleted.</p>
                */
            domainName: string | undefined;
    }
    export namespace DeleteDomainNameRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDomainNameRequest) => any;
    }
    export enum GatewayResponseType {
            ACCESS_DENIED = "ACCESS_DENIED",
            API_CONFIGURATION_ERROR = "API_CONFIGURATION_ERROR",
            AUTHORIZER_CONFIGURATION_ERROR = "AUTHORIZER_CONFIGURATION_ERROR",
            AUTHORIZER_FAILURE = "AUTHORIZER_FAILURE",
            BAD_REQUEST_BODY = "BAD_REQUEST_BODY",
            BAD_REQUEST_PARAMETERS = "BAD_REQUEST_PARAMETERS",
            DEFAULT_4XX = "DEFAULT_4XX",
            DEFAULT_5XX = "DEFAULT_5XX",
            EXPIRED_TOKEN = "EXPIRED_TOKEN",
            INTEGRATION_FAILURE = "INTEGRATION_FAILURE",
            INTEGRATION_TIMEOUT = "INTEGRATION_TIMEOUT",
            INVALID_API_KEY = "INVALID_API_KEY",
            INVALID_SIGNATURE = "INVALID_SIGNATURE",
            MISSING_AUTHENTICATION_TOKEN = "MISSING_AUTHENTICATION_TOKEN",
            QUOTA_EXCEEDED = "QUOTA_EXCEEDED",
            REQUEST_TOO_LARGE = "REQUEST_TOO_LARGE",
            RESOURCE_NOT_FOUND = "RESOURCE_NOT_FOUND",
            THROTTLED = "THROTTLED",
            UNAUTHORIZED = "UNAUTHORIZED",
            UNSUPPORTED_MEDIA_TYPE = "UNSUPPORTED_MEDIA_TYPE",
            WAF_FILTERED = "WAF_FILTERED"
    }
    /**
        * <p>Clears any customization of a GatewayResponse of a specified response type on the given RestApi and resets it with the default settings.</p>
        */
    export interface DeleteGatewayResponseRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The response type of the associated GatewayResponse.</p>
                */
            responseType: GatewayResponseType | string | undefined;
    }
    export namespace DeleteGatewayResponseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGatewayResponseRequest) => any;
    }
    /**
        * <p>Represents a delete integration request.</p>
        */
    export interface DeleteIntegrationRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>Specifies a delete integration request's resource identifier.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>Specifies a delete integration request's HTTP method.</p>
                */
            httpMethod: string | undefined;
    }
    export namespace DeleteIntegrationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteIntegrationRequest) => any;
    }
    /**
        * <p>Represents a delete integration response request.</p>
        */
    export interface DeleteIntegrationResponseRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>Specifies a delete integration response request's resource identifier.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>Specifies a delete integration response request's HTTP method.</p>
                */
            httpMethod: string | undefined;
            /**
                * <p>Specifies a delete integration response request's status code.</p>
                */
            statusCode: string | undefined;
    }
    export namespace DeleteIntegrationResponseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteIntegrationResponseRequest) => any;
    }
    /**
        * <p>Request to delete an existing Method resource.</p>
        */
    export interface DeleteMethodRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The Resource identifier for the Method resource.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>The HTTP verb of the Method resource.</p>
                */
            httpMethod: string | undefined;
    }
    export namespace DeleteMethodRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteMethodRequest) => any;
    }
    /**
        * <p>A request to delete an existing MethodResponse resource.</p>
        */
    export interface DeleteMethodResponseRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The Resource identifier for the MethodResponse resource.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>The HTTP verb of the Method resource.</p>
                */
            httpMethod: string | undefined;
            /**
                * <p>The status code identifier for the MethodResponse resource.</p>
                */
            statusCode: string | undefined;
    }
    export namespace DeleteMethodResponseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteMethodResponseRequest) => any;
    }
    /**
        * <p>Request to delete an existing model in an existing RestApi resource.</p>
        */
    export interface DeleteModelRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The name of the model to delete.</p>
                */
            modelName: string | undefined;
    }
    export namespace DeleteModelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteModelRequest) => any;
    }
    /**
        * <p>Deletes a specified RequestValidator of a given RestApi.</p>
        */
    export interface DeleteRequestValidatorRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The identifier of the RequestValidator to be deleted.</p>
                */
            requestValidatorId: string | undefined;
    }
    export namespace DeleteRequestValidatorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRequestValidatorRequest) => any;
    }
    /**
        * <p>Request to delete a Resource.</p>
        */
    export interface DeleteResourceRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The identifier of the Resource resource.</p>
                */
            resourceId: string | undefined;
    }
    export namespace DeleteResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteResourceRequest) => any;
    }
    /**
        * <p>Request to delete the specified API from your collection.</p>
        */
    export interface DeleteRestApiRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
    }
    export namespace DeleteRestApiRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRestApiRequest) => any;
    }
    /**
        * <p>Requests API Gateway to delete a Stage resource.</p>
        */
    export interface DeleteStageRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The name of the Stage resource to delete.</p>
                */
            stageName: string | undefined;
    }
    export namespace DeleteStageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteStageRequest) => any;
    }
    /**
        * <p>The DELETE request to delete a usage plan of a given plan Id.</p>
        */
    export interface DeleteUsagePlanRequest {
            /**
                * <p>The Id of the to-be-deleted usage plan.</p>
                */
            usagePlanId: string | undefined;
    }
    export namespace DeleteUsagePlanRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUsagePlanRequest) => any;
    }
    /**
        * <p>The DELETE request to delete a usage plan key and remove the underlying API key from the associated usage plan.</p>
        */
    export interface DeleteUsagePlanKeyRequest {
            /**
                * <p>The Id of the UsagePlan resource representing the usage plan containing the to-be-deleted UsagePlanKey resource representing a plan customer.</p>
                */
            usagePlanId: string | undefined;
            /**
                * <p>The Id of the UsagePlanKey resource to be deleted.</p>
                */
            keyId: string | undefined;
    }
    export namespace DeleteUsagePlanKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUsagePlanKeyRequest) => any;
    }
    /**
        * <p>Deletes an existing VpcLink of a specified identifier.</p>
        */
    export interface DeleteVpcLinkRequest {
            /**
                * <p>The identifier of the  VpcLink. It is used in an Integration to reference this VpcLink.</p>
                */
            vpcLinkId: string | undefined;
    }
    export namespace DeleteVpcLinkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteVpcLinkRequest) => any;
    }
    /**
        * <p>Request to flush authorizer cache entries on a specified stage.</p>
        */
    export interface FlushStageAuthorizersCacheRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The name of the stage to flush.</p>
                */
            stageName: string | undefined;
    }
    export namespace FlushStageAuthorizersCacheRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FlushStageAuthorizersCacheRequest) => any;
    }
    /**
        * <p>Requests API Gateway to flush a stage's cache.</p>
        */
    export interface FlushStageCacheRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The name of the stage to flush its cache.</p>
                */
            stageName: string | undefined;
    }
    export namespace FlushStageCacheRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FlushStageCacheRequest) => any;
    }
    /**
        * <p>Represents a client certificate used to configure client-side SSL authentication while sending requests to the integration endpoint.</p>
        */
    export interface ClientCertificate {
            /**
                * <p>The identifier of the client certificate.</p>
                */
            clientCertificateId?: string;
            /**
                * <p>The description of the client certificate.</p>
                */
            description?: string;
            /**
                * <p>The PEM-encoded public key of the client certificate, which can be used to configure certificate authentication in the integration endpoint .</p>
                */
            pemEncodedCertificate?: string;
            /**
                * <p>The timestamp when the client certificate was created.</p>
                */
            createdDate?: Date;
            /**
                * <p>The timestamp when the client certificate will expire.</p>
                */
            expirationDate?: Date;
            /**
                * <p>The collection of tags. Each tag element is associated with a given resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ClientCertificate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ClientCertificate) => any;
    }
    /**
        * <p>A request to generate a ClientCertificate resource.</p>
        */
    export interface GenerateClientCertificateRequest {
            /**
                * <p>The description of the ClientCertificate.</p>
                */
            description?: string;
            /**
                * <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace GenerateClientCertificateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GenerateClientCertificateRequest) => any;
    }
    /**
        * <p>Requests API Gateway to get information about the current Account resource.</p>
        */
    export interface GetAccountRequest {
    }
    export namespace GetAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAccountRequest) => any;
    }
    /**
        * <p>A request to get information about the current ApiKey resource.</p>
        */
    export interface GetApiKeyRequest {
            /**
                * <p>The identifier of the ApiKey resource.</p>
                */
            apiKey: string | undefined;
            /**
                * <p>A boolean flag to specify whether (<code>true</code>) or not (<code>false</code>) the result contains the key value.</p>
                */
            includeValue?: boolean;
    }
    export namespace GetApiKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetApiKeyRequest) => any;
    }
    /**
        * <p>A request to get information about the current ApiKeys resource.</p>
        */
    export interface GetApiKeysRequest {
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
            /**
                * <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
                */
            limit?: number;
            /**
                * <p>The name of queried API keys.</p>
                */
            nameQuery?: string;
            /**
                * <p>The identifier of a customer in AWS Marketplace or an external system, such as a developer portal.</p>
                */
            customerId?: string;
            /**
                * <p>A boolean flag to specify whether (<code>true</code>) or not (<code>false</code>) the result contains key values.</p>
                */
            includeValues?: boolean;
    }
    export namespace GetApiKeysRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetApiKeysRequest) => any;
    }
    /**
        * <p>Request to describe an existing Authorizer resource.</p>
        */
    export interface GetAuthorizerRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The identifier of the Authorizer resource.</p>
                */
            authorizerId: string | undefined;
    }
    export namespace GetAuthorizerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAuthorizerRequest) => any;
    }
    /**
        * <p>Request to describe an existing Authorizers resource.</p>
        */
    export interface GetAuthorizersRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
            /**
                * <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
                */
            limit?: number;
    }
    export namespace GetAuthorizersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAuthorizersRequest) => any;
    }
    /**
        * <p>Request to describe a BasePathMapping resource.</p>
        */
    export interface GetBasePathMappingRequest {
            /**
                * <p>The domain name of the BasePathMapping resource to be described.</p>
                */
            domainName: string | undefined;
            /**
                * <p>The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Specify '(none)' if you do not want callers to specify any base path name after the domain name.</p>
                */
            basePath: string | undefined;
    }
    export namespace GetBasePathMappingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBasePathMappingRequest) => any;
    }
    /**
        * <p>Represents a collection of BasePathMapping resources.</p>
        */
    export interface BasePathMappings {
            /**
                * <p>The current page of elements from this collection.</p>
                */
            items?: BasePathMapping[];
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
    }
    export namespace BasePathMappings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BasePathMappings) => any;
    }
    /**
        * <p>A request to get information about a collection of BasePathMapping resources.</p>
        */
    export interface GetBasePathMappingsRequest {
            /**
                * <p>The domain name of a BasePathMapping resource.</p>
                */
            domainName: string | undefined;
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
            /**
                * <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
                */
            limit?: number;
    }
    export namespace GetBasePathMappingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBasePathMappingsRequest) => any;
    }
    /**
        * <p>A request to get information about the current ClientCertificate resource.</p>
        */
    export interface GetClientCertificateRequest {
            /**
                * <p>The identifier of the ClientCertificate resource to be described.</p>
                */
            clientCertificateId: string | undefined;
    }
    export namespace GetClientCertificateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetClientCertificateRequest) => any;
    }
    /**
        * <p>Represents a collection of ClientCertificate resources.</p>
        */
    export interface ClientCertificates {
            /**
                * <p>The current page of elements from this collection.</p>
                */
            items?: ClientCertificate[];
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
    }
    export namespace ClientCertificates {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ClientCertificates) => any;
    }
    /**
        * <p>A request to get information about a collection of ClientCertificate resources.</p>
        */
    export interface GetClientCertificatesRequest {
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
            /**
                * <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
                */
            limit?: number;
    }
    export namespace GetClientCertificatesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetClientCertificatesRequest) => any;
    }
    /**
        * <p>Requests API Gateway to get information about a Deployment resource.</p>
        */
    export interface GetDeploymentRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The identifier of the Deployment resource to get information about.</p>
                */
            deploymentId: string | undefined;
            /**
                * <p>A query parameter to retrieve the specified embedded resources of the returned Deployment resource in the response. In a REST API call, this <code>embed</code> parameter value is a list of comma-separated strings, as in  <code>GET /restapis/{restapi_id}/deployments/{deployment_id}?embed=var1,var2</code>. The SDK and other platform-dependent libraries might use a different format for the list. Currently, this request supports only retrieval of the embedded API summary this way. Hence, the parameter value must be a single-valued list containing only the <code>"apisummary"</code> string.  For example, <code>GET /restapis/{restapi_id}/deployments/{deployment_id}?embed=apisummary</code>.</p>
                */
            embed?: string[];
    }
    export namespace GetDeploymentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeploymentRequest) => any;
    }
    /**
        * <p>Represents a collection resource that contains zero or more references to your existing deployments, and links that guide you on how to interact with your collection. The collection offers a paginated view of the contained deployments.</p>
        */
    export interface Deployments {
            /**
                * <p>The current page of elements from this collection.</p>
                */
            items?: Deployment[];
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
    }
    export namespace Deployments {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Deployments) => any;
    }
    /**
        * <p>Requests API Gateway to get information about a Deployments collection.</p>
        */
    export interface GetDeploymentsRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
            /**
                * <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
                */
            limit?: number;
    }
    export namespace GetDeploymentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeploymentsRequest) => any;
    }
    /**
        * <p>Gets a specified documentation part of a given API.</p>
        */
    export interface GetDocumentationPartRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            documentationPartId: string | undefined;
    }
    export namespace GetDocumentationPartRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDocumentationPartRequest) => any;
    }
    /**
        * <p>The collection of documentation parts of an API.</p>
        */
    export interface DocumentationParts {
            /**
                * <p>The current page of elements from this collection.</p>
                */
            items?: DocumentationPart[];
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
    }
    export namespace DocumentationParts {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentationParts) => any;
    }
    export enum LocationStatusType {
            DOCUMENTED = "DOCUMENTED",
            UNDOCUMENTED = "UNDOCUMENTED"
    }
    /**
        * <p>Gets the documentation parts of an API. The result may be filtered by the type, name, or path of API entities (targets).</p>
        */
    export interface GetDocumentationPartsRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The type of API entities of the to-be-retrieved documentation parts. </p>
                */
            type?: DocumentationPartType | string;
            /**
                * <p>The name of API entities of the to-be-retrieved documentation parts.</p>
                */
            nameQuery?: string;
            /**
                * <p>The path of API entities of the to-be-retrieved documentation parts.</p>
                */
            path?: string;
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
            /**
                * <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
                */
            limit?: number;
            /**
                * <p>The status of the API documentation parts to retrieve. Valid values are <code>DOCUMENTED</code> for retrieving DocumentationPart resources with content and <code>UNDOCUMENTED</code> for DocumentationPart resources without content.</p>
                */
            locationStatus?: LocationStatusType | string;
    }
    export namespace GetDocumentationPartsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDocumentationPartsRequest) => any;
    }
    /**
        * <p>Gets a documentation snapshot of an API.</p>
        */
    export interface GetDocumentationVersionRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The version identifier of the to-be-retrieved documentation snapshot.</p>
                */
            documentationVersion: string | undefined;
    }
    export namespace GetDocumentationVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDocumentationVersionRequest) => any;
    }
    /**
        * <p>The collection of documentation snapshots of an API. </p>
        */
    export interface DocumentationVersions {
            /**
                * <p>The current page of elements from this collection.</p>
                */
            items?: DocumentationVersion[];
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
    }
    export namespace DocumentationVersions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentationVersions) => any;
    }
    /**
        * <p>Gets the documentation versions of an API.</p>
        */
    export interface GetDocumentationVersionsRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
            /**
                * <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
                */
            limit?: number;
    }
    export namespace GetDocumentationVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDocumentationVersionsRequest) => any;
    }
    /**
        * <p>Request to get the name of a DomainName resource.</p>
        */
    export interface GetDomainNameRequest {
            /**
                * <p>The name of the DomainName resource.</p>
                */
            domainName: string | undefined;
    }
    export namespace GetDomainNameRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDomainNameRequest) => any;
    }
    /**
        * <p>Represents a collection of DomainName resources.</p>
        */
    export interface DomainNames {
            /**
                * <p>The current page of elements from this collection.</p>
                */
            items?: DomainName[];
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
    }
    export namespace DomainNames {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainNames) => any;
    }
    /**
        * <p>Request to describe a collection of DomainName resources.</p>
        */
    export interface GetDomainNamesRequest {
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
            /**
                * <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
                */
            limit?: number;
    }
    export namespace GetDomainNamesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDomainNamesRequest) => any;
    }
    /**
        * <p>The binary blob response to GetExport, which contains the generated SDK.</p>
        */
    export interface ExportResponse {
            /**
                * <p>The content-type header value in the HTTP response. This will correspond to a valid 'accept' type in the request.</p>
                */
            contentType?: string;
            /**
                * <p>The content-disposition header value in the HTTP response.</p>
                */
            contentDisposition?: string;
            /**
                * <p>The binary blob response to GetExport, which contains the export.</p>
                */
            body?: Uint8Array;
    }
    export namespace ExportResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExportResponse) => any;
    }
    /**
        * <p>Request a new export of a RestApi for a particular Stage.</p>
        */
    export interface GetExportRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The name of the Stage that will be exported.</p>
                */
            stageName: string | undefined;
            /**
                * <p>The type of export. Acceptable values are 'oas30' for OpenAPI 3.0.x and 'swagger' for Swagger/OpenAPI 2.0.</p>
                */
            exportType: string | undefined;
            /**
                * <p>A key-value map of query string parameters that specify properties of the export, depending on the requested <code>exportType</code>. For <code>exportType</code>
                *             <code>oas30</code> and <code>swagger</code>, any combination of the following parameters are supported: <code>extensions='integrations'</code> or <code>extensions='apigateway'</code> will export the API with x-amazon-apigateway-integration extensions. <code>extensions='authorizers'</code> will export the API with  x-amazon-apigateway-authorizer extensions. <code>postman</code> will export the API with Postman extensions, allowing for import to the Postman tool</p>
                */
            parameters?: Record<string, string>;
            /**
                * <p>The content-type of the export, for example <code>application/json</code>. Currently <code>application/json</code> and <code>application/yaml</code> are supported for <code>exportType</code> of<code>oas30</code> and <code>swagger</code>. This should be specified in the <code>Accept</code> header for direct API requests.</p>
                */
            accepts?: string;
    }
    export namespace GetExportRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetExportRequest) => any;
    }
    /**
        * <p>A gateway response of a given response type and status code, with optional response parameters and mapping templates.</p>
        */
    export interface GatewayResponse {
            /**
                * <p>The response type of the associated GatewayResponse.</p>
                */
            responseType?: GatewayResponseType | string;
            /**
                * <p>The HTTP status code for this GatewayResponse.</p>
                */
            statusCode?: string;
            /**
                * <p>Response parameters (paths, query strings and headers) of the GatewayResponse as a
                *       string-to-string map of key-value pairs.</p>
                */
            responseParameters?: Record<string, string>;
            /**
                * <p>Response templates of the GatewayResponse as a string-to-string map of key-value pairs.</p>
                */
            responseTemplates?: Record<string, string>;
            /**
                * <p>A Boolean flag to indicate whether this GatewayResponse is the default gateway response (<code>true</code>) or not (<code>false</code>). A default gateway response is one generated by API Gateway without any customization by an API developer. </p>
                */
            defaultResponse?: boolean;
    }
    export namespace GatewayResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GatewayResponse) => any;
    }
    /**
        * <p>Gets a GatewayResponse of a specified response type on the given RestApi.</p>
        */
    export interface GetGatewayResponseRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The response type of the associated GatewayResponse.</p>
                */
            responseType: GatewayResponseType | string | undefined;
    }
    export namespace GetGatewayResponseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGatewayResponseRequest) => any;
    }
    /**
        * <p>The collection of the GatewayResponse instances of a RestApi as a <code>responseType</code>-to-GatewayResponse object map of key-value pairs. As such, pagination is not supported for querying this collection.</p>
        */
    export interface GatewayResponses {
            /**
                * <p>Returns the entire collection, because of no pagination support.</p>
                */
            items?: GatewayResponse[];
            /**
                * <p>The current pagination position in the paged result set. The GatewayResponse collection does not support pagination and the position does not apply here.</p>
                */
            position?: string;
    }
    export namespace GatewayResponses {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GatewayResponses) => any;
    }
    /**
        * <p>Gets the GatewayResponses collection on the given RestApi. If an API developer has not added any definitions for gateway responses, the result will be the API Gateway-generated default GatewayResponses collection for the supported response types.</p>
        */
    export interface GetGatewayResponsesRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The current pagination position in the paged result set. The GatewayResponse collection does not support pagination and the position does not apply here.</p>
                */
            position?: string;
            /**
                * <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500. The GatewayResponses collection does not support pagination and the limit does not apply here.</p>
                */
            limit?: number;
    }
    export namespace GetGatewayResponsesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGatewayResponsesRequest) => any;
    }
    /**
        * <p>Represents a request to get the integration configuration.</p>
        */
    export interface GetIntegrationRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>Specifies a get integration request's resource identifier</p>
                */
            resourceId: string | undefined;
            /**
                * <p>Specifies a get integration request's HTTP method.</p>
                */
            httpMethod: string | undefined;
    }
    export namespace GetIntegrationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIntegrationRequest) => any;
    }
    /**
        * <p>Represents a get integration response request.</p>
        */
    export interface GetIntegrationResponseRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>Specifies a get integration response request's resource identifier.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>Specifies a get integration response request's HTTP method.</p>
                */
            httpMethod: string | undefined;
            /**
                * <p>Specifies a get integration response request's status code.</p>
                */
            statusCode: string | undefined;
    }
    export namespace GetIntegrationResponseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIntegrationResponseRequest) => any;
    }
    /**
        * <p>Request to describe an existing Method resource.</p>
        */
    export interface GetMethodRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The Resource identifier for the Method resource.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>Specifies the method request's HTTP method type.</p>
                */
            httpMethod: string | undefined;
    }
    export namespace GetMethodRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMethodRequest) => any;
    }
    /**
        * <p>Request to describe a MethodResponse resource.</p>
        */
    export interface GetMethodResponseRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The Resource identifier for the MethodResponse resource.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>The HTTP verb of the Method resource.</p>
                */
            httpMethod: string | undefined;
            /**
                * <p>The status code for the MethodResponse resource.</p>
                */
            statusCode: string | undefined;
    }
    export namespace GetMethodResponseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMethodResponseRequest) => any;
    }
    /**
        * <p>Request to list information about a model in an existing RestApi resource.</p>
        */
    export interface GetModelRequest {
            /**
                * <p>The RestApi identifier under which the Model exists.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The name of the model as an identifier.</p>
                */
            modelName: string | undefined;
            /**
                * <p>A query parameter of a Boolean value to resolve (<code>true</code>) all external model references and returns a flattened model schema or not (<code>false</code>) The default is <code>false</code>.</p>
                */
            flatten?: boolean;
    }
    export namespace GetModelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetModelRequest) => any;
    }
    /**
        * <p>Request to list existing Models defined for a RestApi resource.</p>
        */
    export interface GetModelsRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
            /**
                * <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
                */
            limit?: number;
    }
    export namespace GetModelsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetModelsRequest) => any;
    }
    /**
        * <p>Represents a collection of Model resources.</p>
        */
    export interface Models {
            /**
                * <p>The current page of elements from this collection.</p>
                */
            items?: Model[];
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
    }
    export namespace Models {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Models) => any;
    }
    /**
        * <p>Request to generate a sample mapping template used to transform the payload.</p>
        */
    export interface GetModelTemplateRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The name of the model for which to generate a template.</p>
                */
            modelName: string | undefined;
    }
    export namespace GetModelTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetModelTemplateRequest) => any;
    }
    /**
        * <p>Represents a mapping template used to transform a payload.</p>
        */
    export interface Template {
            /**
                * <p>The Apache Velocity Template Language (VTL) template content used for the template resource.</p>
                */
            value?: string;
    }
    export namespace Template {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Template) => any;
    }
    /**
        * <p>Gets a RequestValidator of a given RestApi.</p>
        */
    export interface GetRequestValidatorRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The identifier of the RequestValidator to be retrieved.</p>
                */
            requestValidatorId: string | undefined;
    }
    export namespace GetRequestValidatorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRequestValidatorRequest) => any;
    }
    /**
        * <p>Gets the RequestValidators collection of a given RestApi.</p>
        */
    export interface GetRequestValidatorsRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
            /**
                * <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
                */
            limit?: number;
    }
    export namespace GetRequestValidatorsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRequestValidatorsRequest) => any;
    }
    /**
        * <p>A collection of RequestValidator resources of a given RestApi.</p>
        */
    export interface RequestValidators {
            /**
                * <p>The current page of elements from this collection.</p>
                */
            items?: RequestValidator[];
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
    }
    export namespace RequestValidators {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RequestValidators) => any;
    }
    /**
        * <p>Request to list information about a resource.</p>
        */
    export interface GetResourceRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The identifier for the Resource resource.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>A query parameter to retrieve the specified resources embedded in the returned Resource representation in the response. This <code>embed</code> parameter value is a list of comma-separated strings. Currently, the request supports only retrieval of the embedded Method resources this way. The query parameter value must be a single-valued list and contain the <code>"methods"</code> string. For example, <code>GET /restapis/{restapi_id}/resources/{resource_id}?embed=methods</code>.</p>
                */
            embed?: string[];
    }
    export namespace GetResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResourceRequest) => any;
    }
    /**
        * <p>Request to list information about a collection of resources.</p>
        */
    export interface GetResourcesRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
            /**
                * <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
                */
            limit?: number;
            /**
                * <p>A query parameter used to retrieve the specified resources embedded in the returned Resources resource in the response.  This <code>embed</code> parameter value is a list of comma-separated strings. Currently, the request supports only retrieval of the embedded Method resources this way. The query parameter value must be a single-valued list and contain the <code>"methods"</code> string. For example, <code>GET /restapis/{restapi_id}/resources?embed=methods</code>.</p>
                */
            embed?: string[];
    }
    export namespace GetResourcesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResourcesRequest) => any;
    }
    /**
        * <p>Represents a collection of Resource resources.</p>
        */
    export interface Resources {
            /**
                * <p>The current page of elements from this collection.</p>
                */
            items?: Resource[];
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
    }
    export namespace Resources {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Resources) => any;
    }
    /**
        * <p>The GET request to list an existing RestApi defined for your collection. </p>
        */
    export interface GetRestApiRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
    }
    export namespace GetRestApiRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRestApiRequest) => any;
    }
    /**
        * <p>The GET request to list existing RestApis defined for your collection.</p>
        */
    export interface GetRestApisRequest {
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
            /**
                * <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
                */
            limit?: number;
    }
    export namespace GetRestApisRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRestApisRequest) => any;
    }
    /**
        * <p>Contains references to your APIs and links that guide you in how to interact with your collection. A collection offers a paginated view of your APIs.</p>
        */
    export interface RestApis {
            /**
                * <p>The current page of elements from this collection.</p>
                */
            items?: RestApi[];
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
    }
    export namespace RestApis {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestApis) => any;
    }
    /**
        * <p>Request a new generated client SDK for a RestApi and Stage.</p>
        */
    export interface GetSdkRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The name of the Stage that the SDK will use.</p>
                */
            stageName: string | undefined;
            /**
                * <p>The language for the generated SDK. Currently <code>java</code>, <code>javascript</code>, <code>android</code>, <code>objectivec</code> (for iOS), <code>swift</code> (for iOS), and <code>ruby</code>  are supported.</p>
                */
            sdkType: string | undefined;
            /**
                * <p>A string-to-string key-value map of query parameters <code>sdkType</code>-dependent properties of the SDK. For <code>sdkType</code> of <code>objectivec</code> or <code>swift</code>,  a parameter named <code>classPrefix</code> is required. For <code>sdkType</code> of <code>android</code>, parameters named <code>groupId</code>, <code>artifactId</code>, <code>artifactVersion</code>, and <code>invokerPackage</code> are required. For <code>sdkType</code> of <code>java</code>, parameters named <code>serviceName</code> and <code>javaPackageName</code> are required. </p>
                */
            parameters?: Record<string, string>;
    }
    export namespace GetSdkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSdkRequest) => any;
    }
    /**
        * <p>The binary blob response to GetSdk, which contains the generated SDK.</p>
        */
    export interface SdkResponse {
            /**
                * <p>The content-type header value in the HTTP response.</p>
                */
            contentType?: string;
            /**
                * <p>The content-disposition header value in the HTTP response.</p>
                */
            contentDisposition?: string;
            /**
                * <p>The binary blob response to GetSdk, which contains the generated SDK.</p>
                */
            body?: Uint8Array;
    }
    export namespace SdkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SdkResponse) => any;
    }
    /**
        * <p>Get an SdkType instance.</p>
        */
    export interface GetSdkTypeRequest {
            /**
                * <p>The identifier of the queried SdkType instance.</p>
                */
            id: string | undefined;
    }
    export namespace GetSdkTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSdkTypeRequest) => any;
    }
    /**
        * <p>A configuration property of an SDK type.</p>
        */
    export interface SdkConfigurationProperty {
            /**
                * <p>The name of a an SdkType configuration property.</p>
                */
            name?: string;
            /**
                * <p>The user-friendly name of an SdkType configuration property.</p>
                */
            friendlyName?: string;
            /**
                * <p>The description of an SdkType configuration property.</p>
                */
            description?: string;
            /**
                * <p>A boolean flag of an SdkType configuration property to indicate if the associated SDK configuration property is required (<code>true</code>) or not (<code>false</code>).</p>
                */
            required?: boolean;
            /**
                * <p>The default value of an SdkType configuration property.</p>
                */
            defaultValue?: string;
    }
    export namespace SdkConfigurationProperty {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SdkConfigurationProperty) => any;
    }
    /**
        * <p>A type of SDK that API Gateway can generate.</p>
        */
    export interface SdkType {
            /**
                * <p>The identifier of an SdkType instance.</p>
                */
            id?: string;
            /**
                * <p>The user-friendly name of an SdkType instance.</p>
                */
            friendlyName?: string;
            /**
                * <p>The description of an SdkType.</p>
                */
            description?: string;
            /**
                * <p>A list of configuration properties of an SdkType.</p>
                */
            configurationProperties?: SdkConfigurationProperty[];
    }
    export namespace SdkType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SdkType) => any;
    }
    /**
        * <p>Get the SdkTypes collection.</p>
        */
    export interface GetSdkTypesRequest {
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
            /**
                * <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
                */
            limit?: number;
    }
    export namespace GetSdkTypesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSdkTypesRequest) => any;
    }
    /**
        * <p>The collection of SdkType instances.</p>
        */
    export interface SdkTypes {
            /**
                * <p>The current page of elements from this collection.</p>
                */
            items?: SdkType[];
    }
    export namespace SdkTypes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SdkTypes) => any;
    }
    /**
        * <p>Requests API Gateway to get information about a Stage resource.</p>
        */
    export interface GetStageRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The name of the Stage resource to get information about.</p>
                */
            stageName: string | undefined;
    }
    export namespace GetStageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStageRequest) => any;
    }
    /**
        * <p>Requests API Gateway to get information about one or more Stage resources.</p>
        */
    export interface GetStagesRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The stages' deployment identifiers.</p>
                */
            deploymentId?: string;
    }
    export namespace GetStagesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStagesRequest) => any;
    }
    /**
        * <p>A list of Stage resources that are associated with the ApiKey resource.</p>
        */
    export interface Stages {
            /**
                * <p>The current page of elements from this collection.</p>
                */
            item?: Stage[];
    }
    export namespace Stages {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Stages) => any;
    }
    /**
        * <p>Gets the Tags collection for a given resource.</p>
        */
    export interface GetTagsRequest {
            /**
                * <p>The ARN of a resource that can be tagged.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>(Not currently supported) The current pagination position in the paged result set.</p>
                */
            position?: string;
            /**
                * <p>(Not currently supported) The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
                */
            limit?: number;
    }
    export namespace GetTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTagsRequest) => any;
    }
    /**
        * <p>The collection of tags. Each tag element is associated with a given resource.</p>
        */
    export interface Tags {
            /**
                * <p>The collection of tags. Each tag element is associated with a given resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace Tags {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tags) => any;
    }
    /**
        * <p>The GET request to get the usage data of a usage plan in a specified time interval.</p>
        */
    export interface GetUsageRequest {
            /**
                * <p>The Id of the usage plan associated with the usage data.</p>
                */
            usagePlanId: string | undefined;
            /**
                * <p>The Id of the API key associated with the resultant usage data.</p>
                */
            keyId?: string;
            /**
                * <p>The starting date (e.g., 2016-01-01) of the usage data.</p>
                */
            startDate: string | undefined;
            /**
                * <p>The ending date (e.g., 2016-12-31) of the usage data.</p>
                */
            endDate: string | undefined;
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
            /**
                * <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
                */
            limit?: number;
    }
    export namespace GetUsageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUsageRequest) => any;
    }
    /**
        * <p>Represents the usage data of a usage plan.</p>
        */
    export interface Usage {
            /**
                * <p>The plan Id associated with this usage data.</p>
                */
            usagePlanId?: string;
            /**
                * <p>The starting date of the usage data.</p>
                */
            startDate?: string;
            /**
                * <p>The ending date of the usage data.</p>
                */
            endDate?: string;
            /**
                * <p>The usage data, as daily logs of used and remaining quotas, over the specified time interval indexed over the API keys in a usage plan. For example, <code>{..., "values" : { "{api_key}" : [ [0, 100], [10, 90], [100, 10]]}</code>, where <code>{api_key}</code> stands for an API key value and the daily log entry is of the format <code>[used quota, remaining quota]</code>.</p>
                */
            items?: Record<string, number[][]>;
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
    }
    export namespace Usage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Usage) => any;
    }
    /**
        * <p>The GET request to get a usage plan of a given plan identifier.</p>
        */
    export interface GetUsagePlanRequest {
            /**
                * <p>The identifier of the UsagePlan resource to be retrieved.</p>
                */
            usagePlanId: string | undefined;
    }
    export namespace GetUsagePlanRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUsagePlanRequest) => any;
    }
    /**
        * <p>The GET request to get a usage plan key of a given key identifier.</p>
        */
    export interface GetUsagePlanKeyRequest {
            /**
                * <p>The Id of the UsagePlan resource representing the usage plan containing the to-be-retrieved UsagePlanKey resource representing a plan customer.</p>
                */
            usagePlanId: string | undefined;
            /**
                * <p>The key Id of the to-be-retrieved UsagePlanKey resource representing a plan customer.</p>
                */
            keyId: string | undefined;
    }
    export namespace GetUsagePlanKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUsagePlanKeyRequest) => any;
    }
    /**
        * <p>The GET request to get all the usage plan keys representing the API keys added to a specified usage plan.</p>
        */
    export interface GetUsagePlanKeysRequest {
            /**
                * <p>The Id of the UsagePlan resource representing the usage plan containing the to-be-retrieved UsagePlanKey resource representing a plan customer.</p>
                */
            usagePlanId: string | undefined;
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
            /**
                * <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
                */
            limit?: number;
            /**
                * <p>A query parameter specifying the name of the to-be-returned usage plan keys.</p>
                */
            nameQuery?: string;
    }
    export namespace GetUsagePlanKeysRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUsagePlanKeysRequest) => any;
    }
    /**
        * <p>Represents the collection of usage plan keys added to usage plans for the associated API keys and, possibly, other types of keys.</p>
        */
    export interface UsagePlanKeys {
            /**
                * <p>The current page of elements from this collection.</p>
                */
            items?: UsagePlanKey[];
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
    }
    export namespace UsagePlanKeys {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UsagePlanKeys) => any;
    }
    /**
        * <p>The GET request to get all the usage plans of the caller's account.</p>
        */
    export interface GetUsagePlansRequest {
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
            /**
                * <p>The identifier of the API key associated with the usage plans.</p>
                */
            keyId?: string;
            /**
                * <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
                */
            limit?: number;
    }
    export namespace GetUsagePlansRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUsagePlansRequest) => any;
    }
    /**
        * <p>Represents a collection of usage plans for an AWS account.</p>
        */
    export interface UsagePlans {
            /**
                * <p>The current page of elements from this collection.</p>
                */
            items?: UsagePlan[];
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
    }
    export namespace UsagePlans {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UsagePlans) => any;
    }
    /**
        * <p>Gets a specified VPC link under the caller's account in a region.</p>
        */
    export interface GetVpcLinkRequest {
            /**
                * <p>The identifier of the  VpcLink. It is used in an Integration to reference this VpcLink.</p>
                */
            vpcLinkId: string | undefined;
    }
    export namespace GetVpcLinkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetVpcLinkRequest) => any;
    }
    /**
        * <p>Gets the VpcLinks collection under the caller's account in a selected region.</p>
        */
    export interface GetVpcLinksRequest {
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
            /**
                * <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
                */
            limit?: number;
    }
    export namespace GetVpcLinksRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetVpcLinksRequest) => any;
    }
    /**
        * <p>The collection of VPC links under the caller's account in a region.</p>
        */
    export interface VpcLinks {
            /**
                * <p>The current page of elements from this collection.</p>
                */
            items?: VpcLink[];
            /**
                * <p>The current pagination position in the paged result set.</p>
                */
            position?: string;
    }
    export namespace VpcLinks {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VpcLinks) => any;
    }
    /**
        * <p>The POST request to import API keys from an external source, such as a CSV-formatted file.</p>
        */
    export interface ImportApiKeysRequest {
            /**
                * <p>The payload of the POST request to import API keys. For the payload format, see API Key File Format.</p>
                */
            body: Uint8Array | undefined;
            /**
                * <p>A query parameter to specify the input format to imported API keys. Currently, only the <code>csv</code> format is supported.</p>
                */
            format: ApiKeysFormat | string | undefined;
            /**
                * <p>A query parameter to indicate whether to rollback ApiKey importation (<code>true</code>) or not (<code>false</code>) when error is encountered.</p>
                */
            failOnWarnings?: boolean;
    }
    export namespace ImportApiKeysRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportApiKeysRequest) => any;
    }
    /**
        * <p>A collection of the imported  DocumentationPart identifiers.</p>
        */
    export interface DocumentationPartIds {
            /**
                * <p>A list of the returned documentation part identifiers.</p>
                */
            ids?: string[];
            /**
                * <p>A list of warning messages reported during import of documentation parts.</p>
                */
            warnings?: string[];
    }
    export namespace DocumentationPartIds {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentationPartIds) => any;
    }
    export enum PutMode {
            Merge = "merge",
            Overwrite = "overwrite"
    }
    /**
        * <p>Import documentation parts from an external (e.g., OpenAPI) definition file. </p>
        */
    export interface ImportDocumentationPartsRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>A query parameter to indicate whether to overwrite (<code>OVERWRITE</code>) any existing DocumentationParts definition or to merge (<code>MERGE</code>) the new definition into the existing one. The default value is <code>MERGE</code>.</p>
                */
            mode?: PutMode | string;
            /**
                * <p>A query parameter to specify whether to rollback the documentation importation (<code>true</code>) or not (<code>false</code>) when a warning is encountered. The default value is <code>false</code>.</p>
                */
            failOnWarnings?: boolean;
            /**
                * <p>Raw byte array representing the to-be-imported documentation parts. To import from an OpenAPI file, this is a JSON object.</p>
                */
            body: Uint8Array | undefined;
    }
    export namespace ImportDocumentationPartsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportDocumentationPartsRequest) => any;
    }
    /**
        * <p>A POST request to import an API to API Gateway using an input of an API definition file.</p>
        */
    export interface ImportRestApiRequest {
            /**
                * <p>A query parameter to indicate whether to rollback the API creation (<code>true</code>) or not (<code>false</code>)
                *             when a warning is encountered. The default value is <code>false</code>.</p>
                */
            failOnWarnings?: boolean;
            /**
                * <p>A key-value map of context-specific query string parameters specifying the behavior of different API importing operations. The following shows operation-specific parameters and their supported values.</p>
                *         <p> To exclude DocumentationParts from the import, set <code>parameters</code> as <code>ignore=documentation</code>.</p>
                *          <p> To configure the endpoint type, set <code>parameters</code> as <code>endpointConfigurationTypes=EDGE</code>, <code>endpointConfigurationTypes=REGIONAL</code>, or <code>endpointConfigurationTypes=PRIVATE</code>. The default endpoint type is <code>EDGE</code>.</p>
                *         <p> To handle imported <code>basepath</code>, set <code>parameters</code> as <code>basepath=ignore</code>, <code>basepath=prepend</code> or <code>basepath=split</code>.</p>
                *         <p>For example, the AWS CLI command to exclude documentation from the imported API is:</p>
                *         <p>The AWS CLI command to set the regional endpoint on the imported API is:</p>
                */
            parameters?: Record<string, string>;
            /**
                * <p>The POST request body containing external API definitions. Currently, only OpenAPI definition JSON/YAML files are supported. The maximum size of the API definition file is 6MB.</p>
                */
            body: Uint8Array | undefined;
    }
    export namespace ImportRestApiRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportRestApiRequest) => any;
    }
    /**
        * <p>Creates a customization of a GatewayResponse of a specified response type and status code on the given RestApi.</p>
        */
    export interface PutGatewayResponseRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The response type of the associated GatewayResponse</p>
                */
            responseType: GatewayResponseType | string | undefined;
            /**
                * <p>The HTTP status code of the GatewayResponse.</p>
                */
            statusCode?: string;
            /**
                * <p>Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value  pairs.</p>
                */
            responseParameters?: Record<string, string>;
            /**
                * <p>Response templates of the GatewayResponse as a string-to-string map of key-value pairs.</p>
                */
            responseTemplates?: Record<string, string>;
    }
    export namespace PutGatewayResponseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutGatewayResponseRequest) => any;
    }
    /**
        * <p>Sets up a method's integration.</p>
        */
    export interface PutIntegrationRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>Specifies a put integration request's resource ID.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>Specifies the HTTP method for the integration.</p>
                */
            httpMethod: string | undefined;
            /**
                * <p>Specifies a put integration input's type.</p>
                */
            type: IntegrationType | string | undefined;
            /**
                * <p>The HTTP method for the integration.</p>
                */
            integrationHttpMethod?: string;
            /**
                * <p>Specifies Uniform Resource Identifier (URI) of the integration endpoint. For HTTP or
                *       <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the
                *       RFC-3986 specification, for either standard integration, where <code>connectionType</code> is not <code>VPC_LINK</code>,
                *       or private integration, where <code>connectionType</code> is <code>VPC_LINK</code>. For a private HTTP integration, the
                *       URI is not used for routing. For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form
                *       <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api</code>}. Here,
                *       {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated
                *       Amazon Web Services service (e.g., s3); and {subdomain} is a designated subdomain supported by certain Amazon Web Services
                *       service for fast host-name lookup. action can be used for an Amazon Web Services service action-based API,
                *       using an Action={name}&{p1}={v1}&p2={v2}... query string. The ensuing {service_api} refers to
                *       a supported action {name} plus any required input parameters. Alternatively, path can be used
                *       for an Amazon Web Services service path-based API. The ensuing service_api refers to the path to an Amazon Web Services
                *       service resource, including the region of the integrated Amazon Web Services service, if applicable. For
                *       example, for integration with the S3 API of <code>GetObject</code>, the <code>uri</code> can be either
                *       <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&Bucket={bucket}&Key={key}</code> or
                *       <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code>.</p>
                */
            uri?: string;
            /**
                * <p>The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.</p>
                */
            connectionType?: ConnectionType | string;
            /**
                * <p>The ID of the VpcLink used for the integration. Specify this value only if you specify <code>VPC_LINK</code> as the connection type.</p>
                */
            connectionId?: string;
            /**
                * <p>Specifies whether credentials are required for a put integration.</p>
                */
            credentials?: string;
            /**
                * <p>A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of  <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.</p>
                */
            requestParameters?: Record<string, string>;
            /**
                * <p>Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.</p>
                */
            requestTemplates?: Record<string, string>;
            /**
                * <p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the <code>requestTemplates</code> property on the Integration resource. There are three valid values:  <code>WHEN_NO_MATCH</code>, <code>WHEN_NO_TEMPLATES</code>, and <code>NEVER</code>.
                *         </p>
                */
            passthroughBehavior?: string;
            /**
                * <p>Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.</p>
                */
            cacheNamespace?: string;
            /**
                * <p>A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for Method <code>requestParameters</code>.</p>
                */
            cacheKeyParameters?: string[];
            /**
                * <p>Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p>
                *
                *          <p>If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.</p>
                */
            contentHandling?: ContentHandlingStrategy | string;
            /**
                * <p>Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.</p>
                */
            timeoutInMillis?: number;
            /**
                * <p>Specifies the TLS configuration for an integration.</p>
                */
            tlsConfig?: TlsConfig;
    }
    export namespace PutIntegrationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutIntegrationRequest) => any;
    }
    /**
        * <p>Represents a put integration response request.</p>
        */
    export interface PutIntegrationResponseRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>Specifies a put integration response request's resource identifier.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>Specifies a put integration response request's HTTP method.</p>
                */
            httpMethod: string | undefined;
            /**
                * <p>Specifies the status code that is used to map the integration response to an existing MethodResponse.</p>
                */
            statusCode: string | undefined;
            /**
                * <p>Specifies the selection pattern of a put integration response.</p>
                */
            selectionPattern?: string;
            /**
                * <p>A key-value map specifying response parameters that are passed to the method response from the back end.
                *             The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> must be a valid and unique response header name and <code>JSON-expression</code> a valid JSON expression without the <code>$</code> prefix.</p>
                */
            responseParameters?: Record<string, string>;
            /**
                * <p>Specifies a put integration response's templates.</p>
                */
            responseTemplates?: Record<string, string>;
            /**
                * <p>Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p>
                *
                *          <p>If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.</p>
                */
            contentHandling?: ContentHandlingStrategy | string;
    }
    export namespace PutIntegrationResponseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutIntegrationResponseRequest) => any;
    }
    /**
        * <p>Request to add a method to an existing Resource resource.</p>
        */
    export interface PutMethodRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The Resource identifier for the new Method resource.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>Specifies the method request's HTTP method type.</p>
                */
            httpMethod: string | undefined;
            /**
                * <p>The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.</p>
                */
            authorizationType: string | undefined;
            /**
                * <p>Specifies the identifier of an Authorizer to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.</p>
                */
            authorizerId?: string;
            /**
                * <p>Specifies whether the method required a valid ApiKey.</p>
                */
            apiKeyRequired?: boolean;
            /**
                * <p>A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.</p>
                */
            operationName?: string;
            /**
                * <p>A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of  <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>).  The method request parameter names defined here are available in Integration to be mapped to integration request parameters or body-mapping templates.</p>
                */
            requestParameters?: Record<string, boolean>;
            /**
                * <p>Specifies the Model resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a Model name as the value.</p>
                */
            requestModels?: Record<string, string>;
            /**
                * <p>The identifier of a RequestValidator for validating the method request.</p>
                */
            requestValidatorId?: string;
            /**
                * <p>A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.</p>
                */
            authorizationScopes?: string[];
    }
    export namespace PutMethodRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutMethodRequest) => any;
    }
    /**
        * <p>Request to add a MethodResponse to an existing Method resource.</p>
        */
    export interface PutMethodResponseRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The Resource identifier for the Method resource.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>The HTTP verb of the Method resource.</p>
                */
            httpMethod: string | undefined;
            /**
                * <p>The method response's status code.</p>
                */
            statusCode: string | undefined;
            /**
                * <p>A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header name and the associated value is a Boolean flag indicating whether the method response parameter is required or not. The method response header names must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The response parameter names defined here are available in the integration response to be mapped from an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)</p>
                */
            responseParameters?: Record<string, boolean>;
            /**
                * <p>Specifies the Model resources used for the response's content type. Response models are represented as a key/value map, with a content type as the key and a Model name as the value.</p>
                */
            responseModels?: Record<string, string>;
    }
    export namespace PutMethodResponseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutMethodResponseRequest) => any;
    }
    /**
        * <p>A PUT request to update an existing API, with external API definitions specified as the request body.</p>
        */
    export interface PutRestApiRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The <code>mode</code> query parameter to specify the update mode. Valid values are "merge" and "overwrite". By default,
                *         the update mode is "merge".</p>
                */
            mode?: PutMode | string;
            /**
                * <p>A query parameter to indicate whether to rollback the API update (<code>true</code>) or not (<code>false</code>)
                *             when a warning is encountered. The default value is <code>false</code>.</p>
                */
            failOnWarnings?: boolean;
            /**
                * <p>Custom header parameters as part of the request. For example, to exclude DocumentationParts from an imported API, set <code>ignore=documentation</code> as a <code>parameters</code> value, as in the AWS CLI command of <code>aws apigateway import-rest-api --parameters ignore=documentation --body 'file:///path/to/imported-api-body.json'</code>.</p>
                */
            parameters?: Record<string, string>;
            /**
                * <p>The PUT request body containing external API definitions. Currently, only OpenAPI definition JSON/YAML files are supported. The maximum size of the API definition file is 6MB.</p>
                */
            body: Uint8Array | undefined;
    }
    export namespace PutRestApiRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutRestApiRequest) => any;
    }
    /**
        * <p>Adds or updates a tag on a given resource.</p>
        */
    export interface TagResourceRequest {
            /**
                * <p>The ARN of a resource that can be tagged.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
                */
            tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    /**
        * <p>Make a request to simulate the invocation of an Authorizer.</p>
        */
    export interface TestInvokeAuthorizerRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>Specifies a test invoke authorizer request's Authorizer ID.</p>
                */
            authorizerId: string | undefined;
            /**
                * <p>A key-value map of headers to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, should be specified.</p>
                */
            headers?: Record<string, string>;
            /**
                * <p>The headers as a map from string to list of values to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, may be specified.</p>
                */
            multiValueHeaders?: Record<string, string[]>;
            /**
                * <p>The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.</p>
                */
            pathWithQueryString?: string;
            /**
                * <p>The simulated request body of an incoming invocation request.</p>
                */
            body?: string;
            /**
                * <p>A key-value map of stage variables to simulate an invocation on a deployed Stage.</p>
                */
            stageVariables?: Record<string, string>;
            /**
                * <p>A key-value map of additional context variables.</p>
                */
            additionalContext?: Record<string, string>;
    }
    export namespace TestInvokeAuthorizerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestInvokeAuthorizerRequest) => any;
    }
    /**
        * <p>Represents the response of the test invoke request for a custom Authorizer</p>
        */
    export interface TestInvokeAuthorizerResponse {
            /**
                * <p>The HTTP status code that the client would have received. Value is 0 if the authorizer succeeded.</p>
                */
            clientStatus?: number;
            /**
                * <p>The API Gateway execution log for the test authorizer request.</p>
                */
            log?: string;
            /**
                * <p>The execution latency of the test authorizer request.</p>
                */
            latency?: number;
            /**
                * <p>The principal identity returned by the Authorizer</p>
                */
            principalId?: string;
            /**
                * <p>The JSON policy document returned by the Authorizer</p>
                */
            policy?: string;
            /**
                * <p>The authorization response.</p>
                */
            authorization?: Record<string, string[]>;
            /**
                * <p>The open identity claims, with any supported custom attributes, returned from the Cognito Your User Pool configured for the API.</p>
                */
            claims?: Record<string, string>;
    }
    export namespace TestInvokeAuthorizerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestInvokeAuthorizerResponse) => any;
    }
    /**
        * <p>Make a request to simulate the invocation of a Method.</p>
        */
    export interface TestInvokeMethodRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>Specifies a test invoke method request's resource ID.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>Specifies a test invoke method request's HTTP method.</p>
                */
            httpMethod: string | undefined;
            /**
                * <p>The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.</p>
                */
            pathWithQueryString?: string;
            /**
                * <p>The simulated request body of an incoming invocation request.</p>
                */
            body?: string;
            /**
                * <p>A key-value map of headers to simulate an incoming invocation request.</p>
                */
            headers?: Record<string, string>;
            /**
                * <p>The headers as a map from string to list of values to simulate an incoming invocation request.</p>
                */
            multiValueHeaders?: Record<string, string[]>;
            /**
                * <p>A ClientCertificate identifier to use in the test invocation. API Gateway will use the certificate when making the HTTPS request to the defined back-end endpoint.</p>
                */
            clientCertificateId?: string;
            /**
                * <p>A key-value map of stage variables to simulate an invocation on a deployed Stage.</p>
                */
            stageVariables?: Record<string, string>;
    }
    export namespace TestInvokeMethodRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestInvokeMethodRequest) => any;
    }
    /**
        * <p>Represents the response of the test invoke request in the HTTP method.</p>
        */
    export interface TestInvokeMethodResponse {
            /**
                * <p>The HTTP status code.</p>
                */
            status?: number;
            /**
                * <p>The body of the HTTP response.</p>
                */
            body?: string;
            /**
                * <p>The headers of the HTTP response.</p>
                */
            headers?: Record<string, string>;
            /**
                * <p>The headers of the HTTP response as a map from string to list of values.</p>
                */
            multiValueHeaders?: Record<string, string[]>;
            /**
                * <p>The API Gateway execution log for the test invoke request.</p>
                */
            log?: string;
            /**
                * <p>The execution latency of the test invoke request.</p>
                */
            latency?: number;
    }
    export namespace TestInvokeMethodResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestInvokeMethodResponse) => any;
    }
    /**
        * <p>Removes a tag from a given resource.</p>
        */
    export interface UntagResourceRequest {
            /**
                * <p>The ARN of a resource that can be tagged.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The Tag keys to delete.</p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export type Op = "add" | "copy" | "move" | "remove" | "replace" | "test";
    /**
        * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
        */
    export interface PatchOperation {
            /**
                * <p>An update operation to be performed with this PATCH request. The valid value can be
                *             add, remove, replace or copy. Not all valid operations are supported for a given
                *             resource. Support of the operations depends on specific operational contexts. Attempts
                *             to apply an unsupported operation on a resource will return an error message..</p>
                */
            op?: Op | string;
            /**
                * <p>The op operation's target, as identified by a JSON Pointer value that references a
                *             location within the targeted resource. For example, if the target resource has an
                *             updateable property of {"name":"value"}, the path for this property is /name. If the
                *             name property value is a JSON object (e.g., {"name": {"child/name": "child-value"}}),
                *             the path for the child/name property will be /name/child~1name. Any slash ("/")
                *             character appearing in path names must be escaped with "~1", as shown in the example
                *             above. Each op operation can have only one path associated with it.</p>
                */
            path?: string;
            /**
                * <p>The new target value of the update operation. It is applicable for the add or replace
                *             operation. When using AWS CLI to update a property of a JSON value, enclose the JSON
                *             object with a pair of single quotes in a Linux shell, e.g., '{"a": ...}'.</p>
                */
            value?: string;
            /**
                * <p>The copy update operation's source as identified by a JSON-Pointer value referencing
                *             the location within the targeted resource to copy the value from. For example, to
                *             promote a canary deployment, you copy the canary deployment ID to the affiliated
                *             deployment ID by calling a PATCH request on a Stage resource with "op":"copy",
                *             "from":"/canarySettings/deploymentId" and "path":"/deploymentId".</p>
                */
            from?: string;
    }
    export namespace PatchOperation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PatchOperation) => any;
    }
    /**
        * <p>Requests API Gateway to change information about the current Account resource.</p>
        */
    export interface UpdateAccountRequest {
            /**
                * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
                */
            patchOperations?: PatchOperation[];
    }
    export namespace UpdateAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAccountRequest) => any;
    }
    /**
        * <p>A request to change information about an ApiKey resource.</p>
        */
    export interface UpdateApiKeyRequest {
            /**
                * <p>The identifier of the ApiKey resource to be updated.</p>
                */
            apiKey: string | undefined;
            /**
                * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
                */
            patchOperations?: PatchOperation[];
    }
    export namespace UpdateApiKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApiKeyRequest) => any;
    }
    /**
        * <p>Request to update an existing Authorizer resource.</p>
        */
    export interface UpdateAuthorizerRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The identifier of the Authorizer resource.</p>
                */
            authorizerId: string | undefined;
            /**
                * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
                */
            patchOperations?: PatchOperation[];
    }
    export namespace UpdateAuthorizerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAuthorizerRequest) => any;
    }
    /**
        * <p>A request to change information about the BasePathMapping resource.</p>
        */
    export interface UpdateBasePathMappingRequest {
            /**
                * <p>The domain name of the BasePathMapping resource to change.</p>
                */
            domainName: string | undefined;
            /**
                * <p>The base path of the BasePathMapping resource to change.</p>
                *         <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>
                */
            basePath: string | undefined;
            /**
                * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
                */
            patchOperations?: PatchOperation[];
    }
    export namespace UpdateBasePathMappingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateBasePathMappingRequest) => any;
    }
    /**
        * <p>A request to change information about an ClientCertificate resource.</p>
        */
    export interface UpdateClientCertificateRequest {
            /**
                * <p>The identifier of the ClientCertificate resource to be updated.</p>
                */
            clientCertificateId: string | undefined;
            /**
                * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
                */
            patchOperations?: PatchOperation[];
    }
    export namespace UpdateClientCertificateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateClientCertificateRequest) => any;
    }
    /**
        * <p>Requests API Gateway to change information about a Deployment resource.</p>
        */
    export interface UpdateDeploymentRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The replacement identifier for the Deployment resource to change information about.</p>
                */
            deploymentId: string | undefined;
            /**
                * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
                */
            patchOperations?: PatchOperation[];
    }
    export namespace UpdateDeploymentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDeploymentRequest) => any;
    }
    /**
        * <p>Updates an existing documentation part of a given API.</p>
        */
    export interface UpdateDocumentationPartRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The identifier of the to-be-updated documentation part.</p>
                */
            documentationPartId: string | undefined;
            /**
                * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
                */
            patchOperations?: PatchOperation[];
    }
    export namespace UpdateDocumentationPartRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDocumentationPartRequest) => any;
    }
    /**
        * <p>Updates an existing documentation version of an API.</p>
        */
    export interface UpdateDocumentationVersionRequest {
            /**
                * <p>The string identifier of the associated RestApi..</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The version identifier of the to-be-updated documentation version.</p>
                */
            documentationVersion: string | undefined;
            /**
                * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
                */
            patchOperations?: PatchOperation[];
    }
    export namespace UpdateDocumentationVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDocumentationVersionRequest) => any;
    }
    /**
        * <p>A request to change information about the DomainName resource.</p>
        */
    export interface UpdateDomainNameRequest {
            /**
                * <p>The name of the DomainName resource to be changed.</p>
                */
            domainName: string | undefined;
            /**
                * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
                */
            patchOperations?: PatchOperation[];
    }
    export namespace UpdateDomainNameRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDomainNameRequest) => any;
    }
    /**
        * <p>Updates a GatewayResponse of a specified response type on the given RestApi.</p>
        */
    export interface UpdateGatewayResponseRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The response type of the associated GatewayResponse.</p>
                */
            responseType: GatewayResponseType | string | undefined;
            /**
                * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
                */
            patchOperations?: PatchOperation[];
    }
    export namespace UpdateGatewayResponseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateGatewayResponseRequest) => any;
    }
    /**
        * <p>Represents an update integration request.</p>
        */
    export interface UpdateIntegrationRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>Represents an update integration request's resource identifier.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>Represents an update integration request's HTTP method.</p>
                */
            httpMethod: string | undefined;
            /**
                * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
                */
            patchOperations?: PatchOperation[];
    }
    export namespace UpdateIntegrationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateIntegrationRequest) => any;
    }
    /**
        * <p>Represents an update integration response request.</p>
        */
    export interface UpdateIntegrationResponseRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>Specifies an update integration response request's resource identifier.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>Specifies an update integration response request's HTTP method.</p>
                */
            httpMethod: string | undefined;
            /**
                * <p>Specifies an update integration response request's status code.</p>
                */
            statusCode: string | undefined;
            /**
                * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
                */
            patchOperations?: PatchOperation[];
    }
    export namespace UpdateIntegrationResponseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateIntegrationResponseRequest) => any;
    }
    /**
        * <p>Request to update an existing Method resource.</p>
        */
    export interface UpdateMethodRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The Resource identifier for the Method resource.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>The HTTP verb of the Method resource.</p>
                */
            httpMethod: string | undefined;
            /**
                * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
                */
            patchOperations?: PatchOperation[];
    }
    export namespace UpdateMethodRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateMethodRequest) => any;
    }
    /**
        * <p>A request to update an existing MethodResponse resource.</p>
        */
    export interface UpdateMethodResponseRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The Resource identifier for the MethodResponse resource.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>The HTTP verb of the Method resource.</p>
                */
            httpMethod: string | undefined;
            /**
                * <p>The status code for the MethodResponse resource.</p>
                */
            statusCode: string | undefined;
            /**
                * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
                */
            patchOperations?: PatchOperation[];
    }
    export namespace UpdateMethodResponseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateMethodResponseRequest) => any;
    }
    /**
        * <p>Request to update an existing model in an existing RestApi resource.</p>
        */
    export interface UpdateModelRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The name of the model to update.</p>
                */
            modelName: string | undefined;
            /**
                * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
                */
            patchOperations?: PatchOperation[];
    }
    export namespace UpdateModelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateModelRequest) => any;
    }
    /**
        * <p>Updates a RequestValidator of a given RestApi.</p>
        */
    export interface UpdateRequestValidatorRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The identifier of RequestValidator to be updated.</p>
                */
            requestValidatorId: string | undefined;
            /**
                * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
                */
            patchOperations?: PatchOperation[];
    }
    export namespace UpdateRequestValidatorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRequestValidatorRequest) => any;
    }
    /**
        * <p>Request to change information about a Resource resource.</p>
        */
    export interface UpdateResourceRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The identifier of the Resource resource.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
                */
            patchOperations?: PatchOperation[];
    }
    export namespace UpdateResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateResourceRequest) => any;
    }
    /**
        * <p>Request to update an existing RestApi resource in your collection.</p>
        */
    export interface UpdateRestApiRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
                */
            patchOperations?: PatchOperation[];
    }
    export namespace UpdateRestApiRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRestApiRequest) => any;
    }
    /**
        * <p>Requests API Gateway to change information about a Stage resource.</p>
        */
    export interface UpdateStageRequest {
            /**
                * <p>The string identifier of the associated RestApi.</p>
                */
            restApiId: string | undefined;
            /**
                * <p>The name of the Stage resource to change information about.</p>
                */
            stageName: string | undefined;
            /**
                * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
                */
            patchOperations?: PatchOperation[];
    }
    export namespace UpdateStageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateStageRequest) => any;
    }
    /**
        * <p>The PATCH request to grant a temporary extension to the remaining quota of a usage plan associated with a specified API key.</p>
        */
    export interface UpdateUsageRequest {
            /**
                * <p>The Id of the usage plan associated with the usage data.</p>
                */
            usagePlanId: string | undefined;
            /**
                * <p>The identifier of the API key associated with the usage plan in which a temporary extension is granted to the remaining quota.</p>
                */
            keyId: string | undefined;
            /**
                * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
                */
            patchOperations?: PatchOperation[];
    }
    export namespace UpdateUsageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUsageRequest) => any;
    }
    /**
        * <p>The PATCH request to update a usage plan of a given plan Id.</p>
        */
    export interface UpdateUsagePlanRequest {
            /**
                * <p>The Id of the to-be-updated usage plan.</p>
                */
            usagePlanId: string | undefined;
            /**
                * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
                */
            patchOperations?: PatchOperation[];
    }
    export namespace UpdateUsagePlanRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUsagePlanRequest) => any;
    }
    /**
        * <p>Updates an existing VpcLink of a specified identifier.</p>
        */
    export interface UpdateVpcLinkRequest {
            /**
                * <p>The identifier of the  VpcLink. It is used in an Integration to reference this VpcLink.</p>
                */
            vpcLinkId: string | undefined;
            /**
                * <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
                */
            patchOperations?: PatchOperation[];
    }
    export namespace UpdateVpcLinkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateVpcLinkRequest) => any;
    }
}

declare module '@aws-sdk/client-api-gateway/node_modules/@aws-sdk/client-api-gateway/dist-types/models/APIGatewayServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from APIGateway service.
        */
    export class APIGatewayServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

