// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-mediastore' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CreateContainerCommandInput, CreateContainerCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/CreateContainerCommand";
    import { DeleteContainerCommandInput, DeleteContainerCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/DeleteContainerCommand";
    import { DeleteContainerPolicyCommandInput, DeleteContainerPolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/DeleteContainerPolicyCommand";
    import { DeleteCorsPolicyCommandInput, DeleteCorsPolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/DeleteCorsPolicyCommand";
    import { DeleteLifecyclePolicyCommandInput, DeleteLifecyclePolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/DeleteLifecyclePolicyCommand";
    import { DeleteMetricPolicyCommandInput, DeleteMetricPolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/DeleteMetricPolicyCommand";
    import { DescribeContainerCommandInput, DescribeContainerCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/DescribeContainerCommand";
    import { GetContainerPolicyCommandInput, GetContainerPolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/GetContainerPolicyCommand";
    import { GetCorsPolicyCommandInput, GetCorsPolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/GetCorsPolicyCommand";
    import { GetLifecyclePolicyCommandInput, GetLifecyclePolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/GetLifecyclePolicyCommand";
    import { GetMetricPolicyCommandInput, GetMetricPolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/GetMetricPolicyCommand";
    import { ListContainersCommandInput, ListContainersCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/ListContainersCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/ListTagsForResourceCommand";
    import { PutContainerPolicyCommandInput, PutContainerPolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/PutContainerPolicyCommand";
    import { PutCorsPolicyCommandInput, PutCorsPolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/PutCorsPolicyCommand";
    import { PutLifecyclePolicyCommandInput, PutLifecyclePolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/PutLifecyclePolicyCommand";
    import { PutMetricPolicyCommandInput, PutMetricPolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/PutMetricPolicyCommand";
    import { StartAccessLoggingCommandInput, StartAccessLoggingCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/StartAccessLoggingCommand";
    import { StopAccessLoggingCommandInput, StopAccessLoggingCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/StopAccessLoggingCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/UntagResourceCommand";
    import { MediaStoreClient } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient";
    /**
        * <p>An AWS Elemental MediaStore container is a namespace that holds folders and objects.
        *          You use a container endpoint to create, read, and delete objects. </p>
        */
    export class MediaStore extends MediaStoreClient {
            /**
                * <p>Creates a storage container to hold objects. A container is similar to a bucket in
                *          the Amazon S3 service.</p>
                */
            createContainer(args: CreateContainerCommandInput, options?: __HttpHandlerOptions): Promise<CreateContainerCommandOutput>;
            createContainer(args: CreateContainerCommandInput, cb: (err: any, data?: CreateContainerCommandOutput) => void): void;
            createContainer(args: CreateContainerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateContainerCommandOutput) => void): void;
            /**
                * <p>Deletes the specified container. Before you make a <code>DeleteContainer</code>
                *          request, delete any objects in the container or in any folders in the container. You can
                *          delete only empty containers. </p>
                */
            deleteContainer(args: DeleteContainerCommandInput, options?: __HttpHandlerOptions): Promise<DeleteContainerCommandOutput>;
            deleteContainer(args: DeleteContainerCommandInput, cb: (err: any, data?: DeleteContainerCommandOutput) => void): void;
            deleteContainer(args: DeleteContainerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteContainerCommandOutput) => void): void;
            /**
                * <p>Deletes the access policy that is associated with the specified container.</p>
                */
            deleteContainerPolicy(args: DeleteContainerPolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteContainerPolicyCommandOutput>;
            deleteContainerPolicy(args: DeleteContainerPolicyCommandInput, cb: (err: any, data?: DeleteContainerPolicyCommandOutput) => void): void;
            deleteContainerPolicy(args: DeleteContainerPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteContainerPolicyCommandOutput) => void): void;
            /**
                * <p>Deletes the cross-origin resource sharing (CORS) configuration information that is
                *          set for the container.</p>
                *          <p>To use this operation, you must have permission to perform the
                *             <code>MediaStore:DeleteCorsPolicy</code> action. The container owner has this permission
                *          by default and can grant this permission to others.</p>
                */
            deleteCorsPolicy(args: DeleteCorsPolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCorsPolicyCommandOutput>;
            deleteCorsPolicy(args: DeleteCorsPolicyCommandInput, cb: (err: any, data?: DeleteCorsPolicyCommandOutput) => void): void;
            deleteCorsPolicy(args: DeleteCorsPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCorsPolicyCommandOutput) => void): void;
            /**
                * <p>Removes an object lifecycle policy from a container. It takes up to 20 minutes for the change to take effect.</p>
                */
            deleteLifecyclePolicy(args: DeleteLifecyclePolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLifecyclePolicyCommandOutput>;
            deleteLifecyclePolicy(args: DeleteLifecyclePolicyCommandInput, cb: (err: any, data?: DeleteLifecyclePolicyCommandOutput) => void): void;
            deleteLifecyclePolicy(args: DeleteLifecyclePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLifecyclePolicyCommandOutput) => void): void;
            /**
                * <p>Deletes the metric policy that is associated with the specified container. If there is no metric policy associated with the container, MediaStore doesn't send metrics to CloudWatch.</p>
                */
            deleteMetricPolicy(args: DeleteMetricPolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteMetricPolicyCommandOutput>;
            deleteMetricPolicy(args: DeleteMetricPolicyCommandInput, cb: (err: any, data?: DeleteMetricPolicyCommandOutput) => void): void;
            deleteMetricPolicy(args: DeleteMetricPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteMetricPolicyCommandOutput) => void): void;
            /**
                * <p>Retrieves the properties of the requested container. This request is commonly used to
                *          retrieve the endpoint of a container. An endpoint is a value assigned by the service when a
                *          new container is created. A container's endpoint does not change after it has been
                *          assigned. The <code>DescribeContainer</code> request returns a single
                *             <code>Container</code> object based on <code>ContainerName</code>. To return all
                *             <code>Container</code> objects that are associated with a specified AWS account, use
                *             <a>ListContainers</a>.</p>
                */
            describeContainer(args: DescribeContainerCommandInput, options?: __HttpHandlerOptions): Promise<DescribeContainerCommandOutput>;
            describeContainer(args: DescribeContainerCommandInput, cb: (err: any, data?: DescribeContainerCommandOutput) => void): void;
            describeContainer(args: DescribeContainerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeContainerCommandOutput) => void): void;
            /**
                * <p>Retrieves the access policy for the specified container. For information about the
                *          data that is included in an access policy, see the <a href="https://aws.amazon.com/documentation/iam/">AWS Identity and Access Management User
                *             Guide</a>.</p>
                */
            getContainerPolicy(args: GetContainerPolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetContainerPolicyCommandOutput>;
            getContainerPolicy(args: GetContainerPolicyCommandInput, cb: (err: any, data?: GetContainerPolicyCommandOutput) => void): void;
            getContainerPolicy(args: GetContainerPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetContainerPolicyCommandOutput) => void): void;
            /**
                * <p>Returns the cross-origin resource sharing (CORS) configuration information that is
                *          set for the container.</p>
                *          <p>To use this operation, you must have permission to perform the
                *             <code>MediaStore:GetCorsPolicy</code> action. By default, the container owner has this
                *          permission and can grant it to others.</p>
                */
            getCorsPolicy(args: GetCorsPolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetCorsPolicyCommandOutput>;
            getCorsPolicy(args: GetCorsPolicyCommandInput, cb: (err: any, data?: GetCorsPolicyCommandOutput) => void): void;
            getCorsPolicy(args: GetCorsPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCorsPolicyCommandOutput) => void): void;
            /**
                * <p>Retrieves the object lifecycle policy that is assigned to a container.</p>
                */
            getLifecyclePolicy(args: GetLifecyclePolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetLifecyclePolicyCommandOutput>;
            getLifecyclePolicy(args: GetLifecyclePolicyCommandInput, cb: (err: any, data?: GetLifecyclePolicyCommandOutput) => void): void;
            getLifecyclePolicy(args: GetLifecyclePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLifecyclePolicyCommandOutput) => void): void;
            /**
                * <p>Returns the metric policy for the specified container. </p>
                */
            getMetricPolicy(args: GetMetricPolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetMetricPolicyCommandOutput>;
            getMetricPolicy(args: GetMetricPolicyCommandInput, cb: (err: any, data?: GetMetricPolicyCommandOutput) => void): void;
            getMetricPolicy(args: GetMetricPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMetricPolicyCommandOutput) => void): void;
            /**
                * <p>Lists the properties of all containers in AWS Elemental MediaStore. </p>
                *          <p>You can query to receive all the containers in one response. Or you can include the
                *             <code>MaxResults</code> parameter to receive a limited number of containers in each
                *          response. In this case, the response includes a token. To get the next set of containers,
                *          send the command again, this time with the <code>NextToken</code> parameter (with the
                *          returned token as its value). The next set of responses appears, with a token if there are
                *          still more containers to receive. </p>
                *          <p>See also <a>DescribeContainer</a>, which gets the properties of one
                *          container. </p>
                */
            listContainers(args: ListContainersCommandInput, options?: __HttpHandlerOptions): Promise<ListContainersCommandOutput>;
            listContainers(args: ListContainersCommandInput, cb: (err: any, data?: ListContainersCommandOutput) => void): void;
            listContainers(args: ListContainersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListContainersCommandOutput) => void): void;
            /**
                * <p>Returns a list of the tags assigned to the specified container. </p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Creates an access policy for the specified container to restrict the users and
                *          clients that can access it. For information about the data that is included in an access
                *          policy, see the <a href="https://aws.amazon.com/documentation/iam/">AWS Identity and
                *             Access Management User Guide</a>.</p>
                *          <p>For this release of the REST API, you can create only one policy for a container. If
                *          you enter <code>PutContainerPolicy</code> twice, the second command modifies the existing
                *          policy. </p>
                */
            putContainerPolicy(args: PutContainerPolicyCommandInput, options?: __HttpHandlerOptions): Promise<PutContainerPolicyCommandOutput>;
            putContainerPolicy(args: PutContainerPolicyCommandInput, cb: (err: any, data?: PutContainerPolicyCommandOutput) => void): void;
            putContainerPolicy(args: PutContainerPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutContainerPolicyCommandOutput) => void): void;
            /**
                * <p>Sets the cross-origin resource sharing (CORS) configuration on a container so that
                *          the container can service cross-origin requests. For example, you might want to enable a
                *          request whose origin is http://www.example.com to access your AWS Elemental MediaStore
                *          container at my.example.container.com by using the browser's XMLHttpRequest
                *          capability.</p>
                *          <p>To enable CORS on a container, you attach a CORS policy to the container. In the CORS
                *          policy, you configure rules that identify origins and the HTTP methods that can be executed
                *          on your container. The policy can contain up to 398,000 characters. You can add up to 100
                *          rules to a CORS policy. If more than one rule applies, the service uses the first
                *          applicable rule listed.</p>
                *          <p>To learn more about CORS, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/cors-policy.html">Cross-Origin Resource Sharing (CORS) in AWS Elemental MediaStore</a>.</p>
                */
            putCorsPolicy(args: PutCorsPolicyCommandInput, options?: __HttpHandlerOptions): Promise<PutCorsPolicyCommandOutput>;
            putCorsPolicy(args: PutCorsPolicyCommandInput, cb: (err: any, data?: PutCorsPolicyCommandOutput) => void): void;
            putCorsPolicy(args: PutCorsPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutCorsPolicyCommandOutput) => void): void;
            /**
                * <p>Writes an object lifecycle policy to a container. If the container already has an object lifecycle policy, the service replaces the existing policy with the new policy. It takes up to 20 minutes for the change to take effect.</p>
                *          <p>For information about how to construct an object lifecycle policy, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/policies-object-lifecycle-components.html">Components of an Object Lifecycle Policy</a>.</p>
                */
            putLifecyclePolicy(args: PutLifecyclePolicyCommandInput, options?: __HttpHandlerOptions): Promise<PutLifecyclePolicyCommandOutput>;
            putLifecyclePolicy(args: PutLifecyclePolicyCommandInput, cb: (err: any, data?: PutLifecyclePolicyCommandOutput) => void): void;
            putLifecyclePolicy(args: PutLifecyclePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutLifecyclePolicyCommandOutput) => void): void;
            /**
                * <p>The metric policy that you want to add to the container. A metric policy allows AWS Elemental MediaStore to send metrics to Amazon CloudWatch. It takes up to 20 minutes for the new policy to take effect.</p>
                */
            putMetricPolicy(args: PutMetricPolicyCommandInput, options?: __HttpHandlerOptions): Promise<PutMetricPolicyCommandOutput>;
            putMetricPolicy(args: PutMetricPolicyCommandInput, cb: (err: any, data?: PutMetricPolicyCommandOutput) => void): void;
            putMetricPolicy(args: PutMetricPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutMetricPolicyCommandOutput) => void): void;
            /**
                * <p>Starts access logging on the specified container. When you enable access logging on a container, MediaStore delivers access logs for objects stored in that container to Amazon CloudWatch Logs.</p>
                */
            startAccessLogging(args: StartAccessLoggingCommandInput, options?: __HttpHandlerOptions): Promise<StartAccessLoggingCommandOutput>;
            startAccessLogging(args: StartAccessLoggingCommandInput, cb: (err: any, data?: StartAccessLoggingCommandOutput) => void): void;
            startAccessLogging(args: StartAccessLoggingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartAccessLoggingCommandOutput) => void): void;
            /**
                * <p>Stops access logging on the specified container. When you stop access logging on a container, MediaStore stops sending access logs to Amazon CloudWatch Logs. These access logs are not saved and are not retrievable.</p>
                */
            stopAccessLogging(args: StopAccessLoggingCommandInput, options?: __HttpHandlerOptions): Promise<StopAccessLoggingCommandOutput>;
            stopAccessLogging(args: StopAccessLoggingCommandInput, cb: (err: any, data?: StopAccessLoggingCommandOutput) => void): void;
            stopAccessLogging(args: StopAccessLoggingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopAccessLoggingCommandOutput) => void): void;
            /**
                * <p>Adds tags to the specified AWS Elemental MediaStore container. Tags are key:value pairs that you can associate with AWS resources. For example, the
                *             tag key might be "customer" and the tag value might be "companyA." You can specify one or more tags to add to each container. You can add up to 50
                *             tags to each container. For more information about tagging, including naming and usage conventions, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/tagging.html">Tagging Resources in MediaStore</a>.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes tags from the specified container. You can specify one or more tags to remove. </p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/CreateContainerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient";
    import { CreateContainerInput, CreateContainerOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/models_0";
    export interface CreateContainerCommandInput extends CreateContainerInput {
    }
    export interface CreateContainerCommandOutput extends CreateContainerOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a storage container to hold objects. A container is similar to a bucket in
        *          the Amazon S3 service.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaStoreClient, CreateContainerCommand } from "@aws-sdk/client-mediastore"; // ES Modules import
        * // const { MediaStoreClient, CreateContainerCommand } = require("@aws-sdk/client-mediastore"); // CommonJS import
        * const client = new MediaStoreClient(config);
        * const command = new CreateContainerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateContainerCommandInput} for command's `input` shape.
        * @see {@link CreateContainerCommandOutput} for command's `response` shape.
        * @see {@link MediaStoreClientResolvedConfig | config} for MediaStoreClient's `config` shape.
        *
        */
    export class CreateContainerCommand extends $Command<CreateContainerCommandInput, CreateContainerCommandOutput, MediaStoreClientResolvedConfig> {
            readonly input: CreateContainerCommandInput;
            constructor(input: CreateContainerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaStoreClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateContainerCommandInput, CreateContainerCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/DeleteContainerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient";
    import { DeleteContainerInput, DeleteContainerOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/models_0";
    export interface DeleteContainerCommandInput extends DeleteContainerInput {
    }
    export interface DeleteContainerCommandOutput extends DeleteContainerOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified container. Before you make a <code>DeleteContainer</code>
        *          request, delete any objects in the container or in any folders in the container. You can
        *          delete only empty containers. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaStoreClient, DeleteContainerCommand } from "@aws-sdk/client-mediastore"; // ES Modules import
        * // const { MediaStoreClient, DeleteContainerCommand } = require("@aws-sdk/client-mediastore"); // CommonJS import
        * const client = new MediaStoreClient(config);
        * const command = new DeleteContainerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteContainerCommandInput} for command's `input` shape.
        * @see {@link DeleteContainerCommandOutput} for command's `response` shape.
        * @see {@link MediaStoreClientResolvedConfig | config} for MediaStoreClient's `config` shape.
        *
        */
    export class DeleteContainerCommand extends $Command<DeleteContainerCommandInput, DeleteContainerCommandOutput, MediaStoreClientResolvedConfig> {
            readonly input: DeleteContainerCommandInput;
            constructor(input: DeleteContainerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaStoreClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteContainerCommandInput, DeleteContainerCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/DeleteContainerPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient";
    import { DeleteContainerPolicyInput, DeleteContainerPolicyOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/models_0";
    export interface DeleteContainerPolicyCommandInput extends DeleteContainerPolicyInput {
    }
    export interface DeleteContainerPolicyCommandOutput extends DeleteContainerPolicyOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes the access policy that is associated with the specified container.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaStoreClient, DeleteContainerPolicyCommand } from "@aws-sdk/client-mediastore"; // ES Modules import
        * // const { MediaStoreClient, DeleteContainerPolicyCommand } = require("@aws-sdk/client-mediastore"); // CommonJS import
        * const client = new MediaStoreClient(config);
        * const command = new DeleteContainerPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteContainerPolicyCommandInput} for command's `input` shape.
        * @see {@link DeleteContainerPolicyCommandOutput} for command's `response` shape.
        * @see {@link MediaStoreClientResolvedConfig | config} for MediaStoreClient's `config` shape.
        *
        */
    export class DeleteContainerPolicyCommand extends $Command<DeleteContainerPolicyCommandInput, DeleteContainerPolicyCommandOutput, MediaStoreClientResolvedConfig> {
            readonly input: DeleteContainerPolicyCommandInput;
            constructor(input: DeleteContainerPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaStoreClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteContainerPolicyCommandInput, DeleteContainerPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/DeleteCorsPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient";
    import { DeleteCorsPolicyInput, DeleteCorsPolicyOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/models_0";
    export interface DeleteCorsPolicyCommandInput extends DeleteCorsPolicyInput {
    }
    export interface DeleteCorsPolicyCommandOutput extends DeleteCorsPolicyOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes the cross-origin resource sharing (CORS) configuration information that is
        *          set for the container.</p>
        *          <p>To use this operation, you must have permission to perform the
        *             <code>MediaStore:DeleteCorsPolicy</code> action. The container owner has this permission
        *          by default and can grant this permission to others.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaStoreClient, DeleteCorsPolicyCommand } from "@aws-sdk/client-mediastore"; // ES Modules import
        * // const { MediaStoreClient, DeleteCorsPolicyCommand } = require("@aws-sdk/client-mediastore"); // CommonJS import
        * const client = new MediaStoreClient(config);
        * const command = new DeleteCorsPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteCorsPolicyCommandInput} for command's `input` shape.
        * @see {@link DeleteCorsPolicyCommandOutput} for command's `response` shape.
        * @see {@link MediaStoreClientResolvedConfig | config} for MediaStoreClient's `config` shape.
        *
        */
    export class DeleteCorsPolicyCommand extends $Command<DeleteCorsPolicyCommandInput, DeleteCorsPolicyCommandOutput, MediaStoreClientResolvedConfig> {
            readonly input: DeleteCorsPolicyCommandInput;
            constructor(input: DeleteCorsPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaStoreClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteCorsPolicyCommandInput, DeleteCorsPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/DeleteLifecyclePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient";
    import { DeleteLifecyclePolicyInput, DeleteLifecyclePolicyOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/models_0";
    export interface DeleteLifecyclePolicyCommandInput extends DeleteLifecyclePolicyInput {
    }
    export interface DeleteLifecyclePolicyCommandOutput extends DeleteLifecyclePolicyOutput, __MetadataBearer {
    }
    /**
        * <p>Removes an object lifecycle policy from a container. It takes up to 20 minutes for the change to take effect.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaStoreClient, DeleteLifecyclePolicyCommand } from "@aws-sdk/client-mediastore"; // ES Modules import
        * // const { MediaStoreClient, DeleteLifecyclePolicyCommand } = require("@aws-sdk/client-mediastore"); // CommonJS import
        * const client = new MediaStoreClient(config);
        * const command = new DeleteLifecyclePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLifecyclePolicyCommandInput} for command's `input` shape.
        * @see {@link DeleteLifecyclePolicyCommandOutput} for command's `response` shape.
        * @see {@link MediaStoreClientResolvedConfig | config} for MediaStoreClient's `config` shape.
        *
        */
    export class DeleteLifecyclePolicyCommand extends $Command<DeleteLifecyclePolicyCommandInput, DeleteLifecyclePolicyCommandOutput, MediaStoreClientResolvedConfig> {
            readonly input: DeleteLifecyclePolicyCommandInput;
            constructor(input: DeleteLifecyclePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaStoreClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLifecyclePolicyCommandInput, DeleteLifecyclePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/DeleteMetricPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient";
    import { DeleteMetricPolicyInput, DeleteMetricPolicyOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/models_0";
    export interface DeleteMetricPolicyCommandInput extends DeleteMetricPolicyInput {
    }
    export interface DeleteMetricPolicyCommandOutput extends DeleteMetricPolicyOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes the metric policy that is associated with the specified container. If there is no metric policy associated with the container, MediaStore doesn't send metrics to CloudWatch.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaStoreClient, DeleteMetricPolicyCommand } from "@aws-sdk/client-mediastore"; // ES Modules import
        * // const { MediaStoreClient, DeleteMetricPolicyCommand } = require("@aws-sdk/client-mediastore"); // CommonJS import
        * const client = new MediaStoreClient(config);
        * const command = new DeleteMetricPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteMetricPolicyCommandInput} for command's `input` shape.
        * @see {@link DeleteMetricPolicyCommandOutput} for command's `response` shape.
        * @see {@link MediaStoreClientResolvedConfig | config} for MediaStoreClient's `config` shape.
        *
        */
    export class DeleteMetricPolicyCommand extends $Command<DeleteMetricPolicyCommandInput, DeleteMetricPolicyCommandOutput, MediaStoreClientResolvedConfig> {
            readonly input: DeleteMetricPolicyCommandInput;
            constructor(input: DeleteMetricPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaStoreClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteMetricPolicyCommandInput, DeleteMetricPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/DescribeContainerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient";
    import { DescribeContainerInput, DescribeContainerOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/models_0";
    export interface DescribeContainerCommandInput extends DescribeContainerInput {
    }
    export interface DescribeContainerCommandOutput extends DescribeContainerOutput, __MetadataBearer {
    }
    /**
        * <p>Retrieves the properties of the requested container. This request is commonly used to
        *          retrieve the endpoint of a container. An endpoint is a value assigned by the service when a
        *          new container is created. A container's endpoint does not change after it has been
        *          assigned. The <code>DescribeContainer</code> request returns a single
        *             <code>Container</code> object based on <code>ContainerName</code>. To return all
        *             <code>Container</code> objects that are associated with a specified AWS account, use
        *             <a>ListContainers</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaStoreClient, DescribeContainerCommand } from "@aws-sdk/client-mediastore"; // ES Modules import
        * // const { MediaStoreClient, DescribeContainerCommand } = require("@aws-sdk/client-mediastore"); // CommonJS import
        * const client = new MediaStoreClient(config);
        * const command = new DescribeContainerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeContainerCommandInput} for command's `input` shape.
        * @see {@link DescribeContainerCommandOutput} for command's `response` shape.
        * @see {@link MediaStoreClientResolvedConfig | config} for MediaStoreClient's `config` shape.
        *
        */
    export class DescribeContainerCommand extends $Command<DescribeContainerCommandInput, DescribeContainerCommandOutput, MediaStoreClientResolvedConfig> {
            readonly input: DescribeContainerCommandInput;
            constructor(input: DescribeContainerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaStoreClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeContainerCommandInput, DescribeContainerCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/GetContainerPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient";
    import { GetContainerPolicyInput, GetContainerPolicyOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/models_0";
    export interface GetContainerPolicyCommandInput extends GetContainerPolicyInput {
    }
    export interface GetContainerPolicyCommandOutput extends GetContainerPolicyOutput, __MetadataBearer {
    }
    /**
        * <p>Retrieves the access policy for the specified container. For information about the
        *          data that is included in an access policy, see the <a href="https://aws.amazon.com/documentation/iam/">AWS Identity and Access Management User
        *             Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaStoreClient, GetContainerPolicyCommand } from "@aws-sdk/client-mediastore"; // ES Modules import
        * // const { MediaStoreClient, GetContainerPolicyCommand } = require("@aws-sdk/client-mediastore"); // CommonJS import
        * const client = new MediaStoreClient(config);
        * const command = new GetContainerPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetContainerPolicyCommandInput} for command's `input` shape.
        * @see {@link GetContainerPolicyCommandOutput} for command's `response` shape.
        * @see {@link MediaStoreClientResolvedConfig | config} for MediaStoreClient's `config` shape.
        *
        */
    export class GetContainerPolicyCommand extends $Command<GetContainerPolicyCommandInput, GetContainerPolicyCommandOutput, MediaStoreClientResolvedConfig> {
            readonly input: GetContainerPolicyCommandInput;
            constructor(input: GetContainerPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaStoreClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetContainerPolicyCommandInput, GetContainerPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/GetCorsPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient";
    import { GetCorsPolicyInput, GetCorsPolicyOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/models_0";
    export interface GetCorsPolicyCommandInput extends GetCorsPolicyInput {
    }
    export interface GetCorsPolicyCommandOutput extends GetCorsPolicyOutput, __MetadataBearer {
    }
    /**
        * <p>Returns the cross-origin resource sharing (CORS) configuration information that is
        *          set for the container.</p>
        *          <p>To use this operation, you must have permission to perform the
        *             <code>MediaStore:GetCorsPolicy</code> action. By default, the container owner has this
        *          permission and can grant it to others.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaStoreClient, GetCorsPolicyCommand } from "@aws-sdk/client-mediastore"; // ES Modules import
        * // const { MediaStoreClient, GetCorsPolicyCommand } = require("@aws-sdk/client-mediastore"); // CommonJS import
        * const client = new MediaStoreClient(config);
        * const command = new GetCorsPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCorsPolicyCommandInput} for command's `input` shape.
        * @see {@link GetCorsPolicyCommandOutput} for command's `response` shape.
        * @see {@link MediaStoreClientResolvedConfig | config} for MediaStoreClient's `config` shape.
        *
        */
    export class GetCorsPolicyCommand extends $Command<GetCorsPolicyCommandInput, GetCorsPolicyCommandOutput, MediaStoreClientResolvedConfig> {
            readonly input: GetCorsPolicyCommandInput;
            constructor(input: GetCorsPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaStoreClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCorsPolicyCommandInput, GetCorsPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/GetLifecyclePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient";
    import { GetLifecyclePolicyInput, GetLifecyclePolicyOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/models_0";
    export interface GetLifecyclePolicyCommandInput extends GetLifecyclePolicyInput {
    }
    export interface GetLifecyclePolicyCommandOutput extends GetLifecyclePolicyOutput, __MetadataBearer {
    }
    /**
        * <p>Retrieves the object lifecycle policy that is assigned to a container.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaStoreClient, GetLifecyclePolicyCommand } from "@aws-sdk/client-mediastore"; // ES Modules import
        * // const { MediaStoreClient, GetLifecyclePolicyCommand } = require("@aws-sdk/client-mediastore"); // CommonJS import
        * const client = new MediaStoreClient(config);
        * const command = new GetLifecyclePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLifecyclePolicyCommandInput} for command's `input` shape.
        * @see {@link GetLifecyclePolicyCommandOutput} for command's `response` shape.
        * @see {@link MediaStoreClientResolvedConfig | config} for MediaStoreClient's `config` shape.
        *
        */
    export class GetLifecyclePolicyCommand extends $Command<GetLifecyclePolicyCommandInput, GetLifecyclePolicyCommandOutput, MediaStoreClientResolvedConfig> {
            readonly input: GetLifecyclePolicyCommandInput;
            constructor(input: GetLifecyclePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaStoreClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLifecyclePolicyCommandInput, GetLifecyclePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/GetMetricPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient";
    import { GetMetricPolicyInput, GetMetricPolicyOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/models_0";
    export interface GetMetricPolicyCommandInput extends GetMetricPolicyInput {
    }
    export interface GetMetricPolicyCommandOutput extends GetMetricPolicyOutput, __MetadataBearer {
    }
    /**
        * <p>Returns the metric policy for the specified container. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaStoreClient, GetMetricPolicyCommand } from "@aws-sdk/client-mediastore"; // ES Modules import
        * // const { MediaStoreClient, GetMetricPolicyCommand } = require("@aws-sdk/client-mediastore"); // CommonJS import
        * const client = new MediaStoreClient(config);
        * const command = new GetMetricPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMetricPolicyCommandInput} for command's `input` shape.
        * @see {@link GetMetricPolicyCommandOutput} for command's `response` shape.
        * @see {@link MediaStoreClientResolvedConfig | config} for MediaStoreClient's `config` shape.
        *
        */
    export class GetMetricPolicyCommand extends $Command<GetMetricPolicyCommandInput, GetMetricPolicyCommandOutput, MediaStoreClientResolvedConfig> {
            readonly input: GetMetricPolicyCommandInput;
            constructor(input: GetMetricPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaStoreClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMetricPolicyCommandInput, GetMetricPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/ListContainersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient";
    import { ListContainersInput, ListContainersOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/models_0";
    export interface ListContainersCommandInput extends ListContainersInput {
    }
    export interface ListContainersCommandOutput extends ListContainersOutput, __MetadataBearer {
    }
    /**
        * <p>Lists the properties of all containers in AWS Elemental MediaStore. </p>
        *          <p>You can query to receive all the containers in one response. Or you can include the
        *             <code>MaxResults</code> parameter to receive a limited number of containers in each
        *          response. In this case, the response includes a token. To get the next set of containers,
        *          send the command again, this time with the <code>NextToken</code> parameter (with the
        *          returned token as its value). The next set of responses appears, with a token if there are
        *          still more containers to receive. </p>
        *          <p>See also <a>DescribeContainer</a>, which gets the properties of one
        *          container. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaStoreClient, ListContainersCommand } from "@aws-sdk/client-mediastore"; // ES Modules import
        * // const { MediaStoreClient, ListContainersCommand } = require("@aws-sdk/client-mediastore"); // CommonJS import
        * const client = new MediaStoreClient(config);
        * const command = new ListContainersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListContainersCommandInput} for command's `input` shape.
        * @see {@link ListContainersCommandOutput} for command's `response` shape.
        * @see {@link MediaStoreClientResolvedConfig | config} for MediaStoreClient's `config` shape.
        *
        */
    export class ListContainersCommand extends $Command<ListContainersCommandInput, ListContainersCommandOutput, MediaStoreClientResolvedConfig> {
            readonly input: ListContainersCommandInput;
            constructor(input: ListContainersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaStoreClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListContainersCommandInput, ListContainersCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient";
    import { ListTagsForResourceInput, ListTagsForResourceOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceInput {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceOutput, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the tags assigned to the specified container. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaStoreClient, ListTagsForResourceCommand } from "@aws-sdk/client-mediastore"; // ES Modules import
        * // const { MediaStoreClient, ListTagsForResourceCommand } = require("@aws-sdk/client-mediastore"); // CommonJS import
        * const client = new MediaStoreClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link MediaStoreClientResolvedConfig | config} for MediaStoreClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, MediaStoreClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaStoreClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/PutContainerPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient";
    import { PutContainerPolicyInput, PutContainerPolicyOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/models_0";
    export interface PutContainerPolicyCommandInput extends PutContainerPolicyInput {
    }
    export interface PutContainerPolicyCommandOutput extends PutContainerPolicyOutput, __MetadataBearer {
    }
    /**
        * <p>Creates an access policy for the specified container to restrict the users and
        *          clients that can access it. For information about the data that is included in an access
        *          policy, see the <a href="https://aws.amazon.com/documentation/iam/">AWS Identity and
        *             Access Management User Guide</a>.</p>
        *          <p>For this release of the REST API, you can create only one policy for a container. If
        *          you enter <code>PutContainerPolicy</code> twice, the second command modifies the existing
        *          policy. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaStoreClient, PutContainerPolicyCommand } from "@aws-sdk/client-mediastore"; // ES Modules import
        * // const { MediaStoreClient, PutContainerPolicyCommand } = require("@aws-sdk/client-mediastore"); // CommonJS import
        * const client = new MediaStoreClient(config);
        * const command = new PutContainerPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutContainerPolicyCommandInput} for command's `input` shape.
        * @see {@link PutContainerPolicyCommandOutput} for command's `response` shape.
        * @see {@link MediaStoreClientResolvedConfig | config} for MediaStoreClient's `config` shape.
        *
        */
    export class PutContainerPolicyCommand extends $Command<PutContainerPolicyCommandInput, PutContainerPolicyCommandOutput, MediaStoreClientResolvedConfig> {
            readonly input: PutContainerPolicyCommandInput;
            constructor(input: PutContainerPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaStoreClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutContainerPolicyCommandInput, PutContainerPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/PutCorsPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient";
    import { PutCorsPolicyInput, PutCorsPolicyOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/models_0";
    export interface PutCorsPolicyCommandInput extends PutCorsPolicyInput {
    }
    export interface PutCorsPolicyCommandOutput extends PutCorsPolicyOutput, __MetadataBearer {
    }
    /**
        * <p>Sets the cross-origin resource sharing (CORS) configuration on a container so that
        *          the container can service cross-origin requests. For example, you might want to enable a
        *          request whose origin is http://www.example.com to access your AWS Elemental MediaStore
        *          container at my.example.container.com by using the browser's XMLHttpRequest
        *          capability.</p>
        *          <p>To enable CORS on a container, you attach a CORS policy to the container. In the CORS
        *          policy, you configure rules that identify origins and the HTTP methods that can be executed
        *          on your container. The policy can contain up to 398,000 characters. You can add up to 100
        *          rules to a CORS policy. If more than one rule applies, the service uses the first
        *          applicable rule listed.</p>
        *          <p>To learn more about CORS, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/cors-policy.html">Cross-Origin Resource Sharing (CORS) in AWS Elemental MediaStore</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaStoreClient, PutCorsPolicyCommand } from "@aws-sdk/client-mediastore"; // ES Modules import
        * // const { MediaStoreClient, PutCorsPolicyCommand } = require("@aws-sdk/client-mediastore"); // CommonJS import
        * const client = new MediaStoreClient(config);
        * const command = new PutCorsPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutCorsPolicyCommandInput} for command's `input` shape.
        * @see {@link PutCorsPolicyCommandOutput} for command's `response` shape.
        * @see {@link MediaStoreClientResolvedConfig | config} for MediaStoreClient's `config` shape.
        *
        */
    export class PutCorsPolicyCommand extends $Command<PutCorsPolicyCommandInput, PutCorsPolicyCommandOutput, MediaStoreClientResolvedConfig> {
            readonly input: PutCorsPolicyCommandInput;
            constructor(input: PutCorsPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaStoreClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutCorsPolicyCommandInput, PutCorsPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/PutLifecyclePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient";
    import { PutLifecyclePolicyInput, PutLifecyclePolicyOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/models_0";
    export interface PutLifecyclePolicyCommandInput extends PutLifecyclePolicyInput {
    }
    export interface PutLifecyclePolicyCommandOutput extends PutLifecyclePolicyOutput, __MetadataBearer {
    }
    /**
        * <p>Writes an object lifecycle policy to a container. If the container already has an object lifecycle policy, the service replaces the existing policy with the new policy. It takes up to 20 minutes for the change to take effect.</p>
        *          <p>For information about how to construct an object lifecycle policy, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/policies-object-lifecycle-components.html">Components of an Object Lifecycle Policy</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaStoreClient, PutLifecyclePolicyCommand } from "@aws-sdk/client-mediastore"; // ES Modules import
        * // const { MediaStoreClient, PutLifecyclePolicyCommand } = require("@aws-sdk/client-mediastore"); // CommonJS import
        * const client = new MediaStoreClient(config);
        * const command = new PutLifecyclePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutLifecyclePolicyCommandInput} for command's `input` shape.
        * @see {@link PutLifecyclePolicyCommandOutput} for command's `response` shape.
        * @see {@link MediaStoreClientResolvedConfig | config} for MediaStoreClient's `config` shape.
        *
        */
    export class PutLifecyclePolicyCommand extends $Command<PutLifecyclePolicyCommandInput, PutLifecyclePolicyCommandOutput, MediaStoreClientResolvedConfig> {
            readonly input: PutLifecyclePolicyCommandInput;
            constructor(input: PutLifecyclePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaStoreClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutLifecyclePolicyCommandInput, PutLifecyclePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/PutMetricPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient";
    import { PutMetricPolicyInput, PutMetricPolicyOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/models_0";
    export interface PutMetricPolicyCommandInput extends PutMetricPolicyInput {
    }
    export interface PutMetricPolicyCommandOutput extends PutMetricPolicyOutput, __MetadataBearer {
    }
    /**
        * <p>The metric policy that you want to add to the container. A metric policy allows AWS Elemental MediaStore to send metrics to Amazon CloudWatch. It takes up to 20 minutes for the new policy to take effect.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaStoreClient, PutMetricPolicyCommand } from "@aws-sdk/client-mediastore"; // ES Modules import
        * // const { MediaStoreClient, PutMetricPolicyCommand } = require("@aws-sdk/client-mediastore"); // CommonJS import
        * const client = new MediaStoreClient(config);
        * const command = new PutMetricPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutMetricPolicyCommandInput} for command's `input` shape.
        * @see {@link PutMetricPolicyCommandOutput} for command's `response` shape.
        * @see {@link MediaStoreClientResolvedConfig | config} for MediaStoreClient's `config` shape.
        *
        */
    export class PutMetricPolicyCommand extends $Command<PutMetricPolicyCommandInput, PutMetricPolicyCommandOutput, MediaStoreClientResolvedConfig> {
            readonly input: PutMetricPolicyCommandInput;
            constructor(input: PutMetricPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaStoreClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutMetricPolicyCommandInput, PutMetricPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/StartAccessLoggingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient";
    import { StartAccessLoggingInput, StartAccessLoggingOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/models_0";
    export interface StartAccessLoggingCommandInput extends StartAccessLoggingInput {
    }
    export interface StartAccessLoggingCommandOutput extends StartAccessLoggingOutput, __MetadataBearer {
    }
    /**
        * <p>Starts access logging on the specified container. When you enable access logging on a container, MediaStore delivers access logs for objects stored in that container to Amazon CloudWatch Logs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaStoreClient, StartAccessLoggingCommand } from "@aws-sdk/client-mediastore"; // ES Modules import
        * // const { MediaStoreClient, StartAccessLoggingCommand } = require("@aws-sdk/client-mediastore"); // CommonJS import
        * const client = new MediaStoreClient(config);
        * const command = new StartAccessLoggingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartAccessLoggingCommandInput} for command's `input` shape.
        * @see {@link StartAccessLoggingCommandOutput} for command's `response` shape.
        * @see {@link MediaStoreClientResolvedConfig | config} for MediaStoreClient's `config` shape.
        *
        */
    export class StartAccessLoggingCommand extends $Command<StartAccessLoggingCommandInput, StartAccessLoggingCommandOutput, MediaStoreClientResolvedConfig> {
            readonly input: StartAccessLoggingCommandInput;
            constructor(input: StartAccessLoggingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaStoreClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartAccessLoggingCommandInput, StartAccessLoggingCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/StopAccessLoggingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient";
    import { StopAccessLoggingInput, StopAccessLoggingOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/models_0";
    export interface StopAccessLoggingCommandInput extends StopAccessLoggingInput {
    }
    export interface StopAccessLoggingCommandOutput extends StopAccessLoggingOutput, __MetadataBearer {
    }
    /**
        * <p>Stops access logging on the specified container. When you stop access logging on a container, MediaStore stops sending access logs to Amazon CloudWatch Logs. These access logs are not saved and are not retrievable.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaStoreClient, StopAccessLoggingCommand } from "@aws-sdk/client-mediastore"; // ES Modules import
        * // const { MediaStoreClient, StopAccessLoggingCommand } = require("@aws-sdk/client-mediastore"); // CommonJS import
        * const client = new MediaStoreClient(config);
        * const command = new StopAccessLoggingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopAccessLoggingCommandInput} for command's `input` shape.
        * @see {@link StopAccessLoggingCommandOutput} for command's `response` shape.
        * @see {@link MediaStoreClientResolvedConfig | config} for MediaStoreClient's `config` shape.
        *
        */
    export class StopAccessLoggingCommand extends $Command<StopAccessLoggingCommandInput, StopAccessLoggingCommandOutput, MediaStoreClientResolvedConfig> {
            readonly input: StopAccessLoggingCommandInput;
            constructor(input: StopAccessLoggingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaStoreClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopAccessLoggingCommandInput, StopAccessLoggingCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient";
    import { TagResourceInput, TagResourceOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceInput {
    }
    export interface TagResourceCommandOutput extends TagResourceOutput, __MetadataBearer {
    }
    /**
        * <p>Adds tags to the specified AWS Elemental MediaStore container. Tags are key:value pairs that you can associate with AWS resources. For example, the
        *             tag key might be "customer" and the tag value might be "companyA." You can specify one or more tags to add to each container. You can add up to 50
        *             tags to each container. For more information about tagging, including naming and usage conventions, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/tagging.html">Tagging Resources in MediaStore</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaStoreClient, TagResourceCommand } from "@aws-sdk/client-mediastore"; // ES Modules import
        * // const { MediaStoreClient, TagResourceCommand } = require("@aws-sdk/client-mediastore"); // CommonJS import
        * const client = new MediaStoreClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link MediaStoreClientResolvedConfig | config} for MediaStoreClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, MediaStoreClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaStoreClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient";
    import { UntagResourceInput, UntagResourceOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceInput {
    }
    export interface UntagResourceCommandOutput extends UntagResourceOutput, __MetadataBearer {
    }
    /**
        * <p>Removes tags from the specified container. You can specify one or more tags to remove. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaStoreClient, UntagResourceCommand } from "@aws-sdk/client-mediastore"; // ES Modules import
        * // const { MediaStoreClient, UntagResourceCommand } = require("@aws-sdk/client-mediastore"); // CommonJS import
        * const client = new MediaStoreClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link MediaStoreClientResolvedConfig | config} for MediaStoreClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, MediaStoreClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaStoreClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/MediaStoreClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateContainerCommandInput, CreateContainerCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/CreateContainerCommand";
    import { DeleteContainerCommandInput, DeleteContainerCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/DeleteContainerCommand";
    import { DeleteContainerPolicyCommandInput, DeleteContainerPolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/DeleteContainerPolicyCommand";
    import { DeleteCorsPolicyCommandInput, DeleteCorsPolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/DeleteCorsPolicyCommand";
    import { DeleteLifecyclePolicyCommandInput, DeleteLifecyclePolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/DeleteLifecyclePolicyCommand";
    import { DeleteMetricPolicyCommandInput, DeleteMetricPolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/DeleteMetricPolicyCommand";
    import { DescribeContainerCommandInput, DescribeContainerCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/DescribeContainerCommand";
    import { GetContainerPolicyCommandInput, GetContainerPolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/GetContainerPolicyCommand";
    import { GetCorsPolicyCommandInput, GetCorsPolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/GetCorsPolicyCommand";
    import { GetLifecyclePolicyCommandInput, GetLifecyclePolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/GetLifecyclePolicyCommand";
    import { GetMetricPolicyCommandInput, GetMetricPolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/GetMetricPolicyCommand";
    import { ListContainersCommandInput, ListContainersCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/ListContainersCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/ListTagsForResourceCommand";
    import { PutContainerPolicyCommandInput, PutContainerPolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/PutContainerPolicyCommand";
    import { PutCorsPolicyCommandInput, PutCorsPolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/PutCorsPolicyCommand";
    import { PutLifecyclePolicyCommandInput, PutLifecyclePolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/PutLifecyclePolicyCommand";
    import { PutMetricPolicyCommandInput, PutMetricPolicyCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/PutMetricPolicyCommand";
    import { StartAccessLoggingCommandInput, StartAccessLoggingCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/StartAccessLoggingCommand";
    import { StopAccessLoggingCommandInput, StopAccessLoggingCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/StopAccessLoggingCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/commands/UntagResourceCommand";
    export type ServiceInputTypes = CreateContainerCommandInput | DeleteContainerCommandInput | DeleteContainerPolicyCommandInput | DeleteCorsPolicyCommandInput | DeleteLifecyclePolicyCommandInput | DeleteMetricPolicyCommandInput | DescribeContainerCommandInput | GetContainerPolicyCommandInput | GetCorsPolicyCommandInput | GetLifecyclePolicyCommandInput | GetMetricPolicyCommandInput | ListContainersCommandInput | ListTagsForResourceCommandInput | PutContainerPolicyCommandInput | PutCorsPolicyCommandInput | PutLifecyclePolicyCommandInput | PutMetricPolicyCommandInput | StartAccessLoggingCommandInput | StopAccessLoggingCommandInput | TagResourceCommandInput | UntagResourceCommandInput;
    export type ServiceOutputTypes = CreateContainerCommandOutput | DeleteContainerCommandOutput | DeleteContainerPolicyCommandOutput | DeleteCorsPolicyCommandOutput | DeleteLifecyclePolicyCommandOutput | DeleteMetricPolicyCommandOutput | DescribeContainerCommandOutput | GetContainerPolicyCommandOutput | GetCorsPolicyCommandOutput | GetLifecyclePolicyCommandOutput | GetMetricPolicyCommandOutput | ListContainersCommandOutput | ListTagsForResourceCommandOutput | PutContainerPolicyCommandOutput | PutCorsPolicyCommandOutput | PutLifecyclePolicyCommandOutput | PutMetricPolicyCommandOutput | StartAccessLoggingCommandOutput | StopAccessLoggingCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type MediaStoreClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of MediaStoreClient class constructor that set the region, credentials and other options.
        */
    export interface MediaStoreClientConfig extends MediaStoreClientConfigType {
    }
    type MediaStoreClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of MediaStoreClient class. This is resolved and normalized from the {@link MediaStoreClientConfig | constructor configuration interface}.
        */
    export interface MediaStoreClientResolvedConfig extends MediaStoreClientResolvedConfigType {
    }
    /**
        * <p>An AWS Elemental MediaStore container is a namespace that holds folders and objects.
        *          You use a container endpoint to create, read, and delete objects. </p>
        */
    export class MediaStoreClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, MediaStoreClientResolvedConfig> {
            /**
                * The resolved configuration of MediaStoreClient class. This is resolved and normalized from the {@link MediaStoreClientConfig | constructor configuration interface}.
                */
            readonly config: MediaStoreClientResolvedConfig;
            constructor(configuration: MediaStoreClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { MediaStoreServiceException as __BaseException } from "@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/MediaStoreServiceException";
    export enum MethodName {
            DELETE = "DELETE",
            GET = "GET",
            HEAD = "HEAD",
            PUT = "PUT"
    }
    export enum ContainerStatus {
            ACTIVE = "ACTIVE",
            CREATING = "CREATING",
            DELETING = "DELETING"
    }
    /**
        * <p>This section describes operations that you can perform on an AWS Elemental MediaStore
        *          container.</p>
        */
    export interface Container {
            /**
                * <p>The DNS endpoint of the container. Use the endpoint to identify the specific
                *          container when sending requests to the data plane. The service assigns this value when the
                *          container is created. Once the value has been assigned, it does not change.</p>
                */
            Endpoint?: string;
            /**
                * <p>Unix timestamp.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the container. The ARN has the following
                *          format:</p>
                *          <p>arn:aws:<region>:<account that owns this container>:container/<name of
                *          container> </p>
                *          <p>For example: arn:aws:mediastore:us-west-2:111122223333:container/movies </p>
                */
            ARN?: string;
            /**
                * <p>The name of the container.</p>
                */
            Name?: string;
            /**
                * <p>The status of container creation or deletion. The status is one of the following:
                *             <code>CREATING</code>, <code>ACTIVE</code>, or <code>DELETING</code>. While the service
                *          is creating the container, the status is <code>CREATING</code>. When the endpoint is
                *          available, the status changes to <code>ACTIVE</code>.</p>
                */
            Status?: ContainerStatus | string;
            /**
                * <p>The state of access logging on the container. This value is <code>false</code> by default, indicating that AWS Elemental MediaStore does not send access logs to Amazon CloudWatch Logs. When you enable access logging on the container, MediaStore changes this value to <code>true</code>, indicating that the service delivers access logs for objects stored in that container to CloudWatch Logs.</p>
                */
            AccessLoggingEnabled?: boolean;
    }
    export namespace Container {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Container) => any;
    }
    /**
        * <p>The container that you specified in the request already exists or is being
        *          updated.</p>
        */
    export class ContainerInUseException extends __BaseException {
            readonly name: "ContainerInUseException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ContainerInUseException, __BaseException>);
    }
    export enum ContainerLevelMetrics {
            DISABLED = "DISABLED",
            ENABLED = "ENABLED"
    }
    /**
        * <p>The container that you specified in the request does not exist.</p>
        */
    export class ContainerNotFoundException extends __BaseException {
            readonly name: "ContainerNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ContainerNotFoundException, __BaseException>);
    }
    /**
        * <p>A rule for a CORS policy. You can add up to 100 rules to a CORS policy. If more than
        *          one rule applies, the service uses the first applicable rule listed.</p>
        */
    export interface CorsRule {
            /**
                * <p>One or more response headers that you want users to be able to access from their
                *          applications (for example, from a JavaScript <code>XMLHttpRequest</code> object).</p>
                *          <p>Each CORS rule must have at least one <code>AllowedOrigins</code> element. The string
                *          value can include only one wildcard character (*), for example, http://*.example.com.
                *          Additionally, you can specify only one wildcard character to allow cross-origin access for
                *          all origins.</p>
                */
            AllowedOrigins: string[] | undefined;
            /**
                * <p>Identifies an HTTP method that the origin that is specified in the rule is allowed to
                *          execute.</p>
                *          <p>Each CORS rule must contain at least one <code>AllowedMethods</code> and one
                *             <code>AllowedOrigins</code> element.</p>
                */
            AllowedMethods?: (MethodName | string)[];
            /**
                * <p>Specifies which headers are allowed in a preflight <code>OPTIONS</code> request
                *          through the <code>Access-Control-Request-Headers</code> header. Each header name that is
                *          specified in <code>Access-Control-Request-Headers</code> must have a corresponding entry in
                *          the rule. Only the headers that were requested are sent back. </p>
                *          <p>This element can contain only one wildcard character (*).</p>
                */
            AllowedHeaders: string[] | undefined;
            /**
                * <p>The time in seconds that your browser caches the preflight response for the specified
                *          resource.</p>
                *          <p>A CORS rule can have only one <code>MaxAgeSeconds</code> element.</p>
                */
            MaxAgeSeconds?: number;
            /**
                * <p>One or more headers in the response that you want users to be able to access from
                *          their applications (for example, from a JavaScript <code>XMLHttpRequest</code>
                *          object).</p>
                *          <p>This element is optional for each rule.</p>
                */
            ExposeHeaders?: string[];
    }
    export namespace CorsRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CorsRule) => any;
    }
    /**
        * <p>The CORS policy that you specified in the request does not exist.</p>
        */
    export class CorsPolicyNotFoundException extends __BaseException {
            readonly name: "CorsPolicyNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CorsPolicyNotFoundException, __BaseException>);
    }
    /**
        * <p>A collection of tags associated with a container. Each tag consists of a key:value pair, which can be anything you define. Typically, the tag key
        *             represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or
        *             "production"). You can add up to 50
        *             tags to each container. For more information about tagging, including naming and usage conventions, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/tagging.html">Tagging Resources in MediaStore</a>.</p>
        */
    export interface Tag {
            /**
                * <p>Part of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as "customer." Tag keys are
                *             case-sensitive.</p>
                */
            Key: string | undefined;
            /**
                * <p>Part of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as "companyA" or
                *             "companyB." Tag values are case-sensitive.</p>
                */
            Value?: string;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface CreateContainerInput {
            /**
                * <p>The name for the container. The name must be from 1 to 255 characters. Container
                *          names must be unique to your AWS account within a specific region. As an example, you could
                *          create a container named <code>movies</code> in every region, as long as you don’t have an
                *          existing container with that name.</p>
                */
            ContainerName: string | undefined;
            /**
                * <p>An array of key:value pairs that you define. These values can be anything that you want. Typically, the tag key represents a category (such as
                *            "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50
                *            tags to each container. For more information about tagging, including naming and usage conventions, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/tagging.html">Tagging Resources in MediaStore</a>.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateContainerInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateContainerInput) => any;
    }
    export interface CreateContainerOutput {
            /**
                * <p>ContainerARN: The Amazon Resource Name (ARN) of the newly created container. The ARN
                *          has the following format: arn:aws:<region>:<account that owns this
                *          container>:container/<name of container>. For example:
                *          arn:aws:mediastore:us-west-2:111122223333:container/movies </p>
                *          <p>ContainerName: The container name as specified in the request.</p>
                *          <p>CreationTime: Unix time stamp.</p>
                *          <p>Status: The status of container creation or deletion. The status is one of the
                *          following: <code>CREATING</code>, <code>ACTIVE</code>, or <code>DELETING</code>. While the
                *          service is creating the container, the status is <code>CREATING</code>. When an endpoint is
                *          available, the status changes to <code>ACTIVE</code>.</p>
                *          <p>The return value does not include the container's endpoint. To make downstream
                *          requests, you must obtain this value by using <a>DescribeContainer</a> or <a>ListContainers</a>.</p>
                */
            Container: Container | undefined;
    }
    export namespace CreateContainerOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateContainerOutput) => any;
    }
    /**
        * <p>The service is temporarily unavailable.</p>
        */
    export class InternalServerError extends __BaseException {
            readonly name: "InternalServerError";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerError, __BaseException>);
    }
    /**
        * <p>A service limit has been exceeded.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    export interface DeleteContainerInput {
            /**
                * <p>The name of the container to delete. </p>
                */
            ContainerName: string | undefined;
    }
    export namespace DeleteContainerInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteContainerInput) => any;
    }
    export interface DeleteContainerOutput {
    }
    export namespace DeleteContainerOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteContainerOutput) => any;
    }
    export interface DeleteContainerPolicyInput {
            /**
                * <p>The name of the container that holds the policy.</p>
                */
            ContainerName: string | undefined;
    }
    export namespace DeleteContainerPolicyInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteContainerPolicyInput) => any;
    }
    export interface DeleteContainerPolicyOutput {
    }
    export namespace DeleteContainerPolicyOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteContainerPolicyOutput) => any;
    }
    /**
        * <p>The policy that you specified in the request does not exist.</p>
        */
    export class PolicyNotFoundException extends __BaseException {
            readonly name: "PolicyNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PolicyNotFoundException, __BaseException>);
    }
    export interface DeleteCorsPolicyInput {
            /**
                * <p>The name of the container to remove the policy from.</p>
                */
            ContainerName: string | undefined;
    }
    export namespace DeleteCorsPolicyInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCorsPolicyInput) => any;
    }
    export interface DeleteCorsPolicyOutput {
    }
    export namespace DeleteCorsPolicyOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCorsPolicyOutput) => any;
    }
    export interface DeleteLifecyclePolicyInput {
            /**
                * <p>The name of the container that holds the object lifecycle policy.</p>
                */
            ContainerName: string | undefined;
    }
    export namespace DeleteLifecyclePolicyInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLifecyclePolicyInput) => any;
    }
    export interface DeleteLifecyclePolicyOutput {
    }
    export namespace DeleteLifecyclePolicyOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLifecyclePolicyOutput) => any;
    }
    export interface DeleteMetricPolicyInput {
            /**
                * <p>The name of the container that is associated with the metric policy that you want to delete.</p>
                */
            ContainerName: string | undefined;
    }
    export namespace DeleteMetricPolicyInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteMetricPolicyInput) => any;
    }
    export interface DeleteMetricPolicyOutput {
    }
    export namespace DeleteMetricPolicyOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteMetricPolicyOutput) => any;
    }
    export interface DescribeContainerInput {
            /**
                * <p>The name of the container to query.</p>
                */
            ContainerName?: string;
    }
    export namespace DescribeContainerInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeContainerInput) => any;
    }
    export interface DescribeContainerOutput {
            /**
                * <p>The name of the queried container.</p>
                */
            Container?: Container;
    }
    export namespace DescribeContainerOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeContainerOutput) => any;
    }
    export interface GetContainerPolicyInput {
            /**
                * <p>The name of the container. </p>
                */
            ContainerName: string | undefined;
    }
    export namespace GetContainerPolicyInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContainerPolicyInput) => any;
    }
    export interface GetContainerPolicyOutput {
            /**
                * <p>The contents of the access policy.</p>
                */
            Policy: string | undefined;
    }
    export namespace GetContainerPolicyOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContainerPolicyOutput) => any;
    }
    export interface GetCorsPolicyInput {
            /**
                * <p>The name of the container that the policy is assigned to.</p>
                */
            ContainerName: string | undefined;
    }
    export namespace GetCorsPolicyInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCorsPolicyInput) => any;
    }
    export interface GetCorsPolicyOutput {
            /**
                * <p>The CORS policy assigned to the container.</p>
                */
            CorsPolicy: CorsRule[] | undefined;
    }
    export namespace GetCorsPolicyOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCorsPolicyOutput) => any;
    }
    export interface GetLifecyclePolicyInput {
            /**
                * <p>The name of the container that the object lifecycle policy is assigned to.</p>
                */
            ContainerName: string | undefined;
    }
    export namespace GetLifecyclePolicyInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLifecyclePolicyInput) => any;
    }
    export interface GetLifecyclePolicyOutput {
            /**
                * <p>The object lifecycle policy that is assigned to the container.</p>
                */
            LifecyclePolicy: string | undefined;
    }
    export namespace GetLifecyclePolicyOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLifecyclePolicyOutput) => any;
    }
    export interface GetMetricPolicyInput {
            /**
                * <p>The name of the container that is associated with the metric policy.</p>
                */
            ContainerName: string | undefined;
    }
    export namespace GetMetricPolicyInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMetricPolicyInput) => any;
    }
    /**
        * <p>A setting that enables metrics at the object level. Each rule contains an object group and an object group name. If the policy includes the MetricPolicyRules parameter, you must include at least one rule. Each metric policy can include up to five rules by default. You can also <a href="https://console.aws.amazon.com/servicequotas/home?region=us-east-1#!/services/mediastore/quotas">request a quota increase</a> to allow up to 300 rules per policy.</p>
        */
    export interface MetricPolicyRule {
            /**
                * <p>A path or file name that defines which objects to include in the group. Wildcards (*) are acceptable.</p>
                */
            ObjectGroup: string | undefined;
            /**
                * <p>A name that allows you to refer to the object group.</p>
                */
            ObjectGroupName: string | undefined;
    }
    export namespace MetricPolicyRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricPolicyRule) => any;
    }
    /**
        * <p>The metric policy that is associated with the container. A metric policy allows AWS Elemental MediaStore to send metrics to Amazon CloudWatch. In the policy, you must indicate whether you want MediaStore to send container-level metrics. You can also include rules to define groups of objects that you want MediaStore to send object-level metrics for.</p>
        *          <p>To view examples of how to construct a metric policy for your use case, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/policies-metric-examples.html">Example Metric Policies</a>.</p>
        */
    export interface MetricPolicy {
            /**
                * <p>A setting to enable or disable metrics at the container level.</p>
                */
            ContainerLevelMetrics: ContainerLevelMetrics | string | undefined;
            /**
                * <p>A parameter that holds an array of rules that enable metrics at the object level. This parameter is optional, but if you choose to include it, you must also include at least one rule. By default, you can include up to five rules. You can also <a href="https://console.aws.amazon.com/servicequotas/home?region=us-east-1#!/services/mediastore/quotas">request a quota increase</a> to allow up to 300 rules per policy.</p>
                */
            MetricPolicyRules?: MetricPolicyRule[];
    }
    export namespace MetricPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricPolicy) => any;
    }
    export interface GetMetricPolicyOutput {
            /**
                * <p>The metric policy that is associated with the specific container.</p>
                */
            MetricPolicy: MetricPolicy | undefined;
    }
    export namespace GetMetricPolicyOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMetricPolicyOutput) => any;
    }
    export interface ListContainersInput {
            /**
                * <p>Only if you used <code>MaxResults</code> in the first command, enter the token (which
                *          was included in the previous response) to obtain the next set of containers. This token is
                *          included in a response only if there actually are more containers to list.</p>
                */
            NextToken?: string;
            /**
                * <p>Enter the maximum number of containers in the response. Use from 1 to 255 characters.
                *       </p>
                */
            MaxResults?: number;
    }
    export namespace ListContainersInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListContainersInput) => any;
    }
    export interface ListContainersOutput {
            /**
                * <p>The names of the containers.</p>
                */
            Containers: Container[] | undefined;
            /**
                * <p>
                *             <code>NextToken</code> is the token to use in the next call to <code>ListContainers</code>.
                *          This token is returned only if you included the <code>MaxResults</code> tag in the original
                *          command, and only if there are still containers to return. </p>
                */
            NextToken?: string;
    }
    export namespace ListContainersOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListContainersOutput) => any;
    }
    export interface ListTagsForResourceInput {
            /**
                * <p>The Amazon Resource Name (ARN) for the container.</p>
                */
            Resource: string | undefined;
    }
    export namespace ListTagsForResourceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceInput) => any;
    }
    export interface ListTagsForResourceOutput {
            /**
                * <p>An array of key:value pairs that are assigned to the container.</p>
                */
            Tags?: Tag[];
    }
    export namespace ListTagsForResourceOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceOutput) => any;
    }
    export interface PutContainerPolicyInput {
            /**
                * <p>The name of the container.</p>
                */
            ContainerName: string | undefined;
            /**
                * <p>The contents of the policy, which includes the following: </p>
                *          <ul>
                *             <li>
                *                <p>One <code>Version</code> tag</p>
                *             </li>
                *             <li>
                *                <p>One <code>Statement</code> tag that contains the standard tags for the
                *                policy.</p>
                *             </li>
                *          </ul>
                */
            Policy: string | undefined;
    }
    export namespace PutContainerPolicyInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutContainerPolicyInput) => any;
    }
    export interface PutContainerPolicyOutput {
    }
    export namespace PutContainerPolicyOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutContainerPolicyOutput) => any;
    }
    export interface PutCorsPolicyInput {
            /**
                * <p>The name of the container that you want to assign the CORS policy to.</p>
                */
            ContainerName: string | undefined;
            /**
                * <p>The CORS policy to apply to the container.  </p>
                */
            CorsPolicy: CorsRule[] | undefined;
    }
    export namespace PutCorsPolicyInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutCorsPolicyInput) => any;
    }
    export interface PutCorsPolicyOutput {
    }
    export namespace PutCorsPolicyOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutCorsPolicyOutput) => any;
    }
    export interface PutLifecyclePolicyInput {
            /**
                * <p>The name of the container that you want to assign the object lifecycle policy to.</p>
                */
            ContainerName: string | undefined;
            /**
                * <p>The object lifecycle policy to apply to the container.</p>
                */
            LifecyclePolicy: string | undefined;
    }
    export namespace PutLifecyclePolicyInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutLifecyclePolicyInput) => any;
    }
    export interface PutLifecyclePolicyOutput {
    }
    export namespace PutLifecyclePolicyOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutLifecyclePolicyOutput) => any;
    }
    export interface PutMetricPolicyInput {
            /**
                * <p>The name of the container that you want to add the metric policy to.</p>
                */
            ContainerName: string | undefined;
            /**
                * <p>The metric policy that you want to associate with the container. In the policy, you must indicate whether you want MediaStore to send container-level metrics. You can also include up to five rules to define groups of objects that you want MediaStore to send object-level metrics for.  If you include rules in the policy, construct each rule with both of the following:</p>
                *          <ul>
                *             <li>
                *                <p>An object group that defines which objects to include in the group. The definition can be a path or a file name, but it can't have more than 900 characters. Valid characters are: a-z, A-Z, 0-9, _ (underscore), = (equal), : (colon), . (period), - (hyphen), ~ (tilde), / (forward slash), and * (asterisk). Wildcards (*) are acceptable.</p>
                *             </li>
                *             <li>
                *                <p>An object group name that allows you to refer to the object group. The name can't have more than 30 characters. Valid characters are: a-z, A-Z, 0-9, and _ (underscore).</p>
                *             </li>
                *          </ul>
                */
            MetricPolicy: MetricPolicy | undefined;
    }
    export namespace PutMetricPolicyInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutMetricPolicyInput) => any;
    }
    export interface PutMetricPolicyOutput {
    }
    export namespace PutMetricPolicyOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutMetricPolicyOutput) => any;
    }
    export interface StartAccessLoggingInput {
            /**
                * <p>The name of the container that you want to start access logging on.</p>
                */
            ContainerName: string | undefined;
    }
    export namespace StartAccessLoggingInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartAccessLoggingInput) => any;
    }
    export interface StartAccessLoggingOutput {
    }
    export namespace StartAccessLoggingOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartAccessLoggingOutput) => any;
    }
    export interface StopAccessLoggingInput {
            /**
                * <p>The name of the container that you want to stop access logging on.</p>
                */
            ContainerName: string | undefined;
    }
    export namespace StopAccessLoggingInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopAccessLoggingInput) => any;
    }
    export interface StopAccessLoggingOutput {
    }
    export namespace StopAccessLoggingOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopAccessLoggingOutput) => any;
    }
    export interface TagResourceInput {
            /**
                * <p>The Amazon Resource Name (ARN) for the container. </p>
                */
            Resource: string | undefined;
            /**
                * <p>An array of key:value pairs that you want to add to the container. You need to specify only the tags that you want to add or update. For example,
                *             suppose a container already has two tags (customer:CompanyA and priority:High). You want to change the priority tag and also add a third tag
                *             (type:Contract). For TagResource, you specify the following tags: priority:Medium, type:Contract. The result is that your container has three tags:
                *             customer:CompanyA, priority:Medium, and type:Contract.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagResourceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceInput) => any;
    }
    export interface TagResourceOutput {
    }
    export namespace TagResourceOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceOutput) => any;
    }
    export interface UntagResourceInput {
            /**
                * <p>The Amazon Resource Name (ARN) for the container.</p>
                */
            Resource: string | undefined;
            /**
                * <p>A comma-separated list of keys for tags that you want to remove from the container. For example, if your container has two tags (customer:CompanyA
                *             and priority:High) and you want to remove one of the tags (priority:High), you specify the key for the tag that you want to remove
                *             (priority).</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceInput) => any;
    }
    export interface UntagResourceOutput {
    }
    export namespace UntagResourceOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceOutput) => any;
    }
}

declare module '@aws-sdk/client-mediastore/node_modules/@aws-sdk/client-mediastore/dist-types/models/MediaStoreServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from MediaStore service.
        */
    export class MediaStoreServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

