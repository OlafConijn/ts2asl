// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-iottwinmaker' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { BatchPutPropertyValuesCommandInput, BatchPutPropertyValuesCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/BatchPutPropertyValuesCommand";
    import { CreateComponentTypeCommandInput, CreateComponentTypeCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/CreateComponentTypeCommand";
    import { CreateEntityCommandInput, CreateEntityCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/CreateEntityCommand";
    import { CreateSceneCommandInput, CreateSceneCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/CreateSceneCommand";
    import { CreateWorkspaceCommandInput, CreateWorkspaceCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/CreateWorkspaceCommand";
    import { DeleteComponentTypeCommandInput, DeleteComponentTypeCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/DeleteComponentTypeCommand";
    import { DeleteEntityCommandInput, DeleteEntityCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/DeleteEntityCommand";
    import { DeleteSceneCommandInput, DeleteSceneCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/DeleteSceneCommand";
    import { DeleteWorkspaceCommandInput, DeleteWorkspaceCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/DeleteWorkspaceCommand";
    import { GetComponentTypeCommandInput, GetComponentTypeCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/GetComponentTypeCommand";
    import { GetEntityCommandInput, GetEntityCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/GetEntityCommand";
    import { GetPropertyValueCommandInput, GetPropertyValueCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/GetPropertyValueCommand";
    import { GetPropertyValueHistoryCommandInput, GetPropertyValueHistoryCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/GetPropertyValueHistoryCommand";
    import { GetSceneCommandInput, GetSceneCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/GetSceneCommand";
    import { GetWorkspaceCommandInput, GetWorkspaceCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/GetWorkspaceCommand";
    import { ListComponentTypesCommandInput, ListComponentTypesCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/ListComponentTypesCommand";
    import { ListEntitiesCommandInput, ListEntitiesCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/ListEntitiesCommand";
    import { ListScenesCommandInput, ListScenesCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/ListScenesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/ListTagsForResourceCommand";
    import { ListWorkspacesCommandInput, ListWorkspacesCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/ListWorkspacesCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/UntagResourceCommand";
    import { UpdateComponentTypeCommandInput, UpdateComponentTypeCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/UpdateComponentTypeCommand";
    import { UpdateEntityCommandInput, UpdateEntityCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/UpdateEntityCommand";
    import { UpdateSceneCommandInput, UpdateSceneCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/UpdateSceneCommand";
    import { UpdateWorkspaceCommandInput, UpdateWorkspaceCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/UpdateWorkspaceCommand";
    import { IoTTwinMakerClient } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    /**
        * <p>IoT TwinMaker is a service that enables you to build operational digital twins of
        *          physical systems. IoT TwinMaker overlays measurements and analysis from real-world sensors,
        *          cameras, and enterprise applications so you can create data visualizations to monitor your
        *          physical factory, building, or industrial plant. You can use this real-world data to
        *          monitor operations and diagnose and repair errors.</p>
        */
    export class IoTTwinMaker extends IoTTwinMakerClient {
            /**
                * <p>Sets values for multiple time series properties.</p>
                */
            batchPutPropertyValues(args: BatchPutPropertyValuesCommandInput, options?: __HttpHandlerOptions): Promise<BatchPutPropertyValuesCommandOutput>;
            batchPutPropertyValues(args: BatchPutPropertyValuesCommandInput, cb: (err: any, data?: BatchPutPropertyValuesCommandOutput) => void): void;
            batchPutPropertyValues(args: BatchPutPropertyValuesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchPutPropertyValuesCommandOutput) => void): void;
            /**
                * <p>Creates a component type.</p>
                */
            createComponentType(args: CreateComponentTypeCommandInput, options?: __HttpHandlerOptions): Promise<CreateComponentTypeCommandOutput>;
            createComponentType(args: CreateComponentTypeCommandInput, cb: (err: any, data?: CreateComponentTypeCommandOutput) => void): void;
            createComponentType(args: CreateComponentTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateComponentTypeCommandOutput) => void): void;
            /**
                * <p>Creates an entity.</p>
                */
            createEntity(args: CreateEntityCommandInput, options?: __HttpHandlerOptions): Promise<CreateEntityCommandOutput>;
            createEntity(args: CreateEntityCommandInput, cb: (err: any, data?: CreateEntityCommandOutput) => void): void;
            createEntity(args: CreateEntityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEntityCommandOutput) => void): void;
            /**
                * <p>Creates a scene.</p>
                */
            createScene(args: CreateSceneCommandInput, options?: __HttpHandlerOptions): Promise<CreateSceneCommandOutput>;
            createScene(args: CreateSceneCommandInput, cb: (err: any, data?: CreateSceneCommandOutput) => void): void;
            createScene(args: CreateSceneCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSceneCommandOutput) => void): void;
            /**
                * <p>Creates a workplace.</p>
                */
            createWorkspace(args: CreateWorkspaceCommandInput, options?: __HttpHandlerOptions): Promise<CreateWorkspaceCommandOutput>;
            createWorkspace(args: CreateWorkspaceCommandInput, cb: (err: any, data?: CreateWorkspaceCommandOutput) => void): void;
            createWorkspace(args: CreateWorkspaceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateWorkspaceCommandOutput) => void): void;
            /**
                * <p>Deletes a component type.</p>
                */
            deleteComponentType(args: DeleteComponentTypeCommandInput, options?: __HttpHandlerOptions): Promise<DeleteComponentTypeCommandOutput>;
            deleteComponentType(args: DeleteComponentTypeCommandInput, cb: (err: any, data?: DeleteComponentTypeCommandOutput) => void): void;
            deleteComponentType(args: DeleteComponentTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteComponentTypeCommandOutput) => void): void;
            /**
                * <p>Deletes an entity.</p>
                */
            deleteEntity(args: DeleteEntityCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEntityCommandOutput>;
            deleteEntity(args: DeleteEntityCommandInput, cb: (err: any, data?: DeleteEntityCommandOutput) => void): void;
            deleteEntity(args: DeleteEntityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEntityCommandOutput) => void): void;
            /**
                * <p>Deletes a scene.</p>
                */
            deleteScene(args: DeleteSceneCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSceneCommandOutput>;
            deleteScene(args: DeleteSceneCommandInput, cb: (err: any, data?: DeleteSceneCommandOutput) => void): void;
            deleteScene(args: DeleteSceneCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSceneCommandOutput) => void): void;
            /**
                * <p>Deletes a workspace.</p>
                */
            deleteWorkspace(args: DeleteWorkspaceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteWorkspaceCommandOutput>;
            deleteWorkspace(args: DeleteWorkspaceCommandInput, cb: (err: any, data?: DeleteWorkspaceCommandOutput) => void): void;
            deleteWorkspace(args: DeleteWorkspaceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteWorkspaceCommandOutput) => void): void;
            /**
                * <p>Retrieves information about a component type.</p>
                */
            getComponentType(args: GetComponentTypeCommandInput, options?: __HttpHandlerOptions): Promise<GetComponentTypeCommandOutput>;
            getComponentType(args: GetComponentTypeCommandInput, cb: (err: any, data?: GetComponentTypeCommandOutput) => void): void;
            getComponentType(args: GetComponentTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetComponentTypeCommandOutput) => void): void;
            /**
                * <p>Retrieves information about an entity.</p>
                */
            getEntity(args: GetEntityCommandInput, options?: __HttpHandlerOptions): Promise<GetEntityCommandOutput>;
            getEntity(args: GetEntityCommandInput, cb: (err: any, data?: GetEntityCommandOutput) => void): void;
            getEntity(args: GetEntityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEntityCommandOutput) => void): void;
            /**
                * <p>Gets the property values for a component, component type, entity, or workspace.</p>
                *          <p>You must specify a value for either <code>componentName</code>, <code>componentTypeId</code>, <code>entityId</code>, or <code>workspaceId</code>.</p>
                */
            getPropertyValue(args: GetPropertyValueCommandInput, options?: __HttpHandlerOptions): Promise<GetPropertyValueCommandOutput>;
            getPropertyValue(args: GetPropertyValueCommandInput, cb: (err: any, data?: GetPropertyValueCommandOutput) => void): void;
            getPropertyValue(args: GetPropertyValueCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPropertyValueCommandOutput) => void): void;
            /**
                * <p>Retrieves information about the history of a time series property value for a component, component type, entity, or workspace.</p>
                *          <p>You must specify a value for <code>workspaceId</code>. For entity-specific queries, specify values for <code>componentName</code> and
                *         <code>entityId</code>. For cross-entity quries, specify a value for <code>componentTypeId</code>.</p>
                */
            getPropertyValueHistory(args: GetPropertyValueHistoryCommandInput, options?: __HttpHandlerOptions): Promise<GetPropertyValueHistoryCommandOutput>;
            getPropertyValueHistory(args: GetPropertyValueHistoryCommandInput, cb: (err: any, data?: GetPropertyValueHistoryCommandOutput) => void): void;
            getPropertyValueHistory(args: GetPropertyValueHistoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPropertyValueHistoryCommandOutput) => void): void;
            /**
                * <p>Retrieves information about a scene.</p>
                */
            getScene(args: GetSceneCommandInput, options?: __HttpHandlerOptions): Promise<GetSceneCommandOutput>;
            getScene(args: GetSceneCommandInput, cb: (err: any, data?: GetSceneCommandOutput) => void): void;
            getScene(args: GetSceneCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSceneCommandOutput) => void): void;
            /**
                * <p>Retrieves information about a workspace.</p>
                */
            getWorkspace(args: GetWorkspaceCommandInput, options?: __HttpHandlerOptions): Promise<GetWorkspaceCommandOutput>;
            getWorkspace(args: GetWorkspaceCommandInput, cb: (err: any, data?: GetWorkspaceCommandOutput) => void): void;
            getWorkspace(args: GetWorkspaceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetWorkspaceCommandOutput) => void): void;
            /**
                * <p>Lists all component types in a workspace.</p>
                */
            listComponentTypes(args: ListComponentTypesCommandInput, options?: __HttpHandlerOptions): Promise<ListComponentTypesCommandOutput>;
            listComponentTypes(args: ListComponentTypesCommandInput, cb: (err: any, data?: ListComponentTypesCommandOutput) => void): void;
            listComponentTypes(args: ListComponentTypesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListComponentTypesCommandOutput) => void): void;
            /**
                * <p>Lists all entities in a workspace.</p>
                */
            listEntities(args: ListEntitiesCommandInput, options?: __HttpHandlerOptions): Promise<ListEntitiesCommandOutput>;
            listEntities(args: ListEntitiesCommandInput, cb: (err: any, data?: ListEntitiesCommandOutput) => void): void;
            listEntities(args: ListEntitiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEntitiesCommandOutput) => void): void;
            /**
                * <p>Lists all scenes in a workspace.</p>
                */
            listScenes(args: ListScenesCommandInput, options?: __HttpHandlerOptions): Promise<ListScenesCommandOutput>;
            listScenes(args: ListScenesCommandInput, cb: (err: any, data?: ListScenesCommandOutput) => void): void;
            listScenes(args: ListScenesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListScenesCommandOutput) => void): void;
            /**
                * <p>Lists all tags associated with a resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Retrieves information about workspaces in the current account.</p>
                */
            listWorkspaces(args: ListWorkspacesCommandInput, options?: __HttpHandlerOptions): Promise<ListWorkspacesCommandOutput>;
            listWorkspaces(args: ListWorkspacesCommandInput, cb: (err: any, data?: ListWorkspacesCommandOutput) => void): void;
            listWorkspaces(args: ListWorkspacesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListWorkspacesCommandOutput) => void): void;
            /**
                * <p>Adds tags to a resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes tags from a resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates information in a component type.</p>
                */
            updateComponentType(args: UpdateComponentTypeCommandInput, options?: __HttpHandlerOptions): Promise<UpdateComponentTypeCommandOutput>;
            updateComponentType(args: UpdateComponentTypeCommandInput, cb: (err: any, data?: UpdateComponentTypeCommandOutput) => void): void;
            updateComponentType(args: UpdateComponentTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateComponentTypeCommandOutput) => void): void;
            /**
                * <p>Updates an entity.</p>
                */
            updateEntity(args: UpdateEntityCommandInput, options?: __HttpHandlerOptions): Promise<UpdateEntityCommandOutput>;
            updateEntity(args: UpdateEntityCommandInput, cb: (err: any, data?: UpdateEntityCommandOutput) => void): void;
            updateEntity(args: UpdateEntityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateEntityCommandOutput) => void): void;
            /**
                * <p>Updates a scene.</p>
                */
            updateScene(args: UpdateSceneCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSceneCommandOutput>;
            updateScene(args: UpdateSceneCommandInput, cb: (err: any, data?: UpdateSceneCommandOutput) => void): void;
            updateScene(args: UpdateSceneCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSceneCommandOutput) => void): void;
            /**
                * <p>Updates a workspace.</p>
                */
            updateWorkspace(args: UpdateWorkspaceCommandInput, options?: __HttpHandlerOptions): Promise<UpdateWorkspaceCommandOutput>;
            updateWorkspace(args: UpdateWorkspaceCommandInput, cb: (err: any, data?: UpdateWorkspaceCommandOutput) => void): void;
            updateWorkspace(args: UpdateWorkspaceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateWorkspaceCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/BatchPutPropertyValuesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { BatchPutPropertyValuesRequest, BatchPutPropertyValuesResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface BatchPutPropertyValuesCommandInput extends BatchPutPropertyValuesRequest {
    }
    export interface BatchPutPropertyValuesCommandOutput extends BatchPutPropertyValuesResponse, __MetadataBearer {
    }
    /**
        * <p>Sets values for multiple time series properties.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, BatchPutPropertyValuesCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, BatchPutPropertyValuesCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new BatchPutPropertyValuesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchPutPropertyValuesCommandInput} for command's `input` shape.
        * @see {@link BatchPutPropertyValuesCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class BatchPutPropertyValuesCommand extends $Command<BatchPutPropertyValuesCommandInput, BatchPutPropertyValuesCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: BatchPutPropertyValuesCommandInput;
            constructor(input: BatchPutPropertyValuesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchPutPropertyValuesCommandInput, BatchPutPropertyValuesCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/CreateComponentTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { CreateComponentTypeRequest, CreateComponentTypeResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface CreateComponentTypeCommandInput extends CreateComponentTypeRequest {
    }
    export interface CreateComponentTypeCommandOutput extends CreateComponentTypeResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a component type.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, CreateComponentTypeCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, CreateComponentTypeCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new CreateComponentTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateComponentTypeCommandInput} for command's `input` shape.
        * @see {@link CreateComponentTypeCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class CreateComponentTypeCommand extends $Command<CreateComponentTypeCommandInput, CreateComponentTypeCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: CreateComponentTypeCommandInput;
            constructor(input: CreateComponentTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateComponentTypeCommandInput, CreateComponentTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/CreateEntityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { CreateEntityRequest, CreateEntityResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface CreateEntityCommandInput extends CreateEntityRequest {
    }
    export interface CreateEntityCommandOutput extends CreateEntityResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an entity.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, CreateEntityCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, CreateEntityCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new CreateEntityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateEntityCommandInput} for command's `input` shape.
        * @see {@link CreateEntityCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class CreateEntityCommand extends $Command<CreateEntityCommandInput, CreateEntityCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: CreateEntityCommandInput;
            constructor(input: CreateEntityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateEntityCommandInput, CreateEntityCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/CreateSceneCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { CreateSceneRequest, CreateSceneResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface CreateSceneCommandInput extends CreateSceneRequest {
    }
    export interface CreateSceneCommandOutput extends CreateSceneResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a scene.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, CreateSceneCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, CreateSceneCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new CreateSceneCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSceneCommandInput} for command's `input` shape.
        * @see {@link CreateSceneCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class CreateSceneCommand extends $Command<CreateSceneCommandInput, CreateSceneCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: CreateSceneCommandInput;
            constructor(input: CreateSceneCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSceneCommandInput, CreateSceneCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/CreateWorkspaceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { CreateWorkspaceRequest, CreateWorkspaceResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface CreateWorkspaceCommandInput extends CreateWorkspaceRequest {
    }
    export interface CreateWorkspaceCommandOutput extends CreateWorkspaceResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a workplace.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, CreateWorkspaceCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, CreateWorkspaceCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new CreateWorkspaceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateWorkspaceCommandInput} for command's `input` shape.
        * @see {@link CreateWorkspaceCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class CreateWorkspaceCommand extends $Command<CreateWorkspaceCommandInput, CreateWorkspaceCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: CreateWorkspaceCommandInput;
            constructor(input: CreateWorkspaceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateWorkspaceCommandInput, CreateWorkspaceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/DeleteComponentTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { DeleteComponentTypeRequest, DeleteComponentTypeResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface DeleteComponentTypeCommandInput extends DeleteComponentTypeRequest {
    }
    export interface DeleteComponentTypeCommandOutput extends DeleteComponentTypeResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a component type.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, DeleteComponentTypeCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, DeleteComponentTypeCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new DeleteComponentTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteComponentTypeCommandInput} for command's `input` shape.
        * @see {@link DeleteComponentTypeCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class DeleteComponentTypeCommand extends $Command<DeleteComponentTypeCommandInput, DeleteComponentTypeCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: DeleteComponentTypeCommandInput;
            constructor(input: DeleteComponentTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteComponentTypeCommandInput, DeleteComponentTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/DeleteEntityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { DeleteEntityRequest, DeleteEntityResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface DeleteEntityCommandInput extends DeleteEntityRequest {
    }
    export interface DeleteEntityCommandOutput extends DeleteEntityResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an entity.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, DeleteEntityCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, DeleteEntityCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new DeleteEntityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEntityCommandInput} for command's `input` shape.
        * @see {@link DeleteEntityCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class DeleteEntityCommand extends $Command<DeleteEntityCommandInput, DeleteEntityCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: DeleteEntityCommandInput;
            constructor(input: DeleteEntityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEntityCommandInput, DeleteEntityCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/DeleteSceneCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { DeleteSceneRequest, DeleteSceneResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface DeleteSceneCommandInput extends DeleteSceneRequest {
    }
    export interface DeleteSceneCommandOutput extends DeleteSceneResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a scene.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, DeleteSceneCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, DeleteSceneCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new DeleteSceneCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteSceneCommandInput} for command's `input` shape.
        * @see {@link DeleteSceneCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class DeleteSceneCommand extends $Command<DeleteSceneCommandInput, DeleteSceneCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: DeleteSceneCommandInput;
            constructor(input: DeleteSceneCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteSceneCommandInput, DeleteSceneCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/DeleteWorkspaceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { DeleteWorkspaceRequest, DeleteWorkspaceResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface DeleteWorkspaceCommandInput extends DeleteWorkspaceRequest {
    }
    export interface DeleteWorkspaceCommandOutput extends DeleteWorkspaceResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a workspace.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, DeleteWorkspaceCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, DeleteWorkspaceCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new DeleteWorkspaceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteWorkspaceCommandInput} for command's `input` shape.
        * @see {@link DeleteWorkspaceCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class DeleteWorkspaceCommand extends $Command<DeleteWorkspaceCommandInput, DeleteWorkspaceCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: DeleteWorkspaceCommandInput;
            constructor(input: DeleteWorkspaceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteWorkspaceCommandInput, DeleteWorkspaceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/GetComponentTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { GetComponentTypeRequest, GetComponentTypeResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface GetComponentTypeCommandInput extends GetComponentTypeRequest {
    }
    export interface GetComponentTypeCommandOutput extends GetComponentTypeResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about a component type.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, GetComponentTypeCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, GetComponentTypeCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new GetComponentTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetComponentTypeCommandInput} for command's `input` shape.
        * @see {@link GetComponentTypeCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class GetComponentTypeCommand extends $Command<GetComponentTypeCommandInput, GetComponentTypeCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: GetComponentTypeCommandInput;
            constructor(input: GetComponentTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetComponentTypeCommandInput, GetComponentTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/GetEntityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { GetEntityRequest, GetEntityResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface GetEntityCommandInput extends GetEntityRequest {
    }
    export interface GetEntityCommandOutput extends GetEntityResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about an entity.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, GetEntityCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, GetEntityCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new GetEntityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetEntityCommandInput} for command's `input` shape.
        * @see {@link GetEntityCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class GetEntityCommand extends $Command<GetEntityCommandInput, GetEntityCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: GetEntityCommandInput;
            constructor(input: GetEntityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetEntityCommandInput, GetEntityCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/GetPropertyValueCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { GetPropertyValueRequest, GetPropertyValueResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface GetPropertyValueCommandInput extends GetPropertyValueRequest {
    }
    export interface GetPropertyValueCommandOutput extends GetPropertyValueResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the property values for a component, component type, entity, or workspace.</p>
        *          <p>You must specify a value for either <code>componentName</code>, <code>componentTypeId</code>, <code>entityId</code>, or <code>workspaceId</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, GetPropertyValueCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, GetPropertyValueCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new GetPropertyValueCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPropertyValueCommandInput} for command's `input` shape.
        * @see {@link GetPropertyValueCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class GetPropertyValueCommand extends $Command<GetPropertyValueCommandInput, GetPropertyValueCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: GetPropertyValueCommandInput;
            constructor(input: GetPropertyValueCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPropertyValueCommandInput, GetPropertyValueCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/GetPropertyValueHistoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { GetPropertyValueHistoryRequest, GetPropertyValueHistoryResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface GetPropertyValueHistoryCommandInput extends GetPropertyValueHistoryRequest {
    }
    export interface GetPropertyValueHistoryCommandOutput extends GetPropertyValueHistoryResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about the history of a time series property value for a component, component type, entity, or workspace.</p>
        *          <p>You must specify a value for <code>workspaceId</code>. For entity-specific queries, specify values for <code>componentName</code> and
        *         <code>entityId</code>. For cross-entity quries, specify a value for <code>componentTypeId</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, GetPropertyValueHistoryCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, GetPropertyValueHistoryCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new GetPropertyValueHistoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPropertyValueHistoryCommandInput} for command's `input` shape.
        * @see {@link GetPropertyValueHistoryCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class GetPropertyValueHistoryCommand extends $Command<GetPropertyValueHistoryCommandInput, GetPropertyValueHistoryCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: GetPropertyValueHistoryCommandInput;
            constructor(input: GetPropertyValueHistoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPropertyValueHistoryCommandInput, GetPropertyValueHistoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/GetSceneCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { GetSceneRequest, GetSceneResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface GetSceneCommandInput extends GetSceneRequest {
    }
    export interface GetSceneCommandOutput extends GetSceneResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about a scene.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, GetSceneCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, GetSceneCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new GetSceneCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSceneCommandInput} for command's `input` shape.
        * @see {@link GetSceneCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class GetSceneCommand extends $Command<GetSceneCommandInput, GetSceneCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: GetSceneCommandInput;
            constructor(input: GetSceneCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSceneCommandInput, GetSceneCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/GetWorkspaceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { GetWorkspaceRequest, GetWorkspaceResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface GetWorkspaceCommandInput extends GetWorkspaceRequest {
    }
    export interface GetWorkspaceCommandOutput extends GetWorkspaceResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about a workspace.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, GetWorkspaceCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, GetWorkspaceCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new GetWorkspaceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetWorkspaceCommandInput} for command's `input` shape.
        * @see {@link GetWorkspaceCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class GetWorkspaceCommand extends $Command<GetWorkspaceCommandInput, GetWorkspaceCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: GetWorkspaceCommandInput;
            constructor(input: GetWorkspaceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetWorkspaceCommandInput, GetWorkspaceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/ListComponentTypesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { ListComponentTypesRequest, ListComponentTypesResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface ListComponentTypesCommandInput extends ListComponentTypesRequest {
    }
    export interface ListComponentTypesCommandOutput extends ListComponentTypesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all component types in a workspace.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, ListComponentTypesCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, ListComponentTypesCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new ListComponentTypesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListComponentTypesCommandInput} for command's `input` shape.
        * @see {@link ListComponentTypesCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class ListComponentTypesCommand extends $Command<ListComponentTypesCommandInput, ListComponentTypesCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: ListComponentTypesCommandInput;
            constructor(input: ListComponentTypesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListComponentTypesCommandInput, ListComponentTypesCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/ListEntitiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { ListEntitiesRequest, ListEntitiesResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface ListEntitiesCommandInput extends ListEntitiesRequest {
    }
    export interface ListEntitiesCommandOutput extends ListEntitiesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all entities in a workspace.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, ListEntitiesCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, ListEntitiesCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new ListEntitiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEntitiesCommandInput} for command's `input` shape.
        * @see {@link ListEntitiesCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class ListEntitiesCommand extends $Command<ListEntitiesCommandInput, ListEntitiesCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: ListEntitiesCommandInput;
            constructor(input: ListEntitiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEntitiesCommandInput, ListEntitiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/ListScenesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { ListScenesRequest, ListScenesResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface ListScenesCommandInput extends ListScenesRequest {
    }
    export interface ListScenesCommandOutput extends ListScenesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all scenes in a workspace.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, ListScenesCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, ListScenesCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new ListScenesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListScenesCommandInput} for command's `input` shape.
        * @see {@link ListScenesCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class ListScenesCommand extends $Command<ListScenesCommandInput, ListScenesCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: ListScenesCommandInput;
            constructor(input: ListScenesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListScenesCommandInput, ListScenesCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all tags associated with a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, ListTagsForResourceCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, ListTagsForResourceCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/ListWorkspacesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { ListWorkspacesRequest, ListWorkspacesResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface ListWorkspacesCommandInput extends ListWorkspacesRequest {
    }
    export interface ListWorkspacesCommandOutput extends ListWorkspacesResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about workspaces in the current account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, ListWorkspacesCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, ListWorkspacesCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new ListWorkspacesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListWorkspacesCommandInput} for command's `input` shape.
        * @see {@link ListWorkspacesCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class ListWorkspacesCommand extends $Command<ListWorkspacesCommandInput, ListWorkspacesCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: ListWorkspacesCommandInput;
            constructor(input: ListWorkspacesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListWorkspacesCommandInput, ListWorkspacesCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Adds tags to a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, TagResourceCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, TagResourceCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes tags from a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, UntagResourceCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, UntagResourceCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/UpdateComponentTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { UpdateComponentTypeRequest, UpdateComponentTypeResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface UpdateComponentTypeCommandInput extends UpdateComponentTypeRequest {
    }
    export interface UpdateComponentTypeCommandOutput extends UpdateComponentTypeResponse, __MetadataBearer {
    }
    /**
        * <p>Updates information in a component type.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, UpdateComponentTypeCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, UpdateComponentTypeCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new UpdateComponentTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateComponentTypeCommandInput} for command's `input` shape.
        * @see {@link UpdateComponentTypeCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class UpdateComponentTypeCommand extends $Command<UpdateComponentTypeCommandInput, UpdateComponentTypeCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: UpdateComponentTypeCommandInput;
            constructor(input: UpdateComponentTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateComponentTypeCommandInput, UpdateComponentTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/UpdateEntityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { UpdateEntityRequest, UpdateEntityResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface UpdateEntityCommandInput extends UpdateEntityRequest {
    }
    export interface UpdateEntityCommandOutput extends UpdateEntityResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an entity.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, UpdateEntityCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, UpdateEntityCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new UpdateEntityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateEntityCommandInput} for command's `input` shape.
        * @see {@link UpdateEntityCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class UpdateEntityCommand extends $Command<UpdateEntityCommandInput, UpdateEntityCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: UpdateEntityCommandInput;
            constructor(input: UpdateEntityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateEntityCommandInput, UpdateEntityCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/UpdateSceneCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { UpdateSceneRequest, UpdateSceneResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface UpdateSceneCommandInput extends UpdateSceneRequest {
    }
    export interface UpdateSceneCommandOutput extends UpdateSceneResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a scene.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, UpdateSceneCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, UpdateSceneCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new UpdateSceneCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSceneCommandInput} for command's `input` shape.
        * @see {@link UpdateSceneCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class UpdateSceneCommand extends $Command<UpdateSceneCommandInput, UpdateSceneCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: UpdateSceneCommandInput;
            constructor(input: UpdateSceneCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSceneCommandInput, UpdateSceneCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/UpdateWorkspaceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTTwinMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient";
    import { UpdateWorkspaceRequest, UpdateWorkspaceResponse } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0";
    export interface UpdateWorkspaceCommandInput extends UpdateWorkspaceRequest {
    }
    export interface UpdateWorkspaceCommandOutput extends UpdateWorkspaceResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a workspace.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTTwinMakerClient, UpdateWorkspaceCommand } from "@aws-sdk/client-iottwinmaker"; // ES Modules import
        * // const { IoTTwinMakerClient, UpdateWorkspaceCommand } = require("@aws-sdk/client-iottwinmaker"); // CommonJS import
        * const client = new IoTTwinMakerClient(config);
        * const command = new UpdateWorkspaceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateWorkspaceCommandInput} for command's `input` shape.
        * @see {@link UpdateWorkspaceCommandOutput} for command's `response` shape.
        * @see {@link IoTTwinMakerClientResolvedConfig | config} for IoTTwinMakerClient's `config` shape.
        *
        */
    export class UpdateWorkspaceCommand extends $Command<UpdateWorkspaceCommandInput, UpdateWorkspaceCommandOutput, IoTTwinMakerClientResolvedConfig> {
            readonly input: UpdateWorkspaceCommandInput;
            constructor(input: UpdateWorkspaceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTTwinMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateWorkspaceCommandInput, UpdateWorkspaceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/IoTTwinMakerClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { BatchPutPropertyValuesCommandInput, BatchPutPropertyValuesCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/BatchPutPropertyValuesCommand";
    import { CreateComponentTypeCommandInput, CreateComponentTypeCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/CreateComponentTypeCommand";
    import { CreateEntityCommandInput, CreateEntityCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/CreateEntityCommand";
    import { CreateSceneCommandInput, CreateSceneCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/CreateSceneCommand";
    import { CreateWorkspaceCommandInput, CreateWorkspaceCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/CreateWorkspaceCommand";
    import { DeleteComponentTypeCommandInput, DeleteComponentTypeCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/DeleteComponentTypeCommand";
    import { DeleteEntityCommandInput, DeleteEntityCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/DeleteEntityCommand";
    import { DeleteSceneCommandInput, DeleteSceneCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/DeleteSceneCommand";
    import { DeleteWorkspaceCommandInput, DeleteWorkspaceCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/DeleteWorkspaceCommand";
    import { GetComponentTypeCommandInput, GetComponentTypeCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/GetComponentTypeCommand";
    import { GetEntityCommandInput, GetEntityCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/GetEntityCommand";
    import { GetPropertyValueCommandInput, GetPropertyValueCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/GetPropertyValueCommand";
    import { GetPropertyValueHistoryCommandInput, GetPropertyValueHistoryCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/GetPropertyValueHistoryCommand";
    import { GetSceneCommandInput, GetSceneCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/GetSceneCommand";
    import { GetWorkspaceCommandInput, GetWorkspaceCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/GetWorkspaceCommand";
    import { ListComponentTypesCommandInput, ListComponentTypesCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/ListComponentTypesCommand";
    import { ListEntitiesCommandInput, ListEntitiesCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/ListEntitiesCommand";
    import { ListScenesCommandInput, ListScenesCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/ListScenesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/ListTagsForResourceCommand";
    import { ListWorkspacesCommandInput, ListWorkspacesCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/ListWorkspacesCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/UntagResourceCommand";
    import { UpdateComponentTypeCommandInput, UpdateComponentTypeCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/UpdateComponentTypeCommand";
    import { UpdateEntityCommandInput, UpdateEntityCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/UpdateEntityCommand";
    import { UpdateSceneCommandInput, UpdateSceneCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/UpdateSceneCommand";
    import { UpdateWorkspaceCommandInput, UpdateWorkspaceCommandOutput } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/commands/UpdateWorkspaceCommand";
    export type ServiceInputTypes = BatchPutPropertyValuesCommandInput | CreateComponentTypeCommandInput | CreateEntityCommandInput | CreateSceneCommandInput | CreateWorkspaceCommandInput | DeleteComponentTypeCommandInput | DeleteEntityCommandInput | DeleteSceneCommandInput | DeleteWorkspaceCommandInput | GetComponentTypeCommandInput | GetEntityCommandInput | GetPropertyValueCommandInput | GetPropertyValueHistoryCommandInput | GetSceneCommandInput | GetWorkspaceCommandInput | ListComponentTypesCommandInput | ListEntitiesCommandInput | ListScenesCommandInput | ListTagsForResourceCommandInput | ListWorkspacesCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateComponentTypeCommandInput | UpdateEntityCommandInput | UpdateSceneCommandInput | UpdateWorkspaceCommandInput;
    export type ServiceOutputTypes = BatchPutPropertyValuesCommandOutput | CreateComponentTypeCommandOutput | CreateEntityCommandOutput | CreateSceneCommandOutput | CreateWorkspaceCommandOutput | DeleteComponentTypeCommandOutput | DeleteEntityCommandOutput | DeleteSceneCommandOutput | DeleteWorkspaceCommandOutput | GetComponentTypeCommandOutput | GetEntityCommandOutput | GetPropertyValueCommandOutput | GetPropertyValueHistoryCommandOutput | GetSceneCommandOutput | GetWorkspaceCommandOutput | ListComponentTypesCommandOutput | ListEntitiesCommandOutput | ListScenesCommandOutput | ListTagsForResourceCommandOutput | ListWorkspacesCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateComponentTypeCommandOutput | UpdateEntityCommandOutput | UpdateSceneCommandOutput | UpdateWorkspaceCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type IoTTwinMakerClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of IoTTwinMakerClient class constructor that set the region, credentials and other options.
        */
    export interface IoTTwinMakerClientConfig extends IoTTwinMakerClientConfigType {
    }
    type IoTTwinMakerClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of IoTTwinMakerClient class. This is resolved and normalized from the {@link IoTTwinMakerClientConfig | constructor configuration interface}.
        */
    export interface IoTTwinMakerClientResolvedConfig extends IoTTwinMakerClientResolvedConfigType {
    }
    /**
        * <p>IoT TwinMaker is a service that enables you to build operational digital twins of
        *          physical systems. IoT TwinMaker overlays measurements and analysis from real-world sensors,
        *          cameras, and enterprise applications so you can create data visualizations to monitor your
        *          physical factory, building, or industrial plant. You can use this real-world data to
        *          monitor operations and diagnose and repair errors.</p>
        */
    export class IoTTwinMakerClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, IoTTwinMakerClientResolvedConfig> {
            /**
                * The resolved configuration of IoTTwinMakerClient class. This is resolved and normalized from the {@link IoTTwinMakerClientConfig | constructor configuration interface}.
                */
            readonly config: IoTTwinMakerClientResolvedConfig;
            constructor(configuration: IoTTwinMakerClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { IoTTwinMakerServiceException as __BaseException } from "@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/IoTTwinMakerServiceException";
    /**
        * <p>Access is denied.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>An object that uniquely identifies an entity property.</p>
        */
    export interface EntityPropertyReference {
            /**
                * <p>The name of the component.</p>
                */
            componentName?: string;
            /**
                * <p>A mapping of external IDs to property names. External IDs uniquely identify properties from external data stores.</p>
                */
            externalIdProperty?: Record<string, string>;
            /**
                * <p>The ID of the entity.</p>
                */
            entityId?: string;
            /**
                * <p>The name of the property.</p>
                */
            propertyName: string | undefined;
    }
    export namespace EntityPropertyReference {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntityPropertyReference) => any;
    }
    /**
        * <p>A value that associates a component and an entity.</p>
        */
    export interface RelationshipValue {
            /**
                * <p>The ID of the target entity associated with this relationship value.</p>
                */
            targetEntityId?: string;
            /**
                * <p>The name of the target component associated with the relationship value.</p>
                */
            targetComponentName?: string;
    }
    export namespace RelationshipValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RelationshipValue) => any;
    }
    /**
        * <p>An unexpected error has occurred.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>The resource wasn't found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>The rate exceeds the limit.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    /**
        * <p>Failed</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    /**
        * <p>A conflict occurred.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>The Lambda function.</p>
        */
    export interface LambdaFunction {
            /**
                * <p>The ARN of the Lambda function.</p>
                */
            arn: string | undefined;
    }
    export namespace LambdaFunction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaFunction) => any;
    }
    /**
        * <p>The data connector.</p>
        */
    export interface DataConnector {
            /**
                * <p>The Lambda function associated with this data connector.</p>
                */
            lambda?: LambdaFunction;
            /**
                * <p>A Boolean value that specifies whether the data connector is native to IoT TwinMaker.</p>
                */
            isNative?: boolean;
    }
    export namespace DataConnector {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataConnector) => any;
    }
    export enum Scope {
            ENTITY = "ENTITY",
            WORKSPACE = "WORKSPACE"
    }
    /**
        * <p>The function request body.</p>
        */
    export interface FunctionRequest {
            /**
                * <p>The required properties of the function.</p>
                */
            requiredProperties?: string[];
            /**
                * <p>The scope of the function.</p>
                */
            scope?: Scope | string;
            /**
                * <p>The data connector.</p>
                */
            implementedBy?: DataConnector;
    }
    export namespace FunctionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FunctionRequest) => any;
    }
    /**
        * <p>An object that specifies a relationship with another component type.</p>
        */
    export interface Relationship {
            /**
                * <p>The ID of the target component type associated with this relationship.</p>
                */
            targetComponentTypeId?: string;
            /**
                * <p>The type of the relationship.</p>
                */
            relationshipType?: string;
    }
    export namespace Relationship {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Relationship) => any;
    }
    export enum Type {
            BOOLEAN = "BOOLEAN",
            DOUBLE = "DOUBLE",
            INTEGER = "INTEGER",
            LIST = "LIST",
            LONG = "LONG",
            MAP = "MAP",
            RELATIONSHIP = "RELATIONSHIP",
            STRING = "STRING"
    }
    export enum State {
            ACTIVE = "ACTIVE",
            CREATING = "CREATING",
            DELETING = "DELETING",
            ERROR = "ERROR",
            UPDATING = "UPDATING"
    }
    export interface CreateComponentTypeResponse {
            /**
                * <p>The ARN of the component type.</p>
                */
            arn: string | undefined;
            /**
                * <p>The date and time when the entity was created.</p>
                */
            creationDateTime: Date | undefined;
            /**
                * <p>The current state of the component type.</p>
                */
            state: State | string | undefined;
    }
    export namespace CreateComponentTypeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateComponentTypeResponse) => any;
    }
    /**
        * <p>The service quota was exceeded.</p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    export enum PropertyUpdateType {
            CREATE = "CREATE",
            DELETE = "DELETE",
            UPDATE = "UPDATE"
    }
    export interface CreateEntityResponse {
            /**
                * <p>The ID of the entity.</p>
                */
            entityId: string | undefined;
            /**
                * <p>The ARN of the entity.</p>
                */
            arn: string | undefined;
            /**
                * <p>The date and time when the entity was created.</p>
                */
            creationDateTime: Date | undefined;
            /**
                * <p>The current state of the entity.</p>
                */
            state: State | string | undefined;
    }
    export namespace CreateEntityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEntityResponse) => any;
    }
    export interface CreateSceneRequest {
            /**
                * <p>The ID of the workspace that contains the scene.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>The ID of the scene.</p>
                */
            sceneId: string | undefined;
            /**
                * <p>The relative path that specifies the location of the content definition file.</p>
                */
            contentLocation: string | undefined;
            /**
                * <p>The description for this scene.</p>
                */
            description?: string;
            /**
                * <p>A list of capabilities that the scene uses to render itself.</p>
                */
            capabilities?: string[];
            /**
                * <p>Metadata that you can use to manage the scene.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateSceneRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSceneRequest) => any;
    }
    export interface CreateSceneResponse {
            /**
                * <p>The ARN of the scene.</p>
                */
            arn: string | undefined;
            /**
                * <p>The date and time when the scene was created.</p>
                */
            creationDateTime: Date | undefined;
    }
    export namespace CreateSceneResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSceneResponse) => any;
    }
    export interface CreateWorkspaceRequest {
            /**
                * <p>The ID of the workspace.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>The description of the workspace.</p>
                */
            description?: string;
            /**
                * <p>The ARN of the S3 bucket where resources associated with the workspace are stored.</p>
                */
            s3Location: string | undefined;
            /**
                * <p>The ARN of the execution role associated with the workspace.</p>
                */
            role: string | undefined;
            /**
                * <p>Metadata that you can use to manage the workspace</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateWorkspaceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkspaceRequest) => any;
    }
    export interface CreateWorkspaceResponse {
            /**
                * <p>The ARN of the workspace.</p>
                */
            arn: string | undefined;
            /**
                * <p>The date and time when the workspace was created.</p>
                */
            creationDateTime: Date | undefined;
    }
    export namespace CreateWorkspaceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkspaceResponse) => any;
    }
    export interface DeleteComponentTypeRequest {
            /**
                * <p>The ID of the workspace that contains the component type.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>The ID of the component type to delete.</p>
                */
            componentTypeId: string | undefined;
    }
    export namespace DeleteComponentTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteComponentTypeRequest) => any;
    }
    export interface DeleteComponentTypeResponse {
            /**
                * <p>The current state of the component type to be deleted.</p>
                */
            state: State | string | undefined;
    }
    export namespace DeleteComponentTypeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteComponentTypeResponse) => any;
    }
    export interface DeleteEntityRequest {
            /**
                * <p>The ID of the workspace that contains the entity to delete.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>The ID of the entity to delete.</p>
                */
            entityId: string | undefined;
            /**
                * <p>A Boolean value that specifies whether the operation deletes child entities.</p>
                */
            isRecursive?: boolean;
    }
    export namespace DeleteEntityRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEntityRequest) => any;
    }
    export interface DeleteEntityResponse {
            /**
                * <p>The current state of the deleted entity.</p>
                */
            state: State | string | undefined;
    }
    export namespace DeleteEntityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEntityResponse) => any;
    }
    export interface DeleteSceneRequest {
            /**
                * <p>The ID of the workspace.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>The ID of the scene to delete.</p>
                */
            sceneId: string | undefined;
    }
    export namespace DeleteSceneRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSceneRequest) => any;
    }
    export interface DeleteSceneResponse {
    }
    export namespace DeleteSceneResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSceneResponse) => any;
    }
    export interface DeleteWorkspaceRequest {
            /**
                * <p>The ID of the workspace to delete.</p>
                */
            workspaceId: string | undefined;
    }
    export namespace DeleteWorkspaceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorkspaceRequest) => any;
    }
    export interface DeleteWorkspaceResponse {
    }
    export namespace DeleteWorkspaceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorkspaceResponse) => any;
    }
    export interface GetComponentTypeRequest {
            /**
                * <p>The ID of the workspace that contains the component type.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>The ID of the component type.</p>
                */
            componentTypeId: string | undefined;
    }
    export namespace GetComponentTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetComponentTypeRequest) => any;
    }
    /**
        * <p>The function response.</p>
        */
    export interface FunctionResponse {
            /**
                * <p>The required properties of the function.</p>
                */
            requiredProperties?: string[];
            /**
                * <p>The scope of the function.</p>
                */
            scope?: Scope | string;
            /**
                * <p>The data connector.</p>
                */
            implementedBy?: DataConnector;
            /**
                * <p>Indicates whether this function is inherited.</p>
                */
            isInherited?: boolean;
    }
    export namespace FunctionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FunctionResponse) => any;
    }
    export enum ErrorCode {
            INTERNAL_FAILURE = "INTERNAL_FAILURE",
            VALIDATION_ERROR = "VALIDATION_ERROR"
    }
    /**
        * <p>The error details.</p>
        */
    export interface ErrorDetails {
            /**
                * <p>The error code.</p>
                */
            code?: ErrorCode | string;
            /**
                * <p>The error message.</p>
                */
            message?: string;
    }
    export namespace ErrorDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ErrorDetails) => any;
    }
    /**
        * <p>An object that represents the status of an entity, component, component type, or workspace.</p>
        */
    export interface Status {
            /**
                * <p>The current state of the entity, component, component type, or workspace.</p>
                */
            state?: State | string;
            /**
                * <p>The error message.</p>
                */
            error?: ErrorDetails;
    }
    export namespace Status {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Status) => any;
    }
    export interface GetEntityRequest {
            /**
                * <p>The ID of the workspace.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>The ID of the entity.</p>
                */
            entityId: string | undefined;
    }
    export namespace GetEntityRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEntityRequest) => any;
    }
    /**
        * <p>The connector failed.</p>
        */
    export class ConnectorFailureException extends __BaseException {
            readonly name: "ConnectorFailureException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConnectorFailureException, __BaseException>);
    }
    /**
        * <p>The connector timed out.</p>
        */
    export class ConnectorTimeoutException extends __BaseException {
            readonly name: "ConnectorTimeoutException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConnectorTimeoutException, __BaseException>);
    }
    export interface GetPropertyValueRequest {
            /**
                * <p>The name of the component whose property values the operation returns.</p>
                */
            componentName?: string;
            /**
                * <p>The ID of the component type whose property values the operation returns.</p>
                */
            componentTypeId?: string;
            /**
                * <p>The ID of the entity whose property values the operation returns.</p>
                */
            entityId?: string;
            /**
                * <p>The properties whose values the operation returns.</p>
                */
            selectedProperties: string[] | undefined;
            /**
                * <p>The ID of the workspace whose values the operation returns.</p>
                */
            workspaceId: string | undefined;
    }
    export namespace GetPropertyValueRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPropertyValueRequest) => any;
    }
    export enum InterpolationType {
            LINEAR = "LINEAR"
    }
    /**
        * <p>An object that specifies how to interpolate data in a list.</p>
        */
    export interface InterpolationParameters {
            /**
                * <p>The interpolation type.</p>
                */
            interpolationType?: InterpolationType | string;
            /**
                * <p>The interpolation time interval in seconds.</p>
                */
            intervalInSeconds?: number;
    }
    export namespace InterpolationParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InterpolationParameters) => any;
    }
    export enum OrderByTime {
            ASCENDING = "ASCENDING",
            DESCENDING = "DESCENDING"
    }
    export interface GetSceneRequest {
            /**
                * <p>The ID of the workspace that contains the scene.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>The ID of the scene.</p>
                */
            sceneId: string | undefined;
    }
    export namespace GetSceneRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSceneRequest) => any;
    }
    export interface GetSceneResponse {
            /**
                * <p>The ID of the workspace that contains the scene.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>The ID of the scene.</p>
                */
            sceneId: string | undefined;
            /**
                * <p>The relative path that specifies the location of the content definition file.</p>
                */
            contentLocation: string | undefined;
            /**
                * <p>The ARN of the scene.</p>
                */
            arn: string | undefined;
            /**
                * <p>The date and time when the scene was created.</p>
                */
            creationDateTime: Date | undefined;
            /**
                * <p>The date and time when the scene was last updated.</p>
                */
            updateDateTime: Date | undefined;
            /**
                * <p>The description of the scene.</p>
                */
            description?: string;
            /**
                * <p>A list of capabilities that the scene uses to render.</p>
                */
            capabilities?: string[];
    }
    export namespace GetSceneResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSceneResponse) => any;
    }
    export interface GetWorkspaceRequest {
            /**
                * <p>The ID of the workspace.</p>
                */
            workspaceId: string | undefined;
    }
    export namespace GetWorkspaceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWorkspaceRequest) => any;
    }
    export interface GetWorkspaceResponse {
            /**
                * <p>The ID of the workspace.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>The ARN of the workspace.</p>
                */
            arn: string | undefined;
            /**
                * <p>The description of the workspace.</p>
                */
            description?: string;
            /**
                * <p>The ARN of the S3 bucket where resources associated with the workspace are stored.</p>
                */
            s3Location: string | undefined;
            /**
                * <p>The ARN of the execution role associated with the workspace.</p>
                */
            role: string | undefined;
            /**
                * <p>The date and time when the workspace was created.</p>
                */
            creationDateTime: Date | undefined;
            /**
                * <p>The date and time when the workspace was last updated.</p>
                */
            updateDateTime: Date | undefined;
    }
    export namespace GetWorkspaceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWorkspaceResponse) => any;
    }
    /**
        * <p>An object that filters items in a list of component types.</p>
        *          <note>
        *             <p>Only one object is accepted as a valid input.</p>
        *          </note>
        */
    export type ListComponentTypesFilter = ListComponentTypesFilter.ExtendsFromMember | ListComponentTypesFilter.IsAbstractMember | ListComponentTypesFilter.NamespaceMember | ListComponentTypesFilter.$UnknownMember;
    export namespace ListComponentTypesFilter {
            /**
                * <p>The component type that the component types in the list extend.</p>
                */
            interface ExtendsFromMember {
                    extendsFrom: string;
                    namespace?: never;
                    isAbstract?: never;
                    $unknown?: never;
            }
            /**
                * <p>The namespace to which the component types in the list belong.</p>
                */
            interface NamespaceMember {
                    extendsFrom?: never;
                    namespace: string;
                    isAbstract?: never;
                    $unknown?: never;
            }
            /**
                * <p>A Boolean value that specifies whether the component types in the list are abstract.</p>
                */
            interface IsAbstractMember {
                    extendsFrom?: never;
                    namespace?: never;
                    isAbstract: boolean;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    extendsFrom?: never;
                    namespace?: never;
                    isAbstract?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    extendsFrom: (value: string) => T;
                    namespace: (value: string) => T;
                    isAbstract: (value: boolean) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: ListComponentTypesFilter, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListComponentTypesFilter) => any;
    }
    export interface ListComponentTypesRequest {
            /**
                * <p>The ID of the workspace.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>A list of objects that filter the request.</p>
                */
            filters?: ListComponentTypesFilter[];
            /**
                * <p>The string that specifies the next page of results.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to display.</p>
                */
            maxResults?: number;
    }
    export namespace ListComponentTypesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListComponentTypesRequest) => any;
    }
    /**
        * <p>An object that contains information about a component type.</p>
        */
    export interface ComponentTypeSummary {
            /**
                * <p>The ARN of the component type.</p>
                */
            arn: string | undefined;
            /**
                * <p>The ID of the component type.</p>
                */
            componentTypeId: string | undefined;
            /**
                * <p>The date and time when the component type was created.</p>
                */
            creationDateTime: Date | undefined;
            /**
                * <p>The date and time when the component type was last updated.</p>
                */
            updateDateTime: Date | undefined;
            /**
                * <p>The description of the component type.</p>
                */
            description?: string;
            /**
                * <p>The current status of the component type.</p>
                */
            status?: Status;
    }
    export namespace ComponentTypeSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComponentTypeSummary) => any;
    }
    export interface ListComponentTypesResponse {
            /**
                * <p>The ID of the workspace.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>A list of objects that contain information about the component types.</p>
                */
            componentTypeSummaries: ComponentTypeSummary[] | undefined;
            /**
                * <p>The string that specifies the next page of results.</p>
                */
            nextToken?: string;
            /**
                * <p>Specifies the maximum number of results to display.</p>
                */
            maxResults?: number;
    }
    export namespace ListComponentTypesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListComponentTypesResponse) => any;
    }
    /**
        * <p>An object that filters items in a list of entities.</p>
        */
    export type ListEntitiesFilter = ListEntitiesFilter.ComponentTypeIdMember | ListEntitiesFilter.ExternalIdMember | ListEntitiesFilter.ParentEntityIdMember | ListEntitiesFilter.$UnknownMember;
    export namespace ListEntitiesFilter {
            /**
                * <p>The parent of the entities in the list.</p>
                */
            interface ParentEntityIdMember {
                    parentEntityId: string;
                    componentTypeId?: never;
                    externalId?: never;
                    $unknown?: never;
            }
            /**
                * <p>The ID of the component type in the entities in the list.</p>
                */
            interface ComponentTypeIdMember {
                    parentEntityId?: never;
                    componentTypeId: string;
                    externalId?: never;
                    $unknown?: never;
            }
            /**
                * <p>The external-Id property of a component. The external-Id property is the primary key of an external storage system.</p>
                */
            interface ExternalIdMember {
                    parentEntityId?: never;
                    componentTypeId?: never;
                    externalId: string;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    parentEntityId?: never;
                    componentTypeId?: never;
                    externalId?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    parentEntityId: (value: string) => T;
                    componentTypeId: (value: string) => T;
                    externalId: (value: string) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: ListEntitiesFilter, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEntitiesFilter) => any;
    }
    export interface ListEntitiesRequest {
            /**
                * <p>The ID of the workspace.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>A list of objects that filter the request.</p>
                *          <note>
                *             <p>Only one object is accepted as a valid input.</p>
                *          </note>
                */
            filters?: ListEntitiesFilter[];
            /**
                * <p>The maximum number of results to display.</p>
                */
            maxResults?: number;
            /**
                * <p>The string that specifies the next page of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListEntitiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEntitiesRequest) => any;
    }
    /**
        * <p>An object that contains information about an entity.</p>
        */
    export interface EntitySummary {
            /**
                * <p>The ID of the entity.</p>
                */
            entityId: string | undefined;
            /**
                * <p>The name of the entity.</p>
                */
            entityName: string | undefined;
            /**
                * <p>The ARN of the entity.</p>
                */
            arn: string | undefined;
            /**
                * <p>The ID of the parent entity.</p>
                */
            parentEntityId?: string;
            /**
                * <p>The current status of the entity.</p>
                */
            status: Status | undefined;
            /**
                * <p>The description of the entity.</p>
                */
            description?: string;
            /**
                * <p>A Boolean value that specifies whether the entity has child entities or not.</p>
                */
            hasChildEntities?: boolean;
            /**
                * <p>The date and time when the entity was created.</p>
                */
            creationDateTime: Date | undefined;
            /**
                * <p>The last date and time when the entity was updated.</p>
                */
            updateDateTime: Date | undefined;
    }
    export namespace EntitySummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntitySummary) => any;
    }
    export interface ListEntitiesResponse {
            /**
                * <p>A list of objects that contain information about the entities.</p>
                */
            entitySummaries?: EntitySummary[];
            /**
                * <p>The string that specifies the next page of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListEntitiesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEntitiesResponse) => any;
    }
    export interface ListScenesRequest {
            /**
                * <p>The ID of the workspace that contains the scenes.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>Specifies the maximum number of results to display.</p>
                */
            maxResults?: number;
            /**
                * <p>The string that specifies the next page of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListScenesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListScenesRequest) => any;
    }
    /**
        * <p>An object that contains information about a scene.</p>
        */
    export interface SceneSummary {
            /**
                * <p>The ID of the scene.</p>
                */
            sceneId: string | undefined;
            /**
                * <p>The relative path that specifies the location of the content definition file.</p>
                */
            contentLocation: string | undefined;
            /**
                * <p>The ARN of the scene.</p>
                */
            arn: string | undefined;
            /**
                * <p>The date and time when the scene was created.</p>
                */
            creationDateTime: Date | undefined;
            /**
                * <p>The date and time when the scene was last updated.</p>
                */
            updateDateTime: Date | undefined;
            /**
                * <p>The scene description.</p>
                */
            description?: string;
    }
    export namespace SceneSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SceneSummary) => any;
    }
    export interface ListScenesResponse {
            /**
                * <p>A list of objects that contain information about the scenes.</p>
                */
            sceneSummaries?: SceneSummary[];
            /**
                * <p>The string that specifies the next page of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListScenesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListScenesResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The ARN of the resource.</p>
                */
            resourceARN: string | undefined;
            /**
                * <p>The maximum number of results to display.</p>
                */
            maxResults?: number;
            /**
                * <p>The string that specifies the next page of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>Metadata that you can use to manage a resource.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The string that specifies the next page of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface ListWorkspacesRequest {
            /**
                * <p>The maximum number of results to display.</p>
                */
            maxResults?: number;
            /**
                * <p>The string that specifies the next page of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListWorkspacesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorkspacesRequest) => any;
    }
    /**
        * <p>An object that contains information about a workspace.</p>
        */
    export interface WorkspaceSummary {
            /**
                * <p>The ID of the workspace.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>The ARN of the workspace.</p>
                */
            arn: string | undefined;
            /**
                * <p>The description of the workspace.</p>
                */
            description?: string;
            /**
                * <p>The date and time when the workspace was created.</p>
                */
            creationDateTime: Date | undefined;
            /**
                * <p>The date and time when the workspace was last updated.</p>
                */
            updateDateTime: Date | undefined;
    }
    export namespace WorkspaceSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkspaceSummary) => any;
    }
    export interface ListWorkspacesResponse {
            /**
                * <p>A list of objects that contain information about the workspaces.</p>
                */
            workspaceSummaries?: WorkspaceSummary[];
            /**
                * <p>The string that specifies the next page of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListWorkspacesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorkspacesResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The ARN of the resource.</p>
                */
            resourceARN: string | undefined;
            /**
                * <p>Metadata to add to this resource.</p>
                */
            tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    /**
        * <p>The number of tags exceeds the limit.</p>
        */
    export class TooManyTagsException extends __BaseException {
            readonly name: "TooManyTagsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyTagsException, __BaseException>);
    }
    export interface UntagResourceRequest {
            /**
                * <p>The ARN of the resource.</p>
                */
            resourceARN: string | undefined;
            /**
                * <p>A list of tag key names to remove from the resource. You don't specify the value. Both the key and its associated value are removed.</p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateComponentTypeResponse {
            /**
                * <p>The ID of the workspace that contains the component type.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>The ARN of the component type.</p>
                */
            arn: string | undefined;
            /**
                * <p>The ID of the component type.</p>
                */
            componentTypeId: string | undefined;
            /**
                * <p>The current state of the component type.</p>
                */
            state: State | string | undefined;
    }
    export namespace UpdateComponentTypeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateComponentTypeResponse) => any;
    }
    export enum ComponentUpdateType {
            CREATE = "CREATE",
            DELETE = "DELETE",
            UPDATE = "UPDATE"
    }
    export enum ParentEntityUpdateType {
            DELETE = "DELETE",
            UPDATE = "UPDATE"
    }
    /**
        * <p>The parent entity update request.</p>
        */
    export interface ParentEntityUpdateRequest {
            /**
                * <p>The type of the update.</p>
                */
            updateType: ParentEntityUpdateType | string | undefined;
            /**
                * <p>The ID of the parent entity.</p>
                */
            parentEntityId?: string;
    }
    export namespace ParentEntityUpdateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ParentEntityUpdateRequest) => any;
    }
    export interface UpdateEntityResponse {
            /**
                * <p>The date and time when the entity was last updated.</p>
                */
            updateDateTime: Date | undefined;
            /**
                * <p>The current state of the entity update.</p>
                */
            state: State | string | undefined;
    }
    export namespace UpdateEntityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateEntityResponse) => any;
    }
    export interface UpdateSceneRequest {
            /**
                * <p>The ID of the workspace that contains the scene.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>The ID of the scene.</p>
                */
            sceneId: string | undefined;
            /**
                * <p>The relative path that specifies the location of the content definition file.</p>
                */
            contentLocation?: string;
            /**
                * <p>The description of this scene.</p>
                */
            description?: string;
            /**
                * <p>A list of capabilities that the scene uses to render.</p>
                */
            capabilities?: string[];
    }
    export namespace UpdateSceneRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSceneRequest) => any;
    }
    export interface UpdateSceneResponse {
            /**
                * <p>The date and time when the scene was last updated.</p>
                */
            updateDateTime: Date | undefined;
    }
    export namespace UpdateSceneResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSceneResponse) => any;
    }
    export interface UpdateWorkspaceRequest {
            /**
                * <p>The ID of the workspace.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>The description of the workspace.</p>
                */
            description?: string;
            /**
                * <p>The ARN of the execution role associated with the workspace.</p>
                */
            role?: string;
    }
    export namespace UpdateWorkspaceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorkspaceRequest) => any;
    }
    export interface UpdateWorkspaceResponse {
            /**
                * <p>The date and time of the current update.</p>
                */
            updateDateTime: Date | undefined;
    }
    export namespace UpdateWorkspaceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorkspaceResponse) => any;
    }
    /**
        * <p>An object that specifies a value for a property.</p>
        */
    export interface DataValue {
            /**
                * <p>A Boolean value.</p>
                */
            booleanValue?: boolean;
            /**
                * <p>A double value.</p>
                */
            doubleValue?: number;
            /**
                * <p>An integer value.</p>
                */
            integerValue?: number;
            /**
                * <p>A long value.</p>
                */
            longValue?: number;
            /**
                * <p>A string value.</p>
                */
            stringValue?: string;
            /**
                * <p>A list of multiple values.</p>
                */
            listValue?: DataValue[];
            /**
                * <p>An object that maps strings to multiple <code>DataValue</code> objects.</p>
                */
            mapValue?: Record<string, DataValue>;
            /**
                * <p>A value that relates a component to another component.</p>
                */
            relationshipValue?: RelationshipValue;
            /**
                * <p>An expression that produces the value.</p>
                */
            expression?: string;
    }
    export namespace DataValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataValue) => any;
    }
    /**
        * <p>An object that filters items returned by a property request.</p>
        */
    export interface PropertyFilter {
            /**
                * <p>The property name associated with this property filter.</p>
                */
            propertyName?: string;
            /**
                * <p>The operator associated with this property filter.</p>
                */
            operator?: string;
            /**
                * <p>The value associated with this property filter.</p>
                */
            value?: DataValue;
    }
    export namespace PropertyFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PropertyFilter) => any;
    }
    /**
        * <p>The latest value of the property.</p>
        */
    export interface PropertyLatestValue {
            /**
                * <p>An object that specifies information about a property.&gt;</p>
                */
            propertyReference: EntityPropertyReference | undefined;
            /**
                * <p>The value of the property.</p>
                */
            propertyValue?: DataValue;
    }
    export namespace PropertyLatestValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PropertyLatestValue) => any;
    }
    /**
        * <p>An object that contains information about a value for a time series property.</p>
        */
    export interface PropertyValue {
            /**
                * @deprecated
                *
                * <p>The timestamp of a value for a time series property.</p>
                */
            timestamp?: Date;
            /**
                * <p>An object that specifies a value for a time series property.</p>
                */
            value: DataValue | undefined;
            /**
                * <p>ISO8601 DateTime of a value for a time series property.</p>
                *          <p>The time for when the property value was recorded in ISO 8601 format: <i>YYYY-MM-DDThh:mm:ss[.SSSSSSSSS][Z/±HH:mm]</i>.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <i>[YYYY]</i>: year</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <i>[MM]</i>: month</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <i>[DD]</i>: day</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <i>[hh]</i>: hour</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <i>[mm]</i>: minute</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <i>[ss]</i>: seconds</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <i>[.SSSSSSSSS]</i>: additional precision, where precedence is maintained. For
                *                example: [.573123] is equal to 573123000 nanoseconds.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <i>Z</i>: default timezone UTC</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <i>± HH:mm</i>: time zone offset in Hours and Minutes.</p>
                *             </li>
                *          </ul>
                *          <p>
                *             <i>Required sub-fields</i>: YYYY-MM-DDThh:mm:ss and [Z/±HH:mm]</p>
                */
            time?: string;
    }
    export namespace PropertyValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PropertyValue) => any;
    }
    /**
        * <p>An object that specifies the data type of a property.</p>
        */
    export interface DataType {
            /**
                * <p>The underlying type of the data type.</p>
                */
            type: Type | string | undefined;
            /**
                * <p>The nested type in the data type.</p>
                */
            nestedType?: DataType;
            /**
                * <p>The allowed values for this data type.</p>
                */
            allowedValues?: DataValue[];
            /**
                * <p>The unit of measure used in this data type.</p>
                */
            unitOfMeasure?: string;
            /**
                * <p>A relationship that associates a component with another component.</p>
                */
            relationship?: Relationship;
    }
    export namespace DataType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataType) => any;
    }
    export interface GetPropertyValueHistoryRequest {
            /**
                * <p>The ID of the workspace.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>The ID of the entity.</p>
                */
            entityId?: string;
            /**
                * <p>The name of the component.</p>
                */
            componentName?: string;
            /**
                * <p>The ID of the component type.</p>
                */
            componentTypeId?: string;
            /**
                * <p>A list of properties whose value histories the request retrieves.</p>
                */
            selectedProperties: string[] | undefined;
            /**
                * <p>A list of objects that filter the property value history request.</p>
                */
            propertyFilters?: PropertyFilter[];
            /**
                * @deprecated
                *
                * <p>The date and time of the earliest property value to return.</p>
                */
            startDateTime?: Date;
            /**
                * @deprecated
                *
                * <p>The date and time of the latest property value to return.</p>
                */
            endDateTime?: Date;
            /**
                * <p>An object that specifies the interpolation type and the interval over which to interpolate data.</p>
                */
            interpolation?: InterpolationParameters;
            /**
                * <p>The string that specifies the next page of results.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            maxResults?: number;
            /**
                * <p>The time direction to use in the result order.</p>
                */
            orderByTime?: OrderByTime | string;
            /**
                * <p>The ISO8601 DateTime of the earliest property value to return.</p>
                *          <p>For more information about the ISO8601 DateTime format, see the data type <a href="https://docs.aws.amazon.com/roci/latest/roci-api/API_PropertyValue.html">PropertyValue</a>.</p>
                */
            startTime?: string;
            /**
                * <p>The ISO8601 DateTime of the latest property value to return.</p>
                *          <p>For more information about the ISO8601 DateTime format, see the data type <a href="https://docs.aws.amazon.com/roci/latest/roci-api/API_PropertyValue.html">PropertyValue</a>.</p>
                */
            endTime?: string;
    }
    export namespace GetPropertyValueHistoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPropertyValueHistoryRequest) => any;
    }
    export interface GetPropertyValueResponse {
            /**
                * <p>An object that maps strings to the properties and latest property values in the response. Each string
                *        in the mapping must be unique to this object.</p>
                */
            propertyValues: Record<string, PropertyLatestValue> | undefined;
    }
    export namespace GetPropertyValueResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPropertyValueResponse) => any;
    }
    /**
        * <p>An object that specifies information about time series property values. This object is used  and consumed by the <a href="https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_BatchPutPropertyValues.html">BatchPutPropertyValues</a> action.</p>
        */
    export interface PropertyValueEntry {
            /**
                * <p>An object that contains information about the entity that has the property.</p>
                */
            entityPropertyReference: EntityPropertyReference | undefined;
            /**
                * <p>A list of objects that specify time series property values.</p>
                */
            propertyValues?: PropertyValue[];
    }
    export namespace PropertyValueEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PropertyValueEntry) => any;
    }
    /**
        * <p>The history of values for a time series property.</p>
        */
    export interface PropertyValueHistory {
            /**
                * <p>An object that uniquely identifies an entity property.</p>
                */
            entityPropertyReference: EntityPropertyReference | undefined;
            /**
                * <p>A list of objects that contain information about the values in the history of a time series property.</p>
                */
            values?: PropertyValue[];
    }
    export namespace PropertyValueHistory {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PropertyValueHistory) => any;
    }
    /**
        * <p>An error returned by the <code>BatchPutProperty</code> action.</p>
        */
    export interface BatchPutPropertyError {
            /**
                * <p>The error code.</p>
                */
            errorCode: string | undefined;
            /**
                * <p>The error message.</p>
                */
            errorMessage: string | undefined;
            /**
                * <p>An object that contains information about errors returned by the <code>BatchPutProperty</code> action.</p>
                */
            entry: PropertyValueEntry | undefined;
    }
    export namespace BatchPutPropertyError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchPutPropertyError) => any;
    }
    export interface BatchPutPropertyValuesRequest {
            /**
                * <p>The ID of the workspace that contains the properties to set.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>An object that maps strings to the property value entries to set. Each string
                *        in the mapping must be unique to this object.</p>
                */
            entries: PropertyValueEntry[] | undefined;
    }
    export namespace BatchPutPropertyValuesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchPutPropertyValuesRequest) => any;
    }
    export interface GetPropertyValueHistoryResponse {
            /**
                * <p>An object that maps strings to the property definitions in the component type. Each string
                *        in the mapping must be unique to this object.</p>
                */
            propertyValues: PropertyValueHistory[] | undefined;
            /**
                * <p>The string that specifies the next page of results.</p>
                */
            nextToken?: string;
    }
    export namespace GetPropertyValueHistoryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPropertyValueHistoryResponse) => any;
    }
    /**
        * <p>An object that contains information about errors returned by the <code>BatchPutProperty</code> action.</p>
        */
    export interface BatchPutPropertyErrorEntry {
            /**
                * <p>A list of objects that contain information about errors returned by the
                *             <code>BatchPutProperty</code> action.</p>
                */
            errors: BatchPutPropertyError[] | undefined;
    }
    export namespace BatchPutPropertyErrorEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchPutPropertyErrorEntry) => any;
    }
    /**
        * <p>An object that sets information about a property.</p>
        */
    export interface PropertyDefinitionRequest {
            /**
                * <p>An object that contains information about the data type.</p>
                */
            dataType?: DataType;
            /**
                * <p>A Boolean value that specifies whether the property is required.</p>
                */
            isRequiredInEntity?: boolean;
            /**
                * <p>A Boolean value that specifies whether the property ID comes from an external data store.</p>
                */
            isExternalId?: boolean;
            /**
                * <p>A Boolean value that specifies whether the property is stored externally.</p>
                */
            isStoredExternally?: boolean;
            /**
                * <p>A Boolean value that specifies whether the property consists of time series data.</p>
                */
            isTimeSeries?: boolean;
            /**
                * <p>An object that contains the default value.</p>
                */
            defaultValue?: DataValue;
            /**
                * <p>A mapping that specifies configuration information about the property. Use this field to
                *          specify information that you read from and write to an external source.</p>
                */
            configuration?: Record<string, string>;
    }
    export namespace PropertyDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PropertyDefinitionRequest) => any;
    }
    /**
        * <p>An object that contains response data from a property definition request.</p>
        */
    export interface PropertyDefinitionResponse {
            /**
                * <p>An object that contains information about the data type.</p>
                */
            dataType: DataType | undefined;
            /**
                * <p>A Boolean value that specifies whether the property consists of time series data.</p>
                */
            isTimeSeries: boolean | undefined;
            /**
                * <p>A Boolean value that specifies whether the property is required in an entity.</p>
                */
            isRequiredInEntity: boolean | undefined;
            /**
                * <p>A Boolean value that specifies whether the property ID comes from an external data store.</p>
                */
            isExternalId: boolean | undefined;
            /**
                * <p>A Boolean value that specifies whether the property is stored externally.</p>
                */
            isStoredExternally: boolean | undefined;
            /**
                * <p>A Boolean value that specifies whether the property definition is imported from an external data store.</p>
                */
            isImported: boolean | undefined;
            /**
                * <p>A Boolean value that specifies whether the property definition can be updated.</p>
                */
            isFinal: boolean | undefined;
            /**
                * <p>A Boolean value that specifies whether the property definition is inherited from a parent entity.</p>
                */
            isInherited: boolean | undefined;
            /**
                * <p>An object that contains the default value.</p>
                */
            defaultValue?: DataValue;
            /**
                * <p>A mapping that specifies configuration information about the property.</p>
                */
            configuration?: Record<string, string>;
    }
    export namespace PropertyDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PropertyDefinitionResponse) => any;
    }
    export interface BatchPutPropertyValuesResponse {
            /**
                * <p>Entries that caused errors in the batch put operation.</p>
                */
            errorEntries: BatchPutPropertyErrorEntry[] | undefined;
    }
    export namespace BatchPutPropertyValuesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchPutPropertyValuesResponse) => any;
    }
    export interface CreateComponentTypeRequest {
            /**
                * <p>The ID of the workspace that contains the component type.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>A Boolean value that specifies whether an entity can have more than one component of
                *          this type.</p>
                */
            isSingleton?: boolean;
            /**
                * <p>The ID of the component type.</p>
                */
            componentTypeId: string | undefined;
            /**
                * <p>The description of the component type.</p>
                */
            description?: string;
            /**
                * <p>An object that maps strings to the property definitions in the component type. Each string
                *       in the mapping must be unique to this object.</p>
                */
            propertyDefinitions?: Record<string, PropertyDefinitionRequest>;
            /**
                * <p>Specifies the parent component type to extend.</p>
                */
            extendsFrom?: string[];
            /**
                * <p>An object that maps strings to the functions in the component type. Each string in the
                *          mapping must be unique to this object.</p>
                */
            functions?: Record<string, FunctionRequest>;
            /**
                * <p>Metadata that you can use to manage the component type.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateComponentTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateComponentTypeRequest) => any;
    }
    export interface GetComponentTypeResponse {
            /**
                * <p>The ID of the workspace that contains the component type.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>A Boolean value that specifies whether an entity can have more than one component of this
                *          type.</p>
                */
            isSingleton?: boolean;
            /**
                * <p>The ID of the component type.</p>
                */
            componentTypeId: string | undefined;
            /**
                * <p>The description of the component type.</p>
                */
            description?: string;
            /**
                * <p>An object that maps strings to the property definitions in the component type. Each string
                *        in the mapping must be unique to this object.</p>
                */
            propertyDefinitions?: Record<string, PropertyDefinitionResponse>;
            /**
                * <p>The name of the parent component type that this component type extends.</p>
                */
            extendsFrom?: string[];
            /**
                * <p>An object that maps strings to the functions in the component type. Each string
                *        in the mapping must be unique to this object.</p>
                */
            functions?: Record<string, FunctionResponse>;
            /**
                * <p>The date and time when the component type was created.</p>
                */
            creationDateTime: Date | undefined;
            /**
                * <p>The date and time when the component was last updated.</p>
                */
            updateDateTime: Date | undefined;
            /**
                * <p>The ARN of the component type.</p>
                */
            arn: string | undefined;
            /**
                * <p>A Boolean value that specifies whether the component type is abstract.</p>
                */
            isAbstract?: boolean;
            /**
                * <p>A Boolean value that specifies whether the component type has a schema initializer and that the
                *       schema initializer has run.</p>
                */
            isSchemaInitialized?: boolean;
            /**
                * <p>The current status of the component type.</p>
                */
            status?: Status;
    }
    export namespace GetComponentTypeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetComponentTypeResponse) => any;
    }
    export interface UpdateComponentTypeRequest {
            /**
                * <p>The ID of the workspace that contains the component type.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>A Boolean value that specifies whether an entity can have more than one component of this
                *          type.</p>
                */
            isSingleton?: boolean;
            /**
                * <p>The ID of the component type.</p>
                */
            componentTypeId: string | undefined;
            /**
                * <p>The description of the component type.</p>
                */
            description?: string;
            /**
                * <p>An object that maps strings to the property definitions in the component type. Each string
                *        in the mapping must be unique to this object.</p>
                */
            propertyDefinitions?: Record<string, PropertyDefinitionRequest>;
            /**
                * <p>Specifies the component type that this component type extends.</p>
                */
            extendsFrom?: string[];
            /**
                * <p>An object that maps strings to the functions in the component type. Each string
                *        in the mapping must be unique to this object.</p>
                */
            functions?: Record<string, FunctionRequest>;
    }
    export namespace UpdateComponentTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateComponentTypeRequest) => any;
    }
    /**
        * <p>An object that sets information about a property.</p>
        */
    export interface PropertyRequest {
            /**
                * <p>An object that specifies information about a property.</p>
                */
            definition?: PropertyDefinitionRequest;
            /**
                * <p>The value of the property.</p>
                */
            value?: DataValue;
            /**
                * <p>The update type of the update property request.</p>
                */
            updateType?: PropertyUpdateType | string;
    }
    export namespace PropertyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PropertyRequest) => any;
    }
    /**
        * <p>An object that contains information about a property response.</p>
        */
    export interface PropertyResponse {
            /**
                * <p>An object that specifies information about a property.</p>
                */
            definition?: PropertyDefinitionResponse;
            /**
                * <p>The value of the property.</p>
                */
            value?: DataValue;
    }
    export namespace PropertyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PropertyResponse) => any;
    }
    /**
        * <p>An object that sets information about a component type create or update request.</p>
        */
    export interface ComponentRequest {
            /**
                * <p>The description of the component request.</p>
                */
            description?: string;
            /**
                * <p>The ID of the component type.</p>
                */
            componentTypeId?: string;
            /**
                * <p>An object that maps strings to the properties to set in the component type. Each string
                *        in the mapping must be unique to this object.</p>
                */
            properties?: Record<string, PropertyRequest>;
    }
    export namespace ComponentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComponentRequest) => any;
    }
    /**
        * <p>An object that returns information about a component type create or update request.</p>
        */
    export interface ComponentResponse {
            /**
                * <p>The name of the component.</p>
                */
            componentName?: string;
            /**
                * <p>The description of the component type.</p>
                */
            description?: string;
            /**
                * <p>The ID of the component type.</p>
                */
            componentTypeId?: string;
            /**
                * <p>The status of the component type.</p>
                */
            status?: Status;
            /**
                * <p>The name of the property definition set in the request.</p>
                */
            definedIn?: string;
            /**
                * <p>An object that maps strings to the properties to set in the component type. Each string
                *        in the mapping must be unique to this object.</p>
                */
            properties?: Record<string, PropertyResponse>;
    }
    export namespace ComponentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComponentResponse) => any;
    }
    /**
        * <p>The component update request.</p>
        */
    export interface ComponentUpdateRequest {
            /**
                * <p>The update type of the component update request.</p>
                */
            updateType?: ComponentUpdateType | string;
            /**
                * <p>The description of the component type.</p>
                */
            description?: string;
            /**
                * <p>The ID of the component type.</p>
                */
            componentTypeId?: string;
            /**
                * <p>An object that maps strings to the properties to set in the component type update. Each string
                *        in the mapping must be unique to this object.</p>
                */
            propertyUpdates?: Record<string, PropertyRequest>;
    }
    export namespace ComponentUpdateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComponentUpdateRequest) => any;
    }
    export interface CreateEntityRequest {
            /**
                * <p>The ID of the workspace that contains the entity.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>The ID of the entity.</p>
                */
            entityId?: string;
            /**
                * <p>The name of the entity.</p>
                */
            entityName: string | undefined;
            /**
                * <p>The description of the entity.</p>
                */
            description?: string;
            /**
                * <p>An object that maps strings to the components in the entity. Each string
                *        in the mapping must be unique to this object.</p>
                */
            components?: Record<string, ComponentRequest>;
            /**
                * <p>The ID of the entity's parent entity.</p>
                */
            parentEntityId?: string;
            /**
                * <p>Metadata that you can use to manage the entity.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateEntityRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEntityRequest) => any;
    }
    export interface GetEntityResponse {
            /**
                * <p>The ID of the entity.</p>
                */
            entityId: string | undefined;
            /**
                * <p>The name of the entity.</p>
                */
            entityName: string | undefined;
            /**
                * <p>The ARN of the entity.</p>
                */
            arn: string | undefined;
            /**
                * <p>The current status of the entity.</p>
                */
            status: Status | undefined;
            /**
                * <p>The ID of the workspace.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>The description of the entity.</p>
                */
            description?: string;
            /**
                * <p>An object that maps strings to the components in the entity. Each string
                *        in the mapping must be unique to this object.</p>
                */
            components?: Record<string, ComponentResponse>;
            /**
                * <p>The ID of the parent entity for this entity.</p>
                */
            parentEntityId: string | undefined;
            /**
                * <p>A Boolean value that specifies whether the entity has associated child entities.</p>
                */
            hasChildEntities: boolean | undefined;
            /**
                * <p>The date and time when the entity was created.</p>
                */
            creationDateTime: Date | undefined;
            /**
                * <p>The date and time when the entity was last updated.</p>
                */
            updateDateTime: Date | undefined;
    }
    export namespace GetEntityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEntityResponse) => any;
    }
    export interface UpdateEntityRequest {
            /**
                * <p>The ID of the workspace that contains the entity.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>The ID of the entity.</p>
                */
            entityId: string | undefined;
            /**
                * <p>The name of the entity.</p>
                */
            entityName?: string;
            /**
                * <p>The description of the entity.</p>
                */
            description?: string;
            /**
                * <p>An object that maps strings to the component updates in the request. Each string
                *        in the mapping must be unique to this object.</p>
                */
            componentUpdates?: Record<string, ComponentUpdateRequest>;
            /**
                * <p>An object that describes the update request for a parent entity.</p>
                */
            parentEntityUpdate?: ParentEntityUpdateRequest;
    }
    export namespace UpdateEntityRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateEntityRequest) => any;
    }
}

declare module '@aws-sdk/client-iottwinmaker/node_modules/@aws-sdk/client-iottwinmaker/dist-types/models/IoTTwinMakerServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from IoTTwinMaker service.
        */
    export class IoTTwinMakerServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

