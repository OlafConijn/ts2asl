// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-elasticsearch-service' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AcceptInboundCrossClusterSearchConnectionCommandInput, AcceptInboundCrossClusterSearchConnectionCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/AcceptInboundCrossClusterSearchConnectionCommand";
    import { AddTagsCommandInput, AddTagsCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/AddTagsCommand";
    import { AssociatePackageCommandInput, AssociatePackageCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/AssociatePackageCommand";
    import { CancelElasticsearchServiceSoftwareUpdateCommandInput, CancelElasticsearchServiceSoftwareUpdateCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/CancelElasticsearchServiceSoftwareUpdateCommand";
    import { CreateElasticsearchDomainCommandInput, CreateElasticsearchDomainCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/CreateElasticsearchDomainCommand";
    import { CreateOutboundCrossClusterSearchConnectionCommandInput, CreateOutboundCrossClusterSearchConnectionCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/CreateOutboundCrossClusterSearchConnectionCommand";
    import { CreatePackageCommandInput, CreatePackageCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/CreatePackageCommand";
    import { DeleteElasticsearchDomainCommandInput, DeleteElasticsearchDomainCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DeleteElasticsearchDomainCommand";
    import { DeleteElasticsearchServiceRoleCommandInput, DeleteElasticsearchServiceRoleCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DeleteElasticsearchServiceRoleCommand";
    import { DeleteInboundCrossClusterSearchConnectionCommandInput, DeleteInboundCrossClusterSearchConnectionCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DeleteInboundCrossClusterSearchConnectionCommand";
    import { DeleteOutboundCrossClusterSearchConnectionCommandInput, DeleteOutboundCrossClusterSearchConnectionCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DeleteOutboundCrossClusterSearchConnectionCommand";
    import { DeletePackageCommandInput, DeletePackageCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DeletePackageCommand";
    import { DescribeDomainAutoTunesCommandInput, DescribeDomainAutoTunesCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeDomainAutoTunesCommand";
    import { DescribeDomainChangeProgressCommandInput, DescribeDomainChangeProgressCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeDomainChangeProgressCommand";
    import { DescribeElasticsearchDomainCommandInput, DescribeElasticsearchDomainCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeElasticsearchDomainCommand";
    import { DescribeElasticsearchDomainConfigCommandInput, DescribeElasticsearchDomainConfigCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeElasticsearchDomainConfigCommand";
    import { DescribeElasticsearchDomainsCommandInput, DescribeElasticsearchDomainsCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeElasticsearchDomainsCommand";
    import { DescribeElasticsearchInstanceTypeLimitsCommandInput, DescribeElasticsearchInstanceTypeLimitsCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeElasticsearchInstanceTypeLimitsCommand";
    import { DescribeInboundCrossClusterSearchConnectionsCommandInput, DescribeInboundCrossClusterSearchConnectionsCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeInboundCrossClusterSearchConnectionsCommand";
    import { DescribeOutboundCrossClusterSearchConnectionsCommandInput, DescribeOutboundCrossClusterSearchConnectionsCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeOutboundCrossClusterSearchConnectionsCommand";
    import { DescribePackagesCommandInput, DescribePackagesCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribePackagesCommand";
    import { DescribeReservedElasticsearchInstanceOfferingsCommandInput, DescribeReservedElasticsearchInstanceOfferingsCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeReservedElasticsearchInstanceOfferingsCommand";
    import { DescribeReservedElasticsearchInstancesCommandInput, DescribeReservedElasticsearchInstancesCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeReservedElasticsearchInstancesCommand";
    import { DissociatePackageCommandInput, DissociatePackageCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DissociatePackageCommand";
    import { GetCompatibleElasticsearchVersionsCommandInput, GetCompatibleElasticsearchVersionsCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/GetCompatibleElasticsearchVersionsCommand";
    import { GetPackageVersionHistoryCommandInput, GetPackageVersionHistoryCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/GetPackageVersionHistoryCommand";
    import { GetUpgradeHistoryCommandInput, GetUpgradeHistoryCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/GetUpgradeHistoryCommand";
    import { GetUpgradeStatusCommandInput, GetUpgradeStatusCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/GetUpgradeStatusCommand";
    import { ListDomainNamesCommandInput, ListDomainNamesCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/ListDomainNamesCommand";
    import { ListDomainsForPackageCommandInput, ListDomainsForPackageCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/ListDomainsForPackageCommand";
    import { ListElasticsearchInstanceTypesCommandInput, ListElasticsearchInstanceTypesCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/ListElasticsearchInstanceTypesCommand";
    import { ListElasticsearchVersionsCommandInput, ListElasticsearchVersionsCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/ListElasticsearchVersionsCommand";
    import { ListPackagesForDomainCommandInput, ListPackagesForDomainCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/ListPackagesForDomainCommand";
    import { ListTagsCommandInput, ListTagsCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/ListTagsCommand";
    import { PurchaseReservedElasticsearchInstanceOfferingCommandInput, PurchaseReservedElasticsearchInstanceOfferingCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/PurchaseReservedElasticsearchInstanceOfferingCommand";
    import { RejectInboundCrossClusterSearchConnectionCommandInput, RejectInboundCrossClusterSearchConnectionCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/RejectInboundCrossClusterSearchConnectionCommand";
    import { RemoveTagsCommandInput, RemoveTagsCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/RemoveTagsCommand";
    import { StartElasticsearchServiceSoftwareUpdateCommandInput, StartElasticsearchServiceSoftwareUpdateCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/StartElasticsearchServiceSoftwareUpdateCommand";
    import { UpdateElasticsearchDomainConfigCommandInput, UpdateElasticsearchDomainConfigCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/UpdateElasticsearchDomainConfigCommand";
    import { UpdatePackageCommandInput, UpdatePackageCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/UpdatePackageCommand";
    import { UpgradeElasticsearchDomainCommandInput, UpgradeElasticsearchDomainCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/UpgradeElasticsearchDomainCommand";
    import { ElasticsearchServiceClient } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    /**
        * <fullname>Amazon Elasticsearch Configuration Service</fullname>
        *       <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p>
        *       <p>For sample code that uses the Configuration API, see the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html">Amazon Elasticsearch Service Developer Guide</a>.
        *       The guide also contains <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p>
        *       <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com.
        *          For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints,
        *          see <a href="http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions" target="_blank">Regions and Endpoints</a>.</p>
        */
    export class ElasticsearchService extends ElasticsearchServiceClient {
            /**
                * <p>Allows the destination domain owner to accept an inbound cross-cluster search connection request.</p>
                */
            acceptInboundCrossClusterSearchConnection(args: AcceptInboundCrossClusterSearchConnectionCommandInput, options?: __HttpHandlerOptions): Promise<AcceptInboundCrossClusterSearchConnectionCommandOutput>;
            acceptInboundCrossClusterSearchConnection(args: AcceptInboundCrossClusterSearchConnectionCommandInput, cb: (err: any, data?: AcceptInboundCrossClusterSearchConnectionCommandOutput) => void): void;
            acceptInboundCrossClusterSearchConnection(args: AcceptInboundCrossClusterSearchConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AcceptInboundCrossClusterSearchConnectionCommandOutput) => void): void;
            /**
                * <p>Attaches tags to an existing Elasticsearch domain. Tags are a set of case-sensitive key value pairs. An Elasticsearch domain may have up to 10 tags.  See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-managedomains.html#es-managedomains-awsresorcetagging" target="_blank">
                *           Tagging Amazon Elasticsearch Service Domains for more information.</a></p>
                */
            addTags(args: AddTagsCommandInput, options?: __HttpHandlerOptions): Promise<AddTagsCommandOutput>;
            addTags(args: AddTagsCommandInput, cb: (err: any, data?: AddTagsCommandOutput) => void): void;
            addTags(args: AddTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddTagsCommandOutput) => void): void;
            /**
                * <p>Associates a package with an Amazon ES domain.</p>
                */
            associatePackage(args: AssociatePackageCommandInput, options?: __HttpHandlerOptions): Promise<AssociatePackageCommandOutput>;
            associatePackage(args: AssociatePackageCommandInput, cb: (err: any, data?: AssociatePackageCommandOutput) => void): void;
            associatePackage(args: AssociatePackageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociatePackageCommandOutput) => void): void;
            /**
                * <p>Cancels a scheduled service software update for an Amazon ES domain. You can only perform this operation before the <code>AutomatedUpdateDate</code> and when the <code>UpdateStatus</code> is in the <code>PENDING_UPDATE</code> state.</p>
                */
            cancelElasticsearchServiceSoftwareUpdate(args: CancelElasticsearchServiceSoftwareUpdateCommandInput, options?: __HttpHandlerOptions): Promise<CancelElasticsearchServiceSoftwareUpdateCommandOutput>;
            cancelElasticsearchServiceSoftwareUpdate(args: CancelElasticsearchServiceSoftwareUpdateCommandInput, cb: (err: any, data?: CancelElasticsearchServiceSoftwareUpdateCommandOutput) => void): void;
            cancelElasticsearchServiceSoftwareUpdate(args: CancelElasticsearchServiceSoftwareUpdateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelElasticsearchServiceSoftwareUpdateCommandOutput) => void): void;
            /**
                * <p>Creates a new Elasticsearch domain. For more information,
                *           see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomains" target="_blank">Creating Elasticsearch Domains</a> in the <i>Amazon Elasticsearch Service Developer Guide</i>.</p>
                */
            createElasticsearchDomain(args: CreateElasticsearchDomainCommandInput, options?: __HttpHandlerOptions): Promise<CreateElasticsearchDomainCommandOutput>;
            createElasticsearchDomain(args: CreateElasticsearchDomainCommandInput, cb: (err: any, data?: CreateElasticsearchDomainCommandOutput) => void): void;
            createElasticsearchDomain(args: CreateElasticsearchDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateElasticsearchDomainCommandOutput) => void): void;
            /**
                * <p>Creates a new cross-cluster search connection from a source domain to a destination domain.</p>
                */
            createOutboundCrossClusterSearchConnection(args: CreateOutboundCrossClusterSearchConnectionCommandInput, options?: __HttpHandlerOptions): Promise<CreateOutboundCrossClusterSearchConnectionCommandOutput>;
            createOutboundCrossClusterSearchConnection(args: CreateOutboundCrossClusterSearchConnectionCommandInput, cb: (err: any, data?: CreateOutboundCrossClusterSearchConnectionCommandOutput) => void): void;
            createOutboundCrossClusterSearchConnection(args: CreateOutboundCrossClusterSearchConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateOutboundCrossClusterSearchConnectionCommandOutput) => void): void;
            /**
                * <p>Create a package for use with Amazon ES domains.</p>
                */
            createPackage(args: CreatePackageCommandInput, options?: __HttpHandlerOptions): Promise<CreatePackageCommandOutput>;
            createPackage(args: CreatePackageCommandInput, cb: (err: any, data?: CreatePackageCommandOutput) => void): void;
            createPackage(args: CreatePackageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePackageCommandOutput) => void): void;
            /**
                * <p>Permanently deletes the specified Elasticsearch domain and all of its data. Once a domain is deleted, it cannot be recovered.</p>
                */
            deleteElasticsearchDomain(args: DeleteElasticsearchDomainCommandInput, options?: __HttpHandlerOptions): Promise<DeleteElasticsearchDomainCommandOutput>;
            deleteElasticsearchDomain(args: DeleteElasticsearchDomainCommandInput, cb: (err: any, data?: DeleteElasticsearchDomainCommandOutput) => void): void;
            deleteElasticsearchDomain(args: DeleteElasticsearchDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteElasticsearchDomainCommandOutput) => void): void;
            /**
                * <p>Deletes the service-linked role that Elasticsearch Service uses to manage and maintain VPC domains. Role deletion will fail if any existing VPC domains use the role. You must delete any such Elasticsearch domains before deleting the role. See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html#es-enabling-slr" target="_blank">Deleting Elasticsearch Service Role</a> in <i>VPC Endpoints for Amazon Elasticsearch Service Domains</i>.</p>
                */
            deleteElasticsearchServiceRole(args: DeleteElasticsearchServiceRoleCommandInput, options?: __HttpHandlerOptions): Promise<DeleteElasticsearchServiceRoleCommandOutput>;
            deleteElasticsearchServiceRole(args: DeleteElasticsearchServiceRoleCommandInput, cb: (err: any, data?: DeleteElasticsearchServiceRoleCommandOutput) => void): void;
            deleteElasticsearchServiceRole(args: DeleteElasticsearchServiceRoleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteElasticsearchServiceRoleCommandOutput) => void): void;
            /**
                * <p>Allows the destination domain owner to delete an existing inbound cross-cluster search connection.</p>
                */
            deleteInboundCrossClusterSearchConnection(args: DeleteInboundCrossClusterSearchConnectionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteInboundCrossClusterSearchConnectionCommandOutput>;
            deleteInboundCrossClusterSearchConnection(args: DeleteInboundCrossClusterSearchConnectionCommandInput, cb: (err: any, data?: DeleteInboundCrossClusterSearchConnectionCommandOutput) => void): void;
            deleteInboundCrossClusterSearchConnection(args: DeleteInboundCrossClusterSearchConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteInboundCrossClusterSearchConnectionCommandOutput) => void): void;
            /**
                * <p>Allows the source domain owner to delete an existing outbound cross-cluster search connection.</p>
                */
            deleteOutboundCrossClusterSearchConnection(args: DeleteOutboundCrossClusterSearchConnectionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteOutboundCrossClusterSearchConnectionCommandOutput>;
            deleteOutboundCrossClusterSearchConnection(args: DeleteOutboundCrossClusterSearchConnectionCommandInput, cb: (err: any, data?: DeleteOutboundCrossClusterSearchConnectionCommandOutput) => void): void;
            deleteOutboundCrossClusterSearchConnection(args: DeleteOutboundCrossClusterSearchConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteOutboundCrossClusterSearchConnectionCommandOutput) => void): void;
            /**
                * <p>Delete the package.</p>
                */
            deletePackage(args: DeletePackageCommandInput, options?: __HttpHandlerOptions): Promise<DeletePackageCommandOutput>;
            deletePackage(args: DeletePackageCommandInput, cb: (err: any, data?: DeletePackageCommandOutput) => void): void;
            deletePackage(args: DeletePackageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePackageCommandOutput) => void): void;
            /**
                * <p>Provides scheduled Auto-Tune action details for the Elasticsearch domain, such as Auto-Tune action type, description, severity, and scheduled date.</p>
                */
            describeDomainAutoTunes(args: DescribeDomainAutoTunesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDomainAutoTunesCommandOutput>;
            describeDomainAutoTunes(args: DescribeDomainAutoTunesCommandInput, cb: (err: any, data?: DescribeDomainAutoTunesCommandOutput) => void): void;
            describeDomainAutoTunes(args: DescribeDomainAutoTunesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDomainAutoTunesCommandOutput) => void): void;
            /**
                * <p>Returns information about the current blue/green deployment happening on a domain, including
                *         a change ID, status, and progress stages.</p>
                */
            describeDomainChangeProgress(args: DescribeDomainChangeProgressCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDomainChangeProgressCommandOutput>;
            describeDomainChangeProgress(args: DescribeDomainChangeProgressCommandInput, cb: (err: any, data?: DescribeDomainChangeProgressCommandOutput) => void): void;
            describeDomainChangeProgress(args: DescribeDomainChangeProgressCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDomainChangeProgressCommandOutput) => void): void;
            /**
                * <p>Returns domain configuration information about the specified Elasticsearch domain, including the domain ID, domain endpoint, and domain ARN.</p>
                */
            describeElasticsearchDomain(args: DescribeElasticsearchDomainCommandInput, options?: __HttpHandlerOptions): Promise<DescribeElasticsearchDomainCommandOutput>;
            describeElasticsearchDomain(args: DescribeElasticsearchDomainCommandInput, cb: (err: any, data?: DescribeElasticsearchDomainCommandOutput) => void): void;
            describeElasticsearchDomain(args: DescribeElasticsearchDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeElasticsearchDomainCommandOutput) => void): void;
            /**
                * <p>Provides cluster configuration information about the specified Elasticsearch domain, such as the state, creation date, update version, and update date for cluster options.</p>
                */
            describeElasticsearchDomainConfig(args: DescribeElasticsearchDomainConfigCommandInput, options?: __HttpHandlerOptions): Promise<DescribeElasticsearchDomainConfigCommandOutput>;
            describeElasticsearchDomainConfig(args: DescribeElasticsearchDomainConfigCommandInput, cb: (err: any, data?: DescribeElasticsearchDomainConfigCommandOutput) => void): void;
            describeElasticsearchDomainConfig(args: DescribeElasticsearchDomainConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeElasticsearchDomainConfigCommandOutput) => void): void;
            /**
                * <p>Returns domain configuration information about the specified Elasticsearch domains, including the domain ID, domain endpoint, and domain ARN.</p>
                */
            describeElasticsearchDomains(args: DescribeElasticsearchDomainsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeElasticsearchDomainsCommandOutput>;
            describeElasticsearchDomains(args: DescribeElasticsearchDomainsCommandInput, cb: (err: any, data?: DescribeElasticsearchDomainsCommandOutput) => void): void;
            describeElasticsearchDomains(args: DescribeElasticsearchDomainsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeElasticsearchDomainsCommandOutput) => void): void;
            /**
                * <p>
                *     Describe Elasticsearch Limits for a given InstanceType and ElasticsearchVersion.
                *     When modifying existing Domain, specify the
                *     <code>
                *       <a>DomainName</a>
                *     </code>
                *     to know what Limits are supported for modifying.
                *   </p>
                */
            describeElasticsearchInstanceTypeLimits(args: DescribeElasticsearchInstanceTypeLimitsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeElasticsearchInstanceTypeLimitsCommandOutput>;
            describeElasticsearchInstanceTypeLimits(args: DescribeElasticsearchInstanceTypeLimitsCommandInput, cb: (err: any, data?: DescribeElasticsearchInstanceTypeLimitsCommandOutput) => void): void;
            describeElasticsearchInstanceTypeLimits(args: DescribeElasticsearchInstanceTypeLimitsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeElasticsearchInstanceTypeLimitsCommandOutput) => void): void;
            /**
                * <p>Lists all the inbound cross-cluster search connections for a destination domain.</p>
                */
            describeInboundCrossClusterSearchConnections(args: DescribeInboundCrossClusterSearchConnectionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeInboundCrossClusterSearchConnectionsCommandOutput>;
            describeInboundCrossClusterSearchConnections(args: DescribeInboundCrossClusterSearchConnectionsCommandInput, cb: (err: any, data?: DescribeInboundCrossClusterSearchConnectionsCommandOutput) => void): void;
            describeInboundCrossClusterSearchConnections(args: DescribeInboundCrossClusterSearchConnectionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeInboundCrossClusterSearchConnectionsCommandOutput) => void): void;
            /**
                * <p>Lists all the outbound cross-cluster search connections for a source domain.</p>
                */
            describeOutboundCrossClusterSearchConnections(args: DescribeOutboundCrossClusterSearchConnectionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeOutboundCrossClusterSearchConnectionsCommandOutput>;
            describeOutboundCrossClusterSearchConnections(args: DescribeOutboundCrossClusterSearchConnectionsCommandInput, cb: (err: any, data?: DescribeOutboundCrossClusterSearchConnectionsCommandOutput) => void): void;
            describeOutboundCrossClusterSearchConnections(args: DescribeOutboundCrossClusterSearchConnectionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeOutboundCrossClusterSearchConnectionsCommandOutput) => void): void;
            /**
                * <p>Describes all packages available to Amazon ES. Includes options for filtering, limiting the number of results, and pagination.</p>
                */
            describePackages(args: DescribePackagesCommandInput, options?: __HttpHandlerOptions): Promise<DescribePackagesCommandOutput>;
            describePackages(args: DescribePackagesCommandInput, cb: (err: any, data?: DescribePackagesCommandOutput) => void): void;
            describePackages(args: DescribePackagesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePackagesCommandOutput) => void): void;
            /**
                * <p>Lists available reserved Elasticsearch instance offerings.</p>
                */
            describeReservedElasticsearchInstanceOfferings(args: DescribeReservedElasticsearchInstanceOfferingsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeReservedElasticsearchInstanceOfferingsCommandOutput>;
            describeReservedElasticsearchInstanceOfferings(args: DescribeReservedElasticsearchInstanceOfferingsCommandInput, cb: (err: any, data?: DescribeReservedElasticsearchInstanceOfferingsCommandOutput) => void): void;
            describeReservedElasticsearchInstanceOfferings(args: DescribeReservedElasticsearchInstanceOfferingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeReservedElasticsearchInstanceOfferingsCommandOutput) => void): void;
            /**
                * <p>Returns information about reserved Elasticsearch instances for this account.</p>
                */
            describeReservedElasticsearchInstances(args: DescribeReservedElasticsearchInstancesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeReservedElasticsearchInstancesCommandOutput>;
            describeReservedElasticsearchInstances(args: DescribeReservedElasticsearchInstancesCommandInput, cb: (err: any, data?: DescribeReservedElasticsearchInstancesCommandOutput) => void): void;
            describeReservedElasticsearchInstances(args: DescribeReservedElasticsearchInstancesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeReservedElasticsearchInstancesCommandOutput) => void): void;
            /**
                * <p>Dissociates a package from the Amazon ES domain.</p>
                */
            dissociatePackage(args: DissociatePackageCommandInput, options?: __HttpHandlerOptions): Promise<DissociatePackageCommandOutput>;
            dissociatePackage(args: DissociatePackageCommandInput, cb: (err: any, data?: DissociatePackageCommandOutput) => void): void;
            dissociatePackage(args: DissociatePackageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DissociatePackageCommandOutput) => void): void;
            /**
                * <p>
                *         Returns a list of upgrade compatible Elastisearch versions.
                *         You can optionally pass a
                *         <code>
                *           <a>DomainName</a>
                *         </code>
                *         to get all upgrade compatible Elasticsearch versions for that specific domain.
                *       </p>
                */
            getCompatibleElasticsearchVersions(args: GetCompatibleElasticsearchVersionsCommandInput, options?: __HttpHandlerOptions): Promise<GetCompatibleElasticsearchVersionsCommandOutput>;
            getCompatibleElasticsearchVersions(args: GetCompatibleElasticsearchVersionsCommandInput, cb: (err: any, data?: GetCompatibleElasticsearchVersionsCommandOutput) => void): void;
            getCompatibleElasticsearchVersions(args: GetCompatibleElasticsearchVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCompatibleElasticsearchVersionsCommandOutput) => void): void;
            /**
                * <p>Returns a list of versions of the package, along with their creation time and commit message.</p>
                */
            getPackageVersionHistory(args: GetPackageVersionHistoryCommandInput, options?: __HttpHandlerOptions): Promise<GetPackageVersionHistoryCommandOutput>;
            getPackageVersionHistory(args: GetPackageVersionHistoryCommandInput, cb: (err: any, data?: GetPackageVersionHistoryCommandOutput) => void): void;
            getPackageVersionHistory(args: GetPackageVersionHistoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPackageVersionHistoryCommandOutput) => void): void;
            /**
                * <p>Retrieves the complete history of the last 10 upgrades that were performed on the domain.</p>
                */
            getUpgradeHistory(args: GetUpgradeHistoryCommandInput, options?: __HttpHandlerOptions): Promise<GetUpgradeHistoryCommandOutput>;
            getUpgradeHistory(args: GetUpgradeHistoryCommandInput, cb: (err: any, data?: GetUpgradeHistoryCommandOutput) => void): void;
            getUpgradeHistory(args: GetUpgradeHistoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetUpgradeHistoryCommandOutput) => void): void;
            /**
                * <p>Retrieves the latest status of the last upgrade or upgrade eligibility check that was performed on the domain.</p>
                */
            getUpgradeStatus(args: GetUpgradeStatusCommandInput, options?: __HttpHandlerOptions): Promise<GetUpgradeStatusCommandOutput>;
            getUpgradeStatus(args: GetUpgradeStatusCommandInput, cb: (err: any, data?: GetUpgradeStatusCommandOutput) => void): void;
            getUpgradeStatus(args: GetUpgradeStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetUpgradeStatusCommandOutput) => void): void;
            /**
                * <p>Returns the name of all Elasticsearch domains owned by the current user's account. </p>
                */
            listDomainNames(args: ListDomainNamesCommandInput, options?: __HttpHandlerOptions): Promise<ListDomainNamesCommandOutput>;
            listDomainNames(args: ListDomainNamesCommandInput, cb: (err: any, data?: ListDomainNamesCommandOutput) => void): void;
            listDomainNames(args: ListDomainNamesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDomainNamesCommandOutput) => void): void;
            /**
                * <p>Lists all Amazon ES domains associated with the package.</p>
                */
            listDomainsForPackage(args: ListDomainsForPackageCommandInput, options?: __HttpHandlerOptions): Promise<ListDomainsForPackageCommandOutput>;
            listDomainsForPackage(args: ListDomainsForPackageCommandInput, cb: (err: any, data?: ListDomainsForPackageCommandOutput) => void): void;
            listDomainsForPackage(args: ListDomainsForPackageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDomainsForPackageCommandOutput) => void): void;
            /**
                * <p>List all Elasticsearch instance types that are supported for given ElasticsearchVersion</p>
                */
            listElasticsearchInstanceTypes(args: ListElasticsearchInstanceTypesCommandInput, options?: __HttpHandlerOptions): Promise<ListElasticsearchInstanceTypesCommandOutput>;
            listElasticsearchInstanceTypes(args: ListElasticsearchInstanceTypesCommandInput, cb: (err: any, data?: ListElasticsearchInstanceTypesCommandOutput) => void): void;
            listElasticsearchInstanceTypes(args: ListElasticsearchInstanceTypesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListElasticsearchInstanceTypesCommandOutput) => void): void;
            /**
                * <p>List all supported Elasticsearch versions</p>
                */
            listElasticsearchVersions(args: ListElasticsearchVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListElasticsearchVersionsCommandOutput>;
            listElasticsearchVersions(args: ListElasticsearchVersionsCommandInput, cb: (err: any, data?: ListElasticsearchVersionsCommandOutput) => void): void;
            listElasticsearchVersions(args: ListElasticsearchVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListElasticsearchVersionsCommandOutput) => void): void;
            /**
                * <p>Lists all packages associated with the Amazon ES domain.</p>
                */
            listPackagesForDomain(args: ListPackagesForDomainCommandInput, options?: __HttpHandlerOptions): Promise<ListPackagesForDomainCommandOutput>;
            listPackagesForDomain(args: ListPackagesForDomainCommandInput, cb: (err: any, data?: ListPackagesForDomainCommandOutput) => void): void;
            listPackagesForDomain(args: ListPackagesForDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPackagesForDomainCommandOutput) => void): void;
            /**
                * <p>Returns all tags for the given Elasticsearch domain.</p>
                */
            listTags(args: ListTagsCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsCommandOutput>;
            listTags(args: ListTagsCommandInput, cb: (err: any, data?: ListTagsCommandOutput) => void): void;
            listTags(args: ListTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsCommandOutput) => void): void;
            /**
                * <p>Allows you to purchase reserved Elasticsearch instances.</p>
                */
            purchaseReservedElasticsearchInstanceOffering(args: PurchaseReservedElasticsearchInstanceOfferingCommandInput, options?: __HttpHandlerOptions): Promise<PurchaseReservedElasticsearchInstanceOfferingCommandOutput>;
            purchaseReservedElasticsearchInstanceOffering(args: PurchaseReservedElasticsearchInstanceOfferingCommandInput, cb: (err: any, data?: PurchaseReservedElasticsearchInstanceOfferingCommandOutput) => void): void;
            purchaseReservedElasticsearchInstanceOffering(args: PurchaseReservedElasticsearchInstanceOfferingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PurchaseReservedElasticsearchInstanceOfferingCommandOutput) => void): void;
            /**
                * <p>Allows the destination domain owner to reject an inbound cross-cluster search connection request.</p>
                */
            rejectInboundCrossClusterSearchConnection(args: RejectInboundCrossClusterSearchConnectionCommandInput, options?: __HttpHandlerOptions): Promise<RejectInboundCrossClusterSearchConnectionCommandOutput>;
            rejectInboundCrossClusterSearchConnection(args: RejectInboundCrossClusterSearchConnectionCommandInput, cb: (err: any, data?: RejectInboundCrossClusterSearchConnectionCommandOutput) => void): void;
            rejectInboundCrossClusterSearchConnection(args: RejectInboundCrossClusterSearchConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RejectInboundCrossClusterSearchConnectionCommandOutput) => void): void;
            /**
                * <p>Removes the specified set of tags from the specified Elasticsearch domain.</p>
                */
            removeTags(args: RemoveTagsCommandInput, options?: __HttpHandlerOptions): Promise<RemoveTagsCommandOutput>;
            removeTags(args: RemoveTagsCommandInput, cb: (err: any, data?: RemoveTagsCommandOutput) => void): void;
            removeTags(args: RemoveTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveTagsCommandOutput) => void): void;
            /**
                * <p>Schedules a service software update for an Amazon ES domain.</p>
                */
            startElasticsearchServiceSoftwareUpdate(args: StartElasticsearchServiceSoftwareUpdateCommandInput, options?: __HttpHandlerOptions): Promise<StartElasticsearchServiceSoftwareUpdateCommandOutput>;
            startElasticsearchServiceSoftwareUpdate(args: StartElasticsearchServiceSoftwareUpdateCommandInput, cb: (err: any, data?: StartElasticsearchServiceSoftwareUpdateCommandOutput) => void): void;
            startElasticsearchServiceSoftwareUpdate(args: StartElasticsearchServiceSoftwareUpdateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartElasticsearchServiceSoftwareUpdateCommandOutput) => void): void;
            /**
                * <p>Modifies the cluster configuration of the specified Elasticsearch domain, setting as setting the instance type and the number of instances. </p>
                */
            updateElasticsearchDomainConfig(args: UpdateElasticsearchDomainConfigCommandInput, options?: __HttpHandlerOptions): Promise<UpdateElasticsearchDomainConfigCommandOutput>;
            updateElasticsearchDomainConfig(args: UpdateElasticsearchDomainConfigCommandInput, cb: (err: any, data?: UpdateElasticsearchDomainConfigCommandOutput) => void): void;
            updateElasticsearchDomainConfig(args: UpdateElasticsearchDomainConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateElasticsearchDomainConfigCommandOutput) => void): void;
            /**
                * <p>Updates a package for use with Amazon ES domains.</p>
                */
            updatePackage(args: UpdatePackageCommandInput, options?: __HttpHandlerOptions): Promise<UpdatePackageCommandOutput>;
            updatePackage(args: UpdatePackageCommandInput, cb: (err: any, data?: UpdatePackageCommandOutput) => void): void;
            updatePackage(args: UpdatePackageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdatePackageCommandOutput) => void): void;
            /**
                * <p>Allows you to either upgrade your domain or perform an Upgrade eligibility check to a compatible Elasticsearch version.</p>
                */
            upgradeElasticsearchDomain(args: UpgradeElasticsearchDomainCommandInput, options?: __HttpHandlerOptions): Promise<UpgradeElasticsearchDomainCommandOutput>;
            upgradeElasticsearchDomain(args: UpgradeElasticsearchDomainCommandInput, cb: (err: any, data?: UpgradeElasticsearchDomainCommandOutput) => void): void;
            upgradeElasticsearchDomain(args: UpgradeElasticsearchDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpgradeElasticsearchDomainCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/AcceptInboundCrossClusterSearchConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { AcceptInboundCrossClusterSearchConnectionRequest, AcceptInboundCrossClusterSearchConnectionResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface AcceptInboundCrossClusterSearchConnectionCommandInput extends AcceptInboundCrossClusterSearchConnectionRequest {
    }
    export interface AcceptInboundCrossClusterSearchConnectionCommandOutput extends AcceptInboundCrossClusterSearchConnectionResponse, __MetadataBearer {
    }
    /**
        * <p>Allows the destination domain owner to accept an inbound cross-cluster search connection request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, AcceptInboundCrossClusterSearchConnectionCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, AcceptInboundCrossClusterSearchConnectionCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new AcceptInboundCrossClusterSearchConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AcceptInboundCrossClusterSearchConnectionCommandInput} for command's `input` shape.
        * @see {@link AcceptInboundCrossClusterSearchConnectionCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class AcceptInboundCrossClusterSearchConnectionCommand extends $Command<AcceptInboundCrossClusterSearchConnectionCommandInput, AcceptInboundCrossClusterSearchConnectionCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: AcceptInboundCrossClusterSearchConnectionCommandInput;
            constructor(input: AcceptInboundCrossClusterSearchConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AcceptInboundCrossClusterSearchConnectionCommandInput, AcceptInboundCrossClusterSearchConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/AddTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { AddTagsRequest } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface AddTagsCommandInput extends AddTagsRequest {
    }
    export interface AddTagsCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Attaches tags to an existing Elasticsearch domain. Tags are a set of case-sensitive key value pairs. An Elasticsearch domain may have up to 10 tags.  See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-managedomains.html#es-managedomains-awsresorcetagging" target="_blank">
        *           Tagging Amazon Elasticsearch Service Domains for more information.</a></p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, AddTagsCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, AddTagsCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new AddTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddTagsCommandInput} for command's `input` shape.
        * @see {@link AddTagsCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class AddTagsCommand extends $Command<AddTagsCommandInput, AddTagsCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: AddTagsCommandInput;
            constructor(input: AddTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddTagsCommandInput, AddTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/AssociatePackageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { AssociatePackageRequest, AssociatePackageResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface AssociatePackageCommandInput extends AssociatePackageRequest {
    }
    export interface AssociatePackageCommandOutput extends AssociatePackageResponse, __MetadataBearer {
    }
    /**
        * <p>Associates a package with an Amazon ES domain.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, AssociatePackageCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, AssociatePackageCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new AssociatePackageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociatePackageCommandInput} for command's `input` shape.
        * @see {@link AssociatePackageCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class AssociatePackageCommand extends $Command<AssociatePackageCommandInput, AssociatePackageCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: AssociatePackageCommandInput;
            constructor(input: AssociatePackageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociatePackageCommandInput, AssociatePackageCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/CancelElasticsearchServiceSoftwareUpdateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { CancelElasticsearchServiceSoftwareUpdateRequest, CancelElasticsearchServiceSoftwareUpdateResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface CancelElasticsearchServiceSoftwareUpdateCommandInput extends CancelElasticsearchServiceSoftwareUpdateRequest {
    }
    export interface CancelElasticsearchServiceSoftwareUpdateCommandOutput extends CancelElasticsearchServiceSoftwareUpdateResponse, __MetadataBearer {
    }
    /**
        * <p>Cancels a scheduled service software update for an Amazon ES domain. You can only perform this operation before the <code>AutomatedUpdateDate</code> and when the <code>UpdateStatus</code> is in the <code>PENDING_UPDATE</code> state.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, CancelElasticsearchServiceSoftwareUpdateCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, CancelElasticsearchServiceSoftwareUpdateCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new CancelElasticsearchServiceSoftwareUpdateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelElasticsearchServiceSoftwareUpdateCommandInput} for command's `input` shape.
        * @see {@link CancelElasticsearchServiceSoftwareUpdateCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class CancelElasticsearchServiceSoftwareUpdateCommand extends $Command<CancelElasticsearchServiceSoftwareUpdateCommandInput, CancelElasticsearchServiceSoftwareUpdateCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: CancelElasticsearchServiceSoftwareUpdateCommandInput;
            constructor(input: CancelElasticsearchServiceSoftwareUpdateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelElasticsearchServiceSoftwareUpdateCommandInput, CancelElasticsearchServiceSoftwareUpdateCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/CreateElasticsearchDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { CreateElasticsearchDomainRequest, CreateElasticsearchDomainResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface CreateElasticsearchDomainCommandInput extends CreateElasticsearchDomainRequest {
    }
    export interface CreateElasticsearchDomainCommandOutput extends CreateElasticsearchDomainResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new Elasticsearch domain. For more information,
        *           see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomains" target="_blank">Creating Elasticsearch Domains</a> in the <i>Amazon Elasticsearch Service Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, CreateElasticsearchDomainCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, CreateElasticsearchDomainCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new CreateElasticsearchDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateElasticsearchDomainCommandInput} for command's `input` shape.
        * @see {@link CreateElasticsearchDomainCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class CreateElasticsearchDomainCommand extends $Command<CreateElasticsearchDomainCommandInput, CreateElasticsearchDomainCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: CreateElasticsearchDomainCommandInput;
            constructor(input: CreateElasticsearchDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateElasticsearchDomainCommandInput, CreateElasticsearchDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/CreateOutboundCrossClusterSearchConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { CreateOutboundCrossClusterSearchConnectionRequest, CreateOutboundCrossClusterSearchConnectionResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface CreateOutboundCrossClusterSearchConnectionCommandInput extends CreateOutboundCrossClusterSearchConnectionRequest {
    }
    export interface CreateOutboundCrossClusterSearchConnectionCommandOutput extends CreateOutboundCrossClusterSearchConnectionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new cross-cluster search connection from a source domain to a destination domain.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, CreateOutboundCrossClusterSearchConnectionCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, CreateOutboundCrossClusterSearchConnectionCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new CreateOutboundCrossClusterSearchConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateOutboundCrossClusterSearchConnectionCommandInput} for command's `input` shape.
        * @see {@link CreateOutboundCrossClusterSearchConnectionCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class CreateOutboundCrossClusterSearchConnectionCommand extends $Command<CreateOutboundCrossClusterSearchConnectionCommandInput, CreateOutboundCrossClusterSearchConnectionCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: CreateOutboundCrossClusterSearchConnectionCommandInput;
            constructor(input: CreateOutboundCrossClusterSearchConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateOutboundCrossClusterSearchConnectionCommandInput, CreateOutboundCrossClusterSearchConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/CreatePackageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { CreatePackageRequest, CreatePackageResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface CreatePackageCommandInput extends CreatePackageRequest {
    }
    export interface CreatePackageCommandOutput extends CreatePackageResponse, __MetadataBearer {
    }
    /**
        * <p>Create a package for use with Amazon ES domains.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, CreatePackageCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, CreatePackageCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new CreatePackageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePackageCommandInput} for command's `input` shape.
        * @see {@link CreatePackageCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class CreatePackageCommand extends $Command<CreatePackageCommandInput, CreatePackageCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: CreatePackageCommandInput;
            constructor(input: CreatePackageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePackageCommandInput, CreatePackageCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DeleteElasticsearchDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { DeleteElasticsearchDomainRequest, DeleteElasticsearchDomainResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface DeleteElasticsearchDomainCommandInput extends DeleteElasticsearchDomainRequest {
    }
    export interface DeleteElasticsearchDomainCommandOutput extends DeleteElasticsearchDomainResponse, __MetadataBearer {
    }
    /**
        * <p>Permanently deletes the specified Elasticsearch domain and all of its data. Once a domain is deleted, it cannot be recovered.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, DeleteElasticsearchDomainCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, DeleteElasticsearchDomainCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new DeleteElasticsearchDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteElasticsearchDomainCommandInput} for command's `input` shape.
        * @see {@link DeleteElasticsearchDomainCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class DeleteElasticsearchDomainCommand extends $Command<DeleteElasticsearchDomainCommandInput, DeleteElasticsearchDomainCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: DeleteElasticsearchDomainCommandInput;
            constructor(input: DeleteElasticsearchDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteElasticsearchDomainCommandInput, DeleteElasticsearchDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DeleteElasticsearchServiceRoleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    export interface DeleteElasticsearchServiceRoleCommandInput {
    }
    export interface DeleteElasticsearchServiceRoleCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the service-linked role that Elasticsearch Service uses to manage and maintain VPC domains. Role deletion will fail if any existing VPC domains use the role. You must delete any such Elasticsearch domains before deleting the role. See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html#es-enabling-slr" target="_blank">Deleting Elasticsearch Service Role</a> in <i>VPC Endpoints for Amazon Elasticsearch Service Domains</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, DeleteElasticsearchServiceRoleCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, DeleteElasticsearchServiceRoleCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new DeleteElasticsearchServiceRoleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteElasticsearchServiceRoleCommandInput} for command's `input` shape.
        * @see {@link DeleteElasticsearchServiceRoleCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class DeleteElasticsearchServiceRoleCommand extends $Command<DeleteElasticsearchServiceRoleCommandInput, DeleteElasticsearchServiceRoleCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: DeleteElasticsearchServiceRoleCommandInput;
            constructor(input: DeleteElasticsearchServiceRoleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteElasticsearchServiceRoleCommandInput, DeleteElasticsearchServiceRoleCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DeleteInboundCrossClusterSearchConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { DeleteInboundCrossClusterSearchConnectionRequest, DeleteInboundCrossClusterSearchConnectionResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface DeleteInboundCrossClusterSearchConnectionCommandInput extends DeleteInboundCrossClusterSearchConnectionRequest {
    }
    export interface DeleteInboundCrossClusterSearchConnectionCommandOutput extends DeleteInboundCrossClusterSearchConnectionResponse, __MetadataBearer {
    }
    /**
        * <p>Allows the destination domain owner to delete an existing inbound cross-cluster search connection.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, DeleteInboundCrossClusterSearchConnectionCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, DeleteInboundCrossClusterSearchConnectionCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new DeleteInboundCrossClusterSearchConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteInboundCrossClusterSearchConnectionCommandInput} for command's `input` shape.
        * @see {@link DeleteInboundCrossClusterSearchConnectionCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class DeleteInboundCrossClusterSearchConnectionCommand extends $Command<DeleteInboundCrossClusterSearchConnectionCommandInput, DeleteInboundCrossClusterSearchConnectionCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: DeleteInboundCrossClusterSearchConnectionCommandInput;
            constructor(input: DeleteInboundCrossClusterSearchConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteInboundCrossClusterSearchConnectionCommandInput, DeleteInboundCrossClusterSearchConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DeleteOutboundCrossClusterSearchConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { DeleteOutboundCrossClusterSearchConnectionRequest, DeleteOutboundCrossClusterSearchConnectionResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface DeleteOutboundCrossClusterSearchConnectionCommandInput extends DeleteOutboundCrossClusterSearchConnectionRequest {
    }
    export interface DeleteOutboundCrossClusterSearchConnectionCommandOutput extends DeleteOutboundCrossClusterSearchConnectionResponse, __MetadataBearer {
    }
    /**
        * <p>Allows the source domain owner to delete an existing outbound cross-cluster search connection.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, DeleteOutboundCrossClusterSearchConnectionCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, DeleteOutboundCrossClusterSearchConnectionCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new DeleteOutboundCrossClusterSearchConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteOutboundCrossClusterSearchConnectionCommandInput} for command's `input` shape.
        * @see {@link DeleteOutboundCrossClusterSearchConnectionCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class DeleteOutboundCrossClusterSearchConnectionCommand extends $Command<DeleteOutboundCrossClusterSearchConnectionCommandInput, DeleteOutboundCrossClusterSearchConnectionCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: DeleteOutboundCrossClusterSearchConnectionCommandInput;
            constructor(input: DeleteOutboundCrossClusterSearchConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteOutboundCrossClusterSearchConnectionCommandInput, DeleteOutboundCrossClusterSearchConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DeletePackageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { DeletePackageRequest, DeletePackageResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface DeletePackageCommandInput extends DeletePackageRequest {
    }
    export interface DeletePackageCommandOutput extends DeletePackageResponse, __MetadataBearer {
    }
    /**
        * <p>Delete the package.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, DeletePackageCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, DeletePackageCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new DeletePackageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePackageCommandInput} for command's `input` shape.
        * @see {@link DeletePackageCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class DeletePackageCommand extends $Command<DeletePackageCommandInput, DeletePackageCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: DeletePackageCommandInput;
            constructor(input: DeletePackageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePackageCommandInput, DeletePackageCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeDomainAutoTunesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { DescribeDomainAutoTunesRequest, DescribeDomainAutoTunesResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface DescribeDomainAutoTunesCommandInput extends DescribeDomainAutoTunesRequest {
    }
    export interface DescribeDomainAutoTunesCommandOutput extends DescribeDomainAutoTunesResponse, __MetadataBearer {
    }
    /**
        * <p>Provides scheduled Auto-Tune action details for the Elasticsearch domain, such as Auto-Tune action type, description, severity, and scheduled date.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, DescribeDomainAutoTunesCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, DescribeDomainAutoTunesCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new DescribeDomainAutoTunesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDomainAutoTunesCommandInput} for command's `input` shape.
        * @see {@link DescribeDomainAutoTunesCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class DescribeDomainAutoTunesCommand extends $Command<DescribeDomainAutoTunesCommandInput, DescribeDomainAutoTunesCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: DescribeDomainAutoTunesCommandInput;
            constructor(input: DescribeDomainAutoTunesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDomainAutoTunesCommandInput, DescribeDomainAutoTunesCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeDomainChangeProgressCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { DescribeDomainChangeProgressRequest, DescribeDomainChangeProgressResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface DescribeDomainChangeProgressCommandInput extends DescribeDomainChangeProgressRequest {
    }
    export interface DescribeDomainChangeProgressCommandOutput extends DescribeDomainChangeProgressResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the current blue/green deployment happening on a domain, including
        *         a change ID, status, and progress stages.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, DescribeDomainChangeProgressCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, DescribeDomainChangeProgressCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new DescribeDomainChangeProgressCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDomainChangeProgressCommandInput} for command's `input` shape.
        * @see {@link DescribeDomainChangeProgressCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class DescribeDomainChangeProgressCommand extends $Command<DescribeDomainChangeProgressCommandInput, DescribeDomainChangeProgressCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: DescribeDomainChangeProgressCommandInput;
            constructor(input: DescribeDomainChangeProgressCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDomainChangeProgressCommandInput, DescribeDomainChangeProgressCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeElasticsearchDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { DescribeElasticsearchDomainRequest, DescribeElasticsearchDomainResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface DescribeElasticsearchDomainCommandInput extends DescribeElasticsearchDomainRequest {
    }
    export interface DescribeElasticsearchDomainCommandOutput extends DescribeElasticsearchDomainResponse, __MetadataBearer {
    }
    /**
        * <p>Returns domain configuration information about the specified Elasticsearch domain, including the domain ID, domain endpoint, and domain ARN.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, DescribeElasticsearchDomainCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, DescribeElasticsearchDomainCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new DescribeElasticsearchDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeElasticsearchDomainCommandInput} for command's `input` shape.
        * @see {@link DescribeElasticsearchDomainCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class DescribeElasticsearchDomainCommand extends $Command<DescribeElasticsearchDomainCommandInput, DescribeElasticsearchDomainCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: DescribeElasticsearchDomainCommandInput;
            constructor(input: DescribeElasticsearchDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeElasticsearchDomainCommandInput, DescribeElasticsearchDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeElasticsearchDomainConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { DescribeElasticsearchDomainConfigRequest, DescribeElasticsearchDomainConfigResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface DescribeElasticsearchDomainConfigCommandInput extends DescribeElasticsearchDomainConfigRequest {
    }
    export interface DescribeElasticsearchDomainConfigCommandOutput extends DescribeElasticsearchDomainConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Provides cluster configuration information about the specified Elasticsearch domain, such as the state, creation date, update version, and update date for cluster options.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, DescribeElasticsearchDomainConfigCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, DescribeElasticsearchDomainConfigCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new DescribeElasticsearchDomainConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeElasticsearchDomainConfigCommandInput} for command's `input` shape.
        * @see {@link DescribeElasticsearchDomainConfigCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class DescribeElasticsearchDomainConfigCommand extends $Command<DescribeElasticsearchDomainConfigCommandInput, DescribeElasticsearchDomainConfigCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: DescribeElasticsearchDomainConfigCommandInput;
            constructor(input: DescribeElasticsearchDomainConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeElasticsearchDomainConfigCommandInput, DescribeElasticsearchDomainConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeElasticsearchDomainsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { DescribeElasticsearchDomainsRequest, DescribeElasticsearchDomainsResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface DescribeElasticsearchDomainsCommandInput extends DescribeElasticsearchDomainsRequest {
    }
    export interface DescribeElasticsearchDomainsCommandOutput extends DescribeElasticsearchDomainsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns domain configuration information about the specified Elasticsearch domains, including the domain ID, domain endpoint, and domain ARN.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, DescribeElasticsearchDomainsCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, DescribeElasticsearchDomainsCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new DescribeElasticsearchDomainsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeElasticsearchDomainsCommandInput} for command's `input` shape.
        * @see {@link DescribeElasticsearchDomainsCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class DescribeElasticsearchDomainsCommand extends $Command<DescribeElasticsearchDomainsCommandInput, DescribeElasticsearchDomainsCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: DescribeElasticsearchDomainsCommandInput;
            constructor(input: DescribeElasticsearchDomainsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeElasticsearchDomainsCommandInput, DescribeElasticsearchDomainsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeElasticsearchInstanceTypeLimitsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { DescribeElasticsearchInstanceTypeLimitsRequest, DescribeElasticsearchInstanceTypeLimitsResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface DescribeElasticsearchInstanceTypeLimitsCommandInput extends DescribeElasticsearchInstanceTypeLimitsRequest {
    }
    export interface DescribeElasticsearchInstanceTypeLimitsCommandOutput extends DescribeElasticsearchInstanceTypeLimitsResponse, __MetadataBearer {
    }
    /**
        * <p>
        *     Describe Elasticsearch Limits for a given InstanceType and ElasticsearchVersion.
        *     When modifying existing Domain, specify the
        *     <code>
        *       <a>DomainName</a>
        *     </code>
        *     to know what Limits are supported for modifying.
        *   </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, DescribeElasticsearchInstanceTypeLimitsCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, DescribeElasticsearchInstanceTypeLimitsCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new DescribeElasticsearchInstanceTypeLimitsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeElasticsearchInstanceTypeLimitsCommandInput} for command's `input` shape.
        * @see {@link DescribeElasticsearchInstanceTypeLimitsCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class DescribeElasticsearchInstanceTypeLimitsCommand extends $Command<DescribeElasticsearchInstanceTypeLimitsCommandInput, DescribeElasticsearchInstanceTypeLimitsCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: DescribeElasticsearchInstanceTypeLimitsCommandInput;
            constructor(input: DescribeElasticsearchInstanceTypeLimitsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeElasticsearchInstanceTypeLimitsCommandInput, DescribeElasticsearchInstanceTypeLimitsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeInboundCrossClusterSearchConnectionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { DescribeInboundCrossClusterSearchConnectionsRequest, DescribeInboundCrossClusterSearchConnectionsResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface DescribeInboundCrossClusterSearchConnectionsCommandInput extends DescribeInboundCrossClusterSearchConnectionsRequest {
    }
    export interface DescribeInboundCrossClusterSearchConnectionsCommandOutput extends DescribeInboundCrossClusterSearchConnectionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all the inbound cross-cluster search connections for a destination domain.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, DescribeInboundCrossClusterSearchConnectionsCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, DescribeInboundCrossClusterSearchConnectionsCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new DescribeInboundCrossClusterSearchConnectionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeInboundCrossClusterSearchConnectionsCommandInput} for command's `input` shape.
        * @see {@link DescribeInboundCrossClusterSearchConnectionsCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class DescribeInboundCrossClusterSearchConnectionsCommand extends $Command<DescribeInboundCrossClusterSearchConnectionsCommandInput, DescribeInboundCrossClusterSearchConnectionsCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: DescribeInboundCrossClusterSearchConnectionsCommandInput;
            constructor(input: DescribeInboundCrossClusterSearchConnectionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeInboundCrossClusterSearchConnectionsCommandInput, DescribeInboundCrossClusterSearchConnectionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeOutboundCrossClusterSearchConnectionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { DescribeOutboundCrossClusterSearchConnectionsRequest, DescribeOutboundCrossClusterSearchConnectionsResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface DescribeOutboundCrossClusterSearchConnectionsCommandInput extends DescribeOutboundCrossClusterSearchConnectionsRequest {
    }
    export interface DescribeOutboundCrossClusterSearchConnectionsCommandOutput extends DescribeOutboundCrossClusterSearchConnectionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all the outbound cross-cluster search connections for a source domain.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, DescribeOutboundCrossClusterSearchConnectionsCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, DescribeOutboundCrossClusterSearchConnectionsCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new DescribeOutboundCrossClusterSearchConnectionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeOutboundCrossClusterSearchConnectionsCommandInput} for command's `input` shape.
        * @see {@link DescribeOutboundCrossClusterSearchConnectionsCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class DescribeOutboundCrossClusterSearchConnectionsCommand extends $Command<DescribeOutboundCrossClusterSearchConnectionsCommandInput, DescribeOutboundCrossClusterSearchConnectionsCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: DescribeOutboundCrossClusterSearchConnectionsCommandInput;
            constructor(input: DescribeOutboundCrossClusterSearchConnectionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeOutboundCrossClusterSearchConnectionsCommandInput, DescribeOutboundCrossClusterSearchConnectionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribePackagesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { DescribePackagesRequest, DescribePackagesResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface DescribePackagesCommandInput extends DescribePackagesRequest {
    }
    export interface DescribePackagesCommandOutput extends DescribePackagesResponse, __MetadataBearer {
    }
    /**
        * <p>Describes all packages available to Amazon ES. Includes options for filtering, limiting the number of results, and pagination.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, DescribePackagesCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, DescribePackagesCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new DescribePackagesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePackagesCommandInput} for command's `input` shape.
        * @see {@link DescribePackagesCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class DescribePackagesCommand extends $Command<DescribePackagesCommandInput, DescribePackagesCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: DescribePackagesCommandInput;
            constructor(input: DescribePackagesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePackagesCommandInput, DescribePackagesCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeReservedElasticsearchInstanceOfferingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { DescribeReservedElasticsearchInstanceOfferingsRequest, DescribeReservedElasticsearchInstanceOfferingsResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface DescribeReservedElasticsearchInstanceOfferingsCommandInput extends DescribeReservedElasticsearchInstanceOfferingsRequest {
    }
    export interface DescribeReservedElasticsearchInstanceOfferingsCommandOutput extends DescribeReservedElasticsearchInstanceOfferingsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists available reserved Elasticsearch instance offerings.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, DescribeReservedElasticsearchInstanceOfferingsCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, DescribeReservedElasticsearchInstanceOfferingsCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new DescribeReservedElasticsearchInstanceOfferingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeReservedElasticsearchInstanceOfferingsCommandInput} for command's `input` shape.
        * @see {@link DescribeReservedElasticsearchInstanceOfferingsCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class DescribeReservedElasticsearchInstanceOfferingsCommand extends $Command<DescribeReservedElasticsearchInstanceOfferingsCommandInput, DescribeReservedElasticsearchInstanceOfferingsCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: DescribeReservedElasticsearchInstanceOfferingsCommandInput;
            constructor(input: DescribeReservedElasticsearchInstanceOfferingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeReservedElasticsearchInstanceOfferingsCommandInput, DescribeReservedElasticsearchInstanceOfferingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeReservedElasticsearchInstancesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { DescribeReservedElasticsearchInstancesRequest, DescribeReservedElasticsearchInstancesResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface DescribeReservedElasticsearchInstancesCommandInput extends DescribeReservedElasticsearchInstancesRequest {
    }
    export interface DescribeReservedElasticsearchInstancesCommandOutput extends DescribeReservedElasticsearchInstancesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about reserved Elasticsearch instances for this account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, DescribeReservedElasticsearchInstancesCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, DescribeReservedElasticsearchInstancesCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new DescribeReservedElasticsearchInstancesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeReservedElasticsearchInstancesCommandInput} for command's `input` shape.
        * @see {@link DescribeReservedElasticsearchInstancesCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class DescribeReservedElasticsearchInstancesCommand extends $Command<DescribeReservedElasticsearchInstancesCommandInput, DescribeReservedElasticsearchInstancesCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: DescribeReservedElasticsearchInstancesCommandInput;
            constructor(input: DescribeReservedElasticsearchInstancesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeReservedElasticsearchInstancesCommandInput, DescribeReservedElasticsearchInstancesCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DissociatePackageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { DissociatePackageRequest, DissociatePackageResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface DissociatePackageCommandInput extends DissociatePackageRequest {
    }
    export interface DissociatePackageCommandOutput extends DissociatePackageResponse, __MetadataBearer {
    }
    /**
        * <p>Dissociates a package from the Amazon ES domain.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, DissociatePackageCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, DissociatePackageCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new DissociatePackageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DissociatePackageCommandInput} for command's `input` shape.
        * @see {@link DissociatePackageCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class DissociatePackageCommand extends $Command<DissociatePackageCommandInput, DissociatePackageCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: DissociatePackageCommandInput;
            constructor(input: DissociatePackageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DissociatePackageCommandInput, DissociatePackageCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/GetCompatibleElasticsearchVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { GetCompatibleElasticsearchVersionsRequest, GetCompatibleElasticsearchVersionsResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface GetCompatibleElasticsearchVersionsCommandInput extends GetCompatibleElasticsearchVersionsRequest {
    }
    export interface GetCompatibleElasticsearchVersionsCommandOutput extends GetCompatibleElasticsearchVersionsResponse, __MetadataBearer {
    }
    /**
        * <p>
        *         Returns a list of upgrade compatible Elastisearch versions.
        *         You can optionally pass a
        *         <code>
        *           <a>DomainName</a>
        *         </code>
        *         to get all upgrade compatible Elasticsearch versions for that specific domain.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, GetCompatibleElasticsearchVersionsCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, GetCompatibleElasticsearchVersionsCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new GetCompatibleElasticsearchVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCompatibleElasticsearchVersionsCommandInput} for command's `input` shape.
        * @see {@link GetCompatibleElasticsearchVersionsCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class GetCompatibleElasticsearchVersionsCommand extends $Command<GetCompatibleElasticsearchVersionsCommandInput, GetCompatibleElasticsearchVersionsCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: GetCompatibleElasticsearchVersionsCommandInput;
            constructor(input: GetCompatibleElasticsearchVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCompatibleElasticsearchVersionsCommandInput, GetCompatibleElasticsearchVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/GetPackageVersionHistoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { GetPackageVersionHistoryRequest, GetPackageVersionHistoryResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface GetPackageVersionHistoryCommandInput extends GetPackageVersionHistoryRequest {
    }
    export interface GetPackageVersionHistoryCommandOutput extends GetPackageVersionHistoryResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of versions of the package, along with their creation time and commit message.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, GetPackageVersionHistoryCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, GetPackageVersionHistoryCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new GetPackageVersionHistoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPackageVersionHistoryCommandInput} for command's `input` shape.
        * @see {@link GetPackageVersionHistoryCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class GetPackageVersionHistoryCommand extends $Command<GetPackageVersionHistoryCommandInput, GetPackageVersionHistoryCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: GetPackageVersionHistoryCommandInput;
            constructor(input: GetPackageVersionHistoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPackageVersionHistoryCommandInput, GetPackageVersionHistoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/GetUpgradeHistoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { GetUpgradeHistoryRequest, GetUpgradeHistoryResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface GetUpgradeHistoryCommandInput extends GetUpgradeHistoryRequest {
    }
    export interface GetUpgradeHistoryCommandOutput extends GetUpgradeHistoryResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the complete history of the last 10 upgrades that were performed on the domain.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, GetUpgradeHistoryCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, GetUpgradeHistoryCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new GetUpgradeHistoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetUpgradeHistoryCommandInput} for command's `input` shape.
        * @see {@link GetUpgradeHistoryCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class GetUpgradeHistoryCommand extends $Command<GetUpgradeHistoryCommandInput, GetUpgradeHistoryCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: GetUpgradeHistoryCommandInput;
            constructor(input: GetUpgradeHistoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetUpgradeHistoryCommandInput, GetUpgradeHistoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/GetUpgradeStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { GetUpgradeStatusRequest, GetUpgradeStatusResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface GetUpgradeStatusCommandInput extends GetUpgradeStatusRequest {
    }
    export interface GetUpgradeStatusCommandOutput extends GetUpgradeStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the latest status of the last upgrade or upgrade eligibility check that was performed on the domain.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, GetUpgradeStatusCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, GetUpgradeStatusCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new GetUpgradeStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetUpgradeStatusCommandInput} for command's `input` shape.
        * @see {@link GetUpgradeStatusCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class GetUpgradeStatusCommand extends $Command<GetUpgradeStatusCommandInput, GetUpgradeStatusCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: GetUpgradeStatusCommandInput;
            constructor(input: GetUpgradeStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetUpgradeStatusCommandInput, GetUpgradeStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/ListDomainNamesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { ListDomainNamesRequest, ListDomainNamesResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface ListDomainNamesCommandInput extends ListDomainNamesRequest {
    }
    export interface ListDomainNamesCommandOutput extends ListDomainNamesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the name of all Elasticsearch domains owned by the current user's account. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, ListDomainNamesCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, ListDomainNamesCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new ListDomainNamesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDomainNamesCommandInput} for command's `input` shape.
        * @see {@link ListDomainNamesCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class ListDomainNamesCommand extends $Command<ListDomainNamesCommandInput, ListDomainNamesCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: ListDomainNamesCommandInput;
            constructor(input: ListDomainNamesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDomainNamesCommandInput, ListDomainNamesCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/ListDomainsForPackageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { ListDomainsForPackageRequest, ListDomainsForPackageResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface ListDomainsForPackageCommandInput extends ListDomainsForPackageRequest {
    }
    export interface ListDomainsForPackageCommandOutput extends ListDomainsForPackageResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all Amazon ES domains associated with the package.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, ListDomainsForPackageCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, ListDomainsForPackageCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new ListDomainsForPackageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDomainsForPackageCommandInput} for command's `input` shape.
        * @see {@link ListDomainsForPackageCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class ListDomainsForPackageCommand extends $Command<ListDomainsForPackageCommandInput, ListDomainsForPackageCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: ListDomainsForPackageCommandInput;
            constructor(input: ListDomainsForPackageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDomainsForPackageCommandInput, ListDomainsForPackageCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/ListElasticsearchInstanceTypesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { ListElasticsearchInstanceTypesRequest, ListElasticsearchInstanceTypesResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface ListElasticsearchInstanceTypesCommandInput extends ListElasticsearchInstanceTypesRequest {
    }
    export interface ListElasticsearchInstanceTypesCommandOutput extends ListElasticsearchInstanceTypesResponse, __MetadataBearer {
    }
    /**
        * <p>List all Elasticsearch instance types that are supported for given ElasticsearchVersion</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, ListElasticsearchInstanceTypesCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, ListElasticsearchInstanceTypesCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new ListElasticsearchInstanceTypesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListElasticsearchInstanceTypesCommandInput} for command's `input` shape.
        * @see {@link ListElasticsearchInstanceTypesCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class ListElasticsearchInstanceTypesCommand extends $Command<ListElasticsearchInstanceTypesCommandInput, ListElasticsearchInstanceTypesCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: ListElasticsearchInstanceTypesCommandInput;
            constructor(input: ListElasticsearchInstanceTypesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListElasticsearchInstanceTypesCommandInput, ListElasticsearchInstanceTypesCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/ListElasticsearchVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { ListElasticsearchVersionsRequest, ListElasticsearchVersionsResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface ListElasticsearchVersionsCommandInput extends ListElasticsearchVersionsRequest {
    }
    export interface ListElasticsearchVersionsCommandOutput extends ListElasticsearchVersionsResponse, __MetadataBearer {
    }
    /**
        * <p>List all supported Elasticsearch versions</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, ListElasticsearchVersionsCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, ListElasticsearchVersionsCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new ListElasticsearchVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListElasticsearchVersionsCommandInput} for command's `input` shape.
        * @see {@link ListElasticsearchVersionsCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class ListElasticsearchVersionsCommand extends $Command<ListElasticsearchVersionsCommandInput, ListElasticsearchVersionsCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: ListElasticsearchVersionsCommandInput;
            constructor(input: ListElasticsearchVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListElasticsearchVersionsCommandInput, ListElasticsearchVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/ListPackagesForDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { ListPackagesForDomainRequest, ListPackagesForDomainResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface ListPackagesForDomainCommandInput extends ListPackagesForDomainRequest {
    }
    export interface ListPackagesForDomainCommandOutput extends ListPackagesForDomainResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all packages associated with the Amazon ES domain.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, ListPackagesForDomainCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, ListPackagesForDomainCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new ListPackagesForDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPackagesForDomainCommandInput} for command's `input` shape.
        * @see {@link ListPackagesForDomainCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class ListPackagesForDomainCommand extends $Command<ListPackagesForDomainCommandInput, ListPackagesForDomainCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: ListPackagesForDomainCommandInput;
            constructor(input: ListPackagesForDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPackagesForDomainCommandInput, ListPackagesForDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/ListTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { ListTagsRequest, ListTagsResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface ListTagsCommandInput extends ListTagsRequest {
    }
    export interface ListTagsCommandOutput extends ListTagsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns all tags for the given Elasticsearch domain.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, ListTagsCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, ListTagsCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new ListTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsCommandInput} for command's `input` shape.
        * @see {@link ListTagsCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class ListTagsCommand extends $Command<ListTagsCommandInput, ListTagsCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: ListTagsCommandInput;
            constructor(input: ListTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsCommandInput, ListTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/PurchaseReservedElasticsearchInstanceOfferingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { PurchaseReservedElasticsearchInstanceOfferingRequest, PurchaseReservedElasticsearchInstanceOfferingResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface PurchaseReservedElasticsearchInstanceOfferingCommandInput extends PurchaseReservedElasticsearchInstanceOfferingRequest {
    }
    export interface PurchaseReservedElasticsearchInstanceOfferingCommandOutput extends PurchaseReservedElasticsearchInstanceOfferingResponse, __MetadataBearer {
    }
    /**
        * <p>Allows you to purchase reserved Elasticsearch instances.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, PurchaseReservedElasticsearchInstanceOfferingCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, PurchaseReservedElasticsearchInstanceOfferingCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new PurchaseReservedElasticsearchInstanceOfferingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PurchaseReservedElasticsearchInstanceOfferingCommandInput} for command's `input` shape.
        * @see {@link PurchaseReservedElasticsearchInstanceOfferingCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class PurchaseReservedElasticsearchInstanceOfferingCommand extends $Command<PurchaseReservedElasticsearchInstanceOfferingCommandInput, PurchaseReservedElasticsearchInstanceOfferingCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: PurchaseReservedElasticsearchInstanceOfferingCommandInput;
            constructor(input: PurchaseReservedElasticsearchInstanceOfferingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PurchaseReservedElasticsearchInstanceOfferingCommandInput, PurchaseReservedElasticsearchInstanceOfferingCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/RejectInboundCrossClusterSearchConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { RejectInboundCrossClusterSearchConnectionRequest, RejectInboundCrossClusterSearchConnectionResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface RejectInboundCrossClusterSearchConnectionCommandInput extends RejectInboundCrossClusterSearchConnectionRequest {
    }
    export interface RejectInboundCrossClusterSearchConnectionCommandOutput extends RejectInboundCrossClusterSearchConnectionResponse, __MetadataBearer {
    }
    /**
        * <p>Allows the destination domain owner to reject an inbound cross-cluster search connection request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, RejectInboundCrossClusterSearchConnectionCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, RejectInboundCrossClusterSearchConnectionCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new RejectInboundCrossClusterSearchConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RejectInboundCrossClusterSearchConnectionCommandInput} for command's `input` shape.
        * @see {@link RejectInboundCrossClusterSearchConnectionCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class RejectInboundCrossClusterSearchConnectionCommand extends $Command<RejectInboundCrossClusterSearchConnectionCommandInput, RejectInboundCrossClusterSearchConnectionCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: RejectInboundCrossClusterSearchConnectionCommandInput;
            constructor(input: RejectInboundCrossClusterSearchConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RejectInboundCrossClusterSearchConnectionCommandInput, RejectInboundCrossClusterSearchConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/RemoveTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { RemoveTagsRequest } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface RemoveTagsCommandInput extends RemoveTagsRequest {
    }
    export interface RemoveTagsCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the specified set of tags from the specified Elasticsearch domain.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, RemoveTagsCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, RemoveTagsCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new RemoveTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveTagsCommandInput} for command's `input` shape.
        * @see {@link RemoveTagsCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class RemoveTagsCommand extends $Command<RemoveTagsCommandInput, RemoveTagsCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: RemoveTagsCommandInput;
            constructor(input: RemoveTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveTagsCommandInput, RemoveTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/StartElasticsearchServiceSoftwareUpdateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { StartElasticsearchServiceSoftwareUpdateRequest, StartElasticsearchServiceSoftwareUpdateResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface StartElasticsearchServiceSoftwareUpdateCommandInput extends StartElasticsearchServiceSoftwareUpdateRequest {
    }
    export interface StartElasticsearchServiceSoftwareUpdateCommandOutput extends StartElasticsearchServiceSoftwareUpdateResponse, __MetadataBearer {
    }
    /**
        * <p>Schedules a service software update for an Amazon ES domain.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, StartElasticsearchServiceSoftwareUpdateCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, StartElasticsearchServiceSoftwareUpdateCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new StartElasticsearchServiceSoftwareUpdateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartElasticsearchServiceSoftwareUpdateCommandInput} for command's `input` shape.
        * @see {@link StartElasticsearchServiceSoftwareUpdateCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class StartElasticsearchServiceSoftwareUpdateCommand extends $Command<StartElasticsearchServiceSoftwareUpdateCommandInput, StartElasticsearchServiceSoftwareUpdateCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: StartElasticsearchServiceSoftwareUpdateCommandInput;
            constructor(input: StartElasticsearchServiceSoftwareUpdateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartElasticsearchServiceSoftwareUpdateCommandInput, StartElasticsearchServiceSoftwareUpdateCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/UpdateElasticsearchDomainConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { UpdateElasticsearchDomainConfigRequest, UpdateElasticsearchDomainConfigResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface UpdateElasticsearchDomainConfigCommandInput extends UpdateElasticsearchDomainConfigRequest {
    }
    export interface UpdateElasticsearchDomainConfigCommandOutput extends UpdateElasticsearchDomainConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Modifies the cluster configuration of the specified Elasticsearch domain, setting as setting the instance type and the number of instances. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, UpdateElasticsearchDomainConfigCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, UpdateElasticsearchDomainConfigCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new UpdateElasticsearchDomainConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateElasticsearchDomainConfigCommandInput} for command's `input` shape.
        * @see {@link UpdateElasticsearchDomainConfigCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class UpdateElasticsearchDomainConfigCommand extends $Command<UpdateElasticsearchDomainConfigCommandInput, UpdateElasticsearchDomainConfigCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: UpdateElasticsearchDomainConfigCommandInput;
            constructor(input: UpdateElasticsearchDomainConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateElasticsearchDomainConfigCommandInput, UpdateElasticsearchDomainConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/UpdatePackageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { UpdatePackageRequest, UpdatePackageResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface UpdatePackageCommandInput extends UpdatePackageRequest {
    }
    export interface UpdatePackageCommandOutput extends UpdatePackageResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a package for use with Amazon ES domains.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, UpdatePackageCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, UpdatePackageCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new UpdatePackageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdatePackageCommandInput} for command's `input` shape.
        * @see {@link UpdatePackageCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class UpdatePackageCommand extends $Command<UpdatePackageCommandInput, UpdatePackageCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: UpdatePackageCommandInput;
            constructor(input: UpdatePackageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdatePackageCommandInput, UpdatePackageCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/UpgradeElasticsearchDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticsearchServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient";
    import { UpgradeElasticsearchDomainRequest, UpgradeElasticsearchDomainResponse } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0";
    export interface UpgradeElasticsearchDomainCommandInput extends UpgradeElasticsearchDomainRequest {
    }
    export interface UpgradeElasticsearchDomainCommandOutput extends UpgradeElasticsearchDomainResponse, __MetadataBearer {
    }
    /**
        * <p>Allows you to either upgrade your domain or perform an Upgrade eligibility check to a compatible Elasticsearch version.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticsearchServiceClient, UpgradeElasticsearchDomainCommand } from "@aws-sdk/client-elasticsearch-service"; // ES Modules import
        * // const { ElasticsearchServiceClient, UpgradeElasticsearchDomainCommand } = require("@aws-sdk/client-elasticsearch-service"); // CommonJS import
        * const client = new ElasticsearchServiceClient(config);
        * const command = new UpgradeElasticsearchDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpgradeElasticsearchDomainCommandInput} for command's `input` shape.
        * @see {@link UpgradeElasticsearchDomainCommandOutput} for command's `response` shape.
        * @see {@link ElasticsearchServiceClientResolvedConfig | config} for ElasticsearchServiceClient's `config` shape.
        *
        */
    export class UpgradeElasticsearchDomainCommand extends $Command<UpgradeElasticsearchDomainCommandInput, UpgradeElasticsearchDomainCommandOutput, ElasticsearchServiceClientResolvedConfig> {
            readonly input: UpgradeElasticsearchDomainCommandInput;
            constructor(input: UpgradeElasticsearchDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticsearchServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpgradeElasticsearchDomainCommandInput, UpgradeElasticsearchDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/ElasticsearchServiceClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AcceptInboundCrossClusterSearchConnectionCommandInput, AcceptInboundCrossClusterSearchConnectionCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/AcceptInboundCrossClusterSearchConnectionCommand";
    import { AddTagsCommandInput, AddTagsCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/AddTagsCommand";
    import { AssociatePackageCommandInput, AssociatePackageCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/AssociatePackageCommand";
    import { CancelElasticsearchServiceSoftwareUpdateCommandInput, CancelElasticsearchServiceSoftwareUpdateCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/CancelElasticsearchServiceSoftwareUpdateCommand";
    import { CreateElasticsearchDomainCommandInput, CreateElasticsearchDomainCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/CreateElasticsearchDomainCommand";
    import { CreateOutboundCrossClusterSearchConnectionCommandInput, CreateOutboundCrossClusterSearchConnectionCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/CreateOutboundCrossClusterSearchConnectionCommand";
    import { CreatePackageCommandInput, CreatePackageCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/CreatePackageCommand";
    import { DeleteElasticsearchDomainCommandInput, DeleteElasticsearchDomainCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DeleteElasticsearchDomainCommand";
    import { DeleteElasticsearchServiceRoleCommandInput, DeleteElasticsearchServiceRoleCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DeleteElasticsearchServiceRoleCommand";
    import { DeleteInboundCrossClusterSearchConnectionCommandInput, DeleteInboundCrossClusterSearchConnectionCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DeleteInboundCrossClusterSearchConnectionCommand";
    import { DeleteOutboundCrossClusterSearchConnectionCommandInput, DeleteOutboundCrossClusterSearchConnectionCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DeleteOutboundCrossClusterSearchConnectionCommand";
    import { DeletePackageCommandInput, DeletePackageCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DeletePackageCommand";
    import { DescribeDomainAutoTunesCommandInput, DescribeDomainAutoTunesCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeDomainAutoTunesCommand";
    import { DescribeDomainChangeProgressCommandInput, DescribeDomainChangeProgressCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeDomainChangeProgressCommand";
    import { DescribeElasticsearchDomainCommandInput, DescribeElasticsearchDomainCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeElasticsearchDomainCommand";
    import { DescribeElasticsearchDomainConfigCommandInput, DescribeElasticsearchDomainConfigCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeElasticsearchDomainConfigCommand";
    import { DescribeElasticsearchDomainsCommandInput, DescribeElasticsearchDomainsCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeElasticsearchDomainsCommand";
    import { DescribeElasticsearchInstanceTypeLimitsCommandInput, DescribeElasticsearchInstanceTypeLimitsCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeElasticsearchInstanceTypeLimitsCommand";
    import { DescribeInboundCrossClusterSearchConnectionsCommandInput, DescribeInboundCrossClusterSearchConnectionsCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeInboundCrossClusterSearchConnectionsCommand";
    import { DescribeOutboundCrossClusterSearchConnectionsCommandInput, DescribeOutboundCrossClusterSearchConnectionsCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeOutboundCrossClusterSearchConnectionsCommand";
    import { DescribePackagesCommandInput, DescribePackagesCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribePackagesCommand";
    import { DescribeReservedElasticsearchInstanceOfferingsCommandInput, DescribeReservedElasticsearchInstanceOfferingsCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeReservedElasticsearchInstanceOfferingsCommand";
    import { DescribeReservedElasticsearchInstancesCommandInput, DescribeReservedElasticsearchInstancesCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DescribeReservedElasticsearchInstancesCommand";
    import { DissociatePackageCommandInput, DissociatePackageCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/DissociatePackageCommand";
    import { GetCompatibleElasticsearchVersionsCommandInput, GetCompatibleElasticsearchVersionsCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/GetCompatibleElasticsearchVersionsCommand";
    import { GetPackageVersionHistoryCommandInput, GetPackageVersionHistoryCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/GetPackageVersionHistoryCommand";
    import { GetUpgradeHistoryCommandInput, GetUpgradeHistoryCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/GetUpgradeHistoryCommand";
    import { GetUpgradeStatusCommandInput, GetUpgradeStatusCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/GetUpgradeStatusCommand";
    import { ListDomainNamesCommandInput, ListDomainNamesCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/ListDomainNamesCommand";
    import { ListDomainsForPackageCommandInput, ListDomainsForPackageCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/ListDomainsForPackageCommand";
    import { ListElasticsearchInstanceTypesCommandInput, ListElasticsearchInstanceTypesCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/ListElasticsearchInstanceTypesCommand";
    import { ListElasticsearchVersionsCommandInput, ListElasticsearchVersionsCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/ListElasticsearchVersionsCommand";
    import { ListPackagesForDomainCommandInput, ListPackagesForDomainCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/ListPackagesForDomainCommand";
    import { ListTagsCommandInput, ListTagsCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/ListTagsCommand";
    import { PurchaseReservedElasticsearchInstanceOfferingCommandInput, PurchaseReservedElasticsearchInstanceOfferingCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/PurchaseReservedElasticsearchInstanceOfferingCommand";
    import { RejectInboundCrossClusterSearchConnectionCommandInput, RejectInboundCrossClusterSearchConnectionCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/RejectInboundCrossClusterSearchConnectionCommand";
    import { RemoveTagsCommandInput, RemoveTagsCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/RemoveTagsCommand";
    import { StartElasticsearchServiceSoftwareUpdateCommandInput, StartElasticsearchServiceSoftwareUpdateCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/StartElasticsearchServiceSoftwareUpdateCommand";
    import { UpdateElasticsearchDomainConfigCommandInput, UpdateElasticsearchDomainConfigCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/UpdateElasticsearchDomainConfigCommand";
    import { UpdatePackageCommandInput, UpdatePackageCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/UpdatePackageCommand";
    import { UpgradeElasticsearchDomainCommandInput, UpgradeElasticsearchDomainCommandOutput } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/commands/UpgradeElasticsearchDomainCommand";
    export type ServiceInputTypes = AcceptInboundCrossClusterSearchConnectionCommandInput | AddTagsCommandInput | AssociatePackageCommandInput | CancelElasticsearchServiceSoftwareUpdateCommandInput | CreateElasticsearchDomainCommandInput | CreateOutboundCrossClusterSearchConnectionCommandInput | CreatePackageCommandInput | DeleteElasticsearchDomainCommandInput | DeleteElasticsearchServiceRoleCommandInput | DeleteInboundCrossClusterSearchConnectionCommandInput | DeleteOutboundCrossClusterSearchConnectionCommandInput | DeletePackageCommandInput | DescribeDomainAutoTunesCommandInput | DescribeDomainChangeProgressCommandInput | DescribeElasticsearchDomainCommandInput | DescribeElasticsearchDomainConfigCommandInput | DescribeElasticsearchDomainsCommandInput | DescribeElasticsearchInstanceTypeLimitsCommandInput | DescribeInboundCrossClusterSearchConnectionsCommandInput | DescribeOutboundCrossClusterSearchConnectionsCommandInput | DescribePackagesCommandInput | DescribeReservedElasticsearchInstanceOfferingsCommandInput | DescribeReservedElasticsearchInstancesCommandInput | DissociatePackageCommandInput | GetCompatibleElasticsearchVersionsCommandInput | GetPackageVersionHistoryCommandInput | GetUpgradeHistoryCommandInput | GetUpgradeStatusCommandInput | ListDomainNamesCommandInput | ListDomainsForPackageCommandInput | ListElasticsearchInstanceTypesCommandInput | ListElasticsearchVersionsCommandInput | ListPackagesForDomainCommandInput | ListTagsCommandInput | PurchaseReservedElasticsearchInstanceOfferingCommandInput | RejectInboundCrossClusterSearchConnectionCommandInput | RemoveTagsCommandInput | StartElasticsearchServiceSoftwareUpdateCommandInput | UpdateElasticsearchDomainConfigCommandInput | UpdatePackageCommandInput | UpgradeElasticsearchDomainCommandInput;
    export type ServiceOutputTypes = AcceptInboundCrossClusterSearchConnectionCommandOutput | AddTagsCommandOutput | AssociatePackageCommandOutput | CancelElasticsearchServiceSoftwareUpdateCommandOutput | CreateElasticsearchDomainCommandOutput | CreateOutboundCrossClusterSearchConnectionCommandOutput | CreatePackageCommandOutput | DeleteElasticsearchDomainCommandOutput | DeleteElasticsearchServiceRoleCommandOutput | DeleteInboundCrossClusterSearchConnectionCommandOutput | DeleteOutboundCrossClusterSearchConnectionCommandOutput | DeletePackageCommandOutput | DescribeDomainAutoTunesCommandOutput | DescribeDomainChangeProgressCommandOutput | DescribeElasticsearchDomainCommandOutput | DescribeElasticsearchDomainConfigCommandOutput | DescribeElasticsearchDomainsCommandOutput | DescribeElasticsearchInstanceTypeLimitsCommandOutput | DescribeInboundCrossClusterSearchConnectionsCommandOutput | DescribeOutboundCrossClusterSearchConnectionsCommandOutput | DescribePackagesCommandOutput | DescribeReservedElasticsearchInstanceOfferingsCommandOutput | DescribeReservedElasticsearchInstancesCommandOutput | DissociatePackageCommandOutput | GetCompatibleElasticsearchVersionsCommandOutput | GetPackageVersionHistoryCommandOutput | GetUpgradeHistoryCommandOutput | GetUpgradeStatusCommandOutput | ListDomainNamesCommandOutput | ListDomainsForPackageCommandOutput | ListElasticsearchInstanceTypesCommandOutput | ListElasticsearchVersionsCommandOutput | ListPackagesForDomainCommandOutput | ListTagsCommandOutput | PurchaseReservedElasticsearchInstanceOfferingCommandOutput | RejectInboundCrossClusterSearchConnectionCommandOutput | RemoveTagsCommandOutput | StartElasticsearchServiceSoftwareUpdateCommandOutput | UpdateElasticsearchDomainConfigCommandOutput | UpdatePackageCommandOutput | UpgradeElasticsearchDomainCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type ElasticsearchServiceClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of ElasticsearchServiceClient class constructor that set the region, credentials and other options.
        */
    export interface ElasticsearchServiceClientConfig extends ElasticsearchServiceClientConfigType {
    }
    type ElasticsearchServiceClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of ElasticsearchServiceClient class. This is resolved and normalized from the {@link ElasticsearchServiceClientConfig | constructor configuration interface}.
        */
    export interface ElasticsearchServiceClientResolvedConfig extends ElasticsearchServiceClientResolvedConfigType {
    }
    /**
        * <fullname>Amazon Elasticsearch Configuration Service</fullname>
        *       <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p>
        *       <p>For sample code that uses the Configuration API, see the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html">Amazon Elasticsearch Service Developer Guide</a>.
        *       The guide also contains <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p>
        *       <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com.
        *          For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints,
        *          see <a href="http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions" target="_blank">Regions and Endpoints</a>.</p>
        */
    export class ElasticsearchServiceClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, ElasticsearchServiceClientResolvedConfig> {
            /**
                * The resolved configuration of ElasticsearchServiceClient class. This is resolved and normalized from the {@link ElasticsearchServiceClientConfig | constructor configuration interface}.
                */
            readonly config: ElasticsearchServiceClientResolvedConfig;
            constructor(configuration: ElasticsearchServiceClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { ElasticsearchServiceServiceException as __BaseException } from "@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/ElasticsearchServiceServiceException";
    /**
        * <p>Container for the parameters to the <code><a>AcceptInboundCrossClusterSearchConnection</a></code> operation.</p>
        */
    export interface AcceptInboundCrossClusterSearchConnectionRequest {
            /**
                * <p>The id of the inbound connection that you want to accept.</p>
                */
            CrossClusterSearchConnectionId: string | undefined;
    }
    export namespace AcceptInboundCrossClusterSearchConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AcceptInboundCrossClusterSearchConnectionRequest) => any;
    }
    export enum InboundCrossClusterSearchConnectionStatusCode {
            APPROVED = "APPROVED",
            DELETED = "DELETED",
            DELETING = "DELETING",
            PENDING_ACCEPTANCE = "PENDING_ACCEPTANCE",
            REJECTED = "REJECTED",
            REJECTING = "REJECTING"
    }
    /**
        * <p>Specifies the coonection status of an inbound cross-cluster search connection.</p>
        */
    export interface InboundCrossClusterSearchConnectionStatus {
            /**
                * <p>The state code for inbound connection. This can be one of the following:</p>
                *     <ul>
                *       <li>PENDING_ACCEPTANCE: Inbound connection is not yet accepted by destination domain owner.</li>
                *       <li>APPROVED: Inbound connection is pending acceptance by destination domain owner.</li>
                *       <li>REJECTING: Inbound connection rejection is in process.</li>
                *       <li>REJECTED: Inbound connection is rejected.</li>
                *       <li>DELETING: Inbound connection deletion is in progress.</li>
                *       <li>DELETED: Inbound connection is deleted and cannot be used further.</li>
                *     </ul>
                */
            StatusCode?: InboundCrossClusterSearchConnectionStatusCode | string;
            /**
                * <p>Specifies verbose information for the inbound connection status.</p>
                */
            Message?: string;
    }
    export namespace InboundCrossClusterSearchConnectionStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InboundCrossClusterSearchConnectionStatus) => any;
    }
    export interface DomainInformation {
            OwnerId?: string;
            /**
                * <p>The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
                */
            DomainName: string | undefined;
            Region?: string;
    }
    export namespace DomainInformation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainInformation) => any;
    }
    /**
        * <p>Specifies details of an inbound connection.</p>
        */
    export interface InboundCrossClusterSearchConnection {
            /**
                * <p>Specifies the <code><a>DomainInformation</a></code> for the source Elasticsearch domain.</p>
                */
            SourceDomainInfo?: DomainInformation;
            /**
                * <p>Specifies the <code><a>DomainInformation</a></code> for the destination Elasticsearch domain.</p>
                */
            DestinationDomainInfo?: DomainInformation;
            /**
                * <p>Specifies the connection id for the inbound cross-cluster search connection.</p>
                */
            CrossClusterSearchConnectionId?: string;
            /**
                * <p>Specifies the <code><a>InboundCrossClusterSearchConnectionStatus</a></code> for the outbound connection.</p>
                */
            ConnectionStatus?: InboundCrossClusterSearchConnectionStatus;
    }
    export namespace InboundCrossClusterSearchConnection {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InboundCrossClusterSearchConnection) => any;
    }
    /**
        * <p>The result of a <code><a>AcceptInboundCrossClusterSearchConnection</a></code> operation. Contains details of accepted inbound connection.</p>
        */
    export interface AcceptInboundCrossClusterSearchConnectionResponse {
            /**
                * <p>Specifies the <code><a>InboundCrossClusterSearchConnection</a></code> of accepted inbound connection. </p>
                */
            CrossClusterSearchConnection?: InboundCrossClusterSearchConnection;
    }
    export namespace AcceptInboundCrossClusterSearchConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AcceptInboundCrossClusterSearchConnectionResponse) => any;
    }
    /**
        * <p>An error occured because the client wanted to access a not supported operation. Gives http status code of 409.</p>
        */
    export class DisabledOperationException extends __BaseException {
            readonly name: "DisabledOperationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DisabledOperationException, __BaseException>);
    }
    /**
        * <p>An exception for trying to create more than allowed resources or sub-resources. Gives http status code of 409.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>An error occurred because user does not have permissions to access the resource. Returns HTTP status code 403.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    export type OptionState = "Active" | "Processing" | "RequiresIndexDocuments";
    /**
        * <p>Provides the current status of the entity.</p>
        */
    export interface OptionStatus {
            /**
                * <p>Timestamp which tells the creation date for the entity.</p>
                */
            CreationDate: Date | undefined;
            /**
                * <p>Timestamp which tells the last updated time for the entity.</p>
                */
            UpdateDate: Date | undefined;
            /**
                * <p>Specifies the latest version for the entity.</p>
                */
            UpdateVersion?: number;
            /**
                * <p>Provides the <code>OptionState</code> for the Elasticsearch domain.</p>
                */
            State: OptionState | string | undefined;
            /**
                * <p>Indicates whether the Elasticsearch domain is being deleted.</p>
                */
            PendingDeletion?: boolean;
    }
    export namespace OptionStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OptionStatus) => any;
    }
    /**
        * <p>The configured access rules for the domain's document and search endpoints, and the current status of those rules.</p>
        */
    export interface AccessPoliciesStatus {
            /**
                * <p>The access policy configured for the Elasticsearch domain.  Access policies may be resource-based, IP-based, or IAM-based.  See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-access-policies" target="_blank">
                *            Configuring Access Policies</a>for more information.</p>
                */
            Options: string | undefined;
            /**
                * <p>The status of the access policy for the Elasticsearch domain. See <code>OptionStatus</code> for the status information that's included. </p>
                */
            Status: OptionStatus | undefined;
    }
    export namespace AccessPoliciesStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccessPoliciesStatus) => any;
    }
    /**
        * <p>
        *       List of limits that are specific to a given InstanceType and for each of it's
        *       <code>
        *         <a>InstanceRole</a>
        *       </code>
        *       .
        *     </p>
        */
    export interface AdditionalLimit {
            /**
                * <p>
                *       Name of Additional Limit is specific to a given InstanceType and for each of it's
                *       <code>
                *         <a>InstanceRole</a>
                *       </code>
                *       etc.
                *       <br></br>
                *       Attributes and their details:
                *       <br></br>
                *       <ul>
                *         <li>MaximumNumberOfDataNodesSupported</li>
                *         This attribute will be present in Master node only to specify how
                *         much data nodes upto which given
                *         <code>
                *           <a>ESPartitionInstanceType</a>
                *         </code>
                *         can support as master node.
                *         <li>MaximumNumberOfDataNodesWithoutMasterNode</li>
                *         This attribute will be present in Data node only to specify how much
                *         data nodes of given
                *         <code>
                *           <a>ESPartitionInstanceType</a>
                *         </code>
                *         upto which you don't need any master nodes to govern them.
                *       </ul>
                *     </p>
                */
            LimitName?: string;
            /**
                * <p>
                *     Value for given
                *     <code>
                *       <a>AdditionalLimit$LimitName</a>
                *     </code>
                *     .
                *   </p>
                */
            LimitValues?: string[];
    }
    export namespace AdditionalLimit {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdditionalLimit) => any;
    }
    /**
        * <p>Specifies a key value pair for a resource tag.</p>
        */
    export interface Tag {
            /**
                * <p>Specifies the <code>TagKey</code>, the name of the tag.  Tag keys must be unique for the Elasticsearch domain to which they are attached.</p>
                */
            Key: string | undefined;
            /**
                * <p>Specifies the <code>TagValue</code>, the value assigned to the corresponding tag key.  Tag values can be null and do not have to be unique in a tag set.  For example, you can have a key value
                *        pair in a tag set of <code>project : Trinity</code> and <code>cost-center : Trinity</code></p>
                */
            Value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    /**
        * <p>Container for the parameters to the <code><a>AddTags</a></code> operation. Specify the tags that you want to attach to the Elasticsearch domain.</p>
        */
    export interface AddTagsRequest {
            /**
                * <p> Specify the <code>ARN</code> for which you want to add the tags.</p>
                */
            ARN: string | undefined;
            /**
                * <p> List of <code>Tag</code> that need to be added for the Elasticsearch domain. </p>
                */
            TagList: Tag[] | undefined;
    }
    export namespace AddTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddTagsRequest) => any;
    }
    /**
        * <p>An error occurred while processing the request.</p>
        */
    export class BaseException extends __BaseException {
            readonly name: "BaseException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BaseException, __BaseException>);
    }
    /**
        * <p>The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.</p>
        */
    export class InternalException extends __BaseException {
            readonly name: "InternalException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalException, __BaseException>);
    }
    /**
        * <p>An exception for missing / invalid input fields. Gives http status code of 400.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    /**
        * <p> Status of the advanced options for the specified Elasticsearch domain. Currently, the following advanced options are available:</p>
        *        <ul>
        *            <li>Option to allow references to indices in an HTTP request body.  Must be <code>false</code> when configuring access to individual sub-resources.  By default, the value is <code>true</code>.
        *                See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options" target="_blank">Configuration Advanced Options</a> for more information.</li>
        *            <li>Option to specify the percentage of heap space that is allocated to field data. By default, this setting is unbounded.</li>
        *        </ul>
        *        <p>For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options">Configuring Advanced Options</a>.</p>
        */
    export interface AdvancedOptionsStatus {
            /**
                * <p> Specifies the status of advanced options for the specified Elasticsearch domain.</p>
                */
            Options: Record<string, string> | undefined;
            /**
                * <p> Specifies the status of <code>OptionStatus</code> for advanced options for the specified Elasticsearch domain.</p>
                */
            Status: OptionStatus | undefined;
    }
    export namespace AdvancedOptionsStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdvancedOptionsStatus) => any;
    }
    /**
        * <p>Specifies the SAML Identity Provider's information.</p>
        */
    export interface SAMLIdp {
            /**
                * <p>The Metadata of the SAML application in xml format.</p>
                */
            MetadataContent: string | undefined;
            /**
                * <p>The unique Entity ID of the application in SAML Identity Provider.</p>
                */
            EntityId: string | undefined;
    }
    export namespace SAMLIdp {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SAMLIdp) => any;
    }
    /**
        * <p>Describes the SAML application configured for the domain.</p>
        */
    export interface SAMLOptionsOutput {
            /**
                * <p>True if SAML is enabled.</p>
                */
            Enabled?: boolean;
            /**
                * <p>Describes the SAML Identity Provider's information.</p>
                */
            Idp?: SAMLIdp;
            /**
                * <p>The key used for matching the SAML Subject attribute.</p>
                */
            SubjectKey?: string;
            /**
                * <p>The key used for matching the SAML Roles attribute.</p>
                */
            RolesKey?: string;
            /**
                * <p>The duration, in minutes, after which a user session becomes inactive.</p>
                */
            SessionTimeoutMinutes?: number;
    }
    export namespace SAMLOptionsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SAMLOptionsOutput) => any;
    }
    /**
        * <p>Specifies the advanced security configuration: whether advanced security is enabled, whether the internal database option is enabled.</p>
        */
    export interface AdvancedSecurityOptions {
            /**
                * <p>True if advanced security is enabled.</p>
                */
            Enabled?: boolean;
            /**
                * <p>True if the internal user database is enabled.</p>
                */
            InternalUserDatabaseEnabled?: boolean;
            /**
                * <p>Describes the SAML application configured for a domain.</p>
                */
            SAMLOptions?: SAMLOptionsOutput;
            /**
                * <p>Specifies the Anonymous Auth Disable Date when Anonymous Auth is enabled.</p>
                */
            AnonymousAuthDisableDate?: Date;
            /**
                * <p>True if Anonymous auth is enabled. Anonymous auth can be enabled only when AdvancedSecurity is enabled on existing domains.</p>
                */
            AnonymousAuthEnabled?: boolean;
    }
    export namespace AdvancedSecurityOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdvancedSecurityOptions) => any;
    }
    /**
        * <p>Credentials for the master user: username and password, ARN, or both.</p>
        */
    export interface MasterUserOptions {
            /**
                * <p>ARN for the master user (if IAM is enabled).</p>
                */
            MasterUserARN?: string;
            /**
                * <p>The master user's username, which is stored in the Amazon Elasticsearch Service domain's internal database.</p>
                */
            MasterUserName?: string;
            /**
                * <p>The master user's password, which is stored in the Amazon Elasticsearch Service domain's internal database.</p>
                */
            MasterUserPassword?: string;
    }
    export namespace MasterUserOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MasterUserOptions) => any;
    }
    /**
        * <p>Specifies the SAML application configuration for the domain.</p>
        */
    export interface SAMLOptionsInput {
            /**
                * <p>True if SAML is enabled.</p>
                */
            Enabled?: boolean;
            /**
                * <p>Specifies the SAML Identity Provider's information.</p>
                */
            Idp?: SAMLIdp;
            /**
                * <p>The SAML master username, which is stored in the Amazon Elasticsearch Service domain's internal database.</p>
                */
            MasterUserName?: string;
            /**
                * <p>The backend role to which the SAML master user is mapped to.</p>
                */
            MasterBackendRole?: string;
            /**
                * <p>The key to use for matching the SAML Subject attribute.</p>
                */
            SubjectKey?: string;
            /**
                * <p>The key to use for matching the SAML Roles attribute.</p>
                */
            RolesKey?: string;
            /**
                * <p>The duration, in minutes, after which a user session becomes inactive. Acceptable values are between 1 and 1440, and the default value is 60.</p>
                */
            SessionTimeoutMinutes?: number;
    }
    export namespace SAMLOptionsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SAMLOptionsInput) => any;
    }
    /**
        * <p>Specifies the advanced security configuration: whether advanced security is enabled, whether the internal database option is enabled, master username and password (if internal database is enabled), and master user ARN (if IAM is enabled).</p>
        */
    export interface AdvancedSecurityOptionsInput {
            /**
                * <p>True if advanced security is enabled.</p>
                */
            Enabled?: boolean;
            /**
                * <p>True if the internal user database is enabled.</p>
                */
            InternalUserDatabaseEnabled?: boolean;
            /**
                * <p>Credentials for the master user: username and password, ARN, or both.</p>
                */
            MasterUserOptions?: MasterUserOptions;
            /**
                * <p>Specifies the SAML application configuration for the domain.</p>
                */
            SAMLOptions?: SAMLOptionsInput;
            /**
                * <p>True if Anonymous auth is enabled. Anonymous auth can be enabled only when AdvancedSecurity is enabled on existing domains.</p>
                */
            AnonymousAuthEnabled?: boolean;
    }
    export namespace AdvancedSecurityOptionsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdvancedSecurityOptionsInput) => any;
    }
    /**
        * <p> Specifies the status of advanced security options for the specified Elasticsearch domain.</p>
        */
    export interface AdvancedSecurityOptionsStatus {
            /**
                * <p> Specifies advanced security options for the specified Elasticsearch domain.</p>
                */
            Options: AdvancedSecurityOptions | undefined;
            /**
                * <p> Status of the advanced security options for the specified Elasticsearch domain.</p>
                */
            Status: OptionStatus | undefined;
    }
    export namespace AdvancedSecurityOptionsStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdvancedSecurityOptionsStatus) => any;
    }
    /**
        * <p>
        *       Container for request parameters to
        *       <code>
        *         <a>AssociatePackage</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface AssociatePackageRequest {
            /**
                * <p>Internal ID of the package that you want to associate with a domain. Use <code>DescribePackages</code> to find this value.</p>
                */
            PackageID: string | undefined;
            /**
                * <p>Name of the domain that you want to associate the package with.</p>
                */
            DomainName: string | undefined;
    }
    export namespace AssociatePackageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociatePackageRequest) => any;
    }
    export type DomainPackageStatus = "ACTIVE" | "ASSOCIATING" | "ASSOCIATION_FAILED" | "DISSOCIATING" | "DISSOCIATION_FAILED";
    export interface ErrorDetails {
            ErrorType?: string;
            ErrorMessage?: string;
    }
    export namespace ErrorDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ErrorDetails) => any;
    }
    export type PackageType = "TXT-DICTIONARY";
    /**
        * <p>Information on a package that is associated with a domain.</p>
        */
    export interface DomainPackageDetails {
            /**
                * <p>Internal ID of the package.</p>
                */
            PackageID?: string;
            /**
                * <p>User specified name of the package.</p>
                */
            PackageName?: string;
            /**
                * <p>Currently supports only TXT-DICTIONARY.</p>
                */
            PackageType?: PackageType | string;
            /**
                * <p>Timestamp of the most-recent update to the association status.</p>
                */
            LastUpdated?: Date;
            /**
                * <p>Name of the domain you've associated a package with.</p>
                */
            DomainName?: string;
            /**
                * <p>State of the association. Values are ASSOCIATING/ASSOCIATION_FAILED/ACTIVE/DISSOCIATING/DISSOCIATION_FAILED.</p>
                */
            DomainPackageStatus?: DomainPackageStatus | string;
            PackageVersion?: string;
            /**
                * <p>The relative path on Amazon ES nodes, which can be used as synonym_path when the package is synonym file.</p>
                */
            ReferencePath?: string;
            /**
                * <p>Additional information if the package is in an error state. Null otherwise.</p>
                */
            ErrorDetails?: ErrorDetails;
    }
    export namespace DomainPackageDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainPackageDetails) => any;
    }
    /**
        * <p>
        *       Container for response returned by
        *       <code>
        *         <a>AssociatePackage</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface AssociatePackageResponse {
            /**
                * <p><code>DomainPackageDetails</code></p>
                */
            DomainPackageDetails?: DomainPackageDetails;
    }
    export namespace AssociatePackageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociatePackageResponse) => any;
    }
    /**
        * <p>An error occurred because the client attempts to remove a resource that is currently in use. Returns HTTP status code 409.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>Container for the parameters to the <code><a>CancelElasticsearchServiceSoftwareUpdate</a></code> operation. Specifies the name of the Elasticsearch domain that you wish to cancel a service software update on.</p>
        */
    export interface CancelElasticsearchServiceSoftwareUpdateRequest {
            /**
                * <p>The name of the domain that you want to stop the latest service software update on.</p>
                */
            DomainName: string | undefined;
    }
    export namespace CancelElasticsearchServiceSoftwareUpdateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelElasticsearchServiceSoftwareUpdateRequest) => any;
    }
    export type DeploymentStatus = "COMPLETED" | "ELIGIBLE" | "IN_PROGRESS" | "NOT_ELIGIBLE" | "PENDING_UPDATE";
    /**
        * <p>The current options of an Elasticsearch domain service software options.</p>
        */
    export interface ServiceSoftwareOptions {
            /**
                * <p>The current service software version that is present on the domain.</p>
                */
            CurrentVersion?: string;
            /**
                * <p>The new service software version if one is available.</p>
                */
            NewVersion?: string;
            /**
                * <p><code>True</code> if you are able to update you service software version. <code>False</code> if you are not able to update your service software version. </p>
                */
            UpdateAvailable?: boolean;
            /**
                * <p><code>True</code> if you are able to cancel your service software version update. <code>False</code> if you are not able to cancel your service software version. </p>
                */
            Cancellable?: boolean;
            /**
                * <p>The status of your service software update. This field can take the following values: <code>ELIGIBLE</code>, <code>PENDING_UPDATE</code>, <code>IN_PROGRESS</code>, <code>COMPLETED</code>, and <code>NOT_ELIGIBLE</code>.</p>
                */
            UpdateStatus?: DeploymentStatus | string;
            /**
                * <p>The description of the <code>UpdateStatus</code>.</p>
                */
            Description?: string;
            /**
                * <p>Timestamp, in Epoch time, until which you can manually request a service software update. After this date, we automatically update your service software.</p>
                */
            AutomatedUpdateDate?: Date;
            /**
                * <p><code>True</code> if a service software is never automatically updated. <code>False</code> if a service software is automatically updated after <code>AutomatedUpdateDate</code>.  </p>
                */
            OptionalDeployment?: boolean;
    }
    export namespace ServiceSoftwareOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServiceSoftwareOptions) => any;
    }
    /**
        * <p>The result of a <code>CancelElasticsearchServiceSoftwareUpdate</code> operation. Contains the status of the update.</p>
        */
    export interface CancelElasticsearchServiceSoftwareUpdateResponse {
            /**
                * <p>The current status of the Elasticsearch service software update.</p>
                */
            ServiceSoftwareOptions?: ServiceSoftwareOptions;
    }
    export namespace CancelElasticsearchServiceSoftwareUpdateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelElasticsearchServiceSoftwareUpdateResponse) => any;
    }
    export enum AutoTuneDesiredState {
            DISABLED = "DISABLED",
            ENABLED = "ENABLED"
    }
    export enum TimeUnit {
            HOURS = "HOURS"
    }
    /**
        * <p>Specifies maintenance schedule duration: duration value and duration unit. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide</a> for more information.</p>
        */
    export interface Duration {
            /**
                * <p> Integer to specify the value of a maintenance schedule duration. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide</a> for more information.</p>
                */
            Value?: number;
            /**
                * <p>Specifies the unit of a maintenance schedule duration. Valid value is HOURS. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide</a> for more information.</p>
                */
            Unit?: TimeUnit | string;
    }
    export namespace Duration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Duration) => any;
    }
    /**
        * <p>Specifies Auto-Tune maitenance schedule. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide</a> for more information.</p>
        */
    export interface AutoTuneMaintenanceSchedule {
            /**
                * <p>Specifies timestamp at which Auto-Tune maintenance schedule start. </p>
                */
            StartAt?: Date;
            /**
                * <p>Specifies maintenance schedule duration: duration value and duration unit. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide</a> for more information.</p>
                */
            Duration?: Duration;
            /**
                * <p>Specifies cron expression for a recurring maintenance schedule. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide</a> for more information.</p>
                */
            CronExpressionForRecurrence?: string;
    }
    export namespace AutoTuneMaintenanceSchedule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoTuneMaintenanceSchedule) => any;
    }
    /**
        * <p>Specifies the Auto-Tune options: the Auto-Tune desired state for the domain and list of maintenance schedules.</p>
        */
    export interface AutoTuneOptionsInput {
            /**
                * <p>Specifies the Auto-Tune desired state. Valid values are ENABLED, DISABLED. </p>
                */
            DesiredState?: AutoTuneDesiredState | string;
            /**
                * <p>Specifies list of maitenance schedules. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide</a> for more information.</p>
                */
            MaintenanceSchedules?: AutoTuneMaintenanceSchedule[];
    }
    export namespace AutoTuneOptionsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoTuneOptionsInput) => any;
    }
    /**
        * <p>Options to specify the Cognito user and identity pools for Kibana authentication. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html" target="_blank">Amazon Cognito Authentication for Kibana</a>.</p>
        */
    export interface CognitoOptions {
            /**
                * <p>Specifies the option to enable Cognito for Kibana authentication.</p>
                */
            Enabled?: boolean;
            /**
                * <p>Specifies the Cognito user pool ID for Kibana authentication.</p>
                */
            UserPoolId?: string;
            /**
                * <p>Specifies the Cognito identity pool ID for Kibana authentication.</p>
                */
            IdentityPoolId?: string;
            /**
                * <p>Specifies the role ARN that provides Elasticsearch permissions for accessing Cognito resources.</p>
                */
            RoleArn?: string;
    }
    export namespace CognitoOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CognitoOptions) => any;
    }
    export enum TLSSecurityPolicy {
            POLICY_MIN_TLS_1_0_2019_07 = "Policy-Min-TLS-1-0-2019-07",
            POLICY_MIN_TLS_1_2_2019_07 = "Policy-Min-TLS-1-2-2019-07"
    }
    /**
        * <p>Options to configure endpoint for the Elasticsearch domain.</p>
        */
    export interface DomainEndpointOptions {
            /**
                * <p>Specify if only HTTPS endpoint should be enabled for the Elasticsearch domain.</p>
                */
            EnforceHTTPS?: boolean;
            /**
                * <p>Specify the TLS security policy that needs to be applied to the HTTPS endpoint of Elasticsearch domain.
                *         <br></br> It can be one of the following values:
                *         <ul>
                *             <li><b>Policy-Min-TLS-1-0-2019-07: </b> TLS security policy which supports TLSv1.0 and higher.</li>
                *             <li><b>Policy-Min-TLS-1-2-2019-07: </b> TLS security policy which supports only TLSv1.2</li>
                *         </ul>
                *     </p>
                */
            TLSSecurityPolicy?: TLSSecurityPolicy | string;
            /**
                * <p>Specify if custom endpoint should be enabled for the Elasticsearch domain.</p>
                */
            CustomEndpointEnabled?: boolean;
            /**
                * <p>Specify the fully qualified domain for your custom endpoint.</p>
                */
            CustomEndpoint?: string;
            /**
                * <p>Specify ACM certificate ARN for your custom endpoint.</p>
                */
            CustomEndpointCertificateArn?: string;
    }
    export namespace DomainEndpointOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainEndpointOptions) => any;
    }
    export type VolumeType = "gp2" | "io1" | "standard";
    /**
        * <p>Options to enable, disable, and specify the properties of EBS storage volumes. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-ebs" target="_blank"> Configuring EBS-based Storage</a>.</p>
        */
    export interface EBSOptions {
            /**
                * <p>Specifies whether EBS-based storage is enabled.</p>
                */
            EBSEnabled?: boolean;
            /**
                * <p> Specifies the volume type for EBS-based storage.</p>
                */
            VolumeType?: VolumeType | string;
            /**
                * <p> Integer to specify the size of an EBS volume.</p>
                */
            VolumeSize?: number;
            /**
                * <p>Specifies the IOPD for a Provisioned IOPS EBS volume (SSD).</p>
                */
            Iops?: number;
    }
    export namespace EBSOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EBSOptions) => any;
    }
    /**
        * <p>Specifies the configuration for cold storage options such as enabled</p>
        */
    export interface ColdStorageOptions {
            /**
                * <p>Enable cold storage option. Accepted values true or false</p>
                */
            Enabled: boolean | undefined;
    }
    export namespace ColdStorageOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ColdStorageOptions) => any;
    }
    export type ESPartitionInstanceType = "c4.2xlarge.elasticsearch" | "c4.4xlarge.elasticsearch" | "c4.8xlarge.elasticsearch" | "c4.large.elasticsearch" | "c4.xlarge.elasticsearch" | "c5.18xlarge.elasticsearch" | "c5.2xlarge.elasticsearch" | "c5.4xlarge.elasticsearch" | "c5.9xlarge.elasticsearch" | "c5.large.elasticsearch" | "c5.xlarge.elasticsearch" | "d2.2xlarge.elasticsearch" | "d2.4xlarge.elasticsearch" | "d2.8xlarge.elasticsearch" | "d2.xlarge.elasticsearch" | "i2.2xlarge.elasticsearch" | "i2.xlarge.elasticsearch" | "i3.16xlarge.elasticsearch" | "i3.2xlarge.elasticsearch" | "i3.4xlarge.elasticsearch" | "i3.8xlarge.elasticsearch" | "i3.large.elasticsearch" | "i3.xlarge.elasticsearch" | "m3.2xlarge.elasticsearch" | "m3.large.elasticsearch" | "m3.medium.elasticsearch" | "m3.xlarge.elasticsearch" | "m4.10xlarge.elasticsearch" | "m4.2xlarge.elasticsearch" | "m4.4xlarge.elasticsearch" | "m4.large.elasticsearch" | "m4.xlarge.elasticsearch" | "m5.12xlarge.elasticsearch" | "m5.2xlarge.elasticsearch" | "m5.4xlarge.elasticsearch" | "m5.large.elasticsearch" | "m5.xlarge.elasticsearch" | "r3.2xlarge.elasticsearch" | "r3.4xlarge.elasticsearch" | "r3.8xlarge.elasticsearch" | "r3.large.elasticsearch" | "r3.xlarge.elasticsearch" | "r4.16xlarge.elasticsearch" | "r4.2xlarge.elasticsearch" | "r4.4xlarge.elasticsearch" | "r4.8xlarge.elasticsearch" | "r4.large.elasticsearch" | "r4.xlarge.elasticsearch" | "r5.12xlarge.elasticsearch" | "r5.2xlarge.elasticsearch" | "r5.4xlarge.elasticsearch" | "r5.large.elasticsearch" | "r5.xlarge.elasticsearch" | "t2.medium.elasticsearch" | "t2.micro.elasticsearch" | "t2.small.elasticsearch" | "ultrawarm1.large.elasticsearch" | "ultrawarm1.medium.elasticsearch";
    export type ESWarmPartitionInstanceType = "ultrawarm1.large.elasticsearch" | "ultrawarm1.medium.elasticsearch";
    /**
        * <p>Specifies the zone awareness configuration for the domain cluster, such as the number of availability zones.</p>
        */
    export interface ZoneAwarenessConfig {
            /**
                * <p>An integer value to indicate the number of availability zones for a domain when zone awareness is enabled. This should be equal to number of subnets if VPC endpoints is enabled</p>
                */
            AvailabilityZoneCount?: number;
    }
    export namespace ZoneAwarenessConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ZoneAwarenessConfig) => any;
    }
    /**
        * <p>Specifies the configuration for the domain cluster, such as the type and number of instances.</p>
        */
    export interface ElasticsearchClusterConfig {
            /**
                * <p>The instance type for an Elasticsearch cluster. UltraWarm instance types are not supported for data instances.</p>
                */
            InstanceType?: ESPartitionInstanceType | string;
            /**
                * <p>The number of instances in the specified domain cluster.</p>
                */
            InstanceCount?: number;
            /**
                * <p>A boolean value to indicate whether a dedicated master node is enabled.  See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-managedomains.html#es-managedomains-dedicatedmasternodes" target="_blank">About Dedicated Master Nodes</a> for more information.</p>
                */
            DedicatedMasterEnabled?: boolean;
            /**
                * <p>A boolean value to indicate whether zone awareness is enabled.  See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-managedomains.html#es-managedomains-zoneawareness" target="_blank">About Zone Awareness</a> for more information.</p>
                */
            ZoneAwarenessEnabled?: boolean;
            /**
                * <p>Specifies the zone awareness configuration for a domain when zone awareness is enabled.</p>
                */
            ZoneAwarenessConfig?: ZoneAwarenessConfig;
            /**
                * <p>The instance type for a dedicated master node.</p>
                */
            DedicatedMasterType?: ESPartitionInstanceType | string;
            /**
                * <p>Total number of dedicated master nodes, active and on standby, for the cluster.</p>
                */
            DedicatedMasterCount?: number;
            /**
                * <p>True to enable warm storage.</p>
                */
            WarmEnabled?: boolean;
            /**
                * <p>The instance type for the Elasticsearch cluster's warm nodes.</p>
                */
            WarmType?: ESWarmPartitionInstanceType | string;
            /**
                * <p>The number of warm nodes in the cluster.</p>
                */
            WarmCount?: number;
            /**
                * <p>Specifies the <code>ColdStorageOptions</code> config for Elasticsearch Domain</p>
                */
            ColdStorageOptions?: ColdStorageOptions;
    }
    export namespace ElasticsearchClusterConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ElasticsearchClusterConfig) => any;
    }
    /**
        * <p>Specifies the Encryption At Rest Options.</p>
        */
    export interface EncryptionAtRestOptions {
            /**
                * <p>Specifies the option to enable Encryption At Rest.</p>
                */
            Enabled?: boolean;
            /**
                * <p> Specifies the KMS Key ID for Encryption At Rest options.</p>
                */
            KmsKeyId?: string;
    }
    export namespace EncryptionAtRestOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EncryptionAtRestOptions) => any;
    }
    export type LogType = "AUDIT_LOGS" | "ES_APPLICATION_LOGS" | "INDEX_SLOW_LOGS" | "SEARCH_SLOW_LOGS";
    /**
        * <p>Log Publishing option that is set for given domain.
        *        <br></br>Attributes and their details:
        *      <ul>
        *        <li>CloudWatchLogsLogGroupArn: ARN of the Cloudwatch log group to which log needs to be published.</li>
        *        <li>Enabled: Whether the log publishing for given log type is enabled or not</li>
        *      </ul>
        *    </p>
        */
    export interface LogPublishingOption {
            /**
                * <p>ARN of the Cloudwatch log group to which log needs to be published.</p>
                */
            CloudWatchLogsLogGroupArn?: string;
            /**
                * <p> Specifies whether given log publishing option is enabled or not.</p>
                */
            Enabled?: boolean;
    }
    export namespace LogPublishingOption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LogPublishingOption) => any;
    }
    /**
        * <p>Specifies the node-to-node encryption options.</p>
        */
    export interface NodeToNodeEncryptionOptions {
            /**
                * <p>Specify true to enable node-to-node encryption.</p>
                */
            Enabled?: boolean;
    }
    export namespace NodeToNodeEncryptionOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NodeToNodeEncryptionOptions) => any;
    }
    /**
        * <p>Specifies the time, in UTC format, when the service takes a daily automated snapshot of the specified Elasticsearch domain. Default value is <code>0</code> hours.</p>
        */
    export interface SnapshotOptions {
            /**
                * <p>Specifies the time, in UTC format, when the service takes a daily automated snapshot of the specified Elasticsearch domain. Default value is <code>0</code> hours.</p>
                */
            AutomatedSnapshotStartHour?: number;
    }
    export namespace SnapshotOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SnapshotOptions) => any;
    }
    /**
        * <p>Options to specify the subnets and security groups for VPC endpoint. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html" target="_blank"> VPC Endpoints for Amazon Elasticsearch Service Domains</a>.</p>
        */
    export interface VPCOptions {
            /**
                * <p>Specifies the subnets for VPC endpoint.</p>
                */
            SubnetIds?: string[];
            /**
                * <p>Specifies the security groups for VPC endpoint.</p>
                */
            SecurityGroupIds?: string[];
    }
    export namespace VPCOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VPCOptions) => any;
    }
    export interface CreateElasticsearchDomainRequest {
            /**
                * <p>The name of the Elasticsearch domain that you are creating. Domain names are unique across the domains owned by an account within an AWS region. Domain names must start with a lowercase letter and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
                */
            DomainName: string | undefined;
            /**
                * <p>String of format X.Y to specify version for the Elasticsearch domain eg. "1.5" or "2.3". For more information,
                *           see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomains" target="_blank">Creating Elasticsearch Domains</a> in the <i>Amazon Elasticsearch Service Developer Guide</i>.</p>
                */
            ElasticsearchVersion?: string;
            /**
                * <p>Configuration options for an Elasticsearch domain. Specifies the instance type and number of instances in the domain cluster. </p>
                */
            ElasticsearchClusterConfig?: ElasticsearchClusterConfig;
            /**
                * <p>Options to enable, disable and specify the type and size of EBS storage volumes. </p>
                */
            EBSOptions?: EBSOptions;
            /**
                * <p> IAM access policy as a JSON-formatted string.</p>
                */
            AccessPolicies?: string;
            /**
                * <p>Option to set time, in UTC format, of the daily automated snapshot. Default value is 0 hours. </p>
                */
            SnapshotOptions?: SnapshotOptions;
            /**
                * <p>Options to specify the subnets and security groups for VPC endpoint. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html#es-creating-vpc" target="_blank">Creating a VPC</a> in <i>VPC Endpoints for Amazon Elasticsearch Service Domains</i></p>
                */
            VPCOptions?: VPCOptions;
            /**
                * <p>Options to specify the Cognito user and identity pools for Kibana authentication. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html" target="_blank">Amazon Cognito Authentication for Kibana</a>.</p>
                */
            CognitoOptions?: CognitoOptions;
            /**
                * <p>Specifies the Encryption At Rest Options.</p>
                */
            EncryptionAtRestOptions?: EncryptionAtRestOptions;
            /**
                * <p>Specifies the NodeToNodeEncryptionOptions.</p>
                */
            NodeToNodeEncryptionOptions?: NodeToNodeEncryptionOptions;
            /**
                * <p> Option to allow references to indices in an HTTP request body.  Must be <code>false</code> when configuring access to individual sub-resources.  By default, the value is <code>true</code>.
                *           See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options" target="_blank">Configuration Advanced Options</a> for more information.</p>
                */
            AdvancedOptions?: Record<string, string>;
            /**
                * <p>Map of <code>LogType</code> and <code>LogPublishingOption</code>, each containing options to publish a given type of Elasticsearch log.</p>
                */
            LogPublishingOptions?: Record<string, LogPublishingOption>;
            /**
                * <p>Options to specify configuration that will be applied to the domain endpoint.</p>
                */
            DomainEndpointOptions?: DomainEndpointOptions;
            /**
                * <p>Specifies advanced security options.</p>
                */
            AdvancedSecurityOptions?: AdvancedSecurityOptionsInput;
            /**
                * <p>Specifies Auto-Tune options.</p>
                */
            AutoTuneOptions?: AutoTuneOptionsInput;
            /**
                * <p>A list of <code>Tag</code> added during domain creation.</p>
                */
            TagList?: Tag[];
    }
    export namespace CreateElasticsearchDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateElasticsearchDomainRequest) => any;
    }
    export enum AutoTuneState {
            DISABLED = "DISABLED",
            DISABLED_AND_ROLLBACK_COMPLETE = "DISABLED_AND_ROLLBACK_COMPLETE",
            DISABLED_AND_ROLLBACK_ERROR = "DISABLED_AND_ROLLBACK_ERROR",
            DISABLED_AND_ROLLBACK_IN_PROGRESS = "DISABLED_AND_ROLLBACK_IN_PROGRESS",
            DISABLED_AND_ROLLBACK_SCHEDULED = "DISABLED_AND_ROLLBACK_SCHEDULED",
            DISABLE_IN_PROGRESS = "DISABLE_IN_PROGRESS",
            ENABLED = "ENABLED",
            ENABLE_IN_PROGRESS = "ENABLE_IN_PROGRESS",
            ERROR = "ERROR"
    }
    /**
        * <p>Specifies the Auto-Tune options: the Auto-Tune desired state for the domain and list of maintenance schedules.</p>
        */
    export interface AutoTuneOptionsOutput {
            /**
                * <p>Specifies the <code>AutoTuneState</code> for the Elasticsearch domain.</p>
                */
            State?: AutoTuneState | string;
            /**
                * <p>Specifies the error message while enabling or disabling the Auto-Tune.</p>
                */
            ErrorMessage?: string;
    }
    export namespace AutoTuneOptionsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoTuneOptionsOutput) => any;
    }
    /**
        * <p>Specifies change details of the domain configuration change.</p>
        */
    export interface ChangeProgressDetails {
            /**
                * <p>The unique change identifier associated with a specific domain configuration change.</p>
                */
            ChangeId?: string;
            /**
                * <p>Contains an optional message associated with the domain configuration change.</p>
                */
            Message?: string;
    }
    export namespace ChangeProgressDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChangeProgressDetails) => any;
    }
    /**
        * <p>Options to specify the subnets and security groups for VPC endpoint. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html" target="_blank"> VPC Endpoints for Amazon Elasticsearch Service Domains</a>.</p>
        */
    export interface VPCDerivedInfo {
            /**
                * <p>The VPC Id for the Elasticsearch domain. Exists only if the domain was created with VPCOptions.</p>
                */
            VPCId?: string;
            /**
                * <p>Specifies the subnets for VPC endpoint.</p>
                */
            SubnetIds?: string[];
            /**
                * <p>The availability zones for the Elasticsearch domain. Exists only if the domain was created with VPCOptions.</p>
                */
            AvailabilityZones?: string[];
            /**
                * <p>Specifies the security groups for VPC endpoint.</p>
                */
            SecurityGroupIds?: string[];
    }
    export namespace VPCDerivedInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VPCDerivedInfo) => any;
    }
    /**
        * <p>The current status of an Elasticsearch domain.</p>
        */
    export interface ElasticsearchDomainStatus {
            /**
                * <p>The unique identifier for the specified Elasticsearch domain.</p>
                */
            DomainId: string | undefined;
            /**
                * <p>The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
                */
            DomainName: string | undefined;
            /**
                * <p>The Amazon resource name (ARN) of an Elasticsearch domain.  See <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html" target="_blank">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i> for more information.</p>
                */
            ARN: string | undefined;
            /**
                * <p>The domain creation status. <code>True</code> if the creation of an Elasticsearch domain is complete. <code>False</code> if domain creation is still in progress.</p>
                */
            Created?: boolean;
            /**
                * <p>The domain deletion status. <code>True</code> if a delete request has been received for the domain but resource cleanup is still in progress. <code>False</code> if the domain has not been deleted. Once domain deletion is complete, the status of the domain is no longer returned.</p>
                */
            Deleted?: boolean;
            /**
                * <p>The Elasticsearch domain endpoint that you use to submit index and search requests.</p>
                */
            Endpoint?: string;
            /**
                * <p>Map containing the Elasticsearch domain endpoints used to submit index and search requests. Example <code>key, value</code>: <code>'vpc','vpc-endpoint-h2dsd34efgyghrtguk5gt6j2foh4.us-east-1.es.amazonaws.com'</code>.</p>
                */
            Endpoints?: Record<string, string>;
            /**
                * <p>The status of the Elasticsearch domain configuration. <code>True</code> if Amazon Elasticsearch Service is processing configuration changes. <code>False</code> if the configuration is active.</p>
                */
            Processing?: boolean;
            /**
                * <p>The status of an Elasticsearch domain version upgrade. <code>True</code> if Amazon Elasticsearch Service is undergoing a version upgrade. <code>False</code> if the configuration is active.</p>
                */
            UpgradeProcessing?: boolean;
            ElasticsearchVersion?: string;
            /**
                * <p>The type and number of instances in the domain cluster.</p>
                */
            ElasticsearchClusterConfig: ElasticsearchClusterConfig | undefined;
            /**
                * <p>The <code>EBSOptions</code> for the specified domain.  See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-ebs" target="_blank">Configuring EBS-based Storage</a> for more information.</p>
                */
            EBSOptions?: EBSOptions;
            /**
                * <p> IAM access policy as a JSON-formatted string.</p>
                */
            AccessPolicies?: string;
            /**
                * <p>Specifies the status of the <code>SnapshotOptions</code></p>
                */
            SnapshotOptions?: SnapshotOptions;
            /**
                * <p>The <code>VPCOptions</code> for the specified domain. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html" target="_blank">VPC Endpoints for Amazon Elasticsearch Service Domains</a>.</p>
                */
            VPCOptions?: VPCDerivedInfo;
            /**
                * <p>The <code>CognitoOptions</code> for the specified domain. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html" target="_blank">Amazon Cognito Authentication for Kibana</a>.</p>
                */
            CognitoOptions?: CognitoOptions;
            /**
                * <p> Specifies the status of the <code>EncryptionAtRestOptions</code>.</p>
                */
            EncryptionAtRestOptions?: EncryptionAtRestOptions;
            /**
                * <p>Specifies the status of the <code>NodeToNodeEncryptionOptions</code>.</p>
                */
            NodeToNodeEncryptionOptions?: NodeToNodeEncryptionOptions;
            /**
                * <p>Specifies the status of the <code>AdvancedOptions</code></p>
                */
            AdvancedOptions?: Record<string, string>;
            /**
                * <p>Log publishing options for the given domain.</p>
                */
            LogPublishingOptions?: Record<string, LogPublishingOption>;
            /**
                * <p>The current status of the Elasticsearch domain's service software.</p>
                */
            ServiceSoftwareOptions?: ServiceSoftwareOptions;
            /**
                * <p>The current status of the Elasticsearch domain's endpoint options.</p>
                */
            DomainEndpointOptions?: DomainEndpointOptions;
            /**
                * <p>The current status of the Elasticsearch domain's advanced security options.</p>
                */
            AdvancedSecurityOptions?: AdvancedSecurityOptions;
            /**
                * <p>The current status of the Elasticsearch domain's Auto-Tune options.</p>
                */
            AutoTuneOptions?: AutoTuneOptionsOutput;
            /**
                * <p>Specifies change details of the domain configuration change.</p>
                */
            ChangeProgressDetails?: ChangeProgressDetails;
    }
    export namespace ElasticsearchDomainStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ElasticsearchDomainStatus) => any;
    }
    /**
        * <p>The result of a <code>CreateElasticsearchDomain</code> operation. Contains the status of the newly created Elasticsearch domain.</p>
        */
    export interface CreateElasticsearchDomainResponse {
            /**
                * <p>The status of the newly created Elasticsearch domain. </p>
                */
            DomainStatus?: ElasticsearchDomainStatus;
    }
    export namespace CreateElasticsearchDomainResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateElasticsearchDomainResponse) => any;
    }
    /**
        * <p>An exception for trying to create or access sub-resource that is either invalid or not supported. Gives http status code of 409.</p>
        */
    export class InvalidTypeException extends __BaseException {
            readonly name: "InvalidTypeException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTypeException, __BaseException>);
    }
    /**
        * <p>An exception for creating a resource that already exists. Gives http status code of 400.</p>
        */
    export class ResourceAlreadyExistsException extends __BaseException {
            readonly name: "ResourceAlreadyExistsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>);
    }
    /**
        * <p>Container for the parameters to the <code><a>CreateOutboundCrossClusterSearchConnection</a></code> operation.</p>
        */
    export interface CreateOutboundCrossClusterSearchConnectionRequest {
            /**
                * <p>Specifies the <code><a>DomainInformation</a></code> for the source Elasticsearch domain.</p>
                */
            SourceDomainInfo: DomainInformation | undefined;
            /**
                * <p>Specifies the <code><a>DomainInformation</a></code> for the destination Elasticsearch domain.</p>
                */
            DestinationDomainInfo: DomainInformation | undefined;
            /**
                * <p>Specifies the connection alias that will be used by the customer for this connection.</p>
                */
            ConnectionAlias: string | undefined;
    }
    export namespace CreateOutboundCrossClusterSearchConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateOutboundCrossClusterSearchConnectionRequest) => any;
    }
    export enum OutboundCrossClusterSearchConnectionStatusCode {
            ACTIVE = "ACTIVE",
            DELETED = "DELETED",
            DELETING = "DELETING",
            PENDING_ACCEPTANCE = "PENDING_ACCEPTANCE",
            PROVISIONING = "PROVISIONING",
            REJECTED = "REJECTED",
            VALIDATING = "VALIDATING",
            VALIDATION_FAILED = "VALIDATION_FAILED"
    }
    /**
        * <p>Specifies the connection status of an outbound cross-cluster search connection.</p>
        */
    export interface OutboundCrossClusterSearchConnectionStatus {
            /**
                * <p>The state code for outbound connection. This can be one of the following:</p>
                *     <ul>
                *       <li>VALIDATING: The outbound connection request is being validated.</li>
                *       <li>VALIDATION_FAILED: Validation failed for the connection request.</li>
                *       <li>PENDING_ACCEPTANCE: Outbound connection request is validated and is not yet accepted by destination domain owner.</li>
                *       <li>PROVISIONING: Outbound connection request is in process.</li>
                *       <li>ACTIVE: Outbound connection is active and ready to use.</li>
                *       <li>REJECTED: Outbound connection request is rejected by destination domain owner.</li>
                *       <li>DELETING: Outbound connection deletion is in progress.</li>
                *       <li>DELETED: Outbound connection is deleted and cannot be used further.</li>
                *     </ul>
                */
            StatusCode?: OutboundCrossClusterSearchConnectionStatusCode | string;
            /**
                * <p>Specifies verbose information for the outbound connection status.</p>
                */
            Message?: string;
    }
    export namespace OutboundCrossClusterSearchConnectionStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OutboundCrossClusterSearchConnectionStatus) => any;
    }
    /**
        * <p>The result of a <code><a>CreateOutboundCrossClusterSearchConnection</a></code> request. Contains the details of the newly created cross-cluster search connection.</p>
        */
    export interface CreateOutboundCrossClusterSearchConnectionResponse {
            /**
                * <p>Specifies the <code><a>DomainInformation</a></code> for the source Elasticsearch domain.</p>
                */
            SourceDomainInfo?: DomainInformation;
            /**
                * <p>Specifies the <code><a>DomainInformation</a></code> for the destination Elasticsearch domain.</p>
                */
            DestinationDomainInfo?: DomainInformation;
            /**
                * <p>Specifies the connection alias provided during the create connection request.</p>
                */
            ConnectionAlias?: string;
            /**
                * <p>Specifies the <code><a>OutboundCrossClusterSearchConnectionStatus</a></code> for the newly created connection.</p>
                */
            ConnectionStatus?: OutboundCrossClusterSearchConnectionStatus;
            /**
                * <p>Unique id for the created outbound connection, which is used for subsequent operations on connection.</p>
                */
            CrossClusterSearchConnectionId?: string;
    }
    export namespace CreateOutboundCrossClusterSearchConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateOutboundCrossClusterSearchConnectionResponse) => any;
    }
    /**
        * <p>The S3 location for importing the package specified as <code>S3BucketName</code> and <code>S3Key</code></p>
        */
    export interface PackageSource {
            /**
                * <p>Name of the bucket containing the package.</p>
                */
            S3BucketName?: string;
            /**
                * <p>Key (file name) of the package.</p>
                */
            S3Key?: string;
    }
    export namespace PackageSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageSource) => any;
    }
    /**
        * <p>
        *       Container for request parameters to
        *       <code>
        *         <a>CreatePackage</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface CreatePackageRequest {
            /**
                * <p>Unique identifier for the package.</p>
                */
            PackageName: string | undefined;
            /**
                * <p>Type of package. Currently supports only TXT-DICTIONARY.</p>
                */
            PackageType: PackageType | string | undefined;
            /**
                * <p>Description of the package.</p>
                */
            PackageDescription?: string;
            /**
                * <p>The customer S3 location <code>PackageSource</code> for importing the package.</p>
                */
            PackageSource: PackageSource | undefined;
    }
    export namespace CreatePackageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePackageRequest) => any;
    }
    export type PackageStatus = "AVAILABLE" | "COPYING" | "COPY_FAILED" | "DELETED" | "DELETE_FAILED" | "DELETING" | "VALIDATING" | "VALIDATION_FAILED";
    /**
        * <p>Basic information about a package.</p>
        */
    export interface PackageDetails {
            /**
                * <p>Internal ID of the package.</p>
                */
            PackageID?: string;
            /**
                * <p>User specified name of the package.</p>
                */
            PackageName?: string;
            /**
                * <p>Currently supports only TXT-DICTIONARY.</p>
                */
            PackageType?: PackageType | string;
            /**
                * <p>User-specified description of the package.</p>
                */
            PackageDescription?: string;
            /**
                * <p>Current state of the package. Values are COPYING/COPY_FAILED/AVAILABLE/DELETING/DELETE_FAILED</p>
                */
            PackageStatus?: PackageStatus | string;
            /**
                * <p>Timestamp which tells creation date of the package.</p>
                */
            CreatedAt?: Date;
            LastUpdatedAt?: Date;
            AvailablePackageVersion?: string;
            /**
                * <p>Additional information if the package is in an error state. Null otherwise.</p>
                */
            ErrorDetails?: ErrorDetails;
    }
    export namespace PackageDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageDetails) => any;
    }
    /**
        * <p>
        *       Container for response returned by
        *       <code>
        *         <a>CreatePackage</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface CreatePackageResponse {
            /**
                * <p>Information about the package <code>PackageDetails</code>.</p>
                */
            PackageDetails?: PackageDetails;
    }
    export namespace CreatePackageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePackageResponse) => any;
    }
    /**
        * <p>Container for the parameters to the <code><a>DeleteElasticsearchDomain</a></code> operation. Specifies the name of the Elasticsearch domain that you want to delete.</p>
        */
    export interface DeleteElasticsearchDomainRequest {
            /**
                * <p>The name of the Elasticsearch domain that you want to permanently delete.</p>
                */
            DomainName: string | undefined;
    }
    export namespace DeleteElasticsearchDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteElasticsearchDomainRequest) => any;
    }
    /**
        * <p>The result of a <code>DeleteElasticsearchDomain</code> request. Contains the status of the pending deletion, or no status if the domain and all of its resources have been deleted.</p>
        */
    export interface DeleteElasticsearchDomainResponse {
            /**
                * <p>The status of the Elasticsearch domain being deleted.</p>
                */
            DomainStatus?: ElasticsearchDomainStatus;
    }
    export namespace DeleteElasticsearchDomainResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteElasticsearchDomainResponse) => any;
    }
    /**
        * <p>Container for the parameters to the <code><a>DeleteInboundCrossClusterSearchConnection</a></code> operation.</p>
        */
    export interface DeleteInboundCrossClusterSearchConnectionRequest {
            /**
                * <p>The id of the inbound connection that you want to permanently delete.</p>
                */
            CrossClusterSearchConnectionId: string | undefined;
    }
    export namespace DeleteInboundCrossClusterSearchConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteInboundCrossClusterSearchConnectionRequest) => any;
    }
    /**
        * <p>The result of a <code><a>DeleteInboundCrossClusterSearchConnection</a></code> operation. Contains details of deleted inbound connection.</p>
        */
    export interface DeleteInboundCrossClusterSearchConnectionResponse {
            /**
                * <p>Specifies the <code><a>InboundCrossClusterSearchConnection</a></code> of deleted inbound connection. </p>
                */
            CrossClusterSearchConnection?: InboundCrossClusterSearchConnection;
    }
    export namespace DeleteInboundCrossClusterSearchConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteInboundCrossClusterSearchConnectionResponse) => any;
    }
    /**
        * <p>Container for the parameters to the <code><a>DeleteOutboundCrossClusterSearchConnection</a></code> operation.</p>
        */
    export interface DeleteOutboundCrossClusterSearchConnectionRequest {
            /**
                * <p>The id of the outbound connection that you want to permanently delete.</p>
                */
            CrossClusterSearchConnectionId: string | undefined;
    }
    export namespace DeleteOutboundCrossClusterSearchConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteOutboundCrossClusterSearchConnectionRequest) => any;
    }
    /**
        * <p>Specifies details of an outbound connection.</p>
        */
    export interface OutboundCrossClusterSearchConnection {
            /**
                * <p>Specifies the <code><a>DomainInformation</a></code> for the source Elasticsearch domain.</p>
                */
            SourceDomainInfo?: DomainInformation;
            /**
                * <p>Specifies the <code><a>DomainInformation</a></code> for the destination Elasticsearch domain.</p>
                */
            DestinationDomainInfo?: DomainInformation;
            /**
                * <p>Specifies the connection id for the outbound cross-cluster search connection.</p>
                */
            CrossClusterSearchConnectionId?: string;
            /**
                * <p>Specifies the connection alias for the outbound cross-cluster search connection.</p>
                */
            ConnectionAlias?: string;
            /**
                * <p>Specifies the <code><a>OutboundCrossClusterSearchConnectionStatus</a></code> for the outbound connection.</p>
                */
            ConnectionStatus?: OutboundCrossClusterSearchConnectionStatus;
    }
    export namespace OutboundCrossClusterSearchConnection {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OutboundCrossClusterSearchConnection) => any;
    }
    /**
        * <p>The result of a <code><a>DeleteOutboundCrossClusterSearchConnection</a></code> operation. Contains details of deleted outbound connection.</p>
        */
    export interface DeleteOutboundCrossClusterSearchConnectionResponse {
            /**
                * <p>Specifies the <code><a>OutboundCrossClusterSearchConnection</a></code> of deleted outbound connection. </p>
                */
            CrossClusterSearchConnection?: OutboundCrossClusterSearchConnection;
    }
    export namespace DeleteOutboundCrossClusterSearchConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteOutboundCrossClusterSearchConnectionResponse) => any;
    }
    /**
        * <p>
        *       Container for request parameters to
        *       <code>
        *         <a>DeletePackage</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface DeletePackageRequest {
            /**
                * <p>Internal ID of the package that you want to delete. Use <code>DescribePackages</code> to find this value.</p>
                */
            PackageID: string | undefined;
    }
    export namespace DeletePackageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePackageRequest) => any;
    }
    /**
        * <p>
        *       Container for response parameters to
        *       <code>
        *         <a>DeletePackage</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface DeletePackageResponse {
            /**
                * <p><code>PackageDetails</code></p>
                */
            PackageDetails?: PackageDetails;
    }
    export namespace DeletePackageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePackageResponse) => any;
    }
    /**
        * <p>Container for the parameters to the <code>DescribeDomainAutoTunes</code> operation.</p>
        */
    export interface DescribeDomainAutoTunesRequest {
            /**
                * <p>Specifies the domain name for which you want Auto-Tune action details.</p>
                */
            DomainName: string | undefined;
            /**
                * <p>Set this value to limit the number of results returned. If not specified, defaults to 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>NextToken is sent in case the earlier API call results contain the NextToken. It is used for pagination.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeDomainAutoTunesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDomainAutoTunesRequest) => any;
    }
    export enum ScheduledAutoTuneActionType {
            JVM_HEAP_SIZE_TUNING = "JVM_HEAP_SIZE_TUNING",
            JVM_YOUNG_GEN_TUNING = "JVM_YOUNG_GEN_TUNING"
    }
    export enum ScheduledAutoTuneSeverityType {
            HIGH = "HIGH",
            LOW = "LOW",
            MEDIUM = "MEDIUM"
    }
    /**
        * <p>Specifies details of the scheduled Auto-Tune action. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide</a> for more information. </p>
        */
    export interface ScheduledAutoTuneDetails {
            /**
                * <p>Specifies timestamp for the Auto-Tune action scheduled for the domain. </p>
                */
            Date?: Date;
            /**
                * <p>Specifies Auto-Tune action type. Valid values are JVM_HEAP_SIZE_TUNING and JVM_YOUNG_GEN_TUNING. </p>
                */
            ActionType?: ScheduledAutoTuneActionType | string;
            /**
                * <p>Specifies Auto-Tune action description. </p>
                */
            Action?: string;
            /**
                * <p>Specifies Auto-Tune action severity. Valid values are LOW, MEDIUM and HIGH. </p>
                */
            Severity?: ScheduledAutoTuneSeverityType | string;
    }
    export namespace ScheduledAutoTuneDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScheduledAutoTuneDetails) => any;
    }
    /**
        * <p>Specifies details of the Auto-Tune action. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide</a> for more information. </p>
        */
    export interface AutoTuneDetails {
            /**
                * <p>Specifies details of the scheduled Auto-Tune action. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide</a> for more information. </p>
                */
            ScheduledAutoTuneDetails?: ScheduledAutoTuneDetails;
    }
    export namespace AutoTuneDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoTuneDetails) => any;
    }
    export enum AutoTuneType {
            SCHEDULED_ACTION = "SCHEDULED_ACTION"
    }
    /**
        * <p>Specifies Auto-Tune type and Auto-Tune action details. </p>
        */
    export interface AutoTune {
            /**
                * <p>Specifies Auto-Tune type. Valid value is SCHEDULED_ACTION. </p>
                */
            AutoTuneType?: AutoTuneType | string;
            /**
                * <p>Specifies details of the Auto-Tune action. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide</a> for more information. </p>
                */
            AutoTuneDetails?: AutoTuneDetails;
    }
    export namespace AutoTune {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoTune) => any;
    }
    /**
        * <p>The result of <code>DescribeDomainAutoTunes</code> request. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide</a> for more information. </p>
        */
    export interface DescribeDomainAutoTunesResponse {
            /**
                * <p>Specifies the list of setting adjustments that Auto-Tune has made to the domain. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide</a> for more information.</p>
                */
            AutoTunes?: AutoTune[];
            /**
                * <p>Specifies an identifier to allow retrieval of paginated results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeDomainAutoTunesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDomainAutoTunesResponse) => any;
    }
    /**
        * <p>Container for the parameters to the <code>DescribeDomainChangeProgress</code> operation. Specifies the
        *         domain name and optional change specific identity for which you want progress information.
        *       </p>
        */
    export interface DescribeDomainChangeProgressRequest {
            /**
                * <p>The domain you want to get the progress information about.</p>
                */
            DomainName: string | undefined;
            /**
                * <p>The specific change ID for which you want to get progress information. This is an optional parameter.
                *         If omitted, the service returns information about the most recent configuration change.
                *       </p>
                */
            ChangeId?: string;
    }
    export namespace DescribeDomainChangeProgressRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDomainChangeProgressRequest) => any;
    }
    /**
        * <p>A progress stage details of a specific domain configuration change.</p>
        */
    export interface ChangeProgressStage {
            /**
                * <p>The name of the specific progress stage.</p>
                */
            Name?: string;
            /**
                * <p>The overall status of a specific progress stage.</p>
                */
            Status?: string;
            /**
                * <p>The description of the progress stage.</p>
                */
            Description?: string;
            /**
                * <p>The last updated timestamp of the progress stage.</p>
                */
            LastUpdated?: Date;
    }
    export namespace ChangeProgressStage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChangeProgressStage) => any;
    }
    export enum OverallChangeStatus {
            COMPLETED = "COMPLETED",
            FAILED = "FAILED",
            PENDING = "PENDING",
            PROCESSING = "PROCESSING"
    }
    /**
        * <p>The progress details of a specific domain configuration change.</p>
        */
    export interface ChangeProgressStatusDetails {
            /**
                * <p>The unique change identifier associated with a specific domain configuration change.</p>
                */
            ChangeId?: string;
            /**
                * <p>The time at which the configuration change is made on the domain.</p>
                */
            StartTime?: Date;
            /**
                * <p>The overall status of the domain configuration change. This field can take the following values: <code>PENDING</code>, <code>PROCESSING</code>, <code>COMPLETED</code> and <code>FAILED</code></p>
                */
            Status?: OverallChangeStatus | string;
            /**
                * <p>The list of properties involved in the domain configuration change that are still in pending.</p>
                */
            PendingProperties?: string[];
            /**
                * <p>The list of properties involved in the domain configuration change that are completed.</p>
                */
            CompletedProperties?: string[];
            /**
                * <p>The total number of stages required for the configuration change.</p>
                */
            TotalNumberOfStages?: number;
            /**
                * <p>The specific stages that the domain is going through to perform the configuration change.</p>
                */
            ChangeProgressStages?: ChangeProgressStage[];
    }
    export namespace ChangeProgressStatusDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChangeProgressStatusDetails) => any;
    }
    /**
        * <p>The result of a <code>DescribeDomainChangeProgress</code> request. Contains the progress information of
        *         the requested domain change.
        *       </p>
        */
    export interface DescribeDomainChangeProgressResponse {
            /**
                * <p>Progress information for the configuration change that is requested in the <code>DescribeDomainChangeProgress</code> request.
                *       </p>
                */
            ChangeProgressStatus?: ChangeProgressStatusDetails;
    }
    export namespace DescribeDomainChangeProgressResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDomainChangeProgressResponse) => any;
    }
    /**
        * <p>Container for the parameters to the <code><a>DescribeElasticsearchDomain</a></code> operation.</p>
        */
    export interface DescribeElasticsearchDomainRequest {
            /**
                * <p>The name of the Elasticsearch domain for which you want information.</p>
                */
            DomainName: string | undefined;
    }
    export namespace DescribeElasticsearchDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeElasticsearchDomainRequest) => any;
    }
    /**
        * <p>The result of a <code>DescribeElasticsearchDomain</code> request. Contains the status of the domain specified in the request.</p>
        */
    export interface DescribeElasticsearchDomainResponse {
            /**
                * <p>The current status of the Elasticsearch domain.</p>
                */
            DomainStatus: ElasticsearchDomainStatus | undefined;
    }
    export namespace DescribeElasticsearchDomainResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeElasticsearchDomainResponse) => any;
    }
    /**
        * <p> Container for the parameters to the <code>DescribeElasticsearchDomainConfig</code> operation. Specifies the domain name for which you want configuration information.</p>
        */
    export interface DescribeElasticsearchDomainConfigRequest {
            /**
                * <p>The Elasticsearch domain that you want to get information about.</p>
                */
            DomainName: string | undefined;
    }
    export namespace DescribeElasticsearchDomainConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeElasticsearchDomainConfigRequest) => any;
    }
    export enum RollbackOnDisable {
            DEFAULT_ROLLBACK = "DEFAULT_ROLLBACK",
            NO_ROLLBACK = "NO_ROLLBACK"
    }
    /**
        * <p>Specifies the Auto-Tune options: the Auto-Tune desired state for the domain, rollback state when disabling Auto-Tune options and list of maintenance schedules.</p>
        */
    export interface AutoTuneOptions {
            /**
                * <p>Specifies the Auto-Tune desired state. Valid values are ENABLED, DISABLED. </p>
                */
            DesiredState?: AutoTuneDesiredState | string;
            /**
                * <p>Specifies the rollback state while disabling Auto-Tune for the domain. Valid values are NO_ROLLBACK, DEFAULT_ROLLBACK. </p>
                */
            RollbackOnDisable?: RollbackOnDisable | string;
            /**
                * <p>Specifies list of maitenance schedules. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide</a> for more information.</p>
                */
            MaintenanceSchedules?: AutoTuneMaintenanceSchedule[];
    }
    export namespace AutoTuneOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoTuneOptions) => any;
    }
    /**
        * <p>Provides the current status of the Auto-Tune options. </p>
        */
    export interface AutoTuneStatus {
            /**
                * <p>Timestamp which tells Auto-Tune options creation date .</p>
                */
            CreationDate: Date | undefined;
            /**
                * <p>Timestamp which tells Auto-Tune options last updated time.</p>
                */
            UpdateDate: Date | undefined;
            /**
                * <p>Specifies the Auto-Tune options latest version.</p>
                */
            UpdateVersion?: number;
            /**
                * <p>Specifies the <code>AutoTuneState</code> for the Elasticsearch domain.</p>
                */
            State: AutoTuneState | string | undefined;
            /**
                * <p>Specifies the error message while enabling or disabling the Auto-Tune options.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>Indicates whether the Elasticsearch domain is being deleted.</p>
                */
            PendingDeletion?: boolean;
    }
    export namespace AutoTuneStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoTuneStatus) => any;
    }
    /**
        * <p> Specifies the status of Auto-Tune options for the specified Elasticsearch domain.</p>
        */
    export interface AutoTuneOptionsStatus {
            /**
                * <p> Specifies Auto-Tune options for the specified Elasticsearch domain.</p>
                */
            Options?: AutoTuneOptions;
            /**
                * <p> Specifies Status of the Auto-Tune options for the specified Elasticsearch domain.</p>
                */
            Status?: AutoTuneStatus;
    }
    export namespace AutoTuneOptionsStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoTuneOptionsStatus) => any;
    }
    /**
        * <p>Status of the Cognito options for the specified Elasticsearch domain.</p>
        */
    export interface CognitoOptionsStatus {
            /**
                * <p>Specifies the Cognito options for the specified Elasticsearch domain.</p>
                */
            Options: CognitoOptions | undefined;
            /**
                * <p>Specifies the status of the Cognito options for the specified Elasticsearch domain.</p>
                */
            Status: OptionStatus | undefined;
    }
    export namespace CognitoOptionsStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CognitoOptionsStatus) => any;
    }
    /**
        * <p>The configured endpoint options for the domain and their current status.</p>
        */
    export interface DomainEndpointOptionsStatus {
            /**
                * <p>Options to configure endpoint for the Elasticsearch domain.</p>
                */
            Options: DomainEndpointOptions | undefined;
            /**
                * <p>The status of the endpoint options for the Elasticsearch domain. See <code>OptionStatus</code> for the status information that's included. </p>
                */
            Status: OptionStatus | undefined;
    }
    export namespace DomainEndpointOptionsStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainEndpointOptionsStatus) => any;
    }
    /**
        * <p> Status of the EBS options for the specified Elasticsearch domain.</p>
        */
    export interface EBSOptionsStatus {
            /**
                * <p> Specifies the EBS options for the specified Elasticsearch domain.</p>
                */
            Options: EBSOptions | undefined;
            /**
                * <p> Specifies the status of the EBS options for the specified Elasticsearch domain.</p>
                */
            Status: OptionStatus | undefined;
    }
    export namespace EBSOptionsStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EBSOptionsStatus) => any;
    }
    /**
        * <p> Specifies the configuration status for the specified Elasticsearch domain.</p>
        */
    export interface ElasticsearchClusterConfigStatus {
            /**
                * <p> Specifies the cluster configuration for the specified Elasticsearch domain.</p>
                */
            Options: ElasticsearchClusterConfig | undefined;
            /**
                * <p> Specifies the status of the configuration for the specified Elasticsearch domain.</p>
                */
            Status: OptionStatus | undefined;
    }
    export namespace ElasticsearchClusterConfigStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ElasticsearchClusterConfigStatus) => any;
    }
    /**
        * <p> Status of the Elasticsearch version options for the specified Elasticsearch domain.</p>
        */
    export interface ElasticsearchVersionStatus {
            /**
                * <p> Specifies the Elasticsearch version for the specified Elasticsearch domain.</p>
                */
            Options: string | undefined;
            /**
                * <p> Specifies the status of the Elasticsearch version options for the specified Elasticsearch domain.</p>
                */
            Status: OptionStatus | undefined;
    }
    export namespace ElasticsearchVersionStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ElasticsearchVersionStatus) => any;
    }
    /**
        * <p> Status of the Encryption At Rest options for the specified Elasticsearch domain.</p>
        */
    export interface EncryptionAtRestOptionsStatus {
            /**
                * <p> Specifies the Encryption At Rest options for the specified Elasticsearch domain.</p>
                */
            Options: EncryptionAtRestOptions | undefined;
            /**
                * <p> Specifies the status of the Encryption At Rest options for the specified Elasticsearch domain.</p>
                */
            Status: OptionStatus | undefined;
    }
    export namespace EncryptionAtRestOptionsStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EncryptionAtRestOptionsStatus) => any;
    }
    /**
        * <p>The configured log publishing options for the domain and their current status.</p>
        */
    export interface LogPublishingOptionsStatus {
            /**
                * <p>The log publishing options configured for the Elasticsearch domain.</p>
                */
            Options?: Record<string, LogPublishingOption>;
            /**
                * <p>The status of the log publishing options for the Elasticsearch domain. See <code>OptionStatus</code> for the status information that's included. </p>
                */
            Status?: OptionStatus;
    }
    export namespace LogPublishingOptionsStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LogPublishingOptionsStatus) => any;
    }
    /**
        * <p>Status of the node-to-node encryption options for the specified Elasticsearch domain.</p>
        */
    export interface NodeToNodeEncryptionOptionsStatus {
            /**
                * <p>Specifies the node-to-node encryption options for the specified Elasticsearch domain.</p>
                */
            Options: NodeToNodeEncryptionOptions | undefined;
            /**
                * <p>Specifies the status of the node-to-node encryption options for the specified Elasticsearch domain.</p>
                */
            Status: OptionStatus | undefined;
    }
    export namespace NodeToNodeEncryptionOptionsStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NodeToNodeEncryptionOptionsStatus) => any;
    }
    /**
        * <p>Status of a daily automated snapshot.</p>
        */
    export interface SnapshotOptionsStatus {
            /**
                * <p>Specifies the daily snapshot options specified for the Elasticsearch domain.</p>
                */
            Options: SnapshotOptions | undefined;
            /**
                * <p>Specifies the status of a daily automated snapshot.</p>
                */
            Status: OptionStatus | undefined;
    }
    export namespace SnapshotOptionsStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SnapshotOptionsStatus) => any;
    }
    /**
        * <p> Status of the VPC options for the specified Elasticsearch domain.</p>
        */
    export interface VPCDerivedInfoStatus {
            /**
                * <p> Specifies the VPC options for the specified Elasticsearch domain.</p>
                */
            Options: VPCDerivedInfo | undefined;
            /**
                * <p> Specifies the status of the VPC options for the specified Elasticsearch domain.</p>
                */
            Status: OptionStatus | undefined;
    }
    export namespace VPCDerivedInfoStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VPCDerivedInfoStatus) => any;
    }
    /**
        * <p>The configuration of an Elasticsearch domain.</p>
        */
    export interface ElasticsearchDomainConfig {
            /**
                * <p>String of format X.Y to specify version for the Elasticsearch domain.</p>
                */
            ElasticsearchVersion?: ElasticsearchVersionStatus;
            /**
                * <p>Specifies the <code>ElasticsearchClusterConfig</code> for the Elasticsearch domain.</p>
                */
            ElasticsearchClusterConfig?: ElasticsearchClusterConfigStatus;
            /**
                * <p>Specifies the <code>EBSOptions</code> for the Elasticsearch domain.</p>
                */
            EBSOptions?: EBSOptionsStatus;
            /**
                * <p>IAM access policy as a JSON-formatted string.</p>
                */
            AccessPolicies?: AccessPoliciesStatus;
            /**
                * <p>Specifies the <code>SnapshotOptions</code> for the Elasticsearch domain.</p>
                */
            SnapshotOptions?: SnapshotOptionsStatus;
            /**
                * <p>The <code>VPCOptions</code> for the specified domain. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html" target="_blank">VPC Endpoints for Amazon Elasticsearch Service Domains</a>.</p>
                */
            VPCOptions?: VPCDerivedInfoStatus;
            /**
                * <p>The <code>CognitoOptions</code> for the specified domain. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html" target="_blank">Amazon Cognito Authentication for Kibana</a>.</p>
                */
            CognitoOptions?: CognitoOptionsStatus;
            /**
                * <p>Specifies the <code>EncryptionAtRestOptions</code> for the Elasticsearch domain.</p>
                */
            EncryptionAtRestOptions?: EncryptionAtRestOptionsStatus;
            /**
                * <p>Specifies the <code>NodeToNodeEncryptionOptions</code> for the Elasticsearch domain.</p>
                */
            NodeToNodeEncryptionOptions?: NodeToNodeEncryptionOptionsStatus;
            /**
                * <p>Specifies the <code>AdvancedOptions</code> for the domain.  See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options" target="_blank">Configuring Advanced Options</a> for more information.</p>
                */
            AdvancedOptions?: AdvancedOptionsStatus;
            /**
                * <p>Log publishing options for the given domain.</p>
                */
            LogPublishingOptions?: LogPublishingOptionsStatus;
            /**
                * <p>Specifies the <code>DomainEndpointOptions</code> for the Elasticsearch domain.</p>
                */
            DomainEndpointOptions?: DomainEndpointOptionsStatus;
            /**
                * <p>Specifies <code>AdvancedSecurityOptions</code> for the domain. </p>
                */
            AdvancedSecurityOptions?: AdvancedSecurityOptionsStatus;
            /**
                * <p>Specifies <code>AutoTuneOptions</code> for the domain. </p>
                */
            AutoTuneOptions?: AutoTuneOptionsStatus;
            /**
                * <p>Specifies change details of the domain configuration change.</p>
                */
            ChangeProgressDetails?: ChangeProgressDetails;
    }
    export namespace ElasticsearchDomainConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ElasticsearchDomainConfig) => any;
    }
    /**
        * <p>The result of a <code>DescribeElasticsearchDomainConfig</code> request. Contains the configuration information of the requested domain.</p>
        */
    export interface DescribeElasticsearchDomainConfigResponse {
            /**
                * <p>The configuration information of the domain requested in the <code>DescribeElasticsearchDomainConfig</code> request.</p>
                */
            DomainConfig: ElasticsearchDomainConfig | undefined;
    }
    export namespace DescribeElasticsearchDomainConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeElasticsearchDomainConfigResponse) => any;
    }
    /**
        * <p>Container for the parameters to the <code><a>DescribeElasticsearchDomains</a></code> operation. By default, the API returns the status of all Elasticsearch domains.</p>
        */
    export interface DescribeElasticsearchDomainsRequest {
            /**
                * <p>The Elasticsearch domains for which you want information.</p>
                */
            DomainNames: string[] | undefined;
    }
    export namespace DescribeElasticsearchDomainsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeElasticsearchDomainsRequest) => any;
    }
    /**
        * <p>The result of a <code>DescribeElasticsearchDomains</code> request. Contains the status of the specified domains or all domains owned by the account.</p>
        */
    export interface DescribeElasticsearchDomainsResponse {
            /**
                * <p>The status of the domains requested in the <code>DescribeElasticsearchDomains</code> request.</p>
                */
            DomainStatusList: ElasticsearchDomainStatus[] | undefined;
    }
    export namespace DescribeElasticsearchDomainsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeElasticsearchDomainsResponse) => any;
    }
    /**
        * <p>
        *       Container for the parameters to
        *       <code>
        *         <a>DescribeElasticsearchInstanceTypeLimits</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface DescribeElasticsearchInstanceTypeLimitsRequest {
            /**
                * <p>
                *       DomainName represents the name of the Domain that we are trying to
                *       modify. This should be present only if we are
                *       querying for Elasticsearch
                *       <code>
                *         <a>Limits</a>
                *       </code>
                *       for existing domain.
                *     </p>
                */
            DomainName?: string;
            /**
                * <p>
                *       The instance type for an Elasticsearch cluster for which Elasticsearch
                *       <code>
                *         <a>Limits</a>
                *       </code>
                *       are needed.
                *     </p>
                */
            InstanceType: ESPartitionInstanceType | string | undefined;
            /**
                * <p>
                *       Version of Elasticsearch for which
                *       <code>
                *         <a>Limits</a>
                *       </code>
                *       are needed.
                *     </p>
                */
            ElasticsearchVersion: string | undefined;
    }
    export namespace DescribeElasticsearchInstanceTypeLimitsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeElasticsearchInstanceTypeLimitsRequest) => any;
    }
    /**
        * <p>
        *       InstanceCountLimits represents the limits on number of instances that be created in Amazon Elasticsearch for
        *       given InstanceType.
        *     </p>
        */
    export interface InstanceCountLimits {
            /**
                * <p>
                *       Minimum number of Instances that can be instantiated for given InstanceType.
                *     </p>
                */
            MinimumInstanceCount?: number;
            /**
                * <p>
                *       Maximum number of Instances that can be instantiated for given InstanceType.
                *     </p>
                */
            MaximumInstanceCount?: number;
    }
    export namespace InstanceCountLimits {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceCountLimits) => any;
    }
    /**
        * <p>InstanceLimits represents the list of instance related attributes that are available for given InstanceType.
        *     </p>
        */
    export interface InstanceLimits {
            /**
                * <p>
                *       InstanceCountLimits represents the limits on number of instances that be created in Amazon Elasticsearch for
                *       given InstanceType.
                *     </p>
                */
            InstanceCountLimits?: InstanceCountLimits;
    }
    export namespace InstanceLimits {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceLimits) => any;
    }
    /**
        * <p>Limits that are applicable for given storage type.
        *     </p>
        */
    export interface StorageTypeLimit {
            /**
                * <p>
                *     Name of storage limits that are applicable for given storage type.
                *     If
                *     <code>
                *       <a>StorageType</a>
                *     </code>
                *     is ebs, following storage options are applicable
                *     <ol>
                *       <li>MinimumVolumeSize</li>
                *       Minimum amount of volume size that is applicable for given storage type.It can be empty if it is not applicable.
                *       <li>MaximumVolumeSize</li>
                *       Maximum amount of volume size that is applicable for given storage type.It can be empty if it is not applicable.
                *       <li>MaximumIops</li>
                *       Maximum amount of Iops that is applicable for given storage type.It can be empty if it is not applicable.
                *       <li>MinimumIops</li>
                *       Minimum amount of Iops that is applicable for given storage type.It can be empty if it is not applicable.
                *     </ol>
                *   </p>
                */
            LimitName?: string;
            /**
                * <p>
                *       Values for the
                *       <code>
                *         <a>StorageTypeLimit$LimitName</a>
                *       </code>
                *       .
                *     </p>
                */
            LimitValues?: string[];
    }
    export namespace StorageTypeLimit {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StorageTypeLimit) => any;
    }
    /**
        * <p>StorageTypes represents the list of storage related types and their attributes
        *       that are available for given InstanceType.
        *     </p>
        */
    export interface StorageType {
            /**
                * <p>
                *   Type of the storage.
                *   List of available storage options:
                *   <ol>
                *     <li>instance</li> Inbuilt storage available for the given Instance
                *     <li>ebs</li> Elastic block storage that would be attached to the given Instance
                *   </ol>
                *     </p>
                */
            StorageTypeName?: string;
            /**
                * <p>
                *       SubType of the given storage type.
                *       List of available sub-storage options:
                *       For "instance" storageType we wont have any storageSubType,
                *       in case of "ebs" storageType we will have following valid storageSubTypes
                *       <ol>
                *         <li>standard</li>
                *         <li>gp2</li>
                *         <li>io1</li>
                *       </ol>
                *       Refer <code><a>VolumeType</a></code> for more information regarding above EBS storage options.
                *     </p>
                */
            StorageSubTypeName?: string;
            /**
                * <p>List of limits that are applicable for given storage type.
                *     </p>
                */
            StorageTypeLimits?: StorageTypeLimit[];
    }
    export namespace StorageType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StorageType) => any;
    }
    /**
        * <p>
        *       Limits for given InstanceType and for each of it's role.
        *       <br></br>
        *       Limits contains following
        *       <code>
        *         <a>StorageTypes,</a>
        *       </code>
        *       <code>
        *         <a>InstanceLimits</a>
        *       </code>
        *       and
        *       <code>
        *         <a>AdditionalLimits</a>
        *       </code>
        *     </p>
        */
    export interface Limits {
            /**
                * <p>StorageType represents the list of storage related types and attributes
                *       that are available for given InstanceType.
                *     </p>
                */
            StorageTypes?: StorageType[];
            /**
                * <p>InstanceLimits represents the list of instance related attributes that are available for given InstanceType.
                *     </p>
                */
            InstanceLimits?: InstanceLimits;
            /**
                * <p>
                *       List of additional limits that are specific to a given InstanceType and for each of it's
                *       <code>
                *         <a>InstanceRole</a>
                *       </code>
                *       .
                *     </p>
                */
            AdditionalLimits?: AdditionalLimit[];
    }
    export namespace Limits {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Limits) => any;
    }
    /**
        * <p>
        *       Container for the parameters received from
        *       <code>
        *         <a>DescribeElasticsearchInstanceTypeLimits</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface DescribeElasticsearchInstanceTypeLimitsResponse {
            /**
                * <p>
                *       Map of Role of the Instance and Limits that are applicable.
                *       Role performed by given Instance in Elasticsearch
                *       can be one of the following:
                *       <ul>
                *         <li>data: If the given InstanceType is used as data node</li>
                *         <li>master: If the given InstanceType is used as master node</li>
                *         <li>ultra_warm: If the given InstanceType is used as warm node</li>
                *       </ul>
                *     </p>
                */
            LimitsByRole?: Record<string, Limits>;
    }
    export namespace DescribeElasticsearchInstanceTypeLimitsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeElasticsearchInstanceTypeLimitsResponse) => any;
    }
    /**
        * <p>
        *       A filter used to limit results when describing inbound or outbound cross-cluster search connections.
        *       Multiple values can be specified per filter.
        *       A cross-cluster search connection must match at least one of the specified values for it to be
        *       returned from an operation.
        *     </p>
        */
    export interface Filter {
            /**
                * <p>
                *       Specifies the name of the filter.
                *     </p>
                */
            Name?: string;
            /**
                * <p>
                *       Contains one or more values for the filter.
                *     </p>
                */
            Values?: string[];
    }
    export namespace Filter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Filter) => any;
    }
    /**
        * <p>Container for the parameters to the <code><a>DescribeInboundCrossClusterSearchConnections</a></code> operation.</p>
        */
    export interface DescribeInboundCrossClusterSearchConnectionsRequest {
            /**
                * <p>
                *       A list of filters used to match properties for inbound cross-cluster search connection.
                *       Available <code><a>Filter</a></code> names for this operation are:
                *       <ul>
                *         <li>cross-cluster-search-connection-id</li>
                *         <li>source-domain-info.domain-name</li>
                *         <li>source-domain-info.owner-id</li>
                *         <li>source-domain-info.region</li>
                *         <li>destination-domain-info.domain-name</li>
                *       </ul>
                *     </p>
                */
            Filters?: Filter[];
            /**
                * <p>Set this value to limit the number of results returned. If not specified, defaults to 100.</p>
                */
            MaxResults?: number;
            /**
                * <p> NextToken is sent in case the earlier API call results contain the NextToken. It is used for pagination.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeInboundCrossClusterSearchConnectionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeInboundCrossClusterSearchConnectionsRequest) => any;
    }
    /**
        * <p>The result of a <code><a>DescribeInboundCrossClusterSearchConnections</a></code> request. Contains the list of connections matching the filter criteria.</p>
        */
    export interface DescribeInboundCrossClusterSearchConnectionsResponse {
            /**
                * <p>Consists of list of <code><a>InboundCrossClusterSearchConnection</a></code> matching the specified filter criteria.</p>
                */
            CrossClusterSearchConnections?: InboundCrossClusterSearchConnection[];
            /**
                * <p>If more results are available and NextToken is present, make the next request to the same API with the received NextToken to paginate the remaining results.
                *     </p>
                */
            NextToken?: string;
    }
    export namespace DescribeInboundCrossClusterSearchConnectionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeInboundCrossClusterSearchConnectionsResponse) => any;
    }
    /**
        * <p>The request processing has failed because of invalid pagination token provided by customer. Returns an HTTP status code of 400. </p>
        */
    export class InvalidPaginationTokenException extends __BaseException {
            readonly name: "InvalidPaginationTokenException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidPaginationTokenException, __BaseException>);
    }
    /**
        * <p>Container for the parameters to the <code><a>DescribeOutboundCrossClusterSearchConnections</a></code> operation.</p>
        */
    export interface DescribeOutboundCrossClusterSearchConnectionsRequest {
            /**
                * <p>
                *       A list of filters used to match properties for outbound cross-cluster search connection.
                *       Available <code><a>Filter</a></code> names for this operation are:
                *       <ul>
                *         <li>cross-cluster-search-connection-id</li>
                *         <li>destination-domain-info.domain-name</li>
                *         <li>destination-domain-info.owner-id</li>
                *         <li>destination-domain-info.region</li>
                *         <li>source-domain-info.domain-name</li>
                *       </ul>
                *     </p>
                */
            Filters?: Filter[];
            /**
                * <p>Set this value to limit the number of results returned. If not specified, defaults to 100.</p>
                */
            MaxResults?: number;
            /**
                * <p> NextToken is sent in case the earlier API call results contain the NextToken. It is used for pagination.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeOutboundCrossClusterSearchConnectionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOutboundCrossClusterSearchConnectionsRequest) => any;
    }
    /**
        * <p>The result of a <code><a>DescribeOutboundCrossClusterSearchConnections</a></code> request. Contains the list of connections matching the filter criteria.</p>
        */
    export interface DescribeOutboundCrossClusterSearchConnectionsResponse {
            /**
                * <p>Consists of list of <code><a>OutboundCrossClusterSearchConnection</a></code> matching the specified filter criteria.</p>
                */
            CrossClusterSearchConnections?: OutboundCrossClusterSearchConnection[];
            /**
                * <p>If more results are available and NextToken is present, make the next request to the same API with the received NextToken to paginate the remaining results.
                *     </p>
                */
            NextToken?: string;
    }
    export namespace DescribeOutboundCrossClusterSearchConnectionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOutboundCrossClusterSearchConnectionsResponse) => any;
    }
    export enum DescribePackagesFilterName {
            PackageID = "PackageID",
            PackageName = "PackageName",
            PackageStatus = "PackageStatus"
    }
    /**
        * <p>Filter to apply in <code>DescribePackage</code> response.</p>
        */
    export interface DescribePackagesFilter {
            /**
                * <p>Any field from <code>PackageDetails</code>.</p>
                */
            Name?: DescribePackagesFilterName | string;
            /**
                * <p>A list of values for the specified field.</p>
                */
            Value?: string[];
    }
    export namespace DescribePackagesFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePackagesFilter) => any;
    }
    /**
        * <p>
        *       Container for request parameters to
        *       <code>
        *         <a>DescribePackage</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface DescribePackagesRequest {
            /**
                * <p>Only returns packages that match the <code>DescribePackagesFilterList</code> values.</p>
                */
            Filters?: DescribePackagesFilter[];
            /**
                * <p>Limits results to a maximum number of packages.</p>
                */
            MaxResults?: number;
            /**
                * <p>Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.</p>
                */
            NextToken?: string;
    }
    export namespace DescribePackagesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePackagesRequest) => any;
    }
    /**
        * <p>
        *       Container for response returned by
        *       <code>
        *         <a>DescribePackages</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface DescribePackagesResponse {
            /**
                * <p>List of <code>PackageDetails</code> objects.</p>
                */
            PackageDetailsList?: PackageDetails[];
            NextToken?: string;
    }
    export namespace DescribePackagesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePackagesResponse) => any;
    }
    /**
        * <p>Container for parameters to <code>DescribeReservedElasticsearchInstanceOfferings</code></p>
        */
    export interface DescribeReservedElasticsearchInstanceOfferingsRequest {
            /**
                * <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p>
                */
            ReservedElasticsearchInstanceOfferingId?: string;
            /**
                * <p>Set this value to limit the number of results returned. If not specified, defaults to 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>NextToken should be sent in case if earlier API call produced result
                * 		containing NextToken. It is used for pagination.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeReservedElasticsearchInstanceOfferingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReservedElasticsearchInstanceOfferingsRequest) => any;
    }
    export type ReservedElasticsearchInstancePaymentOption = "ALL_UPFRONT" | "NO_UPFRONT" | "PARTIAL_UPFRONT";
    /**
        * <p>Contains the specific price and frequency of a recurring charges for a reserved Elasticsearch instance, or for a reserved Elasticsearch instance offering.</p>
        */
    export interface RecurringCharge {
            /**
                * <p>The monetary amount of the recurring charge.</p>
                */
            RecurringChargeAmount?: number;
            /**
                * <p>The frequency of the recurring charge.</p>
                */
            RecurringChargeFrequency?: string;
    }
    export namespace RecurringCharge {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RecurringCharge) => any;
    }
    /**
        * <p>Details of a reserved Elasticsearch instance offering.</p>
        */
    export interface ReservedElasticsearchInstanceOffering {
            /**
                * <p>The Elasticsearch reserved instance offering identifier.</p>
                */
            ReservedElasticsearchInstanceOfferingId?: string;
            /**
                * <p>The Elasticsearch instance type offered by the reserved instance offering.</p>
                */
            ElasticsearchInstanceType?: ESPartitionInstanceType | string;
            /**
                * <p>The duration, in seconds, for which the offering will reserve the Elasticsearch instance.</p>
                */
            Duration?: number;
            /**
                * <p>The upfront fixed charge you will pay to purchase the specific reserved Elasticsearch instance offering. </p>
                */
            FixedPrice?: number;
            /**
                * <p>The rate you are charged for each hour the domain that is using the offering is running.</p>
                */
            UsagePrice?: number;
            /**
                * <p>The currency code for the reserved Elasticsearch instance offering.</p>
                */
            CurrencyCode?: string;
            /**
                * <p>Payment option for the reserved Elasticsearch instance offering</p>
                */
            PaymentOption?: ReservedElasticsearchInstancePaymentOption | string;
            /**
                * <p>The charge to your account regardless of whether you are creating any domains using the instance offering.</p>
                */
            RecurringCharges?: RecurringCharge[];
    }
    export namespace ReservedElasticsearchInstanceOffering {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReservedElasticsearchInstanceOffering) => any;
    }
    /**
        * <p>Container for results from <code>DescribeReservedElasticsearchInstanceOfferings</code></p>
        */
    export interface DescribeReservedElasticsearchInstanceOfferingsResponse {
            /**
                * <p>Provides an identifier to allow retrieval of paginated results.</p>
                */
            NextToken?: string;
            /**
                * <p>List of reserved Elasticsearch instance offerings</p>
                */
            ReservedElasticsearchInstanceOfferings?: ReservedElasticsearchInstanceOffering[];
    }
    export namespace DescribeReservedElasticsearchInstanceOfferingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReservedElasticsearchInstanceOfferingsResponse) => any;
    }
    /**
        * <p>Container for parameters to <code>DescribeReservedElasticsearchInstances</code></p>
        */
    export interface DescribeReservedElasticsearchInstancesRequest {
            /**
                * <p>The reserved instance identifier filter value. Use this parameter to show only the reservation that matches the specified reserved Elasticsearch instance ID.</p>
                */
            ReservedElasticsearchInstanceId?: string;
            /**
                * <p>Set this value to limit the number of results returned. If not specified, defaults to 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>NextToken should be sent in case if earlier API call produced result
                * 		containing NextToken. It is used for pagination.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeReservedElasticsearchInstancesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReservedElasticsearchInstancesRequest) => any;
    }
    /**
        * <p>Details of a reserved Elasticsearch instance.</p>
        */
    export interface ReservedElasticsearchInstance {
            /**
                * <p>The customer-specified identifier to track this reservation.</p>
                */
            ReservationName?: string;
            /**
                * <p>The unique identifier for the reservation.</p>
                */
            ReservedElasticsearchInstanceId?: string;
            /**
                * <p>The offering identifier.</p>
                */
            ReservedElasticsearchInstanceOfferingId?: string;
            /**
                * <p>The Elasticsearch instance type offered by the reserved instance offering.</p>
                */
            ElasticsearchInstanceType?: ESPartitionInstanceType | string;
            /**
                * <p>The time the reservation started.</p>
                */
            StartTime?: Date;
            /**
                * <p>The duration, in seconds, for which the Elasticsearch instance is reserved.</p>
                */
            Duration?: number;
            /**
                * <p>The upfront fixed charge you will paid to purchase the specific reserved Elasticsearch instance offering. </p>
                */
            FixedPrice?: number;
            /**
                * <p>The rate you are charged for each hour for the domain that is using this reserved instance.</p>
                */
            UsagePrice?: number;
            /**
                * <p>The currency code for the reserved Elasticsearch instance offering.</p>
                */
            CurrencyCode?: string;
            /**
                * <p>The number of Elasticsearch instances that have been reserved.</p>
                */
            ElasticsearchInstanceCount?: number;
            /**
                * <p>The state of the reserved Elasticsearch instance.</p>
                */
            State?: string;
            /**
                * <p>The payment option as defined in the reserved Elasticsearch instance offering.</p>
                */
            PaymentOption?: ReservedElasticsearchInstancePaymentOption | string;
            /**
                * <p>The charge to your account regardless of whether you are creating any domains using the instance offering.</p>
                */
            RecurringCharges?: RecurringCharge[];
    }
    export namespace ReservedElasticsearchInstance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReservedElasticsearchInstance) => any;
    }
    /**
        * <p>Container for results from <code>DescribeReservedElasticsearchInstances</code></p>
        */
    export interface DescribeReservedElasticsearchInstancesResponse {
            /**
                * <p>Provides an identifier to allow retrieval of paginated results.</p>
                */
            NextToken?: string;
            /**
                * <p>List of reserved Elasticsearch instances.</p>
                */
            ReservedElasticsearchInstances?: ReservedElasticsearchInstance[];
    }
    export namespace DescribeReservedElasticsearchInstancesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReservedElasticsearchInstancesResponse) => any;
    }
    /**
        * <p>
        *       Container for request parameters to
        *       <code>
        *         <a>DissociatePackage</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface DissociatePackageRequest {
            /**
                * <p>Internal ID of the package that you want to associate with a domain. Use <code>DescribePackages</code> to find this value.</p>
                */
            PackageID: string | undefined;
            /**
                * <p>Name of the domain that you want to associate the package with.</p>
                */
            DomainName: string | undefined;
    }
    export namespace DissociatePackageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DissociatePackageRequest) => any;
    }
    /**
        * <p>
        *       Container for response returned by
        *       <code>
        *         <a>DissociatePackage</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface DissociatePackageResponse {
            /**
                * <p><code>DomainPackageDetails</code></p>
                */
            DomainPackageDetails?: DomainPackageDetails;
    }
    export namespace DissociatePackageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DissociatePackageResponse) => any;
    }
    /**
        * <p>
        *       Container for request parameters to
        *       <code>
        *         <a>GetCompatibleElasticsearchVersions</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface GetCompatibleElasticsearchVersionsRequest {
            /**
                * <p>The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
                */
            DomainName?: string;
    }
    export namespace GetCompatibleElasticsearchVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCompatibleElasticsearchVersionsRequest) => any;
    }
    /**
        * <p>
        *       A map from an
        *       <code>
        *         <a>ElasticsearchVersion</a>
        *       </code>
        *       to a list of compatible
        *       <code>
        *         <a>ElasticsearchVersion</a>
        *       </code>
        *       s to which the domain can be upgraded.
        *     </p>
        */
    export interface CompatibleVersionsMap {
            /**
                * <p>The current version of Elasticsearch on which a domain is.</p>
                */
            SourceVersion?: string;
            /**
                * <p>List of supported elastic search versions.
                *     </p>
                */
            TargetVersions?: string[];
    }
    export namespace CompatibleVersionsMap {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CompatibleVersionsMap) => any;
    }
    /**
        * <p>
        *       Container for response returned by
        *       <code>
        *         <a>GetCompatibleElasticsearchVersions</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface GetCompatibleElasticsearchVersionsResponse {
            /**
                * <p>
                *       A map of compatible Elasticsearch versions returned as part of the
                *       <code>
                *         <a>GetCompatibleElasticsearchVersions</a>
                *       </code>
                *       operation.
                *     </p>
                */
            CompatibleElasticsearchVersions?: CompatibleVersionsMap[];
    }
    export namespace GetCompatibleElasticsearchVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCompatibleElasticsearchVersionsResponse) => any;
    }
    /**
        * <p>
        *       Container for request parameters to
        *       <code>
        *         <a>GetPackageVersionHistory</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface GetPackageVersionHistoryRequest {
            /**
                * <p>Returns an audit history of versions of the package.</p>
                */
            PackageID: string | undefined;
            /**
                * <p>Limits results to a maximum number of versions.</p>
                */
            MaxResults?: number;
            /**
                * <p>Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.</p>
                */
            NextToken?: string;
    }
    export namespace GetPackageVersionHistoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPackageVersionHistoryRequest) => any;
    }
    /**
        * <p>Details of a package version.</p>
        */
    export interface PackageVersionHistory {
            /**
                * <p>Version of the package.</p>
                */
            PackageVersion?: string;
            /**
                * <p>A message associated with the version.</p>
                */
            CommitMessage?: string;
            /**
                * <p>Timestamp which tells creation time of the package version.</p>
                */
            CreatedAt?: Date;
    }
    export namespace PackageVersionHistory {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageVersionHistory) => any;
    }
    /**
        * <p>
        *       Container for response returned by
        *       <code>
        *         <a>GetPackageVersionHistory</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface GetPackageVersionHistoryResponse {
            PackageID?: string;
            /**
                * <p>List of <code>PackageVersionHistory</code> objects.</p>
                */
            PackageVersionHistoryList?: PackageVersionHistory[];
            NextToken?: string;
    }
    export namespace GetPackageVersionHistoryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPackageVersionHistoryResponse) => any;
    }
    /**
        * <p>
        *       Container for request parameters to
        *       <code>
        *         <a>GetUpgradeHistory</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface GetUpgradeHistoryRequest {
            /**
                * <p>The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
                */
            DomainName: string | undefined;
            /**
                * <p>
                *       Set this value to limit the number of results returned.
                *     </p>
                */
            MaxResults?: number;
            /**
                * <p>
                *       Paginated APIs accepts NextToken input to returns next page results and provides
                *       a NextToken output in the response which can be used by the client to retrieve more results.
                *     </p>
                */
            NextToken?: string;
    }
    export namespace GetUpgradeHistoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUpgradeHistoryRequest) => any;
    }
    export type UpgradeStep = "PRE_UPGRADE_CHECK" | "SNAPSHOT" | "UPGRADE";
    export type UpgradeStatus = "FAILED" | "IN_PROGRESS" | "SUCCEEDED" | "SUCCEEDED_WITH_ISSUES";
    /**
        * <p>Represents a single step of the Upgrade or Upgrade Eligibility Check workflow.</p>
        */
    export interface UpgradeStepItem {
            /**
                * <p>
                *       Represents one of 3 steps that an Upgrade or Upgrade Eligibility Check does through:
                *       <ul>
                *         <li>PreUpgradeCheck</li>
                *         <li>Snapshot</li>
                *         <li>Upgrade</li>
                *       </ul>
                *     </p>
                */
            UpgradeStep?: UpgradeStep | string;
            /**
                * <p>
                *       The status of a particular step during an upgrade. The status can take one of the following values:
                *       <ul>
                *         <li>In Progress</li>
                *         <li>Succeeded</li>
                *         <li>Succeeded with Issues</li>
                *         <li>Failed</li>
                *       </ul>
                *     </p>
                */
            UpgradeStepStatus?: UpgradeStatus | string;
            /**
                * <p>A list of strings containing detailed information about the errors encountered in a particular step.</p>
                */
            Issues?: string[];
            /**
                * <p>The Floating point value representing progress percentage of a particular step.</p>
                */
            ProgressPercent?: number;
    }
    export namespace UpgradeStepItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpgradeStepItem) => any;
    }
    /**
        * <p>History of the last 10 Upgrades and Upgrade Eligibility Checks.</p>
        */
    export interface UpgradeHistory {
            /**
                * <p>A string that describes the update briefly</p>
                */
            UpgradeName?: string;
            /**
                * <p>UTC Timestamp at which the Upgrade API call was made in "yyyy-MM-ddTHH:mm:ssZ" format.</p>
                */
            StartTimestamp?: Date;
            /**
                * <p>
                *       The overall status of the update. The status can take one of the following values:
                *       <ul>
                *         <li>In Progress</li>
                *         <li>Succeeded</li>
                *         <li>Succeeded with Issues</li>
                *         <li>Failed</li>
                *       </ul>
                *     </p>
                */
            UpgradeStatus?: UpgradeStatus | string;
            /**
                * <p>
                *       A list of
                *       <code>
                *         <a>UpgradeStepItem</a>
                *       </code>
                *       s representing information about each step performed as pard of a specific Upgrade or Upgrade Eligibility Check.
                *     </p>
                */
            StepsList?: UpgradeStepItem[];
    }
    export namespace UpgradeHistory {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpgradeHistory) => any;
    }
    /**
        * <p>
        *       Container for response returned by
        *       <code>
        *         <a>GetUpgradeHistory</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface GetUpgradeHistoryResponse {
            /**
                * <p>
                *       A list of
                *       <code>
                *         <a>UpgradeHistory</a>
                *       </code>
                *       objects corresponding to each Upgrade or Upgrade Eligibility Check performed on a domain returned as part of
                *       <code>
                *         <a>GetUpgradeHistoryResponse</a>
                *       </code>
                *       object.
                *     </p>
                */
            UpgradeHistories?: UpgradeHistory[];
            /**
                * <p>Pagination token that needs to be supplied to the next call to get the next page of results</p>
                */
            NextToken?: string;
    }
    export namespace GetUpgradeHistoryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUpgradeHistoryResponse) => any;
    }
    /**
        * <p>
        *       Container for request parameters to
        *       <code>
        *         <a>GetUpgradeStatus</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface GetUpgradeStatusRequest {
            /**
                * <p>The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
                */
            DomainName: string | undefined;
    }
    export namespace GetUpgradeStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUpgradeStatusRequest) => any;
    }
    /**
        * <p>
        *       Container for response returned by
        *       <code>
        *         <a>GetUpgradeStatus</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface GetUpgradeStatusResponse {
            /**
                * <p>
                *       Represents one of 3 steps that an Upgrade or Upgrade Eligibility Check does through:
                *       <ul>
                *         <li>PreUpgradeCheck</li>
                *         <li>Snapshot</li>
                *         <li>Upgrade</li>
                *       </ul>
                *     </p>
                */
            UpgradeStep?: UpgradeStep | string;
            /**
                * <p>
                *       One of 4 statuses that a step can go through returned as part of the
                *       <code>
                *         <a>GetUpgradeStatusResponse</a>
                *       </code>
                *       object. The status can take one of the following values:
                *       <ul>
                *         <li>In Progress</li>
                *         <li>Succeeded</li>
                *         <li>Succeeded with Issues</li>
                *         <li>Failed</li>
                *       </ul>
                *     </p>
                */
            StepStatus?: UpgradeStatus | string;
            /**
                * <p>A string that describes the update briefly</p>
                */
            UpgradeName?: string;
    }
    export namespace GetUpgradeStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUpgradeStatusResponse) => any;
    }
    export enum EngineType {
            Elasticsearch = "Elasticsearch",
            OpenSearch = "OpenSearch"
    }
    /**
        * <p> Container for the parameters to the <code><a>ListDomainNames</a></code> operation.</p>
        */
    export interface ListDomainNamesRequest {
            /**
                * <p> Optional parameter to filter the output by domain engine type. Acceptable values are 'Elasticsearch' and 'OpenSearch'. </p>
                */
            EngineType?: EngineType | string;
    }
    export namespace ListDomainNamesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDomainNamesRequest) => any;
    }
    export interface DomainInfo {
            /**
                * <p> Specifies the <code>DomainName</code>.</p>
                */
            DomainName?: string;
            /**
                * <p> Specifies the <code>EngineType</code> of the domain.</p>
                */
            EngineType?: EngineType | string;
    }
    export namespace DomainInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainInfo) => any;
    }
    /**
        * <p>The result of a <code>ListDomainNames</code> operation. Contains the names of all domains owned by this account and their respective engine types.</p>
        */
    export interface ListDomainNamesResponse {
            /**
                * <p>List of domain names and respective engine types.</p>
                */
            DomainNames?: DomainInfo[];
    }
    export namespace ListDomainNamesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDomainNamesResponse) => any;
    }
    /**
        * <p>
        *       Container for request parameters to
        *       <code>
        *         <a>ListDomainsForPackage</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface ListDomainsForPackageRequest {
            /**
                * <p>The package for which to list domains.</p>
                */
            PackageID: string | undefined;
            /**
                * <p>Limits results to a maximum number of domains.</p>
                */
            MaxResults?: number;
            /**
                * <p>Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.</p>
                */
            NextToken?: string;
    }
    export namespace ListDomainsForPackageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDomainsForPackageRequest) => any;
    }
    /**
        * <p>
        *       Container for response parameters to
        *       <code>
        *         <a>ListDomainsForPackage</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface ListDomainsForPackageResponse {
            /**
                * <p>List of <code>DomainPackageDetails</code> objects.</p>
                */
            DomainPackageDetailsList?: DomainPackageDetails[];
            NextToken?: string;
    }
    export namespace ListDomainsForPackageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDomainsForPackageResponse) => any;
    }
    /**
        * <p>
        *       Container for the parameters to the
        *       <code>
        *         <a>ListElasticsearchInstanceTypes</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface ListElasticsearchInstanceTypesRequest {
            /**
                * <p>Version of Elasticsearch for which list of supported elasticsearch
                *       instance types are needed.
                *     </p>
                */
            ElasticsearchVersion: string | undefined;
            /**
                * <p>DomainName represents the name of the Domain that we are trying to modify. This should be present only if we are
                *       querying for list of available Elasticsearch instance types when modifying existing domain.
                *     </p>
                */
            DomainName?: string;
            /**
                * <p>
                *     Set this value to limit the number of results returned.
                *     Value provided must be greater than 30 else it wont be honored.
                *   </p>
                */
            MaxResults?: number;
            /**
                * <p>NextToken should be sent in case if earlier API call produced result
                *       containing NextToken. It is used for pagination.
                *     </p>
                */
            NextToken?: string;
    }
    export namespace ListElasticsearchInstanceTypesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListElasticsearchInstanceTypesRequest) => any;
    }
    /**
        * <p>
        *       Container for the parameters returned by
        *       <code>
        *         <a>ListElasticsearchInstanceTypes</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface ListElasticsearchInstanceTypesResponse {
            /**
                * <p>
                *       List of instance types supported by Amazon Elasticsearch service for
                *       given
                *       <code>
                *         <a>ElasticsearchVersion</a>
                *       </code>
                *     </p>
                */
            ElasticsearchInstanceTypes?: (ESPartitionInstanceType | string)[];
            /**
                * <p>In case if there are more results available NextToken would be
                *       present, make further request to the same API with
                *       received NextToken to paginate remaining results.
                *     </p>
                */
            NextToken?: string;
    }
    export namespace ListElasticsearchInstanceTypesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListElasticsearchInstanceTypesResponse) => any;
    }
    /**
        * <p>
        *       Container for the parameters to the
        *       <code>
        *         <a>ListElasticsearchVersions</a>
        *       </code>
        *       operation.
        *       <p>
        *         Use
        *         <code>
        *           <a>MaxResults</a>
        *         </code>
        *         to control the maximum number of results to retrieve in a single
        *         call.
        *       </p>
        *       <p>
        *         Use
        *         <code>
        *           <a>NextToken</a>
        *         </code>
        *         in response to retrieve more results. If the received response does
        *         not contain a NextToken, then there are no more results to retrieve.
        *       </p>
        *     </p>
        */
    export interface ListElasticsearchVersionsRequest {
            /**
                * <p>
                *       Set this value to limit the number of results returned.
                *       Value provided must be greater than 10 else it wont be honored.
                *     </p>
                */
            MaxResults?: number;
            /**
                * <p>
                *       Paginated APIs accepts NextToken input to returns next page results and provides
                *       a NextToken output in the response which can be used by the client to retrieve more results.
                *     </p>
                */
            NextToken?: string;
    }
    export namespace ListElasticsearchVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListElasticsearchVersionsRequest) => any;
    }
    /**
        * <p>
        *       Container for the parameters for response received from
        *       <code>
        *         <a>ListElasticsearchVersions</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface ListElasticsearchVersionsResponse {
            /**
                * <p>List of supported elastic search versions.
                *     </p>
                */
            ElasticsearchVersions?: string[];
            /**
                * <p>
                *       Paginated APIs accepts NextToken input to returns next page results and provides
                *       a NextToken output in the response which can be used by the client to retrieve more results.
                *     </p>
                */
            NextToken?: string;
    }
    export namespace ListElasticsearchVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListElasticsearchVersionsResponse) => any;
    }
    /**
        * <p>
        *       Container for request parameters to
        *       <code>
        *         <a>ListPackagesForDomain</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface ListPackagesForDomainRequest {
            /**
                * <p>The name of the domain for which you want to list associated packages.</p>
                */
            DomainName: string | undefined;
            /**
                * <p>Limits results to a maximum number of packages.</p>
                */
            MaxResults?: number;
            /**
                * <p>Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.</p>
                */
            NextToken?: string;
    }
    export namespace ListPackagesForDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPackagesForDomainRequest) => any;
    }
    /**
        * <p>
        *       Container for response parameters to
        *       <code>
        *         <a>ListPackagesForDomain</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface ListPackagesForDomainResponse {
            /**
                * <p>List of <code>DomainPackageDetails</code> objects.</p>
                */
            DomainPackageDetailsList?: DomainPackageDetails[];
            /**
                * <p>Pagination token that needs to be supplied to the next call to get the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListPackagesForDomainResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPackagesForDomainResponse) => any;
    }
    /**
        * <p>Container for the parameters to the <code><a>ListTags</a></code> operation. Specify the <code>ARN</code> for the Elasticsearch domain to which the tags are attached that you want to view are attached.</p>
        */
    export interface ListTagsRequest {
            /**
                * <p> Specify the <code>ARN</code> for the Elasticsearch domain to which the tags are attached that you want to view.</p>
                */
            ARN: string | undefined;
    }
    export namespace ListTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsRequest) => any;
    }
    /**
        * <p>The result of a <code>ListTags</code> operation. Contains tags for all requested Elasticsearch domains.</p>
        */
    export interface ListTagsResponse {
            /**
                * <p> List of <code>Tag</code> for the requested Elasticsearch domain.</p>
                */
            TagList?: Tag[];
    }
    export namespace ListTagsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsResponse) => any;
    }
    /**
        * <p>Container for parameters to <code>PurchaseReservedElasticsearchInstanceOffering</code></p>
        */
    export interface PurchaseReservedElasticsearchInstanceOfferingRequest {
            /**
                * <p>The ID of the reserved Elasticsearch instance offering to purchase.</p>
                */
            ReservedElasticsearchInstanceOfferingId: string | undefined;
            /**
                * <p>A customer-specified identifier to track this reservation.</p>
                */
            ReservationName: string | undefined;
            /**
                * <p>The number of Elasticsearch instances to reserve.</p>
                */
            InstanceCount?: number;
    }
    export namespace PurchaseReservedElasticsearchInstanceOfferingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PurchaseReservedElasticsearchInstanceOfferingRequest) => any;
    }
    /**
        * <p>Represents the output of a <code>PurchaseReservedElasticsearchInstanceOffering</code> operation.</p>
        */
    export interface PurchaseReservedElasticsearchInstanceOfferingResponse {
            /**
                * <p>Details of the reserved Elasticsearch instance which was purchased.</p>
                */
            ReservedElasticsearchInstanceId?: string;
            /**
                * <p>The customer-specified identifier used to track this reservation.</p>
                */
            ReservationName?: string;
    }
    export namespace PurchaseReservedElasticsearchInstanceOfferingResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PurchaseReservedElasticsearchInstanceOfferingResponse) => any;
    }
    /**
        * <p>Container for the parameters to the <code><a>RejectInboundCrossClusterSearchConnection</a></code> operation.</p>
        */
    export interface RejectInboundCrossClusterSearchConnectionRequest {
            /**
                * <p>The id of the inbound connection that you want to reject.</p>
                */
            CrossClusterSearchConnectionId: string | undefined;
    }
    export namespace RejectInboundCrossClusterSearchConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RejectInboundCrossClusterSearchConnectionRequest) => any;
    }
    /**
        * <p>The result of a <code><a>RejectInboundCrossClusterSearchConnection</a></code> operation. Contains details of rejected inbound connection.</p>
        */
    export interface RejectInboundCrossClusterSearchConnectionResponse {
            /**
                * <p>Specifies the <code><a>InboundCrossClusterSearchConnection</a></code> of rejected inbound connection. </p>
                */
            CrossClusterSearchConnection?: InboundCrossClusterSearchConnection;
    }
    export namespace RejectInboundCrossClusterSearchConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RejectInboundCrossClusterSearchConnectionResponse) => any;
    }
    /**
        * <p>Container for the parameters to the <code><a>RemoveTags</a></code> operation. Specify the <code>ARN</code> for the Elasticsearch domain from which you want to remove the specified <code>TagKey</code>.</p>
        */
    export interface RemoveTagsRequest {
            /**
                * <p>Specifies the <code>ARN</code> for the Elasticsearch domain from which you want to delete the specified tags.</p>
                */
            ARN: string | undefined;
            /**
                * <p>Specifies the <code>TagKey</code> list which you want to remove from the Elasticsearch domain.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace RemoveTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveTagsRequest) => any;
    }
    /**
        * <p>Container for the parameters to the <code><a>StartElasticsearchServiceSoftwareUpdate</a></code> operation. Specifies the name of the Elasticsearch domain that you wish to schedule a service software update on.</p>
        */
    export interface StartElasticsearchServiceSoftwareUpdateRequest {
            /**
                * <p>The name of the domain that you want to update to the latest service software.</p>
                */
            DomainName: string | undefined;
    }
    export namespace StartElasticsearchServiceSoftwareUpdateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartElasticsearchServiceSoftwareUpdateRequest) => any;
    }
    /**
        * <p>The result of a <code>StartElasticsearchServiceSoftwareUpdate</code> operation. Contains the status of the update.</p>
        */
    export interface StartElasticsearchServiceSoftwareUpdateResponse {
            /**
                * <p>The current status of the Elasticsearch service software update.</p>
                */
            ServiceSoftwareOptions?: ServiceSoftwareOptions;
    }
    export namespace StartElasticsearchServiceSoftwareUpdateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartElasticsearchServiceSoftwareUpdateResponse) => any;
    }
    /**
        * <p>Container for the parameters to the <code><a>UpdateElasticsearchDomain</a></code> operation. Specifies the type and number of instances in the domain cluster.</p>
        */
    export interface UpdateElasticsearchDomainConfigRequest {
            /**
                * <p>The name of the Elasticsearch domain that you are updating. </p>
                */
            DomainName: string | undefined;
            /**
                * <p>The type and number of instances to instantiate for the domain cluster.</p>
                */
            ElasticsearchClusterConfig?: ElasticsearchClusterConfig;
            /**
                * <p>Specify the type and size of the EBS volume that you want to use. </p>
                */
            EBSOptions?: EBSOptions;
            /**
                * <p>Option to set the time, in UTC format, for the daily automated snapshot. Default value is <code>0</code> hours. </p>
                */
            SnapshotOptions?: SnapshotOptions;
            /**
                * <p>Options to specify the subnets and security groups for VPC endpoint. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html#es-creating-vpc" target="_blank">Creating a VPC</a> in <i>VPC Endpoints for Amazon Elasticsearch Service Domains</i></p>
                */
            VPCOptions?: VPCOptions;
            /**
                * <p>Options to specify the Cognito user and identity pools for Kibana authentication. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html" target="_blank">Amazon Cognito Authentication for Kibana</a>.</p>
                */
            CognitoOptions?: CognitoOptions;
            /**
                * <p>Modifies the advanced option to allow references to indices in an HTTP request body.  Must be <code>false</code> when configuring access to individual sub-resources.  By default, the value is <code>true</code>.
                *        See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options" target="_blank">Configuration Advanced Options</a> for more information.</p>
                */
            AdvancedOptions?: Record<string, string>;
            /**
                * <p>IAM access policy as a JSON-formatted string.</p>
                */
            AccessPolicies?: string;
            /**
                * <p>Map of <code>LogType</code> and <code>LogPublishingOption</code>, each containing options to publish a given type of Elasticsearch log.</p>
                */
            LogPublishingOptions?: Record<string, LogPublishingOption>;
            /**
                * <p>Options to specify configuration that will be applied to the domain endpoint.</p>
                */
            DomainEndpointOptions?: DomainEndpointOptions;
            /**
                * <p>Specifies advanced security options.</p>
                */
            AdvancedSecurityOptions?: AdvancedSecurityOptionsInput;
            /**
                * <p>Specifies the NodeToNodeEncryptionOptions.</p>
                */
            NodeToNodeEncryptionOptions?: NodeToNodeEncryptionOptions;
            /**
                * <p>Specifies the Encryption At Rest Options.</p>
                */
            EncryptionAtRestOptions?: EncryptionAtRestOptions;
            /**
                * <p>Specifies Auto-Tune options.</p>
                */
            AutoTuneOptions?: AutoTuneOptions;
            /**
                * <p>
                *            This flag, when set to True, specifies whether the <code>UpdateElasticsearchDomain</code> request should return the results of validation checks without actually applying the change.
                *            This flag, when set to True, specifies the deployment mechanism through which the update shall be applied on the domain.
                *            This will not actually perform the Update.
                *        </p>
                */
            DryRun?: boolean;
    }
    export namespace UpdateElasticsearchDomainConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateElasticsearchDomainConfigRequest) => any;
    }
    export interface DryRunResults {
            /**
                * <p>
                *             Specifies the deployment mechanism through which the update shall be applied on the domain.
                *             Possible responses are
                *             <code>Blue/Green</code> (The update will require a blue/green deployment.)
                *             <code>DynamicUpdate</code> (The update can be applied in-place without a Blue/Green deployment required.)
                *             <code>Undetermined</code> (The domain is undergoing an update which needs to complete before the deployment type can be predicted.)
                *             <code>None</code> (The configuration change matches the current configuration and will not result in any update.)
                *         </p>
                */
            DeploymentType?: string;
            /**
                * <p>Contains an optional message associated with the DryRunResults.</p>
                */
            Message?: string;
    }
    export namespace DryRunResults {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DryRunResults) => any;
    }
    /**
        * <p>The result of an <code>UpdateElasticsearchDomain</code> request. Contains the status of the Elasticsearch domain being updated.</p>
        */
    export interface UpdateElasticsearchDomainConfigResponse {
            /**
                * <p>The status of the updated Elasticsearch domain. </p>
                */
            DomainConfig: ElasticsearchDomainConfig | undefined;
            /**
                * <p>Contains result of DryRun. </p>
                */
            DryRunResults?: DryRunResults;
    }
    export namespace UpdateElasticsearchDomainConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateElasticsearchDomainConfigResponse) => any;
    }
    /**
        * <p>
        *       Container for request parameters to
        *       <code>
        *         <a>UpdatePackage</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface UpdatePackageRequest {
            /**
                * <p>Unique identifier for the package.</p>
                */
            PackageID: string | undefined;
            /**
                * <p>The S3 location for importing the package specified as <code>S3BucketName</code> and <code>S3Key</code></p>
                */
            PackageSource: PackageSource | undefined;
            /**
                * <p>New description of the package.</p>
                */
            PackageDescription?: string;
            /**
                * <p>An info message for the new version which will be shown as part of <code>GetPackageVersionHistoryResponse</code>.</p>
                */
            CommitMessage?: string;
    }
    export namespace UpdatePackageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePackageRequest) => any;
    }
    /**
        * <p>
        *       Container for response returned by
        *       <code>
        *         <a>UpdatePackage</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface UpdatePackageResponse {
            /**
                * <p>Information about the package <code>PackageDetails</code>.</p>
                */
            PackageDetails?: PackageDetails;
    }
    export namespace UpdatePackageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePackageResponse) => any;
    }
    /**
        * <p>
        *       Container for request parameters to
        *       <code>
        *         <a>UpgradeElasticsearchDomain</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface UpgradeElasticsearchDomainRequest {
            /**
                * <p>The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
                */
            DomainName: string | undefined;
            /**
                * <p>The version of Elasticsearch that you intend to upgrade the domain to.</p>
                */
            TargetVersion: string | undefined;
            /**
                * <p>
                *       This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed.
                *       This will not actually perform the Upgrade.
                *     </p>
                */
            PerformCheckOnly?: boolean;
    }
    export namespace UpgradeElasticsearchDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpgradeElasticsearchDomainRequest) => any;
    }
    /**
        * <p>
        *       Container for response returned by
        *       <code>
        *         <a>UpgradeElasticsearchDomain</a>
        *       </code>
        *       operation.
        *     </p>
        */
    export interface UpgradeElasticsearchDomainResponse {
            /**
                * <p>The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
                */
            DomainName?: string;
            /**
                * <p>The version of Elasticsearch that you intend to upgrade the domain to.</p>
                */
            TargetVersion?: string;
            /**
                * <p>
                *       This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed.
                *       This will not actually perform the Upgrade.
                *     </p>
                */
            PerformCheckOnly?: boolean;
            /**
                * <p>Specifies change details of the domain configuration change.</p>
                */
            ChangeProgressDetails?: ChangeProgressDetails;
    }
    export namespace UpgradeElasticsearchDomainResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpgradeElasticsearchDomainResponse) => any;
    }
}

declare module '@aws-sdk/client-elasticsearch-service/node_modules/@aws-sdk/client-elasticsearch-service/dist-types/models/ElasticsearchServiceServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from ElasticsearchService service.
        */
    export class ElasticsearchServiceServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

