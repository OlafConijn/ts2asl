// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-inspector2' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AssociateMemberCommandInput, AssociateMemberCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/AssociateMemberCommand";
    import { BatchGetAccountStatusCommandInput, BatchGetAccountStatusCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/BatchGetAccountStatusCommand";
    import { BatchGetFreeTrialInfoCommandInput, BatchGetFreeTrialInfoCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/BatchGetFreeTrialInfoCommand";
    import { CancelFindingsReportCommandInput, CancelFindingsReportCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/CancelFindingsReportCommand";
    import { CreateFilterCommandInput, CreateFilterCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/CreateFilterCommand";
    import { CreateFindingsReportCommandInput, CreateFindingsReportCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/CreateFindingsReportCommand";
    import { DeleteFilterCommandInput, DeleteFilterCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/DeleteFilterCommand";
    import { DescribeOrganizationConfigurationCommandInput, DescribeOrganizationConfigurationCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/DescribeOrganizationConfigurationCommand";
    import { DisableCommandInput, DisableCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/DisableCommand";
    import { DisableDelegatedAdminAccountCommandInput, DisableDelegatedAdminAccountCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/DisableDelegatedAdminAccountCommand";
    import { DisassociateMemberCommandInput, DisassociateMemberCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/DisassociateMemberCommand";
    import { EnableCommandInput, EnableCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/EnableCommand";
    import { EnableDelegatedAdminAccountCommandInput, EnableDelegatedAdminAccountCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/EnableDelegatedAdminAccountCommand";
    import { GetConfigurationCommandInput, GetConfigurationCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/GetConfigurationCommand";
    import { GetDelegatedAdminAccountCommandInput, GetDelegatedAdminAccountCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/GetDelegatedAdminAccountCommand";
    import { GetFindingsReportStatusCommandInput, GetFindingsReportStatusCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/GetFindingsReportStatusCommand";
    import { GetMemberCommandInput, GetMemberCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/GetMemberCommand";
    import { ListAccountPermissionsCommandInput, ListAccountPermissionsCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListAccountPermissionsCommand";
    import { ListCoverageCommandInput, ListCoverageCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListCoverageCommand";
    import { ListCoverageStatisticsCommandInput, ListCoverageStatisticsCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListCoverageStatisticsCommand";
    import { ListDelegatedAdminAccountsCommandInput, ListDelegatedAdminAccountsCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListDelegatedAdminAccountsCommand";
    import { ListFiltersCommandInput, ListFiltersCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListFiltersCommand";
    import { ListFindingAggregationsCommandInput, ListFindingAggregationsCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListFindingAggregationsCommand";
    import { ListFindingsCommandInput, ListFindingsCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListFindingsCommand";
    import { ListMembersCommandInput, ListMembersCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListMembersCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListTagsForResourceCommand";
    import { ListUsageTotalsCommandInput, ListUsageTotalsCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListUsageTotalsCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/UntagResourceCommand";
    import { UpdateConfigurationCommandInput, UpdateConfigurationCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/UpdateConfigurationCommand";
    import { UpdateFilterCommandInput, UpdateFilterCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/UpdateFilterCommand";
    import { UpdateOrganizationConfigurationCommandInput, UpdateOrganizationConfigurationCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/UpdateOrganizationConfigurationCommand";
    import { Inspector2Client } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    /**
        * <p>Amazon Inspector is a vulnerability discovery service that automates continuous scanning for
        *          security vulnerabilities within your Amazon EC2 and Amazon ECR environments.</p>
        */
    export class Inspector2 extends Inspector2Client {
            /**
                * <p>Associates an Amazon Web Services account with an Amazon Inspector delegated administrator.</p>
                */
            associateMember(args: AssociateMemberCommandInput, options?: __HttpHandlerOptions): Promise<AssociateMemberCommandOutput>;
            associateMember(args: AssociateMemberCommandInput, cb: (err: any, data?: AssociateMemberCommandOutput) => void): void;
            associateMember(args: AssociateMemberCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateMemberCommandOutput) => void): void;
            /**
                * <p>Retrieves the Amazon Inspector status of multiple Amazon Web Services accounts within your environment.</p>
                */
            batchGetAccountStatus(args: BatchGetAccountStatusCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetAccountStatusCommandOutput>;
            batchGetAccountStatus(args: BatchGetAccountStatusCommandInput, cb: (err: any, data?: BatchGetAccountStatusCommandOutput) => void): void;
            batchGetAccountStatus(args: BatchGetAccountStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetAccountStatusCommandOutput) => void): void;
            /**
                * <p>Gets free trial status for multiple Amazon Web Services accounts.</p>
                */
            batchGetFreeTrialInfo(args: BatchGetFreeTrialInfoCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetFreeTrialInfoCommandOutput>;
            batchGetFreeTrialInfo(args: BatchGetFreeTrialInfoCommandInput, cb: (err: any, data?: BatchGetFreeTrialInfoCommandOutput) => void): void;
            batchGetFreeTrialInfo(args: BatchGetFreeTrialInfoCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetFreeTrialInfoCommandOutput) => void): void;
            /**
                * <p>Cancels the given findings report.</p>
                */
            cancelFindingsReport(args: CancelFindingsReportCommandInput, options?: __HttpHandlerOptions): Promise<CancelFindingsReportCommandOutput>;
            cancelFindingsReport(args: CancelFindingsReportCommandInput, cb: (err: any, data?: CancelFindingsReportCommandOutput) => void): void;
            cancelFindingsReport(args: CancelFindingsReportCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelFindingsReportCommandOutput) => void): void;
            /**
                * <p>Creates a filter resource using specified filter criteria.</p>
                */
            createFilter(args: CreateFilterCommandInput, options?: __HttpHandlerOptions): Promise<CreateFilterCommandOutput>;
            createFilter(args: CreateFilterCommandInput, cb: (err: any, data?: CreateFilterCommandOutput) => void): void;
            createFilter(args: CreateFilterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateFilterCommandOutput) => void): void;
            /**
                * <p>Creates a finding report.</p>
                */
            createFindingsReport(args: CreateFindingsReportCommandInput, options?: __HttpHandlerOptions): Promise<CreateFindingsReportCommandOutput>;
            createFindingsReport(args: CreateFindingsReportCommandInput, cb: (err: any, data?: CreateFindingsReportCommandOutput) => void): void;
            createFindingsReport(args: CreateFindingsReportCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateFindingsReportCommandOutput) => void): void;
            /**
                * <p>Deletes a filter resource.</p>
                */
            deleteFilter(args: DeleteFilterCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFilterCommandOutput>;
            deleteFilter(args: DeleteFilterCommandInput, cb: (err: any, data?: DeleteFilterCommandOutput) => void): void;
            deleteFilter(args: DeleteFilterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFilterCommandOutput) => void): void;
            /**
                * <p>Describe Amazon Inspector configuration settings for an Amazon Web Services organization</p>
                */
            describeOrganizationConfiguration(args: DescribeOrganizationConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DescribeOrganizationConfigurationCommandOutput>;
            describeOrganizationConfiguration(args: DescribeOrganizationConfigurationCommandInput, cb: (err: any, data?: DescribeOrganizationConfigurationCommandOutput) => void): void;
            describeOrganizationConfiguration(args: DescribeOrganizationConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeOrganizationConfigurationCommandOutput) => void): void;
            /**
                * <p>Disables Amazon Inspector scans for one or more Amazon Web Services accounts. Disabling all scan types in an account
                *          disables the Amazon Inspector service.</p>
                */
            disable(args: DisableCommandInput, options?: __HttpHandlerOptions): Promise<DisableCommandOutput>;
            disable(args: DisableCommandInput, cb: (err: any, data?: DisableCommandOutput) => void): void;
            disable(args: DisableCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisableCommandOutput) => void): void;
            /**
                * <p>Disables the Amazon Inspector delegated administrator for your organization.</p>
                */
            disableDelegatedAdminAccount(args: DisableDelegatedAdminAccountCommandInput, options?: __HttpHandlerOptions): Promise<DisableDelegatedAdminAccountCommandOutput>;
            disableDelegatedAdminAccount(args: DisableDelegatedAdminAccountCommandInput, cb: (err: any, data?: DisableDelegatedAdminAccountCommandOutput) => void): void;
            disableDelegatedAdminAccount(args: DisableDelegatedAdminAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisableDelegatedAdminAccountCommandOutput) => void): void;
            /**
                * <p>Disassociates a member account from an Amazon Inspector delegated administrator.</p>
                */
            disassociateMember(args: DisassociateMemberCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateMemberCommandOutput>;
            disassociateMember(args: DisassociateMemberCommandInput, cb: (err: any, data?: DisassociateMemberCommandOutput) => void): void;
            disassociateMember(args: DisassociateMemberCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateMemberCommandOutput) => void): void;
            /**
                * <p>Enables Amazon Inspector scans for one or more Amazon Web Services accounts.</p>
                */
            enable(args: EnableCommandInput, options?: __HttpHandlerOptions): Promise<EnableCommandOutput>;
            enable(args: EnableCommandInput, cb: (err: any, data?: EnableCommandOutput) => void): void;
            enable(args: EnableCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: EnableCommandOutput) => void): void;
            /**
                * <p>Enables the Amazon Inspector delegated administrator for your Organizations organization.</p>
                */
            enableDelegatedAdminAccount(args: EnableDelegatedAdminAccountCommandInput, options?: __HttpHandlerOptions): Promise<EnableDelegatedAdminAccountCommandOutput>;
            enableDelegatedAdminAccount(args: EnableDelegatedAdminAccountCommandInput, cb: (err: any, data?: EnableDelegatedAdminAccountCommandOutput) => void): void;
            enableDelegatedAdminAccount(args: EnableDelegatedAdminAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: EnableDelegatedAdminAccountCommandOutput) => void): void;
            /**
                * <p>Retrieves setting configurations for Inspector scans.</p>
                */
            getConfiguration(args: GetConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<GetConfigurationCommandOutput>;
            getConfiguration(args: GetConfigurationCommandInput, cb: (err: any, data?: GetConfigurationCommandOutput) => void): void;
            getConfiguration(args: GetConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConfigurationCommandOutput) => void): void;
            /**
                * <p>Retrieves information about the Amazon Inspector delegated administrator for your
                *          organization.</p>
                */
            getDelegatedAdminAccount(args: GetDelegatedAdminAccountCommandInput, options?: __HttpHandlerOptions): Promise<GetDelegatedAdminAccountCommandOutput>;
            getDelegatedAdminAccount(args: GetDelegatedAdminAccountCommandInput, cb: (err: any, data?: GetDelegatedAdminAccountCommandOutput) => void): void;
            getDelegatedAdminAccount(args: GetDelegatedAdminAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDelegatedAdminAccountCommandOutput) => void): void;
            /**
                * <p>Gets the status of a findings report.</p>
                */
            getFindingsReportStatus(args: GetFindingsReportStatusCommandInput, options?: __HttpHandlerOptions): Promise<GetFindingsReportStatusCommandOutput>;
            getFindingsReportStatus(args: GetFindingsReportStatusCommandInput, cb: (err: any, data?: GetFindingsReportStatusCommandOutput) => void): void;
            getFindingsReportStatus(args: GetFindingsReportStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetFindingsReportStatusCommandOutput) => void): void;
            /**
                * <p>Gets member information for your organization.</p>
                */
            getMember(args: GetMemberCommandInput, options?: __HttpHandlerOptions): Promise<GetMemberCommandOutput>;
            getMember(args: GetMemberCommandInput, cb: (err: any, data?: GetMemberCommandOutput) => void): void;
            getMember(args: GetMemberCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMemberCommandOutput) => void): void;
            /**
                * <p>Lists the permissions an account has to configure Amazon Inspector.</p>
                */
            listAccountPermissions(args: ListAccountPermissionsCommandInput, options?: __HttpHandlerOptions): Promise<ListAccountPermissionsCommandOutput>;
            listAccountPermissions(args: ListAccountPermissionsCommandInput, cb: (err: any, data?: ListAccountPermissionsCommandOutput) => void): void;
            listAccountPermissions(args: ListAccountPermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAccountPermissionsCommandOutput) => void): void;
            /**
                * <p>Lists coverage details for you environment.</p>
                */
            listCoverage(args: ListCoverageCommandInput, options?: __HttpHandlerOptions): Promise<ListCoverageCommandOutput>;
            listCoverage(args: ListCoverageCommandInput, cb: (err: any, data?: ListCoverageCommandOutput) => void): void;
            listCoverage(args: ListCoverageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCoverageCommandOutput) => void): void;
            /**
                * <p>Lists Amazon Inspector coverage statistics for your environment.</p>
                */
            listCoverageStatistics(args: ListCoverageStatisticsCommandInput, options?: __HttpHandlerOptions): Promise<ListCoverageStatisticsCommandOutput>;
            listCoverageStatistics(args: ListCoverageStatisticsCommandInput, cb: (err: any, data?: ListCoverageStatisticsCommandOutput) => void): void;
            listCoverageStatistics(args: ListCoverageStatisticsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCoverageStatisticsCommandOutput) => void): void;
            /**
                * <p>Lists information about the Amazon Inspector delegated administrator of your
                *          organization.</p>
                */
            listDelegatedAdminAccounts(args: ListDelegatedAdminAccountsCommandInput, options?: __HttpHandlerOptions): Promise<ListDelegatedAdminAccountsCommandOutput>;
            listDelegatedAdminAccounts(args: ListDelegatedAdminAccountsCommandInput, cb: (err: any, data?: ListDelegatedAdminAccountsCommandOutput) => void): void;
            listDelegatedAdminAccounts(args: ListDelegatedAdminAccountsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDelegatedAdminAccountsCommandOutput) => void): void;
            /**
                * <p>Lists the filters associated with your account.</p>
                */
            listFilters(args: ListFiltersCommandInput, options?: __HttpHandlerOptions): Promise<ListFiltersCommandOutput>;
            listFilters(args: ListFiltersCommandInput, cb: (err: any, data?: ListFiltersCommandOutput) => void): void;
            listFilters(args: ListFiltersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFiltersCommandOutput) => void): void;
            /**
                * <p>Lists aggregated finding data for your environment based on specific criteria.</p>
                */
            listFindingAggregations(args: ListFindingAggregationsCommandInput, options?: __HttpHandlerOptions): Promise<ListFindingAggregationsCommandOutput>;
            listFindingAggregations(args: ListFindingAggregationsCommandInput, cb: (err: any, data?: ListFindingAggregationsCommandOutput) => void): void;
            listFindingAggregations(args: ListFindingAggregationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFindingAggregationsCommandOutput) => void): void;
            /**
                * <p>Lists findings for your environment.</p>
                */
            listFindings(args: ListFindingsCommandInput, options?: __HttpHandlerOptions): Promise<ListFindingsCommandOutput>;
            listFindings(args: ListFindingsCommandInput, cb: (err: any, data?: ListFindingsCommandOutput) => void): void;
            listFindings(args: ListFindingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFindingsCommandOutput) => void): void;
            /**
                * <p>List members associated with the Amazon Inspector delegated administrator for your
                *          organization.</p>
                */
            listMembers(args: ListMembersCommandInput, options?: __HttpHandlerOptions): Promise<ListMembersCommandOutput>;
            listMembers(args: ListMembersCommandInput, cb: (err: any, data?: ListMembersCommandOutput) => void): void;
            listMembers(args: ListMembersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListMembersCommandOutput) => void): void;
            /**
                * <p>Lists all tags attached to a given resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Lists the Amazon Inspector usage totals over the last 30 days.</p>
                */
            listUsageTotals(args: ListUsageTotalsCommandInput, options?: __HttpHandlerOptions): Promise<ListUsageTotalsCommandOutput>;
            listUsageTotals(args: ListUsageTotalsCommandInput, cb: (err: any, data?: ListUsageTotalsCommandOutput) => void): void;
            listUsageTotals(args: ListUsageTotalsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListUsageTotalsCommandOutput) => void): void;
            /**
                * <p>Adds tags to a resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes tags from a resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates setting configurations for your Amazon Inspector account. When you use this API as an Amazon Inspector delegated administrator this updates the setting for all accounts you manage. Member accounts in an organization cannot update this setting.</p>
                */
            updateConfiguration(args: UpdateConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConfigurationCommandOutput>;
            updateConfiguration(args: UpdateConfigurationCommandInput, cb: (err: any, data?: UpdateConfigurationCommandOutput) => void): void;
            updateConfiguration(args: UpdateConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConfigurationCommandOutput) => void): void;
            /**
                * <p>Specifies the action that is to be applied to the findings that match the filter.</p>
                */
            updateFilter(args: UpdateFilterCommandInput, options?: __HttpHandlerOptions): Promise<UpdateFilterCommandOutput>;
            updateFilter(args: UpdateFilterCommandInput, cb: (err: any, data?: UpdateFilterCommandOutput) => void): void;
            updateFilter(args: UpdateFilterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateFilterCommandOutput) => void): void;
            /**
                * <p>Updates the configurations for your Amazon Inspector organization.</p>
                */
            updateOrganizationConfiguration(args: UpdateOrganizationConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateOrganizationConfigurationCommandOutput>;
            updateOrganizationConfiguration(args: UpdateOrganizationConfigurationCommandInput, cb: (err: any, data?: UpdateOrganizationConfigurationCommandOutput) => void): void;
            updateOrganizationConfiguration(args: UpdateOrganizationConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateOrganizationConfigurationCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/AssociateMemberCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { AssociateMemberRequest, AssociateMemberResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface AssociateMemberCommandInput extends AssociateMemberRequest {
    }
    export interface AssociateMemberCommandOutput extends AssociateMemberResponse, __MetadataBearer {
    }
    /**
        * <p>Associates an Amazon Web Services account with an Amazon Inspector delegated administrator.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, AssociateMemberCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, AssociateMemberCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new AssociateMemberCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateMemberCommandInput} for command's `input` shape.
        * @see {@link AssociateMemberCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class AssociateMemberCommand extends $Command<AssociateMemberCommandInput, AssociateMemberCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: AssociateMemberCommandInput;
            constructor(input: AssociateMemberCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateMemberCommandInput, AssociateMemberCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/BatchGetAccountStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { BatchGetAccountStatusRequest, BatchGetAccountStatusResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface BatchGetAccountStatusCommandInput extends BatchGetAccountStatusRequest {
    }
    export interface BatchGetAccountStatusCommandOutput extends BatchGetAccountStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the Amazon Inspector status of multiple Amazon Web Services accounts within your environment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, BatchGetAccountStatusCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, BatchGetAccountStatusCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new BatchGetAccountStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchGetAccountStatusCommandInput} for command's `input` shape.
        * @see {@link BatchGetAccountStatusCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class BatchGetAccountStatusCommand extends $Command<BatchGetAccountStatusCommandInput, BatchGetAccountStatusCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: BatchGetAccountStatusCommandInput;
            constructor(input: BatchGetAccountStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetAccountStatusCommandInput, BatchGetAccountStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/BatchGetFreeTrialInfoCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { BatchGetFreeTrialInfoRequest, BatchGetFreeTrialInfoResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface BatchGetFreeTrialInfoCommandInput extends BatchGetFreeTrialInfoRequest {
    }
    export interface BatchGetFreeTrialInfoCommandOutput extends BatchGetFreeTrialInfoResponse, __MetadataBearer {
    }
    /**
        * <p>Gets free trial status for multiple Amazon Web Services accounts.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, BatchGetFreeTrialInfoCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, BatchGetFreeTrialInfoCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new BatchGetFreeTrialInfoCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchGetFreeTrialInfoCommandInput} for command's `input` shape.
        * @see {@link BatchGetFreeTrialInfoCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class BatchGetFreeTrialInfoCommand extends $Command<BatchGetFreeTrialInfoCommandInput, BatchGetFreeTrialInfoCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: BatchGetFreeTrialInfoCommandInput;
            constructor(input: BatchGetFreeTrialInfoCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetFreeTrialInfoCommandInput, BatchGetFreeTrialInfoCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/CancelFindingsReportCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { CancelFindingsReportRequest, CancelFindingsReportResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface CancelFindingsReportCommandInput extends CancelFindingsReportRequest {
    }
    export interface CancelFindingsReportCommandOutput extends CancelFindingsReportResponse, __MetadataBearer {
    }
    /**
        * <p>Cancels the given findings report.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, CancelFindingsReportCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, CancelFindingsReportCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new CancelFindingsReportCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelFindingsReportCommandInput} for command's `input` shape.
        * @see {@link CancelFindingsReportCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class CancelFindingsReportCommand extends $Command<CancelFindingsReportCommandInput, CancelFindingsReportCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: CancelFindingsReportCommandInput;
            constructor(input: CancelFindingsReportCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelFindingsReportCommandInput, CancelFindingsReportCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/CreateFilterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { CreateFilterRequest, CreateFilterResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface CreateFilterCommandInput extends CreateFilterRequest {
    }
    export interface CreateFilterCommandOutput extends CreateFilterResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a filter resource using specified filter criteria.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, CreateFilterCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, CreateFilterCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new CreateFilterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateFilterCommandInput} for command's `input` shape.
        * @see {@link CreateFilterCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class CreateFilterCommand extends $Command<CreateFilterCommandInput, CreateFilterCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: CreateFilterCommandInput;
            constructor(input: CreateFilterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateFilterCommandInput, CreateFilterCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/CreateFindingsReportCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { CreateFindingsReportRequest, CreateFindingsReportResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface CreateFindingsReportCommandInput extends CreateFindingsReportRequest {
    }
    export interface CreateFindingsReportCommandOutput extends CreateFindingsReportResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a finding report.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, CreateFindingsReportCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, CreateFindingsReportCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new CreateFindingsReportCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateFindingsReportCommandInput} for command's `input` shape.
        * @see {@link CreateFindingsReportCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class CreateFindingsReportCommand extends $Command<CreateFindingsReportCommandInput, CreateFindingsReportCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: CreateFindingsReportCommandInput;
            constructor(input: CreateFindingsReportCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateFindingsReportCommandInput, CreateFindingsReportCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/DeleteFilterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { DeleteFilterRequest, DeleteFilterResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface DeleteFilterCommandInput extends DeleteFilterRequest {
    }
    export interface DeleteFilterCommandOutput extends DeleteFilterResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a filter resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, DeleteFilterCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, DeleteFilterCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new DeleteFilterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFilterCommandInput} for command's `input` shape.
        * @see {@link DeleteFilterCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class DeleteFilterCommand extends $Command<DeleteFilterCommandInput, DeleteFilterCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: DeleteFilterCommandInput;
            constructor(input: DeleteFilterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFilterCommandInput, DeleteFilterCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/DescribeOrganizationConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { DescribeOrganizationConfigurationRequest, DescribeOrganizationConfigurationResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface DescribeOrganizationConfigurationCommandInput extends DescribeOrganizationConfigurationRequest {
    }
    export interface DescribeOrganizationConfigurationCommandOutput extends DescribeOrganizationConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Describe Amazon Inspector configuration settings for an Amazon Web Services organization</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, DescribeOrganizationConfigurationCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, DescribeOrganizationConfigurationCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new DescribeOrganizationConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeOrganizationConfigurationCommandInput} for command's `input` shape.
        * @see {@link DescribeOrganizationConfigurationCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class DescribeOrganizationConfigurationCommand extends $Command<DescribeOrganizationConfigurationCommandInput, DescribeOrganizationConfigurationCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: DescribeOrganizationConfigurationCommandInput;
            constructor(input: DescribeOrganizationConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeOrganizationConfigurationCommandInput, DescribeOrganizationConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/DisableCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { DisableRequest, DisableResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface DisableCommandInput extends DisableRequest {
    }
    export interface DisableCommandOutput extends DisableResponse, __MetadataBearer {
    }
    /**
        * <p>Disables Amazon Inspector scans for one or more Amazon Web Services accounts. Disabling all scan types in an account
        *          disables the Amazon Inspector service.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, DisableCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, DisableCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new DisableCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisableCommandInput} for command's `input` shape.
        * @see {@link DisableCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class DisableCommand extends $Command<DisableCommandInput, DisableCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: DisableCommandInput;
            constructor(input: DisableCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisableCommandInput, DisableCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/DisableDelegatedAdminAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { DisableDelegatedAdminAccountRequest, DisableDelegatedAdminAccountResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface DisableDelegatedAdminAccountCommandInput extends DisableDelegatedAdminAccountRequest {
    }
    export interface DisableDelegatedAdminAccountCommandOutput extends DisableDelegatedAdminAccountResponse, __MetadataBearer {
    }
    /**
        * <p>Disables the Amazon Inspector delegated administrator for your organization.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, DisableDelegatedAdminAccountCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, DisableDelegatedAdminAccountCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new DisableDelegatedAdminAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisableDelegatedAdminAccountCommandInput} for command's `input` shape.
        * @see {@link DisableDelegatedAdminAccountCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class DisableDelegatedAdminAccountCommand extends $Command<DisableDelegatedAdminAccountCommandInput, DisableDelegatedAdminAccountCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: DisableDelegatedAdminAccountCommandInput;
            constructor(input: DisableDelegatedAdminAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisableDelegatedAdminAccountCommandInput, DisableDelegatedAdminAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/DisassociateMemberCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { DisassociateMemberRequest, DisassociateMemberResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface DisassociateMemberCommandInput extends DisassociateMemberRequest {
    }
    export interface DisassociateMemberCommandOutput extends DisassociateMemberResponse, __MetadataBearer {
    }
    /**
        * <p>Disassociates a member account from an Amazon Inspector delegated administrator.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, DisassociateMemberCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, DisassociateMemberCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new DisassociateMemberCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateMemberCommandInput} for command's `input` shape.
        * @see {@link DisassociateMemberCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class DisassociateMemberCommand extends $Command<DisassociateMemberCommandInput, DisassociateMemberCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: DisassociateMemberCommandInput;
            constructor(input: DisassociateMemberCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateMemberCommandInput, DisassociateMemberCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/EnableCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { EnableRequest, EnableResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface EnableCommandInput extends EnableRequest {
    }
    export interface EnableCommandOutput extends EnableResponse, __MetadataBearer {
    }
    /**
        * <p>Enables Amazon Inspector scans for one or more Amazon Web Services accounts.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, EnableCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, EnableCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new EnableCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link EnableCommandInput} for command's `input` shape.
        * @see {@link EnableCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class EnableCommand extends $Command<EnableCommandInput, EnableCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: EnableCommandInput;
            constructor(input: EnableCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<EnableCommandInput, EnableCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/EnableDelegatedAdminAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { EnableDelegatedAdminAccountRequest, EnableDelegatedAdminAccountResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface EnableDelegatedAdminAccountCommandInput extends EnableDelegatedAdminAccountRequest {
    }
    export interface EnableDelegatedAdminAccountCommandOutput extends EnableDelegatedAdminAccountResponse, __MetadataBearer {
    }
    /**
        * <p>Enables the Amazon Inspector delegated administrator for your Organizations organization.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, EnableDelegatedAdminAccountCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, EnableDelegatedAdminAccountCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new EnableDelegatedAdminAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link EnableDelegatedAdminAccountCommandInput} for command's `input` shape.
        * @see {@link EnableDelegatedAdminAccountCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class EnableDelegatedAdminAccountCommand extends $Command<EnableDelegatedAdminAccountCommandInput, EnableDelegatedAdminAccountCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: EnableDelegatedAdminAccountCommandInput;
            constructor(input: EnableDelegatedAdminAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<EnableDelegatedAdminAccountCommandInput, EnableDelegatedAdminAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/GetConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { GetConfigurationRequest, GetConfigurationResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface GetConfigurationCommandInput extends GetConfigurationRequest {
    }
    export interface GetConfigurationCommandOutput extends GetConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves setting configurations for Inspector scans.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, GetConfigurationCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, GetConfigurationCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new GetConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetConfigurationCommandInput} for command's `input` shape.
        * @see {@link GetConfigurationCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class GetConfigurationCommand extends $Command<GetConfigurationCommandInput, GetConfigurationCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: GetConfigurationCommandInput;
            constructor(input: GetConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetConfigurationCommandInput, GetConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/GetDelegatedAdminAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { GetDelegatedAdminAccountRequest, GetDelegatedAdminAccountResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface GetDelegatedAdminAccountCommandInput extends GetDelegatedAdminAccountRequest {
    }
    export interface GetDelegatedAdminAccountCommandOutput extends GetDelegatedAdminAccountResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about the Amazon Inspector delegated administrator for your
        *          organization.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, GetDelegatedAdminAccountCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, GetDelegatedAdminAccountCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new GetDelegatedAdminAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDelegatedAdminAccountCommandInput} for command's `input` shape.
        * @see {@link GetDelegatedAdminAccountCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class GetDelegatedAdminAccountCommand extends $Command<GetDelegatedAdminAccountCommandInput, GetDelegatedAdminAccountCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: GetDelegatedAdminAccountCommandInput;
            constructor(input: GetDelegatedAdminAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDelegatedAdminAccountCommandInput, GetDelegatedAdminAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/GetFindingsReportStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { GetFindingsReportStatusRequest, GetFindingsReportStatusResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface GetFindingsReportStatusCommandInput extends GetFindingsReportStatusRequest {
    }
    export interface GetFindingsReportStatusCommandOutput extends GetFindingsReportStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the status of a findings report.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, GetFindingsReportStatusCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, GetFindingsReportStatusCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new GetFindingsReportStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetFindingsReportStatusCommandInput} for command's `input` shape.
        * @see {@link GetFindingsReportStatusCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class GetFindingsReportStatusCommand extends $Command<GetFindingsReportStatusCommandInput, GetFindingsReportStatusCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: GetFindingsReportStatusCommandInput;
            constructor(input: GetFindingsReportStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetFindingsReportStatusCommandInput, GetFindingsReportStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/GetMemberCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { GetMemberRequest, GetMemberResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface GetMemberCommandInput extends GetMemberRequest {
    }
    export interface GetMemberCommandOutput extends GetMemberResponse, __MetadataBearer {
    }
    /**
        * <p>Gets member information for your organization.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, GetMemberCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, GetMemberCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new GetMemberCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMemberCommandInput} for command's `input` shape.
        * @see {@link GetMemberCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class GetMemberCommand extends $Command<GetMemberCommandInput, GetMemberCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: GetMemberCommandInput;
            constructor(input: GetMemberCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMemberCommandInput, GetMemberCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListAccountPermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { ListAccountPermissionsRequest, ListAccountPermissionsResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface ListAccountPermissionsCommandInput extends ListAccountPermissionsRequest {
    }
    export interface ListAccountPermissionsCommandOutput extends ListAccountPermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the permissions an account has to configure Amazon Inspector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, ListAccountPermissionsCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, ListAccountPermissionsCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new ListAccountPermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAccountPermissionsCommandInput} for command's `input` shape.
        * @see {@link ListAccountPermissionsCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class ListAccountPermissionsCommand extends $Command<ListAccountPermissionsCommandInput, ListAccountPermissionsCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: ListAccountPermissionsCommandInput;
            constructor(input: ListAccountPermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAccountPermissionsCommandInput, ListAccountPermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListCoverageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { ListCoverageRequest, ListCoverageResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface ListCoverageCommandInput extends ListCoverageRequest {
    }
    export interface ListCoverageCommandOutput extends ListCoverageResponse, __MetadataBearer {
    }
    /**
        * <p>Lists coverage details for you environment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, ListCoverageCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, ListCoverageCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new ListCoverageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListCoverageCommandInput} for command's `input` shape.
        * @see {@link ListCoverageCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class ListCoverageCommand extends $Command<ListCoverageCommandInput, ListCoverageCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: ListCoverageCommandInput;
            constructor(input: ListCoverageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListCoverageCommandInput, ListCoverageCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListCoverageStatisticsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { ListCoverageStatisticsRequest, ListCoverageStatisticsResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface ListCoverageStatisticsCommandInput extends ListCoverageStatisticsRequest {
    }
    export interface ListCoverageStatisticsCommandOutput extends ListCoverageStatisticsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists Amazon Inspector coverage statistics for your environment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, ListCoverageStatisticsCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, ListCoverageStatisticsCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new ListCoverageStatisticsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListCoverageStatisticsCommandInput} for command's `input` shape.
        * @see {@link ListCoverageStatisticsCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class ListCoverageStatisticsCommand extends $Command<ListCoverageStatisticsCommandInput, ListCoverageStatisticsCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: ListCoverageStatisticsCommandInput;
            constructor(input: ListCoverageStatisticsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListCoverageStatisticsCommandInput, ListCoverageStatisticsCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListDelegatedAdminAccountsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { ListDelegatedAdminAccountsRequest, ListDelegatedAdminAccountsResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface ListDelegatedAdminAccountsCommandInput extends ListDelegatedAdminAccountsRequest {
    }
    export interface ListDelegatedAdminAccountsCommandOutput extends ListDelegatedAdminAccountsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists information about the Amazon Inspector delegated administrator of your
        *          organization.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, ListDelegatedAdminAccountsCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, ListDelegatedAdminAccountsCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new ListDelegatedAdminAccountsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDelegatedAdminAccountsCommandInput} for command's `input` shape.
        * @see {@link ListDelegatedAdminAccountsCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class ListDelegatedAdminAccountsCommand extends $Command<ListDelegatedAdminAccountsCommandInput, ListDelegatedAdminAccountsCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: ListDelegatedAdminAccountsCommandInput;
            constructor(input: ListDelegatedAdminAccountsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDelegatedAdminAccountsCommandInput, ListDelegatedAdminAccountsCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListFiltersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { ListFiltersRequest, ListFiltersResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface ListFiltersCommandInput extends ListFiltersRequest {
    }
    export interface ListFiltersCommandOutput extends ListFiltersResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the filters associated with your account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, ListFiltersCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, ListFiltersCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new ListFiltersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFiltersCommandInput} for command's `input` shape.
        * @see {@link ListFiltersCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class ListFiltersCommand extends $Command<ListFiltersCommandInput, ListFiltersCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: ListFiltersCommandInput;
            constructor(input: ListFiltersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFiltersCommandInput, ListFiltersCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListFindingAggregationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { ListFindingAggregationsRequest, ListFindingAggregationsResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface ListFindingAggregationsCommandInput extends ListFindingAggregationsRequest {
    }
    export interface ListFindingAggregationsCommandOutput extends ListFindingAggregationsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists aggregated finding data for your environment based on specific criteria.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, ListFindingAggregationsCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, ListFindingAggregationsCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new ListFindingAggregationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFindingAggregationsCommandInput} for command's `input` shape.
        * @see {@link ListFindingAggregationsCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class ListFindingAggregationsCommand extends $Command<ListFindingAggregationsCommandInput, ListFindingAggregationsCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: ListFindingAggregationsCommandInput;
            constructor(input: ListFindingAggregationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFindingAggregationsCommandInput, ListFindingAggregationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListFindingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { ListFindingsRequest, ListFindingsResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface ListFindingsCommandInput extends ListFindingsRequest {
    }
    export interface ListFindingsCommandOutput extends ListFindingsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists findings for your environment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, ListFindingsCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, ListFindingsCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new ListFindingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFindingsCommandInput} for command's `input` shape.
        * @see {@link ListFindingsCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class ListFindingsCommand extends $Command<ListFindingsCommandInput, ListFindingsCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: ListFindingsCommandInput;
            constructor(input: ListFindingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFindingsCommandInput, ListFindingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListMembersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { ListMembersRequest, ListMembersResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface ListMembersCommandInput extends ListMembersRequest {
    }
    export interface ListMembersCommandOutput extends ListMembersResponse, __MetadataBearer {
    }
    /**
        * <p>List members associated with the Amazon Inspector delegated administrator for your
        *          organization.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, ListMembersCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, ListMembersCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new ListMembersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListMembersCommandInput} for command's `input` shape.
        * @see {@link ListMembersCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class ListMembersCommand extends $Command<ListMembersCommandInput, ListMembersCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: ListMembersCommandInput;
            constructor(input: ListMembersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListMembersCommandInput, ListMembersCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all tags attached to a given resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, ListTagsForResourceCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, ListTagsForResourceCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListUsageTotalsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { ListUsageTotalsRequest, ListUsageTotalsResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface ListUsageTotalsCommandInput extends ListUsageTotalsRequest {
    }
    export interface ListUsageTotalsCommandOutput extends ListUsageTotalsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the Amazon Inspector usage totals over the last 30 days.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, ListUsageTotalsCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, ListUsageTotalsCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new ListUsageTotalsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListUsageTotalsCommandInput} for command's `input` shape.
        * @see {@link ListUsageTotalsCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class ListUsageTotalsCommand extends $Command<ListUsageTotalsCommandInput, ListUsageTotalsCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: ListUsageTotalsCommandInput;
            constructor(input: ListUsageTotalsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListUsageTotalsCommandInput, ListUsageTotalsCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Adds tags to a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, TagResourceCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, TagResourceCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes tags from a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, UntagResourceCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, UntagResourceCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/UpdateConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { UpdateConfigurationRequest, UpdateConfigurationResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface UpdateConfigurationCommandInput extends UpdateConfigurationRequest {
    }
    export interface UpdateConfigurationCommandOutput extends UpdateConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Updates setting configurations for your Amazon Inspector account. When you use this API as an Amazon Inspector delegated administrator this updates the setting for all accounts you manage. Member accounts in an organization cannot update this setting.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, UpdateConfigurationCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, UpdateConfigurationCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new UpdateConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateConfigurationCommandInput} for command's `input` shape.
        * @see {@link UpdateConfigurationCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class UpdateConfigurationCommand extends $Command<UpdateConfigurationCommandInput, UpdateConfigurationCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: UpdateConfigurationCommandInput;
            constructor(input: UpdateConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateConfigurationCommandInput, UpdateConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/UpdateFilterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { UpdateFilterRequest, UpdateFilterResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface UpdateFilterCommandInput extends UpdateFilterRequest {
    }
    export interface UpdateFilterCommandOutput extends UpdateFilterResponse, __MetadataBearer {
    }
    /**
        * <p>Specifies the action that is to be applied to the findings that match the filter.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, UpdateFilterCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, UpdateFilterCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new UpdateFilterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateFilterCommandInput} for command's `input` shape.
        * @see {@link UpdateFilterCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class UpdateFilterCommand extends $Command<UpdateFilterCommandInput, UpdateFilterCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: UpdateFilterCommandInput;
            constructor(input: UpdateFilterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateFilterCommandInput, UpdateFilterCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/UpdateOrganizationConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { Inspector2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client";
    import { UpdateOrganizationConfigurationRequest, UpdateOrganizationConfigurationResponse } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0";
    export interface UpdateOrganizationConfigurationCommandInput extends UpdateOrganizationConfigurationRequest {
    }
    export interface UpdateOrganizationConfigurationCommandOutput extends UpdateOrganizationConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the configurations for your Amazon Inspector organization.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { Inspector2Client, UpdateOrganizationConfigurationCommand } from "@aws-sdk/client-inspector2"; // ES Modules import
        * // const { Inspector2Client, UpdateOrganizationConfigurationCommand } = require("@aws-sdk/client-inspector2"); // CommonJS import
        * const client = new Inspector2Client(config);
        * const command = new UpdateOrganizationConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateOrganizationConfigurationCommandInput} for command's `input` shape.
        * @see {@link UpdateOrganizationConfigurationCommandOutput} for command's `response` shape.
        * @see {@link Inspector2ClientResolvedConfig | config} for Inspector2Client's `config` shape.
        *
        */
    export class UpdateOrganizationConfigurationCommand extends $Command<UpdateOrganizationConfigurationCommandInput, UpdateOrganizationConfigurationCommandOutput, Inspector2ClientResolvedConfig> {
            readonly input: UpdateOrganizationConfigurationCommandInput;
            constructor(input: UpdateOrganizationConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Inspector2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateOrganizationConfigurationCommandInput, UpdateOrganizationConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/Inspector2Client' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AssociateMemberCommandInput, AssociateMemberCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/AssociateMemberCommand";
    import { BatchGetAccountStatusCommandInput, BatchGetAccountStatusCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/BatchGetAccountStatusCommand";
    import { BatchGetFreeTrialInfoCommandInput, BatchGetFreeTrialInfoCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/BatchGetFreeTrialInfoCommand";
    import { CancelFindingsReportCommandInput, CancelFindingsReportCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/CancelFindingsReportCommand";
    import { CreateFilterCommandInput, CreateFilterCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/CreateFilterCommand";
    import { CreateFindingsReportCommandInput, CreateFindingsReportCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/CreateFindingsReportCommand";
    import { DeleteFilterCommandInput, DeleteFilterCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/DeleteFilterCommand";
    import { DescribeOrganizationConfigurationCommandInput, DescribeOrganizationConfigurationCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/DescribeOrganizationConfigurationCommand";
    import { DisableCommandInput, DisableCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/DisableCommand";
    import { DisableDelegatedAdminAccountCommandInput, DisableDelegatedAdminAccountCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/DisableDelegatedAdminAccountCommand";
    import { DisassociateMemberCommandInput, DisassociateMemberCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/DisassociateMemberCommand";
    import { EnableCommandInput, EnableCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/EnableCommand";
    import { EnableDelegatedAdminAccountCommandInput, EnableDelegatedAdminAccountCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/EnableDelegatedAdminAccountCommand";
    import { GetConfigurationCommandInput, GetConfigurationCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/GetConfigurationCommand";
    import { GetDelegatedAdminAccountCommandInput, GetDelegatedAdminAccountCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/GetDelegatedAdminAccountCommand";
    import { GetFindingsReportStatusCommandInput, GetFindingsReportStatusCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/GetFindingsReportStatusCommand";
    import { GetMemberCommandInput, GetMemberCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/GetMemberCommand";
    import { ListAccountPermissionsCommandInput, ListAccountPermissionsCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListAccountPermissionsCommand";
    import { ListCoverageCommandInput, ListCoverageCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListCoverageCommand";
    import { ListCoverageStatisticsCommandInput, ListCoverageStatisticsCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListCoverageStatisticsCommand";
    import { ListDelegatedAdminAccountsCommandInput, ListDelegatedAdminAccountsCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListDelegatedAdminAccountsCommand";
    import { ListFiltersCommandInput, ListFiltersCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListFiltersCommand";
    import { ListFindingAggregationsCommandInput, ListFindingAggregationsCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListFindingAggregationsCommand";
    import { ListFindingsCommandInput, ListFindingsCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListFindingsCommand";
    import { ListMembersCommandInput, ListMembersCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListMembersCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListTagsForResourceCommand";
    import { ListUsageTotalsCommandInput, ListUsageTotalsCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/ListUsageTotalsCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/UntagResourceCommand";
    import { UpdateConfigurationCommandInput, UpdateConfigurationCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/UpdateConfigurationCommand";
    import { UpdateFilterCommandInput, UpdateFilterCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/UpdateFilterCommand";
    import { UpdateOrganizationConfigurationCommandInput, UpdateOrganizationConfigurationCommandOutput } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/commands/UpdateOrganizationConfigurationCommand";
    export type ServiceInputTypes = AssociateMemberCommandInput | BatchGetAccountStatusCommandInput | BatchGetFreeTrialInfoCommandInput | CancelFindingsReportCommandInput | CreateFilterCommandInput | CreateFindingsReportCommandInput | DeleteFilterCommandInput | DescribeOrganizationConfigurationCommandInput | DisableCommandInput | DisableDelegatedAdminAccountCommandInput | DisassociateMemberCommandInput | EnableCommandInput | EnableDelegatedAdminAccountCommandInput | GetConfigurationCommandInput | GetDelegatedAdminAccountCommandInput | GetFindingsReportStatusCommandInput | GetMemberCommandInput | ListAccountPermissionsCommandInput | ListCoverageCommandInput | ListCoverageStatisticsCommandInput | ListDelegatedAdminAccountsCommandInput | ListFiltersCommandInput | ListFindingAggregationsCommandInput | ListFindingsCommandInput | ListMembersCommandInput | ListTagsForResourceCommandInput | ListUsageTotalsCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateConfigurationCommandInput | UpdateFilterCommandInput | UpdateOrganizationConfigurationCommandInput;
    export type ServiceOutputTypes = AssociateMemberCommandOutput | BatchGetAccountStatusCommandOutput | BatchGetFreeTrialInfoCommandOutput | CancelFindingsReportCommandOutput | CreateFilterCommandOutput | CreateFindingsReportCommandOutput | DeleteFilterCommandOutput | DescribeOrganizationConfigurationCommandOutput | DisableCommandOutput | DisableDelegatedAdminAccountCommandOutput | DisassociateMemberCommandOutput | EnableCommandOutput | EnableDelegatedAdminAccountCommandOutput | GetConfigurationCommandOutput | GetDelegatedAdminAccountCommandOutput | GetFindingsReportStatusCommandOutput | GetMemberCommandOutput | ListAccountPermissionsCommandOutput | ListCoverageCommandOutput | ListCoverageStatisticsCommandOutput | ListDelegatedAdminAccountsCommandOutput | ListFiltersCommandOutput | ListFindingAggregationsCommandOutput | ListFindingsCommandOutput | ListMembersCommandOutput | ListTagsForResourceCommandOutput | ListUsageTotalsCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateConfigurationCommandOutput | UpdateFilterCommandOutput | UpdateOrganizationConfigurationCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type Inspector2ClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of Inspector2Client class constructor that set the region, credentials and other options.
        */
    export interface Inspector2ClientConfig extends Inspector2ClientConfigType {
    }
    type Inspector2ClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of Inspector2Client class. This is resolved and normalized from the {@link Inspector2ClientConfig | constructor configuration interface}.
        */
    export interface Inspector2ClientResolvedConfig extends Inspector2ClientResolvedConfigType {
    }
    /**
        * <p>Amazon Inspector is a vulnerability discovery service that automates continuous scanning for
        *          security vulnerabilities within your Amazon EC2 and Amazon ECR environments.</p>
        */
    export class Inspector2Client extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, Inspector2ClientResolvedConfig> {
            /**
                * The resolved configuration of Inspector2Client class. This is resolved and normalized from the {@link Inspector2ClientConfig | constructor configuration interface}.
                */
            readonly config: Inspector2ClientResolvedConfig;
            constructor(configuration: Inspector2ClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { Inspector2ServiceException as __BaseException } from "@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/Inspector2ServiceException";
    /**
        * <p>You do not have sufficient access to perform this action.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    export enum Status {
            DISABLED = "DISABLED",
            DISABLING = "DISABLING",
            ENABLED = "ENABLED",
            ENABLING = "ENABLING",
            SUSPENDED = "SUSPENDED",
            SUSPENDING = "SUSPENDING"
    }
    /**
        * <p>Details the status of Amazon Inspector for each resource type Amazon Inspector scans.</p>
        */
    export interface ResourceStatus {
            /**
                * <p>The status of Amazon Inspector scanning for Amazon EC2 resources.</p>
                */
            ec2: Status | string | undefined;
            /**
                * <p>The status of Amazon Inspector scanning for Amazon ECR resources.</p>
                */
            ecr: Status | string | undefined;
    }
    export namespace ResourceStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceStatus) => any;
    }
    /**
        * <p>An Amazon Web Services account within your environment that Amazon Inspector has been enabled for.</p>
        */
    export interface Account {
            /**
                * <p>The ID of the Amazon Web Services account.</p>
                */
            accountId: string | undefined;
            /**
                * <p>The status of Amazon Inspector for the account.</p>
                */
            status: Status | string | undefined;
            /**
                * <p>Details of the status of Amazon Inspector scans by resource type.</p>
                */
            resourceStatus: ResourceStatus | undefined;
    }
    export namespace Account {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Account) => any;
    }
    export enum AggregationFindingType {
            NETWORK_REACHABILITY = "NETWORK_REACHABILITY",
            PACKAGE_VULNERABILITY = "PACKAGE_VULNERABILITY"
    }
    export enum AggregationResourceType {
            AWS_EC2_INSTANCE = "AWS_EC2_INSTANCE",
            AWS_ECR_CONTAINER_IMAGE = "AWS_ECR_CONTAINER_IMAGE"
    }
    export enum AccountSortBy {
            ALL = "ALL",
            CRITICAL = "CRITICAL",
            HIGH = "HIGH"
    }
    export enum SortOrder {
            ASC = "ASC",
            DESC = "DESC"
    }
    /**
        * <p>An object that contains details about an aggregation response based on
        *          Amazon Web Services accounts.</p>
        */
    export interface AccountAggregation {
            /**
                * <p>The type of finding.</p>
                */
            findingType?: AggregationFindingType | string;
            /**
                * <p>The type of resource.</p>
                */
            resourceType?: AggregationResourceType | string;
            /**
                * <p>The sort order (ascending or descending).</p>
                */
            sortOrder?: SortOrder | string;
            /**
                * <p>The value to sort by.</p>
                */
            sortBy?: AccountSortBy | string;
    }
    export namespace AccountAggregation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountAggregation) => any;
    }
    /**
        * <p>An object that contains the counts of aggregated finding per severity.</p>
        */
    export interface SeverityCounts {
            /**
                * <p>The total count of findings from all severities.</p>
                */
            all?: number;
            /**
                * <p>The total count of medium severity findings.</p>
                */
            medium?: number;
            /**
                * <p>The total count of high severity findings.</p>
                */
            high?: number;
            /**
                * <p>The total count of critical severity findings.</p>
                */
            critical?: number;
    }
    export namespace SeverityCounts {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SeverityCounts) => any;
    }
    /**
        * <p>An aggregation of findings by Amazon Web Services account ID.</p>
        */
    export interface AccountAggregationResponse {
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            accountId?: string;
            /**
                * <p>The number of findings by severity.</p>
                */
            severityCounts?: SeverityCounts;
    }
    export namespace AccountAggregationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountAggregationResponse) => any;
    }
    export enum ErrorCode {
            ACCESS_DENIED = "ACCESS_DENIED",
            ACCOUNT_IS_ISOLATED = "ACCOUNT_IS_ISOLATED",
            ALREADY_ENABLED = "ALREADY_ENABLED",
            DISABLE_IN_PROGRESS = "DISABLE_IN_PROGRESS",
            DISASSOCIATE_ALL_MEMBERS = "DISASSOCIATE_ALL_MEMBERS",
            ENABLE_IN_PROGRESS = "ENABLE_IN_PROGRESS",
            EVENTBRIDGE_THROTTLED = "EVENTBRIDGE_THROTTLED",
            EVENTBRIDGE_UNAVAILABLE = "EVENTBRIDGE_UNAVAILABLE",
            INTERNAL_ERROR = "INTERNAL_ERROR",
            RESOURCE_NOT_FOUND = "RESOURCE_NOT_FOUND",
            RESOURCE_SCAN_NOT_DISABLED = "RESOURCE_SCAN_NOT_DISABLED",
            SSM_THROTTLED = "SSM_THROTTLED",
            SSM_UNAVAILABLE = "SSM_UNAVAILABLE",
            SUSPEND_IN_PROGRESS = "SUSPEND_IN_PROGRESS"
    }
    /**
        * <p>An object that described the state of Amazon Inspector scans for an account.</p>
        */
    export interface State {
            /**
                * <p>The status of Amazon Inspector for the account.</p>
                */
            status: Status | string | undefined;
            /**
                * <p>The error code explaining why the account failed to enable Amazon Inspector.</p>
                */
            errorCode: ErrorCode | string | undefined;
            /**
                * <p>The error message received when the account failed to enable Amazon Inspector.</p>
                */
            errorMessage: string | undefined;
    }
    export namespace State {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: State) => any;
    }
    /**
        * <p>Details the state of Amazon Inspector for each resource type Amazon Inspector scans.</p>
        */
    export interface ResourceState {
            /**
                * <p>An object detailing the state of Amazon Inspector scanning for Amazon EC2 resources.</p>
                */
            ec2: State | undefined;
            /**
                * <p>An object detailing the state of Amazon Inspector scanning for Amazon ECR resources.</p>
                */
            ecr: State | undefined;
    }
    export namespace ResourceState {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceState) => any;
    }
    /**
        * <p>An object with details the status of an Amazon Web Services account within your Amazon Inspector environment</p>
        */
    export interface AccountState {
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            accountId: string | undefined;
            /**
                * <p>An object detailing the status of Amazon Inspector for the account.</p>
                */
            state: State | undefined;
            /**
                * <p>An object detailing which resources Amazon Inspector is enabled to scan for the account.</p>
                */
            resourceState: ResourceState | undefined;
    }
    export namespace AccountState {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountState) => any;
    }
    export enum StringComparison {
            EQUALS = "EQUALS",
            NOT_EQUALS = "NOT_EQUALS",
            PREFIX = "PREFIX"
    }
    /**
        * <p>An object that describes the details of a string filter.</p>
        */
    export interface StringFilter {
            /**
                * <p>The operator to use when comparing values in the filter</p>
                */
            comparison: StringComparison | string | undefined;
            /**
                * <p>The value to filter on.</p>
                */
            value: string | undefined;
    }
    export namespace StringFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StringFilter) => any;
    }
    export enum AmiSortBy {
            AFFECTED_INSTANCES = "AFFECTED_INSTANCES",
            ALL = "ALL",
            CRITICAL = "CRITICAL",
            HIGH = "HIGH"
    }
    /**
        * <p>The details that define an aggregation based on Amazon machine images (AMIs).</p>
        */
    export interface AmiAggregation {
            /**
                * <p>The IDs of AMIs to aggregate findings for.</p>
                */
            amis?: StringFilter[];
            /**
                * <p>The order to sort results by.</p>
                */
            sortOrder?: SortOrder | string;
            /**
                * <p>The value to sort results by.</p>
                */
            sortBy?: AmiSortBy | string;
    }
    export namespace AmiAggregation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AmiAggregation) => any;
    }
    export enum AwsEcrContainerSortBy {
            ALL = "ALL",
            CRITICAL = "CRITICAL",
            HIGH = "HIGH"
    }
    /**
        * <p>An aggregation of information about Amazon ECR containers.</p>
        */
    export interface AwsEcrContainerAggregation {
            /**
                * <p>The container resource IDs.</p>
                */
            resourceIds?: StringFilter[];
            /**
                * <p>The image SHA values.</p>
                */
            imageShas?: StringFilter[];
            /**
                * <p>The container repositories.</p>
                */
            repositories?: StringFilter[];
            /**
                * <p>The architecture of the containers.</p>
                */
            architectures?: StringFilter[];
            /**
                * <p>The image tags.</p>
                */
            imageTags?: StringFilter[];
            /**
                * <p>The sort order (ascending or descending).</p>
                */
            sortOrder?: SortOrder | string;
            /**
                * <p>The value to sort by.</p>
                */
            sortBy?: AwsEcrContainerSortBy | string;
    }
    export namespace AwsEcrContainerAggregation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcrContainerAggregation) => any;
    }
    export enum MapComparison {
            EQUALS = "EQUALS"
    }
    /**
        * <p>An object that describes details of a map filter.</p>
        */
    export interface MapFilter {
            /**
                * <p>The operator to use when comparing values in the filter.</p>
                */
            comparison: MapComparison | string | undefined;
            /**
                * <p>The tag key used in the filter.</p>
                */
            key: string | undefined;
            /**
                * <p>The tag value used in the filter.</p>
                */
            value?: string;
    }
    export namespace MapFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MapFilter) => any;
    }
    export enum Ec2InstanceSortBy {
            ALL = "ALL",
            CRITICAL = "CRITICAL",
            HIGH = "HIGH",
            NETWORK_FINDINGS = "NETWORK_FINDINGS"
    }
    /**
        * <p>The details that define an aggregation based on Amazon EC2 instances.</p>
        */
    export interface Ec2InstanceAggregation {
            /**
                * <p>The AMI IDs associated with the Amazon EC2 instances to aggregate findings for.</p>
                */
            amis?: StringFilter[];
            /**
                * <p>The operating system types to aggregate findings for. Valid values must be uppercase and
                *          underscore separated, examples are <code>ORACLE_LINUX_7</code> and
                *          <code>ALPINE_LINUX_3_8</code>.</p>
                */
            operatingSystems?: StringFilter[];
            /**
                * <p>The Amazon EC2 instance IDs to aggregate findings for.</p>
                */
            instanceIds?: StringFilter[];
            /**
                * <p>The Amazon EC2 instance tags to aggregate findings for.</p>
                */
            instanceTags?: MapFilter[];
            /**
                * <p>The order to sort results by.</p>
                */
            sortOrder?: SortOrder | string;
            /**
                * <p>The value to sort results by.</p>
                */
            sortBy?: Ec2InstanceSortBy | string;
    }
    export namespace Ec2InstanceAggregation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Ec2InstanceAggregation) => any;
    }
    export enum FindingTypeSortBy {
            ALL = "ALL",
            CRITICAL = "CRITICAL",
            HIGH = "HIGH"
    }
    /**
        * <p>The details that define an aggregation based on finding type.</p>
        */
    export interface FindingTypeAggregation {
            /**
                * <p>The finding type to aggregate.</p>
                */
            findingType?: AggregationFindingType | string;
            /**
                * <p>The resource type to aggregate.</p>
                */
            resourceType?: AggregationResourceType | string;
            /**
                * <p>The order to sort results by.</p>
                */
            sortOrder?: SortOrder | string;
            /**
                * <p>The value to sort results by.</p>
                */
            sortBy?: FindingTypeSortBy | string;
    }
    export namespace FindingTypeAggregation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FindingTypeAggregation) => any;
    }
    export enum ImageLayerSortBy {
            ALL = "ALL",
            CRITICAL = "CRITICAL",
            HIGH = "HIGH"
    }
    /**
        * <p>The details that define an aggregation based on container image layers.</p>
        */
    export interface ImageLayerAggregation {
            /**
                * <p>The repository associated with the container image hosting the layers.</p>
                */
            repositories?: StringFilter[];
            /**
                * <p>The ID of the container image layer.</p>
                */
            resourceIds?: StringFilter[];
            /**
                * <p>The hashes associated with the layers.</p>
                */
            layerHashes?: StringFilter[];
            /**
                * <p>The order to sort results by.</p>
                */
            sortOrder?: SortOrder | string;
            /**
                * <p>The value to sort results by.</p>
                */
            sortBy?: ImageLayerSortBy | string;
    }
    export namespace ImageLayerAggregation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImageLayerAggregation) => any;
    }
    export enum PackageSortBy {
            ALL = "ALL",
            CRITICAL = "CRITICAL",
            HIGH = "HIGH"
    }
    /**
        * <p>The details that define an aggregation based on operating system package type.</p>
        */
    export interface PackageAggregation {
            /**
                * <p>The names of packages to aggregate findings on.</p>
                */
            packageNames?: StringFilter[];
            /**
                * <p>The order to sort results by.</p>
                */
            sortOrder?: SortOrder | string;
            /**
                * <p>The value to sort results by.</p>
                */
            sortBy?: PackageSortBy | string;
    }
    export namespace PackageAggregation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageAggregation) => any;
    }
    export enum RepositorySortBy {
            AFFECTED_IMAGES = "AFFECTED_IMAGES",
            ALL = "ALL",
            CRITICAL = "CRITICAL",
            HIGH = "HIGH"
    }
    /**
        * <p>The details that define an aggregation based on repository.</p>
        */
    export interface RepositoryAggregation {
            /**
                * <p>The names of repositories to aggregate findings on.</p>
                */
            repositories?: StringFilter[];
            /**
                * <p>The order to sort results by.</p>
                */
            sortOrder?: SortOrder | string;
            /**
                * <p>The value to sort results by.</p>
                */
            sortBy?: RepositorySortBy | string;
    }
    export namespace RepositoryAggregation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RepositoryAggregation) => any;
    }
    export enum TitleSortBy {
            ALL = "ALL",
            CRITICAL = "CRITICAL",
            HIGH = "HIGH"
    }
    /**
        * <p>The details that define an aggregation based on finding title.</p>
        */
    export interface TitleAggregation {
            /**
                * <p>The finding titles to aggregate on.</p>
                */
            titles?: StringFilter[];
            /**
                * <p>The vulnerability IDs of the findings.</p>
                */
            vulnerabilityIds?: StringFilter[];
            /**
                * <p>The resource type to aggregate on.</p>
                */
            resourceType?: AggregationResourceType | string;
            /**
                * <p>The order to sort results by.</p>
                */
            sortOrder?: SortOrder | string;
            /**
                * <p>The value to sort results by.</p>
                */
            sortBy?: TitleSortBy | string;
    }
    export namespace TitleAggregation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TitleAggregation) => any;
    }
    /**
        * <p>Contains details about an aggregation request.</p>
        */
    export type AggregationRequest = AggregationRequest.AccountAggregationMember | AggregationRequest.AmiAggregationMember | AggregationRequest.AwsEcrContainerAggregationMember | AggregationRequest.Ec2InstanceAggregationMember | AggregationRequest.FindingTypeAggregationMember | AggregationRequest.ImageLayerAggregationMember | AggregationRequest.PackageAggregationMember | AggregationRequest.RepositoryAggregationMember | AggregationRequest.TitleAggregationMember | AggregationRequest.$UnknownMember;
    export namespace AggregationRequest {
            /**
                * <p>An object that contains details about an aggregation request based on Amazon Web Services account
                *          IDs.</p>
                */
            interface AccountAggregationMember {
                    accountAggregation: AccountAggregation;
                    amiAggregation?: never;
                    awsEcrContainerAggregation?: never;
                    ec2InstanceAggregation?: never;
                    findingTypeAggregation?: never;
                    imageLayerAggregation?: never;
                    packageAggregation?: never;
                    repositoryAggregation?: never;
                    titleAggregation?: never;
                    $unknown?: never;
            }
            /**
                * <p>An object that contains details about an aggregation request based on Amazon Machine
                *          Images (AMIs).</p>
                */
            interface AmiAggregationMember {
                    accountAggregation?: never;
                    amiAggregation: AmiAggregation;
                    awsEcrContainerAggregation?: never;
                    ec2InstanceAggregation?: never;
                    findingTypeAggregation?: never;
                    imageLayerAggregation?: never;
                    packageAggregation?: never;
                    repositoryAggregation?: never;
                    titleAggregation?: never;
                    $unknown?: never;
            }
            /**
                * <p>An object that contains details about an aggregation request based on Amazon ECR container
                *          images.</p>
                */
            interface AwsEcrContainerAggregationMember {
                    accountAggregation?: never;
                    amiAggregation?: never;
                    awsEcrContainerAggregation: AwsEcrContainerAggregation;
                    ec2InstanceAggregation?: never;
                    findingTypeAggregation?: never;
                    imageLayerAggregation?: never;
                    packageAggregation?: never;
                    repositoryAggregation?: never;
                    titleAggregation?: never;
                    $unknown?: never;
            }
            /**
                * <p>An object that contains details about an aggregation request based on Amazon EC2
                *          instances.</p>
                */
            interface Ec2InstanceAggregationMember {
                    accountAggregation?: never;
                    amiAggregation?: never;
                    awsEcrContainerAggregation?: never;
                    ec2InstanceAggregation: Ec2InstanceAggregation;
                    findingTypeAggregation?: never;
                    imageLayerAggregation?: never;
                    packageAggregation?: never;
                    repositoryAggregation?: never;
                    titleAggregation?: never;
                    $unknown?: never;
            }
            /**
                * <p>An object that contains details about an aggregation request based on finding types.</p>
                */
            interface FindingTypeAggregationMember {
                    accountAggregation?: never;
                    amiAggregation?: never;
                    awsEcrContainerAggregation?: never;
                    ec2InstanceAggregation?: never;
                    findingTypeAggregation: FindingTypeAggregation;
                    imageLayerAggregation?: never;
                    packageAggregation?: never;
                    repositoryAggregation?: never;
                    titleAggregation?: never;
                    $unknown?: never;
            }
            /**
                * <p>An object that contains details about an aggregation request based on container image
                *          layers.</p>
                */
            interface ImageLayerAggregationMember {
                    accountAggregation?: never;
                    amiAggregation?: never;
                    awsEcrContainerAggregation?: never;
                    ec2InstanceAggregation?: never;
                    findingTypeAggregation?: never;
                    imageLayerAggregation: ImageLayerAggregation;
                    packageAggregation?: never;
                    repositoryAggregation?: never;
                    titleAggregation?: never;
                    $unknown?: never;
            }
            /**
                * <p>An object that contains details about an aggregation request based on operating system
                *          package type.</p>
                */
            interface PackageAggregationMember {
                    accountAggregation?: never;
                    amiAggregation?: never;
                    awsEcrContainerAggregation?: never;
                    ec2InstanceAggregation?: never;
                    findingTypeAggregation?: never;
                    imageLayerAggregation?: never;
                    packageAggregation: PackageAggregation;
                    repositoryAggregation?: never;
                    titleAggregation?: never;
                    $unknown?: never;
            }
            /**
                * <p>An object that contains details about an aggregation request based on Amazon ECR repositories.</p>
                */
            interface RepositoryAggregationMember {
                    accountAggregation?: never;
                    amiAggregation?: never;
                    awsEcrContainerAggregation?: never;
                    ec2InstanceAggregation?: never;
                    findingTypeAggregation?: never;
                    imageLayerAggregation?: never;
                    packageAggregation?: never;
                    repositoryAggregation: RepositoryAggregation;
                    titleAggregation?: never;
                    $unknown?: never;
            }
            /**
                * <p>An object that contains details about an aggregation request based on finding title.</p>
                */
            interface TitleAggregationMember {
                    accountAggregation?: never;
                    amiAggregation?: never;
                    awsEcrContainerAggregation?: never;
                    ec2InstanceAggregation?: never;
                    findingTypeAggregation?: never;
                    imageLayerAggregation?: never;
                    packageAggregation?: never;
                    repositoryAggregation?: never;
                    titleAggregation: TitleAggregation;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    accountAggregation?: never;
                    amiAggregation?: never;
                    awsEcrContainerAggregation?: never;
                    ec2InstanceAggregation?: never;
                    findingTypeAggregation?: never;
                    imageLayerAggregation?: never;
                    packageAggregation?: never;
                    repositoryAggregation?: never;
                    titleAggregation?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    accountAggregation: (value: AccountAggregation) => T;
                    amiAggregation: (value: AmiAggregation) => T;
                    awsEcrContainerAggregation: (value: AwsEcrContainerAggregation) => T;
                    ec2InstanceAggregation: (value: Ec2InstanceAggregation) => T;
                    findingTypeAggregation: (value: FindingTypeAggregation) => T;
                    imageLayerAggregation: (value: ImageLayerAggregation) => T;
                    packageAggregation: (value: PackageAggregation) => T;
                    repositoryAggregation: (value: RepositoryAggregation) => T;
                    titleAggregation: (value: TitleAggregation) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: AggregationRequest, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AggregationRequest) => any;
    }
    /**
        * <p>A response that contains the results of a finding aggregation by AMI.</p>
        */
    export interface AmiAggregationResponse {
            /**
                * <p>The ID of the AMI that findings were aggregated for.</p>
                */
            ami: string | undefined;
            /**
                * <p>The Amazon Web Services account ID that the AMI belongs.</p>
                */
            accountId?: string;
            /**
                * <p>An object that contains the count of matched findings per severity.</p>
                */
            severityCounts?: SeverityCounts;
            /**
                * <p>The IDs of Amazon EC2 instances using this AMI.</p>
                */
            affectedInstances?: number;
    }
    export namespace AmiAggregationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AmiAggregationResponse) => any;
    }
    /**
        * <p>An aggregation of information about Amazon ECR containers.</p>
        */
    export interface AwsEcrContainerAggregationResponse {
            /**
                * <p>The resource ID of the container.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>The SHA value of the container image.</p>
                */
            imageSha?: string;
            /**
                * <p>The container repository.</p>
                */
            repository?: string;
            /**
                * <p>The architecture of the container.</p>
                */
            architecture?: string;
            /**
                * <p>The container image stags.</p>
                */
            imageTags?: string[];
            /**
                * <p>The Amazon Web Services account ID of the account that owns the container.</p>
                */
            accountId?: string;
            /**
                * <p>The number of finding by severity.</p>
                */
            severityCounts?: SeverityCounts;
    }
    export namespace AwsEcrContainerAggregationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcrContainerAggregationResponse) => any;
    }
    /**
        * <p>A response that contains the results of a finding aggregation by Amazon EC2 instance.</p>
        */
    export interface Ec2InstanceAggregationResponse {
            /**
                * <p>The Amazon EC2 instance ID.</p>
                */
            instanceId: string | undefined;
            /**
                * <p>The Amazon Machine Image (AMI) of the Amazon EC2 instance.</p>
                */
            ami?: string;
            /**
                * <p>The operating system of the Amazon EC2 instance.</p>
                */
            operatingSystem?: string;
            /**
                * <p>The tags attached to the instance.</p>
                */
            instanceTags?: Record<string, string>;
            /**
                * <p>The Amazon Web Services account the Amazon EC2 instance belongs to.</p>
                */
            accountId?: string;
            /**
                * <p>An object that contains the count of matched findings per severity.</p>
                */
            severityCounts?: SeverityCounts;
            /**
                * <p>The number of network findings for the Amazon EC2 instance.</p>
                */
            networkFindings?: number;
    }
    export namespace Ec2InstanceAggregationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Ec2InstanceAggregationResponse) => any;
    }
    /**
        * <p>A response that contains the results of a finding type aggregation.</p>
        */
    export interface FindingTypeAggregationResponse {
            /**
                * <p>The ID of the Amazon Web Services account associated with the findings.</p>
                */
            accountId?: string;
            /**
                * <p>The value to sort results by.</p>
                */
            severityCounts?: SeverityCounts;
    }
    export namespace FindingTypeAggregationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FindingTypeAggregationResponse) => any;
    }
    /**
        * <p>A response that contains the results of a finding aggregation by image layer.</p>
        */
    export interface ImageLayerAggregationResponse {
            /**
                * <p>The repository the layer resides in.</p>
                */
            repository: string | undefined;
            /**
                * <p>The resource ID of the container image layer.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>The layer hash.</p>
                */
            layerHash: string | undefined;
            /**
                * <p>The ID of the Amazon Web Services account that owns the container image hosting the layer image.</p>
                */
            accountId: string | undefined;
            /**
                * <p>An object that represents the count of matched findings per severity.</p>
                */
            severityCounts?: SeverityCounts;
    }
    export namespace ImageLayerAggregationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImageLayerAggregationResponse) => any;
    }
    /**
        * <p>A response that contains the results of a finding aggregation by image layer.</p>
        */
    export interface PackageAggregationResponse {
            /**
                * <p>The name of the operating system package.</p>
                */
            packageName: string | undefined;
            /**
                * <p>The ID of the Amazon Web Services account associated with the findings.</p>
                */
            accountId?: string;
            /**
                * <p>An object that contains the count of matched findings per severity.</p>
                */
            severityCounts?: SeverityCounts;
    }
    export namespace PackageAggregationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageAggregationResponse) => any;
    }
    /**
        * <p>A response that contains details on the results of a finding aggregation by repository.</p>
        */
    export interface RepositoryAggregationResponse {
            /**
                * <p>The name of the repository associated with the findings.</p>
                */
            repository: string | undefined;
            /**
                * <p>The ID of the Amazon Web Services account associated with the findings.</p>
                */
            accountId?: string;
            /**
                * <p>An object that represent the count of matched findings per severity.</p>
                */
            severityCounts?: SeverityCounts;
            /**
                * <p>The number of container images impacted by the findings.</p>
                */
            affectedImages?: number;
    }
    export namespace RepositoryAggregationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RepositoryAggregationResponse) => any;
    }
    /**
        * <p>A response that contains details on the results of a finding aggregation by title.</p>
        */
    export interface TitleAggregationResponse {
            /**
                * <p>The title that the findings were aggregated on.</p>
                */
            title: string | undefined;
            /**
                * <p>The vulnerability ID of the finding.</p>
                */
            vulnerabilityId?: string;
            /**
                * <p>The ID of the Amazon Web Services account associated with the findings.</p>
                */
            accountId?: string;
            /**
                * <p>An object that represent the count of matched findings per severity.</p>
                */
            severityCounts?: SeverityCounts;
    }
    export namespace TitleAggregationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TitleAggregationResponse) => any;
    }
    /**
        * <p>A structure that contains details about the results of an aggregation type.</p>
        */
    export type AggregationResponse = AggregationResponse.AccountAggregationMember | AggregationResponse.AmiAggregationMember | AggregationResponse.AwsEcrContainerAggregationMember | AggregationResponse.Ec2InstanceAggregationMember | AggregationResponse.FindingTypeAggregationMember | AggregationResponse.ImageLayerAggregationMember | AggregationResponse.PackageAggregationMember | AggregationResponse.RepositoryAggregationMember | AggregationResponse.TitleAggregationMember | AggregationResponse.$UnknownMember;
    export namespace AggregationResponse {
            /**
                * <p>An object that contains details about an aggregation response based on Amazon Web Services account
                *          IDs.</p>
                */
            interface AccountAggregationMember {
                    accountAggregation: AccountAggregationResponse;
                    amiAggregation?: never;
                    awsEcrContainerAggregation?: never;
                    ec2InstanceAggregation?: never;
                    findingTypeAggregation?: never;
                    imageLayerAggregation?: never;
                    packageAggregation?: never;
                    repositoryAggregation?: never;
                    titleAggregation?: never;
                    $unknown?: never;
            }
            /**
                * <p>An object that contains details about an aggregation response based on Amazon Machine
                *          Images (AMIs).</p>
                */
            interface AmiAggregationMember {
                    accountAggregation?: never;
                    amiAggregation: AmiAggregationResponse;
                    awsEcrContainerAggregation?: never;
                    ec2InstanceAggregation?: never;
                    findingTypeAggregation?: never;
                    imageLayerAggregation?: never;
                    packageAggregation?: never;
                    repositoryAggregation?: never;
                    titleAggregation?: never;
                    $unknown?: never;
            }
            /**
                * <p>An object that contains details about an aggregation response based on Amazon ECR container
                *          images.</p>
                */
            interface AwsEcrContainerAggregationMember {
                    accountAggregation?: never;
                    amiAggregation?: never;
                    awsEcrContainerAggregation: AwsEcrContainerAggregationResponse;
                    ec2InstanceAggregation?: never;
                    findingTypeAggregation?: never;
                    imageLayerAggregation?: never;
                    packageAggregation?: never;
                    repositoryAggregation?: never;
                    titleAggregation?: never;
                    $unknown?: never;
            }
            /**
                * <p>An object that contains details about an aggregation response based on Amazon EC2
                *          instances.</p>
                */
            interface Ec2InstanceAggregationMember {
                    accountAggregation?: never;
                    amiAggregation?: never;
                    awsEcrContainerAggregation?: never;
                    ec2InstanceAggregation: Ec2InstanceAggregationResponse;
                    findingTypeAggregation?: never;
                    imageLayerAggregation?: never;
                    packageAggregation?: never;
                    repositoryAggregation?: never;
                    titleAggregation?: never;
                    $unknown?: never;
            }
            /**
                * <p>An object that contains details about an aggregation response based on finding types.</p>
                */
            interface FindingTypeAggregationMember {
                    accountAggregation?: never;
                    amiAggregation?: never;
                    awsEcrContainerAggregation?: never;
                    ec2InstanceAggregation?: never;
                    findingTypeAggregation: FindingTypeAggregationResponse;
                    imageLayerAggregation?: never;
                    packageAggregation?: never;
                    repositoryAggregation?: never;
                    titleAggregation?: never;
                    $unknown?: never;
            }
            /**
                * <p>An object that contains details about an aggregation response based on container image
                *          layers.</p>
                */
            interface ImageLayerAggregationMember {
                    accountAggregation?: never;
                    amiAggregation?: never;
                    awsEcrContainerAggregation?: never;
                    ec2InstanceAggregation?: never;
                    findingTypeAggregation?: never;
                    imageLayerAggregation: ImageLayerAggregationResponse;
                    packageAggregation?: never;
                    repositoryAggregation?: never;
                    titleAggregation?: never;
                    $unknown?: never;
            }
            /**
                * <p>An object that contains details about an aggregation response based on operating system
                *          package type.</p>
                */
            interface PackageAggregationMember {
                    accountAggregation?: never;
                    amiAggregation?: never;
                    awsEcrContainerAggregation?: never;
                    ec2InstanceAggregation?: never;
                    findingTypeAggregation?: never;
                    imageLayerAggregation?: never;
                    packageAggregation: PackageAggregationResponse;
                    repositoryAggregation?: never;
                    titleAggregation?: never;
                    $unknown?: never;
            }
            /**
                * <p>An object that contains details about an aggregation response based on Amazon ECR
                *          repositories.</p>
                */
            interface RepositoryAggregationMember {
                    accountAggregation?: never;
                    amiAggregation?: never;
                    awsEcrContainerAggregation?: never;
                    ec2InstanceAggregation?: never;
                    findingTypeAggregation?: never;
                    imageLayerAggregation?: never;
                    packageAggregation?: never;
                    repositoryAggregation: RepositoryAggregationResponse;
                    titleAggregation?: never;
                    $unknown?: never;
            }
            /**
                * <p>An object that contains details about an aggregation response based on finding title.</p>
                */
            interface TitleAggregationMember {
                    accountAggregation?: never;
                    amiAggregation?: never;
                    awsEcrContainerAggregation?: never;
                    ec2InstanceAggregation?: never;
                    findingTypeAggregation?: never;
                    imageLayerAggregation?: never;
                    packageAggregation?: never;
                    repositoryAggregation?: never;
                    titleAggregation: TitleAggregationResponse;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    accountAggregation?: never;
                    amiAggregation?: never;
                    awsEcrContainerAggregation?: never;
                    ec2InstanceAggregation?: never;
                    findingTypeAggregation?: never;
                    imageLayerAggregation?: never;
                    packageAggregation?: never;
                    repositoryAggregation?: never;
                    titleAggregation?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    accountAggregation: (value: AccountAggregationResponse) => T;
                    amiAggregation: (value: AmiAggregationResponse) => T;
                    awsEcrContainerAggregation: (value: AwsEcrContainerAggregationResponse) => T;
                    ec2InstanceAggregation: (value: Ec2InstanceAggregationResponse) => T;
                    findingTypeAggregation: (value: FindingTypeAggregationResponse) => T;
                    imageLayerAggregation: (value: ImageLayerAggregationResponse) => T;
                    packageAggregation: (value: PackageAggregationResponse) => T;
                    repositoryAggregation: (value: RepositoryAggregationResponse) => T;
                    titleAggregation: (value: TitleAggregationResponse) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: AggregationResponse, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AggregationResponse) => any;
    }
    export enum AggregationType {
            ACCOUNT = "ACCOUNT",
            AMI = "AMI",
            AWS_EC2_INSTANCE = "AWS_EC2_INSTANCE",
            AWS_ECR_CONTAINER = "AWS_ECR_CONTAINER",
            FINDING_TYPE = "FINDING_TYPE",
            IMAGE_LAYER = "IMAGE_LAYER",
            PACKAGE = "PACKAGE",
            REPOSITORY = "REPOSITORY",
            TITLE = "TITLE"
    }
    export interface AssociateMemberRequest {
            /**
                * <p>The Amazon Web Services account ID of the member account to be associated.</p>
                */
            accountId: string | undefined;
    }
    export namespace AssociateMemberRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateMemberRequest) => any;
    }
    export interface AssociateMemberResponse {
            /**
                * <p>The Amazon Web Services account ID of the successfully associated member account.</p>
                */
            accountId: string | undefined;
    }
    export namespace AssociateMemberResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateMemberResponse) => any;
    }
    /**
        * <p>The request has failed due to an internal failure of the Amazon Inspector service.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            $retryable: {};
            /**
                * <p>The number of seconds to wait before retrying the request.</p>
                */
            retryAfterSeconds?: number;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>The limit on the number of requests per second was exceeded.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    /**
        * <p>An object that describes a validation exception.</p>
        */
    export interface ValidationExceptionField {
            /**
                * <p>The name of the validation exception.</p>
                */
            name: string | undefined;
            /**
                * <p>The validation exception message.</p>
                */
            message: string | undefined;
    }
    export namespace ValidationExceptionField {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidationExceptionField) => any;
    }
    export enum ValidationExceptionReason {
            CANNOT_PARSE = "CANNOT_PARSE",
            FIELD_VALIDATION_FAILED = "FIELD_VALIDATION_FAILED",
            OTHER = "OTHER"
    }
    /**
        * <p>The request has failed validation due to missing required fields or having invalid
        *          inputs.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            /**
                * <p>The reason for the validation failure.</p>
                */
            reason: ValidationExceptionReason | string | undefined;
            /**
                * <p>The fields that failed validation.</p>
                */
            fields?: ValidationExceptionField[];
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    /**
        * <p>Represents which scan types are automatically enabled for new members of your Amazon Inspector organization.</p>
        */
    export interface AutoEnable {
            /**
                * <p>Represents whether Amazon EC2 scans are automatically enabled for new members of your Amazon Inspector
                *          organization.</p>
                */
            ec2: boolean | undefined;
            /**
                * <p>Represents whether Amazon ECR scans are automatically enabled for new members of your Amazon Inspector
                *          organization.</p>
                */
            ecr: boolean | undefined;
    }
    export namespace AutoEnable {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoEnable) => any;
    }
    /**
        * <p>Details of the Amazon EC2 instance involved in a finding.</p>
        */
    export interface AwsEc2InstanceDetails {
            /**
                * <p>The type of the Amazon EC2 instance.</p>
                */
            type?: string;
            /**
                * <p>The image ID of the Amazon EC2 instance.</p>
                */
            imageId?: string;
            /**
                * <p>The IPv4 addresses of the Amazon EC2 instance.</p>
                */
            ipV4Addresses?: string[];
            /**
                * <p>The IPv6 addresses of the Amazon EC2 instance.</p>
                */
            ipV6Addresses?: string[];
            /**
                * <p>The name of the key pair used to launch the Amazon EC2 instance.</p>
                */
            keyName?: string;
            /**
                * <p>The IAM instance profile ARN of the Amazon EC2 instance.</p>
                */
            iamInstanceProfileArn?: string;
            /**
                * <p>The VPC ID of the Amazon EC2 instance.</p>
                */
            vpcId?: string;
            /**
                * <p>The subnet ID of the Amazon EC2 instance.</p>
                */
            subnetId?: string;
            /**
                * <p>The date and time the Amazon EC2 instance was launched at.</p>
                */
            launchedAt?: Date;
            /**
                * <p>The platform of the Amazon EC2 instance.</p>
                */
            platform?: string;
    }
    export namespace AwsEc2InstanceDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2InstanceDetails) => any;
    }
    /**
        * <p>The image details of the Amazon ECR container image.</p>
        */
    export interface AwsEcrContainerImageDetails {
            /**
                * <p>The name of the repository the Amazon ECR container image resides in.</p>
                */
            repositoryName: string | undefined;
            /**
                * <p>The image tags attached to the Amazon ECR container image.</p>
                */
            imageTags?: string[];
            /**
                * <p>The date and time the Amazon ECR container image was pushed.</p>
                */
            pushedAt?: Date;
            /**
                * <p>The image author of the Amazon ECR container image.</p>
                */
            author?: string;
            /**
                * <p>The architecture of the Amazon ECR container image.</p>
                */
            architecture?: string;
            /**
                * <p>The image hash of the Amazon ECR container image.</p>
                */
            imageHash: string | undefined;
            /**
                * <p>The registry the Amazon ECR container image belongs to.</p>
                */
            registry: string | undefined;
            /**
                * <p>The platform of the Amazon ECR container image.</p>
                */
            platform?: string;
    }
    export namespace AwsEcrContainerImageDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcrContainerImageDetails) => any;
    }
    /**
        * <p>One or more tags submitted as part of the request is not valid.</p>
        */
    export class BadRequestException extends __BaseException {
            readonly name: "BadRequestException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BadRequestException, __BaseException>);
    }
    export interface BatchGetAccountStatusRequest {
            /**
                * <p>The 12-digit Amazon Web Services account IDs of the accounts to retrieve Amazon Inspector status for.</p>
                */
            accountIds?: string[];
    }
    export namespace BatchGetAccountStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetAccountStatusRequest) => any;
    }
    /**
        * <p>An object with details on why an account failed to enable Amazon Inspector.</p>
        */
    export interface FailedAccount {
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            accountId: string | undefined;
            /**
                * <p>The status of Amazon Inspector for the account.</p>
                */
            status?: Status | string;
            /**
                * <p>An object detailing which resources Amazon Inspector is enabled to scan for the account.</p>
                */
            resourceStatus?: ResourceStatus;
            /**
                * <p>The error code explaining why the account failed to enable Amazon Inspector.</p>
                */
            errorCode: ErrorCode | string | undefined;
            /**
                * <p>The error message received when the account failed to enable Amazon Inspector.</p>
                */
            errorMessage: string | undefined;
    }
    export namespace FailedAccount {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FailedAccount) => any;
    }
    export interface BatchGetAccountStatusResponse {
            /**
                * <p>An array of objects that provide details on the status of Amazon Inspector for each of the requested accounts.</p>
                */
            accounts: AccountState[] | undefined;
            /**
                * <p>An array of objects detailing any accounts that failed to enable Amazon Inspector and why.</p>
                */
            failedAccounts?: FailedAccount[];
    }
    export namespace BatchGetAccountStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetAccountStatusResponse) => any;
    }
    /**
        * <p>The operation tried to access an invalid resource. Make sure the resource is specified correctly.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    export interface BatchGetFreeTrialInfoRequest {
            /**
                * <p>The account IDs to get free trial status for.</p>
                */
            accountIds: string[] | undefined;
    }
    export namespace BatchGetFreeTrialInfoRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetFreeTrialInfoRequest) => any;
    }
    export enum FreeTrialStatus {
            ACTIVE = "ACTIVE",
            INACTIVE = "INACTIVE"
    }
    export enum FreeTrialType {
            EC2 = "EC2",
            ECR = "ECR"
    }
    /**
        * <p>An object that contains information about the Amazon Inspector free trial for an account.</p>
        */
    export interface FreeTrialInfo {
            /**
                * <p>The type of scan covered by the Amazon Inspector free trail.</p>
                */
            type: FreeTrialType | string | undefined;
            /**
                * <p>The date and time that the Amazon Inspector free trail started for a given account.</p>
                */
            start: Date | undefined;
            /**
                * <p>The date and time that the Amazon Inspector free trail ends for a given account.</p>
                */
            end: Date | undefined;
            /**
                * <p>The order to sort results by.</p>
                */
            status: FreeTrialStatus | string | undefined;
    }
    export namespace FreeTrialInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FreeTrialInfo) => any;
    }
    /**
        * <p>Information about the Amazon Inspector free trial for an account.</p>
        */
    export interface FreeTrialAccountInfo {
            /**
                * <p>The account associated with the Amazon Inspector free trial information.</p>
                */
            accountId: string | undefined;
            /**
                * <p>Contains information about the Amazon Inspector free trial for an account.</p>
                */
            freeTrialInfo: FreeTrialInfo[] | undefined;
    }
    export namespace FreeTrialAccountInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FreeTrialAccountInfo) => any;
    }
    export enum FreeTrialInfoErrorCode {
            ACCESS_DENIED = "ACCESS_DENIED",
            INTERNAL_ERROR = "INTERNAL_ERROR"
    }
    /**
        * <p>Information about an error received while accessing free trail data for an account.</p>
        */
    export interface FreeTrialInfoError {
            /**
                * <p>The account associated with the Amazon Inspector free trial information.</p>
                */
            accountId: string | undefined;
            /**
                * <p>The error code.</p>
                */
            code: FreeTrialInfoErrorCode | string | undefined;
            /**
                * <p>The error message returned.</p>
                */
            message: string | undefined;
    }
    export namespace FreeTrialInfoError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FreeTrialInfoError) => any;
    }
    export interface BatchGetFreeTrialInfoResponse {
            /**
                * <p>An array of objects that provide Amazon Inspector free trial details for each of the requested accounts.
                *       </p>
                */
            accounts: FreeTrialAccountInfo[] | undefined;
            /**
                * <p>An array of objects detailing any accounts that free trial data could not be returned for.</p>
                */
            failedAccounts: FreeTrialInfoError[] | undefined;
    }
    export namespace BatchGetFreeTrialInfoResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetFreeTrialInfoResponse) => any;
    }
    export interface CancelFindingsReportRequest {
            /**
                * <p>The ID of the report to be canceled.</p>
                */
            reportId: string | undefined;
    }
    export namespace CancelFindingsReportRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelFindingsReportRequest) => any;
    }
    export interface CancelFindingsReportResponse {
            /**
                * <p>The ID of the canceled report.</p>
                */
            reportId: string | undefined;
    }
    export namespace CancelFindingsReportResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelFindingsReportResponse) => any;
    }
    /**
        * <p>A conflict occurred.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * <p>The ID of the conflicting resource.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>The type of the conflicting resource.</p>
                */
            resourceType: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    export enum GroupKey {
            ACCOUNT_ID = "ACCOUNT_ID",
            ECR_REPOSITORY_NAME = "ECR_REPOSITORY_NAME",
            RESOURCE_TYPE = "RESOURCE_TYPE",
            SCAN_STATUS_CODE = "SCAN_STATUS_CODE",
            SCAN_STATUS_REASON = "SCAN_STATUS_REASON"
    }
    /**
        * <p>a structure that contains information on the count of resources within a group.</p>
        */
    export interface Counts {
            /**
                * <p>The number of resources.</p>
                */
            count?: number;
            /**
                * <p>The key associated with this group</p>
                */
            groupKey?: GroupKey | string;
    }
    export namespace Counts {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Counts) => any;
    }
    export enum CoverageStringComparison {
            EQUALS = "EQUALS",
            NOT_EQUALS = "NOT_EQUALS"
    }
    /**
        * <p>Contains details of a coverage string filter.</p>
        */
    export interface CoverageStringFilter {
            /**
                * <p>The operator to compare strings on.</p>
                */
            comparison: CoverageStringComparison | string | undefined;
            /**
                * <p>The value to compare strings on.</p>
                */
            value: string | undefined;
    }
    export namespace CoverageStringFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CoverageStringFilter) => any;
    }
    export enum CoverageMapComparison {
            EQUALS = "EQUALS"
    }
    /**
        * <p>Contains details of a coverage map filter.</p>
        */
    export interface CoverageMapFilter {
            /**
                * <p>The operator to compare coverage on.</p>
                */
            comparison: CoverageMapComparison | string | undefined;
            /**
                * <p>The tag key associated with the coverage map filter.</p>
                */
            key: string | undefined;
            /**
                * <p>The tag value associated with the coverage map filter.</p>
                */
            value?: string;
    }
    export namespace CoverageMapFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CoverageMapFilter) => any;
    }
    /**
        * <p>A structure that identifies filter criteria for <code>GetCoverageStatistics</code>.</p>
        */
    export interface CoverageFilterCriteria {
            /**
                * <p>The scan status code to filter on.</p>
                */
            scanStatusCode?: CoverageStringFilter[];
            /**
                * <p>The scan status reason to filter on.</p>
                */
            scanStatusReason?: CoverageStringFilter[];
            /**
                * <p>An array of Amazon Web Services account IDs to return coverage statistics for.</p>
                */
            accountId?: CoverageStringFilter[];
            /**
                * <p>An array of Amazon Web Services resource IDs to return coverage statistics for.</p>
                */
            resourceId?: CoverageStringFilter[];
            /**
                * <p>An array of Amazon Web Services resource types to return coverage statistics for. The values can be <code>AWS_EC2_INSTANCE</code> or <code>AWS_ECR_REPOSITORY</code>.</p>
                */
            resourceType?: CoverageStringFilter[];
            /**
                * <p>An array of Amazon Inspector scan types to return coverage statistics for.</p>
                */
            scanType?: CoverageStringFilter[];
            /**
                * <p>The Amazon ECR repository name to filter on.</p>
                */
            ecrRepositoryName?: CoverageStringFilter[];
            /**
                * <p>The Amazon ECR image tags to filter on.</p>
                */
            ecrImageTags?: CoverageStringFilter[];
            /**
                * <p>The Amazon EC2 instance tags to filter on.</p>
                */
            ec2InstanceTags?: CoverageMapFilter[];
    }
    export namespace CoverageFilterCriteria {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CoverageFilterCriteria) => any;
    }
    export enum CoverageResourceType {
            AWS_EC2_INSTANCE = "AWS_EC2_INSTANCE",
            AWS_ECR_CONTAINER_IMAGE = "AWS_ECR_CONTAINER_IMAGE",
            AWS_ECR_REPOSITORY = "AWS_ECR_REPOSITORY"
    }
    export enum Ec2Platform {
            LINUX = "LINUX",
            UNKNOWN = "UNKNOWN",
            WINDOWS = "WINDOWS"
    }
    /**
        * <p>Meta data details of an Amazon EC2 instance.</p>
        */
    export interface Ec2Metadata {
            /**
                * <p>The tags attached to the instance.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The ID of the Amazon Machine Image (AMI) used to launch the instance.</p>
                */
            amiId?: string;
            /**
                * <p>The platform of the instance.</p>
                */
            platform?: Ec2Platform | string;
    }
    export namespace Ec2Metadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Ec2Metadata) => any;
    }
    /**
        * <p>Information on the Amazon ECR image metadata associated with a finding.</p>
        */
    export interface EcrContainerImageMetadata {
            /**
                * <p>Tags associated with the Amazon ECR image metadata.</p>
                */
            tags?: string[];
    }
    export namespace EcrContainerImageMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EcrContainerImageMetadata) => any;
    }
    export enum EcrScanFrequency {
            CONTINUOUS_SCAN = "CONTINUOUS_SCAN",
            MANUAL = "MANUAL",
            SCAN_ON_PUSH = "SCAN_ON_PUSH"
    }
    /**
        * <p>Information on the Amazon ECR repository metadata associated with a finding.</p>
        */
    export interface EcrRepositoryMetadata {
            /**
                * <p>The name of the Amazon ECR repository.</p>
                */
            name?: string;
            /**
                * <p>The frequency of scans.</p>
                */
            scanFrequency?: EcrScanFrequency | string;
    }
    export namespace EcrRepositoryMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EcrRepositoryMetadata) => any;
    }
    /**
        * <p>An object that contains details about the metadata for an Amazon ECR resource.</p>
        */
    export interface ResourceScanMetadata {
            /**
                * <p>An object that contains details about the repository an Amazon ECR image resides in.</p>
                */
            ecrRepository?: EcrRepositoryMetadata;
            /**
                * <p>An object that contains details about the container metadata for an Amazon ECR image.</p>
                */
            ecrImage?: EcrContainerImageMetadata;
            /**
                * <p>An object that contains metadata details for an Amazon EC2 instance.</p>
                */
            ec2?: Ec2Metadata;
    }
    export namespace ResourceScanMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceScanMetadata) => any;
    }
    export enum ScanStatusReason {
            ACCESS_DENIED = "ACCESS_DENIED",
            EC2_INSTANCE_STOPPED = "EC2_INSTANCE_STOPPED",
            IMAGE_SIZE_EXCEEDED = "IMAGE_SIZE_EXCEEDED",
            INTERNAL_ERROR = "INTERNAL_ERROR",
            NO_RESOURCES_FOUND = "NO_RESOURCES_FOUND",
            PENDING_DISABLE = "PENDING_DISABLE",
            PENDING_INITIAL_SCAN = "PENDING_INITIAL_SCAN",
            RESOURCE_TERMINATED = "RESOURCE_TERMINATED",
            SCAN_ELIGIBILITY_EXPIRED = "SCAN_ELIGIBILITY_EXPIRED",
            SCAN_FREQUENCY_MANUAL = "SCAN_FREQUENCY_MANUAL",
            SCAN_FREQUENCY_SCAN_ON_PUSH = "SCAN_FREQUENCY_SCAN_ON_PUSH",
            SUCCESSFUL = "SUCCESSFUL",
            UNMANAGED_EC2_INSTANCE = "UNMANAGED_EC2_INSTANCE",
            UNSUPPORTED_OS = "UNSUPPORTED_OS"
    }
    export enum ScanStatusCode {
            ACTIVE = "ACTIVE",
            INACTIVE = "INACTIVE"
    }
    /**
        * <p>The status of the scan.</p>
        */
    export interface ScanStatus {
            /**
                * <p>The status code of the scan.</p>
                */
            statusCode: ScanStatusCode | string | undefined;
            /**
                * <p>The reason for the scan.</p>
                */
            reason: ScanStatusReason | string | undefined;
    }
    export namespace ScanStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScanStatus) => any;
    }
    export enum ScanType {
            NETWORK = "NETWORK",
            PACKAGE = "PACKAGE"
    }
    /**
        * <p>An object that contains details about a resource covered by Amazon Inspector.</p>
        */
    export interface CoveredResource {
            /**
                * <p>The type of the covered resource.</p>
                */
            resourceType: CoverageResourceType | string | undefined;
            /**
                * <p>The ID of the covered resource.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>The Amazon Web Services account ID of the covered resource.</p>
                */
            accountId: string | undefined;
            /**
                * <p>The Amazon Inspector scan type covering the resource.</p>
                */
            scanType: ScanType | string | undefined;
            /**
                * <p>The status of the scan covering the resource.</p>
                */
            scanStatus?: ScanStatus;
            /**
                * <p>An object that contains details about the metadata.</p>
                */
            resourceMetadata?: ResourceScanMetadata;
    }
    export namespace CoveredResource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CoveredResource) => any;
    }
    export enum FilterAction {
            NONE = "NONE",
            SUPPRESS = "SUPPRESS"
    }
    /**
        * <p>Contains details on the time range used to filter findings.</p>
        */
    export interface DateFilter {
            /**
                * <p>A timestamp representing the start of the time period filtered on.</p>
                */
            startInclusive?: Date;
            /**
                * <p>A timestamp representing the end of the time period filtered on.</p>
                */
            endInclusive?: Date;
    }
    export namespace DateFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DateFilter) => any;
    }
    /**
        * <p>An object that describes the details of a number filter.</p>
        */
    export interface NumberFilter {
            /**
                * <p>The highest number to be included in the filter.</p>
                */
            upperInclusive?: number;
            /**
                * <p>The lowest number to be included in the filter.</p>
                */
            lowerInclusive?: number;
    }
    export namespace NumberFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NumberFilter) => any;
    }
    /**
        * <p>An object that describes the details of a port range filter.</p>
        */
    export interface PortRangeFilter {
            /**
                * <p>The port number the port range begins at.</p>
                */
            beginInclusive?: number;
            /**
                * <p>The port number the port range ends at.</p>
                */
            endInclusive?: number;
    }
    export namespace PortRangeFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PortRangeFilter) => any;
    }
    /**
        * <p>Contains information on the details of a package filter.</p>
        */
    export interface PackageFilter {
            /**
                * <p>An object that contains details on the name of the package to filter on.</p>
                */
            name?: StringFilter;
            /**
                * <p>The package version to filter on.</p>
                */
            version?: StringFilter;
            /**
                * <p>An object that contains details on the package epoch to filter on.</p>
                */
            epoch?: NumberFilter;
            /**
                * <p>An object that contains details on the package release to filter on.</p>
                */
            release?: StringFilter;
            /**
                * <p>An object that contains details on the package architecture type to filter on.</p>
                */
            architecture?: StringFilter;
            /**
                * <p>An object that contains details on the source layer hash to filter on.</p>
                */
            sourceLayerHash?: StringFilter;
    }
    export namespace PackageFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageFilter) => any;
    }
    /**
        * <p>Details on the criteria used to define the filter.</p>
        */
    export interface FilterCriteria {
            /**
                * <p>Details on the finding ARNs used to filter findings.</p>
                */
            findingArn?: StringFilter[];
            /**
                * <p>Details of the Amazon Web Services account IDs used to filter findings.</p>
                */
            awsAccountId?: StringFilter[];
            /**
                * <p>Details on the finding types used to filter findings.</p>
                */
            findingType?: StringFilter[];
            /**
                * <p>Details on the severity used to filter findings.</p>
                */
            severity?: StringFilter[];
            /**
                * <p>Details on the date and time a finding was first seen used to filter findings.</p>
                */
            firstObservedAt?: DateFilter[];
            /**
                * <p>Details on the date and time a finding was last seen used to filter findings.</p>
                */
            lastObservedAt?: DateFilter[];
            /**
                * <p>Details on the date and time a finding was last updated at used to filter findings.</p>
                */
            updatedAt?: DateFilter[];
            /**
                * <p>Details on the finding status types used to filter findings.</p>
                */
            findingStatus?: StringFilter[];
            /**
                * <p>Details on the finding title used to filter findings.</p>
                */
            title?: StringFilter[];
            /**
                * <p>The Amazon Inspector score to filter on.</p>
                */
            inspectorScore?: NumberFilter[];
            /**
                * <p>Details on the resource types used to filter findings.</p>
                */
            resourceType?: StringFilter[];
            /**
                * <p>Details on the resource IDs used to filter findings.</p>
                */
            resourceId?: StringFilter[];
            /**
                * <p>Details on the resource tags used to filter findings.</p>
                */
            resourceTags?: MapFilter[];
            /**
                * <p>Details of the Amazon EC2 instance image IDs used to filter findings.</p>
                */
            ec2InstanceImageId?: StringFilter[];
            /**
                * <p>Details of the Amazon EC2 instance VPC IDs used to filter findings.</p>
                */
            ec2InstanceVpcId?: StringFilter[];
            /**
                * <p>Details of the Amazon EC2 instance subnet IDs used to filter findings.</p>
                */
            ec2InstanceSubnetId?: StringFilter[];
            /**
                * <p>Details on the Amazon ECR image push date and time used to filter findings.</p>
                */
            ecrImagePushedAt?: DateFilter[];
            /**
                * <p>Details of the Amazon ECR image architecture types used to filter findings.</p>
                */
            ecrImageArchitecture?: StringFilter[];
            /**
                * <p>Details on the Amazon ECR registry used to filter findings.</p>
                */
            ecrImageRegistry?: StringFilter[];
            /**
                * <p>Details on the name of the Amazon ECR repository used to filter findings.</p>
                */
            ecrImageRepositoryName?: StringFilter[];
            /**
                * <p>The tags attached to the Amazon ECR container image.</p>
                */
            ecrImageTags?: StringFilter[];
            /**
                * <p>Details of the Amazon ECR image hashes used to filter findings.</p>
                */
            ecrImageHash?: StringFilter[];
            /**
                * <p>Details on the port ranges used to filter findings.</p>
                */
            portRange?: PortRangeFilter[];
            /**
                * <p>Details on the ingress source addresses used to filter findings.</p>
                */
            networkProtocol?: StringFilter[];
            /**
                * <p>Details of the component IDs used to filter findings.</p>
                */
            componentId?: StringFilter[];
            /**
                * <p>Details of the component types used to filter findings.</p>
                */
            componentType?: StringFilter[];
            /**
                * <p>Details on the vulnerability ID used to filter findings.</p>
                */
            vulnerabilityId?: StringFilter[];
            /**
                * <p>Details on the vulnerability type used to filter findings.</p>
                */
            vulnerabilitySource?: StringFilter[];
            /**
                * <p>Details on the vendor severity used to filter findings.</p>
                */
            vendorSeverity?: StringFilter[];
            /**
                * <p>Details on the vulnerable packages used to filter findings.</p>
                */
            vulnerablePackages?: PackageFilter[];
            /**
                * <p>Details on the related vulnerabilities used to filter findings.</p>
                */
            relatedVulnerabilities?: StringFilter[];
    }
    export namespace FilterCriteria {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FilterCriteria) => any;
    }
    export interface CreateFilterRequest {
            /**
                * <p>Defines the action that is to be applied to the findings that match the filter.</p>
                */
            action: FilterAction | string | undefined;
            /**
                * <p>A description of the filter.</p>
                */
            description?: string;
            /**
                * <p>Defines the criteria to be used in the filter for querying findings.</p>
                */
            filterCriteria: FilterCriteria | undefined;
            /**
                * <p>The name of the filter. Minimum length of 3. Maximum length of 64. Valid characters
                *          include alphanumeric characters, dot (.), underscore (_), and dash (-). Spaces are not
                *          allowed.</p>
                */
            name: string | undefined;
            /**
                * <p>A list of tags for the filter.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The reason for creating the filter.</p>
                */
            reason?: string;
    }
    export namespace CreateFilterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFilterRequest) => any;
    }
    export interface CreateFilterResponse {
            /**
                * <p>The Amazon Resource Number (ARN) of the successfully created filter.</p>
                */
            arn: string | undefined;
    }
    export namespace CreateFilterResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFilterResponse) => any;
    }
    /**
        * <p>You have exceeded your service quota. To perform the requested action, remove some of
        *          the relevant resources, or use Service Quotas to request a service quota increase.</p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            /**
                * <p>The ID of the resource that exceeds a service quota.</p>
                */
            resourceId: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    export enum ReportFormat {
            CSV = "CSV",
            JSON = "JSON"
    }
    /**
        * <p>Contains details of the Amazon S3 bucket and KMS key used to export findings.</p>
        */
    export interface Destination {
            /**
                * <p>The name of the Amazon S3 bucket to export findings to.</p>
                */
            bucketName: string | undefined;
            /**
                * <p>The prefix of the KMS key used to export findings.</p>
                */
            keyPrefix?: string;
            /**
                * <p>The ARN of the KMS key used to encrypt data when exporting findings.</p>
                */
            kmsKeyArn: string | undefined;
    }
    export namespace Destination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Destination) => any;
    }
    export interface CreateFindingsReportRequest {
            /**
                * <p>The filter criteria to apply to the results of the finding report.</p>
                */
            filterCriteria?: FilterCriteria;
            /**
                * <p>The format to generate the report in.</p>
                */
            reportFormat: ReportFormat | string | undefined;
            /**
                * <p>The Amazon S3 export destination for the report.</p>
                */
            s3Destination: Destination | undefined;
    }
    export namespace CreateFindingsReportRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFindingsReportRequest) => any;
    }
    export interface CreateFindingsReportResponse {
            /**
                * <p>The ID of the report.</p>
                */
            reportId?: string;
    }
    export namespace CreateFindingsReportResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFindingsReportResponse) => any;
    }
    export enum Currency {
            USD = "USD"
    }
    /**
        * <p>The CVSS score for a finding.</p>
        */
    export interface CvssScore {
            /**
                * <p>The base CVSS score used for the finding.</p>
                */
            baseScore: number | undefined;
            /**
                * <p>The vector string of the CVSS score.</p>
                */
            scoringVector: string | undefined;
            /**
                * <p>The version of CVSS used for the score.</p>
                */
            version: string | undefined;
            /**
                * <p>The source of the CVSS score.</p>
                */
            source: string | undefined;
    }
    export namespace CvssScore {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CvssScore) => any;
    }
    /**
        * <p>Details on adjustments Amazon Inspector made to the CVSS score for a finding.</p>
        */
    export interface CvssScoreAdjustment {
            /**
                * <p>The metric used to adjust the CVSS score.</p>
                */
            metric: string | undefined;
            /**
                * <p>The reason the CVSS score has been adjustment.</p>
                */
            reason: string | undefined;
    }
    export namespace CvssScoreAdjustment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CvssScoreAdjustment) => any;
    }
    /**
        * <p>Information about the CVSS score.</p>
        */
    export interface CvssScoreDetails {
            /**
                * <p>The source for the CVSS score.</p>
                */
            scoreSource: string | undefined;
            /**
                * <p>The source of the CVSS data.</p>
                */
            cvssSource?: string;
            /**
                * <p>The CVSS version used in scoring.</p>
                */
            version: string | undefined;
            /**
                * <p>The CVSS score.</p>
                */
            score: number | undefined;
            /**
                * <p>The vector for the CVSS score.</p>
                */
            scoringVector: string | undefined;
            /**
                * <p>An object that contains details about adjustment Amazon Inspector made to the CVSS score.</p>
                */
            adjustments?: CvssScoreAdjustment[];
    }
    export namespace CvssScoreDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CvssScoreDetails) => any;
    }
    export enum RelationshipStatus {
            ACCOUNT_SUSPENDED = "ACCOUNT_SUSPENDED",
            CANNOT_CREATE_DETECTOR_IN_ORG_MASTER = "CANNOT_CREATE_DETECTOR_IN_ORG_MASTER",
            CREATED = "CREATED",
            DELETED = "DELETED",
            DISABLED = "DISABLED",
            EMAIL_VERIFICATION_FAILED = "EMAIL_VERIFICATION_FAILED",
            EMAIL_VERIFICATION_IN_PROGRESS = "EMAIL_VERIFICATION_IN_PROGRESS",
            ENABLED = "ENABLED",
            INVITED = "INVITED",
            REGION_DISABLED = "REGION_DISABLED",
            REMOVED = "REMOVED",
            RESIGNED = "RESIGNED"
    }
    /**
        * <p>Details of the Amazon Inspector delegated administrator for your organization.</p>
        */
    export interface DelegatedAdmin {
            /**
                * <p>The Amazon Web Services account ID of the Amazon Inspector delegated administrator for your organization.</p>
                */
            accountId?: string;
            /**
                * <p>The status of the Amazon Inspector delegated administrator.</p>
                */
            relationshipStatus?: RelationshipStatus | string;
    }
    export namespace DelegatedAdmin {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DelegatedAdmin) => any;
    }
    export enum DelegatedAdminStatus {
            DISABLE_IN_PROGRESS = "DISABLE_IN_PROGRESS",
            ENABLED = "ENABLED"
    }
    /**
        * <p>Details of the Amazon Inspector delegated administrator for your organization.</p>
        */
    export interface DelegatedAdminAccount {
            /**
                * <p>The Amazon Web Services account ID of the Amazon Inspector delegated administrator for your organization.</p>
                */
            accountId?: string;
            /**
                * <p>The status of the Amazon Inspector delegated administrator.</p>
                */
            status?: DelegatedAdminStatus | string;
    }
    export namespace DelegatedAdminAccount {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DelegatedAdminAccount) => any;
    }
    export interface DeleteFilterRequest {
            /**
                * <p>The Amazon Resource Number (ARN) of the filter to be deleted.</p>
                */
            arn: string | undefined;
    }
    export namespace DeleteFilterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFilterRequest) => any;
    }
    export interface DeleteFilterResponse {
            /**
                * <p>The Amazon Resource Number (ARN) of the filter that has been deleted.</p>
                */
            arn: string | undefined;
    }
    export namespace DeleteFilterResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFilterResponse) => any;
    }
    export interface DescribeOrganizationConfigurationRequest {
    }
    export namespace DescribeOrganizationConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOrganizationConfigurationRequest) => any;
    }
    export interface DescribeOrganizationConfigurationResponse {
            /**
                * <p>The scan types are automatically enabled for new members of your organization.</p>
                */
            autoEnable?: AutoEnable;
            /**
                * <p>Represents whether your organization has reached the maximum Amazon Web Services account limit for Amazon Inspector.</p>
                */
            maxAccountLimitReached?: boolean;
    }
    export namespace DescribeOrganizationConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOrganizationConfigurationResponse) => any;
    }
    export enum ResourceScanType {
            EC2 = "EC2",
            ECR = "ECR"
    }
    export interface DisableRequest {
            /**
                * <p>An array of account IDs you want to disable Amazon Inspector scans for.</p>
                */
            accountIds?: string[];
            /**
                * <p>The resource scan types you want to disable.</p>
                */
            resourceTypes?: (ResourceScanType | string)[];
    }
    export namespace DisableRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableRequest) => any;
    }
    export interface DisableResponse {
            /**
                * <p>Information on the accounts that have had Amazon Inspector scans successfully disabled. Details are
                *          provided for each account.</p>
                */
            accounts: Account[] | undefined;
            /**
                * <p>Information on any accounts for which Amazon Inspector scans could not be disabled. Details are
                *          provided for each account.</p>
                */
            failedAccounts?: FailedAccount[];
    }
    export namespace DisableResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableResponse) => any;
    }
    export interface DisableDelegatedAdminAccountRequest {
            /**
                * <p>The Amazon Web Services account ID of the current Amazon Inspector delegated administrator.</p>
                */
            delegatedAdminAccountId: string | undefined;
    }
    export namespace DisableDelegatedAdminAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableDelegatedAdminAccountRequest) => any;
    }
    export interface DisableDelegatedAdminAccountResponse {
            /**
                * <p>The Amazon Web Services account ID of the successfully disabled delegated administrator.</p>
                */
            delegatedAdminAccountId: string | undefined;
    }
    export namespace DisableDelegatedAdminAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableDelegatedAdminAccountResponse) => any;
    }
    export interface DisassociateMemberRequest {
            /**
                * <p>The Amazon Web Services account ID of the member account to disassociate.</p>
                */
            accountId: string | undefined;
    }
    export namespace DisassociateMemberRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateMemberRequest) => any;
    }
    export interface DisassociateMemberResponse {
            /**
                * <p>The Amazon Web Services account ID of the successfully disassociated member.</p>
                */
            accountId: string | undefined;
    }
    export namespace DisassociateMemberResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateMemberResponse) => any;
    }
    export enum EcrRescanDuration {
            DAYS_180 = "DAYS_180",
            DAYS_30 = "DAYS_30",
            LIFETIME = "LIFETIME"
    }
    /**
        * <p>Details about the ECR automated re-scan duration setting for your environment</p>
        */
    export interface EcrConfiguration {
            /**
                * <p>The ECR automated re-scan duration defines how long an ECR image will be actively scanned by Amazon Inspector. When the number of days since an image was last pushed exceeds the automated re-scan duration the monitoring state of that image becomes <code>inactive</code> and all associated findings are scheduled for closure.</p>
                */
            rescanDuration: EcrRescanDuration | string | undefined;
    }
    export namespace EcrConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EcrConfiguration) => any;
    }
    export enum EcrRescanDurationStatus {
            FAILED = "FAILED",
            PENDING = "PENDING",
            SUCCESS = "SUCCESS"
    }
    /**
        * <p>Details about the state of any changes to the ECR automated re-scan duration setting.</p>
        */
    export interface EcrRescanDurationState {
            /**
                * <p>The ECR automated re-scan duration defines how long an ECR image will be actively scanned by Amazon Inspector. When the number of days since an image was last pushed exceeds the automated re-scan duration the monitoring state of that image becomes <code>inactive</code> and all associated findings are scheduled for closure.</p>
                */
            rescanDuration?: EcrRescanDuration | string;
            /**
                * <p>The status of changes to the ECR automated re-scan duration.</p>
                */
            status?: EcrRescanDurationStatus | string;
            /**
                * <p>A timestamp representing when the last time the ECR scan duration setting was changed.</p>
                */
            updatedAt?: Date;
    }
    export namespace EcrRescanDurationState {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EcrRescanDurationState) => any;
    }
    /**
        * <p>Details about the state of the ECR scans for your environment.</p>
        */
    export interface EcrConfigurationState {
            /**
                * <p>An object that contains details about the state of the ECR automated re-scan setting.</p>
                */
            rescanDurationState?: EcrRescanDurationState;
    }
    export namespace EcrConfigurationState {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EcrConfigurationState) => any;
    }
    export interface EnableRequest {
            /**
                * <p>A list of account IDs you want to enable Amazon Inspector scans for.</p>
                */
            accountIds?: string[];
            /**
                * <p>The resource scan types you want to enable.</p>
                */
            resourceTypes: (ResourceScanType | string)[] | undefined;
            /**
                * <p>The idempotency token for the request.</p>
                */
            clientToken?: string;
    }
    export namespace EnableRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableRequest) => any;
    }
    export interface EnableResponse {
            /**
                * <p>Information on the accounts that have had Amazon Inspector scans successfully enabled. Details are
                *          provided for each account.</p>
                */
            accounts: Account[] | undefined;
            /**
                * <p>Information on any accounts for which Amazon Inspector scans could not be enabled. Details are
                *          provided for each account.</p>
                */
            failedAccounts?: FailedAccount[];
    }
    export namespace EnableResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableResponse) => any;
    }
    export interface EnableDelegatedAdminAccountRequest {
            /**
                * <p>The Amazon Web Services account ID of the Amazon Inspector delegated administrator.</p>
                */
            delegatedAdminAccountId: string | undefined;
            /**
                * <p>The idempotency token for the request.</p>
                */
            clientToken?: string;
    }
    export namespace EnableDelegatedAdminAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableDelegatedAdminAccountRequest) => any;
    }
    export interface EnableDelegatedAdminAccountResponse {
            /**
                * <p>The Amazon Web Services account ID of the successfully Amazon Inspector delegated administrator.</p>
                */
            delegatedAdminAccountId: string | undefined;
    }
    export namespace EnableDelegatedAdminAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableDelegatedAdminAccountResponse) => any;
    }
    export enum ExternalReportStatus {
            CANCELLED = "CANCELLED",
            FAILED = "FAILED",
            IN_PROGRESS = "IN_PROGRESS",
            SUCCEEDED = "SUCCEEDED"
    }
    /**
        * <p>Details about a filter.</p>
        */
    export interface Filter {
            /**
                * <p>The Amazon Resource Number (ARN) associated with this filter.</p>
                */
            arn: string | undefined;
            /**
                * <p>The Amazon Web Services account ID of the account that created the filter.</p>
                */
            ownerId: string | undefined;
            /**
                * <p>The name of the filter.</p>
                */
            name: string | undefined;
            /**
                * <p>Details on the filter criteria associated with this filter.</p>
                */
            criteria: FilterCriteria | undefined;
            /**
                * <p>The action that is to be applied to the findings that match the filter.</p>
                */
            action: FilterAction | string | undefined;
            /**
                * <p>The date and time this filter was created at.</p>
                */
            createdAt: Date | undefined;
            /**
                * <p>The date and time the filter was last updated at.</p>
                */
            updatedAt: Date | undefined;
            /**
                * <p>A description of the filter.</p>
                */
            description?: string;
            /**
                * <p>The reason for the filter.</p>
                */
            reason?: string;
            /**
                * <p>The tags attached to the filter.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace Filter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Filter) => any;
    }
    /**
        * <p>Information about the Amazon Inspector score given to a finding.</p>
        */
    export interface InspectorScoreDetails {
            /**
                * <p>An object that contains details about the CVSS score given to a finding.</p>
                */
            adjustedCvss?: CvssScoreDetails;
    }
    export namespace InspectorScoreDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InspectorScoreDetails) => any;
    }
    /**
        * <p>Details about the step associated with a finding.</p>
        */
    export interface Step {
            /**
                * <p>The component ID.</p>
                */
            componentId: string | undefined;
            /**
                * <p>The component type.</p>
                */
            componentType: string | undefined;
    }
    export namespace Step {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Step) => any;
    }
    /**
        * <p>Information on the network path associated with a finding.</p>
        */
    export interface NetworkPath {
            /**
                * <p>The details on the steps in the network path.</p>
                */
            steps?: Step[];
    }
    export namespace NetworkPath {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkPath) => any;
    }
    /**
        * <p>Details about the port range associated with a finding.</p>
        */
    export interface PortRange {
            /**
                * <p>The beginning port in a port range.</p>
                */
            begin: number | undefined;
            /**
                * <p>The ending port in a port range.</p>
                */
            end: number | undefined;
    }
    export namespace PortRange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PortRange) => any;
    }
    export enum NetworkProtocol {
            TCP = "TCP",
            UDP = "UDP"
    }
    /**
        * <p>Contains the details of a network reachability finding.</p>
        */
    export interface NetworkReachabilityDetails {
            /**
                * <p>An object that contains details about the open port range associated with a finding.</p>
                */
            openPortRange: PortRange | undefined;
            /**
                * <p>The protocol associated with a finding.</p>
                */
            protocol: NetworkProtocol | string | undefined;
            /**
                * <p>An object that contains details about a network path associated with a finding.</p>
                */
            networkPath: NetworkPath | undefined;
    }
    export namespace NetworkReachabilityDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkReachabilityDetails) => any;
    }
    export enum PackageManager {
            BUNDLER = "BUNDLER",
            CARGO = "CARGO",
            COMPOSER = "COMPOSER",
            GOBINARY = "GOBINARY",
            GOMOD = "GOMOD",
            JAR = "JAR",
            NODEPKG = "NODEPKG",
            NPM = "NPM",
            NUGET = "NUGET",
            OS = "OS",
            PIP = "PIP",
            PIPENV = "PIPENV",
            POETRY = "POETRY",
            POM = "POM",
            PYTHONPKG = "PYTHONPKG",
            YARN = "YARN"
    }
    /**
        * <p>Information on the vulnerable package identified by a finding.</p>
        */
    export interface VulnerablePackage {
            /**
                * <p>The name of the vulnerable package.</p>
                */
            name: string | undefined;
            /**
                * <p>The version of the vulnerable package.</p>
                */
            version: string | undefined;
            /**
                * <p>The source layer hash of the vulnerable package.</p>
                */
            sourceLayerHash?: string;
            /**
                * <p>The epoch of the vulnerable package.</p>
                */
            epoch?: number;
            /**
                * <p>The release of the vulnerable package.</p>
                */
            release?: string;
            /**
                * <p>The architecture of the vulnerable package.</p>
                */
            arch?: string;
            /**
                * <p>The package manager of the vulnerable package.</p>
                */
            packageManager?: PackageManager | string;
            /**
                * <p>The file path of the vulnerable package.</p>
                */
            filePath?: string;
            /**
                * <p>The version of the package that contains the vulnerability fix.</p>
                */
            fixedInVersion?: string;
    }
    export namespace VulnerablePackage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VulnerablePackage) => any;
    }
    /**
        * <p>Information about a package vulnerability finding.</p>
        */
    export interface PackageVulnerabilityDetails {
            /**
                * <p>The ID given to this vulnerability.</p>
                */
            vulnerabilityId: string | undefined;
            /**
                * <p>The packages impacted by this vulnerability.</p>
                */
            vulnerablePackages: VulnerablePackage[] | undefined;
            /**
                * <p>The source of the vulnerability information.</p>
                */
            source: string | undefined;
            /**
                * <p>An object that contains details about the CVSS score of a finding.</p>
                */
            cvss?: CvssScore[];
            /**
                * <p>One or more vulnerabilities related to the one identified in this finding.</p>
                */
            relatedVulnerabilities?: string[];
            /**
                * <p>A URL to the source of the vulnerability information.</p>
                */
            sourceUrl?: string;
            /**
                * <p>The severity the vendor has given to this vulnerability type.</p>
                */
            vendorSeverity?: string;
            /**
                * <p>The date and time that this vulnerability was first added to the vendor's database.</p>
                */
            vendorCreatedAt?: Date;
            /**
                * <p>The date and time the vendor last updated this vulnerability in their database.</p>
                */
            vendorUpdatedAt?: Date;
            /**
                * <p>One or more URLs that contain details about this vulnerability type.</p>
                */
            referenceUrls?: string[];
    }
    export namespace PackageVulnerabilityDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageVulnerabilityDetails) => any;
    }
    /**
        * <p>Details about the recommended course of action to remediate the finding.</p>
        */
    export interface Recommendation {
            /**
                * <p>The recommended course of action to remediate the finding.</p>
                */
            text?: string;
            /**
                * <p>The URL address to the CVE remediation recommendations.</p>
                */
            Url?: string;
    }
    export namespace Recommendation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Recommendation) => any;
    }
    /**
        * <p>Information on how to remediate a finding.</p>
        */
    export interface Remediation {
            /**
                * <p>An object that contains information about the recommended course of action to remediate the finding.</p>
                */
            recommendation?: Recommendation;
    }
    export namespace Remediation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Remediation) => any;
    }
    /**
        * <p>Contains details about the resource involved in the finding.</p>
        */
    export interface ResourceDetails {
            /**
                * <p>An object that contains details about the Amazon EC2 instance involved in the finding.</p>
                */
            awsEc2Instance?: AwsEc2InstanceDetails;
            /**
                * <p>An object that contains details about the Amazon ECR container image involved in the finding.</p>
                */
            awsEcrContainerImage?: AwsEcrContainerImageDetails;
    }
    export namespace ResourceDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceDetails) => any;
    }
    export enum ResourceType {
            AWS_EC2_INSTANCE = "AWS_EC2_INSTANCE",
            AWS_ECR_CONTAINER_IMAGE = "AWS_ECR_CONTAINER_IMAGE",
            AWS_ECR_REPOSITORY = "AWS_ECR_REPOSITORY"
    }
    /**
        * <p>Details about the resource involved in a finding.</p>
        */
    export interface Resource {
            /**
                * <p>The type of resource.</p>
                */
            type: ResourceType | string | undefined;
            /**
                * <p>The ID of the resource.</p>
                */
            id: string | undefined;
            /**
                * <p>The partition of the resource.</p>
                */
            partition?: string;
            /**
                * <p>The Amazon Web Services Region the impacted resource is located in.</p>
                */
            region?: string;
            /**
                * <p>The tags attached to the resource.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>An object that contains details about the resource involved in a finding.</p>
                */
            details?: ResourceDetails;
    }
    export namespace Resource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Resource) => any;
    }
    export enum Severity {
            CRITICAL = "CRITICAL",
            HIGH = "HIGH",
            INFORMATIONAL = "INFORMATIONAL",
            LOW = "LOW",
            MEDIUM = "MEDIUM",
            UNTRIAGED = "UNTRIAGED"
    }
    export enum FindingStatus {
            ACTIVE = "ACTIVE",
            CLOSED = "CLOSED",
            SUPPRESSED = "SUPPRESSED"
    }
    export enum FindingType {
            NETWORK_REACHABILITY = "NETWORK_REACHABILITY",
            PACKAGE_VULNERABILITY = "PACKAGE_VULNERABILITY"
    }
    /**
        * <p>Details about an Amazon Inspector finding.</p>
        */
    export interface Finding {
            /**
                * <p>The Amazon Resource Number (ARN) of the finding.</p>
                */
            findingArn: string | undefined;
            /**
                * <p>The Amazon Web Services account ID associated with the finding.</p>
                */
            awsAccountId: string | undefined;
            /**
                * <p>The type of the finding.</p>
                */
            type: FindingType | string | undefined;
            /**
                * <p>The description of the finding.</p>
                */
            description: string | undefined;
            /**
                * <p>The title of the finding.</p>
                */
            title?: string;
            /**
                * <p>An object that contains the details about how to remediate a finding.</p>
                */
            remediation: Remediation | undefined;
            /**
                * <p>The severity of the finding.</p>
                */
            severity: Severity | string | undefined;
            /**
                * <p>The date and time that the finding was first observed.</p>
                */
            firstObservedAt: Date | undefined;
            /**
                * <p>The date and time that the finding was last observed.</p>
                */
            lastObservedAt: Date | undefined;
            /**
                * <p>The date and time the finding was last updated at.</p>
                */
            updatedAt?: Date;
            /**
                * <p>The status of the finding.</p>
                */
            status: FindingStatus | string | undefined;
            /**
                * <p>Contains information on the resources involved in a finding.</p>
                */
            resources: Resource[] | undefined;
            /**
                * <p>The Amazon Inspector score given to the finding.</p>
                */
            inspectorScore?: number;
            /**
                * <p>An object that contains details of the Amazon Inspector score.</p>
                */
            inspectorScoreDetails?: InspectorScoreDetails;
            /**
                * <p>An object that contains the details of a network reachability finding.</p>
                */
            networkReachabilityDetails?: NetworkReachabilityDetails;
            /**
                * <p>An object that contains the details of a package vulnerability finding.</p>
                */
            packageVulnerabilityDetails?: PackageVulnerabilityDetails;
    }
    export namespace Finding {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Finding) => any;
    }
    export interface GetConfigurationRequest {
    }
    export namespace GetConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConfigurationRequest) => any;
    }
    export interface GetConfigurationResponse {
            /**
                * <p>Specifies how the ECR automated re-scan duration is currently configured for your environment.</p>
                */
            ecrConfiguration?: EcrConfigurationState;
    }
    export namespace GetConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConfigurationResponse) => any;
    }
    export interface GetDelegatedAdminAccountRequest {
    }
    export namespace GetDelegatedAdminAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDelegatedAdminAccountRequest) => any;
    }
    export interface GetDelegatedAdminAccountResponse {
            /**
                * <p>The Amazon Web Services account ID of the Amazon Inspector delegated administrator.</p>
                */
            delegatedAdmin?: DelegatedAdmin;
    }
    export namespace GetDelegatedAdminAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDelegatedAdminAccountResponse) => any;
    }
    export interface GetFindingsReportStatusRequest {
            /**
                * <p>The ID of the report to retrieve the status of.</p>
                */
            reportId?: string;
    }
    export namespace GetFindingsReportStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFindingsReportStatusRequest) => any;
    }
    export enum ReportingErrorCode {
            BUCKET_NOT_FOUND = "BUCKET_NOT_FOUND",
            INCOMPATIBLE_BUCKET_REGION = "INCOMPATIBLE_BUCKET_REGION",
            INTERNAL_ERROR = "INTERNAL_ERROR",
            INVALID_PERMISSIONS = "INVALID_PERMISSIONS",
            MALFORMED_KMS_KEY = "MALFORMED_KMS_KEY",
            NO_FINDINGS_FOUND = "NO_FINDINGS_FOUND"
    }
    export interface GetFindingsReportStatusResponse {
            /**
                * <p>The ID of the report.</p>
                */
            reportId?: string;
            /**
                * <p>The status of the report.</p>
                */
            status?: ExternalReportStatus | string;
            /**
                * <p>The error code of the report.</p>
                */
            errorCode?: ReportingErrorCode | string;
            /**
                * <p>The error message of the report.</p>
                */
            errorMessage?: string;
            /**
                * <p>The destination of the report.</p>
                */
            destination?: Destination;
            /**
                * <p>The filter criteria associated with the report.</p>
                */
            filterCriteria?: FilterCriteria;
    }
    export namespace GetFindingsReportStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFindingsReportStatusResponse) => any;
    }
    export interface GetMemberRequest {
            /**
                * <p>The Amazon Web Services account ID of the member account to retrieve information on.</p>
                */
            accountId: string | undefined;
    }
    export namespace GetMemberRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMemberRequest) => any;
    }
    /**
        * <p>Details on a member account in your organization.</p>
        */
    export interface Member {
            /**
                * <p>The Amazon Web Services account ID of the member account.</p>
                */
            accountId?: string;
            /**
                * <p>The status of the member account.</p>
                */
            relationshipStatus?: RelationshipStatus | string;
            /**
                * <p>The Amazon Web Services account ID of the Amazon Inspector delegated administrator for this member account.</p>
                */
            delegatedAdminAccountId?: string;
            /**
                * <p>A timestamp showing when the status of this member was last updated.</p>
                */
            updatedAt?: Date;
    }
    export namespace Member {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Member) => any;
    }
    export interface GetMemberResponse {
            /**
                * <p>Details of the retrieved member account.</p>
                */
            member?: Member;
    }
    export namespace GetMemberResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMemberResponse) => any;
    }
    export enum Service {
            EC2 = "EC2",
            ECR = "ECR"
    }
    export interface ListAccountPermissionsRequest {
            /**
                * <p>The service scan type to check permissions for.</p>
                */
            service?: Service | string;
            /**
                * <p>The maximum number of results to return in the response.</p>
                */
            maxResults?: number;
            /**
                * <p>A token to use for paginating results that are returned in the response. Set the value
                *          of this parameter to null for the first request to a list action. For subsequent calls, use
                *          the <code>NextToken</code> value returned from the previous request to continue listing
                *          results after the first page.</p>
                */
            nextToken?: string;
    }
    export namespace ListAccountPermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAccountPermissionsRequest) => any;
    }
    export enum Operation {
            DISABLE_REPOSITORY = "DISABLE_REPOSITORY",
            DISABLE_SCANNING = "DISABLE_SCANNING",
            ENABLE_REPOSITORY = "ENABLE_REPOSITORY",
            ENABLE_SCANNING = "ENABLE_SCANNING"
    }
    /**
        * <p>Contains information on the permissions an account has within Amazon Inspector.</p>
        */
    export interface Permission {
            /**
                * <p>The services that the permissions allow an account to perform the given operations for.</p>
                */
            service: Service | string | undefined;
            /**
                * <p>The operations that can be performed with the given permissions.</p>
                */
            operation: Operation | string | undefined;
    }
    export namespace Permission {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Permission) => any;
    }
    export interface ListAccountPermissionsResponse {
            /**
                * <p>Contains details on the permissions an account has to configure Amazon Inspector.</p>
                */
            permissions: Permission[] | undefined;
            /**
                * <p>A token to use for paginating results that are returned in the response. Set the value
                *          of this parameter to null for the first request to a list action. For subsequent calls, use
                *          the <code>NextToken</code> value returned from the previous request to continue listing
                *          results after the first page.</p>
                */
            nextToken?: string;
    }
    export namespace ListAccountPermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAccountPermissionsResponse) => any;
    }
    export interface ListCoverageRequest {
            /**
                * <p>The maximum number of results to return in the response.</p>
                */
            maxResults?: number;
            /**
                * <p>A token to use for paginating results that are returned in the response. Set the value
                *          of this parameter to null for the first request to a list action. For subsequent calls, use
                *          the <code>NextToken</code> value returned from the previous request to continue listing
                *          results after the first page.</p>
                */
            nextToken?: string;
            /**
                * <p>An object that contains details on the filters to apply to the coverage data for your
                *          environment.</p>
                */
            filterCriteria?: CoverageFilterCriteria;
    }
    export namespace ListCoverageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCoverageRequest) => any;
    }
    export interface ListCoverageResponse {
            /**
                * <p>A token to use for paginating results that are returned in the response. Set the value
                *          of this parameter to null for the first request to a list action. For subsequent calls, use
                *          the <code>NextToken</code> value returned from the previous request to continue listing
                *          results after the first page.</p>
                */
            nextToken?: string;
            /**
                * <p>An object that contains details on the covered resources in your environment.</p>
                */
            coveredResources?: CoveredResource[];
    }
    export namespace ListCoverageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCoverageResponse) => any;
    }
    export interface ListCoverageStatisticsRequest {
            /**
                * <p>An object that contains details on the filters to apply to the coverage data for your
                *          environment.</p>
                */
            filterCriteria?: CoverageFilterCriteria;
            /**
                * <p>The value to group the results by.</p>
                */
            groupBy?: GroupKey | string;
            /**
                * <p>A token to use for paginating results that are returned in the response. Set the value
                *          of this parameter to null for the first request to a list action. For subsequent calls, use
                *          the <code>NextToken</code> value returned from the previous request to continue listing
                *          results after the first page.</p>
                */
            nextToken?: string;
    }
    export namespace ListCoverageStatisticsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCoverageStatisticsRequest) => any;
    }
    export interface ListCoverageStatisticsResponse {
            /**
                * <p>An array with the number for each group.</p>
                */
            countsByGroup?: Counts[];
            /**
                * <p>The total number for all groups.</p>
                */
            totalCounts: number | undefined;
            /**
                * <p>A token to use for paginating results that are returned in the response. Set the value
                *          of this parameter to null for the first request to a list action. For subsequent calls, use
                *          the <code>NextToken</code> value returned from the previous request to continue listing
                *          results after the first page.</p>
                */
            nextToken?: string;
    }
    export namespace ListCoverageStatisticsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCoverageStatisticsResponse) => any;
    }
    export interface ListDelegatedAdminAccountsRequest {
            /**
                * <p>The maximum number of results to return in the response.</p>
                */
            maxResults?: number;
            /**
                * <p>A token to use for paginating results that are returned in the response. Set the value
                *          of this parameter to null for the first request to a list action. For subsequent calls, use
                *          the <code>NextToken</code> value returned from the previous request to continue listing
                *          results after the first page.</p>
                */
            nextToken?: string;
    }
    export namespace ListDelegatedAdminAccountsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDelegatedAdminAccountsRequest) => any;
    }
    export interface ListDelegatedAdminAccountsResponse {
            /**
                * <p>Details of the Amazon Inspector delegated administrator of your organization.</p>
                */
            delegatedAdminAccounts?: DelegatedAdminAccount[];
            /**
                * <p>A token to use for paginating results that are returned in the response. Set the value
                *          of this parameter to null for the first request to a list action. For subsequent calls, use
                *          the <code>NextToken</code> value returned from the previous request to continue listing
                *          results after the first page.</p>
                */
            nextToken?: string;
    }
    export namespace ListDelegatedAdminAccountsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDelegatedAdminAccountsResponse) => any;
    }
    export interface ListFiltersRequest {
            /**
                * <p>The Amazon resource number (ARN) of the filter.</p>
                */
            arns?: string[];
            /**
                * <p>The action the filter applies to matched findings.</p>
                */
            action?: FilterAction | string;
            /**
                * <p>A token to use for paginating results that are returned in the response. Set the value
                *          of this parameter to null for the first request to a list action. For subsequent calls, use
                *          the <code>NextToken</code> value returned from the previous request to continue listing
                *          results after the first page.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return in the response.</p>
                */
            maxResults?: number;
    }
    export namespace ListFiltersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFiltersRequest) => any;
    }
    export interface ListFiltersResponse {
            /**
                * <p>Contains details on the filters associated with your account.</p>
                */
            filters: Filter[] | undefined;
            /**
                * <p>A token to use for paginating results that are returned in the response. Set the value
                *          of this parameter to null for the first request to a list action. For subsequent calls, use
                *          the <code>NextToken</code> value returned from the previous request to continue listing
                *          results after the first page.</p>
                */
            nextToken?: string;
    }
    export namespace ListFiltersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFiltersResponse) => any;
    }
    export interface ListFindingAggregationsRequest {
            /**
                * <p>The type of the aggregation request.</p>
                */
            aggregationType: AggregationType | string | undefined;
            /**
                * <p>A token to use for paginating results that are returned in the response. Set the value
                *          of this parameter to null for the first request to a list action. For subsequent calls, use
                *          the <code>NextToken</code> value returned from the previous request to continue listing
                *          results after the first page.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return in the response.</p>
                */
            maxResults?: number;
            /**
                * <p>The Amazon Web Services account IDs to retrieve finding aggregation data for.</p>
                */
            accountIds?: StringFilter[];
            /**
                * <p>Details of the aggregation request that is used to filter your aggregation results.</p>
                */
            aggregationRequest?: AggregationRequest;
    }
    export namespace ListFindingAggregationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFindingAggregationsRequest) => any;
    }
    export interface ListFindingAggregationsResponse {
            /**
                * <p>The type of aggregation to perform.</p>
                */
            aggregationType: AggregationType | string | undefined;
            /**
                * <p>Objects that contain the results of an aggregation operation.</p>
                */
            responses?: AggregationResponse[];
            /**
                * <p>A token to use for paginating results that are returned in the response. Set the value
                *          of this parameter to null for the first request to a list action. For subsequent calls, use
                *          the <code>NextToken</code> value returned from the previous request to continue listing
                *          results after the first page.</p>
                */
            nextToken?: string;
    }
    export namespace ListFindingAggregationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFindingAggregationsResponse) => any;
    }
    export enum SortField {
            AWS_ACCOUNT_ID = "AWS_ACCOUNT_ID",
            COMPONENT_TYPE = "COMPONENT_TYPE",
            ECR_IMAGE_PUSHED_AT = "ECR_IMAGE_PUSHED_AT",
            ECR_IMAGE_REGISTRY = "ECR_IMAGE_REGISTRY",
            ECR_IMAGE_REPOSITORY_NAME = "ECR_IMAGE_REPOSITORY_NAME",
            FINDING_STATUS = "FINDING_STATUS",
            FINDING_TYPE = "FINDING_TYPE",
            FIRST_OBSERVED_AT = "FIRST_OBSERVED_AT",
            INSPECTOR_SCORE = "INSPECTOR_SCORE",
            LAST_OBSERVED_AT = "LAST_OBSERVED_AT",
            NETWORK_PROTOCOL = "NETWORK_PROTOCOL",
            RESOURCE_TYPE = "RESOURCE_TYPE",
            SEVERITY = "SEVERITY",
            VENDOR_SEVERITY = "VENDOR_SEVERITY",
            VULNERABILITY_ID = "VULNERABILITY_ID",
            VULNERABILITY_SOURCE = "VULNERABILITY_SOURCE"
    }
    /**
        * <p>Details about the criteria used to sort finding results.</p>
        */
    export interface SortCriteria {
            /**
                * <p>The finding detail field by which results are sorted.</p>
                */
            field: SortField | string | undefined;
            /**
                * <p>The order by which findings are sorted.</p>
                */
            sortOrder: SortOrder | string | undefined;
    }
    export namespace SortCriteria {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SortCriteria) => any;
    }
    export interface ListFindingsRequest {
            /**
                * <p>The maximum number of results to return in the response.</p>
                */
            maxResults?: number;
            /**
                * <p>A token to use for paginating results that are returned in the response. Set the value
                *          of this parameter to null for the first request to a list action. For subsequent calls, use
                *          the <code>NextToken</code> value returned from the previous request to continue listing
                *          results after the first page.</p>
                */
            nextToken?: string;
            /**
                * <p>Details on the filters to apply to your finding results.</p>
                */
            filterCriteria?: FilterCriteria;
            /**
                * <p>Details on the sort criteria to apply to your finding results.</p>
                */
            sortCriteria?: SortCriteria;
    }
    export namespace ListFindingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFindingsRequest) => any;
    }
    export interface ListFindingsResponse {
            /**
                * <p>A token to use for paginating results that are returned in the response. Set the value
                *          of this parameter to null for the first request to a list action. For subsequent calls, use
                *          the <code>NextToken</code> value returned from the previous request to continue listing
                *          results after the first page.</p>
                */
            nextToken?: string;
            /**
                * <p>Contains details on the findings in your environment.</p>
                */
            findings?: Finding[];
    }
    export namespace ListFindingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFindingsResponse) => any;
    }
    export interface ListMembersRequest {
            /**
                * <p>Specifies whether to list only currently associated members if <code>True</code> or to
                *          list all members within the organization if <code>False</code>.</p>
                */
            onlyAssociated?: boolean;
            /**
                * <p>The maximum number of results to return in the response.</p>
                */
            maxResults?: number;
            /**
                * <p>A token to use for paginating results that are returned in the response. Set the value
                *          of this parameter to null for the first request to a list action. For subsequent calls, use
                *          the <code>NextToken</code> value returned from the previous request to continue listing
                *          results after the first page.</p>
                */
            nextToken?: string;
    }
    export namespace ListMembersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMembersRequest) => any;
    }
    export interface ListMembersResponse {
            /**
                * <p>An object that contains details for each member account.</p>
                */
            members?: Member[];
            /**
                * <p>The pagination parameter to be used on the next list operation to retrieve more
                *          items.</p>
                */
            nextToken?: string;
    }
    export namespace ListMembersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMembersResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon resource number (ARN) of the resource to list tags of.</p>
                */
            resourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The tags associated with the resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface ListUsageTotalsRequest {
            /**
                * <p>The maximum number of results to return in the response.</p>
                */
            maxResults?: number;
            /**
                * <p>A token to use for paginating results that are returned in the response. Set the value
                *          of this parameter to null for the first request to a list action. For subsequent calls, use
                *          the <code>NextToken</code> value returned from the previous request to continue listing
                *          results after the first page.</p>
                */
            nextToken?: string;
            /**
                * <p>The Amazon Web Services account IDs to retrieve usage totals for.</p>
                */
            accountIds?: string[];
    }
    export namespace ListUsageTotalsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUsageTotalsRequest) => any;
    }
    export enum UsageType {
            EC2_INSTANCE_HOURS = "EC2_INSTANCE_HOURS",
            ECR_INITIAL_SCAN = "ECR_INITIAL_SCAN",
            ECR_RESCAN = "ECR_RESCAN"
    }
    /**
        * <p>Contains usage information about the cost of Amazon Inspector operation.</p>
        */
    export interface Usage {
            /**
                * <p>The type scan.</p>
                */
            type?: UsageType | string;
            /**
                * <p>The total of usage.</p>
                */
            total?: number;
            /**
                * <p>The estimated monthly cost of Amazon Inspector.</p>
                */
            estimatedMonthlyCost?: number;
            /**
                * <p>The currency type used when calculating usage data.</p>
                */
            currency?: Currency | string;
    }
    export namespace Usage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Usage) => any;
    }
    /**
        * <p>The total of usage for an account ID.</p>
        */
    export interface UsageTotal {
            /**
                * <p>The account ID of the account that usage data was retrieved for.</p>
                */
            accountId?: string;
            /**
                * <p>An object representing the total usage for an account.</p>
                */
            usage?: Usage[];
    }
    export namespace UsageTotal {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UsageTotal) => any;
    }
    export interface ListUsageTotalsResponse {
            /**
                * <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
                */
            nextToken?: string;
            /**
                * <p>An object with details on the total usage for the requested account.</p>
                */
            totals?: UsageTotal[];
    }
    export namespace ListUsageTotalsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUsageTotalsResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource to apply a tag to.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The tags to be added to a resource.</p>
                */
            tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) for the resource to remove tags from.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The tag keys to remove from the resource.</p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateConfigurationRequest {
            /**
                * <p>Specifies how the ECR automated re-scan will be updated for your environment.</p>
                */
            ecrConfiguration: EcrConfiguration | undefined;
    }
    export namespace UpdateConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConfigurationRequest) => any;
    }
    export interface UpdateConfigurationResponse {
    }
    export namespace UpdateConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConfigurationResponse) => any;
    }
    export interface UpdateFilterRequest {
            /**
                * <p>Specifies the action that is to be applied to the findings that match the filter.</p>
                */
            action?: FilterAction | string;
            /**
                * <p>A description of the filter.</p>
                */
            description?: string;
            /**
                * <p>Defines the criteria to be update in the filter.</p>
                */
            filterCriteria?: FilterCriteria;
            /**
                * <p>The name of the filter.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Number (ARN) of the filter to update.</p>
                */
            filterArn: string | undefined;
            /**
                * <p>The reason the filter was updated.</p>
                */
            reason?: string;
    }
    export namespace UpdateFilterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFilterRequest) => any;
    }
    export interface UpdateFilterResponse {
            /**
                * <p>The Amazon Resource Number (ARN) of the successfully updated filter.</p>
                */
            arn: string | undefined;
    }
    export namespace UpdateFilterResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFilterResponse) => any;
    }
    export interface UpdateOrganizationConfigurationRequest {
            /**
                * <p>Defines which scan types are enabled automatically for new members of your Amazon Inspector organization.</p>
                */
            autoEnable: AutoEnable | undefined;
    }
    export namespace UpdateOrganizationConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateOrganizationConfigurationRequest) => any;
    }
    export interface UpdateOrganizationConfigurationResponse {
            /**
                * <p>The updated status of scan types automatically enabled for new members of your Amazon Inspector organization.</p>
                */
            autoEnable: AutoEnable | undefined;
    }
    export namespace UpdateOrganizationConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateOrganizationConfigurationResponse) => any;
    }
}

declare module '@aws-sdk/client-inspector2/node_modules/@aws-sdk/client-inspector2/dist-types/models/Inspector2ServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Inspector2 service.
        */
    export class Inspector2ServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

