// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-sns' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AddPermissionCommandInput, AddPermissionCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/AddPermissionCommand";
    import { CheckIfPhoneNumberIsOptedOutCommandInput, CheckIfPhoneNumberIsOptedOutCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/CheckIfPhoneNumberIsOptedOutCommand";
    import { ConfirmSubscriptionCommandInput, ConfirmSubscriptionCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ConfirmSubscriptionCommand";
    import { CreatePlatformApplicationCommandInput, CreatePlatformApplicationCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/CreatePlatformApplicationCommand";
    import { CreatePlatformEndpointCommandInput, CreatePlatformEndpointCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/CreatePlatformEndpointCommand";
    import { CreateSMSSandboxPhoneNumberCommandInput, CreateSMSSandboxPhoneNumberCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/CreateSMSSandboxPhoneNumberCommand";
    import { CreateTopicCommandInput, CreateTopicCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/CreateTopicCommand";
    import { DeleteEndpointCommandInput, DeleteEndpointCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/DeleteEndpointCommand";
    import { DeletePlatformApplicationCommandInput, DeletePlatformApplicationCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/DeletePlatformApplicationCommand";
    import { DeleteSMSSandboxPhoneNumberCommandInput, DeleteSMSSandboxPhoneNumberCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/DeleteSMSSandboxPhoneNumberCommand";
    import { DeleteTopicCommandInput, DeleteTopicCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/DeleteTopicCommand";
    import { GetEndpointAttributesCommandInput, GetEndpointAttributesCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/GetEndpointAttributesCommand";
    import { GetPlatformApplicationAttributesCommandInput, GetPlatformApplicationAttributesCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/GetPlatformApplicationAttributesCommand";
    import { GetSMSAttributesCommandInput, GetSMSAttributesCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/GetSMSAttributesCommand";
    import { GetSMSSandboxAccountStatusCommandInput, GetSMSSandboxAccountStatusCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/GetSMSSandboxAccountStatusCommand";
    import { GetSubscriptionAttributesCommandInput, GetSubscriptionAttributesCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/GetSubscriptionAttributesCommand";
    import { GetTopicAttributesCommandInput, GetTopicAttributesCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/GetTopicAttributesCommand";
    import { ListEndpointsByPlatformApplicationCommandInput, ListEndpointsByPlatformApplicationCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListEndpointsByPlatformApplicationCommand";
    import { ListOriginationNumbersCommandInput, ListOriginationNumbersCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListOriginationNumbersCommand";
    import { ListPhoneNumbersOptedOutCommandInput, ListPhoneNumbersOptedOutCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListPhoneNumbersOptedOutCommand";
    import { ListPlatformApplicationsCommandInput, ListPlatformApplicationsCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListPlatformApplicationsCommand";
    import { ListSMSSandboxPhoneNumbersCommandInput, ListSMSSandboxPhoneNumbersCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListSMSSandboxPhoneNumbersCommand";
    import { ListSubscriptionsByTopicCommandInput, ListSubscriptionsByTopicCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListSubscriptionsByTopicCommand";
    import { ListSubscriptionsCommandInput, ListSubscriptionsCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListSubscriptionsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListTagsForResourceCommand";
    import { ListTopicsCommandInput, ListTopicsCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListTopicsCommand";
    import { OptInPhoneNumberCommandInput, OptInPhoneNumberCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/OptInPhoneNumberCommand";
    import { PublishBatchCommandInput, PublishBatchCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/PublishBatchCommand";
    import { PublishCommandInput, PublishCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/PublishCommand";
    import { RemovePermissionCommandInput, RemovePermissionCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/RemovePermissionCommand";
    import { SetEndpointAttributesCommandInput, SetEndpointAttributesCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/SetEndpointAttributesCommand";
    import { SetPlatformApplicationAttributesCommandInput, SetPlatformApplicationAttributesCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/SetPlatformApplicationAttributesCommand";
    import { SetSMSAttributesCommandInput, SetSMSAttributesCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/SetSMSAttributesCommand";
    import { SetSubscriptionAttributesCommandInput, SetSubscriptionAttributesCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/SetSubscriptionAttributesCommand";
    import { SetTopicAttributesCommandInput, SetTopicAttributesCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/SetTopicAttributesCommand";
    import { SubscribeCommandInput, SubscribeCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/SubscribeCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/TagResourceCommand";
    import { UnsubscribeCommandInput, UnsubscribeCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/UnsubscribeCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/UntagResourceCommand";
    import { VerifySMSSandboxPhoneNumberCommandInput, VerifySMSSandboxPhoneNumberCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/VerifySMSSandboxPhoneNumberCommand";
    import { SNSClient } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    /**
        * <fullname>Amazon Simple Notification Service</fullname>
        *         <p>Amazon Simple Notification Service (Amazon SNS) is a web service that enables you to build
        *             distributed web-enabled applications. Applications can use Amazon SNS to easily push
        *             real-time notification messages to interested subscribers over multiple delivery
        *             protocols. For more information about this product see the <a href="http://aws.amazon.com/sns/">Amazon SNS product page</a>. For detailed information about Amazon SNS features
        *             and their associated API calls, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/">Amazon SNS Developer Guide</a>. </p>
        *         <p>For information on the permissions you need to use this API, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-authentication-and-access-control.html">Identity and access management in Amazon SNS</a> in the <i>Amazon SNS Developer
        *                 Guide.</i>
        *          </p>
        *         <p>We also provide SDKs that enable you to access Amazon SNS from your preferred programming
        *             language. The SDKs contain functionality that automatically takes care of tasks such as:
        *             cryptographically signing your service requests, retrying requests, and handling error
        *             responses. For a list of available SDKs, go to <a href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a>. </p>
        */
    export class SNS extends SNSClient {
            /**
                * <p>Adds a statement to a topic's access control policy, granting access for the specified
                *             Amazon Web Services accounts to the specified actions.</p>
                */
            addPermission(args: AddPermissionCommandInput, options?: __HttpHandlerOptions): Promise<AddPermissionCommandOutput>;
            addPermission(args: AddPermissionCommandInput, cb: (err: any, data?: AddPermissionCommandOutput) => void): void;
            addPermission(args: AddPermissionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddPermissionCommandOutput) => void): void;
            /**
                * <p>Accepts a phone number and indicates whether the phone holder has opted out of
                *             receiving SMS messages from your Amazon Web Services account. You cannot send SMS messages to a number that
                *             is opted out.</p>
                *         <p>To resume sending messages, you can opt in the number by using the
                *                 <code>OptInPhoneNumber</code> action.</p>
                */
            checkIfPhoneNumberIsOptedOut(args: CheckIfPhoneNumberIsOptedOutCommandInput, options?: __HttpHandlerOptions): Promise<CheckIfPhoneNumberIsOptedOutCommandOutput>;
            checkIfPhoneNumberIsOptedOut(args: CheckIfPhoneNumberIsOptedOutCommandInput, cb: (err: any, data?: CheckIfPhoneNumberIsOptedOutCommandOutput) => void): void;
            checkIfPhoneNumberIsOptedOut(args: CheckIfPhoneNumberIsOptedOutCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CheckIfPhoneNumberIsOptedOutCommandOutput) => void): void;
            /**
                * <p>Verifies an endpoint owner's intent to receive messages by validating the token sent
                *             to the endpoint by an earlier <code>Subscribe</code> action. If the token is valid, the
                *             action creates a new subscription and returns its Amazon Resource Name (ARN). This call
                *             requires an AWS signature only when the <code>AuthenticateOnUnsubscribe</code> flag is
                *             set to "true".</p>
                */
            confirmSubscription(args: ConfirmSubscriptionCommandInput, options?: __HttpHandlerOptions): Promise<ConfirmSubscriptionCommandOutput>;
            confirmSubscription(args: ConfirmSubscriptionCommandInput, cb: (err: any, data?: ConfirmSubscriptionCommandOutput) => void): void;
            confirmSubscription(args: ConfirmSubscriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ConfirmSubscriptionCommandOutput) => void): void;
            /**
                * <p>Creates a platform application object for one of the supported push notification
                *             services, such as APNS and GCM (Firebase Cloud Messaging), to which devices and mobile
                *             apps may register. You must specify <code>PlatformPrincipal</code> and
                *                 <code>PlatformCredential</code> attributes when using the
                *                 <code>CreatePlatformApplication</code> action.</p>
                *         <p>
                *             <code>PlatformPrincipal</code> and <code>PlatformCredential</code> are received from
                *             the notification service.</p>
                *         <ul>
                *             <li>
                *                 <p>For <code>ADM</code>, <code>PlatformPrincipal</code> is <code>client id</code>
                *                     and <code>PlatformCredential</code> is <code>client secret</code>.</p>
                *             </li>
                *             <li>
                *                 <p>For <code>Baidu</code>, <code>PlatformPrincipal</code> is <code>API key</code>
                *                     and <code>PlatformCredential</code> is <code>secret key</code>.</p>
                *             </li>
                *             <li>
                *                 <p>For <code>APNS</code> and <code>APNS_SANDBOX</code> using certificate credentials,
                *                         <code>PlatformPrincipal</code> is <code>SSL certificate</code> and
                *                         <code>PlatformCredential</code> is <code>private key</code>.</p>
                *             </li>
                *             <li>
                *                 <p>For <code>APNS</code> and <code>APNS_SANDBOX</code> using token credentials,
                *                     <code>PlatformPrincipal</code> is <code>signing key ID</code> and
                *                     <code>PlatformCredential</code> is <code>signing key</code>.</p>
                *             </li>
                *             <li>
                *                 <p>For <code>GCM</code> (Firebase Cloud Messaging), there is no
                *                         <code>PlatformPrincipal</code> and the <code>PlatformCredential</code> is
                *                         <code>API key</code>.</p>
                *             </li>
                *             <li>
                *                 <p>For <code>MPNS</code>, <code>PlatformPrincipal</code> is <code>TLS
                *                         certificate</code> and <code>PlatformCredential</code> is <code>private
                *                         key</code>.</p>
                *             </li>
                *             <li>
                *                 <p>For <code>WNS</code>, <code>PlatformPrincipal</code> is <code>Package Security
                *                         Identifier</code> and <code>PlatformCredential</code> is <code>secret
                *                         key</code>.</p>
                *             </li>
                *          </ul>
                *         <p>You can use the returned <code>PlatformApplicationArn</code> as an attribute for the
                *                 <code>CreatePlatformEndpoint</code> action.</p>
                */
            createPlatformApplication(args: CreatePlatformApplicationCommandInput, options?: __HttpHandlerOptions): Promise<CreatePlatformApplicationCommandOutput>;
            createPlatformApplication(args: CreatePlatformApplicationCommandInput, cb: (err: any, data?: CreatePlatformApplicationCommandOutput) => void): void;
            createPlatformApplication(args: CreatePlatformApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePlatformApplicationCommandOutput) => void): void;
            /**
                * <p>Creates an endpoint for a device and mobile app on one of the supported push
                *             notification services, such as GCM (Firebase Cloud Messaging) and APNS.
                *                 <code>CreatePlatformEndpoint</code> requires the <code>PlatformApplicationArn</code>
                *             that is returned from <code>CreatePlatformApplication</code>. You can use the returned
                *                 <code>EndpointArn</code> to send a message to a mobile app or by the
                *                 <code>Subscribe</code> action for subscription to a topic. The
                *                 <code>CreatePlatformEndpoint</code> action is idempotent, so if the requester
                *             already owns an endpoint with the same device token and attributes, that endpoint's ARN
                *             is returned without creating a new endpoint. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push
                *                 Notifications</a>. </p>
                *         <p>When using <code>CreatePlatformEndpoint</code> with Baidu, two attributes must be
                *             provided: ChannelId and UserId. The token field must also contain the ChannelId. For
                *             more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePushBaiduEndpoint.html">Creating an Amazon SNS Endpoint
                *                 for Baidu</a>. </p>
                */
            createPlatformEndpoint(args: CreatePlatformEndpointCommandInput, options?: __HttpHandlerOptions): Promise<CreatePlatformEndpointCommandOutput>;
            createPlatformEndpoint(args: CreatePlatformEndpointCommandInput, cb: (err: any, data?: CreatePlatformEndpointCommandOutput) => void): void;
            createPlatformEndpoint(args: CreatePlatformEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePlatformEndpointCommandOutput) => void): void;
            /**
                * <p>Adds a destination phone number to an Amazon Web Services account in the SMS sandbox and sends a
                *             one-time password (OTP) to that phone number.</p>
                *         <p>When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the
                *                 <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for
                *                 you to try Amazon SNS features without risking your reputation as an SMS sender. While your
                *                 Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send
                *                 SMS messages only to verified destination phone numbers. For more information, including how to
                *                 move out of the sandbox to send messages without restrictions,
                *                 see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in
                *                 the <i>Amazon SNS Developer Guide</i>.</p>
                */
            createSMSSandboxPhoneNumber(args: CreateSMSSandboxPhoneNumberCommandInput, options?: __HttpHandlerOptions): Promise<CreateSMSSandboxPhoneNumberCommandOutput>;
            createSMSSandboxPhoneNumber(args: CreateSMSSandboxPhoneNumberCommandInput, cb: (err: any, data?: CreateSMSSandboxPhoneNumberCommandOutput) => void): void;
            createSMSSandboxPhoneNumber(args: CreateSMSSandboxPhoneNumberCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSMSSandboxPhoneNumberCommandOutput) => void): void;
            /**
                * <p>Creates a topic to which notifications can be published. Users can create at most
                *             100,000 standard topics (at most 1,000 FIFO topics). For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html">Creating an Amazon SNS
                *                 topic</a> in the <i>Amazon SNS Developer Guide</i>. This action is
                *             idempotent, so if the requester already owns a topic with the specified name, that
                *             topic's ARN is returned without creating a new topic.</p>
                */
            createTopic(args: CreateTopicCommandInput, options?: __HttpHandlerOptions): Promise<CreateTopicCommandOutput>;
            createTopic(args: CreateTopicCommandInput, cb: (err: any, data?: CreateTopicCommandOutput) => void): void;
            createTopic(args: CreateTopicCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTopicCommandOutput) => void): void;
            /**
                * <p>Deletes the endpoint for a device and mobile app from Amazon SNS. This action is
                *             idempotent. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push
                *             Notifications</a>. </p>
                *         <p>When you delete an endpoint that is also subscribed to a topic, then you must also
                *             unsubscribe the endpoint from the topic.</p>
                */
            deleteEndpoint(args: DeleteEndpointCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEndpointCommandOutput>;
            deleteEndpoint(args: DeleteEndpointCommandInput, cb: (err: any, data?: DeleteEndpointCommandOutput) => void): void;
            deleteEndpoint(args: DeleteEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEndpointCommandOutput) => void): void;
            /**
                * <p>Deletes a platform application object for one of the supported push notification
                *             services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see
                *                 <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS
                *                 Mobile Push Notifications</a>. </p>
                */
            deletePlatformApplication(args: DeletePlatformApplicationCommandInput, options?: __HttpHandlerOptions): Promise<DeletePlatformApplicationCommandOutput>;
            deletePlatformApplication(args: DeletePlatformApplicationCommandInput, cb: (err: any, data?: DeletePlatformApplicationCommandOutput) => void): void;
            deletePlatformApplication(args: DeletePlatformApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePlatformApplicationCommandOutput) => void): void;
            /**
                * <p>Deletes an Amazon Web Services account's verified or pending phone number from the SMS sandbox.</p>
                *         <p>When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the
                *                 <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for
                *                 you to try Amazon SNS features without risking your reputation as an SMS sender. While your
                *                 Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send
                *                 SMS messages only to verified destination phone numbers. For more information, including how to
                *                 move out of the sandbox to send messages without restrictions,
                *                 see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in
                *                 the <i>Amazon SNS Developer Guide</i>.</p>
                */
            deleteSMSSandboxPhoneNumber(args: DeleteSMSSandboxPhoneNumberCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSMSSandboxPhoneNumberCommandOutput>;
            deleteSMSSandboxPhoneNumber(args: DeleteSMSSandboxPhoneNumberCommandInput, cb: (err: any, data?: DeleteSMSSandboxPhoneNumberCommandOutput) => void): void;
            deleteSMSSandboxPhoneNumber(args: DeleteSMSSandboxPhoneNumberCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSMSSandboxPhoneNumberCommandOutput) => void): void;
            /**
                * <p>Deletes a topic and all its subscriptions. Deleting a topic might prevent some
                *             messages previously sent to the topic from being delivered to subscribers. This action
                *             is idempotent, so deleting a topic that does not exist does not result in an
                *             error.</p>
                */
            deleteTopic(args: DeleteTopicCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTopicCommandOutput>;
            deleteTopic(args: DeleteTopicCommandInput, cb: (err: any, data?: DeleteTopicCommandOutput) => void): void;
            deleteTopic(args: DeleteTopicCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTopicCommandOutput) => void): void;
            /**
                * <p>Retrieves the endpoint attributes for a device on one of the supported push
                *             notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more
                *             information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>. </p>
                */
            getEndpointAttributes(args: GetEndpointAttributesCommandInput, options?: __HttpHandlerOptions): Promise<GetEndpointAttributesCommandOutput>;
            getEndpointAttributes(args: GetEndpointAttributesCommandInput, cb: (err: any, data?: GetEndpointAttributesCommandOutput) => void): void;
            getEndpointAttributes(args: GetEndpointAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEndpointAttributesCommandOutput) => void): void;
            /**
                * <p>Retrieves the attributes of the platform application object for the supported push
                *             notification services, such as APNS and GCM (Firebase Cloud Messaging). For more
                *             information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>. </p>
                */
            getPlatformApplicationAttributes(args: GetPlatformApplicationAttributesCommandInput, options?: __HttpHandlerOptions): Promise<GetPlatformApplicationAttributesCommandOutput>;
            getPlatformApplicationAttributes(args: GetPlatformApplicationAttributesCommandInput, cb: (err: any, data?: GetPlatformApplicationAttributesCommandOutput) => void): void;
            getPlatformApplicationAttributes(args: GetPlatformApplicationAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPlatformApplicationAttributesCommandOutput) => void): void;
            /**
                * <p>Returns the settings for sending SMS messages from your Amazon Web Services account.</p>
                *         <p>These settings are set with the <code>SetSMSAttributes</code> action.</p>
                */
            getSMSAttributes(args: GetSMSAttributesCommandInput, options?: __HttpHandlerOptions): Promise<GetSMSAttributesCommandOutput>;
            getSMSAttributes(args: GetSMSAttributesCommandInput, cb: (err: any, data?: GetSMSAttributesCommandOutput) => void): void;
            getSMSAttributes(args: GetSMSAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSMSAttributesCommandOutput) => void): void;
            /**
                * <p>Retrieves the SMS sandbox status for the calling Amazon Web Services account in the target Amazon Web Services Region.</p>
                *         <p>When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the
                *                 <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for
                *                 you to try Amazon SNS features without risking your reputation as an SMS sender. While your
                *                 Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send
                *                 SMS messages only to verified destination phone numbers. For more information, including how to
                *                 move out of the sandbox to send messages without restrictions,
                *                 see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in
                *                 the <i>Amazon SNS Developer Guide</i>.</p>
                */
            getSMSSandboxAccountStatus(args: GetSMSSandboxAccountStatusCommandInput, options?: __HttpHandlerOptions): Promise<GetSMSSandboxAccountStatusCommandOutput>;
            getSMSSandboxAccountStatus(args: GetSMSSandboxAccountStatusCommandInput, cb: (err: any, data?: GetSMSSandboxAccountStatusCommandOutput) => void): void;
            getSMSSandboxAccountStatus(args: GetSMSSandboxAccountStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSMSSandboxAccountStatusCommandOutput) => void): void;
            /**
                * <p>Returns all of the properties of a subscription.</p>
                */
            getSubscriptionAttributes(args: GetSubscriptionAttributesCommandInput, options?: __HttpHandlerOptions): Promise<GetSubscriptionAttributesCommandOutput>;
            getSubscriptionAttributes(args: GetSubscriptionAttributesCommandInput, cb: (err: any, data?: GetSubscriptionAttributesCommandOutput) => void): void;
            getSubscriptionAttributes(args: GetSubscriptionAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSubscriptionAttributesCommandOutput) => void): void;
            /**
                * <p>Returns all of the properties of a topic. Topic properties returned might differ based
                *             on the authorization of the user.</p>
                */
            getTopicAttributes(args: GetTopicAttributesCommandInput, options?: __HttpHandlerOptions): Promise<GetTopicAttributesCommandOutput>;
            getTopicAttributes(args: GetTopicAttributesCommandInput, cb: (err: any, data?: GetTopicAttributesCommandOutput) => void): void;
            getTopicAttributes(args: GetTopicAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTopicAttributesCommandOutput) => void): void;
            /**
                * <p>Lists the endpoints and endpoint attributes for devices in a supported push
                *             notification service, such as GCM (Firebase Cloud Messaging) and APNS. The results for
                *                 <code>ListEndpointsByPlatformApplication</code> are paginated and return a limited
                *             list of endpoints, up to 100. If additional records are available after the first page
                *             results, then a NextToken string will be returned. To receive the next page, you call
                *                 <code>ListEndpointsByPlatformApplication</code> again using the NextToken string
                *             received from the previous call. When there are no more records to return, NextToken
                *             will be null. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push
                *             Notifications</a>. </p>
                *         <p>This action is throttled at 30 transactions per second (TPS).</p>
                */
            listEndpointsByPlatformApplication(args: ListEndpointsByPlatformApplicationCommandInput, options?: __HttpHandlerOptions): Promise<ListEndpointsByPlatformApplicationCommandOutput>;
            listEndpointsByPlatformApplication(args: ListEndpointsByPlatformApplicationCommandInput, cb: (err: any, data?: ListEndpointsByPlatformApplicationCommandOutput) => void): void;
            listEndpointsByPlatformApplication(args: ListEndpointsByPlatformApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEndpointsByPlatformApplicationCommandOutput) => void): void;
            /**
                * <p>Lists the calling Amazon Web Services account's dedicated origination numbers and their metadata. For
                *             more information about origination numbers, see <a href="https://docs.aws.amazon.com/sns/latest/dg/channels-sms-originating-identities-origination-numbers.html">Origination numbers</a> in the <i>Amazon SNS Developer
                *             Guide</i>.</p>
                */
            listOriginationNumbers(args: ListOriginationNumbersCommandInput, options?: __HttpHandlerOptions): Promise<ListOriginationNumbersCommandOutput>;
            listOriginationNumbers(args: ListOriginationNumbersCommandInput, cb: (err: any, data?: ListOriginationNumbersCommandOutput) => void): void;
            listOriginationNumbers(args: ListOriginationNumbersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListOriginationNumbersCommandOutput) => void): void;
            /**
                * <p>Returns a list of phone numbers that are opted out, meaning you cannot send SMS
                *             messages to them.</p>
                *         <p>The results for <code>ListPhoneNumbersOptedOut</code> are paginated, and each page
                *             returns up to 100 phone numbers. If additional phone numbers are available after the
                *             first page of results, then a <code>NextToken</code> string will be returned. To receive
                *             the next page, you call <code>ListPhoneNumbersOptedOut</code> again using the
                *                 <code>NextToken</code> string received from the previous call. When there are no
                *             more records to return, <code>NextToken</code> will be null.</p>
                */
            listPhoneNumbersOptedOut(args: ListPhoneNumbersOptedOutCommandInput, options?: __HttpHandlerOptions): Promise<ListPhoneNumbersOptedOutCommandOutput>;
            listPhoneNumbersOptedOut(args: ListPhoneNumbersOptedOutCommandInput, cb: (err: any, data?: ListPhoneNumbersOptedOutCommandOutput) => void): void;
            listPhoneNumbersOptedOut(args: ListPhoneNumbersOptedOutCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPhoneNumbersOptedOutCommandOutput) => void): void;
            /**
                * <p>Lists the platform application objects for the supported push notification services,
                *             such as APNS and GCM (Firebase Cloud Messaging). The results for
                *                 <code>ListPlatformApplications</code> are paginated and return a limited list of
                *             applications, up to 100. If additional records are available after the first page
                *             results, then a NextToken string will be returned. To receive the next page, you call
                *                 <code>ListPlatformApplications</code> using the NextToken string received from the
                *             previous call. When there are no more records to return, <code>NextToken</code> will be
                *             null. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push
                *             Notifications</a>. </p>
                *         <p>This action is throttled at 15 transactions per second (TPS).</p>
                */
            listPlatformApplications(args: ListPlatformApplicationsCommandInput, options?: __HttpHandlerOptions): Promise<ListPlatformApplicationsCommandOutput>;
            listPlatformApplications(args: ListPlatformApplicationsCommandInput, cb: (err: any, data?: ListPlatformApplicationsCommandOutput) => void): void;
            listPlatformApplications(args: ListPlatformApplicationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPlatformApplicationsCommandOutput) => void): void;
            /**
                * <p>Lists the calling Amazon Web Services account's current verified and pending destination phone numbers
                *             in the SMS sandbox.</p>
                *         <p>When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the
                *                 <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for
                *                 you to try Amazon SNS features without risking your reputation as an SMS sender. While your
                *                 Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send
                *                 SMS messages only to verified destination phone numbers. For more information, including how to
                *                 move out of the sandbox to send messages without restrictions,
                *                 see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in
                *                 the <i>Amazon SNS Developer Guide</i>.</p>
                */
            listSMSSandboxPhoneNumbers(args: ListSMSSandboxPhoneNumbersCommandInput, options?: __HttpHandlerOptions): Promise<ListSMSSandboxPhoneNumbersCommandOutput>;
            listSMSSandboxPhoneNumbers(args: ListSMSSandboxPhoneNumbersCommandInput, cb: (err: any, data?: ListSMSSandboxPhoneNumbersCommandOutput) => void): void;
            listSMSSandboxPhoneNumbers(args: ListSMSSandboxPhoneNumbersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSMSSandboxPhoneNumbersCommandOutput) => void): void;
            /**
                * <p>Returns a list of the requester's subscriptions. Each call returns a limited list of
                *             subscriptions, up to 100. If there are more subscriptions, a <code>NextToken</code> is
                *             also returned. Use the <code>NextToken</code> parameter in a new
                *                 <code>ListSubscriptions</code> call to get further results.</p>
                *         <p>This action is throttled at 30 transactions per second (TPS).</p>
                */
            listSubscriptions(args: ListSubscriptionsCommandInput, options?: __HttpHandlerOptions): Promise<ListSubscriptionsCommandOutput>;
            listSubscriptions(args: ListSubscriptionsCommandInput, cb: (err: any, data?: ListSubscriptionsCommandOutput) => void): void;
            listSubscriptions(args: ListSubscriptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSubscriptionsCommandOutput) => void): void;
            /**
                * <p>Returns a list of the subscriptions to a specific topic. Each call returns a limited
                *             list of subscriptions, up to 100. If there are more subscriptions, a
                *                 <code>NextToken</code> is also returned. Use the <code>NextToken</code> parameter in
                *             a new <code>ListSubscriptionsByTopic</code> call to get further results.</p>
                *         <p>This action is throttled at 30 transactions per second (TPS).</p>
                */
            listSubscriptionsByTopic(args: ListSubscriptionsByTopicCommandInput, options?: __HttpHandlerOptions): Promise<ListSubscriptionsByTopicCommandOutput>;
            listSubscriptionsByTopic(args: ListSubscriptionsByTopicCommandInput, cb: (err: any, data?: ListSubscriptionsByTopicCommandOutput) => void): void;
            listSubscriptionsByTopic(args: ListSubscriptionsByTopicCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSubscriptionsByTopicCommandOutput) => void): void;
            /**
                * <p>List all tags added to the specified Amazon SNS topic. For an overview, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html">Amazon SNS Tags</a> in the
                *                 <i>Amazon Simple Notification Service Developer Guide</i>.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Returns a list of the requester's topics. Each call returns a limited list of topics,
                *             up to 100. If there are more topics, a <code>NextToken</code> is also returned. Use the
                *                 <code>NextToken</code> parameter in a new <code>ListTopics</code> call to get
                *             further results.</p>
                *         <p>This action is throttled at 30 transactions per second (TPS).</p>
                */
            listTopics(args: ListTopicsCommandInput, options?: __HttpHandlerOptions): Promise<ListTopicsCommandOutput>;
            listTopics(args: ListTopicsCommandInput, cb: (err: any, data?: ListTopicsCommandOutput) => void): void;
            listTopics(args: ListTopicsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTopicsCommandOutput) => void): void;
            /**
                * <p>Use this request to opt in a phone number that is opted out, which enables you to
                *             resume sending SMS messages to the number.</p>
                *         <p>You can opt in a phone number only once every 30 days.</p>
                */
            optInPhoneNumber(args: OptInPhoneNumberCommandInput, options?: __HttpHandlerOptions): Promise<OptInPhoneNumberCommandOutput>;
            optInPhoneNumber(args: OptInPhoneNumberCommandInput, cb: (err: any, data?: OptInPhoneNumberCommandOutput) => void): void;
            optInPhoneNumber(args: OptInPhoneNumberCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: OptInPhoneNumberCommandOutput) => void): void;
            /**
                * <p>Sends a message to an Amazon SNS topic, a text message (SMS message) directly to a phone
                *             number, or a message to a mobile platform endpoint (when you specify the
                *                 <code>TargetArn</code>).</p>
                *         <p>If you send a message to a topic, Amazon SNS delivers the message to each endpoint that is
                *             subscribed to the topic. The format of the message depends on the notification protocol
                *             for each subscribed endpoint.</p>
                *         <p>When a <code>messageId</code> is returned, the message is saved and Amazon SNS
                *             immediately delivers it to subscribers.</p>
                *         <p>To use the <code>Publish</code> action for publishing a message to a mobile endpoint,
                *             such as an app on a Kindle device or mobile phone, you must specify the EndpointArn for
                *             the TargetArn parameter. The EndpointArn is returned when making a call with the
                *                 <code>CreatePlatformEndpoint</code> action. </p>
                *         <p>For more information about formatting messages, see <a href="https://docs.aws.amazon.com/sns/latest/dg/mobile-push-send-custommessage.html">Send Custom
                *                 Platform-Specific Payloads in Messages to Mobile Devices</a>. </p>
                *         <important>
                *             <p>You can publish messages only to topics and endpoints in the same Amazon Web Services Region.</p>
                *         </important>
                */
            publish(args: PublishCommandInput, options?: __HttpHandlerOptions): Promise<PublishCommandOutput>;
            publish(args: PublishCommandInput, cb: (err: any, data?: PublishCommandOutput) => void): void;
            publish(args: PublishCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PublishCommandOutput) => void): void;
            /**
                * <p>Publishes up to ten messages to the specified topic. This is a batch version of <code>Publish</code>. For FIFO topics, multiple messages within a single batch are published in the order they are sent, and messages are deduplicated within the batch and across batches for 5 minutes.</p>
                *         <p>The result of publishing each message is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of <code>200</code>.</p>
                *         <p>The maximum allowed individual message size and the maximum total payload size (the sum of the individual lengths of all of the batched messages) are both 256 KB (262,144 bytes). </p>
                *             <p>Some actions take lists of parameters. These lists are specified using the <code>param.n</code> notation. Values of <code>n</code> are integers starting from 1. For example, a parameter list with two elements looks like this: </p>
                *             <p>&AttributeName.1=first</p>
                *             <p>&AttributeName.2=second</p>
                *         <p>If you send a batch message to a topic, Amazon SNS publishes the batch message to each endpoint that is
                *             subscribed to the topic. The format of the batch message depends on the notification protocol
                *             for each subscribed endpoint.</p>
                *         <p>When a <code>messageId</code> is returned, the batch message is saved and Amazon SNS immediately delivers the message to subscribers.</p>
                */
            publishBatch(args: PublishBatchCommandInput, options?: __HttpHandlerOptions): Promise<PublishBatchCommandOutput>;
            publishBatch(args: PublishBatchCommandInput, cb: (err: any, data?: PublishBatchCommandOutput) => void): void;
            publishBatch(args: PublishBatchCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PublishBatchCommandOutput) => void): void;
            /**
                * <p>Removes a statement from a topic's access control policy.</p>
                */
            removePermission(args: RemovePermissionCommandInput, options?: __HttpHandlerOptions): Promise<RemovePermissionCommandOutput>;
            removePermission(args: RemovePermissionCommandInput, cb: (err: any, data?: RemovePermissionCommandOutput) => void): void;
            removePermission(args: RemovePermissionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemovePermissionCommandOutput) => void): void;
            /**
                * <p>Sets the attributes for an endpoint for a device on one of the supported push
                *             notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more
                *             information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>. </p>
                */
            setEndpointAttributes(args: SetEndpointAttributesCommandInput, options?: __HttpHandlerOptions): Promise<SetEndpointAttributesCommandOutput>;
            setEndpointAttributes(args: SetEndpointAttributesCommandInput, cb: (err: any, data?: SetEndpointAttributesCommandOutput) => void): void;
            setEndpointAttributes(args: SetEndpointAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetEndpointAttributesCommandOutput) => void): void;
            /**
                * <p>Sets the attributes of the platform application object for the supported push
                *             notification services, such as APNS and GCM (Firebase Cloud Messaging). For more
                *             information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>. For information on configuring
                *             attributes for message delivery status, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-msg-status.html">Using Amazon SNS Application Attributes for
                *                 Message Delivery Status</a>. </p>
                */
            setPlatformApplicationAttributes(args: SetPlatformApplicationAttributesCommandInput, options?: __HttpHandlerOptions): Promise<SetPlatformApplicationAttributesCommandOutput>;
            setPlatformApplicationAttributes(args: SetPlatformApplicationAttributesCommandInput, cb: (err: any, data?: SetPlatformApplicationAttributesCommandOutput) => void): void;
            setPlatformApplicationAttributes(args: SetPlatformApplicationAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetPlatformApplicationAttributesCommandOutput) => void): void;
            /**
                * <p>Use this request to set the default settings for sending SMS messages and receiving
                *             daily SMS usage reports.</p>
                *         <p>You can override some of these settings for a single message when you use the
                *                 <code>Publish</code> action with the <code>MessageAttributes.entry.N</code>
                *             parameter. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html">Publishing to a mobile phone</a>
                *             in the <i>Amazon SNS Developer Guide</i>.</p>
                *         <note>
                *             <p>To use this operation, you must grant the Amazon SNS service principal
                *                     (<code>sns.amazonaws.com</code>) permission to perform the
                *                     <code>s3:ListBucket</code> action. </p>
                *         </note>
                */
            setSMSAttributes(args: SetSMSAttributesCommandInput, options?: __HttpHandlerOptions): Promise<SetSMSAttributesCommandOutput>;
            setSMSAttributes(args: SetSMSAttributesCommandInput, cb: (err: any, data?: SetSMSAttributesCommandOutput) => void): void;
            setSMSAttributes(args: SetSMSAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetSMSAttributesCommandOutput) => void): void;
            /**
                * <p>Allows a subscription owner to set an attribute of the subscription to a new
                *             value.</p>
                */
            setSubscriptionAttributes(args: SetSubscriptionAttributesCommandInput, options?: __HttpHandlerOptions): Promise<SetSubscriptionAttributesCommandOutput>;
            setSubscriptionAttributes(args: SetSubscriptionAttributesCommandInput, cb: (err: any, data?: SetSubscriptionAttributesCommandOutput) => void): void;
            setSubscriptionAttributes(args: SetSubscriptionAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetSubscriptionAttributesCommandOutput) => void): void;
            /**
                * <p>Allows a topic owner to set an attribute of the topic to a new value.</p>
                */
            setTopicAttributes(args: SetTopicAttributesCommandInput, options?: __HttpHandlerOptions): Promise<SetTopicAttributesCommandOutput>;
            setTopicAttributes(args: SetTopicAttributesCommandInput, cb: (err: any, data?: SetTopicAttributesCommandOutput) => void): void;
            setTopicAttributes(args: SetTopicAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetTopicAttributesCommandOutput) => void): void;
            /**
                * <p>Subscribes an endpoint to an Amazon SNS topic. If the endpoint type is HTTP/S or email, or
                *             if the endpoint and the topic are not in the same Amazon Web Services account, the endpoint owner must
                *             run the <code>ConfirmSubscription</code> action to confirm the subscription.</p>
                *         <p>You call the <code>ConfirmSubscription</code> action with the token from the
                *             subscription response. Confirmation tokens are valid for three days.</p>
                *         <p>This action is throttled at 100 transactions per second (TPS).</p>
                */
            subscribe(args: SubscribeCommandInput, options?: __HttpHandlerOptions): Promise<SubscribeCommandOutput>;
            subscribe(args: SubscribeCommandInput, cb: (err: any, data?: SubscribeCommandOutput) => void): void;
            subscribe(args: SubscribeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SubscribeCommandOutput) => void): void;
            /**
                * <p>Add tags to the specified Amazon SNS topic. For an overview, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html">Amazon SNS Tags</a> in the
                *                 <i>Amazon SNS Developer Guide</i>.</p>
                *         <p>When you use topic tags, keep the following guidelines in mind:</p>
                *         <ul>
                *             <li>
                *                 <p>Adding more than 50 tags to a topic isn't recommended.</p>
                *             </li>
                *             <li>
                *                 <p>Tags don't have any semantic meaning. Amazon SNS interprets tags as character
                *                     strings.</p>
                *             </li>
                *             <li>
                *                 <p>Tags are case-sensitive.</p>
                *             </li>
                *             <li>
                *                 <p>A new tag with a key identical to that of an existing tag overwrites the
                *                     existing tag.</p>
                *             </li>
                *             <li>
                *                 <p>Tagging actions are limited to 10 TPS per Amazon Web Services account, per Amazon Web Services Region. If your
                *                     application requires a higher throughput, file a <a href="https://console.aws.amazon.com/support/home#/case/create?issueType=technical">technical support request</a>.</p>
                *             </li>
                *          </ul>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Deletes a subscription. If the subscription requires authentication for deletion, only
                *             the owner of the subscription or the topic's owner can unsubscribe, and an Amazon Web Services signature
                *             is required. If the <code>Unsubscribe</code> call does not require authentication and
                *             the requester is not the subscription owner, a final cancellation message is delivered
                *             to the endpoint, so that the endpoint owner can easily resubscribe to the topic if the
                *                 <code>Unsubscribe</code> request was unintended.</p>
                *         <p>This action is throttled at 100 transactions per second (TPS).</p>
                */
            unsubscribe(args: UnsubscribeCommandInput, options?: __HttpHandlerOptions): Promise<UnsubscribeCommandOutput>;
            unsubscribe(args: UnsubscribeCommandInput, cb: (err: any, data?: UnsubscribeCommandOutput) => void): void;
            unsubscribe(args: UnsubscribeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UnsubscribeCommandOutput) => void): void;
            /**
                * <p>Remove tags from the specified Amazon SNS topic. For an overview, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html">Amazon SNS Tags</a> in the
                *                 <i>Amazon SNS Developer Guide</i>.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Verifies a destination phone number with a one-time password (OTP) for the calling Amazon Web Services account.</p>
                *         <p>When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the
                *                 <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for
                *                 you to try Amazon SNS features without risking your reputation as an SMS sender. While your
                *                 Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send
                *                 SMS messages only to verified destination phone numbers. For more information, including how to
                *                 move out of the sandbox to send messages without restrictions,
                *                 see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in
                *                 the <i>Amazon SNS Developer Guide</i>.</p>
                */
            verifySMSSandboxPhoneNumber(args: VerifySMSSandboxPhoneNumberCommandInput, options?: __HttpHandlerOptions): Promise<VerifySMSSandboxPhoneNumberCommandOutput>;
            verifySMSSandboxPhoneNumber(args: VerifySMSSandboxPhoneNumberCommandInput, cb: (err: any, data?: VerifySMSSandboxPhoneNumberCommandOutput) => void): void;
            verifySMSSandboxPhoneNumber(args: VerifySMSSandboxPhoneNumberCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: VerifySMSSandboxPhoneNumberCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/AddPermissionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AddPermissionInput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface AddPermissionCommandInput extends AddPermissionInput {
    }
    export interface AddPermissionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds a statement to a topic's access control policy, granting access for the specified
        *             Amazon Web Services accounts to the specified actions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, AddPermissionCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, AddPermissionCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new AddPermissionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddPermissionCommandInput} for command's `input` shape.
        * @see {@link AddPermissionCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class AddPermissionCommand extends $Command<AddPermissionCommandInput, AddPermissionCommandOutput, SNSClientResolvedConfig> {
            readonly input: AddPermissionCommandInput;
            constructor(input: AddPermissionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddPermissionCommandInput, AddPermissionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/CheckIfPhoneNumberIsOptedOutCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CheckIfPhoneNumberIsOptedOutInput, CheckIfPhoneNumberIsOptedOutResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface CheckIfPhoneNumberIsOptedOutCommandInput extends CheckIfPhoneNumberIsOptedOutInput {
    }
    export interface CheckIfPhoneNumberIsOptedOutCommandOutput extends CheckIfPhoneNumberIsOptedOutResponse, __MetadataBearer {
    }
    /**
        * <p>Accepts a phone number and indicates whether the phone holder has opted out of
        *             receiving SMS messages from your Amazon Web Services account. You cannot send SMS messages to a number that
        *             is opted out.</p>
        *         <p>To resume sending messages, you can opt in the number by using the
        *                 <code>OptInPhoneNumber</code> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, CheckIfPhoneNumberIsOptedOutCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, CheckIfPhoneNumberIsOptedOutCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new CheckIfPhoneNumberIsOptedOutCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CheckIfPhoneNumberIsOptedOutCommandInput} for command's `input` shape.
        * @see {@link CheckIfPhoneNumberIsOptedOutCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class CheckIfPhoneNumberIsOptedOutCommand extends $Command<CheckIfPhoneNumberIsOptedOutCommandInput, CheckIfPhoneNumberIsOptedOutCommandOutput, SNSClientResolvedConfig> {
            readonly input: CheckIfPhoneNumberIsOptedOutCommandInput;
            constructor(input: CheckIfPhoneNumberIsOptedOutCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CheckIfPhoneNumberIsOptedOutCommandInput, CheckIfPhoneNumberIsOptedOutCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ConfirmSubscriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConfirmSubscriptionInput, ConfirmSubscriptionResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface ConfirmSubscriptionCommandInput extends ConfirmSubscriptionInput {
    }
    export interface ConfirmSubscriptionCommandOutput extends ConfirmSubscriptionResponse, __MetadataBearer {
    }
    /**
        * <p>Verifies an endpoint owner's intent to receive messages by validating the token sent
        *             to the endpoint by an earlier <code>Subscribe</code> action. If the token is valid, the
        *             action creates a new subscription and returns its Amazon Resource Name (ARN). This call
        *             requires an AWS signature only when the <code>AuthenticateOnUnsubscribe</code> flag is
        *             set to "true".</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, ConfirmSubscriptionCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, ConfirmSubscriptionCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new ConfirmSubscriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ConfirmSubscriptionCommandInput} for command's `input` shape.
        * @see {@link ConfirmSubscriptionCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class ConfirmSubscriptionCommand extends $Command<ConfirmSubscriptionCommandInput, ConfirmSubscriptionCommandOutput, SNSClientResolvedConfig> {
            readonly input: ConfirmSubscriptionCommandInput;
            constructor(input: ConfirmSubscriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ConfirmSubscriptionCommandInput, ConfirmSubscriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/CreatePlatformApplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreatePlatformApplicationInput, CreatePlatformApplicationResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface CreatePlatformApplicationCommandInput extends CreatePlatformApplicationInput {
    }
    export interface CreatePlatformApplicationCommandOutput extends CreatePlatformApplicationResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a platform application object for one of the supported push notification
        *             services, such as APNS and GCM (Firebase Cloud Messaging), to which devices and mobile
        *             apps may register. You must specify <code>PlatformPrincipal</code> and
        *                 <code>PlatformCredential</code> attributes when using the
        *                 <code>CreatePlatformApplication</code> action.</p>
        *         <p>
        *             <code>PlatformPrincipal</code> and <code>PlatformCredential</code> are received from
        *             the notification service.</p>
        *         <ul>
        *             <li>
        *                 <p>For <code>ADM</code>, <code>PlatformPrincipal</code> is <code>client id</code>
        *                     and <code>PlatformCredential</code> is <code>client secret</code>.</p>
        *             </li>
        *             <li>
        *                 <p>For <code>Baidu</code>, <code>PlatformPrincipal</code> is <code>API key</code>
        *                     and <code>PlatformCredential</code> is <code>secret key</code>.</p>
        *             </li>
        *             <li>
        *                 <p>For <code>APNS</code> and <code>APNS_SANDBOX</code> using certificate credentials,
        *                         <code>PlatformPrincipal</code> is <code>SSL certificate</code> and
        *                         <code>PlatformCredential</code> is <code>private key</code>.</p>
        *             </li>
        *             <li>
        *                 <p>For <code>APNS</code> and <code>APNS_SANDBOX</code> using token credentials,
        *                     <code>PlatformPrincipal</code> is <code>signing key ID</code> and
        *                     <code>PlatformCredential</code> is <code>signing key</code>.</p>
        *             </li>
        *             <li>
        *                 <p>For <code>GCM</code> (Firebase Cloud Messaging), there is no
        *                         <code>PlatformPrincipal</code> and the <code>PlatformCredential</code> is
        *                         <code>API key</code>.</p>
        *             </li>
        *             <li>
        *                 <p>For <code>MPNS</code>, <code>PlatformPrincipal</code> is <code>TLS
        *                         certificate</code> and <code>PlatformCredential</code> is <code>private
        *                         key</code>.</p>
        *             </li>
        *             <li>
        *                 <p>For <code>WNS</code>, <code>PlatformPrincipal</code> is <code>Package Security
        *                         Identifier</code> and <code>PlatformCredential</code> is <code>secret
        *                         key</code>.</p>
        *             </li>
        *          </ul>
        *         <p>You can use the returned <code>PlatformApplicationArn</code> as an attribute for the
        *                 <code>CreatePlatformEndpoint</code> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, CreatePlatformApplicationCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, CreatePlatformApplicationCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new CreatePlatformApplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePlatformApplicationCommandInput} for command's `input` shape.
        * @see {@link CreatePlatformApplicationCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class CreatePlatformApplicationCommand extends $Command<CreatePlatformApplicationCommandInput, CreatePlatformApplicationCommandOutput, SNSClientResolvedConfig> {
            readonly input: CreatePlatformApplicationCommandInput;
            constructor(input: CreatePlatformApplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePlatformApplicationCommandInput, CreatePlatformApplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/CreatePlatformEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateEndpointResponse, CreatePlatformEndpointInput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface CreatePlatformEndpointCommandInput extends CreatePlatformEndpointInput {
    }
    export interface CreatePlatformEndpointCommandOutput extends CreateEndpointResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an endpoint for a device and mobile app on one of the supported push
        *             notification services, such as GCM (Firebase Cloud Messaging) and APNS.
        *                 <code>CreatePlatformEndpoint</code> requires the <code>PlatformApplicationArn</code>
        *             that is returned from <code>CreatePlatformApplication</code>. You can use the returned
        *                 <code>EndpointArn</code> to send a message to a mobile app or by the
        *                 <code>Subscribe</code> action for subscription to a topic. The
        *                 <code>CreatePlatformEndpoint</code> action is idempotent, so if the requester
        *             already owns an endpoint with the same device token and attributes, that endpoint's ARN
        *             is returned without creating a new endpoint. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push
        *                 Notifications</a>. </p>
        *         <p>When using <code>CreatePlatformEndpoint</code> with Baidu, two attributes must be
        *             provided: ChannelId and UserId. The token field must also contain the ChannelId. For
        *             more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePushBaiduEndpoint.html">Creating an Amazon SNS Endpoint
        *                 for Baidu</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, CreatePlatformEndpointCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, CreatePlatformEndpointCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new CreatePlatformEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePlatformEndpointCommandInput} for command's `input` shape.
        * @see {@link CreatePlatformEndpointCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class CreatePlatformEndpointCommand extends $Command<CreatePlatformEndpointCommandInput, CreatePlatformEndpointCommandOutput, SNSClientResolvedConfig> {
            readonly input: CreatePlatformEndpointCommandInput;
            constructor(input: CreatePlatformEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePlatformEndpointCommandInput, CreatePlatformEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/CreateSMSSandboxPhoneNumberCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateSMSSandboxPhoneNumberInput, CreateSMSSandboxPhoneNumberResult } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface CreateSMSSandboxPhoneNumberCommandInput extends CreateSMSSandboxPhoneNumberInput {
    }
    export interface CreateSMSSandboxPhoneNumberCommandOutput extends CreateSMSSandboxPhoneNumberResult, __MetadataBearer {
    }
    /**
        * <p>Adds a destination phone number to an Amazon Web Services account in the SMS sandbox and sends a
        *             one-time password (OTP) to that phone number.</p>
        *         <p>When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the
        *                 <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for
        *                 you to try Amazon SNS features without risking your reputation as an SMS sender. While your
        *                 Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send
        *                 SMS messages only to verified destination phone numbers. For more information, including how to
        *                 move out of the sandbox to send messages without restrictions,
        *                 see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in
        *                 the <i>Amazon SNS Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, CreateSMSSandboxPhoneNumberCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, CreateSMSSandboxPhoneNumberCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new CreateSMSSandboxPhoneNumberCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSMSSandboxPhoneNumberCommandInput} for command's `input` shape.
        * @see {@link CreateSMSSandboxPhoneNumberCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class CreateSMSSandboxPhoneNumberCommand extends $Command<CreateSMSSandboxPhoneNumberCommandInput, CreateSMSSandboxPhoneNumberCommandOutput, SNSClientResolvedConfig> {
            readonly input: CreateSMSSandboxPhoneNumberCommandInput;
            constructor(input: CreateSMSSandboxPhoneNumberCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSMSSandboxPhoneNumberCommandInput, CreateSMSSandboxPhoneNumberCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/CreateTopicCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateTopicInput, CreateTopicResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface CreateTopicCommandInput extends CreateTopicInput {
    }
    export interface CreateTopicCommandOutput extends CreateTopicResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a topic to which notifications can be published. Users can create at most
        *             100,000 standard topics (at most 1,000 FIFO topics). For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html">Creating an Amazon SNS
        *                 topic</a> in the <i>Amazon SNS Developer Guide</i>. This action is
        *             idempotent, so if the requester already owns a topic with the specified name, that
        *             topic's ARN is returned without creating a new topic.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, CreateTopicCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, CreateTopicCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new CreateTopicCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateTopicCommandInput} for command's `input` shape.
        * @see {@link CreateTopicCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class CreateTopicCommand extends $Command<CreateTopicCommandInput, CreateTopicCommandOutput, SNSClientResolvedConfig> {
            readonly input: CreateTopicCommandInput;
            constructor(input: CreateTopicCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateTopicCommandInput, CreateTopicCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/DeleteEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteEndpointInput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface DeleteEndpointCommandInput extends DeleteEndpointInput {
    }
    export interface DeleteEndpointCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the endpoint for a device and mobile app from Amazon SNS. This action is
        *             idempotent. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push
        *             Notifications</a>. </p>
        *         <p>When you delete an endpoint that is also subscribed to a topic, then you must also
        *             unsubscribe the endpoint from the topic.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, DeleteEndpointCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, DeleteEndpointCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new DeleteEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEndpointCommandInput} for command's `input` shape.
        * @see {@link DeleteEndpointCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class DeleteEndpointCommand extends $Command<DeleteEndpointCommandInput, DeleteEndpointCommandOutput, SNSClientResolvedConfig> {
            readonly input: DeleteEndpointCommandInput;
            constructor(input: DeleteEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEndpointCommandInput, DeleteEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/DeletePlatformApplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeletePlatformApplicationInput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface DeletePlatformApplicationCommandInput extends DeletePlatformApplicationInput {
    }
    export interface DeletePlatformApplicationCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a platform application object for one of the supported push notification
        *             services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see
        *                 <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS
        *                 Mobile Push Notifications</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, DeletePlatformApplicationCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, DeletePlatformApplicationCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new DeletePlatformApplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePlatformApplicationCommandInput} for command's `input` shape.
        * @see {@link DeletePlatformApplicationCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class DeletePlatformApplicationCommand extends $Command<DeletePlatformApplicationCommandInput, DeletePlatformApplicationCommandOutput, SNSClientResolvedConfig> {
            readonly input: DeletePlatformApplicationCommandInput;
            constructor(input: DeletePlatformApplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePlatformApplicationCommandInput, DeletePlatformApplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/DeleteSMSSandboxPhoneNumberCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteSMSSandboxPhoneNumberInput, DeleteSMSSandboxPhoneNumberResult } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface DeleteSMSSandboxPhoneNumberCommandInput extends DeleteSMSSandboxPhoneNumberInput {
    }
    export interface DeleteSMSSandboxPhoneNumberCommandOutput extends DeleteSMSSandboxPhoneNumberResult, __MetadataBearer {
    }
    /**
        * <p>Deletes an Amazon Web Services account's verified or pending phone number from the SMS sandbox.</p>
        *         <p>When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the
        *                 <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for
        *                 you to try Amazon SNS features without risking your reputation as an SMS sender. While your
        *                 Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send
        *                 SMS messages only to verified destination phone numbers. For more information, including how to
        *                 move out of the sandbox to send messages without restrictions,
        *                 see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in
        *                 the <i>Amazon SNS Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, DeleteSMSSandboxPhoneNumberCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, DeleteSMSSandboxPhoneNumberCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new DeleteSMSSandboxPhoneNumberCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteSMSSandboxPhoneNumberCommandInput} for command's `input` shape.
        * @see {@link DeleteSMSSandboxPhoneNumberCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class DeleteSMSSandboxPhoneNumberCommand extends $Command<DeleteSMSSandboxPhoneNumberCommandInput, DeleteSMSSandboxPhoneNumberCommandOutput, SNSClientResolvedConfig> {
            readonly input: DeleteSMSSandboxPhoneNumberCommandInput;
            constructor(input: DeleteSMSSandboxPhoneNumberCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteSMSSandboxPhoneNumberCommandInput, DeleteSMSSandboxPhoneNumberCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/DeleteTopicCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteTopicInput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface DeleteTopicCommandInput extends DeleteTopicInput {
    }
    export interface DeleteTopicCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a topic and all its subscriptions. Deleting a topic might prevent some
        *             messages previously sent to the topic from being delivered to subscribers. This action
        *             is idempotent, so deleting a topic that does not exist does not result in an
        *             error.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, DeleteTopicCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, DeleteTopicCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new DeleteTopicCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteTopicCommandInput} for command's `input` shape.
        * @see {@link DeleteTopicCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class DeleteTopicCommand extends $Command<DeleteTopicCommandInput, DeleteTopicCommandOutput, SNSClientResolvedConfig> {
            readonly input: DeleteTopicCommandInput;
            constructor(input: DeleteTopicCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteTopicCommandInput, DeleteTopicCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/GetEndpointAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetEndpointAttributesInput, GetEndpointAttributesResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface GetEndpointAttributesCommandInput extends GetEndpointAttributesInput {
    }
    export interface GetEndpointAttributesCommandOutput extends GetEndpointAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the endpoint attributes for a device on one of the supported push
        *             notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more
        *             information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, GetEndpointAttributesCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, GetEndpointAttributesCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new GetEndpointAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetEndpointAttributesCommandInput} for command's `input` shape.
        * @see {@link GetEndpointAttributesCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class GetEndpointAttributesCommand extends $Command<GetEndpointAttributesCommandInput, GetEndpointAttributesCommandOutput, SNSClientResolvedConfig> {
            readonly input: GetEndpointAttributesCommandInput;
            constructor(input: GetEndpointAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetEndpointAttributesCommandInput, GetEndpointAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/GetPlatformApplicationAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetPlatformApplicationAttributesInput, GetPlatformApplicationAttributesResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface GetPlatformApplicationAttributesCommandInput extends GetPlatformApplicationAttributesInput {
    }
    export interface GetPlatformApplicationAttributesCommandOutput extends GetPlatformApplicationAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the attributes of the platform application object for the supported push
        *             notification services, such as APNS and GCM (Firebase Cloud Messaging). For more
        *             information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, GetPlatformApplicationAttributesCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, GetPlatformApplicationAttributesCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new GetPlatformApplicationAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPlatformApplicationAttributesCommandInput} for command's `input` shape.
        * @see {@link GetPlatformApplicationAttributesCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class GetPlatformApplicationAttributesCommand extends $Command<GetPlatformApplicationAttributesCommandInput, GetPlatformApplicationAttributesCommandOutput, SNSClientResolvedConfig> {
            readonly input: GetPlatformApplicationAttributesCommandInput;
            constructor(input: GetPlatformApplicationAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPlatformApplicationAttributesCommandInput, GetPlatformApplicationAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/GetSMSAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetSMSAttributesInput, GetSMSAttributesResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface GetSMSAttributesCommandInput extends GetSMSAttributesInput {
    }
    export interface GetSMSAttributesCommandOutput extends GetSMSAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the settings for sending SMS messages from your Amazon Web Services account.</p>
        *         <p>These settings are set with the <code>SetSMSAttributes</code> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, GetSMSAttributesCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, GetSMSAttributesCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new GetSMSAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSMSAttributesCommandInput} for command's `input` shape.
        * @see {@link GetSMSAttributesCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class GetSMSAttributesCommand extends $Command<GetSMSAttributesCommandInput, GetSMSAttributesCommandOutput, SNSClientResolvedConfig> {
            readonly input: GetSMSAttributesCommandInput;
            constructor(input: GetSMSAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSMSAttributesCommandInput, GetSMSAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/GetSMSSandboxAccountStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetSMSSandboxAccountStatusInput, GetSMSSandboxAccountStatusResult } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface GetSMSSandboxAccountStatusCommandInput extends GetSMSSandboxAccountStatusInput {
    }
    export interface GetSMSSandboxAccountStatusCommandOutput extends GetSMSSandboxAccountStatusResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves the SMS sandbox status for the calling Amazon Web Services account in the target Amazon Web Services Region.</p>
        *         <p>When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the
        *                 <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for
        *                 you to try Amazon SNS features without risking your reputation as an SMS sender. While your
        *                 Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send
        *                 SMS messages only to verified destination phone numbers. For more information, including how to
        *                 move out of the sandbox to send messages without restrictions,
        *                 see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in
        *                 the <i>Amazon SNS Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, GetSMSSandboxAccountStatusCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, GetSMSSandboxAccountStatusCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new GetSMSSandboxAccountStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSMSSandboxAccountStatusCommandInput} for command's `input` shape.
        * @see {@link GetSMSSandboxAccountStatusCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class GetSMSSandboxAccountStatusCommand extends $Command<GetSMSSandboxAccountStatusCommandInput, GetSMSSandboxAccountStatusCommandOutput, SNSClientResolvedConfig> {
            readonly input: GetSMSSandboxAccountStatusCommandInput;
            constructor(input: GetSMSSandboxAccountStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSMSSandboxAccountStatusCommandInput, GetSMSSandboxAccountStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/GetSubscriptionAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetSubscriptionAttributesInput, GetSubscriptionAttributesResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface GetSubscriptionAttributesCommandInput extends GetSubscriptionAttributesInput {
    }
    export interface GetSubscriptionAttributesCommandOutput extends GetSubscriptionAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns all of the properties of a subscription.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, GetSubscriptionAttributesCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, GetSubscriptionAttributesCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new GetSubscriptionAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSubscriptionAttributesCommandInput} for command's `input` shape.
        * @see {@link GetSubscriptionAttributesCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class GetSubscriptionAttributesCommand extends $Command<GetSubscriptionAttributesCommandInput, GetSubscriptionAttributesCommandOutput, SNSClientResolvedConfig> {
            readonly input: GetSubscriptionAttributesCommandInput;
            constructor(input: GetSubscriptionAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSubscriptionAttributesCommandInput, GetSubscriptionAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/GetTopicAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetTopicAttributesInput, GetTopicAttributesResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface GetTopicAttributesCommandInput extends GetTopicAttributesInput {
    }
    export interface GetTopicAttributesCommandOutput extends GetTopicAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns all of the properties of a topic. Topic properties returned might differ based
        *             on the authorization of the user.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, GetTopicAttributesCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, GetTopicAttributesCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new GetTopicAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTopicAttributesCommandInput} for command's `input` shape.
        * @see {@link GetTopicAttributesCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class GetTopicAttributesCommand extends $Command<GetTopicAttributesCommandInput, GetTopicAttributesCommandOutput, SNSClientResolvedConfig> {
            readonly input: GetTopicAttributesCommandInput;
            constructor(input: GetTopicAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTopicAttributesCommandInput, GetTopicAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListEndpointsByPlatformApplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListEndpointsByPlatformApplicationInput, ListEndpointsByPlatformApplicationResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface ListEndpointsByPlatformApplicationCommandInput extends ListEndpointsByPlatformApplicationInput {
    }
    export interface ListEndpointsByPlatformApplicationCommandOutput extends ListEndpointsByPlatformApplicationResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the endpoints and endpoint attributes for devices in a supported push
        *             notification service, such as GCM (Firebase Cloud Messaging) and APNS. The results for
        *                 <code>ListEndpointsByPlatformApplication</code> are paginated and return a limited
        *             list of endpoints, up to 100. If additional records are available after the first page
        *             results, then a NextToken string will be returned. To receive the next page, you call
        *                 <code>ListEndpointsByPlatformApplication</code> again using the NextToken string
        *             received from the previous call. When there are no more records to return, NextToken
        *             will be null. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push
        *             Notifications</a>. </p>
        *         <p>This action is throttled at 30 transactions per second (TPS).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, ListEndpointsByPlatformApplicationCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, ListEndpointsByPlatformApplicationCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new ListEndpointsByPlatformApplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEndpointsByPlatformApplicationCommandInput} for command's `input` shape.
        * @see {@link ListEndpointsByPlatformApplicationCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class ListEndpointsByPlatformApplicationCommand extends $Command<ListEndpointsByPlatformApplicationCommandInput, ListEndpointsByPlatformApplicationCommandOutput, SNSClientResolvedConfig> {
            readonly input: ListEndpointsByPlatformApplicationCommandInput;
            constructor(input: ListEndpointsByPlatformApplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEndpointsByPlatformApplicationCommandInput, ListEndpointsByPlatformApplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListOriginationNumbersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListOriginationNumbersRequest, ListOriginationNumbersResult } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface ListOriginationNumbersCommandInput extends ListOriginationNumbersRequest {
    }
    export interface ListOriginationNumbersCommandOutput extends ListOriginationNumbersResult, __MetadataBearer {
    }
    /**
        * <p>Lists the calling Amazon Web Services account's dedicated origination numbers and their metadata. For
        *             more information about origination numbers, see <a href="https://docs.aws.amazon.com/sns/latest/dg/channels-sms-originating-identities-origination-numbers.html">Origination numbers</a> in the <i>Amazon SNS Developer
        *             Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, ListOriginationNumbersCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, ListOriginationNumbersCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new ListOriginationNumbersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListOriginationNumbersCommandInput} for command's `input` shape.
        * @see {@link ListOriginationNumbersCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class ListOriginationNumbersCommand extends $Command<ListOriginationNumbersCommandInput, ListOriginationNumbersCommandOutput, SNSClientResolvedConfig> {
            readonly input: ListOriginationNumbersCommandInput;
            constructor(input: ListOriginationNumbersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListOriginationNumbersCommandInput, ListOriginationNumbersCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListPhoneNumbersOptedOutCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListPhoneNumbersOptedOutInput, ListPhoneNumbersOptedOutResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface ListPhoneNumbersOptedOutCommandInput extends ListPhoneNumbersOptedOutInput {
    }
    export interface ListPhoneNumbersOptedOutCommandOutput extends ListPhoneNumbersOptedOutResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of phone numbers that are opted out, meaning you cannot send SMS
        *             messages to them.</p>
        *         <p>The results for <code>ListPhoneNumbersOptedOut</code> are paginated, and each page
        *             returns up to 100 phone numbers. If additional phone numbers are available after the
        *             first page of results, then a <code>NextToken</code> string will be returned. To receive
        *             the next page, you call <code>ListPhoneNumbersOptedOut</code> again using the
        *                 <code>NextToken</code> string received from the previous call. When there are no
        *             more records to return, <code>NextToken</code> will be null.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, ListPhoneNumbersOptedOutCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, ListPhoneNumbersOptedOutCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new ListPhoneNumbersOptedOutCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPhoneNumbersOptedOutCommandInput} for command's `input` shape.
        * @see {@link ListPhoneNumbersOptedOutCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class ListPhoneNumbersOptedOutCommand extends $Command<ListPhoneNumbersOptedOutCommandInput, ListPhoneNumbersOptedOutCommandOutput, SNSClientResolvedConfig> {
            readonly input: ListPhoneNumbersOptedOutCommandInput;
            constructor(input: ListPhoneNumbersOptedOutCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPhoneNumbersOptedOutCommandInput, ListPhoneNumbersOptedOutCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListPlatformApplicationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListPlatformApplicationsInput, ListPlatformApplicationsResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface ListPlatformApplicationsCommandInput extends ListPlatformApplicationsInput {
    }
    export interface ListPlatformApplicationsCommandOutput extends ListPlatformApplicationsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the platform application objects for the supported push notification services,
        *             such as APNS and GCM (Firebase Cloud Messaging). The results for
        *                 <code>ListPlatformApplications</code> are paginated and return a limited list of
        *             applications, up to 100. If additional records are available after the first page
        *             results, then a NextToken string will be returned. To receive the next page, you call
        *                 <code>ListPlatformApplications</code> using the NextToken string received from the
        *             previous call. When there are no more records to return, <code>NextToken</code> will be
        *             null. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push
        *             Notifications</a>. </p>
        *         <p>This action is throttled at 15 transactions per second (TPS).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, ListPlatformApplicationsCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, ListPlatformApplicationsCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new ListPlatformApplicationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPlatformApplicationsCommandInput} for command's `input` shape.
        * @see {@link ListPlatformApplicationsCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class ListPlatformApplicationsCommand extends $Command<ListPlatformApplicationsCommandInput, ListPlatformApplicationsCommandOutput, SNSClientResolvedConfig> {
            readonly input: ListPlatformApplicationsCommandInput;
            constructor(input: ListPlatformApplicationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPlatformApplicationsCommandInput, ListPlatformApplicationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListSMSSandboxPhoneNumbersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListSMSSandboxPhoneNumbersInput, ListSMSSandboxPhoneNumbersResult } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface ListSMSSandboxPhoneNumbersCommandInput extends ListSMSSandboxPhoneNumbersInput {
    }
    export interface ListSMSSandboxPhoneNumbersCommandOutput extends ListSMSSandboxPhoneNumbersResult, __MetadataBearer {
    }
    /**
        * <p>Lists the calling Amazon Web Services account's current verified and pending destination phone numbers
        *             in the SMS sandbox.</p>
        *         <p>When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the
        *                 <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for
        *                 you to try Amazon SNS features without risking your reputation as an SMS sender. While your
        *                 Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send
        *                 SMS messages only to verified destination phone numbers. For more information, including how to
        *                 move out of the sandbox to send messages without restrictions,
        *                 see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in
        *                 the <i>Amazon SNS Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, ListSMSSandboxPhoneNumbersCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, ListSMSSandboxPhoneNumbersCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new ListSMSSandboxPhoneNumbersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSMSSandboxPhoneNumbersCommandInput} for command's `input` shape.
        * @see {@link ListSMSSandboxPhoneNumbersCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class ListSMSSandboxPhoneNumbersCommand extends $Command<ListSMSSandboxPhoneNumbersCommandInput, ListSMSSandboxPhoneNumbersCommandOutput, SNSClientResolvedConfig> {
            readonly input: ListSMSSandboxPhoneNumbersCommandInput;
            constructor(input: ListSMSSandboxPhoneNumbersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSMSSandboxPhoneNumbersCommandInput, ListSMSSandboxPhoneNumbersCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListSubscriptionsByTopicCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListSubscriptionsByTopicInput, ListSubscriptionsByTopicResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface ListSubscriptionsByTopicCommandInput extends ListSubscriptionsByTopicInput {
    }
    export interface ListSubscriptionsByTopicCommandOutput extends ListSubscriptionsByTopicResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the subscriptions to a specific topic. Each call returns a limited
        *             list of subscriptions, up to 100. If there are more subscriptions, a
        *                 <code>NextToken</code> is also returned. Use the <code>NextToken</code> parameter in
        *             a new <code>ListSubscriptionsByTopic</code> call to get further results.</p>
        *         <p>This action is throttled at 30 transactions per second (TPS).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, ListSubscriptionsByTopicCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, ListSubscriptionsByTopicCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new ListSubscriptionsByTopicCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSubscriptionsByTopicCommandInput} for command's `input` shape.
        * @see {@link ListSubscriptionsByTopicCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class ListSubscriptionsByTopicCommand extends $Command<ListSubscriptionsByTopicCommandInput, ListSubscriptionsByTopicCommandOutput, SNSClientResolvedConfig> {
            readonly input: ListSubscriptionsByTopicCommandInput;
            constructor(input: ListSubscriptionsByTopicCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSubscriptionsByTopicCommandInput, ListSubscriptionsByTopicCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListSubscriptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListSubscriptionsInput, ListSubscriptionsResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface ListSubscriptionsCommandInput extends ListSubscriptionsInput {
    }
    export interface ListSubscriptionsCommandOutput extends ListSubscriptionsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the requester's subscriptions. Each call returns a limited list of
        *             subscriptions, up to 100. If there are more subscriptions, a <code>NextToken</code> is
        *             also returned. Use the <code>NextToken</code> parameter in a new
        *                 <code>ListSubscriptions</code> call to get further results.</p>
        *         <p>This action is throttled at 30 transactions per second (TPS).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, ListSubscriptionsCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, ListSubscriptionsCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new ListSubscriptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSubscriptionsCommandInput} for command's `input` shape.
        * @see {@link ListSubscriptionsCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class ListSubscriptionsCommand extends $Command<ListSubscriptionsCommandInput, ListSubscriptionsCommandOutput, SNSClientResolvedConfig> {
            readonly input: ListSubscriptionsCommandInput;
            constructor(input: ListSubscriptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSubscriptionsCommandInput, ListSubscriptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>List all tags added to the specified Amazon SNS topic. For an overview, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html">Amazon SNS Tags</a> in the
        *                 <i>Amazon Simple Notification Service Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, ListTagsForResourceCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, ListTagsForResourceCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, SNSClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListTopicsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTopicsInput, ListTopicsResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface ListTopicsCommandInput extends ListTopicsInput {
    }
    export interface ListTopicsCommandOutput extends ListTopicsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the requester's topics. Each call returns a limited list of topics,
        *             up to 100. If there are more topics, a <code>NextToken</code> is also returned. Use the
        *                 <code>NextToken</code> parameter in a new <code>ListTopics</code> call to get
        *             further results.</p>
        *         <p>This action is throttled at 30 transactions per second (TPS).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, ListTopicsCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, ListTopicsCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new ListTopicsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTopicsCommandInput} for command's `input` shape.
        * @see {@link ListTopicsCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class ListTopicsCommand extends $Command<ListTopicsCommandInput, ListTopicsCommandOutput, SNSClientResolvedConfig> {
            readonly input: ListTopicsCommandInput;
            constructor(input: ListTopicsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTopicsCommandInput, ListTopicsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/OptInPhoneNumberCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { OptInPhoneNumberInput, OptInPhoneNumberResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface OptInPhoneNumberCommandInput extends OptInPhoneNumberInput {
    }
    export interface OptInPhoneNumberCommandOutput extends OptInPhoneNumberResponse, __MetadataBearer {
    }
    /**
        * <p>Use this request to opt in a phone number that is opted out, which enables you to
        *             resume sending SMS messages to the number.</p>
        *         <p>You can opt in a phone number only once every 30 days.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, OptInPhoneNumberCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, OptInPhoneNumberCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new OptInPhoneNumberCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link OptInPhoneNumberCommandInput} for command's `input` shape.
        * @see {@link OptInPhoneNumberCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class OptInPhoneNumberCommand extends $Command<OptInPhoneNumberCommandInput, OptInPhoneNumberCommandOutput, SNSClientResolvedConfig> {
            readonly input: OptInPhoneNumberCommandInput;
            constructor(input: OptInPhoneNumberCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<OptInPhoneNumberCommandInput, OptInPhoneNumberCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/PublishBatchCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PublishBatchInput, PublishBatchResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface PublishBatchCommandInput extends PublishBatchInput {
    }
    export interface PublishBatchCommandOutput extends PublishBatchResponse, __MetadataBearer {
    }
    /**
        * <p>Publishes up to ten messages to the specified topic. This is a batch version of <code>Publish</code>. For FIFO topics, multiple messages within a single batch are published in the order they are sent, and messages are deduplicated within the batch and across batches for 5 minutes.</p>
        *         <p>The result of publishing each message is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of <code>200</code>.</p>
        *         <p>The maximum allowed individual message size and the maximum total payload size (the sum of the individual lengths of all of the batched messages) are both 256 KB (262,144 bytes). </p>
        *             <p>Some actions take lists of parameters. These lists are specified using the <code>param.n</code> notation. Values of <code>n</code> are integers starting from 1. For example, a parameter list with two elements looks like this: </p>
        *             <p>&AttributeName.1=first</p>
        *             <p>&AttributeName.2=second</p>
        *         <p>If you send a batch message to a topic, Amazon SNS publishes the batch message to each endpoint that is
        *             subscribed to the topic. The format of the batch message depends on the notification protocol
        *             for each subscribed endpoint.</p>
        *         <p>When a <code>messageId</code> is returned, the batch message is saved and Amazon SNS immediately delivers the message to subscribers.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, PublishBatchCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, PublishBatchCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new PublishBatchCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PublishBatchCommandInput} for command's `input` shape.
        * @see {@link PublishBatchCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class PublishBatchCommand extends $Command<PublishBatchCommandInput, PublishBatchCommandOutput, SNSClientResolvedConfig> {
            readonly input: PublishBatchCommandInput;
            constructor(input: PublishBatchCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PublishBatchCommandInput, PublishBatchCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/PublishCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PublishInput, PublishResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface PublishCommandInput extends PublishInput {
    }
    export interface PublishCommandOutput extends PublishResponse, __MetadataBearer {
    }
    /**
        * <p>Sends a message to an Amazon SNS topic, a text message (SMS message) directly to a phone
        *             number, or a message to a mobile platform endpoint (when you specify the
        *                 <code>TargetArn</code>).</p>
        *         <p>If you send a message to a topic, Amazon SNS delivers the message to each endpoint that is
        *             subscribed to the topic. The format of the message depends on the notification protocol
        *             for each subscribed endpoint.</p>
        *         <p>When a <code>messageId</code> is returned, the message is saved and Amazon SNS
        *             immediately delivers it to subscribers.</p>
        *         <p>To use the <code>Publish</code> action for publishing a message to a mobile endpoint,
        *             such as an app on a Kindle device or mobile phone, you must specify the EndpointArn for
        *             the TargetArn parameter. The EndpointArn is returned when making a call with the
        *                 <code>CreatePlatformEndpoint</code> action. </p>
        *         <p>For more information about formatting messages, see <a href="https://docs.aws.amazon.com/sns/latest/dg/mobile-push-send-custommessage.html">Send Custom
        *                 Platform-Specific Payloads in Messages to Mobile Devices</a>. </p>
        *         <important>
        *             <p>You can publish messages only to topics and endpoints in the same Amazon Web Services Region.</p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, PublishCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, PublishCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new PublishCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PublishCommandInput} for command's `input` shape.
        * @see {@link PublishCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class PublishCommand extends $Command<PublishCommandInput, PublishCommandOutput, SNSClientResolvedConfig> {
            readonly input: PublishCommandInput;
            constructor(input: PublishCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PublishCommandInput, PublishCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/RemovePermissionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RemovePermissionInput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface RemovePermissionCommandInput extends RemovePermissionInput {
    }
    export interface RemovePermissionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes a statement from a topic's access control policy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, RemovePermissionCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, RemovePermissionCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new RemovePermissionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemovePermissionCommandInput} for command's `input` shape.
        * @see {@link RemovePermissionCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class RemovePermissionCommand extends $Command<RemovePermissionCommandInput, RemovePermissionCommandOutput, SNSClientResolvedConfig> {
            readonly input: RemovePermissionCommandInput;
            constructor(input: RemovePermissionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemovePermissionCommandInput, RemovePermissionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/SetEndpointAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SetEndpointAttributesInput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface SetEndpointAttributesCommandInput extends SetEndpointAttributesInput {
    }
    export interface SetEndpointAttributesCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Sets the attributes for an endpoint for a device on one of the supported push
        *             notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more
        *             information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, SetEndpointAttributesCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, SetEndpointAttributesCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new SetEndpointAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetEndpointAttributesCommandInput} for command's `input` shape.
        * @see {@link SetEndpointAttributesCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class SetEndpointAttributesCommand extends $Command<SetEndpointAttributesCommandInput, SetEndpointAttributesCommandOutput, SNSClientResolvedConfig> {
            readonly input: SetEndpointAttributesCommandInput;
            constructor(input: SetEndpointAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetEndpointAttributesCommandInput, SetEndpointAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/SetPlatformApplicationAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SetPlatformApplicationAttributesInput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface SetPlatformApplicationAttributesCommandInput extends SetPlatformApplicationAttributesInput {
    }
    export interface SetPlatformApplicationAttributesCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Sets the attributes of the platform application object for the supported push
        *             notification services, such as APNS and GCM (Firebase Cloud Messaging). For more
        *             information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>. For information on configuring
        *             attributes for message delivery status, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-msg-status.html">Using Amazon SNS Application Attributes for
        *                 Message Delivery Status</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, SetPlatformApplicationAttributesCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, SetPlatformApplicationAttributesCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new SetPlatformApplicationAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetPlatformApplicationAttributesCommandInput} for command's `input` shape.
        * @see {@link SetPlatformApplicationAttributesCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class SetPlatformApplicationAttributesCommand extends $Command<SetPlatformApplicationAttributesCommandInput, SetPlatformApplicationAttributesCommandOutput, SNSClientResolvedConfig> {
            readonly input: SetPlatformApplicationAttributesCommandInput;
            constructor(input: SetPlatformApplicationAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetPlatformApplicationAttributesCommandInput, SetPlatformApplicationAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/SetSMSAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SetSMSAttributesInput, SetSMSAttributesResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface SetSMSAttributesCommandInput extends SetSMSAttributesInput {
    }
    export interface SetSMSAttributesCommandOutput extends SetSMSAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Use this request to set the default settings for sending SMS messages and receiving
        *             daily SMS usage reports.</p>
        *         <p>You can override some of these settings for a single message when you use the
        *                 <code>Publish</code> action with the <code>MessageAttributes.entry.N</code>
        *             parameter. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html">Publishing to a mobile phone</a>
        *             in the <i>Amazon SNS Developer Guide</i>.</p>
        *         <note>
        *             <p>To use this operation, you must grant the Amazon SNS service principal
        *                     (<code>sns.amazonaws.com</code>) permission to perform the
        *                     <code>s3:ListBucket</code> action. </p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, SetSMSAttributesCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, SetSMSAttributesCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new SetSMSAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetSMSAttributesCommandInput} for command's `input` shape.
        * @see {@link SetSMSAttributesCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class SetSMSAttributesCommand extends $Command<SetSMSAttributesCommandInput, SetSMSAttributesCommandOutput, SNSClientResolvedConfig> {
            readonly input: SetSMSAttributesCommandInput;
            constructor(input: SetSMSAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetSMSAttributesCommandInput, SetSMSAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/SetSubscriptionAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SetSubscriptionAttributesInput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface SetSubscriptionAttributesCommandInput extends SetSubscriptionAttributesInput {
    }
    export interface SetSubscriptionAttributesCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Allows a subscription owner to set an attribute of the subscription to a new
        *             value.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, SetSubscriptionAttributesCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, SetSubscriptionAttributesCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new SetSubscriptionAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetSubscriptionAttributesCommandInput} for command's `input` shape.
        * @see {@link SetSubscriptionAttributesCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class SetSubscriptionAttributesCommand extends $Command<SetSubscriptionAttributesCommandInput, SetSubscriptionAttributesCommandOutput, SNSClientResolvedConfig> {
            readonly input: SetSubscriptionAttributesCommandInput;
            constructor(input: SetSubscriptionAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetSubscriptionAttributesCommandInput, SetSubscriptionAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/SetTopicAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SetTopicAttributesInput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface SetTopicAttributesCommandInput extends SetTopicAttributesInput {
    }
    export interface SetTopicAttributesCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Allows a topic owner to set an attribute of the topic to a new value.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, SetTopicAttributesCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, SetTopicAttributesCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new SetTopicAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetTopicAttributesCommandInput} for command's `input` shape.
        * @see {@link SetTopicAttributesCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class SetTopicAttributesCommand extends $Command<SetTopicAttributesCommandInput, SetTopicAttributesCommandOutput, SNSClientResolvedConfig> {
            readonly input: SetTopicAttributesCommandInput;
            constructor(input: SetTopicAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetTopicAttributesCommandInput, SetTopicAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/SubscribeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SubscribeInput, SubscribeResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface SubscribeCommandInput extends SubscribeInput {
    }
    export interface SubscribeCommandOutput extends SubscribeResponse, __MetadataBearer {
    }
    /**
        * <p>Subscribes an endpoint to an Amazon SNS topic. If the endpoint type is HTTP/S or email, or
        *             if the endpoint and the topic are not in the same Amazon Web Services account, the endpoint owner must
        *             run the <code>ConfirmSubscription</code> action to confirm the subscription.</p>
        *         <p>You call the <code>ConfirmSubscription</code> action with the token from the
        *             subscription response. Confirmation tokens are valid for three days.</p>
        *         <p>This action is throttled at 100 transactions per second (TPS).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, SubscribeCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, SubscribeCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new SubscribeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SubscribeCommandInput} for command's `input` shape.
        * @see {@link SubscribeCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class SubscribeCommand extends $Command<SubscribeCommandInput, SubscribeCommandOutput, SNSClientResolvedConfig> {
            readonly input: SubscribeCommandInput;
            constructor(input: SubscribeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SubscribeCommandInput, SubscribeCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Add tags to the specified Amazon SNS topic. For an overview, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html">Amazon SNS Tags</a> in the
        *                 <i>Amazon SNS Developer Guide</i>.</p>
        *         <p>When you use topic tags, keep the following guidelines in mind:</p>
        *         <ul>
        *             <li>
        *                 <p>Adding more than 50 tags to a topic isn't recommended.</p>
        *             </li>
        *             <li>
        *                 <p>Tags don't have any semantic meaning. Amazon SNS interprets tags as character
        *                     strings.</p>
        *             </li>
        *             <li>
        *                 <p>Tags are case-sensitive.</p>
        *             </li>
        *             <li>
        *                 <p>A new tag with a key identical to that of an existing tag overwrites the
        *                     existing tag.</p>
        *             </li>
        *             <li>
        *                 <p>Tagging actions are limited to 10 TPS per Amazon Web Services account, per Amazon Web Services Region. If your
        *                     application requires a higher throughput, file a <a href="https://console.aws.amazon.com/support/home#/case/create?issueType=technical">technical support request</a>.</p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, TagResourceCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, TagResourceCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, SNSClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/UnsubscribeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UnsubscribeInput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface UnsubscribeCommandInput extends UnsubscribeInput {
    }
    export interface UnsubscribeCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a subscription. If the subscription requires authentication for deletion, only
        *             the owner of the subscription or the topic's owner can unsubscribe, and an Amazon Web Services signature
        *             is required. If the <code>Unsubscribe</code> call does not require authentication and
        *             the requester is not the subscription owner, a final cancellation message is delivered
        *             to the endpoint, so that the endpoint owner can easily resubscribe to the topic if the
        *                 <code>Unsubscribe</code> request was unintended.</p>
        *         <p>This action is throttled at 100 transactions per second (TPS).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, UnsubscribeCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, UnsubscribeCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new UnsubscribeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UnsubscribeCommandInput} for command's `input` shape.
        * @see {@link UnsubscribeCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class UnsubscribeCommand extends $Command<UnsubscribeCommandInput, UnsubscribeCommandOutput, SNSClientResolvedConfig> {
            readonly input: UnsubscribeCommandInput;
            constructor(input: UnsubscribeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UnsubscribeCommandInput, UnsubscribeCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Remove tags from the specified Amazon SNS topic. For an overview, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html">Amazon SNS Tags</a> in the
        *                 <i>Amazon SNS Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, UntagResourceCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, UntagResourceCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, SNSClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/VerifySMSSandboxPhoneNumberCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { VerifySMSSandboxPhoneNumberInput, VerifySMSSandboxPhoneNumberResult } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient";
    export interface VerifySMSSandboxPhoneNumberCommandInput extends VerifySMSSandboxPhoneNumberInput {
    }
    export interface VerifySMSSandboxPhoneNumberCommandOutput extends VerifySMSSandboxPhoneNumberResult, __MetadataBearer {
    }
    /**
        * <p>Verifies a destination phone number with a one-time password (OTP) for the calling Amazon Web Services account.</p>
        *         <p>When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the
        *                 <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for
        *                 you to try Amazon SNS features without risking your reputation as an SMS sender. While your
        *                 Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send
        *                 SMS messages only to verified destination phone numbers. For more information, including how to
        *                 move out of the sandbox to send messages without restrictions,
        *                 see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in
        *                 the <i>Amazon SNS Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SNSClient, VerifySMSSandboxPhoneNumberCommand } from "@aws-sdk/client-sns"; // ES Modules import
        * // const { SNSClient, VerifySMSSandboxPhoneNumberCommand } = require("@aws-sdk/client-sns"); // CommonJS import
        * const client = new SNSClient(config);
        * const command = new VerifySMSSandboxPhoneNumberCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link VerifySMSSandboxPhoneNumberCommandInput} for command's `input` shape.
        * @see {@link VerifySMSSandboxPhoneNumberCommandOutput} for command's `response` shape.
        * @see {@link SNSClientResolvedConfig | config} for SNSClient's `config` shape.
        *
        */
    export class VerifySMSSandboxPhoneNumberCommand extends $Command<VerifySMSSandboxPhoneNumberCommandInput, VerifySMSSandboxPhoneNumberCommandOutput, SNSClientResolvedConfig> {
            readonly input: VerifySMSSandboxPhoneNumberCommandInput;
            constructor(input: VerifySMSSandboxPhoneNumberCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SNSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<VerifySMSSandboxPhoneNumberCommandInput, VerifySMSSandboxPhoneNumberCommandOutput>;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/SNSClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AddPermissionCommandInput, AddPermissionCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/AddPermissionCommand";
    import { CheckIfPhoneNumberIsOptedOutCommandInput, CheckIfPhoneNumberIsOptedOutCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/CheckIfPhoneNumberIsOptedOutCommand";
    import { ConfirmSubscriptionCommandInput, ConfirmSubscriptionCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ConfirmSubscriptionCommand";
    import { CreatePlatformApplicationCommandInput, CreatePlatformApplicationCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/CreatePlatformApplicationCommand";
    import { CreatePlatformEndpointCommandInput, CreatePlatformEndpointCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/CreatePlatformEndpointCommand";
    import { CreateSMSSandboxPhoneNumberCommandInput, CreateSMSSandboxPhoneNumberCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/CreateSMSSandboxPhoneNumberCommand";
    import { CreateTopicCommandInput, CreateTopicCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/CreateTopicCommand";
    import { DeleteEndpointCommandInput, DeleteEndpointCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/DeleteEndpointCommand";
    import { DeletePlatformApplicationCommandInput, DeletePlatformApplicationCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/DeletePlatformApplicationCommand";
    import { DeleteSMSSandboxPhoneNumberCommandInput, DeleteSMSSandboxPhoneNumberCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/DeleteSMSSandboxPhoneNumberCommand";
    import { DeleteTopicCommandInput, DeleteTopicCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/DeleteTopicCommand";
    import { GetEndpointAttributesCommandInput, GetEndpointAttributesCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/GetEndpointAttributesCommand";
    import { GetPlatformApplicationAttributesCommandInput, GetPlatformApplicationAttributesCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/GetPlatformApplicationAttributesCommand";
    import { GetSMSAttributesCommandInput, GetSMSAttributesCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/GetSMSAttributesCommand";
    import { GetSMSSandboxAccountStatusCommandInput, GetSMSSandboxAccountStatusCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/GetSMSSandboxAccountStatusCommand";
    import { GetSubscriptionAttributesCommandInput, GetSubscriptionAttributesCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/GetSubscriptionAttributesCommand";
    import { GetTopicAttributesCommandInput, GetTopicAttributesCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/GetTopicAttributesCommand";
    import { ListEndpointsByPlatformApplicationCommandInput, ListEndpointsByPlatformApplicationCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListEndpointsByPlatformApplicationCommand";
    import { ListOriginationNumbersCommandInput, ListOriginationNumbersCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListOriginationNumbersCommand";
    import { ListPhoneNumbersOptedOutCommandInput, ListPhoneNumbersOptedOutCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListPhoneNumbersOptedOutCommand";
    import { ListPlatformApplicationsCommandInput, ListPlatformApplicationsCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListPlatformApplicationsCommand";
    import { ListSMSSandboxPhoneNumbersCommandInput, ListSMSSandboxPhoneNumbersCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListSMSSandboxPhoneNumbersCommand";
    import { ListSubscriptionsByTopicCommandInput, ListSubscriptionsByTopicCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListSubscriptionsByTopicCommand";
    import { ListSubscriptionsCommandInput, ListSubscriptionsCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListSubscriptionsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListTagsForResourceCommand";
    import { ListTopicsCommandInput, ListTopicsCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/ListTopicsCommand";
    import { OptInPhoneNumberCommandInput, OptInPhoneNumberCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/OptInPhoneNumberCommand";
    import { PublishBatchCommandInput, PublishBatchCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/PublishBatchCommand";
    import { PublishCommandInput, PublishCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/PublishCommand";
    import { RemovePermissionCommandInput, RemovePermissionCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/RemovePermissionCommand";
    import { SetEndpointAttributesCommandInput, SetEndpointAttributesCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/SetEndpointAttributesCommand";
    import { SetPlatformApplicationAttributesCommandInput, SetPlatformApplicationAttributesCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/SetPlatformApplicationAttributesCommand";
    import { SetSMSAttributesCommandInput, SetSMSAttributesCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/SetSMSAttributesCommand";
    import { SetSubscriptionAttributesCommandInput, SetSubscriptionAttributesCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/SetSubscriptionAttributesCommand";
    import { SetTopicAttributesCommandInput, SetTopicAttributesCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/SetTopicAttributesCommand";
    import { SubscribeCommandInput, SubscribeCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/SubscribeCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/TagResourceCommand";
    import { UnsubscribeCommandInput, UnsubscribeCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/UnsubscribeCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/UntagResourceCommand";
    import { VerifySMSSandboxPhoneNumberCommandInput, VerifySMSSandboxPhoneNumberCommandOutput } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/commands/VerifySMSSandboxPhoneNumberCommand";
    export type ServiceInputTypes = AddPermissionCommandInput | CheckIfPhoneNumberIsOptedOutCommandInput | ConfirmSubscriptionCommandInput | CreatePlatformApplicationCommandInput | CreatePlatformEndpointCommandInput | CreateSMSSandboxPhoneNumberCommandInput | CreateTopicCommandInput | DeleteEndpointCommandInput | DeletePlatformApplicationCommandInput | DeleteSMSSandboxPhoneNumberCommandInput | DeleteTopicCommandInput | GetEndpointAttributesCommandInput | GetPlatformApplicationAttributesCommandInput | GetSMSAttributesCommandInput | GetSMSSandboxAccountStatusCommandInput | GetSubscriptionAttributesCommandInput | GetTopicAttributesCommandInput | ListEndpointsByPlatformApplicationCommandInput | ListOriginationNumbersCommandInput | ListPhoneNumbersOptedOutCommandInput | ListPlatformApplicationsCommandInput | ListSMSSandboxPhoneNumbersCommandInput | ListSubscriptionsByTopicCommandInput | ListSubscriptionsCommandInput | ListTagsForResourceCommandInput | ListTopicsCommandInput | OptInPhoneNumberCommandInput | PublishBatchCommandInput | PublishCommandInput | RemovePermissionCommandInput | SetEndpointAttributesCommandInput | SetPlatformApplicationAttributesCommandInput | SetSMSAttributesCommandInput | SetSubscriptionAttributesCommandInput | SetTopicAttributesCommandInput | SubscribeCommandInput | TagResourceCommandInput | UnsubscribeCommandInput | UntagResourceCommandInput | VerifySMSSandboxPhoneNumberCommandInput;
    export type ServiceOutputTypes = AddPermissionCommandOutput | CheckIfPhoneNumberIsOptedOutCommandOutput | ConfirmSubscriptionCommandOutput | CreatePlatformApplicationCommandOutput | CreatePlatformEndpointCommandOutput | CreateSMSSandboxPhoneNumberCommandOutput | CreateTopicCommandOutput | DeleteEndpointCommandOutput | DeletePlatformApplicationCommandOutput | DeleteSMSSandboxPhoneNumberCommandOutput | DeleteTopicCommandOutput | GetEndpointAttributesCommandOutput | GetPlatformApplicationAttributesCommandOutput | GetSMSAttributesCommandOutput | GetSMSSandboxAccountStatusCommandOutput | GetSubscriptionAttributesCommandOutput | GetTopicAttributesCommandOutput | ListEndpointsByPlatformApplicationCommandOutput | ListOriginationNumbersCommandOutput | ListPhoneNumbersOptedOutCommandOutput | ListPlatformApplicationsCommandOutput | ListSMSSandboxPhoneNumbersCommandOutput | ListSubscriptionsByTopicCommandOutput | ListSubscriptionsCommandOutput | ListTagsForResourceCommandOutput | ListTopicsCommandOutput | OptInPhoneNumberCommandOutput | PublishBatchCommandOutput | PublishCommandOutput | RemovePermissionCommandOutput | SetEndpointAttributesCommandOutput | SetPlatformApplicationAttributesCommandOutput | SetSMSAttributesCommandOutput | SetSubscriptionAttributesCommandOutput | SetTopicAttributesCommandOutput | SubscribeCommandOutput | TagResourceCommandOutput | UnsubscribeCommandOutput | UntagResourceCommandOutput | VerifySMSSandboxPhoneNumberCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type SNSClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of SNSClient class constructor that set the region, credentials and other options.
        */
    export interface SNSClientConfig extends SNSClientConfigType {
    }
    type SNSClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of SNSClient class. This is resolved and normalized from the {@link SNSClientConfig | constructor configuration interface}.
        */
    export interface SNSClientResolvedConfig extends SNSClientResolvedConfigType {
    }
    /**
        * <fullname>Amazon Simple Notification Service</fullname>
        *         <p>Amazon Simple Notification Service (Amazon SNS) is a web service that enables you to build
        *             distributed web-enabled applications. Applications can use Amazon SNS to easily push
        *             real-time notification messages to interested subscribers over multiple delivery
        *             protocols. For more information about this product see the <a href="http://aws.amazon.com/sns/">Amazon SNS product page</a>. For detailed information about Amazon SNS features
        *             and their associated API calls, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/">Amazon SNS Developer Guide</a>. </p>
        *         <p>For information on the permissions you need to use this API, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-authentication-and-access-control.html">Identity and access management in Amazon SNS</a> in the <i>Amazon SNS Developer
        *                 Guide.</i>
        *          </p>
        *         <p>We also provide SDKs that enable you to access Amazon SNS from your preferred programming
        *             language. The SDKs contain functionality that automatically takes care of tasks such as:
        *             cryptographically signing your service requests, retrying requests, and handling error
        *             responses. For a list of available SDKs, go to <a href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a>. </p>
        */
    export class SNSClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, SNSClientResolvedConfig> {
            /**
                * The resolved configuration of SNSClient class. This is resolved and normalized from the {@link SNSClientConfig | constructor configuration interface}.
                */
            readonly config: SNSClientResolvedConfig;
            constructor(configuration: SNSClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { SNSServiceException as __BaseException } from "@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/SNSServiceException";
    export interface AddPermissionInput {
            /**
                * <p>The ARN of the topic whose access control policy you wish to modify.</p>
                */
            TopicArn: string | undefined;
            /**
                * <p>A unique identifier for the new policy statement.</p>
                */
            Label: string | undefined;
            /**
                * <p>The Amazon Web Services account IDs of the users (principals) who will be given access to the
                *             specified actions. The users must have Amazon Web Services account, but do not need to be signed up for
                *             this service.</p>
                */
            AWSAccountId: string[] | undefined;
            /**
                * <p>The action you want to allow for the specified principal(s).</p>
                *         <p>Valid values: Any Amazon SNS action name, for example <code>Publish</code>.</p>
                */
            ActionName: string[] | undefined;
    }
    export namespace AddPermissionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddPermissionInput) => any;
    }
    /**
        * <p>Indicates that the user has been denied access to the requested resource.</p>
        */
    export class AuthorizationErrorException extends __BaseException {
            readonly name: "AuthorizationErrorException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AuthorizationErrorException, __BaseException>);
    }
    /**
        * <p>Indicates an internal service error.</p>
        */
    export class InternalErrorException extends __BaseException {
            readonly name: "InternalErrorException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalErrorException, __BaseException>);
    }
    /**
        * <p>Indicates that a request parameter does not comply with the associated
        *             constraints.</p>
        */
    export class InvalidParameterException extends __BaseException {
            readonly name: "InvalidParameterException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidParameterException, __BaseException>);
    }
    /**
        * <p>Indicates that the requested resource does not exist.</p>
        */
    export class NotFoundException extends __BaseException {
            readonly name: "NotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
    }
    /**
        * <p>The input for the <code>CheckIfPhoneNumberIsOptedOut</code> action.</p>
        */
    export interface CheckIfPhoneNumberIsOptedOutInput {
            /**
                * <p>The phone number for which you want to check the opt out status.</p>
                */
            phoneNumber: string | undefined;
    }
    export namespace CheckIfPhoneNumberIsOptedOutInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CheckIfPhoneNumberIsOptedOutInput) => any;
    }
    /**
        * <p>The response from the <code>CheckIfPhoneNumberIsOptedOut</code> action.</p>
        */
    export interface CheckIfPhoneNumberIsOptedOutResponse {
            /**
                * <p>Indicates whether the phone number is opted out:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>true</code> – The phone number is opted out, meaning you cannot publish
                *                     SMS messages to it.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>false</code> – The phone number is opted in, meaning you can publish SMS
                *                     messages to it.</p>
                *             </li>
                *          </ul>
                */
            isOptedOut?: boolean;
    }
    export namespace CheckIfPhoneNumberIsOptedOutResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CheckIfPhoneNumberIsOptedOutResponse) => any;
    }
    /**
        * <p>Indicates that the rate at which requests have been submitted for this action exceeds the limit for your Amazon Web Services account.</p>
        */
    export class ThrottledException extends __BaseException {
            readonly name: "ThrottledException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottledException, __BaseException>);
    }
    /**
        * <p>Input for ConfirmSubscription action.</p>
        */
    export interface ConfirmSubscriptionInput {
            /**
                * <p>The ARN of the topic for which you wish to confirm a subscription.</p>
                */
            TopicArn: string | undefined;
            /**
                * <p>Short-lived token sent to an endpoint during the <code>Subscribe</code> action.</p>
                */
            Token: string | undefined;
            /**
                * <p>Disallows unauthenticated unsubscribes of the subscription. If the value of this
                *             parameter is <code>true</code> and the request has an Amazon Web Services signature, then only the topic
                *             owner and the subscription owner can unsubscribe the endpoint. The unsubscribe action
                *             requires Amazon Web Services authentication. </p>
                */
            AuthenticateOnUnsubscribe?: string;
    }
    export namespace ConfirmSubscriptionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfirmSubscriptionInput) => any;
    }
    /**
        * <p>Response for ConfirmSubscriptions action.</p>
        */
    export interface ConfirmSubscriptionResponse {
            /**
                * <p>The ARN of the created subscription.</p>
                */
            SubscriptionArn?: string;
    }
    export namespace ConfirmSubscriptionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfirmSubscriptionResponse) => any;
    }
    /**
        * <p>Indicates that the number of filter polices in your Amazon Web Services account exceeds the limit. To
        *             add more filter polices, submit an Amazon SNS Limit Increase case in the Amazon Web Services Support
        *             Center.</p>
        */
    export class FilterPolicyLimitExceededException extends __BaseException {
            readonly name: "FilterPolicyLimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<FilterPolicyLimitExceededException, __BaseException>);
    }
    /**
        * <p>Indicates that the customer already owns the maximum allowed number of
        *             subscriptions.</p>
        */
    export class SubscriptionLimitExceededException extends __BaseException {
            readonly name: "SubscriptionLimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SubscriptionLimitExceededException, __BaseException>);
    }
    /**
        * <p>Input for CreatePlatformApplication action.</p>
        */
    export interface CreatePlatformApplicationInput {
            /**
                * <p>Application names must be made up of only uppercase and lowercase ASCII letters,
                *             numbers, underscores, hyphens, and periods, and must be between 1 and 256 characters
                *             long.</p>
                */
            Name: string | undefined;
            /**
                * <p>The following platforms are supported: ADM (Amazon Device Messaging), APNS (Apple Push
                *             Notification Service), APNS_SANDBOX, and GCM (Firebase Cloud Messaging).</p>
                */
            Platform: string | undefined;
            /**
                * <p>For a list of attributes, see <a href="https://docs.aws.amazon.com/sns/latest/api/API_SetPlatformApplicationAttributes.html">SetPlatformApplicationAttributes</a>.</p>
                */
            Attributes: Record<string, string> | undefined;
    }
    export namespace CreatePlatformApplicationInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePlatformApplicationInput) => any;
    }
    /**
        * <p>Response from CreatePlatformApplication action.</p>
        */
    export interface CreatePlatformApplicationResponse {
            /**
                * <p>PlatformApplicationArn is returned.</p>
                */
            PlatformApplicationArn?: string;
    }
    export namespace CreatePlatformApplicationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePlatformApplicationResponse) => any;
    }
    /**
        * <p>Response from CreateEndpoint action.</p>
        */
    export interface CreateEndpointResponse {
            /**
                * <p>EndpointArn returned from CreateEndpoint action.</p>
                */
            EndpointArn?: string;
    }
    export namespace CreateEndpointResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEndpointResponse) => any;
    }
    /**
        * <p>Input for CreatePlatformEndpoint action.</p>
        */
    export interface CreatePlatformEndpointInput {
            /**
                * <p>PlatformApplicationArn returned from CreatePlatformApplication is used to create a an
                *             endpoint.</p>
                */
            PlatformApplicationArn: string | undefined;
            /**
                * <p>Unique identifier created by the notification service for an app on a device. The
                *             specific name for Token will vary, depending on which notification service is being
                *             used. For example, when using APNS as the notification service, you need the device
                *             token. Alternatively, when using GCM (Firebase Cloud Messaging) or ADM, the device token
                *             equivalent is called the registration ID.</p>
                */
            Token: string | undefined;
            /**
                * <p>Arbitrary user data to associate with the endpoint. Amazon SNS does not use this data. The
                *             data must be in UTF-8 format and less than 2KB.</p>
                */
            CustomUserData?: string;
            /**
                * <p>For a list of attributes, see <a href="https://docs.aws.amazon.com/sns/latest/api/API_SetEndpointAttributes.html">SetEndpointAttributes</a>.</p>
                */
            Attributes?: Record<string, string>;
    }
    export namespace CreatePlatformEndpointInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePlatformEndpointInput) => any;
    }
    export enum LanguageCodeString {
            de_DE = "de-DE",
            en_GB = "en-GB",
            en_US = "en-US",
            es_419 = "es-419",
            es_ES = "es-ES",
            fr_CA = "fr-CA",
            fr_FR = "fr-FR",
            it_IT = "it-IT",
            jp_JP = "ja-JP",
            kr_KR = "kr-KR",
            pt_BR = "pt-BR",
            zh_CN = "zh-CN",
            zh_TW = "zh-TW"
    }
    export interface CreateSMSSandboxPhoneNumberInput {
            /**
                * <p>The destination phone number to verify. On verification, Amazon SNS adds this phone number
                *             to the list of verified phone numbers that you can send SMS messages to.</p>
                */
            PhoneNumber: string | undefined;
            /**
                * <p>The language to use for sending the OTP. The default value is
                *             <code>en-US</code>.</p>
                */
            LanguageCode?: LanguageCodeString | string;
    }
    export namespace CreateSMSSandboxPhoneNumberInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSMSSandboxPhoneNumberInput) => any;
    }
    export interface CreateSMSSandboxPhoneNumberResult {
    }
    export namespace CreateSMSSandboxPhoneNumberResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSMSSandboxPhoneNumberResult) => any;
    }
    /**
        * <p>Indicates that the specified phone number opted out of receiving SMS messages from
        *             your Amazon Web Services account. You can't send SMS messages to phone numbers that opt out.</p>
        */
    export class OptedOutException extends __BaseException {
            readonly name: "OptedOutException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OptedOutException, __BaseException>);
    }
    /**
        * <p>Indicates that a request parameter does not comply with the associated
        *             constraints.</p>
        */
    export class UserErrorException extends __BaseException {
            readonly name: "UserErrorException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UserErrorException, __BaseException>);
    }
    /**
        * <p>Can't perform multiple operations on a tag simultaneously. Perform the operations
        *             sequentially.</p>
        */
    export class ConcurrentAccessException extends __BaseException {
            readonly name: "ConcurrentAccessException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConcurrentAccessException, __BaseException>);
    }
    /**
        * <p>The list of tags to be added to the specified topic.</p>
        */
    export interface Tag {
            /**
                * <p>The required key portion of the tag.</p>
                */
            Key: string | undefined;
            /**
                * <p>The optional value portion of the tag.</p>
                */
            Value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    /**
        * <p>Input for CreateTopic action.</p>
        */
    export interface CreateTopicInput {
            /**
                * <p>The name of the topic you want to create.</p>
                *         <p>Constraints: Topic names must be made up of only uppercase and lowercase ASCII
                *             letters, numbers, underscores, and hyphens, and must be between 1 and 256 characters
                *             long.</p>
                *         <p>For a FIFO (first-in-first-out) topic, the name must end with the <code>.fifo</code>
                *             suffix. </p>
                */
            Name: string | undefined;
            /**
                * <p>A map of attributes with their corresponding values.</p>
                *         <p>The following lists the names, descriptions, and values of the special request
                *             parameters that the <code>CreateTopic</code> action uses:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>DeliveryPolicy</code> – The policy that defines how Amazon SNS retries
                *                     failed deliveries to HTTP/S endpoints.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DisplayName</code> – The display name to use for a topic with SMS
                *                     subscriptions.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>FifoTopic</code> – Set to true to create a FIFO topic.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Policy</code> – The policy that defines who can access your
                *                     topic. By default, only the topic owner can publish or subscribe to the
                *                     topic.</p>
                *             </li>
                *          </ul>
                *
                *         <p>The following attribute applies only to <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html">server-side
                *             encryption</a>:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>KmsMasterKeyId</code> – The ID of an Amazon Web Services managed customer master
                *                     key (CMK) for Amazon SNS or a custom CMK. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html#sse-key-terms">Key
                *                         Terms</a>. For more examples, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters">KeyId</a> in the <i>Key Management Service API
                *                         Reference</i>. </p>
                *             </li>
                *          </ul>
                *
                *
                *         <p>The following attributes apply only to <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html">FIFO topics</a>:</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>FifoTopic</code> – When this is set to <code>true</code>, a FIFO
                *                 topic is created.</p>
                *             </li>
                *             <li>
                *                <p>
                *                     <code>ContentBasedDeduplication</code> – Enables content-based deduplication for
                *                     FIFO topics.</p>
                *
                *                 <ul>
                *                   <li>
                *                         <p>By default, <code>ContentBasedDeduplication</code> is set to <code>false</code>.
                *                             If you create a FIFO topic and this attribute is <code>false</code>, you must
                *                             specify a value for the <code>MessageDeduplicationId</code> parameter for the
                *                             <a href="https://docs.aws.amazon.com/sns/latest/api/API_Publish.html">Publish</a> action. </p>
                *                     </li>
                *                   <li>
                *                         <p>When you set <code>ContentBasedDeduplication</code> to <code>true</code>,
                *                             Amazon SNS uses a SHA-256 hash to generate the <code>MessageDeduplicationId</code> using
                *                             the body of the message (but not the attributes of the message).</p>
                *                         <p>(Optional) To override the generated value, you can specify a value
                *                             for the <code>MessageDeduplicationId</code> parameter for the <code>Publish</code>
                *                             action.</p>
                *                      </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            Attributes?: Record<string, string>;
            /**
                * <p>The list of tags to add to a new topic.</p>
                *         <note>
                *             <p>To be able to tag a topic on creation, you must have the
                *                     <code>sns:CreateTopic</code> and <code>sns:TagResource</code>
                *                 permissions.</p>
                *         </note>
                */
            Tags?: Tag[];
    }
    export namespace CreateTopicInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTopicInput) => any;
    }
    /**
        * <p>Response from CreateTopic action.</p>
        */
    export interface CreateTopicResponse {
            /**
                * <p>The Amazon Resource Name (ARN) assigned to the created topic.</p>
                */
            TopicArn?: string;
    }
    export namespace CreateTopicResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTopicResponse) => any;
    }
    /**
        * <p>The credential signature isn't valid. You must use an HTTPS endpoint and sign your
        *             request using Signature Version 4.</p>
        */
    export class InvalidSecurityException extends __BaseException {
            readonly name: "InvalidSecurityException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSecurityException, __BaseException>);
    }
    /**
        * <p>A tag has been added to a resource with the same ARN as a deleted resource. Wait a
        *             short while and then retry the operation.</p>
        */
    export class StaleTagException extends __BaseException {
            readonly name: "StaleTagException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<StaleTagException, __BaseException>);
    }
    /**
        * <p>Can't add more than 50 tags to a topic.</p>
        */
    export class TagLimitExceededException extends __BaseException {
            readonly name: "TagLimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TagLimitExceededException, __BaseException>);
    }
    /**
        * <p>The request doesn't comply with the IAM tag policy. Correct your request and then
        *             retry it.</p>
        */
    export class TagPolicyException extends __BaseException {
            readonly name: "TagPolicyException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TagPolicyException, __BaseException>);
    }
    /**
        * <p>Indicates that the customer already owns the maximum allowed number of topics.</p>
        */
    export class TopicLimitExceededException extends __BaseException {
            readonly name: "TopicLimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TopicLimitExceededException, __BaseException>);
    }
    /**
        * <p>Input for DeleteEndpoint action.</p>
        */
    export interface DeleteEndpointInput {
            /**
                * <p>EndpointArn of endpoint to delete.</p>
                */
            EndpointArn: string | undefined;
    }
    export namespace DeleteEndpointInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEndpointInput) => any;
    }
    /**
        * <p>Input for DeletePlatformApplication action.</p>
        */
    export interface DeletePlatformApplicationInput {
            /**
                * <p>PlatformApplicationArn of platform application object to delete.</p>
                */
            PlatformApplicationArn: string | undefined;
    }
    export namespace DeletePlatformApplicationInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePlatformApplicationInput) => any;
    }
    export interface DeleteSMSSandboxPhoneNumberInput {
            /**
                * <p>The destination phone number to delete.</p>
                */
            PhoneNumber: string | undefined;
    }
    export namespace DeleteSMSSandboxPhoneNumberInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSMSSandboxPhoneNumberInput) => any;
    }
    export interface DeleteSMSSandboxPhoneNumberResult {
    }
    export namespace DeleteSMSSandboxPhoneNumberResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSMSSandboxPhoneNumberResult) => any;
    }
    /**
        * <p>Can’t perform the action on the specified resource. Make sure that the resource
        *             exists.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    export interface DeleteTopicInput {
            /**
                * <p>The ARN of the topic you want to delete.</p>
                */
            TopicArn: string | undefined;
    }
    export namespace DeleteTopicInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTopicInput) => any;
    }
    /**
        * <p>Input for GetEndpointAttributes action.</p>
        */
    export interface GetEndpointAttributesInput {
            /**
                * <p>EndpointArn for GetEndpointAttributes input.</p>
                */
            EndpointArn: string | undefined;
    }
    export namespace GetEndpointAttributesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEndpointAttributesInput) => any;
    }
    /**
        * <p>Response from GetEndpointAttributes of the EndpointArn.</p>
        */
    export interface GetEndpointAttributesResponse {
            /**
                * <p>Attributes include the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>CustomUserData</code> – arbitrary user data to associate with the
                *                     endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and
                *                     less than 2KB.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>Enabled</code> – flag that enables/disables delivery to the
                *                     endpoint. Amazon SNS will set this to false when a notification service indicates to
                *                     Amazon SNS that the endpoint is invalid. Users can set it back to true, typically
                *                     after updating Token.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>Token</code> – device token, also referred to as a registration id,
                *                     for an app and mobile device. This is returned from the notification service
                *                     when an app and mobile device are registered with the notification
                *                     service.</p>
                *                 <note>
                *                     <p>The device token for the iOS platform is returned in lowercase.</p>
                *                 </note>
                *             </li>
                *          </ul>
                */
            Attributes?: Record<string, string>;
    }
    export namespace GetEndpointAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEndpointAttributesResponse) => any;
    }
    /**
        * <p>Input for GetPlatformApplicationAttributes action.</p>
        */
    export interface GetPlatformApplicationAttributesInput {
            /**
                * <p>PlatformApplicationArn for GetPlatformApplicationAttributesInput.</p>
                */
            PlatformApplicationArn: string | undefined;
    }
    export namespace GetPlatformApplicationAttributesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPlatformApplicationAttributesInput) => any;
    }
    /**
        * <p>Response for GetPlatformApplicationAttributes action.</p>
        */
    export interface GetPlatformApplicationAttributesResponse {
            /**
                * <p>Attributes include the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>AppleCertificateExpiryDate</code> – The expiry date of the SSL certificate used to configure certificate-based authentication.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>ApplePlatformTeamID</code> – The Apple developer account ID used to configure token-based authentication.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>ApplePlatformBundleID</code> – The app identifier used to configure token-based authentication.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>EventEndpointCreated</code> – Topic ARN to which EndpointCreated
                *                     event notifications should be sent.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>EventEndpointDeleted</code> – Topic ARN to which EndpointDeleted
                *                     event notifications should be sent.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>EventEndpointUpdated</code> – Topic ARN to which EndpointUpdate
                *                     event notifications should be sent.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>EventDeliveryFailure</code> – Topic ARN to which DeliveryFailure
                *                     event notifications should be sent upon Direct Publish delivery failure
                *                     (permanent) to one of the application's endpoints.</p>
                *             </li>
                *          </ul>
                */
            Attributes?: Record<string, string>;
    }
    export namespace GetPlatformApplicationAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPlatformApplicationAttributesResponse) => any;
    }
    /**
        * <p>The input for the <code>GetSMSAttributes</code> request.</p>
        */
    export interface GetSMSAttributesInput {
            /**
                * <p>A list of the individual attribute names, such as <code>MonthlySpendLimit</code>, for
                *             which you want values.</p>
                *         <p>For all attribute names, see <a href="https://docs.aws.amazon.com/sns/latest/api/API_SetSMSAttributes.html">SetSMSAttributes</a>.</p>
                *         <p>If you don't use this parameter, Amazon SNS returns all SMS attributes.</p>
                */
            attributes?: string[];
    }
    export namespace GetSMSAttributesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSMSAttributesInput) => any;
    }
    /**
        * <p>The response from the <code>GetSMSAttributes</code> request.</p>
        */
    export interface GetSMSAttributesResponse {
            /**
                * <p>The SMS attribute names and their values.</p>
                */
            attributes?: Record<string, string>;
    }
    export namespace GetSMSAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSMSAttributesResponse) => any;
    }
    export interface GetSMSSandboxAccountStatusInput {
    }
    export namespace GetSMSSandboxAccountStatusInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSMSSandboxAccountStatusInput) => any;
    }
    export interface GetSMSSandboxAccountStatusResult {
            /**
                * <p>Indicates whether the calling Amazon Web Services account is in the SMS sandbox.</p>
                */
            IsInSandbox: boolean | undefined;
    }
    export namespace GetSMSSandboxAccountStatusResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSMSSandboxAccountStatusResult) => any;
    }
    /**
        * <p>Input for GetSubscriptionAttributes.</p>
        */
    export interface GetSubscriptionAttributesInput {
            /**
                * <p>The ARN of the subscription whose properties you want to get.</p>
                */
            SubscriptionArn: string | undefined;
    }
    export namespace GetSubscriptionAttributesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSubscriptionAttributesInput) => any;
    }
    /**
        * <p>Response for GetSubscriptionAttributes action.</p>
        */
    export interface GetSubscriptionAttributesResponse {
            /**
                * <p>A map of the subscription's attributes. Attributes in this map include the
                *             following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>ConfirmationWasAuthenticated</code> – <code>true</code> if the
                *                     subscription confirmation request was authenticated.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>DeliveryPolicy</code> – The JSON serialization of the
                *                     subscription's delivery policy.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>EffectiveDeliveryPolicy</code> – The JSON serialization of the
                *                     effective delivery policy that takes into account the topic delivery policy and
                *                     account system defaults.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>FilterPolicy</code> – The filter policy JSON that is assigned to
                *                     the subscription. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-message-filtering.html">Amazon SNS Message
                *                         Filtering</a> in the <i>Amazon SNS Developer Guide</i>.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>Owner</code> – The Amazon Web Services account ID of the subscription's
                *                     owner.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>PendingConfirmation</code> – <code>true</code> if the subscription
                *                     hasn't been confirmed. To confirm a pending subscription, call the
                *                         <code>ConfirmSubscription</code> action with a confirmation token.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>RawMessageDelivery</code> – <code>true</code> if raw message
                *                     delivery is enabled for the subscription. Raw messages are free of JSON
                *                     formatting and can be sent to HTTP/S and Amazon SQS endpoints.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>RedrivePolicy</code> – When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue.
                *     Messages that can't be delivered due to client errors (for example, when the subscribed endpoint is unreachable)
                *     or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held
                *     in the dead-letter queue for further analysis or reprocessing.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>SubscriptionArn</code> – The subscription's ARN.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>TopicArn</code> – The topic ARN that the subscription is associated
                *                     with.</p>
                *             </li>
                *          </ul>
                *
                *         <p>The following attribute applies only to Amazon Kinesis Data Firehose delivery stream subscriptions:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>SubscriptionRoleArn</code> – The ARN of the IAM role that has the following:</p>
                *                 <ul>
                *                   <li>
                *                         <p>Permission to write to the Kinesis Data Firehose delivery stream</p>
                *                     </li>
                *                   <li>
                *                         <p>Amazon SNS listed as a trusted entity</p>
                *                     </li>
                *                </ul>
                *                 <p>Specifying a valid ARN for this attribute is required for Kinesis Data Firehose delivery stream subscriptions.
                *                 For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html">Fanout
                *                     to Kinesis Data Firehose delivery streams</a> in the <i>Amazon SNS Developer Guide</i>.</p>
                *                     </li>
                *          </ul>
                */
            Attributes?: Record<string, string>;
    }
    export namespace GetSubscriptionAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSubscriptionAttributesResponse) => any;
    }
    /**
        * <p>Input for GetTopicAttributes action.</p>
        */
    export interface GetTopicAttributesInput {
            /**
                * <p>The ARN of the topic whose properties you want to get.</p>
                */
            TopicArn: string | undefined;
    }
    export namespace GetTopicAttributesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTopicAttributesInput) => any;
    }
    /**
        * <p>Response for GetTopicAttributes action.</p>
        */
    export interface GetTopicAttributesResponse {
            /**
                * <p>A map of the topic's attributes. Attributes in this map include the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>DeliveryPolicy</code> – The JSON serialization of the topic's
                *                     delivery policy.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DisplayName</code> – The human-readable name used in the
                *                         <code>From</code> field for notifications to <code>email</code> and
                *                         <code>email-json</code> endpoints.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Owner</code> – The Amazon Web Services account ID of the topic's owner.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Policy</code> – The JSON serialization of the topic's access
                *                     control policy.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SubscriptionsConfirmed</code> – The number of confirmed
                *                     subscriptions for the topic.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SubscriptionsDeleted</code> – The number of deleted subscriptions
                *                     for the topic.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SubscriptionsPending</code> – The number of subscriptions pending
                *                     confirmation for the topic.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>TopicArn</code> – The topic's ARN.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>EffectiveDeliveryPolicy</code> – The JSON serialization of the
                *                     effective delivery policy, taking system defaults into account.</p>
                *             </li>
                *          </ul>
                *
                *         <p>The following attribute applies only to <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html">server-side-encryption</a>:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>KmsMasterKeyId</code> - The ID of an Amazon Web Services managed customer master key
                *                     (CMK) for Amazon SNS or a custom CMK. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html#sse-key-terms">Key
                *                         Terms</a>. For more examples, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters">KeyId</a> in the <i>Key Management Service API
                *                         Reference</i>.</p>
                *             </li>
                *          </ul>
                *
                *
                *         <p>The following attributes apply only to <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html">FIFO topics</a>:</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>FifoTopic</code> – When this is set to <code>true</code>, a FIFO
                *                 topic is created.</p>
                *             </li>
                *             <li>
                *                <p>
                *                     <code>ContentBasedDeduplication</code> – Enables content-based deduplication for
                *                     FIFO topics.</p>
                *
                *                 <ul>
                *                   <li>
                *                         <p>By default, <code>ContentBasedDeduplication</code> is set to <code>false</code>.
                *                             If you create a FIFO topic and this attribute is <code>false</code>, you must
                *                             specify a value for the <code>MessageDeduplicationId</code> parameter for the
                *                             <a href="https://docs.aws.amazon.com/sns/latest/api/API_Publish.html">Publish</a> action. </p>
                *                     </li>
                *                   <li>
                *                         <p>When you set <code>ContentBasedDeduplication</code> to <code>true</code>,
                *                             Amazon SNS uses a SHA-256 hash to generate the <code>MessageDeduplicationId</code> using
                *                             the body of the message (but not the attributes of the message).</p>
                *                         <p>(Optional) To override the generated value, you can specify a value
                *                             for the <code>MessageDeduplicationId</code> parameter for the <code>Publish</code>
                *                             action.</p>
                *                      </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            Attributes?: Record<string, string>;
    }
    export namespace GetTopicAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTopicAttributesResponse) => any;
    }
    /**
        * <p>Input for ListEndpointsByPlatformApplication action.</p>
        */
    export interface ListEndpointsByPlatformApplicationInput {
            /**
                * <p>PlatformApplicationArn for ListEndpointsByPlatformApplicationInput action.</p>
                */
            PlatformApplicationArn: string | undefined;
            /**
                * <p>NextToken string is used when calling ListEndpointsByPlatformApplication action to
                *             retrieve additional records that are available after the first page results.</p>
                */
            NextToken?: string;
    }
    export namespace ListEndpointsByPlatformApplicationInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEndpointsByPlatformApplicationInput) => any;
    }
    /**
        * <p>The endpoint for mobile app and device.</p>
        */
    export interface Endpoint {
            /**
                * <p>The <code>EndpointArn</code> for mobile app and device.</p>
                */
            EndpointArn?: string;
            /**
                * <p>Attributes for endpoint.</p>
                */
            Attributes?: Record<string, string>;
    }
    export namespace Endpoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Endpoint) => any;
    }
    /**
        * <p>Response for ListEndpointsByPlatformApplication action.</p>
        */
    export interface ListEndpointsByPlatformApplicationResponse {
            /**
                * <p>Endpoints returned for ListEndpointsByPlatformApplication action.</p>
                */
            Endpoints?: Endpoint[];
            /**
                * <p>NextToken string is returned when calling ListEndpointsByPlatformApplication action if
                *             additional records are available after the first page results.</p>
                */
            NextToken?: string;
    }
    export namespace ListEndpointsByPlatformApplicationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEndpointsByPlatformApplicationResponse) => any;
    }
    export interface ListOriginationNumbersRequest {
            /**
                * <p>Token that the previous <code>ListOriginationNumbers</code> request returns.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of origination numbers to return.</p>
                */
            MaxResults?: number;
    }
    export namespace ListOriginationNumbersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOriginationNumbersRequest) => any;
    }
    export enum NumberCapability {
            MMS = "MMS",
            SMS = "SMS",
            VOICE = "VOICE"
    }
    export enum RouteType {
            Premium = "Premium",
            Promotional = "Promotional",
            Transactional = "Transactional"
    }
    /**
        * <p>A list of phone numbers and their metadata.</p>
        */
    export interface PhoneNumberInformation {
            /**
                * <p>The date and time when the phone number was created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The phone number.</p>
                */
            PhoneNumber?: string;
            /**
                * <p>The status of the phone number.</p>
                */
            Status?: string;
            /**
                * <p>The two-character code for the country or region, in ISO 3166-1 alpha-2 format.</p>
                */
            Iso2CountryCode?: string;
            /**
                * <p>The list of supported routes.</p>
                */
            RouteType?: RouteType | string;
            /**
                * <p>The capabilities of each phone number.</p>
                */
            NumberCapabilities?: (NumberCapability | string)[];
    }
    export namespace PhoneNumberInformation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PhoneNumberInformation) => any;
    }
    export interface ListOriginationNumbersResult {
            /**
                * <p>A <code>NextToken</code> string is returned when you call the
                *                 <code>ListOriginationNumbers</code> operation if additional pages of records are
                *             available.</p>
                */
            NextToken?: string;
            /**
                * <p>A list of the calling account's verified and pending origination numbers.</p>
                */
            PhoneNumbers?: PhoneNumberInformation[];
    }
    export namespace ListOriginationNumbersResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOriginationNumbersResult) => any;
    }
    /**
        * <p>Indicates that a parameter in the request is invalid.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    /**
        * <p>The input for the <code>ListPhoneNumbersOptedOut</code> action.</p>
        */
    export interface ListPhoneNumbersOptedOutInput {
            /**
                * <p>A <code>NextToken</code> string is used when you call the
                *                 <code>ListPhoneNumbersOptedOut</code> action to retrieve additional records that are
                *             available after the first page of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListPhoneNumbersOptedOutInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPhoneNumbersOptedOutInput) => any;
    }
    /**
        * <p>The response from the <code>ListPhoneNumbersOptedOut</code> action.</p>
        */
    export interface ListPhoneNumbersOptedOutResponse {
            /**
                * <p>A list of phone numbers that are opted out of receiving SMS messages. The list is
                *             paginated, and each page can contain up to 100 phone numbers.</p>
                */
            phoneNumbers?: string[];
            /**
                * <p>A <code>NextToken</code> string is returned when you call the
                *                 <code>ListPhoneNumbersOptedOut</code> action if additional records are available
                *             after the first page of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListPhoneNumbersOptedOutResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPhoneNumbersOptedOutResponse) => any;
    }
    /**
        * <p>Input for ListPlatformApplications action.</p>
        */
    export interface ListPlatformApplicationsInput {
            /**
                * <p>NextToken string is used when calling ListPlatformApplications action to retrieve
                *             additional records that are available after the first page results.</p>
                */
            NextToken?: string;
    }
    export namespace ListPlatformApplicationsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPlatformApplicationsInput) => any;
    }
    /**
        * <p>Platform application object.</p>
        */
    export interface PlatformApplication {
            /**
                * <p>PlatformApplicationArn for platform application object.</p>
                */
            PlatformApplicationArn?: string;
            /**
                * <p>Attributes for platform application object.</p>
                */
            Attributes?: Record<string, string>;
    }
    export namespace PlatformApplication {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PlatformApplication) => any;
    }
    /**
        * <p>Response for ListPlatformApplications action.</p>
        */
    export interface ListPlatformApplicationsResponse {
            /**
                * <p>Platform applications returned when calling ListPlatformApplications action.</p>
                */
            PlatformApplications?: PlatformApplication[];
            /**
                * <p>NextToken string is returned when calling ListPlatformApplications action if
                *             additional records are available after the first page results.</p>
                */
            NextToken?: string;
    }
    export namespace ListPlatformApplicationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPlatformApplicationsResponse) => any;
    }
    export interface ListSMSSandboxPhoneNumbersInput {
            /**
                * <p>Token that the previous <code>ListSMSSandboxPhoneNumbersInput</code> request
                *             returns.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of phone numbers to return.</p>
                */
            MaxResults?: number;
    }
    export namespace ListSMSSandboxPhoneNumbersInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSMSSandboxPhoneNumbersInput) => any;
    }
    export enum SMSSandboxPhoneNumberVerificationStatus {
            Pending = "Pending",
            Verified = "Verified"
    }
    /**
        * <p>A verified or pending destination phone number in the SMS sandbox.</p>
        *         <p>When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the
        *                 <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for
        *                 you to try Amazon SNS features without risking your reputation as an SMS sender. While your
        *                 Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send
        *                 SMS messages only to verified destination phone numbers. For more information, including how to
        *                 move out of the sandbox to send messages without restrictions,
        *                 see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in
        *                 the <i>Amazon SNS Developer Guide</i>.</p>
        */
    export interface SMSSandboxPhoneNumber {
            /**
                * <p>The destination phone number.</p>
                */
            PhoneNumber?: string;
            /**
                * <p>The destination phone number's verification status.</p>
                */
            Status?: SMSSandboxPhoneNumberVerificationStatus | string;
    }
    export namespace SMSSandboxPhoneNumber {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SMSSandboxPhoneNumber) => any;
    }
    export interface ListSMSSandboxPhoneNumbersResult {
            /**
                * <p>A list of the calling account's pending and verified phone numbers.</p>
                */
            PhoneNumbers: SMSSandboxPhoneNumber[] | undefined;
            /**
                * <p>A <code>NextToken</code> string is returned when you call the
                *             <code>ListSMSSandboxPhoneNumbersInput</code> operation if additional pages of
                *             records are available.</p>
                */
            NextToken?: string;
    }
    export namespace ListSMSSandboxPhoneNumbersResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSMSSandboxPhoneNumbersResult) => any;
    }
    /**
        * <p>Input for ListSubscriptions action.</p>
        */
    export interface ListSubscriptionsInput {
            /**
                * <p>Token returned by the previous <code>ListSubscriptions</code> request.</p>
                */
            NextToken?: string;
    }
    export namespace ListSubscriptionsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSubscriptionsInput) => any;
    }
    /**
        * <p>A wrapper type for the attributes of an Amazon SNS subscription.</p>
        */
    export interface Subscription {
            /**
                * <p>The subscription's ARN.</p>
                */
            SubscriptionArn?: string;
            /**
                * <p>The subscription's owner.</p>
                */
            Owner?: string;
            /**
                * <p>The subscription's protocol.</p>
                */
            Protocol?: string;
            /**
                * <p>The subscription's endpoint (format depends on the protocol).</p>
                */
            Endpoint?: string;
            /**
                * <p>The ARN of the subscription's topic.</p>
                */
            TopicArn?: string;
    }
    export namespace Subscription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Subscription) => any;
    }
    /**
        * <p>Response for ListSubscriptions action</p>
        */
    export interface ListSubscriptionsResponse {
            /**
                * <p>A list of subscriptions.</p>
                */
            Subscriptions?: Subscription[];
            /**
                * <p>Token to pass along to the next <code>ListSubscriptions</code> request. This element
                *             is returned if there are more subscriptions to retrieve.</p>
                */
            NextToken?: string;
    }
    export namespace ListSubscriptionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSubscriptionsResponse) => any;
    }
    /**
        * <p>Input for ListSubscriptionsByTopic action.</p>
        */
    export interface ListSubscriptionsByTopicInput {
            /**
                * <p>The ARN of the topic for which you wish to find subscriptions.</p>
                */
            TopicArn: string | undefined;
            /**
                * <p>Token returned by the previous <code>ListSubscriptionsByTopic</code> request.</p>
                */
            NextToken?: string;
    }
    export namespace ListSubscriptionsByTopicInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSubscriptionsByTopicInput) => any;
    }
    /**
        * <p>Response for ListSubscriptionsByTopic action.</p>
        */
    export interface ListSubscriptionsByTopicResponse {
            /**
                * <p>A list of subscriptions.</p>
                */
            Subscriptions?: Subscription[];
            /**
                * <p>Token to pass along to the next <code>ListSubscriptionsByTopic</code> request. This
                *             element is returned if there are more subscriptions to retrieve.</p>
                */
            NextToken?: string;
    }
    export namespace ListSubscriptionsByTopicResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSubscriptionsByTopicResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The ARN of the topic for which to list tags.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The tags associated with the specified topic.</p>
                */
            Tags?: Tag[];
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface ListTopicsInput {
            /**
                * <p>Token returned by the previous <code>ListTopics</code> request.</p>
                */
            NextToken?: string;
    }
    export namespace ListTopicsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTopicsInput) => any;
    }
    /**
        * <p>A wrapper type for the topic's Amazon Resource Name (ARN). To retrieve a topic's
        *             attributes, use <code>GetTopicAttributes</code>.</p>
        */
    export interface Topic {
            /**
                * <p>The topic's ARN.</p>
                */
            TopicArn?: string;
    }
    export namespace Topic {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Topic) => any;
    }
    /**
        * <p>Response for ListTopics action.</p>
        */
    export interface ListTopicsResponse {
            /**
                * <p>A list of topic ARNs.</p>
                */
            Topics?: Topic[];
            /**
                * <p>Token to pass along to the next <code>ListTopics</code> request. This element is
                *             returned if there are additional topics to retrieve.</p>
                */
            NextToken?: string;
    }
    export namespace ListTopicsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTopicsResponse) => any;
    }
    /**
        * <p>Input for the OptInPhoneNumber action.</p>
        */
    export interface OptInPhoneNumberInput {
            /**
                * <p>The phone number to opt in. Use E.164 format.</p>
                */
            phoneNumber: string | undefined;
    }
    export namespace OptInPhoneNumberInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OptInPhoneNumberInput) => any;
    }
    /**
        * <p>The response for the OptInPhoneNumber action.</p>
        */
    export interface OptInPhoneNumberResponse {
    }
    export namespace OptInPhoneNumberResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OptInPhoneNumberResponse) => any;
    }
    /**
        * <p>Exception error indicating endpoint disabled.</p>
        */
    export class EndpointDisabledException extends __BaseException {
            readonly name: "EndpointDisabledException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EndpointDisabledException, __BaseException>);
    }
    /**
        * <p>Indicates that a request parameter does not comply with the associated constraints.</p>
        */
    export class InvalidParameterValueException extends __BaseException {
            readonly name: "InvalidParameterValueException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidParameterValueException, __BaseException>);
    }
    /**
        * <p>The ciphertext references a key that doesn't exist or that you don't have access
        *             to.</p>
        */
    export class KMSAccessDeniedException extends __BaseException {
            readonly name: "KMSAccessDeniedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KMSAccessDeniedException, __BaseException>);
    }
    /**
        * <p>The request was rejected because the specified customer master key (CMK) isn't
        *             enabled.</p>
        */
    export class KMSDisabledException extends __BaseException {
            readonly name: "KMSDisabledException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KMSDisabledException, __BaseException>);
    }
    /**
        * <p>The request was rejected because the state of the specified resource isn't valid for
        *             this request. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How Key State Affects Use of a
        *                 Customer Master Key</a> in the <i>Key Management Service Developer
        *                 Guide</i>.</p>
        */
    export class KMSInvalidStateException extends __BaseException {
            readonly name: "KMSInvalidStateException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KMSInvalidStateException, __BaseException>);
    }
    /**
        * <p>The request was rejected because the specified entity or resource can't be
        *             found.</p>
        */
    export class KMSNotFoundException extends __BaseException {
            readonly name: "KMSNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KMSNotFoundException, __BaseException>);
    }
    /**
        * <p>The Amazon Web Services access key ID needs a subscription for the service.</p>
        */
    export class KMSOptInRequired extends __BaseException {
            readonly name: "KMSOptInRequired";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KMSOptInRequired, __BaseException>);
    }
    /**
        * <p>The request was denied due to request throttling. For more information about
        *             throttling, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second">Limits</a> in
        *             the <i>Key Management Service Developer Guide.</i>
        *          </p>
        */
    export class KMSThrottlingException extends __BaseException {
            readonly name: "KMSThrottlingException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KMSThrottlingException, __BaseException>);
    }
    /**
        * <p>Exception error indicating platform application disabled.</p>
        */
    export class PlatformApplicationDisabledException extends __BaseException {
            readonly name: "PlatformApplicationDisabledException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PlatformApplicationDisabledException, __BaseException>);
    }
    /**
        * <p>The user-specified message attribute value. For string data types, the value attribute
        *             has the same restrictions on the content as the message body. For more information, see
        *             <a href="https://docs.aws.amazon.com/sns/latest/api/API_Publish.html">Publish</a>.</p>
        *         <p>Name, type, and value must not be empty or null. In addition, the message body should
        *             not be empty or null. All parts of the message attribute, including name, type, and
        *             value, are included in the message size restriction, which is currently 256 KB (262,144
        *             bytes). For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMessageAttributes.html">Amazon SNS message attributes</a> and
        *             <a href="https://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html">Publishing
        *                 to a mobile phone</a> in the <i>Amazon SNS Developer Guide.</i>
        *          </p>
        */
    export interface MessageAttributeValue {
            /**
                * <p>Amazon SNS supports the following logical data types: String, String.Array, Number, and
                *             Binary. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMessageAttributes.html#SNSMessageAttributes.DataTypes">Message
                *                 Attribute Data Types</a>.</p>
                */
            DataType: string | undefined;
            /**
                * <p>Strings are Unicode with UTF8 binary encoding. For a list of code values, see <a href="https://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters">ASCII Printable
                *             Characters</a>.</p>
                */
            StringValue?: string;
            /**
                * <p>Binary type attributes can store any binary data, for example, compressed data,
                *             encrypted data, or images.</p>
                */
            BinaryValue?: Uint8Array;
    }
    export namespace MessageAttributeValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MessageAttributeValue) => any;
    }
    /**
        * <p>Input for Publish action.</p>
        */
    export interface PublishInput {
            /**
                * <p>The topic you want to publish to.</p>
                *         <p>If you don't specify a value for the <code>TopicArn</code> parameter, you must specify
                *             a value for the <code>PhoneNumber</code> or <code>TargetArn</code> parameters.</p>
                */
            TopicArn?: string;
            /**
                * <p>If you don't specify a value for the <code>TargetArn</code> parameter, you must
                *             specify a value for the <code>PhoneNumber</code> or <code>TopicArn</code>
                *             parameters.</p>
                */
            TargetArn?: string;
            /**
                * <p>The phone number to which you want to deliver an SMS message. Use E.164 format.</p>
                *         <p>If you don't specify a value for the <code>PhoneNumber</code> parameter, you must
                *             specify a value for the <code>TargetArn</code> or <code>TopicArn</code>
                *             parameters.</p>
                */
            PhoneNumber?: string;
            /**
                * <p>The message you want to send.</p>
                *         <p>If you are publishing to a topic and you want to send the same message to all
                *             transport protocols, include the text of the message as a String value. If you want to
                *             send different messages for each transport protocol, set the value of the
                *                 <code>MessageStructure</code> parameter to <code>json</code> and use a JSON object
                *             for the <code>Message</code> parameter.
                *         </p>
                *         <p></p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>With the exception of SMS, messages must be UTF-8 encoded strings and at most
                *                     256 KB in size (262,144 bytes, not 262,144 characters).</p>
                *             </li>
                *             <li>
                *                 <p>For SMS, each message can contain up to 140 characters. This character limit
                *                     depends on the encoding schema. For example, an SMS message can contain 160 GSM
                *                     characters, 140 ASCII characters, or 70 UCS-2 characters.</p>
                *                 <p>If you publish a message that exceeds this size limit, Amazon SNS sends the message
                *                     as multiple messages, each fitting within the size limit. Messages aren't
                *                     truncated mid-word but are cut off at whole-word boundaries.</p>
                *                 <p>The total size limit for a single SMS <code>Publish</code> action is 1,600
                *                     characters.</p>
                *             </li>
                *          </ul>
                *         <p>JSON-specific constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Keys in the JSON object that correspond to supported transport protocols must
                *                     have simple JSON string values.</p>
                *             </li>
                *             <li>
                *                 <p>The values will be parsed (unescaped) before they are used in outgoing
                *                     messages.</p>
                *             </li>
                *             <li>
                *                 <p>Outbound notifications are JSON encoded (meaning that the characters will be
                *                     reescaped for sending).</p>
                *             </li>
                *             <li>
                *                 <p>Values have a minimum length of 0 (the empty string, "", is allowed).</p>
                *             </li>
                *             <li>
                *                 <p>Values have a maximum length bounded by the overall message size (so,
                *                     including multiple protocols may limit message sizes).</p>
                *             </li>
                *             <li>
                *                 <p>Non-string values will cause the key to be ignored.</p>
                *             </li>
                *             <li>
                *                 <p>Keys that do not correspond to supported transport protocols are
                *                     ignored.</p>
                *             </li>
                *             <li>
                *                 <p>Duplicate keys are not allowed.</p>
                *             </li>
                *             <li>
                *                 <p>Failure to parse or validate any key or value in the message will cause the
                *                         <code>Publish</code> call to return an error (no partial delivery).</p>
                *             </li>
                *          </ul>
                */
            Message: string | undefined;
            /**
                * <p>Optional parameter to be used as the "Subject" line when the message is delivered to
                *             email endpoints. This field will also be included, if present, in the standard JSON
                *             messages delivered to other endpoints.</p>
                *         <p>Constraints: Subjects must be ASCII text that begins with a letter, number, or
                *             punctuation mark; must not include line breaks or control characters; and must be less
                *             than 100 characters long.</p>
                */
            Subject?: string;
            /**
                * <p>Set <code>MessageStructure</code> to <code>json</code> if you want to send a different
                *             message for each protocol. For example, using one publish action, you can send a short
                *             message to your SMS subscribers and a longer message to your email subscribers. If you
                *             set <code>MessageStructure</code> to <code>json</code>, the value of the
                *                 <code>Message</code> parameter must: </p>
                *         <ul>
                *             <li>
                *                 <p>be a syntactically valid JSON object; and</p>
                *             </li>
                *             <li>
                *                 <p>contain at least a top-level JSON key of "default" with a value that is a
                *                     string.</p>
                *             </li>
                *          </ul>
                *         <p>You can define other top-level keys that define the message you want to send to a
                *             specific transport protocol (e.g., "http").</p>
                *         <p>Valid value: <code>json</code>
                *         </p>
                */
            MessageStructure?: string;
            /**
                * <p>Message attributes for Publish action.</p>
                */
            MessageAttributes?: Record<string, MessageAttributeValue>;
            /**
                * <p>This parameter applies only to FIFO (first-in-first-out) topics. The
                *                 <code>MessageDeduplicationId</code> can contain up to 128 alphanumeric characters
                *             <code>(a-z, A-Z, 0-9)</code> and punctuation
                *             <code>(!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~)</code>.</p>
                *         <p>Every message must have a unique <code>MessageDeduplicationId</code>, which is a token
                *             used for deduplication of sent messages. If a message with a particular
                *                 <code>MessageDeduplicationId</code> is sent successfully, any message sent with the
                *             same <code>MessageDeduplicationId</code> during the 5-minute deduplication interval is
                *             treated as a duplicate. </p>
                *         <p>If the topic has <code>ContentBasedDeduplication</code> set, the system generates a
                *                 <code>MessageDeduplicationId</code> based on the contents of the message. Your
                *                 <code>MessageDeduplicationId</code> overrides the generated one.</p>
                */
            MessageDeduplicationId?: string;
            /**
                * <p>This parameter applies only to FIFO (first-in-first-out) topics. The
                *             <code>MessageGroupId</code> can contain up to 128 alphanumeric characters
                *             <code>(a-z, A-Z, 0-9)</code> and punctuation
                *             <code>(!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~)</code>.</p>
                *         <p>The <code>MessageGroupId</code> is a tag that specifies that a message belongs to a
                *             specific message group. Messages that belong to the same message group are processed in
                *             a FIFO manner (however, messages in different message groups might be processed out of
                *             order). Every message must include a <code>MessageGroupId</code>.</p>
                */
            MessageGroupId?: string;
    }
    export namespace PublishInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PublishInput) => any;
    }
    /**
        * <p>Response for Publish action.</p>
        */
    export interface PublishResponse {
            /**
                * <p>Unique identifier assigned to the published message.</p>
                *         <p>Length Constraint: Maximum 100 characters</p>
                */
            MessageId?: string;
            /**
                * <p>This response element applies only to FIFO (first-in-first-out) topics. </p>
                *         <p>The sequence number is a large, non-consecutive number that Amazon SNS assigns to each
                *             message. The length of <code>SequenceNumber</code> is 128 bits.
                *                 <code>SequenceNumber</code> continues to increase for each
                *                 <code>MessageGroupId</code>.</p>
                */
            SequenceNumber?: string;
    }
    export namespace PublishResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PublishResponse) => any;
    }
    /**
        * <p>Two or more batch entries in the request have the same <code>Id</code>.</p>
        */
    export class BatchEntryIdsNotDistinctException extends __BaseException {
            readonly name: "BatchEntryIdsNotDistinctException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BatchEntryIdsNotDistinctException, __BaseException>);
    }
    /**
        * <p>The length of all the batch messages put together is more than the limit.</p>
        */
    export class BatchRequestTooLongException extends __BaseException {
            readonly name: "BatchRequestTooLongException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BatchRequestTooLongException, __BaseException>);
    }
    /**
        * <p>The batch request doesn't contain any entries.</p>
        */
    export class EmptyBatchRequestException extends __BaseException {
            readonly name: "EmptyBatchRequestException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EmptyBatchRequestException, __BaseException>);
    }
    /**
        * <p>The <code>Id</code> of a batch entry in a batch request doesn't abide by the specification. </p>
        */
    export class InvalidBatchEntryIdException extends __BaseException {
            readonly name: "InvalidBatchEntryIdException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidBatchEntryIdException, __BaseException>);
    }
    /**
        * <p>Contains the details of a single Amazon SNS message along with an <code>Id</code> that identifies a message within the batch. </p>
        */
    export interface PublishBatchRequestEntry {
            /**
                * <p>An identifier for the message in this batch.</p>
                *         <note>
                *             <p>The <code>Ids</code> of a batch request must be unique within a request. </p>
                *             <p>This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_). </p>
                *         </note>
                */
            Id: string | undefined;
            /**
                * <p>The body of the message.</p>
                */
            Message: string | undefined;
            /**
                * <p>The subject of the batch message.</p>
                */
            Subject?: string;
            /**
                * <p>Set <code>MessageStructure</code> to <code>json</code> if you want to send a different message for each protocol. For example, using one publish action, you can send a short message to your SMS subscribers and a longer message to your email subscribers. If you set <code>MessageStructure</code> to <code>json</code>, the value of the <code>Message</code> parameter must: </p>
                *         <ul>
                *             <li>
                *                <p>be a syntactically valid JSON object; and</p>
                *             </li>
                *             <li>
                *                <p>contain at least a top-level JSON key of "default" with a value that is a string.</p>
                *             </li>
                *          </ul>
                *         <p>You can define other top-level keys that define the message you want to send to a
                *             specific transport protocol (e.g. http). </p>
                */
            MessageStructure?: string;
            /**
                * <p>Each message attribute consists of a <code>Name</code>, <code>Type</code>, and <code>Value</code>. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-message-attributes.html">Amazon SNS message attributes</a> in the Amazon SNS Developer Guide.</p>
                */
            MessageAttributes?: Record<string, MessageAttributeValue>;
            /**
                * <p>This parameter applies only to FIFO (first-in-first-out) topics.</p>
                *         <p>The token used for deduplication of messages within a 5-minute minimum deduplication interval. If a message with a particular <code>MessageDeduplicationId</code> is sent successfully, subsequent messages with the same <code>MessageDeduplicationId</code> are accepted successfully but aren't delivered.</p>
                *         <ul>
                *             <li>
                *                <p>Every message must have a unique <code>MessageDeduplicationId</code>.</p>
                *                 <ul>
                *                   <li>
                *                      <p>You may provide a <code>MessageDeduplicationId</code> explicitly.</p>
                *                   </li>
                *                   <li>
                *                      <p>If you aren't able to provide a <code>MessageDeduplicationId</code> and you enable <code>ContentBasedDeduplication</code> for your topic, Amazon SNS uses a SHA-256 hash to generate the <code>MessageDeduplicationId</code> using the body of the message (but not the attributes of the message).</p>
                *                   </li>
                *                   <li>
                *                      <p>If you don't provide a <code>MessageDeduplicationId</code> and the topic doesn't have <code>ContentBasedDeduplication</code> set, the action fails with an error.</p>
                *                   </li>
                *                   <li>
                *                      <p>If the topic has a <code>ContentBasedDeduplication</code> set, your
                *                                 <code>MessageDeduplicationId</code> overrides the generated one. </p>
                *                   </li>
                *                </ul>
                *             </li>
                *             <li>
                *                <p>When <code>ContentBasedDeduplication</code> is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.</p>
                *             </li>
                *             <li>
                *                <p>If you send one message with <code>ContentBasedDeduplication</code> enabled, and then another
                *                     message with a <code>MessageDeduplicationId</code> that is the same as the one
                *                     generated for the first <code>MessageDeduplicationId</code>, the two messages
                *                     are treated as duplicates and only one copy of the message is delivered. </p>
                *             </li>
                *          </ul>
                *         <note>
                *             <p>The <code>MessageDeduplicationId</code> is available to the consumer of the message (this can be useful for troubleshooting delivery issues).</p>
                *             <p>If a message is sent successfully but the acknowledgement is lost and the message is resent with the same <code>MessageDeduplicationId</code> after the deduplication interval, Amazon SNS can't detect duplicate messages. </p>
                *             <p>Amazon SNS continues to keep track of the message deduplication ID even after the message is received and deleted. </p>
                *         </note>
                *         <p>The length of <code>MessageDeduplicationId</code> is 128 characters.</p>
                *         <p>
                *             <code>MessageDeduplicationId</code> can contain alphanumeric characters <code>(a-z, A-Z, 0-9)</code> and punctuation <code>(!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~)</code>.</p>
                */
            MessageDeduplicationId?: string;
            /**
                * <p>This parameter applies only to FIFO (first-in-first-out) topics.</p>
                *         <p>The tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). To interleave multiple ordered streams within a single topic, use <code>MessageGroupId</code> values (for example, session data for multiple users). In this scenario, multiple consumers can process the topic, but the session data of each user is processed in a FIFO fashion. </p>
                *         <p>You must associate a non-empty <code>MessageGroupId</code> with a message. If you don't provide a <code>MessageGroupId</code>, the action fails. </p>
                *         <p>The length of <code>MessageGroupId</code> is 128 characters.</p>
                *         <p>
                *             <code>MessageGroupId</code> can contain alphanumeric characters <code>(a-z, A-Z, 0-9)</code> and punctuation <code>(!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~)</code>.</p>
                *
                *
                *         <important>
                *             <p>
                *                <code>MessageGroupId</code> is required for FIFO topics. You can't use it for standard topics. </p>
                *          </important>
                */
            MessageGroupId?: string;
    }
    export namespace PublishBatchRequestEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PublishBatchRequestEntry) => any;
    }
    export interface PublishBatchInput {
            /**
                * <p>The Amazon resource name (ARN) of the topic you want to batch publish to.</p>
                */
            TopicArn: string | undefined;
            /**
                * <p>A list of <code>PublishBatch</code> request entries to be sent to the SNS topic.</p>
                */
            PublishBatchRequestEntries: PublishBatchRequestEntry[] | undefined;
    }
    export namespace PublishBatchInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PublishBatchInput) => any;
    }
    /**
        * <p>Gives a detailed description of failed messages in the batch.</p>
        */
    export interface BatchResultErrorEntry {
            /**
                * <p>The <code>Id</code> of an entry in a batch request</p>
                */
            Id: string | undefined;
            /**
                * <p>An error code representing why the action failed on this entry.</p>
                */
            Code: string | undefined;
            /**
                * <p>A message explaining why the action failed on this entry.</p>
                */
            Message?: string;
            /**
                * <p>Specifies whether the error happened due to the caller of the batch API action.</p>
                */
            SenderFault: boolean | undefined;
    }
    export namespace BatchResultErrorEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchResultErrorEntry) => any;
    }
    /**
        * <p>Encloses data related to a successful message in a batch request for topic.</p>
        */
    export interface PublishBatchResultEntry {
            /**
                * <p>The <code>Id</code> of an entry in a batch request.</p>
                */
            Id?: string;
            /**
                * <p>An identifier for the message.</p>
                */
            MessageId?: string;
            /**
                * <p>This parameter applies only to FIFO (first-in-first-out) topics.</p>
                *         <p>The large, non-consecutive number that Amazon SNS assigns to each message.</p>
                *         <p>The length of <code>SequenceNumber</code> is 128 bits. <code>SequenceNumber</code> continues to increase for a particular <code>MessageGroupId</code>.</p>
                */
            SequenceNumber?: string;
    }
    export namespace PublishBatchResultEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PublishBatchResultEntry) => any;
    }
    export interface PublishBatchResponse {
            /**
                * <p>A list of successful <code>PublishBatch</code> responses.</p>
                */
            Successful?: PublishBatchResultEntry[];
            /**
                * <p>A list of failed <code>PublishBatch</code> responses. </p>
                */
            Failed?: BatchResultErrorEntry[];
    }
    export namespace PublishBatchResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PublishBatchResponse) => any;
    }
    /**
        * <p>The batch request contains more entries than permissible.</p>
        */
    export class TooManyEntriesInBatchRequestException extends __BaseException {
            readonly name: "TooManyEntriesInBatchRequestException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyEntriesInBatchRequestException, __BaseException>);
    }
    /**
        * <p>Input for RemovePermission action.</p>
        */
    export interface RemovePermissionInput {
            /**
                * <p>The ARN of the topic whose access control policy you wish to modify.</p>
                */
            TopicArn: string | undefined;
            /**
                * <p>The unique label of the statement you want to remove.</p>
                */
            Label: string | undefined;
    }
    export namespace RemovePermissionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemovePermissionInput) => any;
    }
    /**
        * <p>Input for SetEndpointAttributes action.</p>
        */
    export interface SetEndpointAttributesInput {
            /**
                * <p>EndpointArn used for SetEndpointAttributes action.</p>
                */
            EndpointArn: string | undefined;
            /**
                * <p>A map of the endpoint attributes. Attributes in this map include the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>CustomUserData</code> – arbitrary user data to associate with the
                *                     endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and
                *                     less than 2KB.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>Enabled</code> – flag that enables/disables delivery to the
                *                     endpoint. Amazon SNS will set this to false when a notification service indicates to
                *                     Amazon SNS that the endpoint is invalid. Users can set it back to true, typically
                *                     after updating Token.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>Token</code> – device token, also referred to as a registration id,
                *                     for an app and mobile device. This is returned from the notification service
                *                     when an app and mobile device are registered with the notification
                *                     service.</p>
                *             </li>
                *          </ul>
                */
            Attributes: Record<string, string> | undefined;
    }
    export namespace SetEndpointAttributesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetEndpointAttributesInput) => any;
    }
    /**
        * <p>Input for SetPlatformApplicationAttributes action.</p>
        */
    export interface SetPlatformApplicationAttributesInput {
            /**
                * <p>PlatformApplicationArn for SetPlatformApplicationAttributes action.</p>
                */
            PlatformApplicationArn: string | undefined;
            /**
                * <p>A map of the platform application attributes. Attributes in this map include the
                *             following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>PlatformCredential</code> – The credential received from the notification service.</p>
                *                 <ul>
                *                   <li>
                *                      <p>For ADM, <code>PlatformCredential</code>is client secret.</p>
                *                   </li>
                *                   <li>
                *                      <p>For Apple Services using certificate credentials, <code>PlatformCredential</code> is private key.</p>
                *                   </li>
                *                   <li>
                *                      <p>For Apple Services using token credentials, <code>PlatformCredential</code> is signing key.</p>
                *                   </li>
                *                   <li>
                *                      <p>For GCM (Firebase Cloud Messaging), <code>PlatformCredential</code> is API key. </p>
                *                   </li>
                *                </ul>
                *             </li>
                *          </ul>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>PlatformPrincipal</code> – The principal received from the notification service.</p>
                *                <ul>
                *                   <li>
                *                      <p>For ADM, <code>PlatformPrincipal</code>is client id.</p>
                *                   </li>
                *                   <li>
                *                      <p>For Apple Services using certificate credentials, <code>PlatformPrincipal</code> is SSL certificate.</p>
                *                   </li>
                *                   <li>
                *                      <p>For Apple Services using token credentials, <code>PlatformPrincipal</code> is signing key ID.</p>
                *                   </li>
                *                   <li>
                *                      <p>For GCM (Firebase Cloud Messaging), there is no <code>PlatformPrincipal</code>. </p>
                *                   </li>
                *                </ul>
                *             </li>
                *          </ul>
                *         <ul>
                *             <li>
                *                    <p>
                *                     <code>EventEndpointCreated</code> – Topic ARN to which
                *                         <code>EndpointCreated</code> event notifications are sent.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>EventEndpointDeleted</code> – Topic ARN to which
                *                         <code>EndpointDeleted</code> event notifications are sent.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>EventEndpointUpdated</code> – Topic ARN to which
                *                         <code>EndpointUpdate</code> event notifications are sent.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>EventDeliveryFailure</code> – Topic ARN to which
                *                         <code>DeliveryFailure</code> event notifications are sent upon Direct
                *                     Publish delivery failure (permanent) to one of the application's
                *                     endpoints.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>SuccessFeedbackRoleArn</code> – IAM role ARN used to give Amazon SNS
                *                     write access to use CloudWatch Logs on your behalf.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>FailureFeedbackRoleArn</code> – IAM role ARN used to give Amazon SNS
                *                     write access to use CloudWatch Logs on your behalf.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>SuccessFeedbackSampleRate</code> – Sample rate percentage (0-100)
                *                     of successfully delivered messages.</p>
                *             </li>
                *          </ul>
                *         <p>The following attributes only apply to <code>APNs</code> token-based authentication:</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>ApplePlatformTeamID</code> – The identifier that's assigned to your Apple developer account team.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ApplePlatformBundleID</code> – The bundle identifier that's assigned to your iOS app.</p>
                *             </li>
                *          </ul>
                */
            Attributes: Record<string, string> | undefined;
    }
    export namespace SetPlatformApplicationAttributesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetPlatformApplicationAttributesInput) => any;
    }
    /**
        * <p>The input for the SetSMSAttributes action.</p>
        */
    export interface SetSMSAttributesInput {
            /**
                * <p>The default settings for sending SMS messages from your Amazon Web Services account. You can set values
                *             for the following attribute names:</p>
                *         <p>
                *             <code>MonthlySpendLimit</code> – The maximum amount in USD that you are willing to spend
                *             each month to send SMS messages. When Amazon SNS determines that sending an SMS message would
                *             incur a cost that exceeds this limit, it stops sending SMS messages within
                *             minutes.</p>
                *         <important>
                *             <p>Amazon SNS stops sending SMS messages within minutes of the limit being crossed. During
                *                 that interval, if you continue to send SMS messages, you will incur costs that
                *                 exceed your limit.</p>
                *         </important>
                *         <p>By default, the spend limit is set to the maximum allowed by Amazon SNS. If you want to
                *             raise the limit, submit an <a href="https://console.aws.amazon.com/support/home#/case/create?issueType=service-limit-increase&limitType=service-code-sns">SNS Limit Increase case</a>. For <b>New limit
                *                 value</b>, enter your desired monthly spend limit. In the <b>Use Case Description</b> field, explain that you are requesting
                *             an SMS monthly spend limit increase.</p>
                *         <p>
                *             <code>DeliveryStatusIAMRole</code> – The ARN of the IAM role that allows Amazon SNS to write
                *             logs about SMS deliveries in CloudWatch Logs. For each SMS message that you send, Amazon SNS
                *             writes a log that includes the message price, the success or failure status, the reason
                *             for failure (if the message failed), the message dwell time, and other
                *             information.</p>
                *         <p>
                *             <code>DeliveryStatusSuccessSamplingRate</code> – The percentage of successful SMS
                *             deliveries for which Amazon SNS will write logs in CloudWatch Logs. The value can be an
                *             integer from 0 - 100. For example, to write logs only for failed deliveries, set this
                *             value to <code>0</code>. To write logs for 10% of your successful deliveries, set it to
                *                 <code>10</code>.</p>
                *         <p>
                *             <code>DefaultSenderID</code> – A string, such as your business brand, that is displayed
                *             as the sender on the receiving device. Support for sender IDs varies by country. The
                *             sender ID can be 1 - 11 alphanumeric characters, and it must contain at least one
                *             letter.</p>
                *         <p>
                *             <code>DefaultSMSType</code> – The type of SMS message that you will send by default. You
                *             can assign the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>Promotional</code> – (Default) Noncritical messages, such as marketing
                *                     messages. Amazon SNS optimizes the message delivery to incur the lowest cost.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <code>Transactional</code> – Critical messages that support customer
                *                     transactions, such as one-time passcodes for multi-factor authentication. Amazon SNS optimizes the message delivery to achieve the highest reliability.</p>
                *             </li>
                *          </ul>
                *         <p>
                *             <code>UsageReportS3Bucket</code> – The name of the Amazon S3 bucket to receive daily SMS
                *             usage reports from Amazon SNS. Each day, Amazon SNS will deliver a usage report as a CSV file to
                *             the bucket. The report includes the following information for each SMS message that was
                *             successfully delivered by your Amazon Web Services account:</p>
                *         <ul>
                *             <li>
                *                 <p>Time that the message was published (in UTC)</p>
                *             </li>
                *             <li>
                *                 <p>Message ID</p>
                *             </li>
                *             <li>
                *                 <p>Destination phone number</p>
                *             </li>
                *             <li>
                *                 <p>Message type</p>
                *             </li>
                *             <li>
                *                 <p>Delivery status</p>
                *             </li>
                *             <li>
                *                 <p>Message price (in USD)</p>
                *             </li>
                *             <li>
                *                 <p>Part number (a message is split into multiple parts if it is too long for a
                *                     single message)</p>
                *             </li>
                *             <li>
                *                 <p>Total number of parts</p>
                *             </li>
                *          </ul>
                *         <p>To receive the report, the bucket must have a policy that allows the Amazon SNS service
                *             principal to perform the <code>s3:PutObject</code> and <code>s3:GetBucketLocation</code>
                *             actions.</p>
                *         <p>For an example bucket policy and usage report, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sms_stats.html">Monitoring SMS Activity</a> in the
                *                 <i>Amazon SNS Developer Guide</i>.</p>
                */
            attributes: Record<string, string> | undefined;
    }
    export namespace SetSMSAttributesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetSMSAttributesInput) => any;
    }
    /**
        * <p>The response for the SetSMSAttributes action.</p>
        */
    export interface SetSMSAttributesResponse {
    }
    export namespace SetSMSAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetSMSAttributesResponse) => any;
    }
    /**
        * <p>Input for SetSubscriptionAttributes action.</p>
        */
    export interface SetSubscriptionAttributesInput {
            /**
                * <p>The ARN of the subscription to modify.</p>
                */
            SubscriptionArn: string | undefined;
            /**
                * <p>A map of attributes with their corresponding values.</p>
                *         <p>The following lists the names, descriptions, and values of the special request
                *             parameters that this action uses:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>DeliveryPolicy</code> – The policy that defines how Amazon SNS retries
                *                     failed deliveries to HTTP/S endpoints.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>FilterPolicy</code> – The simple JSON object that lets your
                *                     subscriber receive only a subset of messages, rather than receiving every
                *                     message published to the topic.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>RawMessageDelivery</code> – When set to <code>true</code>,
                *                     enables raw message delivery to Amazon SQS or HTTP/S endpoints. This eliminates the
                *                     need for the endpoints to process JSON formatting, which is otherwise created
                *                     for Amazon SNS metadata.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>RedrivePolicy</code> – When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue.
                *     Messages that can't be delivered due to client errors (for example, when the subscribed endpoint is unreachable)
                *     or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held
                *     in the dead-letter queue for further analysis or reprocessing.</p>
                *             </li>
                *          </ul>
                *
                *
                *         <p>The following attribute applies only to Amazon Kinesis Data Firehose delivery stream subscriptions:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>SubscriptionRoleArn</code> – The ARN of the IAM role that has the following:</p>
                *                 <ul>
                *                   <li>
                *                         <p>Permission to write to the Kinesis Data Firehose delivery stream</p>
                *                     </li>
                *                   <li>
                *                         <p>Amazon SNS listed as a trusted entity</p>
                *                     </li>
                *                </ul>
                *                 <p>Specifying a valid ARN for this attribute is required for Kinesis Data Firehose delivery stream subscriptions.
                *                 For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html">Fanout
                *                     to Kinesis Data Firehose delivery streams</a> in the <i>Amazon SNS Developer Guide</i>.</p>
                *                     </li>
                *          </ul>
                */
            AttributeName: string | undefined;
            /**
                * <p>The new value for the attribute in JSON format.</p>
                */
            AttributeValue?: string;
    }
    export namespace SetSubscriptionAttributesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetSubscriptionAttributesInput) => any;
    }
    /**
        * <p>Input for SetTopicAttributes action.</p>
        */
    export interface SetTopicAttributesInput {
            /**
                * <p>The ARN of the topic to modify.</p>
                */
            TopicArn: string | undefined;
            /**
                * <p>A map of attributes with their corresponding values.</p>
                *         <p>The following lists the names, descriptions, and values of the special request
                *             parameters that the <code>SetTopicAttributes</code> action uses:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>DeliveryPolicy</code> – The policy that defines how Amazon SNS retries
                *                     failed deliveries to HTTP/S endpoints.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DisplayName</code> – The display name to use for a topic with SMS
                *                     subscriptions.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Policy</code> – The policy that defines who can access your
                *                     topic. By default, only the topic owner can publish or subscribe to the
                *                     topic.</p>
                *             </li>
                *          </ul>
                *
                *         <p>The following attribute applies only to <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html">server-side-encryption</a>:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <code>KmsMasterKeyId</code> – The ID of an Amazon Web Services managed customer master
                *                     key (CMK) for Amazon SNS or a custom CMK. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html#sse-key-terms">Key
                *                         Terms</a>. For more examples, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters">KeyId</a> in the <i>Key Management Service API
                *                         Reference</i>. </p>
                *             </li>
                *          </ul>
                *
                *
                *         <p>The following attribute applies only to <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html">FIFO topics</a>:</p>
                *         <ul>
                *             <li>
                *                <p>
                *                     <code>ContentBasedDeduplication</code> – Enables content-based deduplication for
                *                     FIFO topics.</p>
                *
                *                 <ul>
                *                   <li>
                *                         <p>By default, <code>ContentBasedDeduplication</code> is set to <code>false</code>.
                *                             If you create a FIFO topic and this attribute is <code>false</code>, you must
                *                             specify a value for the <code>MessageDeduplicationId</code> parameter for the
                *                             <a href="https://docs.aws.amazon.com/sns/latest/api/API_Publish.html">Publish</a> action. </p>
                *                     </li>
                *                   <li>
                *                         <p>When you set <code>ContentBasedDeduplication</code> to <code>true</code>,
                *                             Amazon SNS uses a SHA-256 hash to generate the <code>MessageDeduplicationId</code> using
                *                             the body of the message (but not the attributes of the message).</p>
                *                         <p>(Optional) To override the generated value, you can specify a value
                *                             for the <code>MessageDeduplicationId</code> parameter for the <code>Publish</code>
                *                             action.</p>
                *                      </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            AttributeName: string | undefined;
            /**
                * <p>The new value for the attribute.</p>
                */
            AttributeValue?: string;
    }
    export namespace SetTopicAttributesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetTopicAttributesInput) => any;
    }
    /**
        * <p>Input for Subscribe action.</p>
        */
    export interface SubscribeInput {
            /**
                * <p>The ARN of the topic you want to subscribe to.</p>
                */
            TopicArn: string | undefined;
            /**
                * <p>The protocol that you want to use. Supported protocols include:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>http</code> – delivery of JSON-encoded message via HTTP
                *                     POST</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>https</code> – delivery of JSON-encoded message via HTTPS
                *                     POST</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>email</code> – delivery of message via SMTP</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>email-json</code> – delivery of JSON-encoded message via
                *                     SMTP</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sms</code> – delivery of message via SMS</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqs</code> – delivery of JSON-encoded message to an Amazon SQS
                *                     queue</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>application</code> – delivery of JSON-encoded message to an
                *                     EndpointArn for a mobile app and device</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>lambda</code> – delivery of JSON-encoded message to an Lambda
                *                     function</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>firehose</code> – delivery of JSON-encoded message to an Amazon
                *                     Kinesis Data Firehose delivery stream.</p>
                *             </li>
                *          </ul>
                */
            Protocol: string | undefined;
            /**
                * <p>The endpoint that you want to receive notifications. Endpoints vary by
                *             protocol:</p>
                *         <ul>
                *             <li>
                *                 <p>For the <code>http</code> protocol, the (public) endpoint is a URL beginning
                *                     with <code>http://</code>.</p>
                *             </li>
                *             <li>
                *                 <p>For the <code>https</code> protocol, the (public) endpoint is a URL beginning
                *                     with <code>https://</code>.</p>
                *             </li>
                *             <li>
                *                 <p>For the <code>email</code> protocol, the endpoint is an email address.</p>
                *             </li>
                *             <li>
                *                 <p>For the <code>email-json</code> protocol, the endpoint is an email
                *                     address.</p>
                *             </li>
                *             <li>
                *                 <p>For the <code>sms</code> protocol, the endpoint is a phone number of an
                *                     SMS-enabled device.</p>
                *             </li>
                *             <li>
                *                 <p>For the <code>sqs</code> protocol, the endpoint is the ARN of an Amazon SQS
                *                     queue.</p>
                *             </li>
                *             <li>
                *                 <p>For the <code>application</code> protocol, the endpoint is the EndpointArn of
                *                     a mobile app and device.</p>
                *             </li>
                *             <li>
                *                 <p>For the <code>lambda</code> protocol, the endpoint is the ARN of an Lambda
                *                     function.</p>
                *             </li>
                *             <li>
                *                 <p>For the <code>firehose</code> protocol, the endpoint is the ARN of an Amazon
                *                     Kinesis Data Firehose delivery stream.</p>
                *             </li>
                *          </ul>
                */
            Endpoint?: string;
            /**
                * <p>A map of attributes with their corresponding values.</p>
                *         <p>The following lists the names, descriptions, and values of the special request
                *             parameters that the <code>Subscribe</code> action uses:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>DeliveryPolicy</code> – The policy that defines how Amazon SNS retries
                *                     failed deliveries to HTTP/S endpoints.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>FilterPolicy</code> – The simple JSON object that lets your
                *                     subscriber receive only a subset of messages, rather than receiving every
                *                     message published to the topic.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>RawMessageDelivery</code> – When set to <code>true</code>,
                *                     enables raw message delivery to Amazon SQS or HTTP/S endpoints. This eliminates the
                *                     need for the endpoints to process JSON formatting, which is otherwise created
                *                     for Amazon SNS metadata.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>RedrivePolicy</code> – When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue.
                *     Messages that can't be delivered due to client errors (for example, when the subscribed endpoint is unreachable)
                *     or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held
                *     in the dead-letter queue for further analysis or reprocessing.</p>
                *             </li>
                *          </ul>
                *
                *
                *         <p>The following attribute applies only to Amazon Kinesis Data Firehose delivery stream subscriptions:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>SubscriptionRoleArn</code> – The ARN of the IAM role that has the following:</p>
                *                 <ul>
                *                   <li>
                *                         <p>Permission to write to the Kinesis Data Firehose delivery stream</p>
                *                     </li>
                *                   <li>
                *                         <p>Amazon SNS listed as a trusted entity</p>
                *                     </li>
                *                </ul>
                *                 <p>Specifying a valid ARN for this attribute is required for Kinesis Data Firehose delivery stream subscriptions.
                *                 For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html">Fanout
                *                     to Kinesis Data Firehose delivery streams</a> in the <i>Amazon SNS Developer Guide</i>.</p>
                *                     </li>
                *          </ul>
                */
            Attributes?: Record<string, string>;
            /**
                * <p>Sets whether the response from the <code>Subscribe</code> request includes the
                *             subscription ARN, even if the subscription is not yet confirmed.</p>
                *         <p>If you set this parameter to <code>true</code>, the response includes the ARN in all
                *             cases, even if the subscription is not yet confirmed. In addition to the ARN for
                *             confirmed subscriptions, the response also includes the <code>pending
                *                 subscription</code> ARN value for subscriptions that aren't yet confirmed. A
                *             subscription becomes confirmed when the subscriber calls the
                *                 <code>ConfirmSubscription</code> action with a confirmation token.</p>
                *         <p></p>
                *         <p>The default value is <code>false</code>.</p>
                */
            ReturnSubscriptionArn?: boolean;
    }
    export namespace SubscribeInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SubscribeInput) => any;
    }
    /**
        * <p>Response for Subscribe action.</p>
        */
    export interface SubscribeResponse {
            /**
                * <p>The ARN of the subscription if it is confirmed, or the string "pending confirmation"
                *             if the subscription requires confirmation. However, if the API request parameter
                *                 <code>ReturnSubscriptionArn</code> is true, then the value is always the
                *             subscription ARN, even if the subscription requires confirmation.</p>
                */
            SubscriptionArn?: string;
    }
    export namespace SubscribeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SubscribeResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The ARN of the topic to which to add tags.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The tags to be added to the specified topic. A tag consists of a required key and an
                *             optional value.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    /**
        * <p>Input for Unsubscribe action.</p>
        */
    export interface UnsubscribeInput {
            /**
                * <p>The ARN of the subscription to be deleted.</p>
                */
            SubscriptionArn: string | undefined;
    }
    export namespace UnsubscribeInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UnsubscribeInput) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The ARN of the topic from which to remove tags.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The list of tag keys to remove from the specified topic.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    /**
        * <p>Indicates that the one-time password (OTP) used for verification is invalid.</p>
        */
    export class VerificationException extends __BaseException {
            readonly name: "VerificationException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * <p>The status of the verification error.</p>
                */
            Status: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<VerificationException, __BaseException>);
    }
    export interface VerifySMSSandboxPhoneNumberInput {
            /**
                * <p>The destination phone number to verify.</p>
                */
            PhoneNumber: string | undefined;
            /**
                * <p>The OTP sent to the destination number from the
                *                 <code>CreateSMSSandBoxPhoneNumber</code> call.</p>
                */
            OneTimePassword: string | undefined;
    }
    export namespace VerifySMSSandboxPhoneNumberInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VerifySMSSandboxPhoneNumberInput) => any;
    }
    /**
        * <p>The destination phone number's verification status.</p>
        */
    export interface VerifySMSSandboxPhoneNumberResult {
    }
    export namespace VerifySMSSandboxPhoneNumberResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VerifySMSSandboxPhoneNumberResult) => any;
    }
}

declare module '@aws-sdk/client-sns/node_modules/@aws-sdk/client-sns/dist-types/models/SNSServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from SNS service.
        */
    export class SNSServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

