// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-synthetics' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AssociateResourceCommandInput, AssociateResourceCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/AssociateResourceCommand";
    import { CreateCanaryCommandInput, CreateCanaryCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/CreateCanaryCommand";
    import { CreateGroupCommandInput, CreateGroupCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/CreateGroupCommand";
    import { DeleteCanaryCommandInput, DeleteCanaryCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/DeleteCanaryCommand";
    import { DeleteGroupCommandInput, DeleteGroupCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/DeleteGroupCommand";
    import { DescribeCanariesCommandInput, DescribeCanariesCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/DescribeCanariesCommand";
    import { DescribeCanariesLastRunCommandInput, DescribeCanariesLastRunCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/DescribeCanariesLastRunCommand";
    import { DescribeRuntimeVersionsCommandInput, DescribeRuntimeVersionsCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/DescribeRuntimeVersionsCommand";
    import { DisassociateResourceCommandInput, DisassociateResourceCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/DisassociateResourceCommand";
    import { GetCanaryCommandInput, GetCanaryCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/GetCanaryCommand";
    import { GetCanaryRunsCommandInput, GetCanaryRunsCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/GetCanaryRunsCommand";
    import { GetGroupCommandInput, GetGroupCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/GetGroupCommand";
    import { ListAssociatedGroupsCommandInput, ListAssociatedGroupsCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/ListAssociatedGroupsCommand";
    import { ListGroupResourcesCommandInput, ListGroupResourcesCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/ListGroupResourcesCommand";
    import { ListGroupsCommandInput, ListGroupsCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/ListGroupsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/ListTagsForResourceCommand";
    import { StartCanaryCommandInput, StartCanaryCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/StartCanaryCommand";
    import { StopCanaryCommandInput, StopCanaryCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/StopCanaryCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/UntagResourceCommand";
    import { UpdateCanaryCommandInput, UpdateCanaryCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/UpdateCanaryCommand";
    import { SyntheticsClient } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient";
    /**
        * <fullname>Amazon CloudWatch Synthetics</fullname>
        *          <p>You can use Amazon CloudWatch Synthetics to continually monitor your services. You can
        *          create and manage <i>canaries</i>, which are modular, lightweight scripts
        *          that monitor your endpoints and APIs
        *             from the outside-in. You can set up your canaries to run
        *          24 hours a day, once per minute. The canaries help you check the availability and latency
        *          of your web services and troubleshoot anomalies by investigating load time data,
        *          screenshots of the UI, logs, and metrics. The canaries seamlessly integrate with CloudWatch
        *          ServiceLens to help you trace the causes of impacted nodes in your applications. For more
        *          information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ServiceLens.html">Using ServiceLens to Monitor
        *             the Health of Your Applications</a> in the <i>Amazon CloudWatch User
        *             Guide</i>.</p>
        *
        *          <p>Before you create and manage canaries, be aware of the security considerations. For more
        *          information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html">Security
        *             Considerations for Synthetics Canaries</a>.</p>
        */
    export class Synthetics extends SyntheticsClient {
            /**
                * <p>Associates a canary with a group. Using groups can help you with
                *          managing and automating your canaries, and you can also view aggregated run results and statistics
                *          for all canaries in a group. </p>
                *          <p>You must run this operation in the Region where the canary exists.</p>
                */
            associateResource(args: AssociateResourceCommandInput, options?: __HttpHandlerOptions): Promise<AssociateResourceCommandOutput>;
            associateResource(args: AssociateResourceCommandInput, cb: (err: any, data?: AssociateResourceCommandOutput) => void): void;
            associateResource(args: AssociateResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateResourceCommandOutput) => void): void;
            /**
                * <p>Creates a canary. Canaries are scripts that monitor your endpoints and APIs from the
                *          outside-in. Canaries help you check the availability and latency of your web services and
                *          troubleshoot anomalies by investigating load time data, screenshots of the UI, logs, and
                *          metrics. You can set up a canary to run continuously or just once. </p>
                *          <p>Do not use <code>CreateCanary</code> to modify an existing canary. Use <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_UpdateCanary.html">UpdateCanary</a> instead.</p>
                *          <p>To create canaries, you must have the <code>CloudWatchSyntheticsFullAccess</code> policy.
                *          If you are creating a new IAM role for the canary, you also need the
                *          <code>iam:CreateRole</code>, <code>iam:CreatePolicy</code> and
                *             <code>iam:AttachRolePolicy</code> permissions. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Roles">Necessary
                *             Roles and Permissions</a>.</p>
                *          <p>Do not include secrets or proprietary information in your canary names. The canary name
                *          makes up part of the Amazon Resource Name (ARN) for the canary, and the ARN is included in
                *          outbound calls over the internet. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html">Security
                *             Considerations for Synthetics Canaries</a>.</p>
                */
            createCanary(args: CreateCanaryCommandInput, options?: __HttpHandlerOptions): Promise<CreateCanaryCommandOutput>;
            createCanary(args: CreateCanaryCommandInput, cb: (err: any, data?: CreateCanaryCommandOutput) => void): void;
            createCanary(args: CreateCanaryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateCanaryCommandOutput) => void): void;
            /**
                * <p>Creates a group which you can use to associate canaries with each other, including cross-Region
                *          canaries. Using groups can help you with
                *          managing and automating your canaries, and you can also view aggregated run results and statistics
                *       for all canaries in a group. </p>
                *          <p>Groups are global resources. When you create a group, it is replicated across Amazon Web Services Regions, and
                *          you can view it and add canaries to it from any Region.
                *          Although the group ARN format reflects the Region name where it was created, a group is not constrained to any Region.
                *          This means that you can put canaries from multiple Regions into the same group, and then use
                *       that group to view and manage all of those canaries in a single view.</p>
                *          <p>Groups are supported in all Regions except the Regions that are disabled by default. For more information
                *          about these Regions, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande-manage.html#rande-manage-enable">Enabling a Region</a>.</p>
                *          <p>Each group can contain as many as 10 canaries. You can have as many as 20 groups in your account. Any single canary
                *       can be a member of up to 10 groups.</p>
                */
            createGroup(args: CreateGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateGroupCommandOutput>;
            createGroup(args: CreateGroupCommandInput, cb: (err: any, data?: CreateGroupCommandOutput) => void): void;
            createGroup(args: CreateGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateGroupCommandOutput) => void): void;
            /**
                * <p>Permanently deletes the specified canary.</p>
                *          <p>If you specify <code>DeleteLambda</code> to <code>true</code>, CloudWatch Synthetics also deletes
                *          the Lambda functions and layers that are used by the canary.</p>
                *          <p>Other resources used and created by the canary are not automatically deleted.
                *          After you delete a canary that you do not intend to
                *          use again, you
                *       should also delete the following:</p>
                *          <ul>
                *             <li>
                *                <p>The CloudWatch alarms created for this canary. These alarms have a name of
                *                      <code>Synthetics-SharpDrop-Alarm-<i>MyCanaryName</i>
                *                   </code>.</p>
                *             </li>
                *             <li>
                *                <p>Amazon S3 objects and buckets, such as the canary's artifact location.</p>
                *             </li>
                *             <li>
                *                <p>IAM roles created for the canary. If they were created in the console, these roles
                *                have the name <code>
                *                      role/service-role/CloudWatchSyntheticsRole-<i>MyCanaryName</i>
                *                   </code>.</p>
                *             </li>
                *             <li>
                *                <p>CloudWatch Logs log groups created for the canary. These logs groups have the name
                *                      <code>/aws/lambda/cwsyn-<i>MyCanaryName</i>
                *                   </code>. </p>
                *             </li>
                *          </ul>
                *
                *          <p>Before you delete a canary, you might want to use <code>GetCanary</code> to display
                *          the information about this canary. Make
                *          note of the information returned by this operation so that you can delete these resources
                *          after you delete the canary.</p>
                */
            deleteCanary(args: DeleteCanaryCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCanaryCommandOutput>;
            deleteCanary(args: DeleteCanaryCommandInput, cb: (err: any, data?: DeleteCanaryCommandOutput) => void): void;
            deleteCanary(args: DeleteCanaryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCanaryCommandOutput) => void): void;
            /**
                * <p>Deletes a group. The group doesn't need to be empty to be deleted. If there are canaries in the group,
                *          they are not deleted when you delete the group.
                *       </p>
                *          <p>Groups are a global resource that appear in all Regions, but the request to delete a group
                *       must be made from its home Region. You can find the home Region of a group within its ARN.</p>
                */
            deleteGroup(args: DeleteGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteGroupCommandOutput>;
            deleteGroup(args: DeleteGroupCommandInput, cb: (err: any, data?: DeleteGroupCommandOutput) => void): void;
            deleteGroup(args: DeleteGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteGroupCommandOutput) => void): void;
            /**
                * <p>This operation returns a list of the canaries in your account, along with full details
                *       about each canary.</p>
                *          <p>This operation supports resource-level authorization using an IAM policy and
                *       the <code>Names</code> parameter. If you specify the <code>Names</code> parameter, the operation is successful only if you have authorization to view
                *          all the canaries that you specify in your request. If you do not have permission to view any of
                *          the canaries, the request fails with a 403 response.</p>
                *          <p>You are required to use the <code>Names</code> parameter if you are logged on to a user or role that has an
                *          IAM policy that restricts which canaries that you are allowed to view. For more information,
                *          see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Restricted.html">
                *             Limiting a user to viewing specific canaries</a>.</p>
                */
            describeCanaries(args: DescribeCanariesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeCanariesCommandOutput>;
            describeCanaries(args: DescribeCanariesCommandInput, cb: (err: any, data?: DescribeCanariesCommandOutput) => void): void;
            describeCanaries(args: DescribeCanariesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeCanariesCommandOutput) => void): void;
            /**
                * <p>Use this operation to see information from the most recent run of each canary that you have created.</p>
                *
                *          <p>This operation supports resource-level authorization using an IAM policy and
                *          the <code>Names</code> parameter. If you specify the <code>Names</code> parameter, the operation is successful only if you have authorization to view
                *          all the canaries that you specify in your request. If you do not have permission to view any of
                *          the canaries, the request fails with a 403 response.</p>
                *          <p>You are required to use the <code>Names</code> parameter if you are logged on to a user or role that has an
                *          IAM policy that restricts which canaries that you are allowed to view. For more information,
                *          see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Restricted.html">
                *             Limiting a user to viewing specific canaries</a>.</p>
                */
            describeCanariesLastRun(args: DescribeCanariesLastRunCommandInput, options?: __HttpHandlerOptions): Promise<DescribeCanariesLastRunCommandOutput>;
            describeCanariesLastRun(args: DescribeCanariesLastRunCommandInput, cb: (err: any, data?: DescribeCanariesLastRunCommandOutput) => void): void;
            describeCanariesLastRun(args: DescribeCanariesLastRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeCanariesLastRunCommandOutput) => void): void;
            /**
                * <p>Returns a list of Synthetics canary runtime versions. For more information,
                *          see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html">
                *             Canary Runtime Versions</a>.</p>
                */
            describeRuntimeVersions(args: DescribeRuntimeVersionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeRuntimeVersionsCommandOutput>;
            describeRuntimeVersions(args: DescribeRuntimeVersionsCommandInput, cb: (err: any, data?: DescribeRuntimeVersionsCommandOutput) => void): void;
            describeRuntimeVersions(args: DescribeRuntimeVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeRuntimeVersionsCommandOutput) => void): void;
            /**
                * <p>Removes a canary from a group. You must run this operation in the Region where the canary exists.</p>
                */
            disassociateResource(args: DisassociateResourceCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateResourceCommandOutput>;
            disassociateResource(args: DisassociateResourceCommandInput, cb: (err: any, data?: DisassociateResourceCommandOutput) => void): void;
            disassociateResource(args: DisassociateResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateResourceCommandOutput) => void): void;
            /**
                * <p>Retrieves complete information about one canary. You must specify
                *       the name of the canary that you want. To get a list of canaries
                *       and their names, use <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_DescribeCanaries.html">DescribeCanaries</a>.</p>
                */
            getCanary(args: GetCanaryCommandInput, options?: __HttpHandlerOptions): Promise<GetCanaryCommandOutput>;
            getCanary(args: GetCanaryCommandInput, cb: (err: any, data?: GetCanaryCommandOutput) => void): void;
            getCanary(args: GetCanaryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCanaryCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of runs for a specified canary.</p>
                */
            getCanaryRuns(args: GetCanaryRunsCommandInput, options?: __HttpHandlerOptions): Promise<GetCanaryRunsCommandOutput>;
            getCanaryRuns(args: GetCanaryRunsCommandInput, cb: (err: any, data?: GetCanaryRunsCommandOutput) => void): void;
            getCanaryRuns(args: GetCanaryRunsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCanaryRunsCommandOutput) => void): void;
            /**
                * <p>Returns information about one group. Groups are a global resource, so you can use this operation from
                *       any Region.</p>
                */
            getGroup(args: GetGroupCommandInput, options?: __HttpHandlerOptions): Promise<GetGroupCommandOutput>;
            getGroup(args: GetGroupCommandInput, cb: (err: any, data?: GetGroupCommandOutput) => void): void;
            getGroup(args: GetGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetGroupCommandOutput) => void): void;
            /**
                * <p>Returns a list of the groups that the specified canary is associated with. The canary
                *       that you specify must be in the current Region.</p>
                */
            listAssociatedGroups(args: ListAssociatedGroupsCommandInput, options?: __HttpHandlerOptions): Promise<ListAssociatedGroupsCommandOutput>;
            listAssociatedGroups(args: ListAssociatedGroupsCommandInput, cb: (err: any, data?: ListAssociatedGroupsCommandOutput) => void): void;
            listAssociatedGroups(args: ListAssociatedGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAssociatedGroupsCommandOutput) => void): void;
            /**
                * <p>This operation returns a list of the ARNs of the canaries that are associated with the specified group.</p>
                */
            listGroupResources(args: ListGroupResourcesCommandInput, options?: __HttpHandlerOptions): Promise<ListGroupResourcesCommandOutput>;
            listGroupResources(args: ListGroupResourcesCommandInput, cb: (err: any, data?: ListGroupResourcesCommandOutput) => void): void;
            listGroupResources(args: ListGroupResourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListGroupResourcesCommandOutput) => void): void;
            /**
                * <p>Returns a list of all groups in the account, displaying their names, unique IDs, and ARNs. The groups
                *       from all Regions are returned.</p>
                */
            listGroups(args: ListGroupsCommandInput, options?: __HttpHandlerOptions): Promise<ListGroupsCommandOutput>;
            listGroups(args: ListGroupsCommandInput, cb: (err: any, data?: ListGroupsCommandOutput) => void): void;
            listGroups(args: ListGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListGroupsCommandOutput) => void): void;
            /**
                * <p>Displays the tags associated with a canary or group.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Use this operation to run a canary that has already been created.
                *          The frequency of the canary runs is determined by the value of the canary's <code>Schedule</code>. To see a canary's schedule,
                *          use <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_GetCanary.html">GetCanary</a>.</p>
                */
            startCanary(args: StartCanaryCommandInput, options?: __HttpHandlerOptions): Promise<StartCanaryCommandOutput>;
            startCanary(args: StartCanaryCommandInput, cb: (err: any, data?: StartCanaryCommandOutput) => void): void;
            startCanary(args: StartCanaryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartCanaryCommandOutput) => void): void;
            /**
                * <p>Stops the canary to prevent all future runs. If the canary is currently running,the
                *         run that is in progress completes on its own, publishes metrics, and uploads artifacts, but
                *          it is not recorded in Synthetics as a completed run.</p>
                *          <p>You can use <code>StartCanary</code> to start it running again
                *          with the canary’s current schedule at any point in the future.  </p>
                */
            stopCanary(args: StopCanaryCommandInput, options?: __HttpHandlerOptions): Promise<StopCanaryCommandOutput>;
            stopCanary(args: StopCanaryCommandInput, cb: (err: any, data?: StopCanaryCommandOutput) => void): void;
            stopCanary(args: StopCanaryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopCanaryCommandOutput) => void): void;
            /**
                * <p>Assigns one or more tags (key-value pairs) to the specified canary or group. </p>
                *          <p>Tags can help you organize and categorize your
                *          resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with
                *          certain tag values.</p>
                *          <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p>
                *          <p>You can use the <code>TagResource</code> action with a resource that already has tags. If you specify a new
                *          tag key for the resource,
                *          this tag is appended to the list of tags associated
                *          with the resource. If you specify a tag key that is already associated with the resource, the new tag
                *          value that you specify replaces
                *          the previous value for that tag.</p>
                *          <p>You can associate as many as 50 tags with a canary or group.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes one or more tags from the specified resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates the configuration of a canary that has
                *          already been created.</p>
                *          <p>You can't use this operation to update the tags of an existing canary. To
                *          change the tags of an existing canary, use
                *          <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_TagResource.html">TagResource</a>.</p>
                */
            updateCanary(args: UpdateCanaryCommandInput, options?: __HttpHandlerOptions): Promise<UpdateCanaryCommandOutput>;
            updateCanary(args: UpdateCanaryCommandInput, cb: (err: any, data?: UpdateCanaryCommandOutput) => void): void;
            updateCanary(args: UpdateCanaryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateCanaryCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/AssociateResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AssociateResourceRequest, AssociateResourceResponse } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SyntheticsClientResolvedConfig } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient";
    export interface AssociateResourceCommandInput extends AssociateResourceRequest {
    }
    export interface AssociateResourceCommandOutput extends AssociateResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Associates a canary with a group. Using groups can help you with
        *          managing and automating your canaries, and you can also view aggregated run results and statistics
        *          for all canaries in a group. </p>
        *          <p>You must run this operation in the Region where the canary exists.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SyntheticsClient, AssociateResourceCommand } from "@aws-sdk/client-synthetics"; // ES Modules import
        * // const { SyntheticsClient, AssociateResourceCommand } = require("@aws-sdk/client-synthetics"); // CommonJS import
        * const client = new SyntheticsClient(config);
        * const command = new AssociateResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateResourceCommandInput} for command's `input` shape.
        * @see {@link AssociateResourceCommandOutput} for command's `response` shape.
        * @see {@link SyntheticsClientResolvedConfig | config} for SyntheticsClient's `config` shape.
        *
        */
    export class AssociateResourceCommand extends $Command<AssociateResourceCommandInput, AssociateResourceCommandOutput, SyntheticsClientResolvedConfig> {
            readonly input: AssociateResourceCommandInput;
            constructor(input: AssociateResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SyntheticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateResourceCommandInput, AssociateResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/CreateCanaryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateCanaryRequest, CreateCanaryResponse } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SyntheticsClientResolvedConfig } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient";
    export interface CreateCanaryCommandInput extends CreateCanaryRequest {
    }
    export interface CreateCanaryCommandOutput extends CreateCanaryResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a canary. Canaries are scripts that monitor your endpoints and APIs from the
        *          outside-in. Canaries help you check the availability and latency of your web services and
        *          troubleshoot anomalies by investigating load time data, screenshots of the UI, logs, and
        *          metrics. You can set up a canary to run continuously or just once. </p>
        *          <p>Do not use <code>CreateCanary</code> to modify an existing canary. Use <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_UpdateCanary.html">UpdateCanary</a> instead.</p>
        *          <p>To create canaries, you must have the <code>CloudWatchSyntheticsFullAccess</code> policy.
        *          If you are creating a new IAM role for the canary, you also need the
        *          <code>iam:CreateRole</code>, <code>iam:CreatePolicy</code> and
        *             <code>iam:AttachRolePolicy</code> permissions. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Roles">Necessary
        *             Roles and Permissions</a>.</p>
        *          <p>Do not include secrets or proprietary information in your canary names. The canary name
        *          makes up part of the Amazon Resource Name (ARN) for the canary, and the ARN is included in
        *          outbound calls over the internet. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html">Security
        *             Considerations for Synthetics Canaries</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SyntheticsClient, CreateCanaryCommand } from "@aws-sdk/client-synthetics"; // ES Modules import
        * // const { SyntheticsClient, CreateCanaryCommand } = require("@aws-sdk/client-synthetics"); // CommonJS import
        * const client = new SyntheticsClient(config);
        * const command = new CreateCanaryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateCanaryCommandInput} for command's `input` shape.
        * @see {@link CreateCanaryCommandOutput} for command's `response` shape.
        * @see {@link SyntheticsClientResolvedConfig | config} for SyntheticsClient's `config` shape.
        *
        */
    export class CreateCanaryCommand extends $Command<CreateCanaryCommandInput, CreateCanaryCommandOutput, SyntheticsClientResolvedConfig> {
            readonly input: CreateCanaryCommandInput;
            constructor(input: CreateCanaryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SyntheticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateCanaryCommandInput, CreateCanaryCommandOutput>;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/CreateGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateGroupRequest, CreateGroupResponse } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SyntheticsClientResolvedConfig } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient";
    export interface CreateGroupCommandInput extends CreateGroupRequest {
    }
    export interface CreateGroupCommandOutput extends CreateGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a group which you can use to associate canaries with each other, including cross-Region
        *          canaries. Using groups can help you with
        *          managing and automating your canaries, and you can also view aggregated run results and statistics
        *       for all canaries in a group. </p>
        *          <p>Groups are global resources. When you create a group, it is replicated across Amazon Web Services Regions, and
        *          you can view it and add canaries to it from any Region.
        *          Although the group ARN format reflects the Region name where it was created, a group is not constrained to any Region.
        *          This means that you can put canaries from multiple Regions into the same group, and then use
        *       that group to view and manage all of those canaries in a single view.</p>
        *          <p>Groups are supported in all Regions except the Regions that are disabled by default. For more information
        *          about these Regions, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande-manage.html#rande-manage-enable">Enabling a Region</a>.</p>
        *          <p>Each group can contain as many as 10 canaries. You can have as many as 20 groups in your account. Any single canary
        *       can be a member of up to 10 groups.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SyntheticsClient, CreateGroupCommand } from "@aws-sdk/client-synthetics"; // ES Modules import
        * // const { SyntheticsClient, CreateGroupCommand } = require("@aws-sdk/client-synthetics"); // CommonJS import
        * const client = new SyntheticsClient(config);
        * const command = new CreateGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateGroupCommandInput} for command's `input` shape.
        * @see {@link CreateGroupCommandOutput} for command's `response` shape.
        * @see {@link SyntheticsClientResolvedConfig | config} for SyntheticsClient's `config` shape.
        *
        */
    export class CreateGroupCommand extends $Command<CreateGroupCommandInput, CreateGroupCommandOutput, SyntheticsClientResolvedConfig> {
            readonly input: CreateGroupCommandInput;
            constructor(input: CreateGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SyntheticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateGroupCommandInput, CreateGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/DeleteCanaryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteCanaryRequest, DeleteCanaryResponse } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SyntheticsClientResolvedConfig } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient";
    export interface DeleteCanaryCommandInput extends DeleteCanaryRequest {
    }
    export interface DeleteCanaryCommandOutput extends DeleteCanaryResponse, __MetadataBearer {
    }
    /**
        * <p>Permanently deletes the specified canary.</p>
        *          <p>If you specify <code>DeleteLambda</code> to <code>true</code>, CloudWatch Synthetics also deletes
        *          the Lambda functions and layers that are used by the canary.</p>
        *          <p>Other resources used and created by the canary are not automatically deleted.
        *          After you delete a canary that you do not intend to
        *          use again, you
        *       should also delete the following:</p>
        *          <ul>
        *             <li>
        *                <p>The CloudWatch alarms created for this canary. These alarms have a name of
        *                      <code>Synthetics-SharpDrop-Alarm-<i>MyCanaryName</i>
        *                   </code>.</p>
        *             </li>
        *             <li>
        *                <p>Amazon S3 objects and buckets, such as the canary's artifact location.</p>
        *             </li>
        *             <li>
        *                <p>IAM roles created for the canary. If they were created in the console, these roles
        *                have the name <code>
        *                      role/service-role/CloudWatchSyntheticsRole-<i>MyCanaryName</i>
        *                   </code>.</p>
        *             </li>
        *             <li>
        *                <p>CloudWatch Logs log groups created for the canary. These logs groups have the name
        *                      <code>/aws/lambda/cwsyn-<i>MyCanaryName</i>
        *                   </code>. </p>
        *             </li>
        *          </ul>
        *
        *          <p>Before you delete a canary, you might want to use <code>GetCanary</code> to display
        *          the information about this canary. Make
        *          note of the information returned by this operation so that you can delete these resources
        *          after you delete the canary.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SyntheticsClient, DeleteCanaryCommand } from "@aws-sdk/client-synthetics"; // ES Modules import
        * // const { SyntheticsClient, DeleteCanaryCommand } = require("@aws-sdk/client-synthetics"); // CommonJS import
        * const client = new SyntheticsClient(config);
        * const command = new DeleteCanaryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteCanaryCommandInput} for command's `input` shape.
        * @see {@link DeleteCanaryCommandOutput} for command's `response` shape.
        * @see {@link SyntheticsClientResolvedConfig | config} for SyntheticsClient's `config` shape.
        *
        */
    export class DeleteCanaryCommand extends $Command<DeleteCanaryCommandInput, DeleteCanaryCommandOutput, SyntheticsClientResolvedConfig> {
            readonly input: DeleteCanaryCommandInput;
            constructor(input: DeleteCanaryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SyntheticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteCanaryCommandInput, DeleteCanaryCommandOutput>;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/DeleteGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteGroupRequest, DeleteGroupResponse } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SyntheticsClientResolvedConfig } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient";
    export interface DeleteGroupCommandInput extends DeleteGroupRequest {
    }
    export interface DeleteGroupCommandOutput extends DeleteGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a group. The group doesn't need to be empty to be deleted. If there are canaries in the group,
        *          they are not deleted when you delete the group.
        *       </p>
        *          <p>Groups are a global resource that appear in all Regions, but the request to delete a group
        *       must be made from its home Region. You can find the home Region of a group within its ARN.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SyntheticsClient, DeleteGroupCommand } from "@aws-sdk/client-synthetics"; // ES Modules import
        * // const { SyntheticsClient, DeleteGroupCommand } = require("@aws-sdk/client-synthetics"); // CommonJS import
        * const client = new SyntheticsClient(config);
        * const command = new DeleteGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteGroupCommandOutput} for command's `response` shape.
        * @see {@link SyntheticsClientResolvedConfig | config} for SyntheticsClient's `config` shape.
        *
        */
    export class DeleteGroupCommand extends $Command<DeleteGroupCommandInput, DeleteGroupCommandOutput, SyntheticsClientResolvedConfig> {
            readonly input: DeleteGroupCommandInput;
            constructor(input: DeleteGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SyntheticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteGroupCommandInput, DeleteGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/DescribeCanariesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeCanariesRequest, DescribeCanariesResponse } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SyntheticsClientResolvedConfig } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient";
    export interface DescribeCanariesCommandInput extends DescribeCanariesRequest {
    }
    export interface DescribeCanariesCommandOutput extends DescribeCanariesResponse, __MetadataBearer {
    }
    /**
        * <p>This operation returns a list of the canaries in your account, along with full details
        *       about each canary.</p>
        *          <p>This operation supports resource-level authorization using an IAM policy and
        *       the <code>Names</code> parameter. If you specify the <code>Names</code> parameter, the operation is successful only if you have authorization to view
        *          all the canaries that you specify in your request. If you do not have permission to view any of
        *          the canaries, the request fails with a 403 response.</p>
        *          <p>You are required to use the <code>Names</code> parameter if you are logged on to a user or role that has an
        *          IAM policy that restricts which canaries that you are allowed to view. For more information,
        *          see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Restricted.html">
        *             Limiting a user to viewing specific canaries</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SyntheticsClient, DescribeCanariesCommand } from "@aws-sdk/client-synthetics"; // ES Modules import
        * // const { SyntheticsClient, DescribeCanariesCommand } = require("@aws-sdk/client-synthetics"); // CommonJS import
        * const client = new SyntheticsClient(config);
        * const command = new DescribeCanariesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeCanariesCommandInput} for command's `input` shape.
        * @see {@link DescribeCanariesCommandOutput} for command's `response` shape.
        * @see {@link SyntheticsClientResolvedConfig | config} for SyntheticsClient's `config` shape.
        *
        */
    export class DescribeCanariesCommand extends $Command<DescribeCanariesCommandInput, DescribeCanariesCommandOutput, SyntheticsClientResolvedConfig> {
            readonly input: DescribeCanariesCommandInput;
            constructor(input: DescribeCanariesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SyntheticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeCanariesCommandInput, DescribeCanariesCommandOutput>;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/DescribeCanariesLastRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeCanariesLastRunRequest, DescribeCanariesLastRunResponse } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SyntheticsClientResolvedConfig } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient";
    export interface DescribeCanariesLastRunCommandInput extends DescribeCanariesLastRunRequest {
    }
    export interface DescribeCanariesLastRunCommandOutput extends DescribeCanariesLastRunResponse, __MetadataBearer {
    }
    /**
        * <p>Use this operation to see information from the most recent run of each canary that you have created.</p>
        *
        *          <p>This operation supports resource-level authorization using an IAM policy and
        *          the <code>Names</code> parameter. If you specify the <code>Names</code> parameter, the operation is successful only if you have authorization to view
        *          all the canaries that you specify in your request. If you do not have permission to view any of
        *          the canaries, the request fails with a 403 response.</p>
        *          <p>You are required to use the <code>Names</code> parameter if you are logged on to a user or role that has an
        *          IAM policy that restricts which canaries that you are allowed to view. For more information,
        *          see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Restricted.html">
        *             Limiting a user to viewing specific canaries</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SyntheticsClient, DescribeCanariesLastRunCommand } from "@aws-sdk/client-synthetics"; // ES Modules import
        * // const { SyntheticsClient, DescribeCanariesLastRunCommand } = require("@aws-sdk/client-synthetics"); // CommonJS import
        * const client = new SyntheticsClient(config);
        * const command = new DescribeCanariesLastRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeCanariesLastRunCommandInput} for command's `input` shape.
        * @see {@link DescribeCanariesLastRunCommandOutput} for command's `response` shape.
        * @see {@link SyntheticsClientResolvedConfig | config} for SyntheticsClient's `config` shape.
        *
        */
    export class DescribeCanariesLastRunCommand extends $Command<DescribeCanariesLastRunCommandInput, DescribeCanariesLastRunCommandOutput, SyntheticsClientResolvedConfig> {
            readonly input: DescribeCanariesLastRunCommandInput;
            constructor(input: DescribeCanariesLastRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SyntheticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeCanariesLastRunCommandInput, DescribeCanariesLastRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/DescribeRuntimeVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeRuntimeVersionsRequest, DescribeRuntimeVersionsResponse } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SyntheticsClientResolvedConfig } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient";
    export interface DescribeRuntimeVersionsCommandInput extends DescribeRuntimeVersionsRequest {
    }
    export interface DescribeRuntimeVersionsCommandOutput extends DescribeRuntimeVersionsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of Synthetics canary runtime versions. For more information,
        *          see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html">
        *             Canary Runtime Versions</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SyntheticsClient, DescribeRuntimeVersionsCommand } from "@aws-sdk/client-synthetics"; // ES Modules import
        * // const { SyntheticsClient, DescribeRuntimeVersionsCommand } = require("@aws-sdk/client-synthetics"); // CommonJS import
        * const client = new SyntheticsClient(config);
        * const command = new DescribeRuntimeVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeRuntimeVersionsCommandInput} for command's `input` shape.
        * @see {@link DescribeRuntimeVersionsCommandOutput} for command's `response` shape.
        * @see {@link SyntheticsClientResolvedConfig | config} for SyntheticsClient's `config` shape.
        *
        */
    export class DescribeRuntimeVersionsCommand extends $Command<DescribeRuntimeVersionsCommandInput, DescribeRuntimeVersionsCommandOutput, SyntheticsClientResolvedConfig> {
            readonly input: DescribeRuntimeVersionsCommandInput;
            constructor(input: DescribeRuntimeVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SyntheticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeRuntimeVersionsCommandInput, DescribeRuntimeVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/DisassociateResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisassociateResourceRequest, DisassociateResourceResponse } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SyntheticsClientResolvedConfig } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient";
    export interface DisassociateResourceCommandInput extends DisassociateResourceRequest {
    }
    export interface DisassociateResourceCommandOutput extends DisassociateResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes a canary from a group. You must run this operation in the Region where the canary exists.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SyntheticsClient, DisassociateResourceCommand } from "@aws-sdk/client-synthetics"; // ES Modules import
        * // const { SyntheticsClient, DisassociateResourceCommand } = require("@aws-sdk/client-synthetics"); // CommonJS import
        * const client = new SyntheticsClient(config);
        * const command = new DisassociateResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateResourceCommandInput} for command's `input` shape.
        * @see {@link DisassociateResourceCommandOutput} for command's `response` shape.
        * @see {@link SyntheticsClientResolvedConfig | config} for SyntheticsClient's `config` shape.
        *
        */
    export class DisassociateResourceCommand extends $Command<DisassociateResourceCommandInput, DisassociateResourceCommandOutput, SyntheticsClientResolvedConfig> {
            readonly input: DisassociateResourceCommandInput;
            constructor(input: DisassociateResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SyntheticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateResourceCommandInput, DisassociateResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/GetCanaryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetCanaryRequest, GetCanaryResponse } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SyntheticsClientResolvedConfig } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient";
    export interface GetCanaryCommandInput extends GetCanaryRequest {
    }
    export interface GetCanaryCommandOutput extends GetCanaryResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves complete information about one canary. You must specify
        *       the name of the canary that you want. To get a list of canaries
        *       and their names, use <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_DescribeCanaries.html">DescribeCanaries</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SyntheticsClient, GetCanaryCommand } from "@aws-sdk/client-synthetics"; // ES Modules import
        * // const { SyntheticsClient, GetCanaryCommand } = require("@aws-sdk/client-synthetics"); // CommonJS import
        * const client = new SyntheticsClient(config);
        * const command = new GetCanaryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCanaryCommandInput} for command's `input` shape.
        * @see {@link GetCanaryCommandOutput} for command's `response` shape.
        * @see {@link SyntheticsClientResolvedConfig | config} for SyntheticsClient's `config` shape.
        *
        */
    export class GetCanaryCommand extends $Command<GetCanaryCommandInput, GetCanaryCommandOutput, SyntheticsClientResolvedConfig> {
            readonly input: GetCanaryCommandInput;
            constructor(input: GetCanaryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SyntheticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCanaryCommandInput, GetCanaryCommandOutput>;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/GetCanaryRunsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetCanaryRunsRequest, GetCanaryRunsResponse } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SyntheticsClientResolvedConfig } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient";
    export interface GetCanaryRunsCommandInput extends GetCanaryRunsRequest {
    }
    export interface GetCanaryRunsCommandOutput extends GetCanaryRunsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of runs for a specified canary.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SyntheticsClient, GetCanaryRunsCommand } from "@aws-sdk/client-synthetics"; // ES Modules import
        * // const { SyntheticsClient, GetCanaryRunsCommand } = require("@aws-sdk/client-synthetics"); // CommonJS import
        * const client = new SyntheticsClient(config);
        * const command = new GetCanaryRunsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCanaryRunsCommandInput} for command's `input` shape.
        * @see {@link GetCanaryRunsCommandOutput} for command's `response` shape.
        * @see {@link SyntheticsClientResolvedConfig | config} for SyntheticsClient's `config` shape.
        *
        */
    export class GetCanaryRunsCommand extends $Command<GetCanaryRunsCommandInput, GetCanaryRunsCommandOutput, SyntheticsClientResolvedConfig> {
            readonly input: GetCanaryRunsCommandInput;
            constructor(input: GetCanaryRunsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SyntheticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCanaryRunsCommandInput, GetCanaryRunsCommandOutput>;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/GetGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetGroupRequest, GetGroupResponse } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SyntheticsClientResolvedConfig } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient";
    export interface GetGroupCommandInput extends GetGroupRequest {
    }
    export interface GetGroupCommandOutput extends GetGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about one group. Groups are a global resource, so you can use this operation from
        *       any Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SyntheticsClient, GetGroupCommand } from "@aws-sdk/client-synthetics"; // ES Modules import
        * // const { SyntheticsClient, GetGroupCommand } = require("@aws-sdk/client-synthetics"); // CommonJS import
        * const client = new SyntheticsClient(config);
        * const command = new GetGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetGroupCommandInput} for command's `input` shape.
        * @see {@link GetGroupCommandOutput} for command's `response` shape.
        * @see {@link SyntheticsClientResolvedConfig | config} for SyntheticsClient's `config` shape.
        *
        */
    export class GetGroupCommand extends $Command<GetGroupCommandInput, GetGroupCommandOutput, SyntheticsClientResolvedConfig> {
            readonly input: GetGroupCommandInput;
            constructor(input: GetGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SyntheticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetGroupCommandInput, GetGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/ListAssociatedGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListAssociatedGroupsRequest, ListAssociatedGroupsResponse } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SyntheticsClientResolvedConfig } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient";
    export interface ListAssociatedGroupsCommandInput extends ListAssociatedGroupsRequest {
    }
    export interface ListAssociatedGroupsCommandOutput extends ListAssociatedGroupsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the groups that the specified canary is associated with. The canary
        *       that you specify must be in the current Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SyntheticsClient, ListAssociatedGroupsCommand } from "@aws-sdk/client-synthetics"; // ES Modules import
        * // const { SyntheticsClient, ListAssociatedGroupsCommand } = require("@aws-sdk/client-synthetics"); // CommonJS import
        * const client = new SyntheticsClient(config);
        * const command = new ListAssociatedGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAssociatedGroupsCommandInput} for command's `input` shape.
        * @see {@link ListAssociatedGroupsCommandOutput} for command's `response` shape.
        * @see {@link SyntheticsClientResolvedConfig | config} for SyntheticsClient's `config` shape.
        *
        */
    export class ListAssociatedGroupsCommand extends $Command<ListAssociatedGroupsCommandInput, ListAssociatedGroupsCommandOutput, SyntheticsClientResolvedConfig> {
            readonly input: ListAssociatedGroupsCommandInput;
            constructor(input: ListAssociatedGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SyntheticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAssociatedGroupsCommandInput, ListAssociatedGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/ListGroupResourcesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListGroupResourcesRequest, ListGroupResourcesResponse } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SyntheticsClientResolvedConfig } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient";
    export interface ListGroupResourcesCommandInput extends ListGroupResourcesRequest {
    }
    export interface ListGroupResourcesCommandOutput extends ListGroupResourcesResponse, __MetadataBearer {
    }
    /**
        * <p>This operation returns a list of the ARNs of the canaries that are associated with the specified group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SyntheticsClient, ListGroupResourcesCommand } from "@aws-sdk/client-synthetics"; // ES Modules import
        * // const { SyntheticsClient, ListGroupResourcesCommand } = require("@aws-sdk/client-synthetics"); // CommonJS import
        * const client = new SyntheticsClient(config);
        * const command = new ListGroupResourcesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListGroupResourcesCommandInput} for command's `input` shape.
        * @see {@link ListGroupResourcesCommandOutput} for command's `response` shape.
        * @see {@link SyntheticsClientResolvedConfig | config} for SyntheticsClient's `config` shape.
        *
        */
    export class ListGroupResourcesCommand extends $Command<ListGroupResourcesCommandInput, ListGroupResourcesCommandOutput, SyntheticsClientResolvedConfig> {
            readonly input: ListGroupResourcesCommandInput;
            constructor(input: ListGroupResourcesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SyntheticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListGroupResourcesCommandInput, ListGroupResourcesCommandOutput>;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/ListGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListGroupsRequest, ListGroupsResponse } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SyntheticsClientResolvedConfig } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient";
    export interface ListGroupsCommandInput extends ListGroupsRequest {
    }
    export interface ListGroupsCommandOutput extends ListGroupsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of all groups in the account, displaying their names, unique IDs, and ARNs. The groups
        *       from all Regions are returned.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SyntheticsClient, ListGroupsCommand } from "@aws-sdk/client-synthetics"; // ES Modules import
        * // const { SyntheticsClient, ListGroupsCommand } = require("@aws-sdk/client-synthetics"); // CommonJS import
        * const client = new SyntheticsClient(config);
        * const command = new ListGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListGroupsCommandInput} for command's `input` shape.
        * @see {@link ListGroupsCommandOutput} for command's `response` shape.
        * @see {@link SyntheticsClientResolvedConfig | config} for SyntheticsClient's `config` shape.
        *
        */
    export class ListGroupsCommand extends $Command<ListGroupsCommandInput, ListGroupsCommandOutput, SyntheticsClientResolvedConfig> {
            readonly input: ListGroupsCommandInput;
            constructor(input: ListGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SyntheticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListGroupsCommandInput, ListGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SyntheticsClientResolvedConfig } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Displays the tags associated with a canary or group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SyntheticsClient, ListTagsForResourceCommand } from "@aws-sdk/client-synthetics"; // ES Modules import
        * // const { SyntheticsClient, ListTagsForResourceCommand } = require("@aws-sdk/client-synthetics"); // CommonJS import
        * const client = new SyntheticsClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link SyntheticsClientResolvedConfig | config} for SyntheticsClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, SyntheticsClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SyntheticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/StartCanaryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartCanaryRequest, StartCanaryResponse } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SyntheticsClientResolvedConfig } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient";
    export interface StartCanaryCommandInput extends StartCanaryRequest {
    }
    export interface StartCanaryCommandOutput extends StartCanaryResponse, __MetadataBearer {
    }
    /**
        * <p>Use this operation to run a canary that has already been created.
        *          The frequency of the canary runs is determined by the value of the canary's <code>Schedule</code>. To see a canary's schedule,
        *          use <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_GetCanary.html">GetCanary</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SyntheticsClient, StartCanaryCommand } from "@aws-sdk/client-synthetics"; // ES Modules import
        * // const { SyntheticsClient, StartCanaryCommand } = require("@aws-sdk/client-synthetics"); // CommonJS import
        * const client = new SyntheticsClient(config);
        * const command = new StartCanaryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartCanaryCommandInput} for command's `input` shape.
        * @see {@link StartCanaryCommandOutput} for command's `response` shape.
        * @see {@link SyntheticsClientResolvedConfig | config} for SyntheticsClient's `config` shape.
        *
        */
    export class StartCanaryCommand extends $Command<StartCanaryCommandInput, StartCanaryCommandOutput, SyntheticsClientResolvedConfig> {
            readonly input: StartCanaryCommandInput;
            constructor(input: StartCanaryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SyntheticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartCanaryCommandInput, StartCanaryCommandOutput>;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/StopCanaryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopCanaryRequest, StopCanaryResponse } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SyntheticsClientResolvedConfig } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient";
    export interface StopCanaryCommandInput extends StopCanaryRequest {
    }
    export interface StopCanaryCommandOutput extends StopCanaryResponse, __MetadataBearer {
    }
    /**
        * <p>Stops the canary to prevent all future runs. If the canary is currently running,the
        *         run that is in progress completes on its own, publishes metrics, and uploads artifacts, but
        *          it is not recorded in Synthetics as a completed run.</p>
        *          <p>You can use <code>StartCanary</code> to start it running again
        *          with the canary’s current schedule at any point in the future.  </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SyntheticsClient, StopCanaryCommand } from "@aws-sdk/client-synthetics"; // ES Modules import
        * // const { SyntheticsClient, StopCanaryCommand } = require("@aws-sdk/client-synthetics"); // CommonJS import
        * const client = new SyntheticsClient(config);
        * const command = new StopCanaryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopCanaryCommandInput} for command's `input` shape.
        * @see {@link StopCanaryCommandOutput} for command's `response` shape.
        * @see {@link SyntheticsClientResolvedConfig | config} for SyntheticsClient's `config` shape.
        *
        */
    export class StopCanaryCommand extends $Command<StopCanaryCommandInput, StopCanaryCommandOutput, SyntheticsClientResolvedConfig> {
            readonly input: StopCanaryCommandInput;
            constructor(input: StopCanaryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SyntheticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopCanaryCommandInput, StopCanaryCommandOutput>;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SyntheticsClientResolvedConfig } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Assigns one or more tags (key-value pairs) to the specified canary or group. </p>
        *          <p>Tags can help you organize and categorize your
        *          resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with
        *          certain tag values.</p>
        *          <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p>
        *          <p>You can use the <code>TagResource</code> action with a resource that already has tags. If you specify a new
        *          tag key for the resource,
        *          this tag is appended to the list of tags associated
        *          with the resource. If you specify a tag key that is already associated with the resource, the new tag
        *          value that you specify replaces
        *          the previous value for that tag.</p>
        *          <p>You can associate as many as 50 tags with a canary or group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SyntheticsClient, TagResourceCommand } from "@aws-sdk/client-synthetics"; // ES Modules import
        * // const { SyntheticsClient, TagResourceCommand } = require("@aws-sdk/client-synthetics"); // CommonJS import
        * const client = new SyntheticsClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link SyntheticsClientResolvedConfig | config} for SyntheticsClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, SyntheticsClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SyntheticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SyntheticsClientResolvedConfig } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes one or more tags from the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SyntheticsClient, UntagResourceCommand } from "@aws-sdk/client-synthetics"; // ES Modules import
        * // const { SyntheticsClient, UntagResourceCommand } = require("@aws-sdk/client-synthetics"); // CommonJS import
        * const client = new SyntheticsClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link SyntheticsClientResolvedConfig | config} for SyntheticsClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, SyntheticsClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SyntheticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/UpdateCanaryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateCanaryRequest, UpdateCanaryResponse } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SyntheticsClientResolvedConfig } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient";
    export interface UpdateCanaryCommandInput extends UpdateCanaryRequest {
    }
    export interface UpdateCanaryCommandOutput extends UpdateCanaryResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the configuration of a canary that has
        *          already been created.</p>
        *          <p>You can't use this operation to update the tags of an existing canary. To
        *          change the tags of an existing canary, use
        *          <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_TagResource.html">TagResource</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SyntheticsClient, UpdateCanaryCommand } from "@aws-sdk/client-synthetics"; // ES Modules import
        * // const { SyntheticsClient, UpdateCanaryCommand } = require("@aws-sdk/client-synthetics"); // CommonJS import
        * const client = new SyntheticsClient(config);
        * const command = new UpdateCanaryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateCanaryCommandInput} for command's `input` shape.
        * @see {@link UpdateCanaryCommandOutput} for command's `response` shape.
        * @see {@link SyntheticsClientResolvedConfig | config} for SyntheticsClient's `config` shape.
        *
        */
    export class UpdateCanaryCommand extends $Command<UpdateCanaryCommandInput, UpdateCanaryCommandOutput, SyntheticsClientResolvedConfig> {
            readonly input: UpdateCanaryCommandInput;
            constructor(input: UpdateCanaryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SyntheticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateCanaryCommandInput, UpdateCanaryCommandOutput>;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/SyntheticsClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AssociateResourceCommandInput, AssociateResourceCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/AssociateResourceCommand";
    import { CreateCanaryCommandInput, CreateCanaryCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/CreateCanaryCommand";
    import { CreateGroupCommandInput, CreateGroupCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/CreateGroupCommand";
    import { DeleteCanaryCommandInput, DeleteCanaryCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/DeleteCanaryCommand";
    import { DeleteGroupCommandInput, DeleteGroupCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/DeleteGroupCommand";
    import { DescribeCanariesCommandInput, DescribeCanariesCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/DescribeCanariesCommand";
    import { DescribeCanariesLastRunCommandInput, DescribeCanariesLastRunCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/DescribeCanariesLastRunCommand";
    import { DescribeRuntimeVersionsCommandInput, DescribeRuntimeVersionsCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/DescribeRuntimeVersionsCommand";
    import { DisassociateResourceCommandInput, DisassociateResourceCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/DisassociateResourceCommand";
    import { GetCanaryCommandInput, GetCanaryCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/GetCanaryCommand";
    import { GetCanaryRunsCommandInput, GetCanaryRunsCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/GetCanaryRunsCommand";
    import { GetGroupCommandInput, GetGroupCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/GetGroupCommand";
    import { ListAssociatedGroupsCommandInput, ListAssociatedGroupsCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/ListAssociatedGroupsCommand";
    import { ListGroupResourcesCommandInput, ListGroupResourcesCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/ListGroupResourcesCommand";
    import { ListGroupsCommandInput, ListGroupsCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/ListGroupsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/ListTagsForResourceCommand";
    import { StartCanaryCommandInput, StartCanaryCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/StartCanaryCommand";
    import { StopCanaryCommandInput, StopCanaryCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/StopCanaryCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/UntagResourceCommand";
    import { UpdateCanaryCommandInput, UpdateCanaryCommandOutput } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/commands/UpdateCanaryCommand";
    export type ServiceInputTypes = AssociateResourceCommandInput | CreateCanaryCommandInput | CreateGroupCommandInput | DeleteCanaryCommandInput | DeleteGroupCommandInput | DescribeCanariesCommandInput | DescribeCanariesLastRunCommandInput | DescribeRuntimeVersionsCommandInput | DisassociateResourceCommandInput | GetCanaryCommandInput | GetCanaryRunsCommandInput | GetGroupCommandInput | ListAssociatedGroupsCommandInput | ListGroupResourcesCommandInput | ListGroupsCommandInput | ListTagsForResourceCommandInput | StartCanaryCommandInput | StopCanaryCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateCanaryCommandInput;
    export type ServiceOutputTypes = AssociateResourceCommandOutput | CreateCanaryCommandOutput | CreateGroupCommandOutput | DeleteCanaryCommandOutput | DeleteGroupCommandOutput | DescribeCanariesCommandOutput | DescribeCanariesLastRunCommandOutput | DescribeRuntimeVersionsCommandOutput | DisassociateResourceCommandOutput | GetCanaryCommandOutput | GetCanaryRunsCommandOutput | GetGroupCommandOutput | ListAssociatedGroupsCommandOutput | ListGroupResourcesCommandOutput | ListGroupsCommandOutput | ListTagsForResourceCommandOutput | StartCanaryCommandOutput | StopCanaryCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateCanaryCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type SyntheticsClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of SyntheticsClient class constructor that set the region, credentials and other options.
        */
    export interface SyntheticsClientConfig extends SyntheticsClientConfigType {
    }
    type SyntheticsClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of SyntheticsClient class. This is resolved and normalized from the {@link SyntheticsClientConfig | constructor configuration interface}.
        */
    export interface SyntheticsClientResolvedConfig extends SyntheticsClientResolvedConfigType {
    }
    /**
        * <fullname>Amazon CloudWatch Synthetics</fullname>
        *          <p>You can use Amazon CloudWatch Synthetics to continually monitor your services. You can
        *          create and manage <i>canaries</i>, which are modular, lightweight scripts
        *          that monitor your endpoints and APIs
        *             from the outside-in. You can set up your canaries to run
        *          24 hours a day, once per minute. The canaries help you check the availability and latency
        *          of your web services and troubleshoot anomalies by investigating load time data,
        *          screenshots of the UI, logs, and metrics. The canaries seamlessly integrate with CloudWatch
        *          ServiceLens to help you trace the causes of impacted nodes in your applications. For more
        *          information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ServiceLens.html">Using ServiceLens to Monitor
        *             the Health of Your Applications</a> in the <i>Amazon CloudWatch User
        *             Guide</i>.</p>
        *
        *          <p>Before you create and manage canaries, be aware of the security considerations. For more
        *          information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html">Security
        *             Considerations for Synthetics Canaries</a>.</p>
        */
    export class SyntheticsClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, SyntheticsClientResolvedConfig> {
            /**
                * The resolved configuration of SyntheticsClient class. This is resolved and normalized from the {@link SyntheticsClientConfig | constructor configuration interface}.
                */
            readonly config: SyntheticsClientResolvedConfig;
            constructor(configuration: SyntheticsClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { SyntheticsServiceException as __BaseException } from "@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/SyntheticsServiceException";
    export enum EncryptionMode {
            SSE_KMS = "SSE_KMS",
            SSE_S3 = "SSE_S3"
    }
    /**
        * <p>A structure that contains the configuration of encryption-at-rest settings for canary artifacts that the canary
        *          uploads to Amazon S3. </p>
        *          <p>For more information, see
        *          <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_artifact_encryption.html">Encrypting canary artifacts</a>
        *             </p>
        */
    export interface S3EncryptionConfig {
            /**
                * <p> The encryption method to use for artifacts created by this canary. Specify <code>SSE_S3</code> to use
                *          server-side encryption (SSE) with an Amazon S3-managed
                *          key. Specify <code>SSE-KMS</code> to use server-side encryption with a customer-managed KMS key.</p>
                *          <p>If you omit this parameter, an
                *             Amazon Web Services-managed KMS key is used.
                *         </p>
                */
            EncryptionMode?: EncryptionMode | string;
            /**
                * <p>The ARN of the customer-managed KMS key to use, if you specify <code>SSE-KMS</code>
                *          for <code>EncryptionMode</code>
                *          </p>
                */
            KmsKeyArn?: string;
    }
    export namespace S3EncryptionConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3EncryptionConfig) => any;
    }
    /**
        * <p>A structure that contains the configuration for canary artifacts, including the
        *          encryption-at-rest settings for artifacts that the canary uploads to Amazon S3.</p>
        */
    export interface ArtifactConfigInput {
            /**
                * <p>A structure that contains the configuration of the encryption-at-rest settings for artifacts that the canary uploads
                *          to Amazon S3.
                *          Artifact encryption functionality is available only for canaries that use Synthetics runtime version
                *          syn-nodejs-puppeteer-3.3 or later. For more information, see
                *          <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_artifact_encryption.html">Encrypting canary artifacts</a>
                *          </p>
                */
            S3Encryption?: S3EncryptionConfig;
    }
    export namespace ArtifactConfigInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ArtifactConfigInput) => any;
    }
    /**
        * <p>A structure that contains the configuration for canary artifacts, including
        *          the encryption-at-rest settings for artifacts that the canary uploads to Amazon S3.</p>
        */
    export interface ArtifactConfigOutput {
            /**
                * <p>A structure that contains the configuration of encryption settings for canary artifacts that are stored in Amazon S3. </p>
                */
            S3Encryption?: S3EncryptionConfig;
    }
    export namespace ArtifactConfigOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ArtifactConfigOutput) => any;
    }
    export interface AssociateResourceRequest {
            /**
                * <p>Specifies the group. You can specify the group name, the ARN, or the
                *          group ID as the <code>GroupIdentifier</code>.</p>
                */
            GroupIdentifier: string | undefined;
            /**
                * <p>The ARN of the canary that you want to associate with the specified group.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace AssociateResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateResourceRequest) => any;
    }
    export interface AssociateResourceResponse {
    }
    export namespace AssociateResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateResourceResponse) => any;
    }
    /**
        * <p>A conflicting operation is already in progress.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>An unknown internal error occurred.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>One of the specified resources was not found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>The request exceeded a service quota value.</p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    /**
        * <p>A parameter could not be validated.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    /**
        * <p>The request was not valid.</p>
        */
    export class BadRequestException extends __BaseException {
            readonly name: "BadRequestException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BadRequestException, __BaseException>);
    }
    /**
        * <p>A structure representing a screenshot that is used as a baseline during visual monitoring comparisons made by the canary.</p>
        */
    export interface BaseScreenshot {
            /**
                * <p>The name of the screenshot. This is generated the first time the canary is run after the <code>UpdateCanary</code> operation that
                *       specified for this canary to perform visual monitoring.</p>
                */
            ScreenshotName: string | undefined;
            /**
                * <p>Coordinates that define the part of a screen to ignore during screenshot comparisons. To obtain the
                *          coordinates to use here, use the
                *          CloudWatch console to draw the boundaries on the screen. For more information, see
                *          <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/synthetics_canaries_deletion.html">
                *             Editing or deleting a canary</a>
                *          </p>
                */
            IgnoreCoordinates?: string[];
    }
    export namespace BaseScreenshot {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BaseScreenshot) => any;
    }
    /**
        * <p>This structure contains information about the canary's Lambda handler and
        *       where its code is stored by CloudWatch Synthetics.</p>
        */
    export interface CanaryCodeOutput {
            /**
                * <p>The ARN of the Lambda layer where Synthetics stores the canary script code.</p>
                */
            SourceLocationArn?: string;
            /**
                * <p>The entry point to use for the source code when running the canary.</p>
                */
            Handler?: string;
    }
    export namespace CanaryCodeOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CanaryCodeOutput) => any;
    }
    /**
        * <p>A structure that contains information about a canary run.</p>
        */
    export interface CanaryRunConfigOutput {
            /**
                * <p>How long the canary is allowed to run before it must stop.</p>
                */
            TimeoutInSeconds?: number;
            /**
                * <p>The maximum amount of memory available to the canary while it is running, in MB. This value
                *          must be a multiple of 64.</p>
                */
            MemoryInMB?: number;
            /**
                * <p>Displays whether this canary run used active X-Ray tracing. </p>
                */
            ActiveTracing?: boolean;
    }
    export namespace CanaryRunConfigOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CanaryRunConfigOutput) => any;
    }
    /**
        * <p>How long, in seconds, for the canary to continue making regular runs according to the schedule in the
        *          <code>Expression</code> value.</p>
        */
    export interface CanaryScheduleOutput {
            /**
                * <p>A <code>rate</code> expression or a <code>cron</code> expression that defines how often the canary is to run.</p>
                *          <p>For a rate expression, The syntax is
                *          <code>rate(<i>number unit</i>)</code>. <i>unit</i>
                *          can be <code>minute</code>, <code>minutes</code>, or <code>hour</code>. </p>
                *          <p>For example, <code>rate(1 minute)</code> runs the canary once a minute, <code>rate(10 minutes)</code> runs it once every
                *          10 minutes, and <code>rate(1 hour)</code> runs it once every hour. You can
                *          specify a frequency between <code>rate(1 minute)</code> and <code>rate(1 hour)</code>.</p>
                *          <p>Specifying <code>rate(0 minute)</code> or <code>rate(0 hour)</code> is a special value
                *          that causes the
                *          canary to run only once when it is started.</p>
                *          <p>Use <code>cron(<i>expression</i>)</code> to specify a cron
                *          expression. For information about the syntax for cron expressions, see
                *          <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_cron.html">
                *             Scheduling canary runs using cron</a>.</p>
                */
            Expression?: string;
            /**
                * <p>How long, in seconds, for the canary to continue making regular runs after it
                *          was created. The runs are performed according to the schedule in the
                *          <code>Expression</code> value.</p>
                */
            DurationInSeconds?: number;
    }
    export namespace CanaryScheduleOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CanaryScheduleOutput) => any;
    }
    export enum CanaryState {
            CREATING = "CREATING",
            DELETING = "DELETING",
            ERROR = "ERROR",
            READY = "READY",
            RUNNING = "RUNNING",
            STARTING = "STARTING",
            STOPPED = "STOPPED",
            STOPPING = "STOPPING",
            UPDATING = "UPDATING"
    }
    export enum CanaryStateReasonCode {
            CREATE_FAILED = "CREATE_FAILED",
            CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS",
            CREATE_PENDING = "CREATE_PENDING",
            DELETE_FAILED = "DELETE_FAILED",
            DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS",
            INVALID_PERMISSIONS = "INVALID_PERMISSIONS",
            ROLLBACK_COMPLETE = "ROLLBACK_COMPLETE",
            ROLLBACK_FAILED = "ROLLBACK_FAILED",
            SYNC_DELETE_IN_PROGRESS = "SYNC_DELETE_IN_PROGRESS",
            UPDATE_COMPLETE = "UPDATE_COMPLETE",
            UPDATE_IN_PROGRESS = "UPDATE_IN_PROGRESS",
            UPDATE_PENDING = "UPDATE_PENDING"
    }
    /**
        * <p>A structure that contains the current state of the canary.</p>
        */
    export interface CanaryStatus {
            /**
                * <p>The current state of the canary.</p>
                */
            State?: CanaryState | string;
            /**
                * <p>If the canary has insufficient permissions to run, this field provides more details.</p>
                */
            StateReason?: string;
            /**
                * <p>If the canary cannot run or has failed, this field displays the reason.</p>
                */
            StateReasonCode?: CanaryStateReasonCode | string;
    }
    export namespace CanaryStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CanaryStatus) => any;
    }
    /**
        * <p>This structure contains information about when the canary was created and modified.</p>
        */
    export interface CanaryTimeline {
            /**
                * <p>The date and time the canary was created.</p>
                */
            Created?: Date;
            /**
                * <p>The date and time the canary was most recently modified.</p>
                */
            LastModified?: Date;
            /**
                * <p>The date and time that the canary's most recent run started.</p>
                */
            LastStarted?: Date;
            /**
                * <p>The date and time that the canary's most recent run ended.</p>
                */
            LastStopped?: Date;
    }
    export namespace CanaryTimeline {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CanaryTimeline) => any;
    }
    /**
        * <p>If this canary performs visual monitoring by comparing screenshots, this structure contains the ID of the canary run that is used as the baseline for screenshots, and the coordinates
        *          of any parts of those screenshots that are ignored during visual monitoring comparison.</p>
        *          <p>Visual monitoring is supported only on canaries running the <b>syn-puppeteer-node-3.2</b> runtime or later.</p>
        */
    export interface VisualReferenceOutput {
            /**
                * <p>An array of screenshots that are used as the baseline for comparisons during visual monitoring.</p>
                */
            BaseScreenshots?: BaseScreenshot[];
            /**
                * <p>The ID of the canary run that produced the baseline screenshots
                *          that are used for visual monitoring comparisons by this canary.</p>
                */
            BaseCanaryRunId?: string;
    }
    export namespace VisualReferenceOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VisualReferenceOutput) => any;
    }
    /**
        * <p>If this canary is to test an endpoint in a VPC, this structure contains
        *          information about the subnets and security groups of the VPC endpoint.
        *          For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html">
        *             Running a Canary in a VPC</a>.</p>
        */
    export interface VpcConfigOutput {
            /**
                * <p>The IDs of the VPC where this canary is to run.</p>
                */
            VpcId?: string;
            /**
                * <p>The IDs of the subnets where this canary is to run.</p>
                */
            SubnetIds?: string[];
            /**
                * <p>The IDs of the security groups for this canary.</p>
                */
            SecurityGroupIds?: string[];
    }
    export namespace VpcConfigOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VpcConfigOutput) => any;
    }
    /**
        * <p>This structure contains all information about one canary in your account.</p>
        */
    export interface Canary {
            /**
                * <p>The unique ID of this canary.</p>
                */
            Id?: string;
            /**
                * <p>The name of the canary.</p>
                */
            Name?: string;
            /**
                * <p>This structure contains information about the canary's Lambda handler and
                *       where its code is stored by CloudWatch Synthetics.</p>
                */
            Code?: CanaryCodeOutput;
            /**
                * <p>The ARN of the IAM role used to run the canary. This role must include <code>lambda.amazonaws.com</code> as a principal in the trust
                *          policy.</p>
                */
            ExecutionRoleArn?: string;
            /**
                * <p>A structure that contains information about how often the canary is to run, and when
                *          these runs are to stop.</p>
                */
            Schedule?: CanaryScheduleOutput;
            /**
                * <p>A structure that contains information about a canary run.</p>
                */
            RunConfig?: CanaryRunConfigOutput;
            /**
                * <p>The number of days to retain data about successful runs of this canary.</p>
                */
            SuccessRetentionPeriodInDays?: number;
            /**
                * <p>The number of days to retain data about failed runs of this canary.</p>
                */
            FailureRetentionPeriodInDays?: number;
            /**
                * <p>A structure that contains information about the canary's status.</p>
                */
            Status?: CanaryStatus;
            /**
                * <p>A structure that contains information about when the canary was created, modified, and
                *          most recently run.</p>
                */
            Timeline?: CanaryTimeline;
            /**
                * <p>The location in Amazon S3 where Synthetics stores artifacts from the runs of this
                *          canary. Artifacts include the log file, screenshots, and HAR files.</p>
                */
            ArtifactS3Location?: string;
            /**
                * <p>The ARN of the Lambda function that is used as your canary's engine. For more information
                *          about Lambda ARN format, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-api-permissions-ref.html">Resources and Conditions for Lambda Actions</a>.</p>
                */
            EngineArn?: string;
            /**
                * <p>Specifies the runtime version to use for the canary. For more information about
                *          runtime versions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html">
                *             Canary Runtime Versions</a>.</p>
                */
            RuntimeVersion?: string;
            /**
                * <p>If this canary is to test an endpoint in a VPC, this structure contains
                *          information about the subnets and security groups of the VPC endpoint.
                *          For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html">
                *             Running a Canary in a VPC</a>.</p>
                */
            VpcConfig?: VpcConfigOutput;
            /**
                * <p>If this canary performs visual monitoring by comparing screenshots, this structure contains the ID of the canary run to use as the baseline for screenshots, and the coordinates
                *       of any parts of the screen to ignore during the visual monitoring comparison.</p>
                */
            VisualReference?: VisualReferenceOutput;
            /**
                * <p>The list of key-value pairs that are associated with the canary.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>A structure that contains the configuration for canary artifacts, including
                *          the encryption-at-rest settings for artifacts that the canary uploads to Amazon S3.</p>
                */
            ArtifactConfig?: ArtifactConfigOutput;
    }
    export namespace Canary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Canary) => any;
    }
    export enum CanaryRunState {
            FAILED = "FAILED",
            PASSED = "PASSED",
            RUNNING = "RUNNING"
    }
    export enum CanaryRunStateReasonCode {
            CANARY_FAILURE = "CANARY_FAILURE",
            EXECUTION_FAILURE = "EXECUTION_FAILURE"
    }
    /**
        * <p>This structure contains the status information about a canary run.</p>
        */
    export interface CanaryRunStatus {
            /**
                * <p>The current state of the run.</p>
                */
            State?: CanaryRunState | string;
            /**
                * <p>If run of the canary failed, this field contains the reason for the error.</p>
                */
            StateReason?: string;
            /**
                * <p>If this value is <code>CANARY_FAILURE</code>, an exception occurred in the
                *          canary code. If this value is <code>EXECUTION_FAILURE</code>, an exception occurred in
                *          CloudWatch Synthetics.</p>
                */
            StateReasonCode?: CanaryRunStateReasonCode | string;
    }
    export namespace CanaryRunStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CanaryRunStatus) => any;
    }
    /**
        * <p>This structure contains the start and end times of a single canary run.</p>
        */
    export interface CanaryRunTimeline {
            /**
                * <p>The start time of the run.</p>
                */
            Started?: Date;
            /**
                * <p>The end time of the run.</p>
                */
            Completed?: Date;
    }
    export namespace CanaryRunTimeline {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CanaryRunTimeline) => any;
    }
    /**
        * <p>This structure contains the details about one run of one canary.</p>
        */
    export interface CanaryRun {
            /**
                * <p>A unique ID that identifies this canary run.</p>
                */
            Id?: string;
            /**
                * <p>The name of the canary.</p>
                */
            Name?: string;
            /**
                * <p>The status of this run.</p>
                */
            Status?: CanaryRunStatus;
            /**
                * <p>A structure that contains the start and end times of this run.</p>
                */
            Timeline?: CanaryRunTimeline;
            /**
                * <p>The location where the canary stored artifacts from the run. Artifacts include
                *          the log file, screenshots, and HAR files.</p>
                */
            ArtifactS3Location?: string;
    }
    export namespace CanaryRun {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CanaryRun) => any;
    }
    /**
        * <p>This structure contains information about the most recent run of a single canary.</p>
        */
    export interface CanaryLastRun {
            /**
                * <p>The name of the canary.</p>
                */
            CanaryName?: string;
            /**
                * <p>The results from this canary's most recent run.</p>
                */
            LastRun?: CanaryRun;
    }
    export namespace CanaryLastRun {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CanaryLastRun) => any;
    }
    /**
        * <p>Use this structure to input your script code for the canary. This structure contains the
        *          Lambda handler with the location where the canary should start running the script. If the
        *          script is stored in an S3 bucket, the bucket name, key, and version are also included. If
        *          the script was passed into the canary directly, the script code is contained in the value
        *          of <code>Zipfile</code>. </p>
        */
    export interface CanaryCodeInput {
            /**
                * <p>If your canary script is located in S3, specify the bucket name here. Do not include <code>s3://</code> as the
                *          start of the bucket name.</p>
                */
            S3Bucket?: string;
            /**
                * <p>The S3 key of your script. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingObjects.html">Working with Amazon S3 Objects</a>.</p>
                */
            S3Key?: string;
            /**
                * <p>The S3 version ID of your script.</p>
                */
            S3Version?: string;
            /**
                * <p>If you input your canary script directly into the canary instead of referring to an S3
                *          location, the value of this parameter is the base64-encoded contents of the .zip file that
                *          contains the script. It must be smaller than 225 Kb.</p>
                *          <p>For large canary scripts, we recommend that you use an S3 location instead of inputting it
                *       directly with this parameter.</p>
                */
            ZipFile?: Uint8Array;
            /**
                * <p>The entry point to use for the source code when running the canary. For canaries that use the
                *          <code>syn-python-selenium-1.0</code> runtime
                *          or a <code>syn-nodejs.puppeteer</code> runtime earlier than <code>syn-nodejs.puppeteer-3.4</code>,
                *          the handler must be specified as <code>
                *                <i>fileName</i>.handler</code>. For
                *          <code>syn-python-selenium-1.1</code>, <code>syn-nodejs.puppeteer-3.4</code>, and later runtimes, the handler can be specified as
                *             <code>
                *                <i>fileName</i>.<i>functionName</i>
                *             </code>, or
                *             you can specify a folder where canary scripts reside as
                * <code>
                *                <i>folder</i>/<i>fileName</i>.<i>functionName</i>
                *             </code>.</p>
                */
            Handler: string | undefined;
    }
    export namespace CanaryCodeInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CanaryCodeInput) => any;
    }
    /**
        * <p>A structure that contains input information for a canary run.</p>
        */
    export interface CanaryRunConfigInput {
            /**
                * <p>How long the canary is allowed to run before it must stop. You can't set this time to be longer
                *          than the frequency of the runs of this canary.</p>
                *          <p>If you omit this field, the
                *          frequency of the canary is used as this value, up to a maximum of 14 minutes.</p>
                */
            TimeoutInSeconds?: number;
            /**
                * <p>The maximum amount of memory available to the canary while it is running, in MB. This value must be a multiple of 64.</p>
                */
            MemoryInMB?: number;
            /**
                * <p>Specifies whether this canary is to use active X-Ray tracing when it runs. Active tracing
                *          enables
                *          this canary run to be displayed in the ServiceLens and X-Ray service maps even if the canary does
                *          not hit an endpoint that has X-Ray tracing enabled. Using X-Ray tracing incurs charges.
                *       For more information, see  <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_tracing.html">
                *          Canaries and X-Ray tracing</a>.</p>
                *          <p>You can enable active tracing only for canaries that use version <code>syn-nodejs-2.0</code>
                *       or later for their canary runtime.</p>
                */
            ActiveTracing?: boolean;
            /**
                * <p>Specifies the keys and values to use for any environment variables
                *       used in the canary script. Use the following format:</p>
                *          <p>{ "key1" : "value1", "key2" : "value2", ...}</p>
                *          <p>Keys must start with a letter and be at least two characters. The total size
                *          of your environment variables cannot exceed 4 KB. You can't specify any Lambda
                *          reserved environment variables as the keys for your environment variables. For
                *          more information about reserved keys, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime">
                *             Runtime environment variables</a>.</p>
                *          <important>
                *             <p>The environment variables keys and values are not encrypted. Do not store sensitive information
                *          in this field.</p>
                *          </important>
                */
            EnvironmentVariables?: Record<string, string>;
    }
    export namespace CanaryRunConfigInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CanaryRunConfigInput) => any;
    }
    /**
        * <p>This structure specifies how often a canary is to make runs and the date and time
        *          when it should stop making runs.</p>
        */
    export interface CanaryScheduleInput {
            /**
                * <p>A <code>rate</code> expression or a <code>cron</code> expression that defines how often the canary is to run.</p>
                *          <p>For a rate expression, The syntax is
                *                <code>rate(<i>number unit</i>)</code>. <i>unit</i>
                *          can be <code>minute</code>, <code>minutes</code>, or <code>hour</code>. </p>
                *          <p>For example, <code>rate(1 minute)</code> runs the canary once a minute, <code>rate(10 minutes)</code> runs it once every
                *       10 minutes, and <code>rate(1 hour)</code> runs it once every hour. You can
                *          specify a frequency between <code>rate(1 minute)</code> and <code>rate(1 hour)</code>.</p>
                *          <p>Specifying <code>rate(0 minute)</code> or <code>rate(0 hour)</code> is a special value
                *          that causes the
                *          canary to run only once when it is started.</p>
                *          <p>Use <code>cron(<i>expression</i>)</code> to specify a cron
                *          expression. You can't schedule a canary to wait for more than a year before running. For information about the syntax for cron expressions, see
                *          <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_cron.html">
                *             Scheduling canary runs using cron</a>.</p>
                */
            Expression: string | undefined;
            /**
                * <p>How long, in seconds, for the canary to continue making regular runs according to
                *          the schedule in the <code>Expression</code> value. If you specify 0, the canary continues
                *          making runs until you stop it. If you omit this field, the default of 0 is used.</p>
                */
            DurationInSeconds?: number;
    }
    export namespace CanaryScheduleInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CanaryScheduleInput) => any;
    }
    /**
        * <p>If this canary is to test an endpoint in a VPC, this structure contains
        *          information about the subnets and security groups of the VPC endpoint.
        *          For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html">
        *             Running a Canary in a VPC</a>.</p>
        */
    export interface VpcConfigInput {
            /**
                * <p>The IDs of the subnets where this canary is to run.</p>
                */
            SubnetIds?: string[];
            /**
                * <p>The IDs of the security groups for this canary.</p>
                */
            SecurityGroupIds?: string[];
    }
    export namespace VpcConfigInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VpcConfigInput) => any;
    }
    export interface CreateCanaryRequest {
            /**
                * <p>The name for this canary. Be sure to give it a descriptive name
                *          that distinguishes it from other canaries in your account.</p>
                *          <p>Do not include secrets or proprietary information in your canary names. The canary name
                *          makes up part of the canary ARN, and the ARN is included in outbound calls over the
                *          internet. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html">Security
                *             Considerations for Synthetics Canaries</a>.</p>
                */
            Name: string | undefined;
            /**
                * <p>A structure that includes the entry point from which the canary should start
                *          running your script. If the script is stored in
                *          an S3 bucket, the bucket name, key, and version are also included.
                *       </p>
                */
            Code: CanaryCodeInput | undefined;
            /**
                * <p>The location in Amazon S3 where Synthetics stores artifacts from the test runs of this
                *          canary. Artifacts include the log file, screenshots, and HAR files.  The name of the
                *          S3 bucket can't include a period (.).</p>
                */
            ArtifactS3Location: string | undefined;
            /**
                * <p>The ARN of the IAM role to be used to run the canary. This role must already exist,
                *          and must include <code>lambda.amazonaws.com</code> as a principal in the trust
                *          policy. The role must also have the following permissions:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>s3:PutObject</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>s3:GetBucketLocation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>s3:ListAllMyBuckets</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>cloudwatch:PutMetricData</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>logs:CreateLogGroup</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>logs:CreateLogStream</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>logs:PutLogEvents</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ExecutionRoleArn: string | undefined;
            /**
                * <p>A structure that contains information about how often the canary is to run and when
                *          these test runs are to stop.</p>
                */
            Schedule: CanaryScheduleInput | undefined;
            /**
                * <p>A structure that contains the configuration for individual canary runs,
                *          such as timeout value and environment variables.</p>
                *          <important>
                *             <p>The environment variables keys and values are not encrypted. Do not store sensitive information
                *       in this field.</p>
                *          </important>
                */
            RunConfig?: CanaryRunConfigInput;
            /**
                * <p>The number of days to retain data about successful runs of this canary. If you omit
                *          this field, the default of 31 days is used. The valid range is 1 to 455 days.</p>
                */
            SuccessRetentionPeriodInDays?: number;
            /**
                * <p>The number of days to retain data about failed runs of this canary. If you omit
                *          this field, the default of 31 days is used. The valid range is 1 to 455 days.</p>
                */
            FailureRetentionPeriodInDays?: number;
            /**
                * <p>Specifies the runtime version to use for the canary. For a list of valid
                *          runtime versions and more information about
                *          runtime versions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html">
                *             Canary Runtime Versions</a>.</p>
                */
            RuntimeVersion: string | undefined;
            /**
                * <p>If this canary is to test an endpoint in a VPC, this structure contains
                *       information about the subnet and security groups of the VPC endpoint.
                *       For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html">
                *          Running a Canary in a VPC</a>.</p>
                */
            VpcConfig?: VpcConfigInput;
            /**
                * <p>A list of key-value pairs to associate with the canary.
                *          You can associate as many as 50 tags with a canary.</p>
                *          <p>Tags can help you organize and categorize your
                *          resources. You can also use them to scope user permissions, by
                *          granting a user permission to access or change only the resources that have
                *          certain tag values.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>A structure that contains the configuration for canary artifacts, including
                *          the encryption-at-rest settings for artifacts that the canary uploads to Amazon S3.</p>
                */
            ArtifactConfig?: ArtifactConfigInput;
    }
    export namespace CreateCanaryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCanaryRequest) => any;
    }
    export interface CreateCanaryResponse {
            /**
                * <p>The full details about the canary you have created.</p>
                */
            Canary?: Canary;
    }
    export namespace CreateCanaryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCanaryResponse) => any;
    }
    /**
        * <p>One of the input resources is larger than is allowed.</p>
        */
    export class RequestEntityTooLargeException extends __BaseException {
            readonly name: "RequestEntityTooLargeException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RequestEntityTooLargeException, __BaseException>);
    }
    export interface CreateGroupRequest {
            /**
                * <p>The name for the group. It can include any Unicode characters.</p>
                *          <p>The names for all groups in your account, across all Regions, must be unique.</p>
                */
            Name: string | undefined;
            /**
                * <p>A list of key-value pairs to associate with the group.
                *          You can associate as many as 50 tags with a group.</p>
                *          <p>Tags can help you organize and categorize your
                *          resources. You can also use them to scope user permissions, by
                *          granting a user permission to access or change only the resources that have
                *          certain tag values.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGroupRequest) => any;
    }
    /**
        * <p>This structure contains information about one group.</p>
        */
    export interface Group {
            /**
                * <p>The unique ID of the group.</p>
                */
            Id?: string;
            /**
                * <p>The name of the group.</p>
                */
            Name?: string;
            /**
                * <p>The ARN of the group.</p>
                */
            Arn?: string;
            /**
                * <p>The list of key-value pairs that are associated with the canary.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The date and time that the group was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The date and time that the group was most recently updated.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace Group {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Group) => any;
    }
    export interface CreateGroupResponse {
            /**
                * <p>A structure that contains information about the group that was just created.</p>
                */
            Group?: Group;
    }
    export namespace CreateGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGroupResponse) => any;
    }
    export interface DeleteCanaryRequest {
            /**
                * <p>The name of the canary that you want to delete. To find the names of your canaries, use <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_DescribeCanaries.html">DescribeCanaries</a>.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether to also delete the Lambda functions and layers used by this canary. The default
                *       is false.</p>
                *          <p>Type: Boolean</p>
                */
            DeleteLambda?: boolean;
    }
    export namespace DeleteCanaryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCanaryRequest) => any;
    }
    export interface DeleteCanaryResponse {
    }
    export namespace DeleteCanaryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCanaryResponse) => any;
    }
    export interface DeleteGroupRequest {
            /**
                * <p>Specifies which group to delete. You can specify the group name, the ARN, or the
                *       group ID as the <code>GroupIdentifier</code>.</p>
                */
            GroupIdentifier: string | undefined;
    }
    export namespace DeleteGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGroupRequest) => any;
    }
    export interface DeleteGroupResponse {
    }
    export namespace DeleteGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGroupResponse) => any;
    }
    export interface DescribeCanariesRequest {
            /**
                * <p>A token that indicates that there is more data
                *          available. You can use this token in a subsequent operation to retrieve the next
                *          set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>Specify this parameter to limit how many canaries are returned each time you use
                *       the <code>DescribeCanaries</code> operation. If you omit this parameter, the default of 100 is used.</p>
                */
            MaxResults?: number;
            /**
                * <p>Use this parameter to return only canaries that match the names that you specify here. You can
                *          specify as many as five canary names.</p>
                *          <p>If you specify this parameter, the operation is successful only if you have authorization to view
                *          all the canaries that you specify in your request. If you do not have permission to view any of
                *          the canaries, the request fails with a 403 response.</p>
                *          <p>You are required to use this parameter if you are logged on to a user or role that has an
                *          IAM policy that restricts which canaries that you are allowed to view. For more information,
                *          see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Restricted.html">
                *             Limiting a user to viewing specific canaries</a>.</p>
                */
            Names?: string[];
    }
    export namespace DescribeCanariesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeCanariesRequest) => any;
    }
    export interface DescribeCanariesResponse {
            /**
                * <p>Returns an array. Each item in the array contains the full information about
                *          one canary.</p>
                */
            Canaries?: Canary[];
            /**
                * <p>A token that indicates that there is more data
                *          available. You can use this token in a subsequent <code>DescribeCanaries</code> operation to retrieve the next
                *          set of results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeCanariesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeCanariesResponse) => any;
    }
    export interface DescribeCanariesLastRunRequest {
            /**
                * <p>A token that indicates that there is more data
                *          available. You can use this token in a subsequent <code>DescribeCanariesLastRun</code> operation to retrieve the next
                *          set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>Specify this parameter to limit how many runs are returned each time you use
                *          the <code>DescribeLastRun</code> operation. If you omit this parameter, the default of 100 is used.</p>
                */
            MaxResults?: number;
            /**
                * <p>Use this parameter to return only canaries that match the names that you specify here. You can
                *          specify as many as five canary names.</p>
                *          <p>If you specify this parameter, the operation is successful only if you have authorization to view
                *          all the canaries that you specify in your request. If you do not have permission to view any of
                *          the canaries, the request fails with a 403 response.</p>
                *          <p>You are required to use the <code>Names</code> parameter if you are logged on to a user or role that has an
                *          IAM policy that restricts which canaries that you are allowed to view. For more information,
                *          see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Restricted.html">
                *             Limiting a user to viewing specific canaries</a>.</p>
                */
            Names?: string[];
    }
    export namespace DescribeCanariesLastRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeCanariesLastRunRequest) => any;
    }
    export interface DescribeCanariesLastRunResponse {
            /**
                * <p>An array that contains the information from the most recent run of each
                *          canary.</p>
                */
            CanariesLastRun?: CanaryLastRun[];
            /**
                * <p>A token that indicates that there is more data
                *          available. You can use this token in a subsequent <code>DescribeCanariesLastRun</code> operation to retrieve the next
                *          set of results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeCanariesLastRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeCanariesLastRunResponse) => any;
    }
    export interface DescribeRuntimeVersionsRequest {
            /**
                * <p>A token that indicates that there is more data
                *          available. You can use this token in a subsequent <code>DescribeRuntimeVersions</code> operation to retrieve the next
                *          set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>Specify this parameter to limit how many runs are returned each time you use
                *          the <code>DescribeRuntimeVersions</code> operation. If you omit this parameter, the default of 100 is used.</p>
                */
            MaxResults?: number;
    }
    export namespace DescribeRuntimeVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRuntimeVersionsRequest) => any;
    }
    /**
        * <p>This structure contains information about one canary runtime version. For more information about
        *          runtime versions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html">
        *             Canary Runtime Versions</a>.</p>
        */
    export interface RuntimeVersion {
            /**
                * <p>The name of the runtime version. For a list of valid runtime versions,
                *          see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html">
                *             Canary Runtime Versions</a>.</p>
                */
            VersionName?: string;
            /**
                * <p>A description of the runtime version, created by Amazon.</p>
                */
            Description?: string;
            /**
                * <p>The date that the runtime version was released.</p>
                */
            ReleaseDate?: Date;
            /**
                * <p>If this runtime version is deprecated, this value is the date of deprecation.</p>
                */
            DeprecationDate?: Date;
    }
    export namespace RuntimeVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuntimeVersion) => any;
    }
    export interface DescribeRuntimeVersionsResponse {
            /**
                * <p>An array of objects that display the details about each Synthetics canary runtime
                *          version.</p>
                */
            RuntimeVersions?: RuntimeVersion[];
            /**
                * <p>A token that indicates that there is more data
                *          available. You can use this token in a subsequent <code>DescribeRuntimeVersions</code> operation to retrieve the next
                *          set of results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeRuntimeVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRuntimeVersionsResponse) => any;
    }
    export interface DisassociateResourceRequest {
            /**
                * <p>Specifies the group. You can specify the group name, the ARN, or the
                *          group ID as the <code>GroupIdentifier</code>.</p>
                */
            GroupIdentifier: string | undefined;
            /**
                * <p>The ARN of the canary that you want to remove from the specified group.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace DisassociateResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateResourceRequest) => any;
    }
    export interface DisassociateResourceResponse {
    }
    export namespace DisassociateResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateResourceResponse) => any;
    }
    export interface GetCanaryRequest {
            /**
                * <p>The name of the canary that you want details for.</p>
                */
            Name: string | undefined;
    }
    export namespace GetCanaryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCanaryRequest) => any;
    }
    export interface GetCanaryResponse {
            /**
                * <p>A structure that contains the full information about the canary.</p>
                */
            Canary?: Canary;
    }
    export namespace GetCanaryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCanaryResponse) => any;
    }
    export interface GetCanaryRunsRequest {
            /**
                * <p>The name of the canary that you want to see runs for.</p>
                */
            Name: string | undefined;
            /**
                * <p>A token that indicates that there is more data
                *          available. You can use this token in a subsequent <code>GetCanaryRuns</code> operation to retrieve the next
                *          set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>Specify this parameter to limit how many runs are returned each time you use
                *          the <code>GetCanaryRuns</code> operation. If you omit this parameter, the default of 100 is used.</p>
                */
            MaxResults?: number;
    }
    export namespace GetCanaryRunsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCanaryRunsRequest) => any;
    }
    export interface GetCanaryRunsResponse {
            /**
                * <p>An array of structures. Each structure contains the details of one of the
                *          retrieved canary runs.</p>
                */
            CanaryRuns?: CanaryRun[];
            /**
                * <p>A token that indicates that there is more data
                *          available. You can use this token in a subsequent <code>GetCanaryRuns</code>
                *          operation to retrieve the next
                *          set of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetCanaryRunsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCanaryRunsResponse) => any;
    }
    export interface GetGroupRequest {
            /**
                * <p>Specifies the group to return information for. You can specify the group name, the ARN, or the
                *          group ID as the <code>GroupIdentifier</code>.</p>
                */
            GroupIdentifier: string | undefined;
    }
    export namespace GetGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGroupRequest) => any;
    }
    export interface GetGroupResponse {
            /**
                * <p>A structure that contains information about the group.</p>
                */
            Group?: Group;
    }
    export namespace GetGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGroupResponse) => any;
    }
    /**
        * <p>A structure containing some information about a group.</p>
        */
    export interface GroupSummary {
            /**
                * <p>The unique ID of the group.</p>
                */
            Id?: string;
            /**
                * <p>The name of the group.</p>
                */
            Name?: string;
            /**
                * <p>The ARN of the group.</p>
                */
            Arn?: string;
    }
    export namespace GroupSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupSummary) => any;
    }
    /**
        * <p>An internal failure occurred. Try the operation again.</p>
        */
    export class InternalFailureException extends __BaseException {
            readonly name: "InternalFailureException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalFailureException, __BaseException>);
    }
    export interface ListAssociatedGroupsRequest {
            /**
                * <p>A token that indicates that there is more data
                *          available. You can use this token in a subsequent operation to retrieve the next
                *          set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>Specify this parameter to limit how many groups are returned each time you use
                *          the <code>ListAssociatedGroups</code> operation. If you omit this parameter, the default of 20 is used.</p>
                */
            MaxResults?: number;
            /**
                * <p>The ARN of the canary that you want to view groups for.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListAssociatedGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssociatedGroupsRequest) => any;
    }
    export interface ListAssociatedGroupsResponse {
            /**
                * <p>An array of structures that contain information about the groups that this canary is associated with.</p>
                */
            Groups?: GroupSummary[];
            /**
                * <p>A token that indicates that there is more data
                *          available. You can use this token in a subsequent <code>ListAssociatedGroups</code> operation to retrieve the next
                *          set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListAssociatedGroupsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssociatedGroupsResponse) => any;
    }
    export interface ListGroupResourcesRequest {
            /**
                * <p>A token that indicates that there is more data
                *          available. You can use this token in a subsequent operation to retrieve the next
                *          set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>Specify this parameter to limit how many canary ARNs are returned each time you use
                *          the <code>ListGroupResources</code> operation. If you omit this parameter, the default of 20 is used.</p>
                */
            MaxResults?: number;
            /**
                * <p>Specifies the group to return information for. You can specify the group name, the ARN, or the
                *          group ID as the <code>GroupIdentifier</code>.</p>
                */
            GroupIdentifier: string | undefined;
    }
    export namespace ListGroupResourcesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupResourcesRequest) => any;
    }
    export interface ListGroupResourcesResponse {
            /**
                * <p>An array of ARNs. These ARNs are for the canaries that are associated with the group.</p>
                */
            Resources?: string[];
            /**
                * <p>A token that indicates that there is more data
                *          available. You can use this token in a subsequent <code>ListGroupResources</code> operation to retrieve the next
                *          set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListGroupResourcesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupResourcesResponse) => any;
    }
    export interface ListGroupsRequest {
            /**
                * <p>A token that indicates that there is more data
                *          available. You can use this token in a subsequent operation to retrieve the next
                *          set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>Specify this parameter to limit how many groups are returned each time you use
                *          the <code>ListGroups</code> operation. If you omit this parameter, the default of 20 is used.</p>
                */
            MaxResults?: number;
    }
    export namespace ListGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupsRequest) => any;
    }
    export interface ListGroupsResponse {
            /**
                * <p>An array of structures that each contain information about one group.</p>
                */
            Groups?: GroupSummary[];
            /**
                * <p>A token that indicates that there is more data
                *          available. You can use this token in a subsequent <code>ListGroups</code> operation to retrieve the next
                *          set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListGroupsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupsResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The ARN of the canary or group that you want to view tags for.</p>
                *          <p>The ARN format of a canary is
                *                <code>arn:aws:synthetics:<i>Region</i>:<i>account-id</i>:canary:<i>canary-name</i>
                *             </code>.</p>
                *          <p>The ARN format of a group is
                *          <code>arn:aws:synthetics:<i>Region</i>:<i>account-id</i>:group:<i>group-name</i>
                *             </code>
                *          </p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The list of tag keys and values associated with the resource that you specified.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    /**
        * <p>The specified resource was not found.</p>
        */
    export class NotFoundException extends __BaseException {
            readonly name: "NotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
    }
    /**
        * <p>There were too many simultaneous requests. Try the operation again.</p>
        */
    export class TooManyRequestsException extends __BaseException {
            readonly name: "TooManyRequestsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
    }
    export interface StartCanaryRequest {
            /**
                * <p>The name of the canary that you want to run. To find
                *          canary names, use <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_DescribeCanaries.html">DescribeCanaries</a>.</p>
                */
            Name: string | undefined;
    }
    export namespace StartCanaryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartCanaryRequest) => any;
    }
    export interface StartCanaryResponse {
    }
    export namespace StartCanaryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartCanaryResponse) => any;
    }
    export interface StopCanaryRequest {
            /**
                * <p>The name of the canary that you want to stop. To find the names of your
                *          canaries, use <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_DescribeCanaries.html">ListCanaries</a>.</p>
                */
            Name: string | undefined;
    }
    export namespace StopCanaryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopCanaryRequest) => any;
    }
    export interface StopCanaryResponse {
    }
    export namespace StopCanaryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopCanaryResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The ARN of the canary or group that you're adding tags to.</p>
                *          <p>The ARN format of a canary is
                * <code>arn:aws:synthetics:<i>Region</i>:<i>account-id</i>:canary:<i>canary-name</i>
                *             </code>.</p>
                *          <p>The ARN format of a group is
                *  <code>arn:aws:synthetics:<i>Region</i>:<i>account-id</i>:group:<i>group-name</i>
                *             </code>
                *          </p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The list of key-value pairs to associate with the resource.</p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The ARN of the canary or group that you're removing tags from.</p>
                *          <p>The ARN format of a canary is
                *                <code>arn:aws:synthetics:<i>Region</i>:<i>account-id</i>:canary:<i>canary-name</i>
                *             </code>.</p>
                *          <p>The ARN format of a group is
                *          <code>arn:aws:synthetics:<i>Region</i>:<i>account-id</i>:group:<i>group-name</i>
                *             </code>
                *          </p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The list of tag keys to remove from the resource.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    /**
        * <p>An object that specifies what screenshots to use as a baseline for visual monitoring by this canary. It can
        *          optionally also specify parts of the screenshots to ignore during the visual monitoring comparison.</p>
        *
        *          <p>Visual monitoring is supported only on canaries running the <b>syn-puppeteer-node-3.2</b>
        *          runtime or later. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Library_SyntheticsLogger_VisualTesting.html">
        *             Visual monitoring</a> and <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Blueprints_VisualTesting.html">
        *                Visual monitoring blueprint</a>
        *          </p>
        */
    export interface VisualReferenceInput {
            /**
                * <p>An array of screenshots that will be used as the baseline for visual monitoring in future runs of this canary. If there is a screenshot that you don't want to be used for
                *       visual monitoring, remove it from this array.</p>
                */
            BaseScreenshots?: BaseScreenshot[];
            /**
                * <p>Specifies which canary run to use the screenshots from as the baseline for future visual monitoring with this canary. Valid values are
                *          <code>nextrun</code> to use the screenshots from the next run after this update is made, <code>lastrun</code> to use the screenshots from the most recent run
                *          before this update was made, or the value of <code>Id</code> in the <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_CanaryRun.html">
                *             CanaryRun</a> from any past run of this canary.</p>
                */
            BaseCanaryRunId: string | undefined;
    }
    export namespace VisualReferenceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VisualReferenceInput) => any;
    }
    export interface UpdateCanaryRequest {
            /**
                * <p>The name of the canary that you want to update. To find the names of your
                *          canaries, use <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_DescribeCanaries.html">DescribeCanaries</a>.</p>
                *          <p>You cannot change the name of a canary that has already been created.</p>
                */
            Name: string | undefined;
            /**
                * <p>A structure that includes the entry point from which the canary should start
                *          running your script. If the script is stored in
                *          an S3 bucket, the bucket name, key, and version are also included.
                *       </p>
                */
            Code?: CanaryCodeInput;
            /**
                * <p>The ARN of the IAM role to be used to run the canary. This role must already exist,
                *          and must include <code>lambda.amazonaws.com</code> as a principal in the trust
                *          policy. The role must also have the following permissions:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>s3:PutObject</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>s3:GetBucketLocation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>s3:ListAllMyBuckets</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>cloudwatch:PutMetricData</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>logs:CreateLogGroup</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>logs:CreateLogStream</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>logs:CreateLogStream</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ExecutionRoleArn?: string;
            /**
                * <p>Specifies the runtime version to use for the canary.
                *          For a list of valid runtime versions and for more information about
                *          runtime versions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html">
                *             Canary Runtime Versions</a>.</p>
                */
            RuntimeVersion?: string;
            /**
                * <p>A structure that contains information about how often the canary is to run, and when
                *          these runs are to stop.</p>
                */
            Schedule?: CanaryScheduleInput;
            /**
                * <p>A structure that contains the timeout value that is used for each individual run of the
                *          canary.</p>
                *          <important>
                *             <p>The environment variables keys and values are not encrypted. Do not store sensitive information
                *          in this field.</p>
                *          </important>
                */
            RunConfig?: CanaryRunConfigInput;
            /**
                * <p>The number of days to retain data about successful runs of this canary.</p>
                */
            SuccessRetentionPeriodInDays?: number;
            /**
                * <p>The number of days to retain data about failed runs of this canary.</p>
                */
            FailureRetentionPeriodInDays?: number;
            /**
                * <p>If this canary is to test an endpoint in a VPC, this structure contains
                *          information about the subnet and security groups of the VPC endpoint.
                *          For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html">
                *             Running a Canary in a VPC</a>.</p>
                */
            VpcConfig?: VpcConfigInput;
            /**
                * <p>Defines the screenshots to use as the baseline for comparisons during visual monitoring comparisons during future runs of this canary. If you omit this
                *       parameter, no changes are made to any baseline screenshots that the canary might be using already.</p>
                *          <p>Visual monitoring is supported only on canaries running the <b>syn-puppeteer-node-3.2</b>
                *          runtime or later. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Library_SyntheticsLogger_VisualTesting.html">
                *             Visual monitoring</a> and <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Blueprints_VisualTesting.html">
                *                Visual monitoring blueprint</a>
                *          </p>
                */
            VisualReference?: VisualReferenceInput;
            /**
                * <p>The location in Amazon S3 where Synthetics stores artifacts from the test runs of this canary.
                *          Artifacts include the log file, screenshots, and HAR files. The name of the
                *          S3 bucket can't include a period (.).</p>
                */
            ArtifactS3Location?: string;
            /**
                * <p>A structure that contains the configuration for canary artifacts,
                *          including the encryption-at-rest settings for artifacts that
                *          the canary uploads to Amazon S3.</p>
                */
            ArtifactConfig?: ArtifactConfigInput;
    }
    export namespace UpdateCanaryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateCanaryRequest) => any;
    }
    export interface UpdateCanaryResponse {
    }
    export namespace UpdateCanaryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateCanaryResponse) => any;
    }
}

declare module '@aws-sdk/client-synthetics/node_modules/@aws-sdk/client-synthetics/dist-types/models/SyntheticsServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Synthetics service.
        */
    export class SyntheticsServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

