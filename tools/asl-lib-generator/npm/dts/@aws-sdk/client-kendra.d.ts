// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-kendra' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AssociateEntitiesToExperienceCommandInput, AssociateEntitiesToExperienceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/AssociateEntitiesToExperienceCommand";
    import { AssociatePersonasToEntitiesCommandInput, AssociatePersonasToEntitiesCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/AssociatePersonasToEntitiesCommand";
    import { BatchDeleteDocumentCommandInput, BatchDeleteDocumentCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/BatchDeleteDocumentCommand";
    import { BatchGetDocumentStatusCommandInput, BatchGetDocumentStatusCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/BatchGetDocumentStatusCommand";
    import { BatchPutDocumentCommandInput, BatchPutDocumentCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/BatchPutDocumentCommand";
    import { ClearQuerySuggestionsCommandInput, ClearQuerySuggestionsCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ClearQuerySuggestionsCommand";
    import { CreateAccessControlConfigurationCommandInput, CreateAccessControlConfigurationCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/CreateAccessControlConfigurationCommand";
    import { CreateDataSourceCommandInput, CreateDataSourceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/CreateDataSourceCommand";
    import { CreateExperienceCommandInput, CreateExperienceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/CreateExperienceCommand";
    import { CreateFaqCommandInput, CreateFaqCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/CreateFaqCommand";
    import { CreateIndexCommandInput, CreateIndexCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/CreateIndexCommand";
    import { CreateQuerySuggestionsBlockListCommandInput, CreateQuerySuggestionsBlockListCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/CreateQuerySuggestionsBlockListCommand";
    import { CreateThesaurusCommandInput, CreateThesaurusCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/CreateThesaurusCommand";
    import { DeleteAccessControlConfigurationCommandInput, DeleteAccessControlConfigurationCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeleteAccessControlConfigurationCommand";
    import { DeleteDataSourceCommandInput, DeleteDataSourceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeleteDataSourceCommand";
    import { DeleteExperienceCommandInput, DeleteExperienceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeleteExperienceCommand";
    import { DeleteFaqCommandInput, DeleteFaqCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeleteFaqCommand";
    import { DeleteIndexCommandInput, DeleteIndexCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeleteIndexCommand";
    import { DeletePrincipalMappingCommandInput, DeletePrincipalMappingCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeletePrincipalMappingCommand";
    import { DeleteQuerySuggestionsBlockListCommandInput, DeleteQuerySuggestionsBlockListCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeleteQuerySuggestionsBlockListCommand";
    import { DeleteThesaurusCommandInput, DeleteThesaurusCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeleteThesaurusCommand";
    import { DescribeAccessControlConfigurationCommandInput, DescribeAccessControlConfigurationCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeAccessControlConfigurationCommand";
    import { DescribeDataSourceCommandInput, DescribeDataSourceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeDataSourceCommand";
    import { DescribeExperienceCommandInput, DescribeExperienceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeExperienceCommand";
    import { DescribeFaqCommandInput, DescribeFaqCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeFaqCommand";
    import { DescribeIndexCommandInput, DescribeIndexCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeIndexCommand";
    import { DescribePrincipalMappingCommandInput, DescribePrincipalMappingCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribePrincipalMappingCommand";
    import { DescribeQuerySuggestionsBlockListCommandInput, DescribeQuerySuggestionsBlockListCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeQuerySuggestionsBlockListCommand";
    import { DescribeQuerySuggestionsConfigCommandInput, DescribeQuerySuggestionsConfigCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeQuerySuggestionsConfigCommand";
    import { DescribeThesaurusCommandInput, DescribeThesaurusCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeThesaurusCommand";
    import { DisassociateEntitiesFromExperienceCommandInput, DisassociateEntitiesFromExperienceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DisassociateEntitiesFromExperienceCommand";
    import { DisassociatePersonasFromEntitiesCommandInput, DisassociatePersonasFromEntitiesCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DisassociatePersonasFromEntitiesCommand";
    import { GetQuerySuggestionsCommandInput, GetQuerySuggestionsCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/GetQuerySuggestionsCommand";
    import { GetSnapshotsCommandInput, GetSnapshotsCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/GetSnapshotsCommand";
    import { ListAccessControlConfigurationsCommandInput, ListAccessControlConfigurationsCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListAccessControlConfigurationsCommand";
    import { ListDataSourcesCommandInput, ListDataSourcesCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListDataSourcesCommand";
    import { ListDataSourceSyncJobsCommandInput, ListDataSourceSyncJobsCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListDataSourceSyncJobsCommand";
    import { ListEntityPersonasCommandInput, ListEntityPersonasCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListEntityPersonasCommand";
    import { ListExperienceEntitiesCommandInput, ListExperienceEntitiesCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListExperienceEntitiesCommand";
    import { ListExperiencesCommandInput, ListExperiencesCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListExperiencesCommand";
    import { ListFaqsCommandInput, ListFaqsCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListFaqsCommand";
    import { ListGroupsOlderThanOrderingIdCommandInput, ListGroupsOlderThanOrderingIdCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListGroupsOlderThanOrderingIdCommand";
    import { ListIndicesCommandInput, ListIndicesCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListIndicesCommand";
    import { ListQuerySuggestionsBlockListsCommandInput, ListQuerySuggestionsBlockListsCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListQuerySuggestionsBlockListsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListTagsForResourceCommand";
    import { ListThesauriCommandInput, ListThesauriCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListThesauriCommand";
    import { PutPrincipalMappingCommandInput, PutPrincipalMappingCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/PutPrincipalMappingCommand";
    import { QueryCommandInput, QueryCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/QueryCommand";
    import { StartDataSourceSyncJobCommandInput, StartDataSourceSyncJobCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/StartDataSourceSyncJobCommand";
    import { StopDataSourceSyncJobCommandInput, StopDataSourceSyncJobCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/StopDataSourceSyncJobCommand";
    import { SubmitFeedbackCommandInput, SubmitFeedbackCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/SubmitFeedbackCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UntagResourceCommand";
    import { UpdateAccessControlConfigurationCommandInput, UpdateAccessControlConfigurationCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UpdateAccessControlConfigurationCommand";
    import { UpdateDataSourceCommandInput, UpdateDataSourceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UpdateDataSourceCommand";
    import { UpdateExperienceCommandInput, UpdateExperienceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UpdateExperienceCommand";
    import { UpdateIndexCommandInput, UpdateIndexCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UpdateIndexCommand";
    import { UpdateQuerySuggestionsBlockListCommandInput, UpdateQuerySuggestionsBlockListCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UpdateQuerySuggestionsBlockListCommand";
    import { UpdateQuerySuggestionsConfigCommandInput, UpdateQuerySuggestionsConfigCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UpdateQuerySuggestionsConfigCommand";
    import { UpdateThesaurusCommandInput, UpdateThesaurusCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UpdateThesaurusCommand";
    import { KendraClient } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    /**
        * <p>Amazon Kendra is a service for indexing large document sets.</p>
        */
    export class Kendra extends KendraClient {
            /**
                * <p>Grants users or groups in your Amazon Web Services SSO identity source access
                *             to your Amazon Kendra experience. You can create an Amazon Kendra experience such as a
                *             search application. For more information on creating a search application
                *             experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building
                *                 a search experience with no code</a>.</p>
                */
            associateEntitiesToExperience(args: AssociateEntitiesToExperienceCommandInput, options?: __HttpHandlerOptions): Promise<AssociateEntitiesToExperienceCommandOutput>;
            associateEntitiesToExperience(args: AssociateEntitiesToExperienceCommandInput, cb: (err: any, data?: AssociateEntitiesToExperienceCommandOutput) => void): void;
            associateEntitiesToExperience(args: AssociateEntitiesToExperienceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateEntitiesToExperienceCommandOutput) => void): void;
            /**
                * <p>Defines the specific permissions of users or groups in your Amazon Web Services SSO
                *             identity source with access to your Amazon Kendra experience. You can create an Amazon Kendra
                *             experience such as a search application. For more information on creating a
                *             search application experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building
                *                 a search experience with no code</a>.</p>
                */
            associatePersonasToEntities(args: AssociatePersonasToEntitiesCommandInput, options?: __HttpHandlerOptions): Promise<AssociatePersonasToEntitiesCommandOutput>;
            associatePersonasToEntities(args: AssociatePersonasToEntitiesCommandInput, cb: (err: any, data?: AssociatePersonasToEntitiesCommandOutput) => void): void;
            associatePersonasToEntities(args: AssociatePersonasToEntitiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociatePersonasToEntitiesCommandOutput) => void): void;
            /**
                * <p>Removes one or more documents from an index. The documents must have
                *       been added with the <code>BatchPutDocument</code> API.</p>
                *          <p>The documents are deleted asynchronously. You can see the progress of
                *       the deletion by using Amazon Web Services CloudWatch. Any error messages related to the
                *       processing of the batch are sent to you CloudWatch log.</p>
                */
            batchDeleteDocument(args: BatchDeleteDocumentCommandInput, options?: __HttpHandlerOptions): Promise<BatchDeleteDocumentCommandOutput>;
            batchDeleteDocument(args: BatchDeleteDocumentCommandInput, cb: (err: any, data?: BatchDeleteDocumentCommandOutput) => void): void;
            batchDeleteDocument(args: BatchDeleteDocumentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDeleteDocumentCommandOutput) => void): void;
            /**
                * <p>Returns the indexing status for one or more documents submitted
                *             with the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_BatchPutDocument.html">
                *                 BatchPutDocument</a> API.</p>
                *         <p>When you use the <code>BatchPutDocument</code> API,
                *             documents are indexed asynchronously. You can use the
                *                 <code>BatchGetDocumentStatus</code> API to get the current
                *             status of a list of documents so that you can determine if they have
                *             been successfully indexed.</p>
                *         <p>You can also use the <code>BatchGetDocumentStatus</code> API
                *             to check the status of the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_BatchDeleteDocument.html">
                *                 BatchDeleteDocument</a> API. When a document is
                *             deleted from the index, Amazon Kendra returns <code>NOT_FOUND</code> as the
                *             status.</p>
                */
            batchGetDocumentStatus(args: BatchGetDocumentStatusCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetDocumentStatusCommandOutput>;
            batchGetDocumentStatus(args: BatchGetDocumentStatusCommandInput, cb: (err: any, data?: BatchGetDocumentStatusCommandOutput) => void): void;
            batchGetDocumentStatus(args: BatchGetDocumentStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetDocumentStatusCommandOutput) => void): void;
            /**
                * <p>Adds one or more documents to an index.</p>
                *          <p>The <code>BatchPutDocument</code> API enables you to ingest
                *       inline documents or a set of documents stored in an Amazon S3 bucket. Use
                *       this API to ingest your text and unstructured text into an index,
                *       add custom attributes to the documents, and to attach an access control
                *       list to the documents added to the index.</p>
                *          <p>The documents are indexed asynchronously. You can see the progress of
                *       the batch using Amazon Web Services CloudWatch. Any error messages related to processing
                *       the batch are sent to your Amazon Web Services CloudWatch log.</p>
                *          <p>For an example of ingesting inline documents using Python and Java SDKs,
                *       see <a href="https://docs.aws.amazon.com/kendra/latest/dg/in-adding-binary-doc.html">Adding
                *         files directly to an index</a>.</p>
                */
            batchPutDocument(args: BatchPutDocumentCommandInput, options?: __HttpHandlerOptions): Promise<BatchPutDocumentCommandOutput>;
            batchPutDocument(args: BatchPutDocumentCommandInput, cb: (err: any, data?: BatchPutDocumentCommandOutput) => void): void;
            batchPutDocument(args: BatchPutDocumentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchPutDocumentCommandOutput) => void): void;
            /**
                * <p>Clears existing query suggestions from an index.</p>
                *         <p>This deletes existing suggestions only, not the queries
                *             in the query log. After you clear suggestions, Amazon Kendra learns
                *             new suggestions based on new queries added to the query log
                *             from the time you cleared suggestions. If you do not see any
                *             new suggestions, then please allow Amazon Kendra to collect
                *             enough queries to learn new suggestions.</p>
                *         <p>
                *             <code>ClearQuerySuggestions</code> is currently not supported in the
                *             Amazon Web Services GovCloud (US-West) region.</p>
                */
            clearQuerySuggestions(args: ClearQuerySuggestionsCommandInput, options?: __HttpHandlerOptions): Promise<ClearQuerySuggestionsCommandOutput>;
            clearQuerySuggestions(args: ClearQuerySuggestionsCommandInput, cb: (err: any, data?: ClearQuerySuggestionsCommandOutput) => void): void;
            clearQuerySuggestions(args: ClearQuerySuggestionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ClearQuerySuggestionsCommandOutput) => void): void;
            /**
                * <p>Creates an access configuration for your documents. This includes
                *             user and group access information for your documents. This is useful
                *             for user context filtering, where search results are filtered based
                *             on the user or their group access to documents.</p>
                *         <p>You can use this to re-configure your existing document level access
                *             control without indexing all of your documents again. For example, your
                *             index contains top-secret company documents that only certain employees
                *             or users should access. One of these users leaves the company or switches
                *             to a team that should be blocked from access to top-secret documents.
                *             Your documents in your index still give this user access to top-secret
                *             documents due to the user having access at the time your documents were
                *             indexed. You can create a specific access control configuration for this
                *             user with deny access. You can later update the access control
                *             configuration to allow access in the case the user returns to the company
                *             and re-joins the 'top-secret' team. You can re-configure access control
                *             for your documents circumstances change.</p>
                *         <p>To apply your access control configuration to certain documents, you call
                *             the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_BatchPutDocument.html">BatchPutDocument</a>
                *             API with the <code>AccessControlConfigurationId</code> included in the
                *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_Document.html">Document</a>
                *             object. If you use an S3 bucket as a data source, you update the
                *             <code>.metadata.json</code> with the <code>AccessControlConfigurationId</code>
                *             and synchronize your data source. Amazon Kendra currently only supports
                *             access control configuration for S3 data sources and documents indexed using the
                *             <code>BatchPutDocument</code> API.</p>
                */
            createAccessControlConfiguration(args: CreateAccessControlConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<CreateAccessControlConfigurationCommandOutput>;
            createAccessControlConfiguration(args: CreateAccessControlConfigurationCommandInput, cb: (err: any, data?: CreateAccessControlConfigurationCommandOutput) => void): void;
            createAccessControlConfiguration(args: CreateAccessControlConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAccessControlConfigurationCommandOutput) => void): void;
            /**
                * <p>Creates a data source that you want to use with an Amazon Kendra index. </p>
                *          <p>You specify a name, data source connector type and description for
                *       your data source. You also specify configuration information for the
                *       data source connector.</p>
                *          <p>
                *             <code>CreateDataSource</code> is a synchronous operation. The
                *       operation returns 200 if the data source was successfully created.
                *       Otherwise, an exception is raised.</p>
                *          <p>Amazon S3 and <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-custom.html">custom</a> data sources are
                *       the only supported data sources in the Amazon Web Services GovCloud (US-West) region.</p>
                *          <p>For an example of creating an index and data source using the Python SDK,
                *       see <a href="https://docs.aws.amazon.com/kendra/latest/dg/gs-python.html">Getting
                *         started with Python SDK</a>. For an example of creating an index and data
                *       source using the Java SDK, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/gs-java.html">Getting started with Java SDK</a>.</p>
                */
            createDataSource(args: CreateDataSourceCommandInput, options?: __HttpHandlerOptions): Promise<CreateDataSourceCommandOutput>;
            createDataSource(args: CreateDataSourceCommandInput, cb: (err: any, data?: CreateDataSourceCommandOutput) => void): void;
            createDataSource(args: CreateDataSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDataSourceCommandOutput) => void): void;
            /**
                * <p>Creates an Amazon Kendra experience such as a search application. For more information
                *             on creating a search application experience, including using the Python and Java SDKs,
                *             see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building a
                *                 search experience with no code</a>.</p>
                */
            createExperience(args: CreateExperienceCommandInput, options?: __HttpHandlerOptions): Promise<CreateExperienceCommandOutput>;
            createExperience(args: CreateExperienceCommandInput, cb: (err: any, data?: CreateExperienceCommandOutput) => void): void;
            createExperience(args: CreateExperienceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateExperienceCommandOutput) => void): void;
            /**
                * <p>Creates an new set of frequently asked question (FAQ) questions and answers.</p>
                *         <p>Adding FAQs to an index is an asynchronous operation.</p>
                *         <p>For an example of adding an FAQ to an index using Python and Java SDKs,
                *             see <a href="https://docs.aws.amazon.com/kendra/latest/dg/in-creating-faq.html#using-faq-file">Using your
                *                 FAQ file</a>.</p>
                */
            createFaq(args: CreateFaqCommandInput, options?: __HttpHandlerOptions): Promise<CreateFaqCommandOutput>;
            createFaq(args: CreateFaqCommandInput, cb: (err: any, data?: CreateFaqCommandOutput) => void): void;
            createFaq(args: CreateFaqCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateFaqCommandOutput) => void): void;
            /**
                * <p>Creates an Amazon Kendra index. Index creation is an asynchronous
                *       API. To determine if index creation has completed, check the
                *         <code>Status</code> field returned from a call to
                *         <code>DescribeIndex</code>. The <code>Status</code> field is set to
                *         <code>ACTIVE</code> when the index is ready to use.</p>
                *          <p>Once the index is active you can index your documents using the
                *         <code>BatchPutDocument</code> API or using one of the supported
                *       data sources.</p>
                *          <p>For an example of creating an index and data source using the Python SDK,
                *       see <a href="https://docs.aws.amazon.com/kendra/latest/dg/gs-python.html">Getting
                *         started with Python SDK</a>. For an example of creating an index and data
                *       source using the Java SDK, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/gs-java.html">Getting started with Java SDK</a>.</p>
                */
            createIndex(args: CreateIndexCommandInput, options?: __HttpHandlerOptions): Promise<CreateIndexCommandOutput>;
            createIndex(args: CreateIndexCommandInput, cb: (err: any, data?: CreateIndexCommandOutput) => void): void;
            createIndex(args: CreateIndexCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateIndexCommandOutput) => void): void;
            /**
                * <p>Creates a block list to exlcude certain queries from suggestions.</p>
                *         <p>Any query that contains words or phrases specified in the block
                *             list is blocked or filtered out from being shown as a suggestion.</p>
                *         <p>You need to provide the file location of your block list text file
                *             in your S3 bucket. In your text file, enter each block word or phrase
                *             on a separate line.</p>
                *         <p>For information on the current quota limits for block lists, see
                *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas
                *                 for Amazon Kendra</a>.</p>
                *         <p>
                *             <code>CreateQuerySuggestionsBlockList</code> is currently not supported in the
                *             Amazon Web Services GovCloud (US-West) region.</p>
                *         <p>For an example of creating a block list for query suggestions using the
                *             Python SDK, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/query-suggestions.html#suggestions-block-list">Query
                *                 suggestions block list</a>.</p>
                */
            createQuerySuggestionsBlockList(args: CreateQuerySuggestionsBlockListCommandInput, options?: __HttpHandlerOptions): Promise<CreateQuerySuggestionsBlockListCommandOutput>;
            createQuerySuggestionsBlockList(args: CreateQuerySuggestionsBlockListCommandInput, cb: (err: any, data?: CreateQuerySuggestionsBlockListCommandOutput) => void): void;
            createQuerySuggestionsBlockList(args: CreateQuerySuggestionsBlockListCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateQuerySuggestionsBlockListCommandOutput) => void): void;
            /**
                * <p>Creates a thesaurus for an index. The thesaurus
                *       contains a list of synonyms in Solr format.</p>
                *          <p>For an example of adding a thesaurus file to an index, see
                *          <a href="https://docs.aws.amazon.com/kendra/latest/dg/index-synonyms-adding-thesaurus-file.html">Adding
                *             custom synonyms to an index</a>.</p>
                */
            createThesaurus(args: CreateThesaurusCommandInput, options?: __HttpHandlerOptions): Promise<CreateThesaurusCommandOutput>;
            createThesaurus(args: CreateThesaurusCommandInput, cb: (err: any, data?: CreateThesaurusCommandOutput) => void): void;
            createThesaurus(args: CreateThesaurusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateThesaurusCommandOutput) => void): void;
            /**
                * <p>Deletes an access control configuration that you created for your
                *             documents in an index. This includes user and group access information
                *             for your documents. This is useful for user context filtering, where search
                *             results are filtered based on the user or their group access to documents.</p>
                */
            deleteAccessControlConfiguration(args: DeleteAccessControlConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAccessControlConfigurationCommandOutput>;
            deleteAccessControlConfiguration(args: DeleteAccessControlConfigurationCommandInput, cb: (err: any, data?: DeleteAccessControlConfigurationCommandOutput) => void): void;
            deleteAccessControlConfiguration(args: DeleteAccessControlConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAccessControlConfigurationCommandOutput) => void): void;
            /**
                * <p>Deletes an Amazon Kendra data source. An exception is not thrown if the
                *       data source is already being deleted. While the data source is being
                *       deleted, the <code>Status</code> field returned by a call to the
                *         <code>DescribeDataSource</code> API is set to
                *         <code>DELETING</code>. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/delete-data-source.html">Deleting Data Sources</a>.</p>
                */
            deleteDataSource(args: DeleteDataSourceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDataSourceCommandOutput>;
            deleteDataSource(args: DeleteDataSourceCommandInput, cb: (err: any, data?: DeleteDataSourceCommandOutput) => void): void;
            deleteDataSource(args: DeleteDataSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDataSourceCommandOutput) => void): void;
            /**
                * <p>Deletes your Amazon Kendra experience such as a search application. For more information on
                *             creating a search application experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building a search
                *                 experience with no code</a>.</p>
                */
            deleteExperience(args: DeleteExperienceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteExperienceCommandOutput>;
            deleteExperience(args: DeleteExperienceCommandInput, cb: (err: any, data?: DeleteExperienceCommandOutput) => void): void;
            deleteExperience(args: DeleteExperienceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteExperienceCommandOutput) => void): void;
            /**
                * <p>Removes an FAQ from an index.</p>
                */
            deleteFaq(args: DeleteFaqCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFaqCommandOutput>;
            deleteFaq(args: DeleteFaqCommandInput, cb: (err: any, data?: DeleteFaqCommandOutput) => void): void;
            deleteFaq(args: DeleteFaqCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFaqCommandOutput) => void): void;
            /**
                * <p>Deletes an existing Amazon Kendra index. An exception is not thrown if
                *       the index is already being deleted. While the index is being deleted, the
                *         <code>Status</code> field returned by a call to the
                *         <code>DescribeIndex</code> API is set to
                *       <code>DELETING</code>.</p>
                */
            deleteIndex(args: DeleteIndexCommandInput, options?: __HttpHandlerOptions): Promise<DeleteIndexCommandOutput>;
            deleteIndex(args: DeleteIndexCommandInput, cb: (err: any, data?: DeleteIndexCommandOutput) => void): void;
            deleteIndex(args: DeleteIndexCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteIndexCommandOutput) => void): void;
            /**
                * <p>Deletes a group so that all users and sub groups that belong to the group can
                *             no longer access documents only available to that group.</p>
                *         <p>For example, after deleting the group "Summer Interns", all interns who
                *             belonged to that group no longer see intern-only documents in their search
                *             results.</p>
                *         <p>If you want to delete or replace users or sub groups of a group, you need to
                *             use the <code>PutPrincipalMapping</code> operation. For example, if a user in
                *             the group "Engineering" leaves the engineering team and another user takes
                *             their place, you provide an updated list of users or sub groups that belong
                *             to the "Engineering" group when calling <code>PutPrincipalMapping</code>. You
                *             can update your internal list of users or sub groups and input this list
                *             when calling <code>PutPrincipalMapping</code>.</p>
                *         <p>
                *             <code>DeletePrincipalMapping</code> is currently not supported in the
                *             Amazon Web Services GovCloud (US-West) region.</p>
                */
            deletePrincipalMapping(args: DeletePrincipalMappingCommandInput, options?: __HttpHandlerOptions): Promise<DeletePrincipalMappingCommandOutput>;
            deletePrincipalMapping(args: DeletePrincipalMappingCommandInput, cb: (err: any, data?: DeletePrincipalMappingCommandOutput) => void): void;
            deletePrincipalMapping(args: DeletePrincipalMappingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePrincipalMappingCommandOutput) => void): void;
            /**
                * <p>Deletes a block list used for query suggestions for an index.</p>
                *         <p>A deleted block list might not take effect right away. Amazon Kendra
                *             needs to refresh the entire suggestions list to add back the
                *             queries that were previously blocked.</p>
                *         <p>
                *             <code>DeleteQuerySuggestionsBlockList</code> is currently not supported in the
                *             Amazon Web Services GovCloud (US-West) region.</p>
                */
            deleteQuerySuggestionsBlockList(args: DeleteQuerySuggestionsBlockListCommandInput, options?: __HttpHandlerOptions): Promise<DeleteQuerySuggestionsBlockListCommandOutput>;
            deleteQuerySuggestionsBlockList(args: DeleteQuerySuggestionsBlockListCommandInput, cb: (err: any, data?: DeleteQuerySuggestionsBlockListCommandOutput) => void): void;
            deleteQuerySuggestionsBlockList(args: DeleteQuerySuggestionsBlockListCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteQuerySuggestionsBlockListCommandOutput) => void): void;
            /**
                * <p>Deletes an existing Amazon Kendra thesaurus.
                *       </p>
                */
            deleteThesaurus(args: DeleteThesaurusCommandInput, options?: __HttpHandlerOptions): Promise<DeleteThesaurusCommandOutput>;
            deleteThesaurus(args: DeleteThesaurusCommandInput, cb: (err: any, data?: DeleteThesaurusCommandOutput) => void): void;
            deleteThesaurus(args: DeleteThesaurusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteThesaurusCommandOutput) => void): void;
            /**
                * <p>Gets information about an access control configuration that you created for your
                *             documents in an index. This includes user and group access information for your
                *             documents. This is useful for user context filtering, where search results are
                *             filtered based on the user or their group access to documents.</p>
                */
            describeAccessControlConfiguration(args: DescribeAccessControlConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAccessControlConfigurationCommandOutput>;
            describeAccessControlConfiguration(args: DescribeAccessControlConfigurationCommandInput, cb: (err: any, data?: DescribeAccessControlConfigurationCommandOutput) => void): void;
            describeAccessControlConfiguration(args: DescribeAccessControlConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAccessControlConfigurationCommandOutput) => void): void;
            /**
                * <p>Gets information about an Amazon Kendra data source.</p>
                */
            describeDataSource(args: DescribeDataSourceCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDataSourceCommandOutput>;
            describeDataSource(args: DescribeDataSourceCommandInput, cb: (err: any, data?: DescribeDataSourceCommandOutput) => void): void;
            describeDataSource(args: DescribeDataSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDataSourceCommandOutput) => void): void;
            /**
                * <p>Gets information about your Amazon Kendra experience such as a search application.
                *             For more information on creating a search application experience,
                *             see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building
                *                 a search experience with no code</a>.</p>
                */
            describeExperience(args: DescribeExperienceCommandInput, options?: __HttpHandlerOptions): Promise<DescribeExperienceCommandOutput>;
            describeExperience(args: DescribeExperienceCommandInput, cb: (err: any, data?: DescribeExperienceCommandOutput) => void): void;
            describeExperience(args: DescribeExperienceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeExperienceCommandOutput) => void): void;
            /**
                * <p>Gets information about an FAQ list.</p>
                */
            describeFaq(args: DescribeFaqCommandInput, options?: __HttpHandlerOptions): Promise<DescribeFaqCommandOutput>;
            describeFaq(args: DescribeFaqCommandInput, cb: (err: any, data?: DescribeFaqCommandOutput) => void): void;
            describeFaq(args: DescribeFaqCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeFaqCommandOutput) => void): void;
            /**
                * <p>Gets information about an existing Amazon Kendra index.</p>
                */
            describeIndex(args: DescribeIndexCommandInput, options?: __HttpHandlerOptions): Promise<DescribeIndexCommandOutput>;
            describeIndex(args: DescribeIndexCommandInput, cb: (err: any, data?: DescribeIndexCommandOutput) => void): void;
            describeIndex(args: DescribeIndexCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeIndexCommandOutput) => void): void;
            /**
                * <p>Describes the processing of <code>PUT</code> and <code>DELETE</code> actions
                *             for mapping users to their groups. This includes information on the status of
                *             actions currently processing or yet to be processed, when actions were last updated,
                *             when actions were received by Amazon Kendra, the latest action that should process
                *             and apply after other actions, and useful error messages if an action could
                *             not be processed.</p>
                *         <p>
                *             <code>DescribePrincipalMapping</code> is currently not supported in the
                *             Amazon Web Services GovCloud (US-West) region.</p>
                */
            describePrincipalMapping(args: DescribePrincipalMappingCommandInput, options?: __HttpHandlerOptions): Promise<DescribePrincipalMappingCommandOutput>;
            describePrincipalMapping(args: DescribePrincipalMappingCommandInput, cb: (err: any, data?: DescribePrincipalMappingCommandOutput) => void): void;
            describePrincipalMapping(args: DescribePrincipalMappingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePrincipalMappingCommandOutput) => void): void;
            /**
                * <p>Gets information about a block list used for query suggestions for
                *             an index.</p>
                *         <p>This is used to check the current settings that are applied to a
                *             block list.</p>
                *         <p>
                *             <code>DescribeQuerySuggestionsBlockList</code> is currently not supported in the
                *             Amazon Web Services GovCloud (US-West) region.</p>
                */
            describeQuerySuggestionsBlockList(args: DescribeQuerySuggestionsBlockListCommandInput, options?: __HttpHandlerOptions): Promise<DescribeQuerySuggestionsBlockListCommandOutput>;
            describeQuerySuggestionsBlockList(args: DescribeQuerySuggestionsBlockListCommandInput, cb: (err: any, data?: DescribeQuerySuggestionsBlockListCommandOutput) => void): void;
            describeQuerySuggestionsBlockList(args: DescribeQuerySuggestionsBlockListCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeQuerySuggestionsBlockListCommandOutput) => void): void;
            /**
                * <p>Gets information on the settings of query suggestions for an index.</p>
                *         <p>This is used to check the current settings applied
                *             to query suggestions.</p>
                *         <p>
                *             <code>DescribeQuerySuggestionsConfig</code> is currently not supported in the
                *             Amazon Web Services GovCloud (US-West) region.</p>
                */
            describeQuerySuggestionsConfig(args: DescribeQuerySuggestionsConfigCommandInput, options?: __HttpHandlerOptions): Promise<DescribeQuerySuggestionsConfigCommandOutput>;
            describeQuerySuggestionsConfig(args: DescribeQuerySuggestionsConfigCommandInput, cb: (err: any, data?: DescribeQuerySuggestionsConfigCommandOutput) => void): void;
            describeQuerySuggestionsConfig(args: DescribeQuerySuggestionsConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeQuerySuggestionsConfigCommandOutput) => void): void;
            /**
                * <p>Gets information about an existing Amazon Kendra thesaurus.</p>
                */
            describeThesaurus(args: DescribeThesaurusCommandInput, options?: __HttpHandlerOptions): Promise<DescribeThesaurusCommandOutput>;
            describeThesaurus(args: DescribeThesaurusCommandInput, cb: (err: any, data?: DescribeThesaurusCommandOutput) => void): void;
            describeThesaurus(args: DescribeThesaurusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeThesaurusCommandOutput) => void): void;
            /**
                * <p>Prevents users or groups in your Amazon Web Services SSO identity source
                *             from accessing your Amazon Kendra experience. You can create an Amazon Kendra experience
                *             such as a search application. For more information on creating a search
                *             application experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building
                *                 a search experience with no code</a>.</p>
                */
            disassociateEntitiesFromExperience(args: DisassociateEntitiesFromExperienceCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateEntitiesFromExperienceCommandOutput>;
            disassociateEntitiesFromExperience(args: DisassociateEntitiesFromExperienceCommandInput, cb: (err: any, data?: DisassociateEntitiesFromExperienceCommandOutput) => void): void;
            disassociateEntitiesFromExperience(args: DisassociateEntitiesFromExperienceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateEntitiesFromExperienceCommandOutput) => void): void;
            /**
                * <p>Removes the specific permissions of users or groups in your Amazon Web Services SSO
                *             identity source with access to your Amazon Kendra experience. You can create an Amazon Kendra
                *             experience such as a search application. For more information on creating a
                *             search application experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building a
                *                 search experience with no code</a>.</p>
                */
            disassociatePersonasFromEntities(args: DisassociatePersonasFromEntitiesCommandInput, options?: __HttpHandlerOptions): Promise<DisassociatePersonasFromEntitiesCommandOutput>;
            disassociatePersonasFromEntities(args: DisassociatePersonasFromEntitiesCommandInput, cb: (err: any, data?: DisassociatePersonasFromEntitiesCommandOutput) => void): void;
            disassociatePersonasFromEntities(args: DisassociatePersonasFromEntitiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociatePersonasFromEntitiesCommandOutput) => void): void;
            /**
                * <p>Fetches the queries that are suggested to your users.</p>
                *         <p>
                *             <code>GetQuerySuggestions</code> is currently not supported in the
                *             Amazon Web Services GovCloud (US-West) region.</p>
                */
            getQuerySuggestions(args: GetQuerySuggestionsCommandInput, options?: __HttpHandlerOptions): Promise<GetQuerySuggestionsCommandOutput>;
            getQuerySuggestions(args: GetQuerySuggestionsCommandInput, cb: (err: any, data?: GetQuerySuggestionsCommandOutput) => void): void;
            getQuerySuggestions(args: GetQuerySuggestionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetQuerySuggestionsCommandOutput) => void): void;
            /**
                * <p>Retrieves search metrics data. The data provides a snapshot of how
                *             your users interact with your search application and how effective
                *             the application is.</p>
                */
            getSnapshots(args: GetSnapshotsCommandInput, options?: __HttpHandlerOptions): Promise<GetSnapshotsCommandOutput>;
            getSnapshots(args: GetSnapshotsCommandInput, cb: (err: any, data?: GetSnapshotsCommandOutput) => void): void;
            getSnapshots(args: GetSnapshotsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSnapshotsCommandOutput) => void): void;
            /**
                * <p>Lists one or more access control configurations for an index. This
                *             includes user and group access information for your documents. This
                *             is useful for user context filtering, where search results are filtered
                *             based on the user or their group access to documents.</p>
                */
            listAccessControlConfigurations(args: ListAccessControlConfigurationsCommandInput, options?: __HttpHandlerOptions): Promise<ListAccessControlConfigurationsCommandOutput>;
            listAccessControlConfigurations(args: ListAccessControlConfigurationsCommandInput, cb: (err: any, data?: ListAccessControlConfigurationsCommandOutput) => void): void;
            listAccessControlConfigurations(args: ListAccessControlConfigurationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAccessControlConfigurationsCommandOutput) => void): void;
            /**
                * <p>Lists the data sources that you have created.</p>
                */
            listDataSources(args: ListDataSourcesCommandInput, options?: __HttpHandlerOptions): Promise<ListDataSourcesCommandOutput>;
            listDataSources(args: ListDataSourcesCommandInput, cb: (err: any, data?: ListDataSourcesCommandOutput) => void): void;
            listDataSources(args: ListDataSourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDataSourcesCommandOutput) => void): void;
            /**
                * <p>Gets statistics about synchronizing Amazon Kendra with a data
                *       source.</p>
                */
            listDataSourceSyncJobs(args: ListDataSourceSyncJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListDataSourceSyncJobsCommandOutput>;
            listDataSourceSyncJobs(args: ListDataSourceSyncJobsCommandInput, cb: (err: any, data?: ListDataSourceSyncJobsCommandOutput) => void): void;
            listDataSourceSyncJobs(args: ListDataSourceSyncJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDataSourceSyncJobsCommandOutput) => void): void;
            /**
                * <p>Lists specific permissions of users and groups with access to your
                *             Amazon Kendra experience.</p>
                */
            listEntityPersonas(args: ListEntityPersonasCommandInput, options?: __HttpHandlerOptions): Promise<ListEntityPersonasCommandOutput>;
            listEntityPersonas(args: ListEntityPersonasCommandInput, cb: (err: any, data?: ListEntityPersonasCommandOutput) => void): void;
            listEntityPersonas(args: ListEntityPersonasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEntityPersonasCommandOutput) => void): void;
            /**
                * <p>Lists users or groups in your Amazon Web Services SSO identity source that are
                *             granted access to your Amazon Kendra experience. You can create an Amazon Kendra experience
                *             such as a search application. For more information on creating a search
                *             application experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building
                *                 a search experience with no code</a>.</p>
                */
            listExperienceEntities(args: ListExperienceEntitiesCommandInput, options?: __HttpHandlerOptions): Promise<ListExperienceEntitiesCommandOutput>;
            listExperienceEntities(args: ListExperienceEntitiesCommandInput, cb: (err: any, data?: ListExperienceEntitiesCommandOutput) => void): void;
            listExperienceEntities(args: ListExperienceEntitiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListExperienceEntitiesCommandOutput) => void): void;
            /**
                * <p>Lists one or more Amazon Kendra experiences. You can create an Amazon Kendra experience such
                *             as a search application. For more information on creating a search application
                *             experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building a
                *                 search experience with no code</a>.</p>
                */
            listExperiences(args: ListExperiencesCommandInput, options?: __HttpHandlerOptions): Promise<ListExperiencesCommandOutput>;
            listExperiences(args: ListExperiencesCommandInput, cb: (err: any, data?: ListExperiencesCommandOutput) => void): void;
            listExperiences(args: ListExperiencesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListExperiencesCommandOutput) => void): void;
            /**
                * <p>Gets a list of FAQ lists associated with an index.</p>
                */
            listFaqs(args: ListFaqsCommandInput, options?: __HttpHandlerOptions): Promise<ListFaqsCommandOutput>;
            listFaqs(args: ListFaqsCommandInput, cb: (err: any, data?: ListFaqsCommandOutput) => void): void;
            listFaqs(args: ListFaqsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFaqsCommandOutput) => void): void;
            /**
                * <p>Provides a list of groups that are mapped to users before a
                *             given ordering or timestamp identifier.</p>
                *         <p>
                *             <code>ListGroupsOlderThanOrderingId</code> is currently not supported in the
                *             Amazon Web Services GovCloud (US-West) region.</p>
                */
            listGroupsOlderThanOrderingId(args: ListGroupsOlderThanOrderingIdCommandInput, options?: __HttpHandlerOptions): Promise<ListGroupsOlderThanOrderingIdCommandOutput>;
            listGroupsOlderThanOrderingId(args: ListGroupsOlderThanOrderingIdCommandInput, cb: (err: any, data?: ListGroupsOlderThanOrderingIdCommandOutput) => void): void;
            listGroupsOlderThanOrderingId(args: ListGroupsOlderThanOrderingIdCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListGroupsOlderThanOrderingIdCommandOutput) => void): void;
            /**
                * <p>Lists the Amazon Kendra indexes that you created.</p>
                */
            listIndices(args: ListIndicesCommandInput, options?: __HttpHandlerOptions): Promise<ListIndicesCommandOutput>;
            listIndices(args: ListIndicesCommandInput, cb: (err: any, data?: ListIndicesCommandOutput) => void): void;
            listIndices(args: ListIndicesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListIndicesCommandOutput) => void): void;
            /**
                * <p>Lists the block lists used for query suggestions for an index.</p>
                *         <p>For information on the current quota limits for block lists, see
                *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas
                *                 for Amazon Kendra</a>.</p>
                *         <p>
                *             <code>ListQuerySuggestionsBlockLists</code> is currently not supported in the
                *             Amazon Web Services GovCloud (US-West) region.</p>
                */
            listQuerySuggestionsBlockLists(args: ListQuerySuggestionsBlockListsCommandInput, options?: __HttpHandlerOptions): Promise<ListQuerySuggestionsBlockListsCommandOutput>;
            listQuerySuggestionsBlockLists(args: ListQuerySuggestionsBlockListsCommandInput, cb: (err: any, data?: ListQuerySuggestionsBlockListsCommandOutput) => void): void;
            listQuerySuggestionsBlockLists(args: ListQuerySuggestionsBlockListsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListQuerySuggestionsBlockListsCommandOutput) => void): void;
            /**
                * <p>Gets a list of tags associated with a specified resource. Indexes,
                *       FAQs, and data sources can have tags associated with them.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Lists the thesauri for an index.</p>
                */
            listThesauri(args: ListThesauriCommandInput, options?: __HttpHandlerOptions): Promise<ListThesauriCommandOutput>;
            listThesauri(args: ListThesauriCommandInput, cb: (err: any, data?: ListThesauriCommandOutput) => void): void;
            listThesauri(args: ListThesauriCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListThesauriCommandOutput) => void): void;
            /**
                * <p>Maps users to their groups so that you only need to provide
                *             the user ID when you issue the query.</p>
                *         <p>You can also map sub groups to groups.
                *             For example, the group "Company Intellectual Property Teams" includes
                *             sub groups "Research" and "Engineering". These sub groups include their
                *             own list of users or people who work in these teams. Only users who work
                *             in research and engineering, and therefore belong in the intellectual
                *             property group, can see top-secret company documents in their search
                *             results.</p>
                *         <p>This is useful for user context filtering, where search results are
                *             filtered based on the user or their group access to documents. For more
                *             information, see
                *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/user-context-filter.html">Filtering
                *                 on user context</a>.</p>
                *         <p>If more than five <code>PUT</code> actions for a group are currently
                *             processing, a validation exception is thrown.</p>
                *         <p>
                *             <code>PutPrincipalMapping</code> is currently not supported in the
                *             Amazon Web Services GovCloud (US-West) region.</p>
                */
            putPrincipalMapping(args: PutPrincipalMappingCommandInput, options?: __HttpHandlerOptions): Promise<PutPrincipalMappingCommandOutput>;
            putPrincipalMapping(args: PutPrincipalMappingCommandInput, cb: (err: any, data?: PutPrincipalMappingCommandOutput) => void): void;
            putPrincipalMapping(args: PutPrincipalMappingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutPrincipalMappingCommandOutput) => void): void;
            /**
                * <p>Searches an active index. Use this API to search your documents
                *          using query. The <code>Query</code> API enables to do faceted
                *          search and to filter results based on document attributes.</p>
                *          <p>It also enables you to provide user context that Amazon Kendra uses
                *          to enforce document access control in the search results.</p>
                *          <p>Amazon Kendra searches your index for text content and question and
                *          answer (FAQ) content. By default the response contains three types of
                *          results.</p>
                *          <ul>
                *             <li>
                *                <p>Relevant passages</p>
                *             </li>
                *             <li>
                *                <p>Matching FAQs</p>
                *             </li>
                *             <li>
                *                <p>Relevant documents</p>
                *             </li>
                *          </ul>
                *          <p>You can specify that the query return only one type of result using
                *          the <code>QueryResultTypeConfig</code> parameter.</p>
                *          <p>Each query returns the 100 most relevant results. </p>
                */
            query(args: QueryCommandInput, options?: __HttpHandlerOptions): Promise<QueryCommandOutput>;
            query(args: QueryCommandInput, cb: (err: any, data?: QueryCommandOutput) => void): void;
            query(args: QueryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: QueryCommandOutput) => void): void;
            /**
                * <p>Starts a synchronization job for a data source. If a synchronization
                *       job is already in progress, Amazon Kendra returns a
                *         <code>ResourceInUseException</code> exception.</p>
                */
            startDataSourceSyncJob(args: StartDataSourceSyncJobCommandInput, options?: __HttpHandlerOptions): Promise<StartDataSourceSyncJobCommandOutput>;
            startDataSourceSyncJob(args: StartDataSourceSyncJobCommandInput, cb: (err: any, data?: StartDataSourceSyncJobCommandOutput) => void): void;
            startDataSourceSyncJob(args: StartDataSourceSyncJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartDataSourceSyncJobCommandOutput) => void): void;
            /**
                * <p>Stops a synchronization job that is currently running.
                *       You can't stop a scheduled synchronization job.</p>
                */
            stopDataSourceSyncJob(args: StopDataSourceSyncJobCommandInput, options?: __HttpHandlerOptions): Promise<StopDataSourceSyncJobCommandOutput>;
            stopDataSourceSyncJob(args: StopDataSourceSyncJobCommandInput, cb: (err: any, data?: StopDataSourceSyncJobCommandOutput) => void): void;
            stopDataSourceSyncJob(args: StopDataSourceSyncJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopDataSourceSyncJobCommandOutput) => void): void;
            /**
                * <p>Enables you to provide feedback to Amazon Kendra to improve the
                *             performance of your index.</p>
                *         <p>
                *             <code>SubmitFeedback</code> is currently not supported in the
                *             Amazon Web Services GovCloud (US-West) region.</p>
                */
            submitFeedback(args: SubmitFeedbackCommandInput, options?: __HttpHandlerOptions): Promise<SubmitFeedbackCommandOutput>;
            submitFeedback(args: SubmitFeedbackCommandInput, cb: (err: any, data?: SubmitFeedbackCommandOutput) => void): void;
            submitFeedback(args: SubmitFeedbackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SubmitFeedbackCommandOutput) => void): void;
            /**
                * <p>Adds the specified tag to the specified index, FAQ, or data source
                *       resource. If the tag already exists, the existing value is replaced with
                *       the new value.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes a tag from an index, FAQ, or a data source.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates an access control configuration for your documents in an index. This
                *             includes user and group access information for your documents. This is useful
                *             for user context filtering, where search results are filtered based on the user
                *             or their group access to documents.</p>
                *         <p>You can update an access control configuration you created without indexing all
                *             of your documents again. For example, your index contains top-secret company
                *             documents that only certain employees or users should access. You created an 'allow'
                *             access control configuration for one user who recently joined the 'top-secret' team,
                *             switching from a team with 'deny' access to top-secret documents. However, the user
                *             suddenly returns to their previous team and should no longer have access to top secret
                *             documents. You can update the access control configuration to re-configure access
                *             control for your documents as circumstances change.</p>
                *         <p>You call the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_BatchPutDocument.html">BatchPutDocument</a>
                *             API to apply the updated access control configuration, with the
                *             <code>AccessControlConfigurationId</code> included in the
                *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_Document.html">Document</a>
                *             object. If you use an S3 bucket as a data source, you synchronize your data source to
                *             apply the the <code>AccessControlConfigurationId</code> in the <code>.metadata.json</code> file.
                *             Amazon Kendra currently only supports access control configuration for S3 data
                *             sources and documents indexed using the <code>BatchPutDocument</code> API.</p>
                */
            updateAccessControlConfiguration(args: UpdateAccessControlConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAccessControlConfigurationCommandOutput>;
            updateAccessControlConfiguration(args: UpdateAccessControlConfigurationCommandInput, cb: (err: any, data?: UpdateAccessControlConfigurationCommandOutput) => void): void;
            updateAccessControlConfiguration(args: UpdateAccessControlConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAccessControlConfigurationCommandOutput) => void): void;
            /**
                * <p>Updates an existing Amazon Kendra data source.</p>
                */
            updateDataSource(args: UpdateDataSourceCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDataSourceCommandOutput>;
            updateDataSource(args: UpdateDataSourceCommandInput, cb: (err: any, data?: UpdateDataSourceCommandOutput) => void): void;
            updateDataSource(args: UpdateDataSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDataSourceCommandOutput) => void): void;
            /**
                * <p>Updates your Amazon Kendra experience such as a search application. For more information on
                *             creating a search application experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building a
                *                 search experience with no code</a>.</p>
                */
            updateExperience(args: UpdateExperienceCommandInput, options?: __HttpHandlerOptions): Promise<UpdateExperienceCommandOutput>;
            updateExperience(args: UpdateExperienceCommandInput, cb: (err: any, data?: UpdateExperienceCommandOutput) => void): void;
            updateExperience(args: UpdateExperienceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateExperienceCommandOutput) => void): void;
            /**
                * <p>Updates an existing Amazon Kendra index.</p>
                */
            updateIndex(args: UpdateIndexCommandInput, options?: __HttpHandlerOptions): Promise<UpdateIndexCommandOutput>;
            updateIndex(args: UpdateIndexCommandInput, cb: (err: any, data?: UpdateIndexCommandOutput) => void): void;
            updateIndex(args: UpdateIndexCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateIndexCommandOutput) => void): void;
            /**
                * <p>Updates a block list used for query suggestions for an index.</p>
                *         <p>Updates to a block list might not take effect right away. Amazon Kendra
                *             needs to refresh the entire suggestions list to apply any updates to the
                *             block list. Other changes not related to the block list apply immediately.</p>
                *         <p>If a block list is updating, then you need to wait for the first update to
                *             finish before submitting another update.</p>
                *         <p>Amazon Kendra supports partial updates, so you only need to provide the fields
                *             you want to update.</p>
                *         <p>
                *             <code>UpdateQuerySuggestionsBlockList</code> is currently not supported in the
                *             Amazon Web Services GovCloud (US-West) region.</p>
                */
            updateQuerySuggestionsBlockList(args: UpdateQuerySuggestionsBlockListCommandInput, options?: __HttpHandlerOptions): Promise<UpdateQuerySuggestionsBlockListCommandOutput>;
            updateQuerySuggestionsBlockList(args: UpdateQuerySuggestionsBlockListCommandInput, cb: (err: any, data?: UpdateQuerySuggestionsBlockListCommandOutput) => void): void;
            updateQuerySuggestionsBlockList(args: UpdateQuerySuggestionsBlockListCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateQuerySuggestionsBlockListCommandOutput) => void): void;
            /**
                * <p>Updates the settings of query suggestions for an index.</p>
                *         <p>Amazon Kendra supports partial updates, so you only need to provide
                *             the fields you want to update.</p>
                *         <p>If an update is currently processing (i.e. 'happening'), you
                *             need to wait for the update to finish before making another update.</p>
                *         <p>Updates to query suggestions settings might not take effect right away.
                *             The time for your updated settings to take effect depends on the updates
                *             made and the number of search queries in your index.</p>
                *         <p>You can still enable/disable query suggestions at any time.</p>
                *         <p>
                *             <code>UpdateQuerySuggestionsConfig</code> is currently not supported in the
                *             Amazon Web Services GovCloud (US-West) region.</p>
                */
            updateQuerySuggestionsConfig(args: UpdateQuerySuggestionsConfigCommandInput, options?: __HttpHandlerOptions): Promise<UpdateQuerySuggestionsConfigCommandOutput>;
            updateQuerySuggestionsConfig(args: UpdateQuerySuggestionsConfigCommandInput, cb: (err: any, data?: UpdateQuerySuggestionsConfigCommandOutput) => void): void;
            updateQuerySuggestionsConfig(args: UpdateQuerySuggestionsConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateQuerySuggestionsConfigCommandOutput) => void): void;
            /**
                * <p>Updates a thesaurus for an index.</p>
                */
            updateThesaurus(args: UpdateThesaurusCommandInput, options?: __HttpHandlerOptions): Promise<UpdateThesaurusCommandOutput>;
            updateThesaurus(args: UpdateThesaurusCommandInput, cb: (err: any, data?: UpdateThesaurusCommandOutput) => void): void;
            updateThesaurus(args: UpdateThesaurusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateThesaurusCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/AssociateEntitiesToExperienceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { AssociateEntitiesToExperienceRequest, AssociateEntitiesToExperienceResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface AssociateEntitiesToExperienceCommandInput extends AssociateEntitiesToExperienceRequest {
    }
    export interface AssociateEntitiesToExperienceCommandOutput extends AssociateEntitiesToExperienceResponse, __MetadataBearer {
    }
    /**
        * <p>Grants users or groups in your Amazon Web Services SSO identity source access
        *             to your Amazon Kendra experience. You can create an Amazon Kendra experience such as a
        *             search application. For more information on creating a search application
        *             experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building
        *                 a search experience with no code</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, AssociateEntitiesToExperienceCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, AssociateEntitiesToExperienceCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new AssociateEntitiesToExperienceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateEntitiesToExperienceCommandInput} for command's `input` shape.
        * @see {@link AssociateEntitiesToExperienceCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class AssociateEntitiesToExperienceCommand extends $Command<AssociateEntitiesToExperienceCommandInput, AssociateEntitiesToExperienceCommandOutput, KendraClientResolvedConfig> {
            readonly input: AssociateEntitiesToExperienceCommandInput;
            constructor(input: AssociateEntitiesToExperienceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateEntitiesToExperienceCommandInput, AssociateEntitiesToExperienceCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/AssociatePersonasToEntitiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { AssociatePersonasToEntitiesRequest, AssociatePersonasToEntitiesResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface AssociatePersonasToEntitiesCommandInput extends AssociatePersonasToEntitiesRequest {
    }
    export interface AssociatePersonasToEntitiesCommandOutput extends AssociatePersonasToEntitiesResponse, __MetadataBearer {
    }
    /**
        * <p>Defines the specific permissions of users or groups in your Amazon Web Services SSO
        *             identity source with access to your Amazon Kendra experience. You can create an Amazon Kendra
        *             experience such as a search application. For more information on creating a
        *             search application experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building
        *                 a search experience with no code</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, AssociatePersonasToEntitiesCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, AssociatePersonasToEntitiesCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new AssociatePersonasToEntitiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociatePersonasToEntitiesCommandInput} for command's `input` shape.
        * @see {@link AssociatePersonasToEntitiesCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class AssociatePersonasToEntitiesCommand extends $Command<AssociatePersonasToEntitiesCommandInput, AssociatePersonasToEntitiesCommandOutput, KendraClientResolvedConfig> {
            readonly input: AssociatePersonasToEntitiesCommandInput;
            constructor(input: AssociatePersonasToEntitiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociatePersonasToEntitiesCommandInput, AssociatePersonasToEntitiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/BatchDeleteDocumentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { BatchDeleteDocumentRequest, BatchDeleteDocumentResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface BatchDeleteDocumentCommandInput extends BatchDeleteDocumentRequest {
    }
    export interface BatchDeleteDocumentCommandOutput extends BatchDeleteDocumentResponse, __MetadataBearer {
    }
    /**
        * <p>Removes one or more documents from an index. The documents must have
        *       been added with the <code>BatchPutDocument</code> API.</p>
        *          <p>The documents are deleted asynchronously. You can see the progress of
        *       the deletion by using Amazon Web Services CloudWatch. Any error messages related to the
        *       processing of the batch are sent to you CloudWatch log.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, BatchDeleteDocumentCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, BatchDeleteDocumentCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new BatchDeleteDocumentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDeleteDocumentCommandInput} for command's `input` shape.
        * @see {@link BatchDeleteDocumentCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class BatchDeleteDocumentCommand extends $Command<BatchDeleteDocumentCommandInput, BatchDeleteDocumentCommandOutput, KendraClientResolvedConfig> {
            readonly input: BatchDeleteDocumentCommandInput;
            constructor(input: BatchDeleteDocumentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDeleteDocumentCommandInput, BatchDeleteDocumentCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/BatchGetDocumentStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { BatchGetDocumentStatusRequest, BatchGetDocumentStatusResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface BatchGetDocumentStatusCommandInput extends BatchGetDocumentStatusRequest {
    }
    export interface BatchGetDocumentStatusCommandOutput extends BatchGetDocumentStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the indexing status for one or more documents submitted
        *             with the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_BatchPutDocument.html">
        *                 BatchPutDocument</a> API.</p>
        *         <p>When you use the <code>BatchPutDocument</code> API,
        *             documents are indexed asynchronously. You can use the
        *                 <code>BatchGetDocumentStatus</code> API to get the current
        *             status of a list of documents so that you can determine if they have
        *             been successfully indexed.</p>
        *         <p>You can also use the <code>BatchGetDocumentStatus</code> API
        *             to check the status of the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_BatchDeleteDocument.html">
        *                 BatchDeleteDocument</a> API. When a document is
        *             deleted from the index, Amazon Kendra returns <code>NOT_FOUND</code> as the
        *             status.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, BatchGetDocumentStatusCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, BatchGetDocumentStatusCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new BatchGetDocumentStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchGetDocumentStatusCommandInput} for command's `input` shape.
        * @see {@link BatchGetDocumentStatusCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class BatchGetDocumentStatusCommand extends $Command<BatchGetDocumentStatusCommandInput, BatchGetDocumentStatusCommandOutput, KendraClientResolvedConfig> {
            readonly input: BatchGetDocumentStatusCommandInput;
            constructor(input: BatchGetDocumentStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetDocumentStatusCommandInput, BatchGetDocumentStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/BatchPutDocumentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { BatchPutDocumentRequest, BatchPutDocumentResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface BatchPutDocumentCommandInput extends BatchPutDocumentRequest {
    }
    export interface BatchPutDocumentCommandOutput extends BatchPutDocumentResponse, __MetadataBearer {
    }
    /**
        * <p>Adds one or more documents to an index.</p>
        *          <p>The <code>BatchPutDocument</code> API enables you to ingest
        *       inline documents or a set of documents stored in an Amazon S3 bucket. Use
        *       this API to ingest your text and unstructured text into an index,
        *       add custom attributes to the documents, and to attach an access control
        *       list to the documents added to the index.</p>
        *          <p>The documents are indexed asynchronously. You can see the progress of
        *       the batch using Amazon Web Services CloudWatch. Any error messages related to processing
        *       the batch are sent to your Amazon Web Services CloudWatch log.</p>
        *          <p>For an example of ingesting inline documents using Python and Java SDKs,
        *       see <a href="https://docs.aws.amazon.com/kendra/latest/dg/in-adding-binary-doc.html">Adding
        *         files directly to an index</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, BatchPutDocumentCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, BatchPutDocumentCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new BatchPutDocumentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchPutDocumentCommandInput} for command's `input` shape.
        * @see {@link BatchPutDocumentCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class BatchPutDocumentCommand extends $Command<BatchPutDocumentCommandInput, BatchPutDocumentCommandOutput, KendraClientResolvedConfig> {
            readonly input: BatchPutDocumentCommandInput;
            constructor(input: BatchPutDocumentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchPutDocumentCommandInput, BatchPutDocumentCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ClearQuerySuggestionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { ClearQuerySuggestionsRequest } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface ClearQuerySuggestionsCommandInput extends ClearQuerySuggestionsRequest {
    }
    export interface ClearQuerySuggestionsCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Clears existing query suggestions from an index.</p>
        *         <p>This deletes existing suggestions only, not the queries
        *             in the query log. After you clear suggestions, Amazon Kendra learns
        *             new suggestions based on new queries added to the query log
        *             from the time you cleared suggestions. If you do not see any
        *             new suggestions, then please allow Amazon Kendra to collect
        *             enough queries to learn new suggestions.</p>
        *         <p>
        *             <code>ClearQuerySuggestions</code> is currently not supported in the
        *             Amazon Web Services GovCloud (US-West) region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, ClearQuerySuggestionsCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, ClearQuerySuggestionsCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new ClearQuerySuggestionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ClearQuerySuggestionsCommandInput} for command's `input` shape.
        * @see {@link ClearQuerySuggestionsCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class ClearQuerySuggestionsCommand extends $Command<ClearQuerySuggestionsCommandInput, ClearQuerySuggestionsCommandOutput, KendraClientResolvedConfig> {
            readonly input: ClearQuerySuggestionsCommandInput;
            constructor(input: ClearQuerySuggestionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ClearQuerySuggestionsCommandInput, ClearQuerySuggestionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/CreateAccessControlConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { CreateAccessControlConfigurationRequest, CreateAccessControlConfigurationResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface CreateAccessControlConfigurationCommandInput extends CreateAccessControlConfigurationRequest {
    }
    export interface CreateAccessControlConfigurationCommandOutput extends CreateAccessControlConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an access configuration for your documents. This includes
        *             user and group access information for your documents. This is useful
        *             for user context filtering, where search results are filtered based
        *             on the user or their group access to documents.</p>
        *         <p>You can use this to re-configure your existing document level access
        *             control without indexing all of your documents again. For example, your
        *             index contains top-secret company documents that only certain employees
        *             or users should access. One of these users leaves the company or switches
        *             to a team that should be blocked from access to top-secret documents.
        *             Your documents in your index still give this user access to top-secret
        *             documents due to the user having access at the time your documents were
        *             indexed. You can create a specific access control configuration for this
        *             user with deny access. You can later update the access control
        *             configuration to allow access in the case the user returns to the company
        *             and re-joins the 'top-secret' team. You can re-configure access control
        *             for your documents circumstances change.</p>
        *         <p>To apply your access control configuration to certain documents, you call
        *             the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_BatchPutDocument.html">BatchPutDocument</a>
        *             API with the <code>AccessControlConfigurationId</code> included in the
        *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_Document.html">Document</a>
        *             object. If you use an S3 bucket as a data source, you update the
        *             <code>.metadata.json</code> with the <code>AccessControlConfigurationId</code>
        *             and synchronize your data source. Amazon Kendra currently only supports
        *             access control configuration for S3 data sources and documents indexed using the
        *             <code>BatchPutDocument</code> API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, CreateAccessControlConfigurationCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, CreateAccessControlConfigurationCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new CreateAccessControlConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAccessControlConfigurationCommandInput} for command's `input` shape.
        * @see {@link CreateAccessControlConfigurationCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class CreateAccessControlConfigurationCommand extends $Command<CreateAccessControlConfigurationCommandInput, CreateAccessControlConfigurationCommandOutput, KendraClientResolvedConfig> {
            readonly input: CreateAccessControlConfigurationCommandInput;
            constructor(input: CreateAccessControlConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAccessControlConfigurationCommandInput, CreateAccessControlConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/CreateDataSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { CreateDataSourceRequest, CreateDataSourceResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface CreateDataSourceCommandInput extends CreateDataSourceRequest {
    }
    export interface CreateDataSourceCommandOutput extends CreateDataSourceResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a data source that you want to use with an Amazon Kendra index. </p>
        *          <p>You specify a name, data source connector type and description for
        *       your data source. You also specify configuration information for the
        *       data source connector.</p>
        *          <p>
        *             <code>CreateDataSource</code> is a synchronous operation. The
        *       operation returns 200 if the data source was successfully created.
        *       Otherwise, an exception is raised.</p>
        *          <p>Amazon S3 and <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-custom.html">custom</a> data sources are
        *       the only supported data sources in the Amazon Web Services GovCloud (US-West) region.</p>
        *          <p>For an example of creating an index and data source using the Python SDK,
        *       see <a href="https://docs.aws.amazon.com/kendra/latest/dg/gs-python.html">Getting
        *         started with Python SDK</a>. For an example of creating an index and data
        *       source using the Java SDK, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/gs-java.html">Getting started with Java SDK</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, CreateDataSourceCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, CreateDataSourceCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new CreateDataSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDataSourceCommandInput} for command's `input` shape.
        * @see {@link CreateDataSourceCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class CreateDataSourceCommand extends $Command<CreateDataSourceCommandInput, CreateDataSourceCommandOutput, KendraClientResolvedConfig> {
            readonly input: CreateDataSourceCommandInput;
            constructor(input: CreateDataSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDataSourceCommandInput, CreateDataSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/CreateExperienceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { CreateExperienceRequest, CreateExperienceResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface CreateExperienceCommandInput extends CreateExperienceRequest {
    }
    export interface CreateExperienceCommandOutput extends CreateExperienceResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an Amazon Kendra experience such as a search application. For more information
        *             on creating a search application experience, including using the Python and Java SDKs,
        *             see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building a
        *                 search experience with no code</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, CreateExperienceCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, CreateExperienceCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new CreateExperienceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateExperienceCommandInput} for command's `input` shape.
        * @see {@link CreateExperienceCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class CreateExperienceCommand extends $Command<CreateExperienceCommandInput, CreateExperienceCommandOutput, KendraClientResolvedConfig> {
            readonly input: CreateExperienceCommandInput;
            constructor(input: CreateExperienceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateExperienceCommandInput, CreateExperienceCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/CreateFaqCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { CreateFaqRequest, CreateFaqResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface CreateFaqCommandInput extends CreateFaqRequest {
    }
    export interface CreateFaqCommandOutput extends CreateFaqResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an new set of frequently asked question (FAQ) questions and answers.</p>
        *         <p>Adding FAQs to an index is an asynchronous operation.</p>
        *         <p>For an example of adding an FAQ to an index using Python and Java SDKs,
        *             see <a href="https://docs.aws.amazon.com/kendra/latest/dg/in-creating-faq.html#using-faq-file">Using your
        *                 FAQ file</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, CreateFaqCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, CreateFaqCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new CreateFaqCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateFaqCommandInput} for command's `input` shape.
        * @see {@link CreateFaqCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class CreateFaqCommand extends $Command<CreateFaqCommandInput, CreateFaqCommandOutput, KendraClientResolvedConfig> {
            readonly input: CreateFaqCommandInput;
            constructor(input: CreateFaqCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateFaqCommandInput, CreateFaqCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/CreateIndexCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { CreateIndexRequest, CreateIndexResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface CreateIndexCommandInput extends CreateIndexRequest {
    }
    export interface CreateIndexCommandOutput extends CreateIndexResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an Amazon Kendra index. Index creation is an asynchronous
        *       API. To determine if index creation has completed, check the
        *         <code>Status</code> field returned from a call to
        *         <code>DescribeIndex</code>. The <code>Status</code> field is set to
        *         <code>ACTIVE</code> when the index is ready to use.</p>
        *          <p>Once the index is active you can index your documents using the
        *         <code>BatchPutDocument</code> API or using one of the supported
        *       data sources.</p>
        *          <p>For an example of creating an index and data source using the Python SDK,
        *       see <a href="https://docs.aws.amazon.com/kendra/latest/dg/gs-python.html">Getting
        *         started with Python SDK</a>. For an example of creating an index and data
        *       source using the Java SDK, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/gs-java.html">Getting started with Java SDK</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, CreateIndexCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, CreateIndexCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new CreateIndexCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateIndexCommandInput} for command's `input` shape.
        * @see {@link CreateIndexCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class CreateIndexCommand extends $Command<CreateIndexCommandInput, CreateIndexCommandOutput, KendraClientResolvedConfig> {
            readonly input: CreateIndexCommandInput;
            constructor(input: CreateIndexCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateIndexCommandInput, CreateIndexCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/CreateQuerySuggestionsBlockListCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { CreateQuerySuggestionsBlockListRequest, CreateQuerySuggestionsBlockListResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface CreateQuerySuggestionsBlockListCommandInput extends CreateQuerySuggestionsBlockListRequest {
    }
    export interface CreateQuerySuggestionsBlockListCommandOutput extends CreateQuerySuggestionsBlockListResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a block list to exlcude certain queries from suggestions.</p>
        *         <p>Any query that contains words or phrases specified in the block
        *             list is blocked or filtered out from being shown as a suggestion.</p>
        *         <p>You need to provide the file location of your block list text file
        *             in your S3 bucket. In your text file, enter each block word or phrase
        *             on a separate line.</p>
        *         <p>For information on the current quota limits for block lists, see
        *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas
        *                 for Amazon Kendra</a>.</p>
        *         <p>
        *             <code>CreateQuerySuggestionsBlockList</code> is currently not supported in the
        *             Amazon Web Services GovCloud (US-West) region.</p>
        *         <p>For an example of creating a block list for query suggestions using the
        *             Python SDK, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/query-suggestions.html#suggestions-block-list">Query
        *                 suggestions block list</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, CreateQuerySuggestionsBlockListCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, CreateQuerySuggestionsBlockListCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new CreateQuerySuggestionsBlockListCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateQuerySuggestionsBlockListCommandInput} for command's `input` shape.
        * @see {@link CreateQuerySuggestionsBlockListCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class CreateQuerySuggestionsBlockListCommand extends $Command<CreateQuerySuggestionsBlockListCommandInput, CreateQuerySuggestionsBlockListCommandOutput, KendraClientResolvedConfig> {
            readonly input: CreateQuerySuggestionsBlockListCommandInput;
            constructor(input: CreateQuerySuggestionsBlockListCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateQuerySuggestionsBlockListCommandInput, CreateQuerySuggestionsBlockListCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/CreateThesaurusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { CreateThesaurusRequest, CreateThesaurusResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface CreateThesaurusCommandInput extends CreateThesaurusRequest {
    }
    export interface CreateThesaurusCommandOutput extends CreateThesaurusResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a thesaurus for an index. The thesaurus
        *       contains a list of synonyms in Solr format.</p>
        *          <p>For an example of adding a thesaurus file to an index, see
        *          <a href="https://docs.aws.amazon.com/kendra/latest/dg/index-synonyms-adding-thesaurus-file.html">Adding
        *             custom synonyms to an index</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, CreateThesaurusCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, CreateThesaurusCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new CreateThesaurusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateThesaurusCommandInput} for command's `input` shape.
        * @see {@link CreateThesaurusCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class CreateThesaurusCommand extends $Command<CreateThesaurusCommandInput, CreateThesaurusCommandOutput, KendraClientResolvedConfig> {
            readonly input: CreateThesaurusCommandInput;
            constructor(input: CreateThesaurusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateThesaurusCommandInput, CreateThesaurusCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeleteAccessControlConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { DeleteAccessControlConfigurationRequest, DeleteAccessControlConfigurationResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface DeleteAccessControlConfigurationCommandInput extends DeleteAccessControlConfigurationRequest {
    }
    export interface DeleteAccessControlConfigurationCommandOutput extends DeleteAccessControlConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an access control configuration that you created for your
        *             documents in an index. This includes user and group access information
        *             for your documents. This is useful for user context filtering, where search
        *             results are filtered based on the user or their group access to documents.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, DeleteAccessControlConfigurationCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, DeleteAccessControlConfigurationCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new DeleteAccessControlConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAccessControlConfigurationCommandInput} for command's `input` shape.
        * @see {@link DeleteAccessControlConfigurationCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class DeleteAccessControlConfigurationCommand extends $Command<DeleteAccessControlConfigurationCommandInput, DeleteAccessControlConfigurationCommandOutput, KendraClientResolvedConfig> {
            readonly input: DeleteAccessControlConfigurationCommandInput;
            constructor(input: DeleteAccessControlConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAccessControlConfigurationCommandInput, DeleteAccessControlConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeleteDataSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { DeleteDataSourceRequest } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface DeleteDataSourceCommandInput extends DeleteDataSourceRequest {
    }
    export interface DeleteDataSourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an Amazon Kendra data source. An exception is not thrown if the
        *       data source is already being deleted. While the data source is being
        *       deleted, the <code>Status</code> field returned by a call to the
        *         <code>DescribeDataSource</code> API is set to
        *         <code>DELETING</code>. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/delete-data-source.html">Deleting Data Sources</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, DeleteDataSourceCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, DeleteDataSourceCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new DeleteDataSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDataSourceCommandInput} for command's `input` shape.
        * @see {@link DeleteDataSourceCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class DeleteDataSourceCommand extends $Command<DeleteDataSourceCommandInput, DeleteDataSourceCommandOutput, KendraClientResolvedConfig> {
            readonly input: DeleteDataSourceCommandInput;
            constructor(input: DeleteDataSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDataSourceCommandInput, DeleteDataSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeleteExperienceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { DeleteExperienceRequest, DeleteExperienceResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface DeleteExperienceCommandInput extends DeleteExperienceRequest {
    }
    export interface DeleteExperienceCommandOutput extends DeleteExperienceResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes your Amazon Kendra experience such as a search application. For more information on
        *             creating a search application experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building a search
        *                 experience with no code</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, DeleteExperienceCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, DeleteExperienceCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new DeleteExperienceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteExperienceCommandInput} for command's `input` shape.
        * @see {@link DeleteExperienceCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class DeleteExperienceCommand extends $Command<DeleteExperienceCommandInput, DeleteExperienceCommandOutput, KendraClientResolvedConfig> {
            readonly input: DeleteExperienceCommandInput;
            constructor(input: DeleteExperienceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteExperienceCommandInput, DeleteExperienceCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeleteFaqCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { DeleteFaqRequest } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface DeleteFaqCommandInput extends DeleteFaqRequest {
    }
    export interface DeleteFaqCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes an FAQ from an index.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, DeleteFaqCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, DeleteFaqCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new DeleteFaqCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFaqCommandInput} for command's `input` shape.
        * @see {@link DeleteFaqCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class DeleteFaqCommand extends $Command<DeleteFaqCommandInput, DeleteFaqCommandOutput, KendraClientResolvedConfig> {
            readonly input: DeleteFaqCommandInput;
            constructor(input: DeleteFaqCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFaqCommandInput, DeleteFaqCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeleteIndexCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { DeleteIndexRequest } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface DeleteIndexCommandInput extends DeleteIndexRequest {
    }
    export interface DeleteIndexCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an existing Amazon Kendra index. An exception is not thrown if
        *       the index is already being deleted. While the index is being deleted, the
        *         <code>Status</code> field returned by a call to the
        *         <code>DescribeIndex</code> API is set to
        *       <code>DELETING</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, DeleteIndexCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, DeleteIndexCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new DeleteIndexCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteIndexCommandInput} for command's `input` shape.
        * @see {@link DeleteIndexCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class DeleteIndexCommand extends $Command<DeleteIndexCommandInput, DeleteIndexCommandOutput, KendraClientResolvedConfig> {
            readonly input: DeleteIndexCommandInput;
            constructor(input: DeleteIndexCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteIndexCommandInput, DeleteIndexCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeletePrincipalMappingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { DeletePrincipalMappingRequest } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface DeletePrincipalMappingCommandInput extends DeletePrincipalMappingRequest {
    }
    export interface DeletePrincipalMappingCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a group so that all users and sub groups that belong to the group can
        *             no longer access documents only available to that group.</p>
        *         <p>For example, after deleting the group "Summer Interns", all interns who
        *             belonged to that group no longer see intern-only documents in their search
        *             results.</p>
        *         <p>If you want to delete or replace users or sub groups of a group, you need to
        *             use the <code>PutPrincipalMapping</code> operation. For example, if a user in
        *             the group "Engineering" leaves the engineering team and another user takes
        *             their place, you provide an updated list of users or sub groups that belong
        *             to the "Engineering" group when calling <code>PutPrincipalMapping</code>. You
        *             can update your internal list of users or sub groups and input this list
        *             when calling <code>PutPrincipalMapping</code>.</p>
        *         <p>
        *             <code>DeletePrincipalMapping</code> is currently not supported in the
        *             Amazon Web Services GovCloud (US-West) region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, DeletePrincipalMappingCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, DeletePrincipalMappingCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new DeletePrincipalMappingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePrincipalMappingCommandInput} for command's `input` shape.
        * @see {@link DeletePrincipalMappingCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class DeletePrincipalMappingCommand extends $Command<DeletePrincipalMappingCommandInput, DeletePrincipalMappingCommandOutput, KendraClientResolvedConfig> {
            readonly input: DeletePrincipalMappingCommandInput;
            constructor(input: DeletePrincipalMappingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePrincipalMappingCommandInput, DeletePrincipalMappingCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeleteQuerySuggestionsBlockListCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { DeleteQuerySuggestionsBlockListRequest } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface DeleteQuerySuggestionsBlockListCommandInput extends DeleteQuerySuggestionsBlockListRequest {
    }
    export interface DeleteQuerySuggestionsBlockListCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a block list used for query suggestions for an index.</p>
        *         <p>A deleted block list might not take effect right away. Amazon Kendra
        *             needs to refresh the entire suggestions list to add back the
        *             queries that were previously blocked.</p>
        *         <p>
        *             <code>DeleteQuerySuggestionsBlockList</code> is currently not supported in the
        *             Amazon Web Services GovCloud (US-West) region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, DeleteQuerySuggestionsBlockListCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, DeleteQuerySuggestionsBlockListCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new DeleteQuerySuggestionsBlockListCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteQuerySuggestionsBlockListCommandInput} for command's `input` shape.
        * @see {@link DeleteQuerySuggestionsBlockListCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class DeleteQuerySuggestionsBlockListCommand extends $Command<DeleteQuerySuggestionsBlockListCommandInput, DeleteQuerySuggestionsBlockListCommandOutput, KendraClientResolvedConfig> {
            readonly input: DeleteQuerySuggestionsBlockListCommandInput;
            constructor(input: DeleteQuerySuggestionsBlockListCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteQuerySuggestionsBlockListCommandInput, DeleteQuerySuggestionsBlockListCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeleteThesaurusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { DeleteThesaurusRequest } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface DeleteThesaurusCommandInput extends DeleteThesaurusRequest {
    }
    export interface DeleteThesaurusCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an existing Amazon Kendra thesaurus.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, DeleteThesaurusCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, DeleteThesaurusCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new DeleteThesaurusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteThesaurusCommandInput} for command's `input` shape.
        * @see {@link DeleteThesaurusCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class DeleteThesaurusCommand extends $Command<DeleteThesaurusCommandInput, DeleteThesaurusCommandOutput, KendraClientResolvedConfig> {
            readonly input: DeleteThesaurusCommandInput;
            constructor(input: DeleteThesaurusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteThesaurusCommandInput, DeleteThesaurusCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeAccessControlConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { DescribeAccessControlConfigurationRequest, DescribeAccessControlConfigurationResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface DescribeAccessControlConfigurationCommandInput extends DescribeAccessControlConfigurationRequest {
    }
    export interface DescribeAccessControlConfigurationCommandOutput extends DescribeAccessControlConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about an access control configuration that you created for your
        *             documents in an index. This includes user and group access information for your
        *             documents. This is useful for user context filtering, where search results are
        *             filtered based on the user or their group access to documents.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, DescribeAccessControlConfigurationCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, DescribeAccessControlConfigurationCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new DescribeAccessControlConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAccessControlConfigurationCommandInput} for command's `input` shape.
        * @see {@link DescribeAccessControlConfigurationCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class DescribeAccessControlConfigurationCommand extends $Command<DescribeAccessControlConfigurationCommandInput, DescribeAccessControlConfigurationCommandOutput, KendraClientResolvedConfig> {
            readonly input: DescribeAccessControlConfigurationCommandInput;
            constructor(input: DescribeAccessControlConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAccessControlConfigurationCommandInput, DescribeAccessControlConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeDataSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { DescribeDataSourceRequest, DescribeDataSourceResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface DescribeDataSourceCommandInput extends DescribeDataSourceRequest {
    }
    export interface DescribeDataSourceCommandOutput extends DescribeDataSourceResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about an Amazon Kendra data source.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, DescribeDataSourceCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, DescribeDataSourceCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new DescribeDataSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDataSourceCommandInput} for command's `input` shape.
        * @see {@link DescribeDataSourceCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class DescribeDataSourceCommand extends $Command<DescribeDataSourceCommandInput, DescribeDataSourceCommandOutput, KendraClientResolvedConfig> {
            readonly input: DescribeDataSourceCommandInput;
            constructor(input: DescribeDataSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDataSourceCommandInput, DescribeDataSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeExperienceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { DescribeExperienceRequest, DescribeExperienceResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface DescribeExperienceCommandInput extends DescribeExperienceRequest {
    }
    export interface DescribeExperienceCommandOutput extends DescribeExperienceResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about your Amazon Kendra experience such as a search application.
        *             For more information on creating a search application experience,
        *             see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building
        *                 a search experience with no code</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, DescribeExperienceCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, DescribeExperienceCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new DescribeExperienceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeExperienceCommandInput} for command's `input` shape.
        * @see {@link DescribeExperienceCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class DescribeExperienceCommand extends $Command<DescribeExperienceCommandInput, DescribeExperienceCommandOutput, KendraClientResolvedConfig> {
            readonly input: DescribeExperienceCommandInput;
            constructor(input: DescribeExperienceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeExperienceCommandInput, DescribeExperienceCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeFaqCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { DescribeFaqRequest, DescribeFaqResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface DescribeFaqCommandInput extends DescribeFaqRequest {
    }
    export interface DescribeFaqCommandOutput extends DescribeFaqResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about an FAQ list.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, DescribeFaqCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, DescribeFaqCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new DescribeFaqCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeFaqCommandInput} for command's `input` shape.
        * @see {@link DescribeFaqCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class DescribeFaqCommand extends $Command<DescribeFaqCommandInput, DescribeFaqCommandOutput, KendraClientResolvedConfig> {
            readonly input: DescribeFaqCommandInput;
            constructor(input: DescribeFaqCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeFaqCommandInput, DescribeFaqCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeIndexCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { DescribeIndexRequest, DescribeIndexResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface DescribeIndexCommandInput extends DescribeIndexRequest {
    }
    export interface DescribeIndexCommandOutput extends DescribeIndexResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about an existing Amazon Kendra index.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, DescribeIndexCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, DescribeIndexCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new DescribeIndexCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeIndexCommandInput} for command's `input` shape.
        * @see {@link DescribeIndexCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class DescribeIndexCommand extends $Command<DescribeIndexCommandInput, DescribeIndexCommandOutput, KendraClientResolvedConfig> {
            readonly input: DescribeIndexCommandInput;
            constructor(input: DescribeIndexCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeIndexCommandInput, DescribeIndexCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribePrincipalMappingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { DescribePrincipalMappingRequest, DescribePrincipalMappingResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface DescribePrincipalMappingCommandInput extends DescribePrincipalMappingRequest {
    }
    export interface DescribePrincipalMappingCommandOutput extends DescribePrincipalMappingResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the processing of <code>PUT</code> and <code>DELETE</code> actions
        *             for mapping users to their groups. This includes information on the status of
        *             actions currently processing or yet to be processed, when actions were last updated,
        *             when actions were received by Amazon Kendra, the latest action that should process
        *             and apply after other actions, and useful error messages if an action could
        *             not be processed.</p>
        *         <p>
        *             <code>DescribePrincipalMapping</code> is currently not supported in the
        *             Amazon Web Services GovCloud (US-West) region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, DescribePrincipalMappingCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, DescribePrincipalMappingCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new DescribePrincipalMappingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePrincipalMappingCommandInput} for command's `input` shape.
        * @see {@link DescribePrincipalMappingCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class DescribePrincipalMappingCommand extends $Command<DescribePrincipalMappingCommandInput, DescribePrincipalMappingCommandOutput, KendraClientResolvedConfig> {
            readonly input: DescribePrincipalMappingCommandInput;
            constructor(input: DescribePrincipalMappingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePrincipalMappingCommandInput, DescribePrincipalMappingCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeQuerySuggestionsBlockListCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { DescribeQuerySuggestionsBlockListRequest, DescribeQuerySuggestionsBlockListResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface DescribeQuerySuggestionsBlockListCommandInput extends DescribeQuerySuggestionsBlockListRequest {
    }
    export interface DescribeQuerySuggestionsBlockListCommandOutput extends DescribeQuerySuggestionsBlockListResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about a block list used for query suggestions for
        *             an index.</p>
        *         <p>This is used to check the current settings that are applied to a
        *             block list.</p>
        *         <p>
        *             <code>DescribeQuerySuggestionsBlockList</code> is currently not supported in the
        *             Amazon Web Services GovCloud (US-West) region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, DescribeQuerySuggestionsBlockListCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, DescribeQuerySuggestionsBlockListCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new DescribeQuerySuggestionsBlockListCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeQuerySuggestionsBlockListCommandInput} for command's `input` shape.
        * @see {@link DescribeQuerySuggestionsBlockListCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class DescribeQuerySuggestionsBlockListCommand extends $Command<DescribeQuerySuggestionsBlockListCommandInput, DescribeQuerySuggestionsBlockListCommandOutput, KendraClientResolvedConfig> {
            readonly input: DescribeQuerySuggestionsBlockListCommandInput;
            constructor(input: DescribeQuerySuggestionsBlockListCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeQuerySuggestionsBlockListCommandInput, DescribeQuerySuggestionsBlockListCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeQuerySuggestionsConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { DescribeQuerySuggestionsConfigRequest, DescribeQuerySuggestionsConfigResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface DescribeQuerySuggestionsConfigCommandInput extends DescribeQuerySuggestionsConfigRequest {
    }
    export interface DescribeQuerySuggestionsConfigCommandOutput extends DescribeQuerySuggestionsConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information on the settings of query suggestions for an index.</p>
        *         <p>This is used to check the current settings applied
        *             to query suggestions.</p>
        *         <p>
        *             <code>DescribeQuerySuggestionsConfig</code> is currently not supported in the
        *             Amazon Web Services GovCloud (US-West) region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, DescribeQuerySuggestionsConfigCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, DescribeQuerySuggestionsConfigCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new DescribeQuerySuggestionsConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeQuerySuggestionsConfigCommandInput} for command's `input` shape.
        * @see {@link DescribeQuerySuggestionsConfigCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class DescribeQuerySuggestionsConfigCommand extends $Command<DescribeQuerySuggestionsConfigCommandInput, DescribeQuerySuggestionsConfigCommandOutput, KendraClientResolvedConfig> {
            readonly input: DescribeQuerySuggestionsConfigCommandInput;
            constructor(input: DescribeQuerySuggestionsConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeQuerySuggestionsConfigCommandInput, DescribeQuerySuggestionsConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeThesaurusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { DescribeThesaurusRequest, DescribeThesaurusResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface DescribeThesaurusCommandInput extends DescribeThesaurusRequest {
    }
    export interface DescribeThesaurusCommandOutput extends DescribeThesaurusResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about an existing Amazon Kendra thesaurus.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, DescribeThesaurusCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, DescribeThesaurusCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new DescribeThesaurusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeThesaurusCommandInput} for command's `input` shape.
        * @see {@link DescribeThesaurusCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class DescribeThesaurusCommand extends $Command<DescribeThesaurusCommandInput, DescribeThesaurusCommandOutput, KendraClientResolvedConfig> {
            readonly input: DescribeThesaurusCommandInput;
            constructor(input: DescribeThesaurusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeThesaurusCommandInput, DescribeThesaurusCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DisassociateEntitiesFromExperienceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { DisassociateEntitiesFromExperienceRequest, DisassociateEntitiesFromExperienceResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface DisassociateEntitiesFromExperienceCommandInput extends DisassociateEntitiesFromExperienceRequest {
    }
    export interface DisassociateEntitiesFromExperienceCommandOutput extends DisassociateEntitiesFromExperienceResponse, __MetadataBearer {
    }
    /**
        * <p>Prevents users or groups in your Amazon Web Services SSO identity source
        *             from accessing your Amazon Kendra experience. You can create an Amazon Kendra experience
        *             such as a search application. For more information on creating a search
        *             application experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building
        *                 a search experience with no code</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, DisassociateEntitiesFromExperienceCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, DisassociateEntitiesFromExperienceCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new DisassociateEntitiesFromExperienceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateEntitiesFromExperienceCommandInput} for command's `input` shape.
        * @see {@link DisassociateEntitiesFromExperienceCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class DisassociateEntitiesFromExperienceCommand extends $Command<DisassociateEntitiesFromExperienceCommandInput, DisassociateEntitiesFromExperienceCommandOutput, KendraClientResolvedConfig> {
            readonly input: DisassociateEntitiesFromExperienceCommandInput;
            constructor(input: DisassociateEntitiesFromExperienceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateEntitiesFromExperienceCommandInput, DisassociateEntitiesFromExperienceCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DisassociatePersonasFromEntitiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { DisassociatePersonasFromEntitiesRequest, DisassociatePersonasFromEntitiesResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface DisassociatePersonasFromEntitiesCommandInput extends DisassociatePersonasFromEntitiesRequest {
    }
    export interface DisassociatePersonasFromEntitiesCommandOutput extends DisassociatePersonasFromEntitiesResponse, __MetadataBearer {
    }
    /**
        * <p>Removes the specific permissions of users or groups in your Amazon Web Services SSO
        *             identity source with access to your Amazon Kendra experience. You can create an Amazon Kendra
        *             experience such as a search application. For more information on creating a
        *             search application experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building a
        *                 search experience with no code</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, DisassociatePersonasFromEntitiesCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, DisassociatePersonasFromEntitiesCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new DisassociatePersonasFromEntitiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociatePersonasFromEntitiesCommandInput} for command's `input` shape.
        * @see {@link DisassociatePersonasFromEntitiesCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class DisassociatePersonasFromEntitiesCommand extends $Command<DisassociatePersonasFromEntitiesCommandInput, DisassociatePersonasFromEntitiesCommandOutput, KendraClientResolvedConfig> {
            readonly input: DisassociatePersonasFromEntitiesCommandInput;
            constructor(input: DisassociatePersonasFromEntitiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociatePersonasFromEntitiesCommandInput, DisassociatePersonasFromEntitiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/GetQuerySuggestionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { GetQuerySuggestionsRequest, GetQuerySuggestionsResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface GetQuerySuggestionsCommandInput extends GetQuerySuggestionsRequest {
    }
    export interface GetQuerySuggestionsCommandOutput extends GetQuerySuggestionsResponse, __MetadataBearer {
    }
    /**
        * <p>Fetches the queries that are suggested to your users.</p>
        *         <p>
        *             <code>GetQuerySuggestions</code> is currently not supported in the
        *             Amazon Web Services GovCloud (US-West) region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, GetQuerySuggestionsCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, GetQuerySuggestionsCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new GetQuerySuggestionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetQuerySuggestionsCommandInput} for command's `input` shape.
        * @see {@link GetQuerySuggestionsCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class GetQuerySuggestionsCommand extends $Command<GetQuerySuggestionsCommandInput, GetQuerySuggestionsCommandOutput, KendraClientResolvedConfig> {
            readonly input: GetQuerySuggestionsCommandInput;
            constructor(input: GetQuerySuggestionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetQuerySuggestionsCommandInput, GetQuerySuggestionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/GetSnapshotsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { GetSnapshotsRequest, GetSnapshotsResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface GetSnapshotsCommandInput extends GetSnapshotsRequest {
    }
    export interface GetSnapshotsCommandOutput extends GetSnapshotsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves search metrics data. The data provides a snapshot of how
        *             your users interact with your search application and how effective
        *             the application is.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, GetSnapshotsCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, GetSnapshotsCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new GetSnapshotsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSnapshotsCommandInput} for command's `input` shape.
        * @see {@link GetSnapshotsCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class GetSnapshotsCommand extends $Command<GetSnapshotsCommandInput, GetSnapshotsCommandOutput, KendraClientResolvedConfig> {
            readonly input: GetSnapshotsCommandInput;
            constructor(input: GetSnapshotsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSnapshotsCommandInput, GetSnapshotsCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListAccessControlConfigurationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { ListAccessControlConfigurationsRequest, ListAccessControlConfigurationsResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface ListAccessControlConfigurationsCommandInput extends ListAccessControlConfigurationsRequest {
    }
    export interface ListAccessControlConfigurationsCommandOutput extends ListAccessControlConfigurationsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists one or more access control configurations for an index. This
        *             includes user and group access information for your documents. This
        *             is useful for user context filtering, where search results are filtered
        *             based on the user or their group access to documents.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, ListAccessControlConfigurationsCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, ListAccessControlConfigurationsCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new ListAccessControlConfigurationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAccessControlConfigurationsCommandInput} for command's `input` shape.
        * @see {@link ListAccessControlConfigurationsCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class ListAccessControlConfigurationsCommand extends $Command<ListAccessControlConfigurationsCommandInput, ListAccessControlConfigurationsCommandOutput, KendraClientResolvedConfig> {
            readonly input: ListAccessControlConfigurationsCommandInput;
            constructor(input: ListAccessControlConfigurationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAccessControlConfigurationsCommandInput, ListAccessControlConfigurationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListDataSourcesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { ListDataSourcesRequest, ListDataSourcesResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface ListDataSourcesCommandInput extends ListDataSourcesRequest {
    }
    export interface ListDataSourcesCommandOutput extends ListDataSourcesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the data sources that you have created.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, ListDataSourcesCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, ListDataSourcesCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new ListDataSourcesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDataSourcesCommandInput} for command's `input` shape.
        * @see {@link ListDataSourcesCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class ListDataSourcesCommand extends $Command<ListDataSourcesCommandInput, ListDataSourcesCommandOutput, KendraClientResolvedConfig> {
            readonly input: ListDataSourcesCommandInput;
            constructor(input: ListDataSourcesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDataSourcesCommandInput, ListDataSourcesCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListDataSourceSyncJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { ListDataSourceSyncJobsRequest, ListDataSourceSyncJobsResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface ListDataSourceSyncJobsCommandInput extends ListDataSourceSyncJobsRequest {
    }
    export interface ListDataSourceSyncJobsCommandOutput extends ListDataSourceSyncJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets statistics about synchronizing Amazon Kendra with a data
        *       source.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, ListDataSourceSyncJobsCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, ListDataSourceSyncJobsCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new ListDataSourceSyncJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDataSourceSyncJobsCommandInput} for command's `input` shape.
        * @see {@link ListDataSourceSyncJobsCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class ListDataSourceSyncJobsCommand extends $Command<ListDataSourceSyncJobsCommandInput, ListDataSourceSyncJobsCommandOutput, KendraClientResolvedConfig> {
            readonly input: ListDataSourceSyncJobsCommandInput;
            constructor(input: ListDataSourceSyncJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDataSourceSyncJobsCommandInput, ListDataSourceSyncJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListEntityPersonasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { ListEntityPersonasRequest, ListEntityPersonasResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface ListEntityPersonasCommandInput extends ListEntityPersonasRequest {
    }
    export interface ListEntityPersonasCommandOutput extends ListEntityPersonasResponse, __MetadataBearer {
    }
    /**
        * <p>Lists specific permissions of users and groups with access to your
        *             Amazon Kendra experience.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, ListEntityPersonasCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, ListEntityPersonasCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new ListEntityPersonasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEntityPersonasCommandInput} for command's `input` shape.
        * @see {@link ListEntityPersonasCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class ListEntityPersonasCommand extends $Command<ListEntityPersonasCommandInput, ListEntityPersonasCommandOutput, KendraClientResolvedConfig> {
            readonly input: ListEntityPersonasCommandInput;
            constructor(input: ListEntityPersonasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEntityPersonasCommandInput, ListEntityPersonasCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListExperienceEntitiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { ListExperienceEntitiesRequest, ListExperienceEntitiesResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface ListExperienceEntitiesCommandInput extends ListExperienceEntitiesRequest {
    }
    export interface ListExperienceEntitiesCommandOutput extends ListExperienceEntitiesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists users or groups in your Amazon Web Services SSO identity source that are
        *             granted access to your Amazon Kendra experience. You can create an Amazon Kendra experience
        *             such as a search application. For more information on creating a search
        *             application experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building
        *                 a search experience with no code</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, ListExperienceEntitiesCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, ListExperienceEntitiesCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new ListExperienceEntitiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListExperienceEntitiesCommandInput} for command's `input` shape.
        * @see {@link ListExperienceEntitiesCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class ListExperienceEntitiesCommand extends $Command<ListExperienceEntitiesCommandInput, ListExperienceEntitiesCommandOutput, KendraClientResolvedConfig> {
            readonly input: ListExperienceEntitiesCommandInput;
            constructor(input: ListExperienceEntitiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListExperienceEntitiesCommandInput, ListExperienceEntitiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListExperiencesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { ListExperiencesRequest, ListExperiencesResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface ListExperiencesCommandInput extends ListExperiencesRequest {
    }
    export interface ListExperiencesCommandOutput extends ListExperiencesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists one or more Amazon Kendra experiences. You can create an Amazon Kendra experience such
        *             as a search application. For more information on creating a search application
        *             experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building a
        *                 search experience with no code</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, ListExperiencesCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, ListExperiencesCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new ListExperiencesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListExperiencesCommandInput} for command's `input` shape.
        * @see {@link ListExperiencesCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class ListExperiencesCommand extends $Command<ListExperiencesCommandInput, ListExperiencesCommandOutput, KendraClientResolvedConfig> {
            readonly input: ListExperiencesCommandInput;
            constructor(input: ListExperiencesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListExperiencesCommandInput, ListExperiencesCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListFaqsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { ListFaqsRequest, ListFaqsResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface ListFaqsCommandInput extends ListFaqsRequest {
    }
    export interface ListFaqsCommandOutput extends ListFaqsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of FAQ lists associated with an index.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, ListFaqsCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, ListFaqsCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new ListFaqsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFaqsCommandInput} for command's `input` shape.
        * @see {@link ListFaqsCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class ListFaqsCommand extends $Command<ListFaqsCommandInput, ListFaqsCommandOutput, KendraClientResolvedConfig> {
            readonly input: ListFaqsCommandInput;
            constructor(input: ListFaqsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFaqsCommandInput, ListFaqsCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListGroupsOlderThanOrderingIdCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { ListGroupsOlderThanOrderingIdRequest, ListGroupsOlderThanOrderingIdResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface ListGroupsOlderThanOrderingIdCommandInput extends ListGroupsOlderThanOrderingIdRequest {
    }
    export interface ListGroupsOlderThanOrderingIdCommandOutput extends ListGroupsOlderThanOrderingIdResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a list of groups that are mapped to users before a
        *             given ordering or timestamp identifier.</p>
        *         <p>
        *             <code>ListGroupsOlderThanOrderingId</code> is currently not supported in the
        *             Amazon Web Services GovCloud (US-West) region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, ListGroupsOlderThanOrderingIdCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, ListGroupsOlderThanOrderingIdCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new ListGroupsOlderThanOrderingIdCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListGroupsOlderThanOrderingIdCommandInput} for command's `input` shape.
        * @see {@link ListGroupsOlderThanOrderingIdCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class ListGroupsOlderThanOrderingIdCommand extends $Command<ListGroupsOlderThanOrderingIdCommandInput, ListGroupsOlderThanOrderingIdCommandOutput, KendraClientResolvedConfig> {
            readonly input: ListGroupsOlderThanOrderingIdCommandInput;
            constructor(input: ListGroupsOlderThanOrderingIdCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListGroupsOlderThanOrderingIdCommandInput, ListGroupsOlderThanOrderingIdCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListIndicesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { ListIndicesRequest, ListIndicesResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface ListIndicesCommandInput extends ListIndicesRequest {
    }
    export interface ListIndicesCommandOutput extends ListIndicesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the Amazon Kendra indexes that you created.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, ListIndicesCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, ListIndicesCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new ListIndicesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListIndicesCommandInput} for command's `input` shape.
        * @see {@link ListIndicesCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class ListIndicesCommand extends $Command<ListIndicesCommandInput, ListIndicesCommandOutput, KendraClientResolvedConfig> {
            readonly input: ListIndicesCommandInput;
            constructor(input: ListIndicesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListIndicesCommandInput, ListIndicesCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListQuerySuggestionsBlockListsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { ListQuerySuggestionsBlockListsRequest, ListQuerySuggestionsBlockListsResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface ListQuerySuggestionsBlockListsCommandInput extends ListQuerySuggestionsBlockListsRequest {
    }
    export interface ListQuerySuggestionsBlockListsCommandOutput extends ListQuerySuggestionsBlockListsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the block lists used for query suggestions for an index.</p>
        *         <p>For information on the current quota limits for block lists, see
        *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas
        *                 for Amazon Kendra</a>.</p>
        *         <p>
        *             <code>ListQuerySuggestionsBlockLists</code> is currently not supported in the
        *             Amazon Web Services GovCloud (US-West) region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, ListQuerySuggestionsBlockListsCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, ListQuerySuggestionsBlockListsCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new ListQuerySuggestionsBlockListsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListQuerySuggestionsBlockListsCommandInput} for command's `input` shape.
        * @see {@link ListQuerySuggestionsBlockListsCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class ListQuerySuggestionsBlockListsCommand extends $Command<ListQuerySuggestionsBlockListsCommandInput, ListQuerySuggestionsBlockListsCommandOutput, KendraClientResolvedConfig> {
            readonly input: ListQuerySuggestionsBlockListsCommandInput;
            constructor(input: ListQuerySuggestionsBlockListsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListQuerySuggestionsBlockListsCommandInput, ListQuerySuggestionsBlockListsCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of tags associated with a specified resource. Indexes,
        *       FAQs, and data sources can have tags associated with them.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, ListTagsForResourceCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, ListTagsForResourceCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, KendraClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListThesauriCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { ListThesauriRequest, ListThesauriResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface ListThesauriCommandInput extends ListThesauriRequest {
    }
    export interface ListThesauriCommandOutput extends ListThesauriResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the thesauri for an index.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, ListThesauriCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, ListThesauriCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new ListThesauriCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListThesauriCommandInput} for command's `input` shape.
        * @see {@link ListThesauriCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class ListThesauriCommand extends $Command<ListThesauriCommandInput, ListThesauriCommandOutput, KendraClientResolvedConfig> {
            readonly input: ListThesauriCommandInput;
            constructor(input: ListThesauriCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListThesauriCommandInput, ListThesauriCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/PutPrincipalMappingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { PutPrincipalMappingRequest } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface PutPrincipalMappingCommandInput extends PutPrincipalMappingRequest {
    }
    export interface PutPrincipalMappingCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Maps users to their groups so that you only need to provide
        *             the user ID when you issue the query.</p>
        *         <p>You can also map sub groups to groups.
        *             For example, the group "Company Intellectual Property Teams" includes
        *             sub groups "Research" and "Engineering". These sub groups include their
        *             own list of users or people who work in these teams. Only users who work
        *             in research and engineering, and therefore belong in the intellectual
        *             property group, can see top-secret company documents in their search
        *             results.</p>
        *         <p>This is useful for user context filtering, where search results are
        *             filtered based on the user or their group access to documents. For more
        *             information, see
        *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/user-context-filter.html">Filtering
        *                 on user context</a>.</p>
        *         <p>If more than five <code>PUT</code> actions for a group are currently
        *             processing, a validation exception is thrown.</p>
        *         <p>
        *             <code>PutPrincipalMapping</code> is currently not supported in the
        *             Amazon Web Services GovCloud (US-West) region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, PutPrincipalMappingCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, PutPrincipalMappingCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new PutPrincipalMappingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutPrincipalMappingCommandInput} for command's `input` shape.
        * @see {@link PutPrincipalMappingCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class PutPrincipalMappingCommand extends $Command<PutPrincipalMappingCommandInput, PutPrincipalMappingCommandOutput, KendraClientResolvedConfig> {
            readonly input: PutPrincipalMappingCommandInput;
            constructor(input: PutPrincipalMappingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutPrincipalMappingCommandInput, PutPrincipalMappingCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/QueryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { QueryResult } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    import { QueryRequest } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_1";
    export interface QueryCommandInput extends QueryRequest {
    }
    export interface QueryCommandOutput extends QueryResult, __MetadataBearer {
    }
    /**
        * <p>Searches an active index. Use this API to search your documents
        *          using query. The <code>Query</code> API enables to do faceted
        *          search and to filter results based on document attributes.</p>
        *          <p>It also enables you to provide user context that Amazon Kendra uses
        *          to enforce document access control in the search results.</p>
        *          <p>Amazon Kendra searches your index for text content and question and
        *          answer (FAQ) content. By default the response contains three types of
        *          results.</p>
        *          <ul>
        *             <li>
        *                <p>Relevant passages</p>
        *             </li>
        *             <li>
        *                <p>Matching FAQs</p>
        *             </li>
        *             <li>
        *                <p>Relevant documents</p>
        *             </li>
        *          </ul>
        *          <p>You can specify that the query return only one type of result using
        *          the <code>QueryResultTypeConfig</code> parameter.</p>
        *          <p>Each query returns the 100 most relevant results. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, QueryCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, QueryCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new QueryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link QueryCommandInput} for command's `input` shape.
        * @see {@link QueryCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class QueryCommand extends $Command<QueryCommandInput, QueryCommandOutput, KendraClientResolvedConfig> {
            readonly input: QueryCommandInput;
            constructor(input: QueryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<QueryCommandInput, QueryCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/StartDataSourceSyncJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { StartDataSourceSyncJobRequest, StartDataSourceSyncJobResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface StartDataSourceSyncJobCommandInput extends StartDataSourceSyncJobRequest {
    }
    export interface StartDataSourceSyncJobCommandOutput extends StartDataSourceSyncJobResponse, __MetadataBearer {
    }
    /**
        * <p>Starts a synchronization job for a data source. If a synchronization
        *       job is already in progress, Amazon Kendra returns a
        *         <code>ResourceInUseException</code> exception.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, StartDataSourceSyncJobCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, StartDataSourceSyncJobCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new StartDataSourceSyncJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartDataSourceSyncJobCommandInput} for command's `input` shape.
        * @see {@link StartDataSourceSyncJobCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class StartDataSourceSyncJobCommand extends $Command<StartDataSourceSyncJobCommandInput, StartDataSourceSyncJobCommandOutput, KendraClientResolvedConfig> {
            readonly input: StartDataSourceSyncJobCommandInput;
            constructor(input: StartDataSourceSyncJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartDataSourceSyncJobCommandInput, StartDataSourceSyncJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/StopDataSourceSyncJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { StopDataSourceSyncJobRequest } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface StopDataSourceSyncJobCommandInput extends StopDataSourceSyncJobRequest {
    }
    export interface StopDataSourceSyncJobCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Stops a synchronization job that is currently running.
        *       You can't stop a scheduled synchronization job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, StopDataSourceSyncJobCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, StopDataSourceSyncJobCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new StopDataSourceSyncJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopDataSourceSyncJobCommandInput} for command's `input` shape.
        * @see {@link StopDataSourceSyncJobCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class StopDataSourceSyncJobCommand extends $Command<StopDataSourceSyncJobCommandInput, StopDataSourceSyncJobCommandOutput, KendraClientResolvedConfig> {
            readonly input: StopDataSourceSyncJobCommandInput;
            constructor(input: StopDataSourceSyncJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopDataSourceSyncJobCommandInput, StopDataSourceSyncJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/SubmitFeedbackCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { SubmitFeedbackRequest } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface SubmitFeedbackCommandInput extends SubmitFeedbackRequest {
    }
    export interface SubmitFeedbackCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Enables you to provide feedback to Amazon Kendra to improve the
        *             performance of your index.</p>
        *         <p>
        *             <code>SubmitFeedback</code> is currently not supported in the
        *             Amazon Web Services GovCloud (US-West) region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, SubmitFeedbackCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, SubmitFeedbackCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new SubmitFeedbackCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SubmitFeedbackCommandInput} for command's `input` shape.
        * @see {@link SubmitFeedbackCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class SubmitFeedbackCommand extends $Command<SubmitFeedbackCommandInput, SubmitFeedbackCommandOutput, KendraClientResolvedConfig> {
            readonly input: SubmitFeedbackCommandInput;
            constructor(input: SubmitFeedbackCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SubmitFeedbackCommandInput, SubmitFeedbackCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Adds the specified tag to the specified index, FAQ, or data source
        *       resource. If the tag already exists, the existing value is replaced with
        *       the new value.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, TagResourceCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, TagResourceCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, KendraClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes a tag from an index, FAQ, or a data source.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, UntagResourceCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, UntagResourceCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, KendraClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UpdateAccessControlConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { UpdateAccessControlConfigurationRequest, UpdateAccessControlConfigurationResponse } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface UpdateAccessControlConfigurationCommandInput extends UpdateAccessControlConfigurationRequest {
    }
    export interface UpdateAccessControlConfigurationCommandOutput extends UpdateAccessControlConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an access control configuration for your documents in an index. This
        *             includes user and group access information for your documents. This is useful
        *             for user context filtering, where search results are filtered based on the user
        *             or their group access to documents.</p>
        *         <p>You can update an access control configuration you created without indexing all
        *             of your documents again. For example, your index contains top-secret company
        *             documents that only certain employees or users should access. You created an 'allow'
        *             access control configuration for one user who recently joined the 'top-secret' team,
        *             switching from a team with 'deny' access to top-secret documents. However, the user
        *             suddenly returns to their previous team and should no longer have access to top secret
        *             documents. You can update the access control configuration to re-configure access
        *             control for your documents as circumstances change.</p>
        *         <p>You call the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_BatchPutDocument.html">BatchPutDocument</a>
        *             API to apply the updated access control configuration, with the
        *             <code>AccessControlConfigurationId</code> included in the
        *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_Document.html">Document</a>
        *             object. If you use an S3 bucket as a data source, you synchronize your data source to
        *             apply the the <code>AccessControlConfigurationId</code> in the <code>.metadata.json</code> file.
        *             Amazon Kendra currently only supports access control configuration for S3 data
        *             sources and documents indexed using the <code>BatchPutDocument</code> API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, UpdateAccessControlConfigurationCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, UpdateAccessControlConfigurationCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new UpdateAccessControlConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAccessControlConfigurationCommandInput} for command's `input` shape.
        * @see {@link UpdateAccessControlConfigurationCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class UpdateAccessControlConfigurationCommand extends $Command<UpdateAccessControlConfigurationCommandInput, UpdateAccessControlConfigurationCommandOutput, KendraClientResolvedConfig> {
            readonly input: UpdateAccessControlConfigurationCommandInput;
            constructor(input: UpdateAccessControlConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAccessControlConfigurationCommandInput, UpdateAccessControlConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UpdateDataSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { UpdateDataSourceRequest } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface UpdateDataSourceCommandInput extends UpdateDataSourceRequest {
    }
    export interface UpdateDataSourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Updates an existing Amazon Kendra data source.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, UpdateDataSourceCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, UpdateDataSourceCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new UpdateDataSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDataSourceCommandInput} for command's `input` shape.
        * @see {@link UpdateDataSourceCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class UpdateDataSourceCommand extends $Command<UpdateDataSourceCommandInput, UpdateDataSourceCommandOutput, KendraClientResolvedConfig> {
            readonly input: UpdateDataSourceCommandInput;
            constructor(input: UpdateDataSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDataSourceCommandInput, UpdateDataSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UpdateExperienceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { UpdateExperienceRequest } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface UpdateExperienceCommandInput extends UpdateExperienceRequest {
    }
    export interface UpdateExperienceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Updates your Amazon Kendra experience such as a search application. For more information on
        *             creating a search application experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building a
        *                 search experience with no code</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, UpdateExperienceCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, UpdateExperienceCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new UpdateExperienceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateExperienceCommandInput} for command's `input` shape.
        * @see {@link UpdateExperienceCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class UpdateExperienceCommand extends $Command<UpdateExperienceCommandInput, UpdateExperienceCommandOutput, KendraClientResolvedConfig> {
            readonly input: UpdateExperienceCommandInput;
            constructor(input: UpdateExperienceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateExperienceCommandInput, UpdateExperienceCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UpdateIndexCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { UpdateIndexRequest } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface UpdateIndexCommandInput extends UpdateIndexRequest {
    }
    export interface UpdateIndexCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Updates an existing Amazon Kendra index.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, UpdateIndexCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, UpdateIndexCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new UpdateIndexCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateIndexCommandInput} for command's `input` shape.
        * @see {@link UpdateIndexCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class UpdateIndexCommand extends $Command<UpdateIndexCommandInput, UpdateIndexCommandOutput, KendraClientResolvedConfig> {
            readonly input: UpdateIndexCommandInput;
            constructor(input: UpdateIndexCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateIndexCommandInput, UpdateIndexCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UpdateQuerySuggestionsBlockListCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { UpdateQuerySuggestionsBlockListRequest } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface UpdateQuerySuggestionsBlockListCommandInput extends UpdateQuerySuggestionsBlockListRequest {
    }
    export interface UpdateQuerySuggestionsBlockListCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Updates a block list used for query suggestions for an index.</p>
        *         <p>Updates to a block list might not take effect right away. Amazon Kendra
        *             needs to refresh the entire suggestions list to apply any updates to the
        *             block list. Other changes not related to the block list apply immediately.</p>
        *         <p>If a block list is updating, then you need to wait for the first update to
        *             finish before submitting another update.</p>
        *         <p>Amazon Kendra supports partial updates, so you only need to provide the fields
        *             you want to update.</p>
        *         <p>
        *             <code>UpdateQuerySuggestionsBlockList</code> is currently not supported in the
        *             Amazon Web Services GovCloud (US-West) region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, UpdateQuerySuggestionsBlockListCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, UpdateQuerySuggestionsBlockListCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new UpdateQuerySuggestionsBlockListCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateQuerySuggestionsBlockListCommandInput} for command's `input` shape.
        * @see {@link UpdateQuerySuggestionsBlockListCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class UpdateQuerySuggestionsBlockListCommand extends $Command<UpdateQuerySuggestionsBlockListCommandInput, UpdateQuerySuggestionsBlockListCommandOutput, KendraClientResolvedConfig> {
            readonly input: UpdateQuerySuggestionsBlockListCommandInput;
            constructor(input: UpdateQuerySuggestionsBlockListCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateQuerySuggestionsBlockListCommandInput, UpdateQuerySuggestionsBlockListCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UpdateQuerySuggestionsConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { UpdateQuerySuggestionsConfigRequest } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface UpdateQuerySuggestionsConfigCommandInput extends UpdateQuerySuggestionsConfigRequest {
    }
    export interface UpdateQuerySuggestionsConfigCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Updates the settings of query suggestions for an index.</p>
        *         <p>Amazon Kendra supports partial updates, so you only need to provide
        *             the fields you want to update.</p>
        *         <p>If an update is currently processing (i.e. 'happening'), you
        *             need to wait for the update to finish before making another update.</p>
        *         <p>Updates to query suggestions settings might not take effect right away.
        *             The time for your updated settings to take effect depends on the updates
        *             made and the number of search queries in your index.</p>
        *         <p>You can still enable/disable query suggestions at any time.</p>
        *         <p>
        *             <code>UpdateQuerySuggestionsConfig</code> is currently not supported in the
        *             Amazon Web Services GovCloud (US-West) region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, UpdateQuerySuggestionsConfigCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, UpdateQuerySuggestionsConfigCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new UpdateQuerySuggestionsConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateQuerySuggestionsConfigCommandInput} for command's `input` shape.
        * @see {@link UpdateQuerySuggestionsConfigCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class UpdateQuerySuggestionsConfigCommand extends $Command<UpdateQuerySuggestionsConfigCommandInput, UpdateQuerySuggestionsConfigCommandOutput, KendraClientResolvedConfig> {
            readonly input: UpdateQuerySuggestionsConfigCommandInput;
            constructor(input: UpdateQuerySuggestionsConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateQuerySuggestionsConfigCommandInput, UpdateQuerySuggestionsConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UpdateThesaurusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient";
    import { UpdateThesaurusRequest } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface UpdateThesaurusCommandInput extends UpdateThesaurusRequest {
    }
    export interface UpdateThesaurusCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Updates a thesaurus for an index.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KendraClient, UpdateThesaurusCommand } from "@aws-sdk/client-kendra"; // ES Modules import
        * // const { KendraClient, UpdateThesaurusCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
        * const client = new KendraClient(config);
        * const command = new UpdateThesaurusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateThesaurusCommandInput} for command's `input` shape.
        * @see {@link UpdateThesaurusCommandOutput} for command's `response` shape.
        * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
        *
        */
    export class UpdateThesaurusCommand extends $Command<UpdateThesaurusCommandInput, UpdateThesaurusCommandOutput, KendraClientResolvedConfig> {
            readonly input: UpdateThesaurusCommandInput;
            constructor(input: UpdateThesaurusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateThesaurusCommandInput, UpdateThesaurusCommandOutput>;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/KendraClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AssociateEntitiesToExperienceCommandInput, AssociateEntitiesToExperienceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/AssociateEntitiesToExperienceCommand";
    import { AssociatePersonasToEntitiesCommandInput, AssociatePersonasToEntitiesCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/AssociatePersonasToEntitiesCommand";
    import { BatchDeleteDocumentCommandInput, BatchDeleteDocumentCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/BatchDeleteDocumentCommand";
    import { BatchGetDocumentStatusCommandInput, BatchGetDocumentStatusCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/BatchGetDocumentStatusCommand";
    import { BatchPutDocumentCommandInput, BatchPutDocumentCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/BatchPutDocumentCommand";
    import { ClearQuerySuggestionsCommandInput, ClearQuerySuggestionsCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ClearQuerySuggestionsCommand";
    import { CreateAccessControlConfigurationCommandInput, CreateAccessControlConfigurationCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/CreateAccessControlConfigurationCommand";
    import { CreateDataSourceCommandInput, CreateDataSourceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/CreateDataSourceCommand";
    import { CreateExperienceCommandInput, CreateExperienceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/CreateExperienceCommand";
    import { CreateFaqCommandInput, CreateFaqCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/CreateFaqCommand";
    import { CreateIndexCommandInput, CreateIndexCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/CreateIndexCommand";
    import { CreateQuerySuggestionsBlockListCommandInput, CreateQuerySuggestionsBlockListCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/CreateQuerySuggestionsBlockListCommand";
    import { CreateThesaurusCommandInput, CreateThesaurusCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/CreateThesaurusCommand";
    import { DeleteAccessControlConfigurationCommandInput, DeleteAccessControlConfigurationCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeleteAccessControlConfigurationCommand";
    import { DeleteDataSourceCommandInput, DeleteDataSourceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeleteDataSourceCommand";
    import { DeleteExperienceCommandInput, DeleteExperienceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeleteExperienceCommand";
    import { DeleteFaqCommandInput, DeleteFaqCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeleteFaqCommand";
    import { DeleteIndexCommandInput, DeleteIndexCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeleteIndexCommand";
    import { DeletePrincipalMappingCommandInput, DeletePrincipalMappingCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeletePrincipalMappingCommand";
    import { DeleteQuerySuggestionsBlockListCommandInput, DeleteQuerySuggestionsBlockListCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeleteQuerySuggestionsBlockListCommand";
    import { DeleteThesaurusCommandInput, DeleteThesaurusCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DeleteThesaurusCommand";
    import { DescribeAccessControlConfigurationCommandInput, DescribeAccessControlConfigurationCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeAccessControlConfigurationCommand";
    import { DescribeDataSourceCommandInput, DescribeDataSourceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeDataSourceCommand";
    import { DescribeExperienceCommandInput, DescribeExperienceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeExperienceCommand";
    import { DescribeFaqCommandInput, DescribeFaqCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeFaqCommand";
    import { DescribeIndexCommandInput, DescribeIndexCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeIndexCommand";
    import { DescribePrincipalMappingCommandInput, DescribePrincipalMappingCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribePrincipalMappingCommand";
    import { DescribeQuerySuggestionsBlockListCommandInput, DescribeQuerySuggestionsBlockListCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeQuerySuggestionsBlockListCommand";
    import { DescribeQuerySuggestionsConfigCommandInput, DescribeQuerySuggestionsConfigCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeQuerySuggestionsConfigCommand";
    import { DescribeThesaurusCommandInput, DescribeThesaurusCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DescribeThesaurusCommand";
    import { DisassociateEntitiesFromExperienceCommandInput, DisassociateEntitiesFromExperienceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DisassociateEntitiesFromExperienceCommand";
    import { DisassociatePersonasFromEntitiesCommandInput, DisassociatePersonasFromEntitiesCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/DisassociatePersonasFromEntitiesCommand";
    import { GetQuerySuggestionsCommandInput, GetQuerySuggestionsCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/GetQuerySuggestionsCommand";
    import { GetSnapshotsCommandInput, GetSnapshotsCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/GetSnapshotsCommand";
    import { ListAccessControlConfigurationsCommandInput, ListAccessControlConfigurationsCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListAccessControlConfigurationsCommand";
    import { ListDataSourcesCommandInput, ListDataSourcesCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListDataSourcesCommand";
    import { ListDataSourceSyncJobsCommandInput, ListDataSourceSyncJobsCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListDataSourceSyncJobsCommand";
    import { ListEntityPersonasCommandInput, ListEntityPersonasCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListEntityPersonasCommand";
    import { ListExperienceEntitiesCommandInput, ListExperienceEntitiesCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListExperienceEntitiesCommand";
    import { ListExperiencesCommandInput, ListExperiencesCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListExperiencesCommand";
    import { ListFaqsCommandInput, ListFaqsCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListFaqsCommand";
    import { ListGroupsOlderThanOrderingIdCommandInput, ListGroupsOlderThanOrderingIdCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListGroupsOlderThanOrderingIdCommand";
    import { ListIndicesCommandInput, ListIndicesCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListIndicesCommand";
    import { ListQuerySuggestionsBlockListsCommandInput, ListQuerySuggestionsBlockListsCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListQuerySuggestionsBlockListsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListTagsForResourceCommand";
    import { ListThesauriCommandInput, ListThesauriCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/ListThesauriCommand";
    import { PutPrincipalMappingCommandInput, PutPrincipalMappingCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/PutPrincipalMappingCommand";
    import { QueryCommandInput, QueryCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/QueryCommand";
    import { StartDataSourceSyncJobCommandInput, StartDataSourceSyncJobCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/StartDataSourceSyncJobCommand";
    import { StopDataSourceSyncJobCommandInput, StopDataSourceSyncJobCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/StopDataSourceSyncJobCommand";
    import { SubmitFeedbackCommandInput, SubmitFeedbackCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/SubmitFeedbackCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UntagResourceCommand";
    import { UpdateAccessControlConfigurationCommandInput, UpdateAccessControlConfigurationCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UpdateAccessControlConfigurationCommand";
    import { UpdateDataSourceCommandInput, UpdateDataSourceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UpdateDataSourceCommand";
    import { UpdateExperienceCommandInput, UpdateExperienceCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UpdateExperienceCommand";
    import { UpdateIndexCommandInput, UpdateIndexCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UpdateIndexCommand";
    import { UpdateQuerySuggestionsBlockListCommandInput, UpdateQuerySuggestionsBlockListCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UpdateQuerySuggestionsBlockListCommand";
    import { UpdateQuerySuggestionsConfigCommandInput, UpdateQuerySuggestionsConfigCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UpdateQuerySuggestionsConfigCommand";
    import { UpdateThesaurusCommandInput, UpdateThesaurusCommandOutput } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/commands/UpdateThesaurusCommand";
    export type ServiceInputTypes = AssociateEntitiesToExperienceCommandInput | AssociatePersonasToEntitiesCommandInput | BatchDeleteDocumentCommandInput | BatchGetDocumentStatusCommandInput | BatchPutDocumentCommandInput | ClearQuerySuggestionsCommandInput | CreateAccessControlConfigurationCommandInput | CreateDataSourceCommandInput | CreateExperienceCommandInput | CreateFaqCommandInput | CreateIndexCommandInput | CreateQuerySuggestionsBlockListCommandInput | CreateThesaurusCommandInput | DeleteAccessControlConfigurationCommandInput | DeleteDataSourceCommandInput | DeleteExperienceCommandInput | DeleteFaqCommandInput | DeleteIndexCommandInput | DeletePrincipalMappingCommandInput | DeleteQuerySuggestionsBlockListCommandInput | DeleteThesaurusCommandInput | DescribeAccessControlConfigurationCommandInput | DescribeDataSourceCommandInput | DescribeExperienceCommandInput | DescribeFaqCommandInput | DescribeIndexCommandInput | DescribePrincipalMappingCommandInput | DescribeQuerySuggestionsBlockListCommandInput | DescribeQuerySuggestionsConfigCommandInput | DescribeThesaurusCommandInput | DisassociateEntitiesFromExperienceCommandInput | DisassociatePersonasFromEntitiesCommandInput | GetQuerySuggestionsCommandInput | GetSnapshotsCommandInput | ListAccessControlConfigurationsCommandInput | ListDataSourceSyncJobsCommandInput | ListDataSourcesCommandInput | ListEntityPersonasCommandInput | ListExperienceEntitiesCommandInput | ListExperiencesCommandInput | ListFaqsCommandInput | ListGroupsOlderThanOrderingIdCommandInput | ListIndicesCommandInput | ListQuerySuggestionsBlockListsCommandInput | ListTagsForResourceCommandInput | ListThesauriCommandInput | PutPrincipalMappingCommandInput | QueryCommandInput | StartDataSourceSyncJobCommandInput | StopDataSourceSyncJobCommandInput | SubmitFeedbackCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateAccessControlConfigurationCommandInput | UpdateDataSourceCommandInput | UpdateExperienceCommandInput | UpdateIndexCommandInput | UpdateQuerySuggestionsBlockListCommandInput | UpdateQuerySuggestionsConfigCommandInput | UpdateThesaurusCommandInput;
    export type ServiceOutputTypes = AssociateEntitiesToExperienceCommandOutput | AssociatePersonasToEntitiesCommandOutput | BatchDeleteDocumentCommandOutput | BatchGetDocumentStatusCommandOutput | BatchPutDocumentCommandOutput | ClearQuerySuggestionsCommandOutput | CreateAccessControlConfigurationCommandOutput | CreateDataSourceCommandOutput | CreateExperienceCommandOutput | CreateFaqCommandOutput | CreateIndexCommandOutput | CreateQuerySuggestionsBlockListCommandOutput | CreateThesaurusCommandOutput | DeleteAccessControlConfigurationCommandOutput | DeleteDataSourceCommandOutput | DeleteExperienceCommandOutput | DeleteFaqCommandOutput | DeleteIndexCommandOutput | DeletePrincipalMappingCommandOutput | DeleteQuerySuggestionsBlockListCommandOutput | DeleteThesaurusCommandOutput | DescribeAccessControlConfigurationCommandOutput | DescribeDataSourceCommandOutput | DescribeExperienceCommandOutput | DescribeFaqCommandOutput | DescribeIndexCommandOutput | DescribePrincipalMappingCommandOutput | DescribeQuerySuggestionsBlockListCommandOutput | DescribeQuerySuggestionsConfigCommandOutput | DescribeThesaurusCommandOutput | DisassociateEntitiesFromExperienceCommandOutput | DisassociatePersonasFromEntitiesCommandOutput | GetQuerySuggestionsCommandOutput | GetSnapshotsCommandOutput | ListAccessControlConfigurationsCommandOutput | ListDataSourceSyncJobsCommandOutput | ListDataSourcesCommandOutput | ListEntityPersonasCommandOutput | ListExperienceEntitiesCommandOutput | ListExperiencesCommandOutput | ListFaqsCommandOutput | ListGroupsOlderThanOrderingIdCommandOutput | ListIndicesCommandOutput | ListQuerySuggestionsBlockListsCommandOutput | ListTagsForResourceCommandOutput | ListThesauriCommandOutput | PutPrincipalMappingCommandOutput | QueryCommandOutput | StartDataSourceSyncJobCommandOutput | StopDataSourceSyncJobCommandOutput | SubmitFeedbackCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateAccessControlConfigurationCommandOutput | UpdateDataSourceCommandOutput | UpdateExperienceCommandOutput | UpdateIndexCommandOutput | UpdateQuerySuggestionsBlockListCommandOutput | UpdateQuerySuggestionsConfigCommandOutput | UpdateThesaurusCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type KendraClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of KendraClient class constructor that set the region, credentials and other options.
        */
    export interface KendraClientConfig extends KendraClientConfigType {
    }
    type KendraClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of KendraClient class. This is resolved and normalized from the {@link KendraClientConfig | constructor configuration interface}.
        */
    export interface KendraClientResolvedConfig extends KendraClientResolvedConfigType {
    }
    /**
        * <p>Amazon Kendra is a service for indexing large document sets.</p>
        */
    export class KendraClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, KendraClientResolvedConfig> {
            /**
                * The resolved configuration of KendraClient class. This is resolved and normalized from the {@link KendraClientConfig | constructor configuration interface}.
                */
            readonly config: KendraClientResolvedConfig;
            constructor(configuration: KendraClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { KendraServiceException as __BaseException } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/KendraServiceException";
    /**
        * <p>Summary information on an access control configuration that you created for
        *             your documents in an index.</p>
        */
    export interface AccessControlConfigurationSummary {
            /**
                * <p>The identifier of the access control configuration.</p>
                */
            Id: string | undefined;
    }
    export namespace AccessControlConfigurationSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccessControlConfigurationSummary) => any;
    }
    /**
        * <p>Access Control List files for the documents in a data source. For
        *             the format of the file, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/s3-acl.html">Access control for S3 data
        *                 sources</a>.</p>
        */
    export interface AccessControlListConfiguration {
            /**
                * <p>Path to the Amazon Web Services S3 bucket that contains the ACL files.</p>
                */
            KeyPath?: string;
    }
    export namespace AccessControlListConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccessControlListConfiguration) => any;
    }
    /**
        * <p></p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>Provides information about the column that should be used for
        *             filtering the query response by groups.</p>
        */
    export interface AclConfiguration {
            /**
                * <p>A list of groups, separated by semi-colons, that filters a query
                *             response based on user context. The document is only returned to
                *             users that are in one of the groups specified in the
                *                 <code>UserContext</code> field of the <code>Query</code>
                *             API.</p>
                */
            AllowedGroupsColumnName: string | undefined;
    }
    export namespace AclConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AclConfiguration) => any;
    }
    export enum HighlightType {
            STANDARD = "STANDARD",
            THESAURUS_SYNONYM = "THESAURUS_SYNONYM"
    }
    /**
        * <p>Provides information that you can use to highlight a search result
        *             so that your users can quickly identify terms in the
        *             response.</p>
        */
    export interface Highlight {
            /**
                * <p>The zero-based location in the response string where the highlight
                *             starts.</p>
                */
            BeginOffset: number | undefined;
            /**
                * <p>The zero-based location in the response string where the highlight
                *             ends.</p>
                */
            EndOffset: number | undefined;
            /**
                * <p>Indicates whether the response is the best response. True if this
                *             is the best response; otherwise, false.</p>
                */
            TopAnswer?: boolean;
            /**
                * <p>The highlight type. </p>
                */
            Type?: HighlightType | string;
    }
    export namespace Highlight {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Highlight) => any;
    }
    /**
        * <p>Provides text and information about where to highlight the
        *             text.</p>
        */
    export interface TextWithHighlights {
            /**
                * <p>The text to display to the user.</p>
                */
            Text?: string;
            /**
                * <p>The beginning and end of the text that should be
                *             highlighted.</p>
                */
            Highlights?: Highlight[];
    }
    export namespace TextWithHighlights {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TextWithHighlights) => any;
    }
    /**
        * <p>An attribute returned with a document from a search.</p>
        */
    export interface AdditionalResultAttributeValue {
            /**
                * <p>The text associated with the attribute and information about the
                *             highlight to apply to the text.</p>
                */
            TextWithHighlightsValue?: TextWithHighlights;
    }
    export namespace AdditionalResultAttributeValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdditionalResultAttributeValue) => any;
    }
    export enum AdditionalResultAttributeValueType {
            TEXT_WITH_HIGHLIGHTS_VALUE = "TEXT_WITH_HIGHLIGHTS_VALUE"
    }
    /**
        * <p>An attribute returned from an index query.</p>
        */
    export interface AdditionalResultAttribute {
            /**
                * <p>The key that identifies the attribute.</p>
                */
            Key: string | undefined;
            /**
                * <p>The data type of the <code>Value</code> property.</p>
                */
            ValueType: AdditionalResultAttributeValueType | string | undefined;
            /**
                * <p>An object that contains the attribute value.</p>
                */
            Value: AdditionalResultAttributeValue | undefined;
    }
    export namespace AdditionalResultAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdditionalResultAttribute) => any;
    }
    /**
        * <p>Maps a column or attribute in the data source to an index field.
        *             You must first create the fields in the index using the
        *                 <code>UpdateIndex</code> API.</p>
        */
    export interface DataSourceToIndexFieldMapping {
            /**
                * <p>The name of the column or attribute in the data source.</p>
                */
            DataSourceFieldName: string | undefined;
            /**
                * <p>The type of data stored in the column or attribute.</p>
                */
            DateFieldFormat?: string;
            /**
                * <p>The name of the field in the index.</p>
                */
            IndexFieldName: string | undefined;
    }
    export namespace DataSourceToIndexFieldMapping {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSourceToIndexFieldMapping) => any;
    }
    export enum AlfrescoEntity {
            blog = "blog",
            documentLibrary = "documentLibrary",
            wiki = "wiki"
    }
    /**
        * <p>Information required to find a specific file in an Amazon S3
        *             bucket.</p>
        */
    export interface S3Path {
            /**
                * <p>The name of the S3 bucket that contains the file.</p>
                */
            Bucket: string | undefined;
            /**
                * <p>The name of the file.</p>
                */
            Key: string | undefined;
    }
    export namespace S3Path {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3Path) => any;
    }
    /**
        * <p>Provides the configuration information to connect to an Amazon VPC.</p>
        */
    export interface DataSourceVpcConfiguration {
            /**
                * <p>A list of identifiers for subnets within your Amazon VPC. The
                *             subnets should be able to connect to each other in the VPC, and they
                *             should have outgoing access to the Internet through a NAT
                *             device.</p>
                */
            SubnetIds: string[] | undefined;
            /**
                * <p>A list of identifiers of security groups within your Amazon VPC.
                *             The security groups should enable Amazon Kendra to connect to the data
                *             source.</p>
                */
            SecurityGroupIds: string[] | undefined;
    }
    export namespace DataSourceVpcConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSourceVpcConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information to connect to Alfresco as your
        *             data source.</p>
        *         <note>
        *             <p>Alfresco data source connector is currently in preview mode. Basic
        *                 authentication is currently supported. If you would like to use Alfresco
        *                 connector in production, contact <a href="http://aws.amazon.com/contact-us/">Support</a>.</p>
        *         </note>
        */
    export interface AlfrescoConfiguration {
            /**
                * <p>The URL of the Alfresco site. For example, <i>https://hostname:8080</i>.</p>
                */
            SiteUrl: string | undefined;
            /**
                * <p>The identifier of the Alfresco site. For example, <i>my-site</i>.</p>
                */
            SiteId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of an Secrets Manager secret that
                *             contains the key-value pairs required to connect to your Alfresco
                *             data source. The secret must contain a JSON structure with the following keys:</p>
                *         <ul>
                *             <li>
                *                 <p>username—The user name of the Alfresco account.</p>
                *             </li>
                *             <li>
                *                 <p>password—The password of the Alfresco account.</p>
                *             </li>
                *          </ul>
                */
            SecretArn: string | undefined;
            /**
                * <p>The path to the SSL certificate stored in an Amazon S3 bucket. You
                *             use this to connect to Alfresco.</p>
                */
            SslCertificateS3Path: S3Path | undefined;
            /**
                * <p>
                *             <code>TRUE</code> to index shared files.</p>
                */
            CrawlSystemFolders?: boolean;
            /**
                * <p>
                *             <code>TRUE</code> to index comments of blogs and other content.</p>
                */
            CrawlComments?: boolean;
            /**
                * <p>Specify whether to index document libraries, wikis,
                *             or blogs. You can specify one or more of these options.</p>
                */
            EntityFilter?: (AlfrescoEntity | string)[];
            /**
                * <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes
                *             or field names of Alfresco document libraries to Amazon Kendra index field names.
                *             To create custom fields, use the <code>UpdateIndex</code> API before you map to Alfresco
                *             fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">
                *                 Mapping data source fields</a>. The Alfresco data source field names
                *             must exist in your Alfresco custom metadata.</p>
                */
            DocumentLibraryFieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes
                *             or field names of Alfresco blogs to Amazon Kendra index field names.
                *             To create custom fields, use the <code>UpdateIndex</code> API before you map to Alfresco
                *             fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">
                *                 Mapping data source fields</a>. The Alfresco data source field names
                *             must exist in your Alfresco custom metadata.</p>
                */
            BlogFieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes
                *             or field names of Alfresco wikis to Amazon Kendra index field names.
                *             To create custom fields, use the <code>UpdateIndex</code> API before you map to Alfresco
                *             fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">
                *                 Mapping data source fields</a>. The Alfresco data source field names
                *             must exist in your Alfresco custom metadata.</p>
                */
            WikiFieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of regular expression patterns to include certain files
                *             in your Alfresco data source. Files that match
                *             the patterns are included in the index. Files that don't match the patterns
                *             are excluded from the index. If a file matches both an inclusion pattern
                *             and an exclusion pattern, the exclusion pattern takes precedence and the
                *             file isn't included in the index.</p>
                */
            InclusionPatterns?: string[];
            /**
                * <p>A list of regular expression patterns to exclude certain files
                *             in your Alfresco data source. Files that
                *             match the patterns are excluded from the index. Files that don't match
                *             the patterns are included in the index. If a file matches both an inclusion
                *             pattern and an exclusion pattern, the exclusion pattern takes precedence
                *             and the file isn't included in the index.</p>
                */
            ExclusionPatterns?: string[];
            /**
                * <p>Configuration information for an
                *             Amazon Virtual Private Cloud to connect to your Alfresco. For more information,
                *             see <a href="https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html">Configuring
                *                 a VPC</a>.</p>
                */
            VpcConfiguration?: DataSourceVpcConfiguration;
    }
    export namespace AlfrescoConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AlfrescoConfiguration) => any;
    }
    export enum EntityType {
            GROUP = "GROUP",
            USER = "USER"
    }
    /**
        * <p>Provides the configuration information for users or groups in
        *             your Amazon Web Services SSO identity source to grant access your Amazon Kendra
        *             experience.</p>
        */
    export interface EntityConfiguration {
            /**
                * <p>The identifier of a user or group in your Amazon Web Services SSO identity
                *             source. For example, a user ID could be an email.</p>
                */
            EntityId: string | undefined;
            /**
                * <p>Specifies whether you are configuring a <code>User</code> or a
                *             <code>Group</code>.</p>
                */
            EntityType: EntityType | string | undefined;
    }
    export namespace EntityConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntityConfiguration) => any;
    }
    export interface AssociateEntitiesToExperienceRequest {
            /**
                * <p>The identifier of your Amazon Kendra experience.</p>
                */
            Id: string | undefined;
            /**
                * <p>The identifier of the index for your Amazon Kendra experience.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>Lists users or groups in your Amazon Web Services SSO identity source.</p>
                */
            EntityList: EntityConfiguration[] | undefined;
    }
    export namespace AssociateEntitiesToExperienceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateEntitiesToExperienceRequest) => any;
    }
    /**
        * <p>Information on the users or groups in your Amazon Web Services SSO identity
        *             source that failed to properly configure with your Amazon Kendra experience.</p>
        */
    export interface FailedEntity {
            /**
                * <p>The identifier of the user or group in your Amazon Web Services SSO identity
                *             source. For example, a user ID could be an email.</p>
                */
            EntityId?: string;
            /**
                * <p>The reason the user or group in your Amazon Web Services SSO identity source
                *             failed to properly configure with your Amazon Kendra experience.</p>
                */
            ErrorMessage?: string;
    }
    export namespace FailedEntity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FailedEntity) => any;
    }
    export interface AssociateEntitiesToExperienceResponse {
            /**
                * <p>Lists the users or groups in your Amazon Web Services SSO identity source that
                *             failed to properly configure with your Amazon Kendra experience.</p>
                */
            FailedEntityList?: FailedEntity[];
    }
    export namespace AssociateEntitiesToExperienceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateEntitiesToExperienceResponse) => any;
    }
    /**
        * <p></p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p></p>
        */
    export class ResourceAlreadyExistException extends __BaseException {
            readonly name: "ResourceAlreadyExistException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceAlreadyExistException, __BaseException>);
    }
    /**
        * <p></p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p></p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    /**
        * <p></p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    export enum Persona {
            OWNER = "OWNER",
            VIEWER = "VIEWER"
    }
    /**
        * <p>Provides the configuration information for users or groups in your
        *             Amazon Web Services SSO identity source for access to your Amazon Kendra experience.
        *             Specific permissions are defined for each user or group once they are
        *             granted access to your Amazon Kendra experience.</p>
        */
    export interface EntityPersonaConfiguration {
            /**
                * <p>The identifier of a user or group in your Amazon Web Services SSO identity
                *             source. For example, a user ID could be an email.</p>
                */
            EntityId: string | undefined;
            /**
                * <p>The persona that defines the specific permissions of the user or group
                *             in your Amazon Web Services SSO identity source. The available personas or
                *             access roles are <code>Owner</code> and <code>Viewer</code>. For more
                *             information on these personas, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html#access-search-experience">Providing
                *                 access to your search page</a>.</p>
                */
            Persona: Persona | string | undefined;
    }
    export namespace EntityPersonaConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntityPersonaConfiguration) => any;
    }
    export interface AssociatePersonasToEntitiesRequest {
            /**
                * <p>The identifier of your Amazon Kendra experience.</p>
                */
            Id: string | undefined;
            /**
                * <p>The identifier of the index for your Amazon Kendra experience.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>The personas that define the specific permissions of users or groups in
                *             your Amazon Web Services SSO identity source. The available personas or access
                *             roles are <code>Owner</code> and <code>Viewer</code>. For more information
                *             on these personas, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html#access-search-experience">Providing
                *                 access to your search page</a>.</p>
                */
            Personas: EntityPersonaConfiguration[] | undefined;
    }
    export namespace AssociatePersonasToEntitiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociatePersonasToEntitiesRequest) => any;
    }
    export interface AssociatePersonasToEntitiesResponse {
            /**
                * <p>Lists the users or groups in your Amazon Web Services SSO identity source that
                *             failed to properly configure with your Amazon Kendra experience.</p>
                */
            FailedEntityList?: FailedEntity[];
    }
    export namespace AssociatePersonasToEntitiesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociatePersonasToEntitiesResponse) => any;
    }
    /**
        * <p>The value of a document attribute. You can only provide one
        *             value for a document attribute.</p>
        */
    export interface DocumentAttributeValue {
            /**
                * <p>A string, such as "department".</p>
                */
            StringValue?: string;
            /**
                * <p>A list of strings. </p>
                */
            StringListValue?: string[];
            /**
                * <p>A long integer value.</p>
                */
            LongValue?: number;
            /**
                * <p>A date expressed as an ISO 8601 string.</p>
                *         <p>It is important for the time zone to be included
                *             in the ISO 8601 date-time format. For example,
                *             2012-03-25T12:30:10+01:00 is the ISO 8601 date-time format
                *             for March 25th 2012 at 12:30PM (plus 10 seconds) in
                *             Central European Time.</p>
                */
            DateValue?: Date;
    }
    export namespace DocumentAttributeValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentAttributeValue) => any;
    }
    /**
        * <p>A document attribute or metadata field. To create custom document
        *             attributes, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/custom-attributes.html">Custom attributes</a>.</p>
        */
    export interface DocumentAttribute {
            /**
                * <p>The identifier for the attribute.</p>
                */
            Key: string | undefined;
            /**
                * <p>The value of the attribute.</p>
                */
            Value: DocumentAttributeValue | undefined;
    }
    export namespace DocumentAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentAttribute) => any;
    }
    /**
        * <p>Provides the configuration information to connect to websites that require
        *             basic user authentication.</p>
        */
    export interface BasicAuthenticationConfiguration {
            /**
                * <p>The name of the website host you want to connect to using
                *             authentication credentials.</p>
                *         <p>For example, the host name of https://a.example.com/page1.html is
                *             "a.example.com".</p>
                */
            Host: string | undefined;
            /**
                * <p>The port number of the website host you want to connect to using
                *             authentication credentials.</p>
                *         <p>For example, the port for https://a.example.com/page1.html is 443,
                *             the standard port for HTTPS.</p>
                */
            Port: number | undefined;
            /**
                * <p>Your secret ARN, which you can create in <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html">Secrets Manager</a>
                *          </p>
                *         <p>You use a secret if basic authentication credentials are required to connect
                *             to a website. The secret stores your credentials of user name and password.</p>
                */
            Credentials: string | undefined;
    }
    export namespace BasicAuthenticationConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BasicAuthenticationConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information to connect to websites that require
        *             user authentication.</p>
        */
    export interface AuthenticationConfiguration {
            /**
                * <p>The list of configuration information that's required to connect to and
                *             crawl a website host using basic authentication credentials.</p>
                *         <p>The list includes the name and port number of the website host.</p>
                */
            BasicAuthentication?: BasicAuthenticationConfiguration[];
    }
    export namespace AuthenticationConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AuthenticationConfiguration) => any;
    }
    /**
        * <p>Maps a particular data source sync job to a particular data
        *             source.</p>
        */
    export interface DataSourceSyncJobMetricTarget {
            /**
                * <p>The ID of the data source that is running the sync job.</p>
                */
            DataSourceId: string | undefined;
            /**
                * <p>The ID of the sync job that is running on the data source.</p>
                *         <p>If the ID of a sync job is not provided and there is a sync job
                *             running, then the ID of this sync job is used and metrics are
                *             generated for this sync job.</p>
                *         <p>If the ID of a sync job is not provided and there is no sync job
                *             running, then no metrics are generated and documents are
                *             indexed/deleted at the index level without sync job metrics included.</p>
                */
            DataSourceSyncJobId?: string;
    }
    export namespace DataSourceSyncJobMetricTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSourceSyncJobMetricTarget) => any;
    }
    export interface BatchDeleteDocumentRequest {
            /**
                * <p>The identifier of the index that contains the documents to
                *       delete.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>One or more identifiers for documents to delete from the index.</p>
                */
            DocumentIdList: string[] | undefined;
            /**
                * <p>Maps a particular data source sync job to a particular data
                *             source.</p>
                */
            DataSourceSyncJobMetricTarget?: DataSourceSyncJobMetricTarget;
    }
    export namespace BatchDeleteDocumentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteDocumentRequest) => any;
    }
    export enum ErrorCode {
            INTERNAL_ERROR = "InternalError",
            INVALID_REQUEST = "InvalidRequest"
    }
    /**
        * <p>Provides information about documents that could not be removed
        *             from an index by the <code>BatchDeleteDocument</code>
        *             API.</p>
        */
    export interface BatchDeleteDocumentResponseFailedDocument {
            /**
                * <p>The identifier of the document that couldn't be removed from the
                *             index.</p>
                */
            Id?: string;
            /**
                * <p>The error code for why the document couldn't be removed from the
                *             index.</p>
                */
            ErrorCode?: ErrorCode | string;
            /**
                * <p>An explanation for why the document couldn't be removed from the
                *             index.</p>
                */
            ErrorMessage?: string;
    }
    export namespace BatchDeleteDocumentResponseFailedDocument {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteDocumentResponseFailedDocument) => any;
    }
    export interface BatchDeleteDocumentResponse {
            /**
                * <p>A list of documents that could not be removed from the index. Each
                *       entry contains an error message that indicates why the document couldn't
                *       be removed from the index.</p>
                */
            FailedDocuments?: BatchDeleteDocumentResponseFailedDocument[];
    }
    export namespace BatchDeleteDocumentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteDocumentResponse) => any;
    }
    /**
        * <p></p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>Identifies a document for which to retrieve status
        *             information</p>
        */
    export interface DocumentInfo {
            /**
                * <p>The unique identifier of the document.</p>
                */
            DocumentId: string | undefined;
            /**
                * <p>Attributes that identify a specific version of a document to
                *             check.</p>
                *         <p>The only valid attributes are:</p>
                *         <ul>
                *             <li>
                *                 <p>version</p>
                *             </li>
                *             <li>
                *                 <p>datasourceId</p>
                *             </li>
                *             <li>
                *                 <p>jobExecutionId</p>
                *             </li>
                *          </ul>
                *         <p>The attributes follow these rules:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>dataSourceId</code> and <code>jobExecutionId</code>
                *                     must be used together.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>version</code> is ignored if
                *                         <code>dataSourceId</code> and
                *                         <code>jobExecutionId</code> are not provided.</p>
                *             </li>
                *             <li>
                *                 <p>If <code>dataSourceId</code> and
                *                         <code>jobExecutionId</code> are provided, but
                *                         <code>version</code> is not, the version defaults to
                *                     "0".</p>
                *             </li>
                *          </ul>
                */
            Attributes?: DocumentAttribute[];
    }
    export namespace DocumentInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentInfo) => any;
    }
    export interface BatchGetDocumentStatusRequest {
            /**
                * <p>The identifier of the index to add documents to. The index ID is
                *             returned by the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_CreateIndex.html">CreateIndex
                *             </a> API.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>A list of <code>DocumentInfo</code> objects that identify the
                *             documents for which to get the status. You identify the documents by
                *             their document ID and optional attributes.</p>
                */
            DocumentInfoList: DocumentInfo[] | undefined;
    }
    export namespace BatchGetDocumentStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetDocumentStatusRequest) => any;
    }
    export enum DocumentStatus {
            FAILED = "FAILED",
            INDEXED = "INDEXED",
            NOT_FOUND = "NOT_FOUND",
            PROCESSING = "PROCESSING",
            UPDATED = "UPDATED",
            UPDATE_FAILED = "UPDATE_FAILED"
    }
    /**
        * <p>Provides information about the status of documents submitted for indexing.</p>
        */
    export interface Status {
            /**
                * <p>The unique identifier of the document.</p>
                */
            DocumentId?: string;
            /**
                * <p>The current status of a document.</p>
                *         <p>If the document was submitted for deletion, the status is
                *                 <code>NOT_FOUND</code> after the document is deleted.</p>
                */
            DocumentStatus?: DocumentStatus | string;
            /**
                * <p>Indicates the source of the error.</p>
                */
            FailureCode?: string;
            /**
                * <p>Provides detailed information about why the document couldn't be
                *             indexed. Use this information to correct the error before you
                *             resubmit the document for indexing.</p>
                */
            FailureReason?: string;
    }
    export namespace Status {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Status) => any;
    }
    /**
        * <p>Provides a response when the status of a document could not be retrieved.</p>
        */
    export interface BatchGetDocumentStatusResponseError {
            /**
                * <p>The unique identifier of the document whose status could not be retrieved.</p>
                */
            DocumentId?: string;
            /**
                * <p>Indicates the source of the error.</p>
                */
            ErrorCode?: ErrorCode | string;
            /**
                * <p>States that the API could not get the status of a document. This could be
                *             because the request is not valid or there is a system error.</p>
                */
            ErrorMessage?: string;
    }
    export namespace BatchGetDocumentStatusResponseError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetDocumentStatusResponseError) => any;
    }
    export interface BatchGetDocumentStatusResponse {
            /**
                * <p>A list of documents that Amazon Kendra couldn't get the status for. The
                *             list includes the ID of the document and the reason that the status
                *             couldn't be found.</p>
                */
            Errors?: BatchGetDocumentStatusResponseError[];
            /**
                * <p>The status of documents. The status indicates if the document is
                *             waiting to be indexed, is in the process of indexing, has completed
                *             indexing, or failed indexing. If a document failed indexing, the
                *             status provides the reason why.</p>
                */
            DocumentStatusList?: Status[];
    }
    export namespace BatchGetDocumentStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetDocumentStatusResponse) => any;
    }
    export enum ConditionOperator {
            BeginsWith = "BeginsWith",
            Contains = "Contains",
            Equals = "Equals",
            Exists = "Exists",
            GreaterThan = "GreaterThan",
            GreaterThanOrEquals = "GreaterThanOrEquals",
            LessThan = "LessThan",
            LessThanOrEquals = "LessThanOrEquals",
            NotContains = "NotContains",
            NotEquals = "NotEquals",
            NotExists = "NotExists"
    }
    /**
        * <p>The condition used for the target document attribute or metadata field when
        *             ingesting documents into Amazon Kendra. You use this with <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_DocumentAttributeTarget.html">DocumentAttributeTarget
        *                 to apply the condition</a>.</p>
        *         <p>For example, you can create the 'Department' target field and have it prefill
        *             department names associated with the documents based on information in the
        *             'Source_URI' field. Set the condition that if the 'Source_URI' field contains
        *             'financial' in its URI value, then prefill the target field 'Department' with
        *             the target value 'Finance' for the document.</p>
        *         <p>Amazon Kendra cannot create a target field if it has not already been created as an
        *             index field. After you create your index field, you can create a document metadata
        *             field using <code>DocumentAttributeTarget</code>. Amazon Kendra then will map your newly
        *             created metadata field to your index field.</p>
        */
    export interface DocumentAttributeCondition {
            /**
                * <p>The identifier of the document attribute used for the condition.</p>
                *         <p>For example, 'Source_URI' could be an identifier for the attribute or metadata
                *             field that contains source URIs associated with the documents.</p>
                *         <p>Amazon Kendra currently does not support <code>_document_body</code> as an attribute
                *             key used for the condition.</p>
                */
            ConditionDocumentAttributeKey: string | undefined;
            /**
                * <p>The condition operator.</p>
                *         <p>For example, you can use 'Contains' to partially match a string.</p>
                */
            Operator: ConditionOperator | string | undefined;
            /**
                * <p>The value used by the operator.</p>
                *         <p>For example, you can specify the value 'financial' for strings in the 'Source_URI'
                *             field that partially match or contain this value.</p>
                */
            ConditionOnValue?: DocumentAttributeValue;
    }
    export namespace DocumentAttributeCondition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentAttributeCondition) => any;
    }
    /**
        * <p>The target document attribute or metadata field you want to alter when ingesting
        *             documents into Amazon Kendra.</p>
        *         <p>For example, you can delete customer identification numbers associated with the
        *             documents, stored in the document metadata field called 'Customer_ID'. You set the
        *             target key as 'Customer_ID' and the deletion flag to <code>TRUE</code>. This
        *             removes all customer ID values in the field 'Customer_ID'. This would scrub
        *             personally identifiable information from each document's metadata.</p>
        *         <p>Amazon Kendra cannot create a target field if it has not already been created as an
        *             index field. After you create your index field, you can create a document metadata
        *             field using <code>DocumentAttributeTarget</code>. Amazon Kendra then will map your newly
        *             created metadata field to your index field.</p>
        *         <p>You can also use this with <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_DocumentAttributeCondition.html">DocumentAttributeCondition</a>.</p>
        */
    export interface DocumentAttributeTarget {
            /**
                * <p>The identifier of the target document attribute or metadata field.</p>
                *         <p>For example, 'Department' could be an identifier for the target attribute or
                *             metadata field that includes the department names associated with the documents.</p>
                */
            TargetDocumentAttributeKey?: string;
            /**
                * <p>
                *             <code>TRUE</code> to delete the existing target value for your specified target
                *             attribute key. You cannot create a target value and set this to <code>TRUE</code>.
                *             To create a target value (<code>TargetDocumentAttributeValue</code>), set this to
                *             <code>FALSE</code>.</p>
                */
            TargetDocumentAttributeValueDeletion?: boolean;
            /**
                * <p>The target value you want to create for the target attribute.</p>
                *         <p>For example, 'Finance' could be the target value for the target attribute key
                *             'Department'.</p>
                */
            TargetDocumentAttributeValue?: DocumentAttributeValue;
    }
    export namespace DocumentAttributeTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentAttributeTarget) => any;
    }
    /**
        * <p>Provides the configuration information for applying basic logic to alter document
        *             metadata and content when ingesting documents into Amazon Kendra. To apply advanced
        *             logic, to go beyond what you can do with basic logic, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_HookConfiguration.html">HookConfiguration</a>.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html">Customizing document metadata
        *                 during the ingestion process</a>.</p>
        */
    export interface InlineCustomDocumentEnrichmentConfiguration {
            /**
                * <p>Configuration of the condition used for the target document attribute or metadata
                *             field when ingesting documents into Amazon Kendra.</p>
                */
            Condition?: DocumentAttributeCondition;
            /**
                * <p>Configuration of the target document attribute or metadata field when ingesting
                *             documents into Amazon Kendra. You can also include a value.</p>
                */
            Target?: DocumentAttributeTarget;
            /**
                * <p>
                *             <code>TRUE</code> to delete content if the condition used for the target
                *             attribute is met.</p>
                */
            DocumentContentDeletion?: boolean;
    }
    export namespace InlineCustomDocumentEnrichmentConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InlineCustomDocumentEnrichmentConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information for invoking a Lambda function in
        *             Lambda to alter document metadata and content when ingesting
        *             documents into Amazon Kendra. You can configure your Lambda function using
        *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_CustomDocumentEnrichmentConfiguration.html">PreExtractionHookConfiguration</a>
        *             if you want to apply advanced alterations on the original or raw documents.
        *             If you want to apply advanced alterations on the Amazon Kendra structured documents,
        *             you must configure your Lambda function using <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_CustomDocumentEnrichmentConfiguration.html">PostExtractionHookConfiguration</a>.
        *             You can only invoke one Lambda function. However, this function can invoke other
        *             functions it requires.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html">Customizing document metadata
        *                 during the ingestion process</a>.</p>
        */
    export interface HookConfiguration {
            /**
                * <p>The condition used for when a Lambda function should be invoked.</p>
                *         <p>For example, you can specify a condition that if there are empty date-time
                *             values, then Amazon Kendra should invoke a function that inserts the current date-time.</p>
                */
            InvocationCondition?: DocumentAttributeCondition;
            /**
                * <p>The Amazon Resource Name (ARN) of a role with permission to run a Lambda function
                *             during ingestion. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html">IAM roles for Amazon Kendra</a>.</p>
                */
            LambdaArn: string | undefined;
            /**
                * <p>Stores the original, raw documents or the structured, parsed
                *             documents before and after altering them. For more information,
                *             see <a href="https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#cde-data-contracts-lambda">Data
                *                 contracts for Lambda functions</a>.</p>
                */
            S3Bucket: string | undefined;
    }
    export namespace HookConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HookConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information for altering document metadata and content
        *             during the document ingestion process.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html">Customizing document metadata
        *                 during the ingestion process</a>.</p>
        */
    export interface CustomDocumentEnrichmentConfiguration {
            /**
                * <p>Configuration information to alter document attributes or metadata fields and
                *             content when ingesting documents into Amazon Kendra.</p>
                */
            InlineConfigurations?: InlineCustomDocumentEnrichmentConfiguration[];
            /**
                * <p>Configuration information for invoking a Lambda function in Lambda
                *             on the original or raw documents before extracting their metadata and text. You can
                *             use a Lambda function to apply advanced logic for creating, modifying, or deleting
                *             document metadata and content. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#advanced-data-manipulation">Advanced
                *                 data manipulation</a>.</p>
                */
            PreExtractionHookConfiguration?: HookConfiguration;
            /**
                * <p>Configuration information for invoking a Lambda function in Lambda
                *             on the structured documents with their metadata and text extracted. You can use a
                *             Lambda function to apply advanced logic for creating, modifying, or deleting document
                *             metadata and content. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#advanced-data-manipulation">Advanced
                *                 data manipulation</a>.</p>
                */
            PostExtractionHookConfiguration?: HookConfiguration;
            /**
                * <p>The Amazon Resource Name (ARN) of a role with permission to run
                *             <code>PreExtractionHookConfiguration</code> and
                *             <code>PostExtractionHookConfiguration</code> for altering document metadata
                *             and content during the document ingestion process. For more information,
                *             see <a href="https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html">IAM roles for
                *                 Amazon Kendra</a>.</p>
                */
            RoleArn?: string;
    }
    export namespace CustomDocumentEnrichmentConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomDocumentEnrichmentConfiguration) => any;
    }
    export enum ReadAccessType {
            ALLOW = "ALLOW",
            DENY = "DENY"
    }
    export enum PrincipalType {
            GROUP = "GROUP",
            USER = "USER"
    }
    /**
        * <p>Provides user and group information for <a href="https://docs.aws.amazon.com/kendra/latest/dg/user-context-filter.html">user context filtering</a>.</p>
        */
    export interface Principal {
            /**
                * <p>The name of the user or group.</p>
                */
            Name: string | undefined;
            /**
                * <p>The type of principal.</p>
                */
            Type: PrincipalType | string | undefined;
            /**
                * <p>Whether to allow or deny document access to the principal.</p>
                */
            Access: ReadAccessType | string | undefined;
            /**
                * <p>The identifier of the data source the principal should
                *             access documents from.</p>
                */
            DataSourceId?: string;
    }
    export namespace Principal {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Principal) => any;
    }
    export enum ContentType {
            HTML = "HTML",
            MS_WORD = "MS_WORD",
            PDF = "PDF",
            PLAIN_TEXT = "PLAIN_TEXT",
            PPT = "PPT"
    }
    /**
        * <p>
        *             Information to define the hierarchy for which documents users should have access to.
        *         </p>
        */
    export interface HierarchicalPrincipal {
            /**
                * <p>A list of <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_Principal.html">principal</a> lists
                *                 that define the hierarchy for which documents users should have access to.
                *                 Each hierarchical list specifies which user or group has allow or deny
                *                 access for each document.</p>
                */
            PrincipalList: Principal[] | undefined;
    }
    export namespace HierarchicalPrincipal {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HierarchicalPrincipal) => any;
    }
    /**
        * <p>A document in an index.</p>
        */
    export interface Document {
            /**
                * <p>A unique identifier of the document in the index.</p>
                *         <p>Note, each document ID must be unique per index. You cannot create a data source
                *             to index your documents with their unique IDs and then use the
                *             <code>BatchPutDocument</code> API to index the same documents, or vice versa. You
                *             can delete a data source and then use the <code>BatchPutDocument</code> API to index
                *             the same documents, or vice versa.</p>
                */
            Id: string | undefined;
            /**
                * <p>The title of the document.</p>
                */
            Title?: string;
            /**
                * <p>The contents of the document. </p>
                *         <p>Documents passed to the <code>Blob</code> parameter must be base64
                *             encoded. Your code might not need to encode the document file bytes
                *             if you're using an Amazon Web Services SDK to call Amazon Kendra APIs. If you are
                *             calling the Amazon Kendra endpoint directly using REST, you must base64
                *             encode the contents before sending.</p>
                */
            Blob?: Uint8Array;
            /**
                * <p>Information required to find a specific file in an Amazon S3
                *             bucket.</p>
                */
            S3Path?: S3Path;
            /**
                * <p>Custom attributes to apply to the document. Use the custom
                *             attributes to provide additional information for searching, to
                *             provide facets for refining searches, and to provide additional
                *             information in the query response.</p>
                *         <p>For example, 'DataSourceId' and 'DataSourceSyncJobId' are custom
                *             attributes that provide information on the synchronization
                *             of documents running on a data source. Note,
                *             'DataSourceSyncJobId' could be an optional custom attribute
                *             as Amazon Kendra will use the ID of a running sync job.</p>
                */
            Attributes?: DocumentAttribute[];
            /**
                * <p>Information on principals (users and/or groups) and which documents
                *             they should have access to. This is useful for user context filtering,
                *             where search results are filtered based on the user or their group
                *             access to documents.</p>
                */
            AccessControlList?: Principal[];
            /**
                * <p>The list of <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_Principal.html">principal</a> lists
                *             that define the hierarchy for which documents users should have access to.</p>
                */
            HierarchicalAccessControlList?: HierarchicalPrincipal[];
            /**
                * <p>The file type of the document in the <code>Blob</code>
                *             field.</p>
                */
            ContentType?: ContentType | string;
            /**
                * <p>The identifier of the access control configuration that you want
                *             to apply to the document.</p>
                */
            AccessControlConfigurationId?: string;
    }
    export namespace Document {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Document) => any;
    }
    export interface BatchPutDocumentRequest {
            /**
                * <p>The identifier of the index to add the documents to. You need to
                *       create the index first using the <code>CreateIndex</code>
                *       API.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of a role that is allowed to run the
                *         <code>BatchPutDocument</code> API. For more information, see
                *         <a href="https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html">IAM
                *           Roles for Amazon Kendra</a>.</p>
                */
            RoleArn?: string;
            /**
                * <p>One or more documents to add to the index.</p>
                *          <p>Documents have the following file size limits.</p>
                *          <ul>
                *             <li>
                *                <p>5 MB total size for inline documents</p>
                *             </li>
                *             <li>
                *                <p>50 MB total size for files from an S3 bucket</p>
                *             </li>
                *             <li>
                *                <p>5 MB extracted text for any file</p>
                *             </li>
                *          </ul>
                *          <p>For more information about file size and transaction per second
                *       quotas, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas</a>.</p>
                */
            Documents: Document[] | undefined;
            /**
                * <p>Configuration information for altering your document metadata and content during
                *             the document ingestion process when you use the <code>BatchPutDocument</code>
                *             API.</p>
                *         <p>For more information on how to create, modify and delete document metadata,
                *             or make other content alterations when you ingest documents into Amazon Kendra, see
                *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html">Customizing
                *                 document metadata during the ingestion process</a>.</p>
                */
            CustomDocumentEnrichmentConfiguration?: CustomDocumentEnrichmentConfiguration;
    }
    export namespace BatchPutDocumentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchPutDocumentRequest) => any;
    }
    /**
        * <p>Provides information about a document that could not be
        *             indexed.</p>
        */
    export interface BatchPutDocumentResponseFailedDocument {
            /**
                * <p>The unique identifier of the document.</p>
                */
            Id?: string;
            /**
                * <p>The type of error that caused the document to fail to be
                *             indexed.</p>
                */
            ErrorCode?: ErrorCode | string;
            /**
                * <p>A description of the reason why the document could not be
                *             indexed.</p>
                */
            ErrorMessage?: string;
    }
    export namespace BatchPutDocumentResponseFailedDocument {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchPutDocumentResponseFailedDocument) => any;
    }
    export interface BatchPutDocumentResponse {
            /**
                * <p>A list of documents that were not added to the index because the
                *       document failed a validation check. Each document contains an error
                *       message that indicates why the document couldn't be added to the
                *       index.</p>
                *          <p>If there was an error adding a document to an index the error is
                *       reported in your Amazon Web Services CloudWatch log. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/cloudwatch-logs.html">Monitoring
                *         Amazon Kendra with Amazon CloudWatch Logs</a>
                *          </p>
                */
            FailedDocuments?: BatchPutDocumentResponseFailedDocument[];
    }
    export namespace BatchPutDocumentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchPutDocumentResponse) => any;
    }
    /**
        * <p></p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    export interface ClearQuerySuggestionsRequest {
            /**
                * <p>The identifier of the index you want to clear query suggestions from.</p>
                */
            IndexId: string | undefined;
    }
    export namespace ClearQuerySuggestionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ClearQuerySuggestionsRequest) => any;
    }
    export interface CreateAccessControlConfigurationRequest {
            /**
                * <p>The identifier of the index to create an access control configuration for
                *             your documents.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>A name for the access control configuration.</p>
                */
            Name: string | undefined;
            /**
                * <p>A description for the access control configuration.</p>
                */
            Description?: string;
            /**
                * <p>Information on principals (users and/or groups) and which documents they
                *             should have access to. This is useful for user context filtering, where
                *             search results are filtered based on the user or their group access to
                *             documents.</p>
                */
            AccessControlList?: Principal[];
            /**
                * <p>The list of <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_Principal.html">principal</a> lists that
                *             define the hierarchy for which documents users should have access to.</p>
                */
            HierarchicalAccessControlList?: HierarchicalPrincipal[];
            /**
                * <p>A token that you provide to identify the request to create an access control
                *             configuration. Multiple calls to the <code>CreateAccessControlConfiguration</code>
                *             API with the same client token will create only one access control configuration.</p>
                */
            ClientToken?: string;
    }
    export namespace CreateAccessControlConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAccessControlConfigurationRequest) => any;
    }
    export interface CreateAccessControlConfigurationResponse {
            /**
                * <p>The identifier of the access control configuration for your documents in an index.</p>
                */
            Id: string | undefined;
    }
    export namespace CreateAccessControlConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAccessControlConfigurationResponse) => any;
    }
    /**
        * <p>Provides the configuration information to connect to Box as
        *             your data source.</p>
        */
    export interface BoxConfiguration {
            /**
                * <p>The identifier of the Box Enterprise platform. You can find the enterprise
                *             ID in the Box Developer Console settings or when you create an app in Box and
                *             download your authentication credentials. For example, <i>801234567</i>.</p>
                */
            EnterpriseId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of an Secrets Manager secret that contains
                *             the key-value pairs required to connect to your Box platform. The secret must
                *             contain a JSON structure with the following keys:</p>
                *         <ul>
                *             <li>
                *                 <p>clientID—The identifier of the client OAuth 2.0 authentication
                *                     application created in Box.</p>
                *             </li>
                *             <li>
                *                 <p>clientSecret—A set of characters known only to the OAuth 2.0
                *                     authentication application created in Box.</p>
                *             </li>
                *             <li>
                *                 <p>publicKeyId—The identifier of the public key contained within an
                *                     identity certificate.</p>
                *             </li>
                *             <li>
                *                 <p>privateKey—A set of characters that make up an encryption key.</p>
                *             </li>
                *             <li>
                *                 <p>passphrase—A set of characters that act like a password.</p>
                *             </li>
                *          </ul>
                *         <p>You create an application in Box to generate the keys or credentials required
                *             for the secret. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-box.html#box-authentication">Authentication
                *                 for a Box data source</a>.</p>
                */
            SecretArn: string | undefined;
            /**
                * <p>
                *             <code>TRUE</code> to use the Slack change log to determine which documents require
                *             updating in the index. Depending on the data source change log's size, it may take
                *             longer for Amazon Kendra to use the change log than to scan all of your
                *             documents.</p>
                */
            UseChangeLog?: boolean;
            /**
                * <p>
                *             <code>TRUE</code> to index comments.</p>
                */
            CrawlComments?: boolean;
            /**
                * <p>
                *             <code>TRUE</code> to index the contents of tasks.</p>
                */
            CrawlTasks?: boolean;
            /**
                * <p>
                *             <code>TRUE</code> to index web links.</p>
                */
            CrawlWebLinks?: boolean;
            /**
                * <p>A
                *             list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or
                *             field names of Box files to Amazon Kendra index field names. To create custom
                *             fields, use the <code>UpdateIndex</code> API before you map to Box fields. For more
                *             information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The Box field names must exist in your Box custom metadata.</p>
                */
            FileFieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes
                *             or field names of Box tasks to Amazon Kendra index field names. To create
                *             custom fields, use the <code>UpdateIndex</code> API before you map to Box fields.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The Box field names must exist in your Box custom metadata.</p>
                */
            TaskFieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes
                *             or field names of Box comments to Amazon Kendra index field names. To create
                *             custom fields, use the <code>UpdateIndex</code> API before you map to Box fields.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The Box field names must exist in your Box custom metadata.</p>
                */
            CommentFieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes
                *             or field names of Box web links to Amazon Kendra index field names. To create
                *             custom fields, use the <code>UpdateIndex</code> API before you map to Box fields.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The Box field names must exist in your Box custom metadata.</p>
                */
            WebLinkFieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of regular expression patterns to include certain files and folders in your
                *             Box platform. Files and folders that match the patterns are included in the index.
                *             Files and folders that don't match the patterns are excluded from the index. If a
                *             file or folder matches both an inclusion and exclusion pattern, the exclusion pattern
                *             takes precedence and the file or folder isn't included in the index.</p>
                */
            InclusionPatterns?: string[];
            /**
                * <p>A list of regular expression patterns to exclude certain files and folders from
                *             your Box platform. Files and folders that match the patterns are excluded from the
                *             index.Files and folders that don't match the patterns are included in the index.
                *             If a file or folder matches both an inclusion and exclusion pattern, the exclusion
                *             pattern takes precedence and the file or folder isn't included in the index.</p>
                */
            ExclusionPatterns?: string[];
            /**
                * <p>Configuration information for an Amazon VPC to connect to your Box. For
                *             more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html">Configuring a VPC</a>.</p>
                */
            VpcConfiguration?: DataSourceVpcConfiguration;
    }
    export namespace BoxConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BoxConfiguration) => any;
    }
    export enum ConfluenceAttachmentFieldName {
            AUTHOR = "AUTHOR",
            CONTENT_TYPE = "CONTENT_TYPE",
            CREATED_DATE = "CREATED_DATE",
            DISPLAY_URL = "DISPLAY_URL",
            FILE_SIZE = "FILE_SIZE",
            ITEM_TYPE = "ITEM_TYPE",
            PARENT_ID = "PARENT_ID",
            SPACE_KEY = "SPACE_KEY",
            SPACE_NAME = "SPACE_NAME",
            URL = "URL",
            VERSION = "VERSION"
    }
    /**
        * <p>Maps attributes or field names of Confluence attachments to Amazon Kendra index field
        *             names. To create custom fields, use the <code>UpdateIndex</code> API before
        *             you map to Confluence fields.
        *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
        *             The Confuence data source field names must exist in your Confluence custom metadata.</p>
        */
    export interface ConfluenceAttachmentToIndexFieldMapping {
            /**
                * <p>The name of the field in the data source. </p>
                *         <p>You must first create the index field using the
                *                 <code>UpdateIndex</code> API. </p>
                */
            DataSourceFieldName?: ConfluenceAttachmentFieldName | string;
            /**
                * <p>The format for date fields in the data source. If the field
                *             specified in <code>DataSourceFieldName</code> is a date field you
                *             must specify the date format. If the field is not a date field, an
                *             exception is thrown.</p>
                */
            DateFieldFormat?: string;
            /**
                * <p>The name of the index field to map to the Confluence data source
                *             field. The index field type must match the Confluence field
                *             type.</p>
                */
            IndexFieldName?: string;
    }
    export namespace ConfluenceAttachmentToIndexFieldMapping {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfluenceAttachmentToIndexFieldMapping) => any;
    }
    /**
        * <p>Configuration of attachment settings for the Confluence data source.
        *             Attachment settings are optional, if you don't specify settings
        *             attachments, Amazon Kendra won't index them.</p>
        */
    export interface ConfluenceAttachmentConfiguration {
            /**
                * <p>
                *             <code>TRUE</code> to index attachments of pages and blogs in Confluence.</p>
                */
            CrawlAttachments?: boolean;
            /**
                * <p>Maps attributes or field names of Confluence attachments to Amazon Kendra index field
                *             names. To create custom fields, use the <code>UpdateIndex</code> API before
                *             you map to Confluence fields.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The Confluence data source field names must exist in your Confluence custom metadata.</p>
                *         <p>If you specify the <code>AttachentFieldMappings</code> parameter, you must specify
                *             at least one field mapping.</p>
                */
            AttachmentFieldMappings?: ConfluenceAttachmentToIndexFieldMapping[];
    }
    export namespace ConfluenceAttachmentConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfluenceAttachmentConfiguration) => any;
    }
    export enum ConfluenceBlogFieldName {
            AUTHOR = "AUTHOR",
            DISPLAY_URL = "DISPLAY_URL",
            ITEM_TYPE = "ITEM_TYPE",
            LABELS = "LABELS",
            PUBLISH_DATE = "PUBLISH_DATE",
            SPACE_KEY = "SPACE_KEY",
            SPACE_NAME = "SPACE_NAME",
            URL = "URL",
            VERSION = "VERSION"
    }
    /**
        * <p>Maps attributes or field names of Confluence blog to Amazon Kendra index field
        *             names. To create custom fields, use the <code>UpdateIndex</code> API before
        *             you map to Confluence fields.
        *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
        *             The Confluence data source field names must exist in your Confluence custom metadata.</p>
        */
    export interface ConfluenceBlogToIndexFieldMapping {
            /**
                * <p>The name of the field in the data source. </p>
                */
            DataSourceFieldName?: ConfluenceBlogFieldName | string;
            /**
                * <p>The format for date fields in the data source. If the field
                *             specified in <code>DataSourceFieldName</code> is a date field you
                *             must specify the date format. If the field is not a date field, an
                *             exception is thrown.</p>
                */
            DateFieldFormat?: string;
            /**
                * <p>The name of the index field to map to the Confluence data source
                *             field. The index field type must match the Confluence field
                *             type.</p>
                */
            IndexFieldName?: string;
    }
    export namespace ConfluenceBlogToIndexFieldMapping {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfluenceBlogToIndexFieldMapping) => any;
    }
    /**
        * <p>Configuration of blog settings for the Confluence data source. Blogs
        *             are always indexed unless filtered from the index by the
        *                 <code>ExclusionPatterns</code> or <code>InclusionPatterns</code>
        *             fields in the <code>ConfluenceConfiguration</code> object.</p>
        */
    export interface ConfluenceBlogConfiguration {
            /**
                * <p>Maps attributes or field names of Confluence blogs to Amazon Kendra index field
                *             names. To create custom fields, use the <code>UpdateIndex</code> API before
                *             you map to Confluence fields.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The Confluence data source field names must exist in your Confluence custom metadata.</p>
                *         <p>If you specify the <code>BlogFieldMappings</code> parameter, you
                *             must specify at least one field mapping.</p>
                */
            BlogFieldMappings?: ConfluenceBlogToIndexFieldMapping[];
    }
    export namespace ConfluenceBlogConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfluenceBlogConfiguration) => any;
    }
    export enum ConfluencePageFieldName {
            AUTHOR = "AUTHOR",
            CONTENT_STATUS = "CONTENT_STATUS",
            CREATED_DATE = "CREATED_DATE",
            DISPLAY_URL = "DISPLAY_URL",
            ITEM_TYPE = "ITEM_TYPE",
            LABELS = "LABELS",
            MODIFIED_DATE = "MODIFIED_DATE",
            PARENT_ID = "PARENT_ID",
            SPACE_KEY = "SPACE_KEY",
            SPACE_NAME = "SPACE_NAME",
            URL = "URL",
            VERSION = "VERSION"
    }
    /**
        * <p>>Maps attributes or field names of Confluence pages to Amazon Kendra index field
        *             names. To create custom fields, use the <code>UpdateIndex</code> API before
        *             you map to Confluence fields.
        *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
        *             The Confluence data source field names must exist in your Confluence custom metadata.</p>
        */
    export interface ConfluencePageToIndexFieldMapping {
            /**
                * <p>The name of the field in the data source.</p>
                */
            DataSourceFieldName?: ConfluencePageFieldName | string;
            /**
                * <p>The format for date fields in the data source. If the field
                *             specified in <code>DataSourceFieldName</code> is a date field you
                *             must specify the date format. If the field is not a date field, an
                *             exception is thrown.</p>
                */
            DateFieldFormat?: string;
            /**
                * <p>The name of the index field to map to the Confluence data source
                *             field. The index field type must match the Confluence field
                *             type.</p>
                */
            IndexFieldName?: string;
    }
    export namespace ConfluencePageToIndexFieldMapping {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfluencePageToIndexFieldMapping) => any;
    }
    /**
        * <p>Configuration of the page settings for the Confluence data source.</p>
        */
    export interface ConfluencePageConfiguration {
            /**
                * <p>Maps attributes or field names of Confluence pages to Amazon Kendra index field
                *             names. To create custom fields, use the <code>UpdateIndex</code> API before
                *             you map to Confluence fields.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The Confluence data source field names must exist in your Confluence custom metadata.</p>
                *         <p>If you specify the <code>PageFieldMappings</code> parameter, you
                *             must specify at least one field mapping.</p>
                */
            PageFieldMappings?: ConfluencePageToIndexFieldMapping[];
    }
    export namespace ConfluencePageConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfluencePageConfiguration) => any;
    }
    export enum ConfluenceSpaceFieldName {
            DISPLAY_URL = "DISPLAY_URL",
            ITEM_TYPE = "ITEM_TYPE",
            SPACE_KEY = "SPACE_KEY",
            URL = "URL"
    }
    /**
        * <p>>Maps attributes or field names of Confluence spaces to Amazon Kendra index field
        *             names. To create custom fields, use the <code>UpdateIndex</code> API before
        *             you map to Confluence fields.
        *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
        *             The Confluence data source field names must exist in your Confluence custom metadata.</p>
        */
    export interface ConfluenceSpaceToIndexFieldMapping {
            /**
                * <p>The name of the field in the data source. </p>
                */
            DataSourceFieldName?: ConfluenceSpaceFieldName | string;
            /**
                * <p>The format for date fields in the data source. If the field
                *             specified in <code>DataSourceFieldName</code> is a date field you
                *             must specify the date format. If the field is not a date field, an
                *             exception is thrown.</p>
                */
            DateFieldFormat?: string;
            /**
                * <p>The name of the index field to map to the Confluence data source
                *             field. The index field type must match the Confluence field
                *             type.</p>
                */
            IndexFieldName?: string;
    }
    export namespace ConfluenceSpaceToIndexFieldMapping {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfluenceSpaceToIndexFieldMapping) => any;
    }
    /**
        * <p>Configuration information for indexing Confluence spaces.</p>
        */
    export interface ConfluenceSpaceConfiguration {
            /**
                * <p>
                *             <code>TRUE</code> to index personal spaces. You can
                *             add restrictions to items in personal spaces. If personal spaces are
                *             indexed, queries without user context information may return
                *             restricted items from a personal space in their results. For more
                *             information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/user-context-filter.html">Filtering on
                *                 user context</a>.</p>
                */
            CrawlPersonalSpaces?: boolean;
            /**
                * <p>
                *             <code>TRUE</code> to index archived spaces.</p>
                */
            CrawlArchivedSpaces?: boolean;
            /**
                * <p>A list of space keys for Confluence spaces. If you include a key,
                *             the blogs, documents, and attachments in the space are indexed.
                *             Spaces that aren't in the list aren't indexed. A space in the list
                *             must exist. Otherwise, Amazon Kendra logs an error when the data source is
                *             synchronized. If a space is in both the <code>IncludeSpaces</code>
                *             and the <code>ExcludeSpaces</code> list, the space is
                *             excluded.</p>
                */
            IncludeSpaces?: string[];
            /**
                * <p>A list of space keys of Confluence spaces. If you include a key,
                *             the blogs, documents, and attachments in the space are not indexed.
                *             If a space is in both the <code>ExcludeSpaces</code> and the
                *                 <code>IncludeSpaces</code> list, the space is excluded.</p>
                */
            ExcludeSpaces?: string[];
            /**
                * <p>Maps attributes or field names of Confluence spaces to Amazon Kendra index field
                *             names. To create custom fields, use the <code>UpdateIndex</code> API before
                *             you map to Confluence fields.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The Confluence data source field names must exist in your Confluence custom metadata.</p>
                *         <p>If you specify the <code>SpaceFieldMappings</code> parameter, you
                *             must specify at least one field mapping.</p>
                */
            SpaceFieldMappings?: ConfluenceSpaceToIndexFieldMapping[];
    }
    export namespace ConfluenceSpaceConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfluenceSpaceConfiguration) => any;
    }
    export enum ConfluenceVersion {
            CLOUD = "CLOUD",
            SERVER = "SERVER"
    }
    /**
        * <p>Provides the configuration information to connect to Confluence
        *             as your data source.</p>
        */
    export interface ConfluenceConfiguration {
            /**
                * <p>The URL of your Confluence instance. Use the full URL of the
                *             server. For example, <i>https://server.example.com:port/</i>.
                *             You can also use an IP address, for example,
                *                 <i>https://192.168.1.113/</i>.</p>
                */
            ServerUrl: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of an Secrets Manager secret
                *             that contains the user name and password required to connect to the
                *             Confluence instance. If you use Confluence cloud, you use a
                *             generated API token as the password. For more information, see
                *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-confluence.html">Using a
                *                 Confluence data source</a>.</p>
                */
            SecretArn: string | undefined;
            /**
                * <p>The version or the type of Confluence installation to connect to.</p>
                */
            Version: ConfluenceVersion | string | undefined;
            /**
                * <p>Configuration information for indexing Confluence spaces.</p>
                */
            SpaceConfiguration?: ConfluenceSpaceConfiguration;
            /**
                * <p>Configuration information for indexing Confluence pages.</p>
                */
            PageConfiguration?: ConfluencePageConfiguration;
            /**
                * <p>Configuration information for indexing Confluence blogs.</p>
                */
            BlogConfiguration?: ConfluenceBlogConfiguration;
            /**
                * <p>Configuration information for indexing attachments to
                *             Confluence blogs and pages.</p>
                */
            AttachmentConfiguration?: ConfluenceAttachmentConfiguration;
            /**
                * <p>Configuration information for an Amazon Virtual Private Cloud to connect to your Confluence.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html">Configuring a VPC</a>.</p>
                */
            VpcConfiguration?: DataSourceVpcConfiguration;
            /**
                * <p>A list of regular expression patterns to include certain blog posts, pages,
                *             spaces, or attachments in your Confluence. Content that matches the patterns are
                *             included in the index. Content that doesn't match the patterns is excluded from
                *             the index. If content matches both an inclusion and exclusion pattern, the
                *             exclusion pattern takes precedence and the content isn't included in the index.</p>
                */
            InclusionPatterns?: string[];
            /**
                * <p>A list of regular expression patterns to exclude certain blog posts, pages,
                *             spaces, or attachments in your Confluence. Content that matches the patterns are
                *             excluded from the index. Content that doesn't match the patterns is included in
                *             the index. If content matches both an inclusion and exclusion pattern, the
                *             exclusion pattern takes precedence and the content isn't included in the index.</p>
                */
            ExclusionPatterns?: string[];
    }
    export namespace ConfluenceConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfluenceConfiguration) => any;
    }
    /**
        * <p>Provides information about how Amazon Kendra should use the columns of
        *             a database in an index.</p>
        */
    export interface ColumnConfiguration {
            /**
                * <p>The column that provides the document's unique identifier.</p>
                */
            DocumentIdColumnName: string | undefined;
            /**
                * <p>The column that contains the contents of the document.</p>
                */
            DocumentDataColumnName: string | undefined;
            /**
                * <p>The column that contains the title of the document.</p>
                */
            DocumentTitleColumnName?: string;
            /**
                * <p>An array of objects that map database column names to the
                *             corresponding fields in an index. You must first create the fields
                *             in the index using the <code>UpdateIndex</code> API.</p>
                */
            FieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>One to five columns that indicate when a document in the database
                *             has changed.</p>
                */
            ChangeDetectingColumns: string[] | undefined;
    }
    export namespace ColumnConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ColumnConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information that's required to connect to a
        *             database.</p>
        */
    export interface ConnectionConfiguration {
            /**
                * <p>The name of the host for the database. Can be either a string
                *             (host.subdomain.domain.tld) or an IPv4 or IPv6 address.</p>
                */
            DatabaseHost: string | undefined;
            /**
                * <p>The port that the database uses for connections.</p>
                */
            DatabasePort: number | undefined;
            /**
                * <p>The name of the database containing the document data.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the table that contains the document data.</p>
                */
            TableName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of credentials stored in Secrets Manager.
                *             The credentials should be a user/password pair. For
                *             more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-database.html">Using a
                *                 Database Data Source</a>. For more information about
                *             Secrets Manager, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html"> What Is
                *                 Secrets Manager</a> in the <i> Secrets Manager
                *                 </i> user guide.</p>
                */
            SecretArn: string | undefined;
    }
    export namespace ConnectionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionConfiguration) => any;
    }
    export enum DatabaseEngineType {
            RDS_AURORA_MYSQL = "RDS_AURORA_MYSQL",
            RDS_AURORA_POSTGRESQL = "RDS_AURORA_POSTGRESQL",
            RDS_MYSQL = "RDS_MYSQL",
            RDS_POSTGRESQL = "RDS_POSTGRESQL"
    }
    export enum QueryIdentifiersEnclosingOption {
            DOUBLE_QUOTES = "DOUBLE_QUOTES",
            NONE = "NONE"
    }
    /**
        * <p>Provides the configuration information to use a SQL
        *             database.</p>
        */
    export interface SqlConfiguration {
            /**
                * <p>Determines whether Amazon Kendra encloses SQL identifiers for tables and
                *             column names in double quotes (") when making a database
                *             query.</p>
                *         <p>By default, Amazon Kendra passes SQL identifiers the way that they are
                *             entered into the data source configuration. It does not change the
                *             case of identifiers or enclose them in quotes.</p>
                *         <p>PostgreSQL internally converts uppercase characters to lower case
                *             characters in identifiers unless they are quoted. Choosing this
                *             option encloses identifiers in quotes so that PostgreSQL does not
                *             convert the character's case.</p>
                *         <p>For MySQL databases, you must enable the <code>ansi_quotes</code>
                *             option when you set this field to <code>DOUBLE_QUOTES</code>.</p>
                */
            QueryIdentifiersEnclosingOption?: QueryIdentifiersEnclosingOption | string;
    }
    export namespace SqlConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SqlConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information to connect to a
        *             index. </p>
        */
    export interface DatabaseConfiguration {
            /**
                * <p>The type of database engine that runs the database.</p>
                */
            DatabaseEngineType: DatabaseEngineType | string | undefined;
            /**
                * <p>Configuration information that's required to connect to a database.</p>
                */
            ConnectionConfiguration: ConnectionConfiguration | undefined;
            /**
                * <p>Provides the configuration information to connect to an Amazon VPC.</p>
                */
            VpcConfiguration?: DataSourceVpcConfiguration;
            /**
                * <p>Information about where the index should get the document
                *             information from the database.</p>
                */
            ColumnConfiguration: ColumnConfiguration | undefined;
            /**
                * <p>Information about the database column that provides information
                *             for user context filtering.</p>
                */
            AclConfiguration?: AclConfiguration;
            /**
                * <p>Provides information about how Amazon Kendra uses quote marks around SQL
                *             identifiers when querying a database data source.</p>
                */
            SqlConfiguration?: SqlConfiguration;
    }
    export namespace DatabaseConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatabaseConfiguration) => any;
    }
    export enum FsxFileSystemType {
            WINDOWS = "WINDOWS"
    }
    /**
        * <p>Provides the configuration information to connect to Amazon FSx as
        *             your data source.</p>
        */
    export interface FsxConfiguration {
            /**
                * <p>The identifier of the Amazon FSx file system.</p>
                *         <p>You can find your file system ID on the file system dashboard in
                *             the Amazon FSx console. For information on how to create a
                *             file system in Amazon FSx console, using Windows File Server
                *             as an example, see <a href="https://docs.aws.amazon.com/fsx/latest/WindowsGuide/getting-started-step1.html">Amazon FSx
                *                 Getting started guide</a>.</p>
                */
            FileSystemId: string | undefined;
            /**
                * <p>The Amazon FSx file system type. Windows is currently the only
                *             supported type.</p>
                */
            FileSystemType: FsxFileSystemType | string | undefined;
            /**
                * <p>Configuration information for an Amazon Virtual Private Cloud to connect
                *             to your Amazon FSx. Your Amazon FSx
                *             instance must reside inside your VPC.</p>
                */
            VpcConfiguration: DataSourceVpcConfiguration | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of an Secrets Manager secret that
                *             contains the key-value pairs required to connect to your Amazon FSx
                *             file system. Windows is currently the only supported type. The secret must
                *             contain a JSON structure with the following keys:</p>
                *         <ul>
                *             <li>
                *                 <p>username—The Active Directory user name, along with the
                *                     Domain Name System (DNS) domain name. For example,
                *                     <i>user@corp.example.com</i>. The Active Directory
                *                     user account must have read and mounting access to the
                *                     Amazon FSx file system for Windows.</p>
                *             </li>
                *             <li>
                *                 <p>password—The password of the Active Directory user account with
                *                     read and mounting access to the Amazon FSx Windows file system.</p>
                *             </li>
                *          </ul>
                */
            SecretArn?: string;
            /**
                * <p>A list of regular expression patterns to include certain files
                *             in your Amazon FSx file system. Files that match the patterns
                *             are included in the index. Files that don't match the patterns are
                *             excluded from the index. If a file matches both an inclusion and
                *             exclusion pattern, the exclusion pattern takes precedence and the file
                *             isn't included in the index.</p>
                */
            InclusionPatterns?: string[];
            /**
                * <p>A list of regular expression patterns to exclude certain files
                *             in your Amazon FSx file system. Files that match the patterns
                *             are excluded from the index. Files that don't match the patterns are
                *             included in the index. If a file matches both an inclusion and exclusion
                *             pattern, the exclusion pattern takes precedence and the file isn't included
                *             in the index.</p>
                */
            ExclusionPatterns?: string[];
            /**
                * <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that
                *             map Amazon FSx data source attributes or field names to Amazon Kendra
                *             index field names. To create custom fields, use the
                *             <code>UpdateIndex</code> API before you map to Amazon FSx fields.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping
                *                 data source fields</a>. The Amazon FSx data source field names
                *             must exist in your Amazon FSx custom metadata.</p>
                */
            FieldMappings?: DataSourceToIndexFieldMapping[];
    }
    export namespace FsxConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FsxConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information to include certain types of GitHub content. You can
        *             configure to index repository files only, or also include issues and pull requests,
        *             comments, and comment attachments.</p>
        */
    export interface GitHubDocumentCrawlProperties {
            /**
                * <p>
                *             <code>TRUE</code> to index all files with a repository.</p>
                */
            CrawlRepositoryDocuments?: boolean;
            /**
                * <p>
                *             <code>TRUE</code> to index all issues within a repository.</p>
                */
            CrawlIssue?: boolean;
            /**
                * <p>
                *             <code>TRUE</code> to index all comments on issues.</p>
                */
            CrawlIssueComment?: boolean;
            /**
                * <p>
                *             <code>TRUE</code> to include all comment attachments for issues.</p>
                */
            CrawlIssueCommentAttachment?: boolean;
            /**
                * <p>
                *             <code>TRUE</code> to index all pull requests within a repository.</p>
                */
            CrawlPullRequest?: boolean;
            /**
                * <p>
                *             <code>TRUE</code> to index all comments on pull requests.</p>
                */
            CrawlPullRequestComment?: boolean;
            /**
                * <p>
                *             <code>TRUE</code> to include all comment attachments for pull requests.</p>
                */
            CrawlPullRequestCommentAttachment?: boolean;
    }
    export namespace GitHubDocumentCrawlProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GitHubDocumentCrawlProperties) => any;
    }
    /**
        * <p>Provides the configuration information to connect to GitHub Enterprise Server (on premises).</p>
        */
    export interface OnPremiseConfiguration {
            /**
                * <p>The GitHub host URL or API endpoint URL. For example,
                *             <i>https://on-prem-host-url/api/v3/</i>
                *          </p>
                */
            HostUrl: string | undefined;
            /**
                * <p>The name of the organization of the GitHub Enterprise Server (in-premise) account you want
                *             to connect to. You can find your organization name by logging into GitHub desktop and
                *             selecting <b>Your organizations</b> under your profile picture dropdown.</p>
                */
            OrganizationName: string | undefined;
            /**
                * <p>The path to the SSL certificate stored in an Amazon S3 bucket.
                *             You use this to connect to GitHub. </p>
                */
            SslCertificateS3Path: S3Path | undefined;
    }
    export namespace OnPremiseConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OnPremiseConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information to connect to GitHub Enterprise Cloud (SaaS).</p>
        */
    export interface SaaSConfiguration {
            /**
                * <p>The name of the organization of the GitHub Enterprise Cloud (SaaS) account you want
                *             to connect to. You can find your organization name by logging into GitHub desktop and
                *             selecting <b>Your organizations</b> under your profile picture dropdown.</p>
                */
            OrganizationName: string | undefined;
            /**
                * <p>The GitHub host URL or API endpoint URL. For example,
                *             <i>https://api.github.com</i>.</p>
                */
            HostUrl: string | undefined;
    }
    export namespace SaaSConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SaaSConfiguration) => any;
    }
    export enum Type {
            ON_PREMISE = "ON_PREMISE",
            SAAS = "SAAS"
    }
    /**
        * <p>Provides the configuration information to connect to GitHub
        *             as your data source.</p>
        */
    export interface GitHubConfiguration {
            /**
                * <p>Configuration information to connect to GitHub Enterprise Cloud (SaaS).</p>
                */
            SaaSConfiguration?: SaaSConfiguration;
            /**
                * <p>Configuration information to connect to GitHub Enterprise Server (on premises).</p>
                */
            OnPremiseConfiguration?: OnPremiseConfiguration;
            /**
                * <p>The type of GitHub service you want to connect to—GitHub Enterprise
                *             Cloud (SaaS) or GitHub Enterprise Server (on premises).</p>
                */
            Type?: Type | string;
            /**
                * <p>The Amazon Resource Name (ARN) of an Secrets Manager secret that contains
                *             the key-value pairs required to connect to your GitHub. The secret must contain
                *             a JSON structure with the following keys:</p>
                *         <ul>
                *             <li>
                *                 <p>githubToken—The access token created in GitHub. For more information
                *                     on creating a token in GitHub, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-github.html#github-authentication">Authentication
                *                         for a GitHub data source</a>.</p>
                *             </li>
                *          </ul>
                */
            SecretArn: string | undefined;
            /**
                * <p>
                *             <code>TRUE</code> to use the GitHub change log to determine which documents require
                *             updating in the index. Depending on the GitHub change log's size, it may take longer
                *             for Amazon Kendra to use the change log than to scan all of your documents in
                *             GitHub.</p>
                */
            UseChangeLog?: boolean;
            /**
                * <p>Configuration information to include certain types of GitHub content. You can
                *             configure to index repository files only, or also include issues and pull requests,
                *             comments, and comment attachments.</p>
                */
            GitHubDocumentCrawlProperties?: GitHubDocumentCrawlProperties;
            /**
                * <p>A list of names of the specific repositories you want to index.</p>
                */
            RepositoryFilter?: string[];
            /**
                * <p>A list of regular expression patterns to include certain folder names in your
                *             GitHub repository or repositories. Folder names that match the patterns are
                *             included in the index. Folder names that don't match the patterns are excluded
                *             from the index. If a folder matches both an inclusion and exclusion pattern, the
                *             exclusion pattern takes precedence and the folder isn't included in the index.</p>
                */
            InclusionFolderNamePatterns?: string[];
            /**
                * <p>A list of regular expression patterns to include certain file types in your
                *             GitHub repository or repositories. File types that match the patterns are
                *             included in the index. File types that don't match the patterns are excluded
                *             from the index. If a file matches both an inclusion and exclusion pattern, the
                *             exclusion pattern takes precedence and the file isn't included in the index.</p>
                */
            InclusionFileTypePatterns?: string[];
            /**
                * <p>A list of regular expression patterns to include certain file names in your
                *             GitHub repository or repositories. File names that match the patterns are
                *             included in the index. File names that don't match the patterns are excluded
                *             from the index. If a file matches both an inclusion and exclusion pattern, the
                *             exclusion pattern takes precedence and the file isn't included in the index.</p>
                */
            InclusionFileNamePatterns?: string[];
            /**
                * <p>A list of regular expression patterns to exclude certain folder names in your
                *             GitHub repository or repositories. Folder names that match the patterns are excluded
                *             from the index. Folder names that don't match the patterns are included in the index.
                *             If a folder matches both an exclusion and inclusion pattern, the exclusion pattern
                *             takes precedence and the folder isn't included in the index.</p>
                */
            ExclusionFolderNamePatterns?: string[];
            /**
                * <p>A list of regular expression patterns to exclude certain file types in your
                *             GitHub repository or repositories. File types that match the patterns are excluded
                *             from the index. File types that don't match the patterns are included in the index.
                *             If a file matches both an exclusion and inclusion pattern, the exclusion pattern
                *             takes precedence and the file isn't included in the index.</p>
                */
            ExclusionFileTypePatterns?: string[];
            /**
                * <p>A list of regular expression patterns to exclude certain file names in your
                *             GitHub repository or repositories. File names that match the patterns are excluded
                *             from the index. File names that don't match the patterns are included in the index.
                *             If a file matches both an exclusion and inclusion pattern, the exclusion pattern
                *             takes precedence and the file isn't included in the index.</p>
                */
            ExclusionFileNamePatterns?: string[];
            /**
                * <p>Configuration information of an Amazon Virtual Private Cloud to connect to your
                *             GitHub. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html">Configuring a VPC</a>.</p>
                */
            VpcConfiguration?: DataSourceVpcConfiguration;
            /**
                * <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map GitHub
                *             repository attributes or field names to Amazon Kendra index field names.
                *             To create custom fields, use the <code>UpdateIndex</code> API before you map to
                *             GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The GitHub data source field names must exist in your GitHub custom metadata.</p>
                */
            GitHubRepositoryConfigurationFieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes
                *             or field names of GitHub commits to Amazon Kendra index field names.
                *             To create custom fields, use the <code>UpdateIndex</code> API before you map to
                *             GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The GitHub data source field names must exist in your GitHub custom metadata.</p>
                */
            GitHubCommitConfigurationFieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes
                *             or field names of GitHub issues to Amazon Kendra index field names.
                *             To create custom fields, use the <code>UpdateIndex</code> API before you map to
                *             GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The GitHub data source field names must exist in your GitHub custom metadata.</p>
                */
            GitHubIssueDocumentConfigurationFieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes
                *             or field names of GitHub issue comments to Amazon Kendra index field names.
                *             To create custom fields, use the <code>UpdateIndex</code> API before you map to
                *             GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The GitHub data source field names must exist in your GitHub custom metadata.</p>
                */
            GitHubIssueCommentConfigurationFieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes
                *             or field names of GitHub issue attachments to Amazon Kendra index field names.
                *             To create custom fields, use the <code>UpdateIndex</code> API before you map to
                *             GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The GitHub data source field names must exist in your GitHub custom metadata.</p>
                */
            GitHubIssueAttachmentConfigurationFieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes
                *             or field names of GitHub pull request comments to Amazon Kendra index field names.
                *             To create custom fields, use the <code>UpdateIndex</code> API before you map to
                *             GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The GitHub data source field names must exist in your GitHub custom metadata.</p>
                */
            GitHubPullRequestCommentConfigurationFieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes
                *             or field names of GitHub pull requests to Amazon Kendra index field names.
                *             To create custom fields, use the <code>UpdateIndex</code> API before you map to
                *             GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The GitHub data source field names must exist in your GitHub custom metadata.</p>
                */
            GitHubPullRequestDocumentConfigurationFieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes
                *             or field names of GitHub pull request attachments to Amazon Kendra index field names.
                *             To create custom fields, use the <code>UpdateIndex</code> API before you map to
                *             GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The GitHub data source field names must exist in your GitHub custom metadata.</p>
                */
            GitHubPullRequestDocumentAttachmentConfigurationFieldMappings?: DataSourceToIndexFieldMapping[];
    }
    export namespace GitHubConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GitHubConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information to connect to
        *             Google Drive as your data source.</p>
        */
    export interface GoogleDriveConfiguration {
            /**
                * <p>The Amazon Resource Name (ARN) of a Secrets Managersecret
                *             that contains the credentials required to connect to Google Drive.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-google-drive.html">Using a Google Workspace Drive data
                *                 source</a>.</p>
                */
            SecretArn: string | undefined;
            /**
                * <p>A list of regular expression patterns to include certain items in your
                *             Google Drive, including shared drives and users' My Drives. Items that
                *             match the patterns are included in the index. Items that
                *             don't match the patterns are excluded from the index. If an item matches both
                *             an inclusion and exclusion pattern, the exclusion pattern takes precedence and the
                *             item isn't included in the index.</p>
                */
            InclusionPatterns?: string[];
            /**
                * <p>A list of regular expression patterns to exclude certain items in your
                *             Google Drive, including shared drives and users' My Drives. Items that
                *             match the patterns are excluded from the index. Items that
                *             don't match the patterns are included in the index. If an item matches both
                *             an inclusion and exclusion pattern, the exclusion pattern takes precedence and the
                *             item isn't included in the index.</p>
                */
            ExclusionPatterns?: string[];
            /**
                * <p>Maps Google Drive data source attributes or field names to Amazon Kendra index
                *             field names. To create custom fields, use the <code>UpdateIndex</code> API before
                *             you map to Google Drive fields.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The Google Drive data source field names must exist in your Google Drive custom metadata.</p>
                */
            FieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of MIME types to exclude from the index. All documents
                *             matching the specified MIME type are excluded. </p>
                *         <p>For a list of MIME types, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-google-drive.html">Using a Google Workspace Drive data
                *                 source</a>.</p>
                */
            ExcludeMimeTypes?: string[];
            /**
                * <p>A list of email addresses of the users. Documents owned by these
                *             users are excluded from the index. Documents shared with excluded
                *             users are indexed unless they are excluded in another way.</p>
                */
            ExcludeUserAccounts?: string[];
            /**
                * <p>A list of identifiers or shared drives to exclude from the index.
                *             All files and folders stored on the shared drive are
                *             excluded.</p>
                */
            ExcludeSharedDrives?: string[];
    }
    export namespace GoogleDriveConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GoogleDriveConfiguration) => any;
    }
    export enum IssueSubEntity {
            ATTACHMENTS = "ATTACHMENTS",
            COMMENTS = "COMMENTS",
            WORKLOGS = "WORKLOGS"
    }
    /**
        * <p>Provides the configuration information to connect to Jira as your
        *             data source.</p>
        */
    export interface JiraConfiguration {
            /**
                * <p>The URL of the Jira account. For example, <i>company.atlassian.net</i>
                *             or <i>https://jira.company.com</i>. You can find your Jira account URL in
                *             the URL of your profile page for Jira desktop.</p>
                */
            JiraAccountUrl: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of a secret in Secrets Manager contains the
                *             key-value pairs required to connect to your Jira data source. The secret must contain a
                *             JSON structure with the following keys:</p>
                *         <ul>
                *             <li>
                *                 <p>jiraId—The Jira username.</p>
                *             </li>
                *             <li>
                *                 <p>jiraCredentials—The Jira API token. For more information on creating an
                *                     API token in Jira, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-jira.html#jira-authentication"> Authentication for a Jira data source</a>.</p>
                *             </li>
                *          </ul>
                */
            SecretArn: string | undefined;
            /**
                * <p>
                *             <code>TRUE</code> to use the Jira change log to determine which documents require updating in the index. Depending on the change log's size, it may take longer for Amazon Kendra to use the change log than to scan all of your documents in Jira.</p>
                */
            UseChangeLog?: boolean;
            /**
                * <p>Specify which projects to crawl in your Jira data source. You can specify
                *             one or more Jira project IDs.</p>
                */
            Project?: string[];
            /**
                * <p>Specify which issue types to crawl in your Jira data source.
                *             You can specify one or more of these options to crawl.</p>
                */
            IssueType?: string[];
            /**
                * <p>Specify which statuses to crawl in your Jira data source.
                *             You can specify one or more of these options to crawl.</p>
                */
            Status?: string[];
            /**
                * <p>Specify whether to crawl comments,
                *             attachments,
                *             and work logs. You can specify one or more of these options.</p>
                */
            IssueSubEntityFilter?: (IssueSubEntity | string)[];
            /**
                * <p>A list of DataSourceToIndexFieldMapping objects that map attributes
                *             or field names of Jira attachments to Amazon Kendra index field names.
                *             To create custom fields, use the UpdateIndex API before you map to Jira
                *             fields. For
                *             more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">
                *                 Mapping data source fields</a>. The Jira data source field names
                *             must exist in your Jira custom metadata.</p>
                */
            AttachmentFieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of DataSourceToIndexFieldMapping objects that map attributes
                *             or field names of Jira comments to Amazon Kendra index field names.
                *             To create custom fields, use the UpdateIndex API before you map to Jira
                *             fields. For
                *             more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">
                *                 Mapping data source fields</a>. The Jira data source field names
                *             must exist in your Jira custom metadata.</p>
                */
            CommentFieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of DataSourceToIndexFieldMapping objects that map attributes
                *             or field names of Jira issues to Amazon Kendra index field names.
                *             To create custom fields, use the UpdateIndex API before you map to Jira
                *             fields. For
                *             more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">
                *                 Mapping data source fields</a>. The Jira data source field names
                *             must exist in your Jira custom metadata.</p>
                */
            IssueFieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of DataSourceToIndexFieldMapping objects that map attributes
                *             or field names of Jira projects to Amazon Kendra index field names.
                *             To create custom fields, use the UpdateIndex API before you map to Jira
                *             fields. For
                *             more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">
                *                 Mapping data source fields</a>. The Jira data source field names
                *             must exist in your Jira custom metadata.</p>
                */
            ProjectFieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of DataSourceToIndexFieldMapping objects that map attributes
                *             or field names of Jira work logs to Amazon Kendra index field names.
                *             To create custom fields, use the UpdateIndex API before you map to Jira
                *             fields. For
                *             more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">
                *                 Mapping data source fields</a>. The Jira data source field names
                *             must exist in your Jira custom metadata.</p>
                */
            WorkLogFieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of regular expression patterns to include certain file paths,
                *             file
                *             names, and
                *             file types in your Jira data source. Files that match the patterns are included in the
                *             index. Files that don't match the patterns are excluded from the index. If a file
                *             matches both an inclusion pattern and an exclusion pattern, the exclusion pattern takes
                *             precedence and the file isn't included in the index.</p>
                */
            InclusionPatterns?: string[];
            /**
                * <p>A list of regular expression patterns to exclude certain file paths,
                *             file names, and file types
                *             in your Jira data source. Files that match the patterns
                *             are excluded from the index. Files that don’t match the patterns are
                *             included in the index. If a file matches both an inclusion pattern
                *             and an exclusion pattern, the exclusion pattern takes precedence
                *             and the file isn't included in the index.</p>
                */
            ExclusionPatterns?: string[];
            /**
                * <p>Configuration information for an
                *             Amazon Virtual Private Cloud to connect to your Jira. Your Jira
                *             account must reside inside your VPC.</p>
                */
            VpcConfiguration?: DataSourceVpcConfiguration;
    }
    export namespace JiraConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JiraConfiguration) => any;
    }
    /**
        * <p>User accounts whose documents should be indexed.</p>
        */
    export interface OneDriveUsers {
            /**
                * <p>A list of users whose documents should be indexed. Specify the
                *             user names in email format, for example,
                *                 <code>username@tenantdomain</code>. If you need to index the
                *             documents of more than 100 users, use the
                *                 <code>OneDriveUserS3Path</code> field to specify the location of
                *             a file containing a list of users.</p>
                */
            OneDriveUserList?: string[];
            /**
                * <p>The S3 bucket location of a file containing a list of users whose
                *             documents should be indexed.</p>
                */
            OneDriveUserS3Path?: S3Path;
    }
    export namespace OneDriveUsers {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OneDriveUsers) => any;
    }
    /**
        * <p>Provides the configuration information to connect
        *             to OneDrive as your data source.</p>
        */
    export interface OneDriveConfiguration {
            /**
                * <p>The Azure Active Directory domain of the organization. </p>
                */
            TenantDomain: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of an Secrets Managersecret
                *             that contains the user name and password to connect to OneDrive. The
                *             user namd should be the application ID for the OneDrive application,
                *             and the password is the application key for the OneDrive
                *             application.</p>
                */
            SecretArn: string | undefined;
            /**
                * <p>A list of user accounts whose documents should be indexed.</p>
                */
            OneDriveUsers: OneDriveUsers | undefined;
            /**
                * <p>A list of regular expression patterns to include certain documents
                *             in your OneDrive. Documents that match the
                *             patterns are included in the index. Documents that don't match the
                *             patterns are excluded from the index. If a document matches both an
                *             inclusion and exclusion pattern, the exclusion pattern takes
                *             precedence and the document isn't included in the index.</p>
                *         <p>The pattern is applied to the file name.</p>
                */
            InclusionPatterns?: string[];
            /**
                * <p>A list of regular expression patterns to exclude certain documents
                *             in your OneDrive. Documents that match the
                *             patterns are excluded from the index. Documents that don't match the
                *             patterns are included in the index. If a document matches both an
                *             inclusion and exclusion pattern, the exclusion pattern takes
                *             precedence and the document isn't included in the index.</p>
                *         <p>The pattern is applied to the file name.</p>
                */
            ExclusionPatterns?: string[];
            /**
                * <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map OneDrive data
                *             source attributes or field names to Amazon Kendra index field names. To create
                *             custom fields, use the <code>UpdateIndex</code> API before you map to OneDrive fields.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The OneDrive data source field names must exist in your OneDrive custom metadata.</p>
                */
            FieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>
                *             <code>TRUE</code> to disable local groups information.</p>
                */
            DisableLocalGroups?: boolean;
    }
    export namespace OneDriveConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OneDriveConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information to connect to Quip as your data source.</p>
        */
    export interface QuipConfiguration {
            /**
                * <p>The Quip site domain.</p>
                */
            Domain: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of an Secrets Manager secret
                *             that contains the key-value pairs that are required to connect to your
                *             Quip. The secret must contain a JSON structure with the following keys:</p>
                *         <ul>
                *             <li>
                *                 <p>accessToken—The token created in Quip. For more information,
                *                     see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-slack.html#quip-authentication">Authentication
                *                         for a Quip data source</a>.</p>
                *             </li>
                *          </ul>
                */
            SecretArn: string | undefined;
            /**
                * <p>
                *             <code>TRUE</code> to index file comments.</p>
                */
            CrawlFileComments?: boolean;
            /**
                * <p>
                *             <code>TRUE</code> to index the contents of chat rooms.</p>
                */
            CrawlChatRooms?: boolean;
            /**
                * <p>
                *             <code>TRUE</code> to index attachments.</p>
                */
            CrawlAttachments?: boolean;
            /**
                * <p>The identifiers of the Quip folders you want to index.</p>
                */
            FolderIds?: string[];
            /**
                * <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map
                *             attributes or field names of Quip threads to Amazon Kendra index
                *             field names. To create custom fields, use the <code>UpdateIndex</code>
                *             API before you map to Quip fields. For more information, see
                *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping
                *                 data source fields</a>. The Quip field names must exist in your
                *             Quip custom metadata.</p>
                */
            ThreadFieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map
                *             attributes or field names of Quip messages to Amazon Kendra index
                *             field names. To create custom fields, use the <code>UpdateIndex</code>
                *             API before you map to Quip fields. For more information, see
                *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping
                *                 data source fields</a>. The Quip field names must exist in your
                *             Quip custom metadata.</p>
                */
            MessageFieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map
                *             attributes or field names of Quip attachments to Amazon Kendra index
                *             field names. To create custom fields, use the <code>UpdateIndex</code>
                *             API before you map to Quip fields. For more information, see
                *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping
                *                 data source fields</a>. The Quip field names must exist in your
                *             Quip custom metadata.</p>
                */
            AttachmentFieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A list of regular expression patterns to include certain files in your Quip file
                *             system. Files that match the patterns are included in the index. Files that don't match
                *             the patterns are excluded from the index. If a file matches both an inclusion pattern
                *             and an exclusion pattern, the exclusion pattern takes
                *             precedence, and the file isn't included in the index.</p>
                */
            InclusionPatterns?: string[];
            /**
                * <p>A list of regular expression patterns to exclude certain files in your Quip file
                *             system. Files that match the patterns are excluded from the index. Files that don’t
                *             match the patterns are included in the index. If a file matches both an inclusion
                *             pattern and an exclusion pattern, the exclusion pattern takes
                *             precedence, and the file isn't included in the index.</p>
                */
            ExclusionPatterns?: string[];
            /**
                * <p>Configuration information for an Amazon Virtual Private Cloud
                *             (VPC) to connect to your Quip. For more information, see
                *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html">Configuring
                *                 a VPC</a>.</p>
                */
            VpcConfiguration?: DataSourceVpcConfiguration;
    }
    export namespace QuipConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QuipConfiguration) => any;
    }
    /**
        * <p>Document metadata files that contain information such as the
        *             document access control information, source URI, document author,
        *             and custom attributes. Each metadata file contains metadata about a
        *             single document.</p>
        */
    export interface DocumentsMetadataConfiguration {
            /**
                * <p>A prefix used to filter metadata configuration files in the Amazon Web Services S3
                *             bucket. The S3 bucket might contain multiple metadata files. Use
                *                 <code>S3Prefix</code> to include only the desired metadata
                *             files.</p>
                */
            S3Prefix?: string;
    }
    export namespace DocumentsMetadataConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentsMetadataConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information to connect to
        *             an Amazon S3 bucket.</p>
        */
    export interface S3DataSourceConfiguration {
            /**
                * <p>The name of the bucket that contains the documents.</p>
                */
            BucketName: string | undefined;
            /**
                * <p>A list of S3 prefixes for the documents that should be included in
                *             the index.</p>
                */
            InclusionPrefixes?: string[];
            /**
                * <p>A list of glob patterns for documents that should be indexed. If a
                *             document that matches an inclusion pattern also matches an exclusion
                *             pattern, the document is not indexed.</p>
                *         <p>Some <a href="https://docs.aws.amazon.com/cli/latest/reference/s3/#use-of-exclude-and-include-filters">examples</a>
                *             are:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <i>*.txt</i> will include all text files
                *                     in a directory (files with the extension .txt).</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <i>**\/*.txt</i> will include all text
                *                     files in a directory and its subdirectories.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <i>*tax*</i> will include all files in
                *                     a directory that contain 'tax' in the file name, such as 'tax',
                *                     'taxes', 'income_tax'.</p>
                *             </li>
                *          </ul>
                */
            InclusionPatterns?: string[];
            /**
                * <p>A list of glob patterns for documents that should not be indexed.
                *             If a document that matches an inclusion prefix or inclusion pattern
                *             also matches an exclusion pattern, the document is not
                *             indexed.</p>
                *         <p>Some <a href="https://docs.aws.amazon.com/cli/latest/reference/s3/#use-of-exclude-and-include-filters">examples</a>
                *             are:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <i>*.png , *.jpg</i> will exclude
                *                     all PNG and JPEG image files in a directory
                *                     (files with the extensions .png and .jpg).</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <i>*internal*</i> will exclude all
                *                     files in a directory that contain 'internal' in the file name,
                *                     such as 'internal', 'internal_only', 'company_internal'.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <i>**\/*internal*</i> will exclude
                *                     all internal-related files in a directory and its subdirectories.</p>
                *             </li>
                *          </ul>
                */
            ExclusionPatterns?: string[];
            /**
                * <p>Document metadata files that contain information such as the
                *             document access control information, source URI, document author,
                *             and custom attributes. Each metadata file contains metadata about a
                *             single document.</p>
                */
            DocumentsMetadataConfiguration?: DocumentsMetadataConfiguration;
            /**
                * <p>Provides the path to the S3 bucket that contains the user context
                *             filtering files for the data source. For the format of the file, see
                *                 <a href="https://docs.aws.amazon.com/kendra/latest/dg/s3-acl.html">Access control for S3 data sources</a>.</p>
                */
            AccessControlListConfiguration?: AccessControlListConfiguration;
    }
    export namespace S3DataSourceConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3DataSourceConfiguration) => any;
    }
    export enum SalesforceChatterFeedIncludeFilterType {
            ACTIVE_USER = "ACTIVE_USER",
            STANDARD_USER = "STANDARD_USER"
    }
    /**
        * <p>The configuration information for syncing a Salesforce chatter feed. The
        *             contents of the object comes from the Salesforce FeedItem
        *             table.</p>
        */
    export interface SalesforceChatterFeedConfiguration {
            /**
                * <p>The name of the column in the Salesforce FeedItem table that
                *             contains the content to index. Typically this is the
                *                 <code>Body</code> column.</p>
                */
            DocumentDataFieldName: string | undefined;
            /**
                * <p>The name of the column in the Salesforce FeedItem table that
                *             contains the title of the document. This is typically the
                *                 <code>Title</code> column.</p>
                */
            DocumentTitleFieldName?: string;
            /**
                * <p>Maps fields from a Salesforce chatter feed into Amazon Kendra index
                *             fields.</p>
                */
            FieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>Filters the documents in the feed based on status of the user.
                *             When you specify <code>ACTIVE_USERS</code> only documents from users
                *             who have an active account are indexed. When you specify
                *                 <code>STANDARD_USER</code> only documents for Salesforce
                *             standard users are documented. You can specify both.</p>
                */
            IncludeFilterTypes?: (SalesforceChatterFeedIncludeFilterType | string)[];
    }
    export namespace SalesforceChatterFeedConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SalesforceChatterFeedConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information for indexing Salesforce custom
        *             articles.</p>
        */
    export interface SalesforceCustomKnowledgeArticleTypeConfiguration {
            /**
                * <p>The name of the configuration.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the field in the custom knowledge article that
                *             contains the document data to index.</p>
                */
            DocumentDataFieldName: string | undefined;
            /**
                * <p>The name of the field in the custom knowledge article that
                *             contains the document title.</p>
                */
            DocumentTitleFieldName?: string;
            /**
                * <p>Maps attributes or field names of the custom knowledge article to Amazon Kendra
                *             index field names. To create custom fields, use the <code>UpdateIndex</code> API
                *             before you map to Salesforce fields.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The Salesforce data source field names must exist in your Salesforce custom metadata.</p>
                */
            FieldMappings?: DataSourceToIndexFieldMapping[];
    }
    export namespace SalesforceCustomKnowledgeArticleTypeConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SalesforceCustomKnowledgeArticleTypeConfiguration) => any;
    }
    export enum SalesforceKnowledgeArticleState {
            ARCHIVED = "ARCHIVED",
            DRAFT = "DRAFT",
            PUBLISHED = "PUBLISHED"
    }
    /**
        * <p>Provides the configuration information for standard Salesforce
        *             knowledge articles.</p>
        */
    export interface SalesforceStandardKnowledgeArticleTypeConfiguration {
            /**
                * <p>The name of the field that contains the document data to
                *             index.</p>
                */
            DocumentDataFieldName: string | undefined;
            /**
                * <p>The name of the field that contains the document title.</p>
                */
            DocumentTitleFieldName?: string;
            /**
                * <p>Maps attributes or field names of the knowledge article to Amazon Kendra
                *             index field names. To create custom fields, use the <code>UpdateIndex</code> API
                *             before you map to Salesforce fields.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The Salesforce data source field names must exist in your Salesforce custom metadata.</p>
                */
            FieldMappings?: DataSourceToIndexFieldMapping[];
    }
    export namespace SalesforceStandardKnowledgeArticleTypeConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SalesforceStandardKnowledgeArticleTypeConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information for the knowledge article
        *             types that Amazon Kendra indexes. Amazon Kendra indexes standard knowledge
        *             articles and the standard fields of knowledge articles, or the
        *             custom fields of custom knowledge articles, but not both </p>
        */
    export interface SalesforceKnowledgeArticleConfiguration {
            /**
                * <p>Specifies the document states that should be included when
                *             Amazon Kendra indexes knowledge articles. You must specify at least one
                *             state.</p>
                */
            IncludedStates: (SalesforceKnowledgeArticleState | string)[] | undefined;
            /**
                * <p>Configuration information for standard Salesforce
                *             knowledge articles.</p>
                */
            StandardKnowledgeArticleTypeConfiguration?: SalesforceStandardKnowledgeArticleTypeConfiguration;
            /**
                * <p>Configuration information for custom Salesforce knowledge
                *             articles.</p>
                */
            CustomKnowledgeArticleTypeConfigurations?: SalesforceCustomKnowledgeArticleTypeConfiguration[];
    }
    export namespace SalesforceKnowledgeArticleConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SalesforceKnowledgeArticleConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information for processing attachments to
        *             Salesforce standard objects.</p>
        */
    export interface SalesforceStandardObjectAttachmentConfiguration {
            /**
                * <p>The name of the field used for the document title.</p>
                */
            DocumentTitleFieldName?: string;
            /**
                * <p>One or more objects that map fields in attachments to Amazon Kendra
                *             index fields.</p>
                */
            FieldMappings?: DataSourceToIndexFieldMapping[];
    }
    export namespace SalesforceStandardObjectAttachmentConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SalesforceStandardObjectAttachmentConfiguration) => any;
    }
    export enum SalesforceStandardObjectName {
            ACCOUNT = "ACCOUNT",
            CAMPAIGN = "CAMPAIGN",
            CASE = "CASE",
            CONTACT = "CONTACT",
            CONTRACT = "CONTRACT",
            DOCUMENT = "DOCUMENT",
            GROUP = "GROUP",
            IDEA = "IDEA",
            LEAD = "LEAD",
            OPPORTUNITY = "OPPORTUNITY",
            PARTNER = "PARTNER",
            PRICEBOOK = "PRICEBOOK",
            PRODUCT = "PRODUCT",
            PROFILE = "PROFILE",
            SOLUTION = "SOLUTION",
            TASK = "TASK",
            USER = "USER"
    }
    /**
        * <p>Provides the configuration information for indexing a single standard
        *             object.</p>
        */
    export interface SalesforceStandardObjectConfiguration {
            /**
                * <p>The name of the standard object.</p>
                */
            Name: SalesforceStandardObjectName | string | undefined;
            /**
                * <p>The name of the field in the standard object table that contains
                *             the document contents.</p>
                */
            DocumentDataFieldName: string | undefined;
            /**
                * <p>The name of the field in the standard object table that contains
                *             the document title.</p>
                */
            DocumentTitleFieldName?: string;
            /**
                * <p>Maps attributes or field names of the standard object to Amazon Kendra
                *             index field names. To create custom fields, use the <code>UpdateIndex</code> API
                *             before you map to Salesforce fields.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The Salesforce data source field names must exist in your Salesforce custom metadata.</p>
                */
            FieldMappings?: DataSourceToIndexFieldMapping[];
    }
    export namespace SalesforceStandardObjectConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SalesforceStandardObjectConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information to connect to Salesforce
        *             as your data source.</p>
        */
    export interface SalesforceConfiguration {
            /**
                * <p>The instance URL for the Salesforce site that you want to
                *             index.</p>
                */
            ServerUrl: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of an Secrets Managersecret
                *             that contains the key/value pairs required to connect to your
                *             Salesforce instance. The secret must contain a JSON structure with
                *             the following keys:</p>
                *         <ul>
                *             <li>
                *                 <p>authenticationUrl - The OAUTH endpoint that Amazon Kendra
                *                     connects to get an OAUTH token. </p>
                *             </li>
                *             <li>
                *                 <p>consumerKey - The application public key generated when
                *                     you created your Salesforce application.</p>
                *             </li>
                *             <li>
                *                 <p>consumerSecret - The application private key generated
                *                     when you created your Salesforce application.</p>
                *             </li>
                *             <li>
                *                 <p>password - The password associated with the user logging
                *                     in to the Salesforce instance.</p>
                *             </li>
                *             <li>
                *                 <p>securityToken - The token associated with the user account
                *                     logging in to the Salesforce instance.</p>
                *             </li>
                *             <li>
                *                 <p>username - The user name of the user logging in to the
                *                     Salesforce instance.</p>
                *             </li>
                *          </ul>
                */
            SecretArn: string | undefined;
            /**
                * <p>Configuration of the Salesforce standard objects that Amazon Kendra
                *             indexes.</p>
                */
            StandardObjectConfigurations?: SalesforceStandardObjectConfiguration[];
            /**
                * <p>Configuration information for the knowledge article
                *             types that Amazon Kendra indexes. Amazon Kendra indexes standard knowledge
                *             articles and the standard fields of knowledge articles, or the
                *             custom fields of custom knowledge articles, but not both.</p>
                */
            KnowledgeArticleConfiguration?: SalesforceKnowledgeArticleConfiguration;
            /**
                * <p>Configuration information for Salesforce chatter feeds.</p>
                */
            ChatterFeedConfiguration?: SalesforceChatterFeedConfiguration;
            /**
                * <p>Indicates whether Amazon Kendra should index attachments to Salesforce
                *             objects.</p>
                */
            CrawlAttachments?: boolean;
            /**
                * <p>Configuration information for processing attachments to
                *             Salesforce standard objects. </p>
                */
            StandardObjectAttachmentConfiguration?: SalesforceStandardObjectAttachmentConfiguration;
            /**
                * <p>A list of regular expression patterns to include certain documents in your Salesforce.
                *             Documents that match the patterns are included in the index. Documents that
                *             don't match the patterns are excluded from the index. If a document matches both
                *             an inclusion and exclusion pattern, the exclusion pattern takes precedence and the
                *             document isn't included in the index.</p>
                *         <p>The pattern is applied to the name of the attached file.</p>
                */
            IncludeAttachmentFilePatterns?: string[];
            /**
                * <p>A list of regular expression patterns to exclude certain documents in your Salesforce.
                *             Documents that match the patterns are excluded from the index. Documents that
                *             don't match the patterns are included in the index. If a document matches both
                *             an inclusion and exclusion pattern, the exclusion pattern takes precedence and the
                *             document isn't included in the index.</p>
                *         <p>The pattern is applied to the name of the attached file.</p>
                */
            ExcludeAttachmentFilePatterns?: string[];
    }
    export namespace SalesforceConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SalesforceConfiguration) => any;
    }
    export enum ServiceNowAuthenticationType {
            HTTP_BASIC = "HTTP_BASIC",
            OAUTH2 = "OAUTH2"
    }
    /**
        * <p>Provides the configuration information for crawling knowledge articles
        *             in the ServiceNow site.</p>
        */
    export interface ServiceNowKnowledgeArticleConfiguration {
            /**
                * <p>
                *             <code>TRUE</code> to index attachments to knowledge articles.</p>
                */
            CrawlAttachments?: boolean;
            /**
                * <p>A list of regular expression patterns to include certain attachments of knowledge articles in
                *             your ServiceNow. Item that match the patterns are included in the index. Items that
                *             don't match the patterns are excluded from the index. If an item matches both
                *             an inclusion and exclusion pattern, the exclusion pattern takes precedence and the
                *             item isn't included in the index.</p>
                *         <p>The regex is
                *             applied to the field specified in the <code>PatternTargetField</code>.</p>
                */
            IncludeAttachmentFilePatterns?: string[];
            /**
                * <p>A list of regular expression patterns to exclude certain attachments of knowledge articles in
                *             your ServiceNow. Item that match the patterns are excluded from the index. Items that
                *             don't match the patterns are included in the index. If an item matches both
                *             an inclusion and exclusion pattern, the exclusion pattern takes precedence and the
                *             item isn't included in the index.</p>
                *         <p>The regex is
                *             applied to the field specified in the <code>PatternTargetField</code>.</p>
                */
            ExcludeAttachmentFilePatterns?: string[];
            /**
                * <p>The name of the ServiceNow field that is mapped to the index
                *             document contents field in the Amazon Kendra index.</p>
                */
            DocumentDataFieldName: string | undefined;
            /**
                * <p>The name of the ServiceNow field that is mapped to the index
                *             document title field.</p>
                */
            DocumentTitleFieldName?: string;
            /**
                * <p>Maps attributes or field names of knoweldge articles to Amazon Kendra index
                *             field names. To create custom fields, use the <code>UpdateIndex</code> API before
                *             you map to ServiceNow fields.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The ServiceNow data source field names must exist in your ServiceNow custom metadata.</p>
                */
            FieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>A query that selects the knowledge articles to index. The query
                *             can return articles from multiple knowledge bases, and the knowledge
                *             bases can be public or private.</p>
                *         <p>The query string must be one generated by the ServiceNow console.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/servicenow-query.html">Specifying
                *                 documents to index with a query</a>. </p>
                */
            FilterQuery?: string;
    }
    export namespace ServiceNowKnowledgeArticleConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServiceNowKnowledgeArticleConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information for crawling service catalog
        *             items in the ServiceNow site</p>
        */
    export interface ServiceNowServiceCatalogConfiguration {
            /**
                * <p>
                *             <code>TRUE</code> to index attachments to service catalog items.</p>
                */
            CrawlAttachments?: boolean;
            /**
                * <p>A list of regular expression patterns to include certain attachments of catalogs in
                *             your ServiceNow. Item that match the patterns are included in the index. Items that
                *             don't match the patterns are excluded from the index. If an item matches both
                *             an inclusion and exclusion pattern, the exclusion pattern takes precedence and the
                *             item isn't included in the index.</p>
                *         <p>The regex is applied to the file name of the attachment.</p>
                */
            IncludeAttachmentFilePatterns?: string[];
            /**
                * <p>A list of regular expression patterns to exclude certain attachments of catalogs in
                *             your ServiceNow. Item that match the patterns are excluded from the index. Items that
                *             don't match the patterns are included in the index. If an item matches both
                *             an inclusion and exclusion pattern, the exclusion pattern takes precedence and the
                *             item isn't included in the index.</p>
                *         <p>The regex is applied to the file name of the attachment.</p>
                */
            ExcludeAttachmentFilePatterns?: string[];
            /**
                * <p>The name of the ServiceNow field that is mapped to the index
                *             document contents field in the Amazon Kendra index.</p>
                */
            DocumentDataFieldName: string | undefined;
            /**
                * <p>The name of the ServiceNow field that is mapped to the index
                *             document title field.</p>
                */
            DocumentTitleFieldName?: string;
            /**
                * <p>Maps attributes or field names of catalogs to Amazon Kendra index
                *             field names. To create custom fields, use the <code>UpdateIndex</code> API before
                *             you map to ServiceNow fields.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The ServiceNow data source field names must exist in your ServiceNow custom metadata.</p>
                */
            FieldMappings?: DataSourceToIndexFieldMapping[];
    }
    export namespace ServiceNowServiceCatalogConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServiceNowServiceCatalogConfiguration) => any;
    }
    export enum ServiceNowBuildVersionType {
            LONDON = "LONDON",
            OTHERS = "OTHERS"
    }
    /**
        * <p>Provides the configuration information to connect to
        *             ServiceNow as your data source.</p>
        */
    export interface ServiceNowConfiguration {
            /**
                * <p>The ServiceNow instance that the data source connects to. The host
                *             endpoint should look like the following:
                *                 <i>{instance}.service-now.com.</i>
                *          </p>
                */
            HostUrl: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the Secrets Manager secret
                *             that contains the user name and password required to connect to the
                *             ServiceNow instance. You can also provide OAuth authentication credentials
                *             of user name, password, client ID, and client secret. For more information,
                *             see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-servicenow.html#servicenow-authentication">Authentication
                *                 for a ServiceNow data source</a>.</p>
                */
            SecretArn: string | undefined;
            /**
                * <p>The identifier of the release that the ServiceNow host is running.
                *             If the host is not running the <code>LONDON</code> release, use
                *                 <code>OTHERS</code>.</p>
                */
            ServiceNowBuildVersion: ServiceNowBuildVersionType | string | undefined;
            /**
                * <p>Configuration information for crawling knowledge articles
                *             in the ServiceNow site.</p>
                */
            KnowledgeArticleConfiguration?: ServiceNowKnowledgeArticleConfiguration;
            /**
                * <p>Configuration information for crawling service catalogs
                *             in the ServiceNow site.</p>
                */
            ServiceCatalogConfiguration?: ServiceNowServiceCatalogConfiguration;
            /**
                * <p>The type of authentication used to connect to the
                *             ServiceNow instance. If you choose <code>HTTP_BASIC</code>, Amazon Kendra is
                *             authenticated using the user name and password provided in the
                *             Secrets Manager secret in the <code>SecretArn</code> field. If you
                *             choose <code>OAUTH2</code>, Amazon Kendra is authenticated using the
                *             credentials of client ID, client secret, user name and password.</p>
                *         <p>When you use <code>OAUTH2</code> authentication, you must generate
                *             a token and a client secret using the ServiceNow console. For more
                *             information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-servicenow.html">Using a
                *                 ServiceNow data source</a>.</p>
                */
            AuthenticationType?: ServiceNowAuthenticationType | string;
    }
    export namespace ServiceNowConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServiceNowConfiguration) => any;
    }
    export enum SharePointVersion {
            SHAREPOINT_2013 = "SHAREPOINT_2013",
            SHAREPOINT_2016 = "SHAREPOINT_2016",
            SHAREPOINT_ONLINE = "SHAREPOINT_ONLINE"
    }
    /**
        * <p>Provides the configuration information to connect to Microsoft
        *             SharePoint as your data source.</p>
        */
    export interface SharePointConfiguration {
            /**
                * <p>The version of Microsoft SharePoint that you use.</p>
                */
            SharePointVersion: SharePointVersion | string | undefined;
            /**
                * <p>The Microsoft SharePoint site URLs for the documents you want to indext.</p>
                */
            Urls: string[] | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of an Secrets Manager
                *             secret that contains the user name and password required to
                *             connect to the SharePoint instance.
                *             If you use SharePoint Server, you also need to provide the sever
                *             domain name as part of the credentials. For
                *             more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-sharepoint.html">Using a
                *                 Microsoft SharePoint Data Source</a>.</p>
                */
            SecretArn: string | undefined;
            /**
                * <p>
                *             <code>TRUE</code> to index document attachments.</p>
                */
            CrawlAttachments?: boolean;
            /**
                * <p>
                *             <code>TRUE</code> to use the SharePoint change log to determine which documents
                *             require updating in the index. Depending on the change log's
                *             size, it may take longer for Amazon Kendra to use the change log than to
                *             scan all of your documents in SharePoint.</p>
                */
            UseChangeLog?: boolean;
            /**
                * <p>A list of regular expression patterns to include certain documents in your SharePoint.
                *             Documents that match the patterns are included in the index. Documents that
                *             don't match the patterns are excluded from the index. If a document matches both
                *             an inclusion and exclusion pattern, the exclusion pattern takes precedence and the
                *             document isn't included in the index.</p>
                *         <p>The regex applies to the display URL of the SharePoint
                *             document.</p>
                */
            InclusionPatterns?: string[];
            /**
                * <p>A list of regular expression patterns to exclude certain documents in your SharePoint.
                *             Documents that match the patterns are excluded from the index. Documents that
                *             don't match the patterns are included in the index. If a document matches both
                *             an inclusion and exclusion pattern, the exclusion pattern takes precedence and the
                *             document isn't included in the index.</p>
                *         <p>The regex applies to the display URL of the SharePoint
                *             document.</p>
                */
            ExclusionPatterns?: string[];
            /**
                * <p>Configuration information for an Amazon Virtual Private Cloud to connect
                *             to your Microsoft SharePoint. For more information, see
                *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html">Configuring
                *                 a VPC</a>.</p>
                */
            VpcConfiguration?: DataSourceVpcConfiguration;
            /**
                * <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map SharePoint data
                *             source attributes or field names to Amazon Kendra index field names. To create
                *             custom fields, use the <code>UpdateIndex</code> API before you map to SharePoint fields.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The SharePoint data source field names must exist in your SharePoint custom metadata.</p>
                */
            FieldMappings?: DataSourceToIndexFieldMapping[];
            /**
                * <p>The Microsoft SharePoint attribute field that contains the title
                *             of the document.</p>
                */
            DocumentTitleFieldName?: string;
            /**
                * <p>
                *             <code>TRUE</code> to disable local groups information.</p>
                */
            DisableLocalGroups?: boolean;
            /**
                * <p>The path to the SSL certificate stored in an Amazon S3 bucket. You use
                *             this to connect to SharePoint.</p>
                */
            SslCertificateS3Path?: S3Path;
    }
    export namespace SharePointConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SharePointConfiguration) => any;
    }
    export enum SlackEntity {
            DIRECT_MESSAGE = "DIRECT_MESSAGE",
            GROUP_MESSAGE = "GROUP_MESSAGE",
            PRIVATE_CHANNEL = "PRIVATE_CHANNEL",
            PUBLIC_CHANNEL = "PUBLIC_CHANNEL"
    }
    /**
        * <p>Provides the configuration information to connect to Slack as your
        *             data source.</p>
        */
    export interface SlackConfiguration {
            /**
                * <p>The identifier of the team in the Slack workspace. For example,
                *             <i>T0123456789</i>.</p>
                *         <p>You can find your team ID in the URL of the main page of your Slack workspace.
                *             When you log in to Slack via a browser, you are directed to the URL of the main
                *             page. For example, <i>https://app.slack.com/client/<b>T0123456789</b>/...</i>.</p>
                */
            TeamId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of an Secrets Manager secret that contains
                *             the key-value pairs required to connect to your Slack workspace team. The secret
                *             must contain a JSON structure with the following keys:</p>
                *         <ul>
                *             <li>
                *                 <p>slackToken—The user or bot token created in Slack. For more
                *                     information on creating a token in Slack, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-slack.html#slack-authentication">Authentication
                *                         for a Slack data source</a>.</p>
                *             </li>
                *          </ul>
                */
            SecretArn: string | undefined;
            /**
                * <p>Configuration information for an Amazon Virtual Private Cloud to connect to your Slack.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html">Configuring a VPC</a>.</p>
                */
            VpcConfiguration?: DataSourceVpcConfiguration;
            /**
                * <p>Specify whether to index public channels, private channels, group messages, and
                *             direct messages. You can specify one or more of these options.</p>
                */
            SlackEntityList: (SlackEntity | string)[] | undefined;
            /**
                * <p>
                *             <code>TRUE</code> to use the Slack change log to determine which documents
                *             require updating in the index. Depending on the Slack change log's
                *             size, it may take longer for Amazon Kendra to use the change log than to
                *             scan all of your documents in Slack.</p>
                */
            UseChangeLog?: boolean;
            /**
                * <p>
                *             <code>TRUE</code> to index bot messages from your Slack workspace team.</p>
                */
            CrawlBotMessage?: boolean;
            /**
                * <p>
                *             <code>TRUE</code> to exclude archived messages to index from your Slack
                *             workspace team.</p>
                */
            ExcludeArchived?: boolean;
            /**
                * <p>The date to start crawling your data from your Slack workspace team. The date
                *             must follow this format: <code>yyyy-mm-dd</code>.</p>
                */
            SinceCrawlDate: string | undefined;
            /**
                * <p>The number of hours for change log to look back from when you last synchronized
                *             your data. You can look back up to 7 days or 168 hours.</p>
                *         <p>Change log updates your index only if new content was added since you
                *             last synced your data. Updated or deleted content from before you last synced
                *             does not get updated in your index. To capture updated or deleted content before you
                *             last synced, set the <code>LookBackPeriod</code> to the number of hours you want
                *             change log to look back.</p>
                */
            LookBackPeriod?: number;
            /**
                * <p>The list of private channel names from your Slack workspace team. You use this if
                *             you want to index specific private channels, not all private channels. You can also
                *             use regular expression patterns to filter private channels.</p>
                */
            PrivateChannelFilter?: string[];
            /**
                * <p>The list of public channel names to index from your Slack workspace team. You use
                *             this if you want to index specific public channels, not all public channels. You can
                *             also use regular expression patterns to filter public channels.</p>
                */
            PublicChannelFilter?: string[];
            /**
                * <p>A list of regular expression patterns to include certain attached files in your Slack
                *             workspace team. Files that match the patterns are included in the index. Files that
                *             don't match the patterns are excluded from the index. If a file matches both
                *             an inclusion and exclusion pattern, the exclusion pattern takes precedence and the
                *             file isn't included in the index.</p>
                */
            InclusionPatterns?: string[];
            /**
                * <p>A list of regular expression patterns to exclude certain attached files in your Slack
                *             workspace team. Files that match the patterns are excluded from the index. Files that
                *             don’t match the patterns are included in the index. If a file matches both
                *             an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file
                *             isn't included in the index.</p>
                */
            ExclusionPatterns?: string[];
            /**
                * <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map Slack data
                *             source attributes or field names to Amazon Kendra index field names. To create
                *             custom fields, use the <code>UpdateIndex</code> API before you map to Slack fields.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>.
                *             The Slack data source field names must exist in your Slack custom metadata.</p>
                */
            FieldMappings?: DataSourceToIndexFieldMapping[];
    }
    export namespace SlackConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SlackConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information for a web proxy to connect to
        *             website hosts.</p>
        */
    export interface ProxyConfiguration {
            /**
                * <p>The name of the website host you want to connect to
                *             via a web proxy server.</p>
                *         <p>For example, the host name of https://a.example.com/page1.html
                *             is "a.example.com".</p>
                */
            Host: string | undefined;
            /**
                * <p>The port number of the website host you want to connect
                *             to via a web proxy server. </p>
                *         <p>For example, the port for https://a.example.com/page1.html
                *             is 443, the standard port for HTTPS.</p>
                */
            Port: number | undefined;
            /**
                * <p>Your secret ARN, which you can create in <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html">Secrets Manager</a>
                *          </p>
                *         <p>The credentials are optional. You use a secret if web proxy credentials
                *             are required to connect to a website host. Amazon Kendra currently support basic
                *             authentication to connect to a web proxy server. The secret stores your
                *             credentials.</p>
                */
            Credentials?: string;
    }
    export namespace ProxyConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProxyConfiguration) => any;
    }
    export enum WebCrawlerMode {
            EVERYTHING = "EVERYTHING",
            HOST_ONLY = "HOST_ONLY",
            SUBDOMAINS = "SUBDOMAINS"
    }
    /**
        * <p>Provides the configuration information for the seed or starting point URLs to crawl.</p>
        *         <p>
        *             <i>When selecting websites to index, you must adhere to
        *             the <a href="https://aws.amazon.com/aup/">Amazon Acceptable Use Policy</a>
        *             and all other Amazon terms. Remember that you must only use Amazon Kendra Web
        *             Crawler to index your own webpages, or webpages that you have authorization
        *             to index.</i>
        *          </p>
        */
    export interface SeedUrlConfiguration {
            /**
                * <p>The list of seed or starting point URLs of the
                *             websites you want to crawl.</p>
                *         <p>The list can include a maximum of 100 seed URLs.</p>
                */
            SeedUrls: string[] | undefined;
            /**
                * <p>You can choose one of the following modes:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>HOST_ONLY</code> – crawl only the website host names.
                *                     For example, if the seed URL is "abc.example.com",
                *                     then only URLs with host name "abc.example.com" are crawled.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SUBDOMAINS</code> – crawl the website host names with
                *                     subdomains. For example, if the seed URL is  "abc.example.com", then
                *                     "a.abc.example.com" and "b.abc.example.com" are also crawled.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>EVERYTHING</code> – crawl the website host names with
                *                     subdomains and other domains that the webpages link to.</p>
                *             </li>
                *          </ul>
                *         <p>The default mode is set to <code>HOST_ONLY</code>.</p>
                */
            WebCrawlerMode?: WebCrawlerMode | string;
    }
    export namespace SeedUrlConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SeedUrlConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information for the sitemap URLs to crawl.</p>
        *         <p>
        *             <i>When selecting websites to index, you must adhere to
        *             the <a href="https://aws.amazon.com/aup/">Amazon Acceptable Use Policy</a>
        *             and all other Amazon terms. Remember that you must only use Amazon Kendra Web
        *             Crawler to index your own webpages, or webpages that you have authorization
        *             to index.</i>
        *          </p>
        */
    export interface SiteMapsConfiguration {
            /**
                * <p>The list of sitemap URLs of the websites
                *             you want to crawl.</p>
                *         <p>The list can include a maximum of three sitemap URLs.</p>
                */
            SiteMaps: string[] | undefined;
    }
    export namespace SiteMapsConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SiteMapsConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information of the URLs to crawl.</p>
        *         <p>You can only crawl websites that use the secure communication protocol,
        *             Hypertext Transfer Protocol Secure (HTTPS). If you receive an error when
        *             crawling a website, it could be that the website is blocked from crawling.</p>
        *         <p>
        *             <i>When selecting websites to index, you must adhere to
        *             the <a href="https://aws.amazon.com/aup/">Amazon Acceptable Use Policy</a>
        *             and all other Amazon terms. Remember that you must only use Amazon Kendra Web
        *             Crawler to index your own webpages, or webpages that you have authorization to
        *             index.</i>
        *          </p>
        */
    export interface Urls {
            /**
                * <p>Configuration of the seed or starting point URLs of the websites
                *             you want to crawl.</p>
                *         <p>You can choose to crawl only the website host names, or the website host names
                *             with subdomains, or the website host names with subdomains and other domains
                *             that the webpages link to.</p>
                *         <p>You can list up to 100 seed URLs.</p>
                */
            SeedUrlConfiguration?: SeedUrlConfiguration;
            /**
                * <p>Configuration of the sitemap URLs of the websites you want to crawl.</p>
                *         <p>Only URLs belonging to the same website host names are crawled. You can list up to
                *             three sitemap URLs.</p>
                */
            SiteMapsConfiguration?: SiteMapsConfiguration;
    }
    export namespace Urls {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Urls) => any;
    }
    /**
        * <p>Provides the configuration information required for Amazon Kendra
        *             Web Crawler.</p>
        */
    export interface WebCrawlerConfiguration {
            /**
                * <p>Specifies the seed or starting point URLs of the
                *             websites or the sitemap URLs of the websites you want to crawl.</p>
                *         <p>You can include website subdomains. You can list up to 100 seed
                *             URLs and up to three sitemap URLs.</p>
                *         <p>You can only crawl websites that use the secure communication protocol,
                *             Hypertext Transfer Protocol Secure (HTTPS). If you receive an error when
                *             crawling a website, it could be that the website is blocked from crawling.</p>
                *         <p>
                *             <i>When selecting websites to index, you must adhere to
                *             the <a href="https://aws.amazon.com/aup/">Amazon Acceptable Use Policy</a>
                *             and all other Amazon terms. Remember that you must only use Amazon Kendra
                *             Web Crawler to index your own webpages, or webpages that you have
                *             authorization to index.</i>
                *          </p>
                */
            Urls: Urls | undefined;
            /**
                * <p>Specifies the number of levels in a website that you want to crawl.</p>
                *         <p>The first level begins from the website seed or starting point URL.
                *             For example, if a website has 3 levels – index level (i.e. seed in this
                *             example), sections level, and subsections level – and you are only
                *             interested in crawling information up to the sections level (i.e.
                *             levels 0-1), you can set your depth to 1.</p>
                *         <p>The default crawl depth is set to 2.</p>
                */
            CrawlDepth?: number;
            /**
                * <p>The maximum number of URLs on a webpage to include when crawling a website.
                *             This number is per webpage.</p>
                *             <p>As a website’s webpages are crawled, any URLs the webpages link to are
                *                 also crawled. URLs on a webpage are crawled in order of appearance.</p>
                *         <p>The default maximum links per page is 100.</p>
                */
            MaxLinksPerPage?: number;
            /**
                * <p>The maximum size (in MB) of a webpage or attachment to crawl.</p>
                *         <p>Files larger than this size (in MB) are skipped/not crawled.</p>
                *         <p>The default maximum size of a webpage or attachment is set to 50 MB.</p>
                */
            MaxContentSizePerPageInMegaBytes?: number;
            /**
                * <p>The maximum number of URLs crawled per website host per minute.</p>
                *         <p>A minimum of one URL is required.</p>
                *         <p>The default maximum number of URLs crawled per website host per minute is 300.</p>
                */
            MaxUrlsPerMinuteCrawlRate?: number;
            /**
                * <p>A list of regular expression patterns to include certain URLs to crawl. URLs
                *             that match the patterns are included in the index. URLs that
                *             don't match the patterns are excluded from the index. If a URL matches both
                *             an inclusion and exclusion pattern, the exclusion pattern takes precedence and the
                *             URL file isn't included in the index.</p>
                */
            UrlInclusionPatterns?: string[];
            /**
                * <p>A list of regular expression patterns to exclude certain URLs to crawl. URLs
                *             that match the patterns are excluded from the index. URLs that
                *             don't match the patterns are included in the index. If a URL matches both
                *             an inclusion and exclusion pattern, the exclusion pattern takes precedence and the
                *             URL file isn't included in the index.</p>
                */
            UrlExclusionPatterns?: string[];
            /**
                * <p>Configuration information required to connect to your internal
                *             websites via a web proxy.</p>
                *         <p>You must provide the website host name and port number. For example, the
                *             host name of https://a.example.com/page1.html is "a.example.com" and the
                *             port is 443, the standard port for HTTPS.</p>
                *         <p>Web proxy credentials are optional and you can use them to connect to a
                *             web proxy server that requires basic authentication. To store web proxy
                *             credentials, you use a secret in <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html">Secrets Manager</a>.</p>
                */
            ProxyConfiguration?: ProxyConfiguration;
            /**
                * <p>Configuration information required to connect to websites using
                *             authentication.</p>
                *         <p>You can connect to websites using basic authentication of user name and password.
                *             You use a secret in <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html">Secrets Manager</a> to store
                *             your authentication credentials.</p>
                *         <p>You must provide the website host name and port number. For example, the host name
                *             of https://a.example.com/page1.html is "a.example.com" and the port is 443, the
                *             standard port for HTTPS.</p>
                */
            AuthenticationConfiguration?: AuthenticationConfiguration;
    }
    export namespace WebCrawlerConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WebCrawlerConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information to connect to Amazon WorkDocs
        *             as your data source.</p>
        *         <p>Amazon WorkDocs connector is available in Oregon, North Virginia, Sydney, Singapore and Ireland
        *             regions.</p>
        */
    export interface WorkDocsConfiguration {
            /**
                * <p>The identifier of the directory corresponding to your
                *             Amazon WorkDocs site repository.</p>
                *         <p>You can find the organization ID in the
                *             <a href="https://console.aws.amazon.com/directoryservicev2/">Directory Service</a> by going to
                *             <b>Active Directory</b>, then
                *             <b>Directories</b>. Your Amazon WorkDocs site directory has an
                *             ID, which is the organization ID. You can also set up a new Amazon WorkDocs
                *             directory in the Directory Service console and enable a Amazon WorkDocs site
                *             for the directory in the Amazon WorkDocs console.</p>
                */
            OrganizationId: string | undefined;
            /**
                * <p>
                *             <code>TRUE</code> to include comments on documents
                *             in your index. Including comments in your index means each comment
                *             is a document that can be searched on.</p>
                *         <p>The default is set to <code>FALSE</code>.</p>
                */
            CrawlComments?: boolean;
            /**
                * <p>
                *             <code>TRUE</code> to use the Amazon WorkDocs change log to determine
                *             which documents require updating in the index. Depending on the change log's
                *             size, it may take longer for Amazon Kendra to use the change log than to
                *             scan all of your documents in Amazon WorkDocs.</p>
                */
            UseChangeLog?: boolean;
            /**
                * <p>A list of regular expression patterns to include certain files
                *             in your Amazon WorkDocs site repository. Files that match the patterns
                *             are included in the index. Files that don't match the patterns are
                *             excluded from the index. If a file matches both an inclusion and exclusion
                *             pattern, the exclusion pattern takes precedence and the file isn't included
                *             in the index.</p>
                */
            InclusionPatterns?: string[];
            /**
                * <p>A list of regular expression patterns to exclude certain files
                *             in your Amazon WorkDocs site repository. Files that match the patterns
                *             are excluded from the index. Files that don’t match the patterns
                *             are included in the index. If a file matches both an inclusion and exclusion
                *             pattern, the exclusion pattern takes precedence and the file isn't included
                *             in the index.</p>
                */
            ExclusionPatterns?: string[];
            /**
                * <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that
                *             map Amazon WorkDocs data source attributes or field names to Amazon Kendra
                *             index field names. To create custom fields, use the
                *             <code>UpdateIndex</code> API before you map to Amazon WorkDocs fields.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping
                *                 data source fields</a>. The Amazon WorkDocs data source field names
                *             must exist in your Amazon WorkDocs custom metadata.</p>
                */
            FieldMappings?: DataSourceToIndexFieldMapping[];
    }
    export namespace WorkDocsConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkDocsConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information for an Amazon Kendra data source.</p>
        */
    export interface DataSourceConfiguration {
            /**
                * <p>Provides the configuration information to connect to an Amazon S3
                *             bucket as your data source.</p>
                */
            S3Configuration?: S3DataSourceConfiguration;
            /**
                * <p>Provides the configuration information to connect to Microsoft SharePoint
                *             as your data source.</p>
                */
            SharePointConfiguration?: SharePointConfiguration;
            /**
                * <p>Provides the configuration information to connect to a database as
                *             your data source.</p>
                */
            DatabaseConfiguration?: DatabaseConfiguration;
            /**
                * <p>Provides the configuration information to connect to
                *             Salesforce as your data source.</p>
                */
            SalesforceConfiguration?: SalesforceConfiguration;
            /**
                * <p>Provides the configuration information to connect to Microsoft
                *             OneDrive as your data source.</p>
                */
            OneDriveConfiguration?: OneDriveConfiguration;
            /**
                * <p>Provides the configuration information to connect to ServiceNow
                *             as your data source.</p>
                */
            ServiceNowConfiguration?: ServiceNowConfiguration;
            /**
                * <p>Provides the configuration information to connect to Confluence
                *             as your data source.</p>
                */
            ConfluenceConfiguration?: ConfluenceConfiguration;
            /**
                * <p>Provides the configuration information to connect to Google
                *             Drive as your data source.</p>
                */
            GoogleDriveConfiguration?: GoogleDriveConfiguration;
            /**
                * <p>Provides the configuration information required for Amazon Kendra
                *             Web Crawler.</p>
                */
            WebCrawlerConfiguration?: WebCrawlerConfiguration;
            /**
                * <p>Provides the configuration information to connect to Amazon WorkDocs
                *             as your data source.</p>
                */
            WorkDocsConfiguration?: WorkDocsConfiguration;
            /**
                * <p>Provides the configuration information to connect to Amazon FSx as
                *             your data source.</p>
                */
            FsxConfiguration?: FsxConfiguration;
            /**
                * <p>Provides the configuration information to connect to Slack as your
                *             data source.</p>
                */
            SlackConfiguration?: SlackConfiguration;
            /**
                * <p>Provides the configuration information to connect to Box as your data source.</p>
                */
            BoxConfiguration?: BoxConfiguration;
            /**
                * <p>Provides the configuration information to connect to Quip as your
                *             data source.</p>
                */
            QuipConfiguration?: QuipConfiguration;
            /**
                * <p>Provides the configuration information to connect to Jira as your
                *             data source.</p>
                */
            JiraConfiguration?: JiraConfiguration;
            /**
                * <p>Provides the configuration information to connect to GitHub as
                *             your data source.</p>
                */
            GitHubConfiguration?: GitHubConfiguration;
            /**
                * <p>Provides the configuration information to connect to Alfresco as your
                *             data source.</p>
                */
            AlfrescoConfiguration?: AlfrescoConfiguration;
    }
    export namespace DataSourceConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSourceConfiguration) => any;
    }
    /**
        * <p>A list of key/value pairs that identify an index, FAQ, or data source.
        *       Tag keys and values can consist of Unicode letters, digits, white space,
        *       and any of the following symbols: _ . : / = + - @.</p>
        */
    export interface Tag {
            /**
                * <p>The key for the tag. Keys are not case sensitive and must be unique
                *       for the index, FAQ, or data source.</p>
                */
            Key: string | undefined;
            /**
                * <p>The value associated with the tag. The value may be an empty string
                *       but it can't be null.</p>
                */
            Value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export enum DataSourceType {
            ALFRESCO = "ALFRESCO",
            BOX = "BOX",
            CONFLUENCE = "CONFLUENCE",
            CUSTOM = "CUSTOM",
            DATABASE = "DATABASE",
            FSX = "FSX",
            GITHUB = "GITHUB",
            GOOGLEDRIVE = "GOOGLEDRIVE",
            JIRA = "JIRA",
            ONEDRIVE = "ONEDRIVE",
            QUIP = "QUIP",
            S3 = "S3",
            SALESFORCE = "SALESFORCE",
            SERVICENOW = "SERVICENOW",
            SHAREPOINT = "SHAREPOINT",
            SLACK = "SLACK",
            WEBCRAWLER = "WEBCRAWLER",
            WORKDOCS = "WORKDOCS"
    }
    export interface CreateDataSourceRequest {
            /**
                * <p>A unique name for the data source connector. A data source name can't be changed
                *       without deleting and recreating the data source connector.</p>
                */
            Name: string | undefined;
            /**
                * <p>The identifier of the index you want to use with the data source connector.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>The type of data source repository. For example, <code>SHAREPOINT</code>.</p>
                */
            Type: DataSourceType | string | undefined;
            /**
                * <p>Configuration information to connect to your data source repository.</p>
                *          <p>You can't specify the <code>Configuration</code> parameter when the
                *         <code>Type</code> parameter is set to <code>CUSTOM</code>. If you do,
                *       you receive a <code>ValidationException</code> exception.</p>
                *          <p>The <code>Configuration</code> parameter is required for all other
                *       data sources.</p>
                */
            Configuration?: DataSourceConfiguration;
            /**
                * <p>A description for the data source connector.</p>
                */
            Description?: string;
            /**
                * <p>Sets the frequency for Amazon Kendra to check the documents in your
                *       data source repository and update the index. If you don't set a schedule
                *       Amazon Kendra will not periodically update the index. You can call the
                *         <code>StartDataSourceSyncJob</code> API to update the
                *       index.</p>
                *          <p>You can't specify the <code>Schedule</code> parameter when the
                *         <code>Type</code> parameter is set to <code>CUSTOM</code>. If you do,
                *       you receive a <code>ValidationException</code> exception.</p>
                */
            Schedule?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of a role with permission to access the
                *       data source connector. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html">IAM Roles for
                *         Amazon Kendra</a>.</p>
                *          <p>You can't specify the <code>RoleArn</code> parameter when the
                *         <code>Type</code> parameter is set to <code>CUSTOM</code>. If you do,
                *       you receive a <code>ValidationException</code> exception.</p>
                *          <p>The <code>RoleArn</code> parameter is required for all other data
                *       sources.</p>
                */
            RoleArn?: string;
            /**
                * <p>A list of key-value pairs that identify the data source connector. You can use
                *       the tags to identify and organize your resources and to control access to
                *       resources.</p>
                */
            Tags?: Tag[];
            /**
                * <p>A token that you provide to identify the request to create a data
                *       source connector. Multiple calls to the <code>CreateDataSource</code> API
                *       with the same client token will create only one data source connector.</p>
                */
            ClientToken?: string;
            /**
                * <p>The code for a language. This allows you to support a language for all
                *             documents when creating the data source connector. English is supported
                *             by default. For more information on supported languages, including their codes,
                *             see <a href="https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html">Adding
                *                 documents in languages other than English</a>.</p>
                */
            LanguageCode?: string;
            /**
                * <p>Configuration information for altering document metadata and content during the
                *             document ingestion process.</p>
                *         <p>For more information on how to create, modify and delete document metadata, or make
                *             other content alterations when you ingest documents into Amazon Kendra, see
                *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html">Customizing
                *                 document metadata during the ingestion process</a>.</p>
                */
            CustomDocumentEnrichmentConfiguration?: CustomDocumentEnrichmentConfiguration;
    }
    export namespace CreateDataSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDataSourceRequest) => any;
    }
    export interface CreateDataSourceResponse {
            /**
                * <p>The identifier of the data source connector.</p>
                */
            Id: string | undefined;
    }
    export namespace CreateDataSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDataSourceResponse) => any;
    }
    /**
        * <p>Provides the configuration information for your content sources, such as data sources,
        *             FAQs, and content indexed directly via <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_BatchPutDocument.html">BatchPutDocument</a>.</p>
        */
    export interface ContentSourceConfiguration {
            /**
                * <p>The identifier of the data sources you want to use for your Amazon Kendra experience.</p>
                */
            DataSourceIds?: string[];
            /**
                * <p>The identifier of the FAQs that you want to use for your Amazon Kendra experience.</p>
                */
            FaqIds?: string[];
            /**
                * <p>
                *             <code>TRUE</code> to use documents you indexed directly using the
                *                 <code>BatchPutDocument</code> API.</p>
                */
            DirectPutContent?: boolean;
    }
    export namespace ContentSourceConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContentSourceConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information for the identifiers of your users.</p>
        */
    export interface UserIdentityConfiguration {
            /**
                * <p>The Amazon Web Services SSO field name that contains the identifiers of your users,
                *             such as their emails. This is used for <a href="https://docs.aws.amazon.com/kendra/latest/dg/user-context-filter.html">user context filtering</a>
                *             and for granting access to your Amazon Kendra experience. You must set up Amazon Web Services SSO
                *             with Amazon Kendra. You must include your users and groups in your Access Control List when
                *             you ingest documents into your index. For more information, see
                *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/getting-started-aws-sso.html">Getting
                *                 started with an Amazon Web Services SSO identity source</a>.</p>
                */
            IdentityAttributeName?: string;
    }
    export namespace UserIdentityConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserIdentityConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information for your Amazon Kendra experience. This includes
        *             the data source IDs and/or FAQ IDs, and user or group information to grant access
        *             to your Amazon Kendra experience.</p>
        */
    export interface ExperienceConfiguration {
            /**
                * <p>The identifiers of your data sources and FAQs. Or, you can specify
                *             that you want to use documents indexed via the <code>BatchPutDocument</code>
                *             API. This is the content you want to use for your Amazon Kendra experience.</p>
                */
            ContentSourceConfiguration?: ContentSourceConfiguration;
            /**
                * <p>The Amazon Web Services SSO field name that contains the identifiers of your users,
                *             such as their emails.</p>
                */
            UserIdentityConfiguration?: UserIdentityConfiguration;
    }
    export namespace ExperienceConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperienceConfiguration) => any;
    }
    export interface CreateExperienceRequest {
            /**
                * <p>A name for your Amazon Kendra experience.</p>
                */
            Name: string | undefined;
            /**
                * <p>The identifier of the index for your Amazon Kendra experience.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of a role with permission to access <code>Query</code>
                *             API, <code>QuerySuggestions</code> API, <code>SubmitFeedback</code>
                *             API, and Amazon Web Services SSO that stores your user and group information.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html">IAM roles for Amazon Kendra</a>.</p>
                */
            RoleArn?: string;
            /**
                * <p>Configuration information for your Amazon Kendra experience. This includes
                *             <code>ContentSourceConfiguration</code>, which specifies the data source IDs
                *             and/or FAQ IDs, and <code>UserIdentityConfiguration</code>, which specifies the
                *             user or group information to grant access to your Amazon Kendra experience.</p>
                */
            Configuration?: ExperienceConfiguration;
            /**
                * <p>A description for your Amazon Kendra experience.</p>
                */
            Description?: string;
            /**
                * <p>A token that you provide to identify the request to create your Amazon Kendra experience.
                *             Multiple calls to the <code>CreateExperience</code> API with the same client
                *             token creates only one Amazon Kendra experience.</p>
                */
            ClientToken?: string;
    }
    export namespace CreateExperienceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateExperienceRequest) => any;
    }
    export interface CreateExperienceResponse {
            /**
                * <p>The identifier for your created Amazon Kendra experience.</p>
                */
            Id: string | undefined;
    }
    export namespace CreateExperienceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateExperienceResponse) => any;
    }
    export enum FaqFileFormat {
            CSV = "CSV",
            CSV_WITH_HEADER = "CSV_WITH_HEADER",
            JSON = "JSON"
    }
    export interface CreateFaqRequest {
            /**
                * <p>The identifier of the index for the FAQ.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>A name for the FAQ.</p>
                */
            Name: string | undefined;
            /**
                * <p>A description for the FAQ.</p>
                */
            Description?: string;
            /**
                * <p>The path to the FAQ file in S3.</p>
                */
            S3Path: S3Path | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of a role with permission to access the S3 bucket that
                *             contains the FAQs. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html">IAM Roles for Amazon Kendra</a>.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>A list of key-value pairs that identify the FAQ. You can use the tags to identify and
                *             organize your resources and to control access to resources.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The format of the FAQ input file. You can choose between a basic CSV format, a CSV format
                *             that includes customs attributes in a header, and a JSON format that includes custom
                *             attributes.</p>
                *         <p>The format must match the format of the file stored in the S3 bucket identified in the
                *                 <code>S3Path</code> parameter.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/in-creating-faq.html">Adding questions and
                *             answers</a>.</p>
                */
            FileFormat?: FaqFileFormat | string;
            /**
                * <p>A token that you provide to identify the request to create a FAQ. Multiple calls to
                *             the <code>CreateFaqRequest</code> API with the same client token will create only
                *             one FAQ. </p>
                */
            ClientToken?: string;
            /**
                * <p>The code for a language. This allows you to support a language
                *             for the FAQ document. English is supported by default.
                *             For more information on supported languages, including their codes,
                *             see <a href="https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html">Adding
                *                 documents in languages other than English</a>.</p>
                */
            LanguageCode?: string;
    }
    export namespace CreateFaqRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFaqRequest) => any;
    }
    export interface CreateFaqResponse {
            /**
                * <p>The unique identifier of the FAQ.</p>
                */
            Id?: string;
    }
    export namespace CreateFaqResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFaqResponse) => any;
    }
    export enum IndexEdition {
            DEVELOPER_EDITION = "DEVELOPER_EDITION",
            ENTERPRISE_EDITION = "ENTERPRISE_EDITION"
    }
    /**
        * <p>Provides the identifier of the KMS key used to
        *             encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't
        *             support asymmetric keys.</p>
        */
    export interface ServerSideEncryptionConfiguration {
            /**
                * <p>The identifier of the KMS key. Amazon Kendra
                *             doesn't support asymmetric keys.</p>
                */
            KmsKeyId?: string;
    }
    export namespace ServerSideEncryptionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServerSideEncryptionConfiguration) => any;
    }
    export enum UserContextPolicy {
            ATTRIBUTE_FILTER = "ATTRIBUTE_FILTER",
            USER_TOKEN = "USER_TOKEN"
    }
    export enum UserGroupResolutionMode {
            AWS_SSO = "AWS_SSO",
            NONE = "NONE"
    }
    /**
        * <p>Provides the configuration information to fetch access levels
        *          of groups and users from an Amazon Web Services Single Sign On identity
        *          source. This is useful for user context filtering, where search
        *          results are filtered based on the user or their group access to
        *          documents. You can also use the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_PutPrincipalMapping.html">PutPrincipalMapping</a>
        *          API to map users to their groups so that you only need to provide
        *          the user ID when you issue the query.</p>
        *          <p>To set up an Amazon Web Services SSO identity source in the console to use with
        *          Amazon Kendra, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/getting-started-aws-sso.html">Getting started
        *             with an Amazon Web Services SSO identity source</a>. You must also grant the required
        *          permissions to use Amazon Web Services SSO with Amazon Kendra. For more information, see
        *          <a href="https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html#iam-roles-aws-sso">IAM roles for
        *             Amazon Web Services SSO</a>.</p>
        *          <p>Amazon Kendra currently does not support using <code>UserGroupResolutionConfiguration</code>
        *          with an Amazon Web Services organization member account for your Amazon Web Services SSO
        *          identify source. You must create your index in the management account for the organization
        *          in order to use <code>UserGroupResolutionConfiguration</code>.</p>
        */
    export interface UserGroupResolutionConfiguration {
            /**
                * <p>The identity store provider (mode) you want to use to fetch access levels of groups and
                *          users. Amazon Web Services Single Sign On is currently the only available mode. Your users and groups
                *          must
                *          exist in an Amazon Web Services SSO identity source in order to use this mode.</p>
                */
            UserGroupResolutionMode: UserGroupResolutionMode | string | undefined;
    }
    export namespace UserGroupResolutionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserGroupResolutionConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information for the JSON token type.</p>
        */
    export interface JsonTokenTypeConfiguration {
            /**
                * <p>The user name attribute field.</p>
                */
            UserNameAttributeField: string | undefined;
            /**
                * <p>The group attribute field.</p>
                */
            GroupAttributeField: string | undefined;
    }
    export namespace JsonTokenTypeConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JsonTokenTypeConfiguration) => any;
    }
    export enum KeyLocation {
            SECRET_MANAGER = "SECRET_MANAGER",
            URL = "URL"
    }
    /**
        * <p>Provides the configuration information for the JWT token type.</p>
        */
    export interface JwtTokenTypeConfiguration {
            /**
                * <p>The location of the key.</p>
                */
            KeyLocation: KeyLocation | string | undefined;
            /**
                * <p>The signing key URL.</p>
                */
            URL?: string;
            /**
                * <p>The Amazon Resource Name (arn) of the secret.</p>
                */
            SecretManagerArn?: string;
            /**
                * <p>The user name attribute field.</p>
                */
            UserNameAttributeField?: string;
            /**
                * <p>The group attribute field.</p>
                */
            GroupAttributeField?: string;
            /**
                * <p>The issuer of the token.</p>
                */
            Issuer?: string;
            /**
                * <p>The regular expression that identifies the claim.</p>
                */
            ClaimRegex?: string;
    }
    export namespace JwtTokenTypeConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JwtTokenTypeConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information for a token.</p>
        */
    export interface UserTokenConfiguration {
            /**
                * <p>Information about the JWT token type configuration.</p>
                */
            JwtTokenTypeConfiguration?: JwtTokenTypeConfiguration;
            /**
                * <p>Information about the JSON token type configuration.</p>
                */
            JsonTokenTypeConfiguration?: JsonTokenTypeConfiguration;
    }
    export namespace UserTokenConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserTokenConfiguration) => any;
    }
    export interface CreateIndexRequest {
            /**
                * <p>A name for the index.</p>
                */
            Name: string | undefined;
            /**
                * <p>The Amazon Kendra edition to use for the index. Choose
                *         <code>DEVELOPER_EDITION</code> for indexes intended for development,
                *       testing, or proof of concept. Use <code>ENTERPRISE_EDITION</code> for your
                *       production databases. Once you set the edition for an index, it can't be
                *       changed.</p>
                *          <p>The <code>Edition</code> parameter is optional. If you don't supply a
                *       value, the default is <code>ENTERPRISE_EDITION</code>.</p>
                *          <p>For more information on quota limits for enterprise and developer editions,
                *       see <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas</a>.</p>
                */
            Edition?: IndexEdition | string;
            /**
                * <p>An Identity and Access Management (IAM) role that gives
                *       Amazon Kendra permissions to access your Amazon CloudWatch logs and
                *       metrics. This is also the role you use when you call the
                *         <code>BatchPutDocument</code> API to index documents from an
                *       Amazon S3 bucket.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>The identifier of the KMS customer managed key (CMK) that's
                *       used to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support
                *       asymmetric CMKs.</p>
                */
            ServerSideEncryptionConfiguration?: ServerSideEncryptionConfiguration;
            /**
                * <p>A description for the index.</p>
                */
            Description?: string;
            /**
                * <p>A token that you provide to identify the request to create an index.
                *       Multiple calls to the <code>CreateIndex</code> API with the same
                *       client token will create only one index.</p>
                */
            ClientToken?: string;
            /**
                * <p>A list of key-value pairs that identify the index. You can use the
                *       tags to identify and organize your resources and to control access to
                *       resources.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The user token configuration.</p>
                */
            UserTokenConfigurations?: UserTokenConfiguration[];
            /**
                * <p>The user context policy.</p>
                *          <dl>
                *             <dt>ATTRIBUTE_FILTER</dt>
                *             <dd>
                *                <p>All indexed content is searchable and displayable
                *                   for all users. If you want to filter search results on
                *                   user context, you can use the attribute filters of
                *                   <code>_user_id</code> and <code>_group_ids</code> or
                *                   you can provide user and group information in <code>UserContext</code>.
                *                </p>
                *             </dd>
                *             <dt>USER_TOKEN</dt>
                *             <dd>
                *                <p>Enables token-based user access control to filter
                *                   search results on user context. All documents with no
                *                   access control and all documents accessible to the user
                *                   will be searchable and displayable.
                *                </p>
                *             </dd>
                *          </dl>
                */
            UserContextPolicy?: UserContextPolicy | string;
            /**
                * <p>Enables fetching access levels of groups and users from an Amazon Web Services Single Sign On
                *          identity source. To configure this, see
                *          <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_UserGroupResolutionConfiguration.html">UserGroupResolutionConfiguration</a>.</p>
                */
            UserGroupResolutionConfiguration?: UserGroupResolutionConfiguration;
    }
    export namespace CreateIndexRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateIndexRequest) => any;
    }
    export interface CreateIndexResponse {
            /**
                * <p>The unique identifier of the index. Use this identifier when you query
                *       an index, set up a data source, or index a document.</p>
                */
            Id?: string;
    }
    export namespace CreateIndexResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateIndexResponse) => any;
    }
    export interface CreateQuerySuggestionsBlockListRequest {
            /**
                * <p>The identifier of the index you want to create a query suggestions block list for.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>A user friendly name for the block list.</p>
                *         <p>For example, the block list named 'offensive-words' includes all
                *             offensive words that could appear in user queries and need to be
                *             blocked from suggestions.</p>
                */
            Name: string | undefined;
            /**
                * <p>A user-friendly description for the block list.</p>
                *         <p>For example, the description "List of all offensive words that can
                *             appear in user queries and need to be blocked from suggestions."</p>
                */
            Description?: string;
            /**
                * <p>The S3 path to your block list text file in your S3 bucket.</p>
                *         <p>Each block word or phrase should be on a separate line in a text file.</p>
                *             <p>For information on the current quota limits for block lists, see
                *                 <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas
                *                     for Amazon Kendra</a>.</p>
                */
            SourceS3Path: S3Path | undefined;
            /**
                * <p>A token that you provide to identify the request to create a
                *             query suggestions block list.</p>
                */
            ClientToken?: string;
            /**
                * <p>The IAM (Identity and Access Management) role used by Amazon Kendra to
                *             access the block list text file in your S3 bucket.</p>
                *         <p>You need permissions to the role ARN (Amazon Web Services Resource Name).
                *             The role needs S3 read permissions to your file in S3 and needs
                *             to give STS (Security Token Service) assume role permissions
                *             to Amazon Kendra.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>A tag that you can assign to a block list that categorizes
                *             the block list.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateQuerySuggestionsBlockListRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateQuerySuggestionsBlockListRequest) => any;
    }
    export interface CreateQuerySuggestionsBlockListResponse {
            /**
                * <p>The unique identifier of the created block list.</p>
                */
            Id?: string;
    }
    export namespace CreateQuerySuggestionsBlockListResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateQuerySuggestionsBlockListResponse) => any;
    }
    export interface CreateThesaurusRequest {
            /**
                * <p>The identifier of the index for the thesaurus.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>A name for the thesaurus.</p>
                */
            Name: string | undefined;
            /**
                * <p>A description for the thesaurus.</p>
                */
            Description?: string;
            /**
                * <p>An IAM role that gives Amazon Kendra permissions
                *          to access thesaurus file specified in <code>SourceS3Path</code>.
                *       </p>
                */
            RoleArn: string | undefined;
            /**
                * <p>A list of key-value pairs that identify the thesaurus. You can use
                *          the tags to identify and organize your resources and to control
                *          access to resources.
                *       </p>
                */
            Tags?: Tag[];
            /**
                * <p>The path to the thesaurus file in S3.</p>
                */
            SourceS3Path: S3Path | undefined;
            /**
                * <p>A token that you provide to identify the request to create a
                *          thesaurus. Multiple calls to the <code>CreateThesaurus</code> API
                *          with the same client token will create only one thesaurus.
                *       </p>
                */
            ClientToken?: string;
    }
    export namespace CreateThesaurusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateThesaurusRequest) => any;
    }
    export interface CreateThesaurusResponse {
            /**
                * <p>The unique identifier of the thesaurus.
                *       </p>
                */
            Id?: string;
    }
    export namespace CreateThesaurusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateThesaurusResponse) => any;
    }
    export interface DeleteAccessControlConfigurationRequest {
            /**
                * <p>The identifier of the index for an access control configuration.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>The identifier of the access control configuration you want to delete.</p>
                */
            Id: string | undefined;
    }
    export namespace DeleteAccessControlConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAccessControlConfigurationRequest) => any;
    }
    export interface DeleteAccessControlConfigurationResponse {
    }
    export namespace DeleteAccessControlConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAccessControlConfigurationResponse) => any;
    }
    export interface DeleteDataSourceRequest {
            /**
                * <p>The identifier of the data source you want to delete.</p>
                */
            Id: string | undefined;
            /**
                * <p>The identifier of the index used with the data source.</p>
                */
            IndexId: string | undefined;
    }
    export namespace DeleteDataSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDataSourceRequest) => any;
    }
    export interface DeleteExperienceRequest {
            /**
                * <p>The identifier of your Amazon Kendra experience you want to delete.</p>
                */
            Id: string | undefined;
            /**
                * <p>The identifier of the index for your Amazon Kendra experience.</p>
                */
            IndexId: string | undefined;
    }
    export namespace DeleteExperienceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteExperienceRequest) => any;
    }
    export interface DeleteExperienceResponse {
    }
    export namespace DeleteExperienceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteExperienceResponse) => any;
    }
    export interface DeleteFaqRequest {
            /**
                * <p>The identifier of the FAQ you want to remove.</p>
                */
            Id: string | undefined;
            /**
                * <p>The identifier of the index for the FAQ.</p>
                */
            IndexId: string | undefined;
    }
    export namespace DeleteFaqRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFaqRequest) => any;
    }
    export interface DeleteIndexRequest {
            /**
                * <p>The identifier of the index you want to delete.</p>
                */
            Id: string | undefined;
    }
    export namespace DeleteIndexRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteIndexRequest) => any;
    }
    export interface DeletePrincipalMappingRequest {
            /**
                * <p>The identifier of the index you want to delete a group from.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>The identifier of the data source you want to delete a group from.</p>
                *         <p>A group can be tied to multiple data sources. You can
                *             delete a group from accessing documents in a certain data source. For example,
                *             the groups "Research", "Engineering", and "Sales and Marketing" are all tied to
                *             the company's documents stored in the data sources Confluence and Salesforce.
                *             You want to delete "Research" and "Engineering" groups from Salesforce, so that
                *             these groups cannot access customer-related documents stored in Salesforce.
                *             Only "Sales and Marketing" should access documents in the Salesforce data source.</p>
                */
            DataSourceId?: string;
            /**
                * <p>The identifier of the group you want to delete.</p>
                */
            GroupId: string | undefined;
            /**
                * <p>The timestamp identifier you specify to ensure Amazon Kendra does not
                *             override the latest <code>DELETE</code> action with previous actions.
                *             The highest number ID, which is the ordering ID, is the latest action
                *             you want to process and apply on top of other actions with lower number
                *             IDs. This prevents previous actions with lower number IDs from possibly
                *             overriding the latest action.</p>
                *         <p>The ordering ID can be the UNIX time of the last update you made to a group
                *             members list. You would then provide this list when calling
                *             <code>PutPrincipalMapping</code>. This ensures your <code>DELETE</code> action
                *             for that updated group with the latest members list doesn't get overwritten
                *             by earlier <code>DELETE</code> actions for the same group which are yet to
                *             be processed.</p>
                *         <p>The default ordering ID is the current UNIX time in milliseconds that the
                *             action was received by Amazon Kendra.
                *         </p>
                */
            OrderingId?: number;
    }
    export namespace DeletePrincipalMappingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePrincipalMappingRequest) => any;
    }
    export interface DeleteQuerySuggestionsBlockListRequest {
            /**
                * <p>The identifier of the index for the block list.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>The identifier of the block list you want to delete.</p>
                */
            Id: string | undefined;
    }
    export namespace DeleteQuerySuggestionsBlockListRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteQuerySuggestionsBlockListRequest) => any;
    }
    export interface DeleteThesaurusRequest {
            /**
                * <p>The identifier of the thesaurus you want to delete.</p>
                */
            Id: string | undefined;
            /**
                * <p>The identifier of the index for the thesaurus.</p>
                */
            IndexId: string | undefined;
    }
    export namespace DeleteThesaurusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteThesaurusRequest) => any;
    }
    export interface DescribeAccessControlConfigurationRequest {
            /**
                * <p>The identifier of the index for an access control configuration.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>The identifier of the access control configuration you want to get information on.</p>
                */
            Id: string | undefined;
    }
    export namespace DescribeAccessControlConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccessControlConfigurationRequest) => any;
    }
    export interface DescribeAccessControlConfigurationResponse {
            /**
                * <p>The name for the access control configuration.</p>
                */
            Name: string | undefined;
            /**
                * <p>The description for the access control configuration.</p>
                */
            Description?: string;
            /**
                * <p>The error message containing details if there are issues processing the access
                *             control configuration.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>Information on principals (users and/or groups) and which documents they
                *             should have access to. This is useful for user context filtering, where search
                *             results are filtered based on the user or their group access to documents.</p>
                */
            AccessControlList?: Principal[];
            /**
                * <p>The list of <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_Principal.html">principal</a> lists that
                *             define the hierarchy for which documents users should have access to.</p>
                */
            HierarchicalAccessControlList?: HierarchicalPrincipal[];
    }
    export namespace DescribeAccessControlConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccessControlConfigurationResponse) => any;
    }
    export interface DescribeDataSourceRequest {
            /**
                * <p>The identifier of the data source.</p>
                */
            Id: string | undefined;
            /**
                * <p>The identifier of the index used with the data source.</p>
                */
            IndexId: string | undefined;
    }
    export namespace DescribeDataSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDataSourceRequest) => any;
    }
    export enum DataSourceStatus {
            ACTIVE = "ACTIVE",
            CREATING = "CREATING",
            DELETING = "DELETING",
            FAILED = "FAILED",
            UPDATING = "UPDATING"
    }
    export interface DescribeDataSourceResponse {
            /**
                * <p>The identifier of the data source.</p>
                */
            Id?: string;
            /**
                * <p>The identifier of the index that contains the data source.</p>
                */
            IndexId?: string;
            /**
                * <p>The name that you gave the data source when it was created.</p>
                */
            Name?: string;
            /**
                * <p>The type of the data source.</p>
                */
            Type?: DataSourceType | string;
            /**
                * <p>Configuration details for the data source. This shows how the
                *       data source is configured. The configuration options for a data
                *       source depend on the data source provider.</p>
                */
            Configuration?: DataSourceConfiguration;
            /**
                * <p>The Unix timestamp of when the data source was created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The Unix timestamp of when the data source was last updated.</p>
                */
            UpdatedAt?: Date;
            /**
                * <p>The description for the data source.</p>
                */
            Description?: string;
            /**
                * <p>The current status of the data source. When the status is
                *         <code>ACTIVE</code> the data source is ready to use. When the status is
                *         <code>FAILED</code>, the <code>ErrorMessage</code> field contains the
                *       reason that the data source failed.</p>
                */
            Status?: DataSourceStatus | string;
            /**
                * <p>The schedule for Amazon Kendra to update the index.</p>
                */
            Schedule?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the role that enables the data
                *       source to access its resources.</p>
                */
            RoleArn?: string;
            /**
                * <p>When the <code>Status</code> field value is <code>FAILED</code>, the
                *         <code>ErrorMessage</code> field contains a description of the error that
                *       caused the data source to fail.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>The code for a language. This shows a supported language for all
                *             documents in the data source. English is supported by
                *             default. For more information on supported languages, including their codes,
                *             see <a href="https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html">Adding
                *                 documents in languages other than English</a>.</p>
                */
            LanguageCode?: string;
            /**
                * <p>Configuration information for altering document metadata and content during the
                *             document ingestion process when you describe a data source.</p>
                *         <p>For more information on how to create, modify and delete document metadata, or make
                *             other content alterations when you ingest documents into Amazon Kendra, see
                *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html">Customizing
                *                 document metadata during the ingestion process</a>.</p>
                */
            CustomDocumentEnrichmentConfiguration?: CustomDocumentEnrichmentConfiguration;
    }
    export namespace DescribeDataSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDataSourceResponse) => any;
    }
    export interface DescribeExperienceRequest {
            /**
                * <p>The identifier of your Amazon Kendra experience you want to get information on.</p>
                */
            Id: string | undefined;
            /**
                * <p>The identifier of the index for your Amazon Kendra experience.</p>
                */
            IndexId: string | undefined;
    }
    export namespace DescribeExperienceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeExperienceRequest) => any;
    }
    export enum EndpointType {
            HOME = "HOME"
    }
    /**
        * <p>Provides the configuration information for the endpoint for your Amazon Kendra
        *             experience.</p>
        */
    export interface ExperienceEndpoint {
            /**
                * <p>The type of endpoint for your Amazon Kendra experience. The type currently available
                *             is <code>HOME</code>, which is a unique and fully hosted URL to the home page
                *             of your Amazon Kendra experience.</p>
                */
            EndpointType?: EndpointType | string;
            /**
                * <p>The endpoint of your Amazon Kendra experience.</p>
                */
            Endpoint?: string;
    }
    export namespace ExperienceEndpoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperienceEndpoint) => any;
    }
    export enum ExperienceStatus {
            ACTIVE = "ACTIVE",
            CREATING = "CREATING",
            DELETING = "DELETING",
            FAILED = "FAILED"
    }
    export interface DescribeExperienceResponse {
            /**
                * <p>Shows the identifier of your Amazon Kendra experience.</p>
                */
            Id?: string;
            /**
                * <p>Shows the identifier of the index for your Amazon Kendra experience.</p>
                */
            IndexId?: string;
            /**
                * <p>Shows the name of your Amazon Kendra experience.</p>
                */
            Name?: string;
            /**
                * <p>Shows the endpoint URLs for your Amazon Kendra experiences. The URLs are unique and fully
                *             hosted by Amazon Web Services.</p>
                */
            Endpoints?: ExperienceEndpoint[];
            /**
                * <p>Shows the configuration information for your Amazon Kendra experience. This includes
                *                 <code>ContentSourceConfiguration</code>, which specifies the data source IDs
                *             and/or FAQ IDs, and <code>UserIdentityConfiguration</code>, which specifies the
                *             user or group information to grant access to your Amazon Kendra experience.</p>
                */
            Configuration?: ExperienceConfiguration;
            /**
                * <p>Shows the date-time your Amazon Kendra experience was created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>Shows the date-time your Amazon Kendra experience was last updated.</p>
                */
            UpdatedAt?: Date;
            /**
                * <p>Shows the description for your Amazon Kendra experience.</p>
                */
            Description?: string;
            /**
                * <p>The current processing status of your Amazon Kendra experience. When the status
                *             is <code>ACTIVE</code>, your Amazon Kendra experience is ready to use. When the
                *             status is <code>FAILED</code>, the <code>ErrorMessage</code> field contains
                *             the reason that this failed.</p>
                */
            Status?: ExperienceStatus | string;
            /**
                * <p>Shows the Amazon Resource Name (ARN) of a role with permission to access
                *             <code>Query</code> API, <code>QuerySuggestions</code> API,
                *             <code>SubmitFeedback</code> API, and Amazon Web Services SSO that stores
                *             your user and group information.</p>
                */
            RoleArn?: string;
            /**
                * <p>The reason your Amazon Kendra experience could not properly process.</p>
                */
            ErrorMessage?: string;
    }
    export namespace DescribeExperienceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeExperienceResponse) => any;
    }
    export interface DescribeFaqRequest {
            /**
                * <p>The identifier of the FAQ you want to get information on.</p>
                */
            Id: string | undefined;
            /**
                * <p>The identifier of the index for the FAQ.</p>
                */
            IndexId: string | undefined;
    }
    export namespace DescribeFaqRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFaqRequest) => any;
    }
    export enum FaqStatus {
            ACTIVE = "ACTIVE",
            CREATING = "CREATING",
            DELETING = "DELETING",
            FAILED = "FAILED",
            UPDATING = "UPDATING"
    }
    export interface DescribeFaqResponse {
            /**
                * <p>The identifier of the FAQ.</p>
                */
            Id?: string;
            /**
                * <p>The identifier of the index for the FAQ.</p>
                */
            IndexId?: string;
            /**
                * <p>The name that you gave the FAQ when it was created.</p>
                */
            Name?: string;
            /**
                * <p>The description of the FAQ that you provided when it was created.</p>
                */
            Description?: string;
            /**
                * <p>The date and time that the FAQ was created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The date and time that the FAQ was last updated.</p>
                */
            UpdatedAt?: Date;
            /**
                * <p>Information required to find a specific file in an Amazon S3
                *             bucket.</p>
                */
            S3Path?: S3Path;
            /**
                * <p>The status of the FAQ. It is ready to use when the status is
                *             <code>ACTIVE</code>.</p>
                */
            Status?: FaqStatus | string;
            /**
                * <p>The Amazon Resource Name (ARN) of the role that provides access to the S3 bucket
                *             containing the input files for the FAQ.</p>
                */
            RoleArn?: string;
            /**
                * <p>If the <code>Status</code> field is <code>FAILED</code>, the <code>ErrorMessage</code>
                *             field contains the reason why the FAQ failed.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>The file format used by the input files for the FAQ.</p>
                */
            FileFormat?: FaqFileFormat | string;
            /**
                * <p>The code for a language. This shows a supported language
                *             for the FAQ document. English is supported by default.
                *             For more information on supported languages, including their codes,
                *             see <a href="https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html">Adding
                *                 documents in languages other than English</a>.</p>
                */
            LanguageCode?: string;
    }
    export namespace DescribeFaqResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFaqResponse) => any;
    }
    export interface DescribeIndexRequest {
            /**
                * <p>The identifier of the index you want to get information on.</p>
                */
            Id: string | undefined;
    }
    export namespace DescribeIndexRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeIndexRequest) => any;
    }
    /**
        * <p>Specifies additional capacity units configured for your
        *             Enterprise Edition index. You can add and remove capacity units
        *             to fit your usage requirements.</p>
        */
    export interface CapacityUnitsConfiguration {
            /**
                * <p>The amount of extra storage capacity for an index.
                *             A single capacity unit provides 30 GB of storage space or 100,000 documents,
                *             whichever is reached first. You can add up to 100 extra capacity units.</p>
                */
            StorageCapacityUnits: number | undefined;
            /**
                * <p>The amount of extra query capacity for an index and
                *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_GetQuerySuggestions.html">GetQuerySuggestions</a>
                *             capacity.</p>
                *         <p>A single extra capacity unit for an index provides 0.1 queries per second or approximately
                *             8,000 queries per day. You can add up to 100 extra capacity units.</p>
                *         <p>
                *             <code>GetQuerySuggestions</code> capacity is five times the
                *             provisioned query capacity for an index, or the base capacity of 2.5 calls per second,
                *             whichever is higher. For example, the base capacity for an index is 0.1 queries per
                *             second, and <code>GetQuerySuggestions</code> capacity has a base of 2.5 calls per second.
                *             If you add another 0.1 queries per second to total 0.2 queries per second for an index, the
                *             <code>GetQuerySuggestions</code> capacity is 2.5 calls per second
                *             (higher than five times 0.2 queries per second).</p>
                */
            QueryCapacityUnits: number | undefined;
    }
    export namespace CapacityUnitsConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CapacityUnitsConfiguration) => any;
    }
    export enum Order {
            ASCENDING = "ASCENDING",
            DESCENDING = "DESCENDING"
    }
    /**
        * <p>Provides information for tuning the relevance of a field
        *             in a search. When a query includes terms that match the field, the
        *             results are given a boost in the response based on these tuning
        *             parameters.</p>
        */
    export interface Relevance {
            /**
                * <p>Indicates that this field determines how "fresh" a document is.
                *             For example, if document 1 was created on November 5, and document 2
                *             was created on October 31, document 1 is "fresher" than document 2.
                *             You can only set the <code>Freshness</code> field on one
                *                 <code>DATE</code> type field. Only applies to <code>DATE</code>
                *             fields.</p>
                */
            Freshness?: boolean;
            /**
                * <p>The relative importance of the field in the search. Larger numbers
                *             provide more of a boost than smaller numbers.</p>
                */
            Importance?: number;
            /**
                * <p>Specifies the time period that the boost applies to. For example,
                *             to make the boost apply to documents with the field value within the
                *             last month, you would use "2628000s". Once the field value is beyond
                *             the specified range, the effect of the boost drops off. The higher
                *             the importance, the faster the effect drops off. If you don't
                *             specify a value, the default is 3 months. The value of the field is
                *             a numeric string followed by the character "s", for example "86400s"
                *             for one day, or "604800s" for one week. </p>
                *         <p>Only applies to <code>DATE</code> fields.</p>
                */
            Duration?: string;
            /**
                * <p>Determines how values should be interpreted.</p>
                *         <p>When the <code>RankOrder</code> field is <code>ASCENDING</code>,
                *             higher numbers are better. For example, a document with a rating
                *             score of 10 is higher ranking than a document with a rating score of
                *             1.</p>
                *         <p>When the <code>RankOrder</code> field is <code>DESCENDING</code>,
                *             lower numbers are better. For example, in a task tracking
                *             application, a priority 1 task is more important than a priority 5
                *             task.</p>
                *         <p>Only applies to <code>LONG</code> and <code>DOUBLE</code>
                *             fields.</p>
                */
            RankOrder?: Order | string;
            /**
                * <p>A list of values that should be given a different boost when they
                *             appear in the result list. For example, if you are boosting a field
                *             called "department," query terms that match the department field are
                *             boosted in the result. However, you can add entries from the
                *             department field to boost documents with those values higher. </p>
                *         <p>For example, you can add entries to the map with names of
                *             departments. If you add "HR",5 and "Legal",3 those departments are
                *             given special attention when they appear in the metadata of a
                *             document. When those terms appear they are given the specified
                *             importance instead of the regular importance for the boost.</p>
                */
            ValueImportanceMap?: Record<string, number>;
    }
    export namespace Relevance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Relevance) => any;
    }
    /**
        * <p>Provides information about how a custom index field is used during
        *             a search.</p>
        */
    export interface Search {
            /**
                * <p>Indicates that the field can be used to create search facets, a
                *             count of results for each value in the field. The default is
                *                 <code>false</code> .</p>
                */
            Facetable?: boolean;
            /**
                * <p>Determines whether the field is used in the search. If the
                *                 <code>Searchable</code> field is <code>true</code>, you can use
                *             relevance tuning to manually tune how Amazon Kendra weights the field in
                *             the search. The default is <code>true</code> for string fields and
                *                 <code>false</code> for number and date fields.</p>
                */
            Searchable?: boolean;
            /**
                * <p>Determines whether the field is returned in the query response.
                *             The default is <code>true</code>.</p>
                */
            Displayable?: boolean;
            /**
                * <p>Determines whether the field can be used to sort the results of a
                *             query. If you specify sorting on a field that does not have
                *                 <code>Sortable</code> set to <code>true</code>, Amazon Kendra returns an
                *             exception. The default is <code>false</code>.</p>
                */
            Sortable?: boolean;
    }
    export namespace Search {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Search) => any;
    }
    export enum DocumentAttributeValueType {
            DATE_VALUE = "DATE_VALUE",
            LONG_VALUE = "LONG_VALUE",
            STRING_LIST_VALUE = "STRING_LIST_VALUE",
            STRING_VALUE = "STRING_VALUE"
    }
    /**
        * <p>Specifies the properties, such as relevance tuning
        *             and searchability, of an index field.</p>
        */
    export interface DocumentMetadataConfiguration {
            /**
                * <p>The name of the index field.</p>
                */
            Name: string | undefined;
            /**
                * <p>The data type of the index field. </p>
                */
            Type: DocumentAttributeValueType | string | undefined;
            /**
                * <p>Provides tuning parameters to determine how the field
                *             affects the search results.</p>
                */
            Relevance?: Relevance;
            /**
                * <p>Provides information about how the field is used during a
                *             search.</p>
                */
            Search?: Search;
    }
    export namespace DocumentMetadataConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentMetadataConfiguration) => any;
    }
    /**
        * <p>Provides statistical information about the FAQ questions and
        *             answers contained in an index.</p>
        */
    export interface FaqStatistics {
            /**
                * <p>The total number of FAQ questions and answers contained in the
                *             index.</p>
                */
            IndexedQuestionAnswersCount: number | undefined;
    }
    export namespace FaqStatistics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FaqStatistics) => any;
    }
    /**
        * <p>Provides information about text documents indexed in an
        *             index.</p>
        */
    export interface TextDocumentStatistics {
            /**
                * <p>The number of text documents indexed.</p>
                */
            IndexedTextDocumentsCount: number | undefined;
            /**
                * <p>The total size, in bytes, of the indexed documents.</p>
                */
            IndexedTextBytes: number | undefined;
    }
    export namespace TextDocumentStatistics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TextDocumentStatistics) => any;
    }
    /**
        * <p>Provides information about the number of documents and the number
        *             of questions and answers in an index.</p>
        */
    export interface IndexStatistics {
            /**
                * <p>The number of question and answer topics in the index.</p>
                */
            FaqStatistics: FaqStatistics | undefined;
            /**
                * <p>The number of text documents indexed.</p>
                */
            TextDocumentStatistics: TextDocumentStatistics | undefined;
    }
    export namespace IndexStatistics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IndexStatistics) => any;
    }
    export enum IndexStatus {
            ACTIVE = "ACTIVE",
            CREATING = "CREATING",
            DELETING = "DELETING",
            FAILED = "FAILED",
            SYSTEM_UPDATING = "SYSTEM_UPDATING",
            UPDATING = "UPDATING"
    }
    export interface DescribeIndexResponse {
            /**
                * <p>The name of the index.</p>
                */
            Name?: string;
            /**
                * <p>The identifier of the index.</p>
                */
            Id?: string;
            /**
                * <p>The Amazon Kendra edition used for the index. You decide the edition
                *       when you create the index.</p>
                */
            Edition?: IndexEdition | string;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role that gives Amazon Kendra
                *       permission to write to your Amazon Cloudwatch logs.</p>
                */
            RoleArn?: string;
            /**
                * <p>The identifier of the KMScustomer master key (CMK)
                *       that is used to encrypt your data. Amazon Kendra doesn't support
                *       asymmetric CMKs.</p>
                */
            ServerSideEncryptionConfiguration?: ServerSideEncryptionConfiguration;
            /**
                * <p>The current status of the index. When the value is
                *       <code>ACTIVE</code>, the index is ready for use. If the
                *         <code>Status</code> field value is <code>FAILED</code>, the
                *         <code>ErrorMessage</code> field contains a message that explains
                *       why.</p>
                */
            Status?: IndexStatus | string;
            /**
                * <p>The description for the index.</p>
                */
            Description?: string;
            /**
                * <p>The Unix datetime that the index was created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The Unix datetime that the index was last updated.</p>
                */
            UpdatedAt?: Date;
            /**
                * <p>Configuration information for document metadata or fields. Document metadata
                *       are fields or attributes associated with your documents. For example, the company
                *       department name associated with each document.</p>
                */
            DocumentMetadataConfigurations?: DocumentMetadataConfiguration[];
            /**
                * <p>Provides information about the number of FAQ questions and answers and
                *       the number of text documents indexed.</p>
                */
            IndexStatistics?: IndexStatistics;
            /**
                * <p>When the <code>Status</code> field value is <code>FAILED</code>, the
                *         <code>ErrorMessage</code> field contains a message that explains
                *       why.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>For Enterprise Edition indexes, you can choose to use additional
                *       capacity to meet the needs of your application. This contains the capacity
                *       units used for the index. A query or document storage capacity of zero
                *       indicates that the index is using the default capacity. For more information
                *       on the default capacity for an index and adjusting this, see
                *       <a href="https://docs.aws.amazon.com/kendra/latest/dg/adjusting-capacity.html">Adjusting
                *         capacity</a>.</p>
                */
            CapacityUnits?: CapacityUnitsConfiguration;
            /**
                * <p>The user token configuration for the Amazon Kendra index.</p>
                */
            UserTokenConfigurations?: UserTokenConfiguration[];
            /**
                * <p>The user context policy for the Amazon Kendra index.</p>
                */
            UserContextPolicy?: UserContextPolicy | string;
            /**
                * <p>Whether you have enabled the configuration for fetching access
                *          levels of groups and users from an Amazon Web Services Single Sign On identity source.</p>
                */
            UserGroupResolutionConfiguration?: UserGroupResolutionConfiguration;
    }
    export namespace DescribeIndexResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeIndexResponse) => any;
    }
    export interface DescribePrincipalMappingRequest {
            /**
                * <p>The identifier of the index required to check the processing of
                *             <code>PUT</code> and <code>DELETE</code> actions for mapping users
                *             to their groups.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>The identifier of the data source to check the processing of
                *             <code>PUT</code> and <code>DELETE</code> actions for mapping
                *             users to their groups.</p>
                */
            DataSourceId?: string;
            /**
                * <p>The identifier of the group required to check the processing of
                *             <code>PUT</code> and <code>DELETE</code> actions for mapping users
                *             to their groups.</p>
                */
            GroupId: string | undefined;
    }
    export namespace DescribePrincipalMappingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePrincipalMappingRequest) => any;
    }
    export enum PrincipalMappingStatus {
            DELETED = "DELETED",
            DELETING = "DELETING",
            FAILED = "FAILED",
            PROCESSING = "PROCESSING",
            SUCCEEDED = "SUCCEEDED"
    }
    /**
        * <p>Summary information on the processing of <code>PUT</code> and <code>DELETE</code> actions
        *             for mapping users to their groups.</p>
        */
    export interface GroupOrderingIdSummary {
            /**
                * <p>The current processing status of actions for mapping users to their groups.
                *             The status can be either <code>PROCESSING</code>, <code>SUCCEEDED</code>,
                *             <code>DELETING</code>, <code>DELETED</code>, or <code>FAILED</code>.</p>
                */
            Status?: PrincipalMappingStatus | string;
            /**
                * <p>The last date-time an action was updated. An action can be a
                *             <code>PUT</code> or <code>DELETE</code> action for mapping users
                *             to their groups.</p>
                */
            LastUpdatedAt?: Date;
            /**
                * <p>The date-time an action was received by Amazon Kendra. An action can be a
                *             <code>PUT</code> or <code>DELETE</code> action for mapping users to
                *             their groups.</p>
                */
            ReceivedAt?: Date;
            /**
                * <p>The order in which actions should complete processing. An action can
                *             be a <code>PUT</code> or <code>DELETE</code> action for mapping users
                *             to their groups.</p>
                */
            OrderingId?: number;
            /**
                * <p>The reason an action could not be processed. An action can be a
                *             <code>PUT</code> or <code>DELETE</code> action for mapping users
                *             to their groups.</p>
                */
            FailureReason?: string;
    }
    export namespace GroupOrderingIdSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupOrderingIdSummary) => any;
    }
    export interface DescribePrincipalMappingResponse {
            /**
                * <p>Shows the identifier of the index to see information on the
                *             processing of <code>PUT</code> and <code>DELETE</code> actions
                *             for mapping users to their groups.</p>
                */
            IndexId?: string;
            /**
                * <p>Shows the identifier of the data source to see information on
                *             the processing of <code>PUT</code> and <code>DELETE</code> actions
                *             for mapping users to their groups.</p>
                */
            DataSourceId?: string;
            /**
                * <p>Shows the identifier of the group to see information on the
                *             processing of <code>PUT</code> and <code>DELETE</code> actions
                *             for mapping users to their groups.</p>
                */
            GroupId?: string;
            /**
                * <p>Shows the following information on the processing of <code>PUT</code> and
                *             <code>DELETE</code> actions for mapping users to their groups:</p>
                *         <ul>
                *             <li>
                *                 <p>Status – the status can be either
                *                     <code>PROCESSING</code>, <code>SUCCEEDED</code>, <code>DELETING</code>,
                *                     <code>DELETED</code>, or <code>FAILED</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Last updated – the last date-time an action was updated.</p>
                *             </li>
                *             <li>
                *                 <p>Received – the last date-time an action was received or submitted.</p>
                *             </li>
                *             <li>
                *                 <p>Ordering ID – the latest action that should process and apply
                *                     after other actions.</p>
                *             </li>
                *             <li>
                *                 <p>Failure reason – the reason an action could not be processed.</p>
                *             </li>
                *          </ul>
                */
            GroupOrderingIdSummaries?: GroupOrderingIdSummary[];
    }
    export namespace DescribePrincipalMappingResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePrincipalMappingResponse) => any;
    }
    export interface DescribeQuerySuggestionsBlockListRequest {
            /**
                * <p>The identifier of the index for the block list.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>The identifier of the block list you want to get information on.</p>
                */
            Id: string | undefined;
    }
    export namespace DescribeQuerySuggestionsBlockListRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeQuerySuggestionsBlockListRequest) => any;
    }
    export enum QuerySuggestionsBlockListStatus {
            ACTIVE = "ACTIVE",
            ACTIVE_BUT_UPDATE_FAILED = "ACTIVE_BUT_UPDATE_FAILED",
            CREATING = "CREATING",
            DELETING = "DELETING",
            FAILED = "FAILED",
            UPDATING = "UPDATING"
    }
    export interface DescribeQuerySuggestionsBlockListResponse {
            /**
                * <p>The identifier of the index for the block list.</p>
                */
            IndexId?: string;
            /**
                * <p>The identifier of the block list.</p>
                */
            Id?: string;
            /**
                * <p>The name of the block list.</p>
                */
            Name?: string;
            /**
                * <p>The description for the block list.</p>
                */
            Description?: string;
            /**
                * <p>The current status of the block list. When the value is
                *             <code>ACTIVE</code>, the block list is ready for use.</p>
                */
            Status?: QuerySuggestionsBlockListStatus | string;
            /**
                * <p>The error message containing details if there are issues processing
                *             the block list.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>The date-time a block list for query suggestions was created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The date-time a block list for query suggestions was last updated.</p>
                */
            UpdatedAt?: Date;
            /**
                * <p>Shows the current S3 path to your block list text file in your S3 bucket.</p>
                *         <p>Each block word or phrase should be on a separate line in a text file.</p>
                *         <p>For information on the current quota limits for block lists, see
                *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas
                *                 for Amazon Kendra</a>.</p>
                */
            SourceS3Path?: S3Path;
            /**
                * <p>The current number of valid, non-empty words or phrases in
                *             the block list text file.</p>
                */
            ItemCount?: number;
            /**
                * <p>The current size of the block list text file in S3.</p>
                */
            FileSizeBytes?: number;
            /**
                * <p>The IAM (Identity and Access Management) role used by
                *             Amazon Kendra to access the block list text file in S3.</p>
                *         <p>The role needs S3 read permissions to your file in S3 and needs to
                *             give STS (Security Token Service) assume role permissions to
                *             Amazon Kendra.</p>
                */
            RoleArn?: string;
    }
    export namespace DescribeQuerySuggestionsBlockListResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeQuerySuggestionsBlockListResponse) => any;
    }
    export interface DescribeQuerySuggestionsConfigRequest {
            /**
                * <p>The identifier of the index with query suggestions that you want to get
                *             information on.</p>
                */
            IndexId: string | undefined;
    }
    export namespace DescribeQuerySuggestionsConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeQuerySuggestionsConfigRequest) => any;
    }
    export enum Mode {
            ENABLED = "ENABLED",
            LEARN_ONLY = "LEARN_ONLY"
    }
    export enum QuerySuggestionsStatus {
            ACTIVE = "ACTIVE",
            UPDATING = "UPDATING"
    }
    export interface DescribeQuerySuggestionsConfigResponse {
            /**
                * <p>Whether query suggestions are currently in
                *             <code>ENABLED</code> mode or <code>LEARN_ONLY</code> mode.</p>
                *         <p>By default, Amazon Kendra enables query suggestions.<code>LEARN_ONLY</code>
                *             turns off query suggestions for your users. You can change the mode using
                *             the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateQuerySuggestionsConfig.html">UpdateQuerySuggestionsConfig</a>
                *             API.</p>
                */
            Mode?: Mode | string;
            /**
                * <p>Whether the status of query suggestions settings is currently
                *             <code>ACTIVE</code> or <code>UPDATING</code>.</p>
                *         <p>Active means the current settings apply and Updating means your
                *             changed settings are in the process of applying.</p>
                */
            Status?: QuerySuggestionsStatus | string;
            /**
                * <p>How recent your queries are in your query log time
                *             window (in days).</p>
                */
            QueryLogLookBackWindowInDays?: number;
            /**
                * <p>
                *             <code>TRUE</code> to use all queries, otherwise use only queries that include
                *             user information to generate the query suggestions.</p>
                */
            IncludeQueriesWithoutUserInformation?: boolean;
            /**
                * <p>The minimum number of unique users who must search a query in
                *             order for the query to be eligible to suggest to your users.</p>
                */
            MinimumNumberOfQueryingUsers?: number;
            /**
                * <p>The minimum number of times a query must be searched in order for
                *             the query to be eligible to suggest to your users.</p>
                */
            MinimumQueryCount?: number;
            /**
                * <p>The date-time query suggestions for an index was last updated.</p>
                */
            LastSuggestionsBuildTime?: Date;
            /**
                * <p>The date-time query suggestions for an index was last cleared.</p>
                *         <p>After you clear suggestions, Amazon Kendra learns new suggestions based
                *             on new queries added to the query log from the time you cleared suggestions.
                *             Amazon Kendra only considers re-occurences of a query from the time you cleared
                *             suggestions. </p>
                */
            LastClearTime?: Date;
            /**
                * <p>The current total count of query suggestions for an index.</p>
                *         <p>This count can change when you update your query suggestions settings,
                *             if you filter out certain queries from suggestions using a block list,
                *             and as the query log accumulates more queries for Amazon Kendra to learn from.</p>
                */
            TotalSuggestionsCount?: number;
    }
    export namespace DescribeQuerySuggestionsConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeQuerySuggestionsConfigResponse) => any;
    }
    export interface DescribeThesaurusRequest {
            /**
                * <p>The identifier of the thesaurus you want to get information on.</p>
                */
            Id: string | undefined;
            /**
                * <p>The identifier of the index for the thesaurus.</p>
                */
            IndexId: string | undefined;
    }
    export namespace DescribeThesaurusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeThesaurusRequest) => any;
    }
    export enum ThesaurusStatus {
            ACTIVE = "ACTIVE",
            ACTIVE_BUT_UPDATE_FAILED = "ACTIVE_BUT_UPDATE_FAILED",
            CREATING = "CREATING",
            DELETING = "DELETING",
            FAILED = "FAILED",
            UPDATING = "UPDATING"
    }
    export interface DescribeThesaurusResponse {
            /**
                * <p>The identifier of the thesaurus.</p>
                */
            Id?: string;
            /**
                * <p>The identifier of the index for the thesaurus.</p>
                */
            IndexId?: string;
            /**
                * <p>The thesaurus name.</p>
                */
            Name?: string;
            /**
                * <p>The thesaurus description.</p>
                */
            Description?: string;
            /**
                * <p>The current status of the thesaurus. When the value is <code>ACTIVE</code>,
                *          queries are able to use the thesaurus. If the <code>Status</code> field value
                *          is <code>FAILED</code>, the <code>ErrorMessage</code> field provides
                *          more information.
                *       </p>
                *          <p>If the status is <code>ACTIVE_BUT_UPDATE_FAILED</code>, it means
                *          that Amazon Kendra could not ingest the new thesaurus file. The old
                *       thesaurus file is still active.
                *       </p>
                */
            Status?: ThesaurusStatus | string;
            /**
                * <p>When the <code>Status</code> field value is <code>FAILED</code>, the
                *          <code>ErrorMessage</code> field provides more information.
                *       </p>
                */
            ErrorMessage?: string;
            /**
                * <p>The Unix datetime that the thesaurus was created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The Unix datetime that the thesaurus was last updated.</p>
                */
            UpdatedAt?: Date;
            /**
                * <p>An IAM role that gives Amazon Kendra permissions
                *          to access thesaurus file specified in <code>SourceS3Path</code>.
                *       </p>
                */
            RoleArn?: string;
            /**
                * <p>Information required to find a specific file in an Amazon S3
                *             bucket.</p>
                */
            SourceS3Path?: S3Path;
            /**
                * <p>The size of the thesaurus file in bytes.</p>
                */
            FileSizeBytes?: number;
            /**
                * <p>The number of unique terms in the thesaurus file. For example, the
                *         synonyms <code>a,b,c</code> and <code>a=>d</code>, the term
                *         count would be 4.
                *       </p>
                */
            TermCount?: number;
            /**
                * <p>The number of synonym rules in the thesaurus file.</p>
                */
            SynonymRuleCount?: number;
    }
    export namespace DescribeThesaurusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeThesaurusResponse) => any;
    }
    export interface DisassociateEntitiesFromExperienceRequest {
            /**
                * <p>The identifier of your Amazon Kendra experience.</p>
                */
            Id: string | undefined;
            /**
                * <p>The identifier of the index for your Amazon Kendra experience.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>Lists users or groups in your Amazon Web Services SSO identity source.</p>
                */
            EntityList: EntityConfiguration[] | undefined;
    }
    export namespace DisassociateEntitiesFromExperienceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateEntitiesFromExperienceRequest) => any;
    }
    export interface DisassociateEntitiesFromExperienceResponse {
            /**
                * <p>Lists the users or groups in your Amazon Web Services SSO identity source that
                *             failed to properly remove access to your Amazon Kendra experience.</p>
                */
            FailedEntityList?: FailedEntity[];
    }
    export namespace DisassociateEntitiesFromExperienceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateEntitiesFromExperienceResponse) => any;
    }
    export interface DisassociatePersonasFromEntitiesRequest {
            /**
                * <p>The identifier of your Amazon Kendra experience.</p>
                */
            Id: string | undefined;
            /**
                * <p>The identifier of the index for your Amazon Kendra experience.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>The identifiers of users or groups in your Amazon Web Services SSO identity
                *             source. For example, user IDs could be user emails.</p>
                */
            EntityIds: string[] | undefined;
    }
    export namespace DisassociatePersonasFromEntitiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociatePersonasFromEntitiesRequest) => any;
    }
    export interface DisassociatePersonasFromEntitiesResponse {
            /**
                * <p>Lists the users or groups in your Amazon Web Services SSO identity source that
                *             failed to properly remove access to your Amazon Kendra experience.</p>
                */
            FailedEntityList?: FailedEntity[];
    }
    export namespace DisassociatePersonasFromEntitiesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociatePersonasFromEntitiesResponse) => any;
    }
    export interface GetQuerySuggestionsRequest {
            /**
                * <p>The identifier of the index you want to get query suggestions from.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>The text of a user's query to generate query suggestions.</p>
                *         <p>A query is suggested if the query prefix matches
                *             what a user starts to type as their query.</p>
                *         <p>Amazon Kendra does not show any suggestions if a user
                *             types fewer than two characters or more than 60 characters.
                *             A query must also have at least one search result and contain
                *             at least one word of more than four characters.</p>
                */
            QueryText: string | undefined;
            /**
                * <p>The maximum number of query suggestions you want to show
                *             to your users.</p>
                */
            MaxSuggestionsCount?: number;
    }
    export namespace GetQuerySuggestionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetQuerySuggestionsRequest) => any;
    }
    /**
        * <p>The text highlights for a single query suggestion.</p>
        */
    export interface SuggestionHighlight {
            /**
                * <p>The zero-based location in the response string where the highlight starts.</p>
                */
            BeginOffset?: number;
            /**
                * <p>The zero-based location in the response string where the highlight ends.</p>
                */
            EndOffset?: number;
    }
    export namespace SuggestionHighlight {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SuggestionHighlight) => any;
    }
    /**
        * <p>Provides text and information about where to highlight the query suggestion text.</p>
        */
    export interface SuggestionTextWithHighlights {
            /**
                * <p>The query suggestion text to display to the user.</p>
                */
            Text?: string;
            /**
                * <p>The beginning and end of the query suggestion text that should be highlighted.</p>
                */
            Highlights?: SuggestionHighlight[];
    }
    export namespace SuggestionTextWithHighlights {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SuggestionTextWithHighlights) => any;
    }
    /**
        * <p>The <code>SuggestionTextWithHighlights</code> structure information.</p>
        */
    export interface SuggestionValue {
            /**
                * <p>The <code>SuggestionTextWithHighlights</code> structure that contains
                *             the query suggestion text and highlights.</p>
                */
            Text?: SuggestionTextWithHighlights;
    }
    export namespace SuggestionValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SuggestionValue) => any;
    }
    /**
        * <p>A single query suggestion.</p>
        */
    export interface Suggestion {
            /**
                * <p>The unique UUID (universally unique identifier) of a single
                *             query suggestion.</p>
                */
            Id?: string;
            /**
                * <p>The value for the unique UUID (universally unique identifier)
                *             of a single query suggestion.</p>
                *         <p>The value is the text string of a suggestion.</p>
                */
            Value?: SuggestionValue;
    }
    export namespace Suggestion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Suggestion) => any;
    }
    export interface GetQuerySuggestionsResponse {
            /**
                * <p>The unique identifier for a list of query suggestions for an index.</p>
                */
            QuerySuggestionsId?: string;
            /**
                * <p>A list of query suggestions for an index.</p>
                */
            Suggestions?: Suggestion[];
    }
    export namespace GetQuerySuggestionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetQuerySuggestionsResponse) => any;
    }
    export enum Interval {
            ONE_MONTH_AGO = "ONE_MONTH_AGO",
            ONE_WEEK_AGO = "ONE_WEEK_AGO",
            THIS_MONTH = "THIS_MONTH",
            THIS_WEEK = "THIS_WEEK",
            TWO_MONTHS_AGO = "TWO_MONTHS_AGO",
            TWO_WEEKS_AGO = "TWO_WEEKS_AGO"
    }
    export enum MetricType {
            AGG_QUERY_DOC_METRICS = "AGG_QUERY_DOC_METRICS",
            DOCS_BY_CLICK_COUNT = "DOCS_BY_CLICK_COUNT",
            QUERIES_BY_COUNT = "QUERIES_BY_COUNT",
            QUERIES_BY_ZERO_CLICK_RATE = "QUERIES_BY_ZERO_CLICK_RATE",
            QUERIES_BY_ZERO_RESULT_RATE = "QUERIES_BY_ZERO_RESULT_RATE",
            TREND_QUERY_DOC_METRICS = "TREND_QUERY_DOC_METRICS"
    }
    export interface GetSnapshotsRequest {
            /**
                * <p>The identifier of the index to get search metrics data.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>The time interval or time window to get search metrics data.
                *             The time interval uses the time zone of your index.
                *             You can view data in the following time windows:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>THIS_WEEK</code>: The current week, starting on
                *                     the Sunday and ending on the day before the current date.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ONE_WEEK_AGO</code>: The previous week, starting on
                *                     the Sunday and ending on the following Saturday.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>TWO_WEEKS_AGO</code>: The week before the previous week,
                *                     starting on the Sunday and ending on the following Saturday.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>THIS_MONTH</code>: The current month, starting on the
                *                     first day of the month and ending on the day before the current date.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ONE_MONTH_AGO</code>: The previous month, starting on the
                *                     first day of the month and ending on the last day of the month.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>TWO_MONTHS_AGO</code>: The month before the previous month,
                *                     starting on the first day of the month and ending on last day of the month.</p>
                *             </li>
                *          </ul>
                */
            Interval: Interval | string | undefined;
            /**
                * <p>The metric you want to retrieve. You
                *             can specify only one metric per call.</p>
                *         <p>For more information about the metrics you can view, see
                *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/search-analytics.html">Gaining
                *                 insights with search analytics</a>.</p>
                */
            MetricType: MetricType | string | undefined;
            /**
                * <p>If the previous response was incomplete (because there
                *             is more data to retrieve), Amazon Kendra returns a pagination token in
                *             the response. You can use this pagination token to
                *             retrieve the next set of search metrics data.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of returned data for the metric.</p>
                */
            MaxResults?: number;
    }
    export namespace GetSnapshotsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSnapshotsRequest) => any;
    }
    /**
        * <p>Provides a range of time.</p>
        */
    export interface TimeRange {
            /**
                * <p>The UNIX datetime of the beginning of the time range.</p>
                */
            StartTime?: Date;
            /**
                * <p>The UNIX datetime of the end of the time range.</p>
                */
            EndTime?: Date;
    }
    export namespace TimeRange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TimeRange) => any;
    }
    export interface GetSnapshotsResponse {
            /**
                * <p>The date-time for the beginning and end of the time window
                *             for the search metrics data.</p>
                */
            SnapShotTimeFilter?: TimeRange;
            /**
                * <p>The column headers for the search metrics data.</p>
                */
            SnapshotsDataHeader?: string[];
            /**
                * <p>The search metrics data. The data returned depends on the
                *             metric type you requested.</p>
                */
            SnapshotsData?: string[][];
            /**
                * <p>If the response is truncated, Amazon Kendra returns this
                *             token, which you can use in a later request to retrieve the
                *             next set of search metrics data.</p>
                */
            NextToken?: string;
    }
    export namespace GetSnapshotsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSnapshotsResponse) => any;
    }
    /**
        * <p>The input to the request is not valid.</p>
        */
    export class InvalidRequestException extends __BaseException {
            readonly name: "InvalidRequestException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRequestException, __BaseException>);
    }
    export interface ListAccessControlConfigurationsRequest {
            /**
                * <p>The identifier of the index for the access control configuration.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>If the previous response was incomplete (because there is more data
                *             to retrieve), Amazon Kendra returns a pagination token in the response.
                *             You can use this pagination token to retrieve the next set of access
                *             control configurations.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of access control configurations to return.</p>
                */
            MaxResults?: number;
    }
    export namespace ListAccessControlConfigurationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAccessControlConfigurationsRequest) => any;
    }
    export interface ListAccessControlConfigurationsResponse {
            /**
                * <p>If the response is truncated, Amazon Kendra returns this token
                *             that you can use in the subsequent request to retrieve the next set of
                *             access control configurations.</p>
                */
            NextToken?: string;
            /**
                * <p>The details of your access control configurations.</p>
                */
            AccessControlConfigurations: AccessControlConfigurationSummary[] | undefined;
    }
    export namespace ListAccessControlConfigurationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAccessControlConfigurationsResponse) => any;
    }
    export interface ListDataSourcesRequest {
            /**
                * <p>The identifier of the index used with one or more data sources.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>If the previous response was incomplete (because there is more data to
                *       retrieve), Amazon Kendra returns a pagination token in the response. You
                *       can use this pagination token to retrieve the next set of data sources
                *         (<code>DataSourceSummaryItems</code>). </p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of data sources to return.</p>
                */
            MaxResults?: number;
    }
    export namespace ListDataSourcesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDataSourcesRequest) => any;
    }
    /**
        * <p>Summary information for an Amazon Kendra data source. Returned in a call
        *             to the <code>DescribeDataSource</code> API.</p>
        */
    export interface DataSourceSummary {
            /**
                * <p>The name of the data source.</p>
                */
            Name?: string;
            /**
                * <p>The unique identifier for the data source.</p>
                */
            Id?: string;
            /**
                * <p>The type of the data source.</p>
                */
            Type?: DataSourceType | string;
            /**
                * <p>The UNIX datetime that the data source was created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The UNIX datetime that the data source was lasted updated. </p>
                */
            UpdatedAt?: Date;
            /**
                * <p>The status of the data source. When the status is
                *                 <code>ACTIVE</code> the data source is ready to use.</p>
                */
            Status?: DataSourceStatus | string;
            /**
                * <p>The code for a language. This shows a supported language for all documents
                *             in the data source. English is supported by default.
                *             For more information on supported languages, including their codes,
                *             see <a href="https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html">Adding
                *                 documents in languages other than English</a>.</p>
                */
            LanguageCode?: string;
    }
    export namespace DataSourceSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSourceSummary) => any;
    }
    export interface ListDataSourcesResponse {
            /**
                * <p>An array of summary information for one or more data sources.</p>
                */
            SummaryItems?: DataSourceSummary[];
            /**
                * <p>If the response is truncated, Amazon Kendra returns this token that you
                *       can use in the subsequent request to retrieve the next set of data
                *       sources. </p>
                */
            NextToken?: string;
    }
    export namespace ListDataSourcesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDataSourcesResponse) => any;
    }
    export enum DataSourceSyncJobStatus {
            ABORTED = "ABORTED",
            FAILED = "FAILED",
            INCOMPLETE = "INCOMPLETE",
            STOPPING = "STOPPING",
            SUCCEEDED = "SUCCEEDED",
            SYNCING = "SYNCING",
            SYNCING_INDEXING = "SYNCING_INDEXING"
    }
    export interface ListDataSourceSyncJobsRequest {
            /**
                * <p>The identifier of the data source.</p>
                */
            Id: string | undefined;
            /**
                * <p>The identifier of the index used with the data source.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>If the previous response was incomplete (because there is more data to retrieve),
                *       Amazon Kendra returns a pagination token in the response. You can use this pagination token
                *       to retrieve the next set of jobs.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of synchronization jobs to return in the response.
                *       If there are fewer results in the list, this response contains only the
                *       actual results.</p>
                */
            MaxResults?: number;
            /**
                * <p>When specified, the synchronization jobs returned in the list are
                *       limited to jobs between the specified dates. </p>
                */
            StartTimeFilter?: TimeRange;
            /**
                * <p>When specified, only returns synchronization jobs with the
                *         <code>Status</code> field equal to the specified status.</p>
                */
            StatusFilter?: DataSourceSyncJobStatus | string;
    }
    export namespace ListDataSourceSyncJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDataSourceSyncJobsRequest) => any;
    }
    /**
        * <p>Maps a batch delete document request to a specific data source
        *             sync job. This is optional and should only be supplied when
        *             documents are deleted by a data source connector.</p>
        */
    export interface DataSourceSyncJobMetrics {
            /**
                * <p>The number of documents added from the data source up to now in
                *             the data source sync.</p>
                */
            DocumentsAdded?: string;
            /**
                * <p>The number of documents modified in the data source up to now in
                *             the data source sync run.</p>
                */
            DocumentsModified?: string;
            /**
                * <p>The number of documents deleted from the data source up to now in
                *             the data source sync run.</p>
                */
            DocumentsDeleted?: string;
            /**
                * <p>The number of documents that failed to sync from the data source
                *             up to now in the data source sync run.</p>
                */
            DocumentsFailed?: string;
            /**
                * <p>The current number of documents crawled by the current sync job in
                *             the data source.</p>
                */
            DocumentsScanned?: string;
    }
    export namespace DataSourceSyncJobMetrics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSourceSyncJobMetrics) => any;
    }
    /**
        * <p>Provides information about a data source synchronization job.</p>
        */
    export interface DataSourceSyncJob {
            /**
                * <p>A unique identifier for the synchronization job.</p>
                */
            ExecutionId?: string;
            /**
                * <p>The UNIX datetime that the synchronization job started.</p>
                */
            StartTime?: Date;
            /**
                * <p>The UNIX datetime that the synchronization job
                *             completed.</p>
                */
            EndTime?: Date;
            /**
                * <p>The execution status of the synchronization job. When the
                *                 <code>Status</code> field is set to <code>SUCCEEDED</code>, the
                *             synchronization job is done. If the status code is set to
                *                 <code>FAILED</code>, the <code>ErrorCode</code> and
                *                 <code>ErrorMessage</code> fields give you the reason for the
                *             failure.</p>
                */
            Status?: DataSourceSyncJobStatus | string;
            /**
                * <p>If the <code>Status</code> field is set to <code>ERROR</code>, the
                *                 <code>ErrorMessage</code> field contains a description of the
                *             error that caused the synchronization to fail.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>If the <code>Status</code> field is set to <code>FAILED</code>,
                *             the <code>ErrorCode</code> field indicates the reason the
                *         synchronization failed.</p>
                */
            ErrorCode?: ErrorCode | string;
            /**
                * <p>If the reason that the synchronization failed is due to an error
                *             with the underlying data source, this field contains a code that
                *             identifies the error.</p>
                */
            DataSourceErrorCode?: string;
            /**
                * <p>Maps a batch delete document request to a specific data source
                *             sync job. This is optional and should only be supplied when
                *             documents are deleted by a data source connector.</p>
                */
            Metrics?: DataSourceSyncJobMetrics;
    }
    export namespace DataSourceSyncJob {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSourceSyncJob) => any;
    }
    export interface ListDataSourceSyncJobsResponse {
            /**
                * <p>A history of synchronization jobs for the data source.</p>
                */
            History?: DataSourceSyncJob[];
            /**
                * <p>If the response is truncated, Amazon Kendra returns this token that you
                *       can use in the subsequent request to retrieve the next set of jobs.</p>
                */
            NextToken?: string;
    }
    export namespace ListDataSourceSyncJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDataSourceSyncJobsResponse) => any;
    }
    export interface ListEntityPersonasRequest {
            /**
                * <p>The identifier of your Amazon Kendra experience.</p>
                */
            Id: string | undefined;
            /**
                * <p>The identifier of the index for your Amazon Kendra experience.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>If the previous response was incomplete (because there is more data to retrieve),
                *             Amazon Kendra returns a pagination token in the response. You can use this pagination
                *             token to retrieve the next set of users or groups.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of returned users or groups.</p>
                */
            MaxResults?: number;
    }
    export namespace ListEntityPersonasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEntityPersonasRequest) => any;
    }
    /**
        * <p>Summary information for users or groups in your Amazon Web Services SSO identity
        *             source. This applies to users and groups with specific permissions that define
        *             their level of access to your Amazon Kendra experience. You can create an Amazon Kendra experience
        *             such as a search application. For more information on creating a search application
        *             experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building a
        *                 search experience with no code</a>.</p>
        */
    export interface PersonasSummary {
            /**
                * <p>The identifier of a user or group in your Amazon Web Services SSO identity source.
                *             For example, a user ID could be an email.</p>
                */
            EntityId?: string;
            /**
                * <p>The persona that defines the specific permissions of the user or group in
                *             your Amazon Web Services SSO identity source. The available personas or access
                *             roles are <code>Owner</code> and <code>Viewer</code>. For more information on
                *             these personas, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html#access-search-experience">Providing
                *                 access to your search page</a>.</p>
                */
            Persona?: Persona | string;
            /**
                * <p>The date-time the summary information was created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The date-time the summary information was last updated.</p>
                */
            UpdatedAt?: Date;
    }
    export namespace PersonasSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PersonasSummary) => any;
    }
    export interface ListEntityPersonasResponse {
            /**
                * <p>An array of summary information for one or more users or groups.</p>
                */
            SummaryItems?: PersonasSummary[];
            /**
                * <p>If the response is truncated, Amazon Kendra returns this token, which you can use in
                *             a later request to retrieve the next set of users or groups.</p>
                */
            NextToken?: string;
    }
    export namespace ListEntityPersonasResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEntityPersonasResponse) => any;
    }
    export interface ListExperienceEntitiesRequest {
            /**
                * <p>The identifier of your Amazon Kendra experience.</p>
                */
            Id: string | undefined;
            /**
                * <p>The identifier of the index for your Amazon Kendra experience.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>If the previous response was incomplete (because there is more data to retrieve),
                *             Amazon Kendra returns a pagination token in the response. You can use this pagination
                *             token to retrieve the next set of users or groups.</p>
                */
            NextToken?: string;
    }
    export namespace ListExperienceEntitiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListExperienceEntitiesRequest) => any;
    }
    /**
        * <p>Information about the user entity.</p>
        */
    export interface EntityDisplayData {
            /**
                * <p>The name of the user.</p>
                */
            UserName?: string;
            /**
                * <p>The name of the group.</p>
                */
            GroupName?: string;
            /**
                * <p>The user name of the user.</p>
                */
            IdentifiedUserName?: string;
            /**
                * <p>The first name of the user.</p>
                */
            FirstName?: string;
            /**
                * <p>The last name of the user.</p>
                */
            LastName?: string;
    }
    export namespace EntityDisplayData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntityDisplayData) => any;
    }
    /**
        * <p>Summary information for users or groups in your Amazon Web Services SSO identity
        *             source with granted access to your Amazon Kendra experience. You can create an Amazon Kendra
        *             experience such as a search application. For more information on creating a
        *             search application experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building
        *                 a search experience with no code</a>.</p>
        */
    export interface ExperienceEntitiesSummary {
            /**
                * <p>The identifier of a user or group in your Amazon Web Services SSO identity source.
                *             For example, a user ID could be an email.</p>
                */
            EntityId?: string;
            /**
                * <p>Shows the type as <code>User</code> or <code>Group</code>.</p>
                */
            EntityType?: EntityType | string;
            /**
                * <p>Information about the user entity.</p>
                */
            DisplayData?: EntityDisplayData;
    }
    export namespace ExperienceEntitiesSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperienceEntitiesSummary) => any;
    }
    export interface ListExperienceEntitiesResponse {
            /**
                * <p>An array of summary information for one or more users or groups.</p>
                */
            SummaryItems?: ExperienceEntitiesSummary[];
            /**
                * <p>If the response is truncated, Amazon Kendra returns this token, which you can use in
                *             a later request to retrieve the next set of users or groups.</p>
                */
            NextToken?: string;
    }
    export namespace ListExperienceEntitiesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListExperienceEntitiesResponse) => any;
    }
    export interface ListExperiencesRequest {
            /**
                * <p>The identifier of the index for your Amazon Kendra experience.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>If the previous response was incomplete (because there is more data
                *             to retrieve), Amazon Kendra returns a pagination token in the response. You can use this
                *             pagination token to retrieve the next set of Amazon Kendra experiences.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of returned Amazon Kendra experiences.</p>
                */
            MaxResults?: number;
    }
    export namespace ListExperiencesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListExperiencesRequest) => any;
    }
    /**
        * <p>Summary information for your Amazon Kendra experience. You can create an Amazon Kendra
        *             experience such as a search application. For more information on creating
        *             a search application experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building
        *                 a search experience with no code</a>.</p>
        */
    export interface ExperiencesSummary {
            /**
                * <p>The name of your Amazon Kendra experience.</p>
                */
            Name?: string;
            /**
                * <p>The identifier of your Amazon Kendra experience.</p>
                */
            Id?: string;
            /**
                * <p>The date-time your Amazon Kendra experience was created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The processing status of your Amazon Kendra experience.</p>
                */
            Status?: ExperienceStatus | string;
            /**
                * <p>The endpoint URLs for your Amazon Kendra experiences. The URLs are unique
                *             and fully hosted by Amazon Web Services.</p>
                */
            Endpoints?: ExperienceEndpoint[];
    }
    export namespace ExperiencesSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperiencesSummary) => any;
    }
    export interface ListExperiencesResponse {
            /**
                * <p>An array of summary information for one or more Amazon Kendra experiences.</p>
                */
            SummaryItems?: ExperiencesSummary[];
            /**
                * <p>If the response is truncated, Amazon Kendra returns this token, which you can use
                *             in a later request to retrieve the next set of Amazon Kendra experiences.</p>
                */
            NextToken?: string;
    }
    export namespace ListExperiencesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListExperiencesResponse) => any;
    }
    export interface ListFaqsRequest {
            /**
                * <p>The index that contains the FAQ lists.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>If the previous response was incomplete (because there is more data to retrieve),
                *             Amazon Kendra returns a pagination token in the response. You can use this pagination token
                *             to retrieve the next set of FAQs.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of FAQs to return in the response. If there are fewer results in
                *             the list, this response contains only the actual results.</p>
                */
            MaxResults?: number;
    }
    export namespace ListFaqsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFaqsRequest) => any;
    }
    /**
        * <p>Summary information for frequently asked questions and answers
        *             included in an index.</p>
        */
    export interface FaqSummary {
            /**
                * <p>The unique identifier of the FAQ.</p>
                */
            Id?: string;
            /**
                * <p>The name that you assigned the FAQ when you created or updated the
                *             FAQ.</p>
                */
            Name?: string;
            /**
                * <p>The current status of the FAQ. When the status is
                *                 <code>ACTIVE</code> the FAQ is ready for use.</p>
                */
            Status?: FaqStatus | string;
            /**
                * <p>The UNIX datetime that the FAQ was added to the index.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The UNIX datetime that the FAQ was last updated.</p>
                */
            UpdatedAt?: Date;
            /**
                * <p>The file type used to create the FAQ. </p>
                */
            FileFormat?: FaqFileFormat | string;
            /**
                * <p>The code for a language. This shows a supported language for the FAQ document
                *             as part of the summary information for FAQs. English is supported by default.
                *             For more information on supported languages, including their codes,
                *             see <a href="https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html">Adding
                *                 documents in languages other than English</a>.</p>
                */
            LanguageCode?: string;
    }
    export namespace FaqSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FaqSummary) => any;
    }
    export interface ListFaqsResponse {
            /**
                * <p>If the response is truncated, Amazon Kendra returns this token that you can use
                *             in the subsequent request to retrieve the next set of FAQs.</p>
                */
            NextToken?: string;
            /**
                * <p>information about the FAQs associated with the specified index.</p>
                */
            FaqSummaryItems?: FaqSummary[];
    }
    export namespace ListFaqsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFaqsResponse) => any;
    }
    export interface ListGroupsOlderThanOrderingIdRequest {
            /**
                * <p>The identifier of the index for getting a list of groups mapped
                *             to users before a given ordering or timestamp identifier.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>The identifier of the data source for getting a list of groups mapped
                *             to users before a given ordering timestamp identifier.</p>
                */
            DataSourceId?: string;
            /**
                * <p>The timestamp identifier used for the latest <code>PUT</code> or
                *             <code>DELETE</code> action for mapping users to their groups.</p>
                */
            OrderingId: number | undefined;
            /**
                * <p>
                *             If the previous response was incomplete (because there is more data to retrieve),
                *             Amazon Kendra returns a pagination token in the response. You can use this pagination
                *             token to retrieve the next set of groups that are mapped to users before a
                *             given ordering or timestamp identifier.
                *         </p>
                */
            NextToken?: string;
            /**
                * <p>
                *             The maximum number of returned groups that are mapped to users before a
                *             given ordering or timestamp identifier.
                *         </p>
                */
            MaxResults?: number;
    }
    export namespace ListGroupsOlderThanOrderingIdRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupsOlderThanOrderingIdRequest) => any;
    }
    /**
        * <p>Summary information for groups.</p>
        */
    export interface GroupSummary {
            /**
                * <p>The identifier of the group you want group summary information on.</p>
                */
            GroupId?: string;
            /**
                * <p>The timestamp identifier used for the latest <code>PUT</code> or <code>DELETE</code>
                *             action.</p>
                */
            OrderingId?: number;
    }
    export namespace GroupSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupSummary) => any;
    }
    export interface ListGroupsOlderThanOrderingIdResponse {
            /**
                * <p>
                *             Summary information for list of groups that are mapped to users before a
                *             given ordering or timestamp identifier.
                *         </p>
                */
            GroupsSummaries?: GroupSummary[];
            /**
                * <p>
                *             If the response is truncated, Amazon Kendra returns this token that you can use
                *             in the subsequent request to retrieve the next set of groups that are
                *             mapped to users before a given ordering or timestamp identifier.
                *         </p>
                */
            NextToken?: string;
    }
    export namespace ListGroupsOlderThanOrderingIdResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupsOlderThanOrderingIdResponse) => any;
    }
    export interface ListIndicesRequest {
            /**
                * <p>If the previous response was incomplete (because there is more data to
                *       retrieve), Amazon Kendra returns a pagination token in the response. You
                *       can use this pagination token to retrieve the next set of indexes
                *         (<code>DataSourceSummaryItems</code>). </p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of data sources to return.</p>
                */
            MaxResults?: number;
    }
    export namespace ListIndicesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIndicesRequest) => any;
    }
    /**
        * <p>Summary information on the configuration of an index.</p>
        */
    export interface IndexConfigurationSummary {
            /**
                * <p>The identifier of the index.</p>
                */
            Name?: string;
            /**
                * <p>A unique identifier for the index. Use this to identify the index
                *             when you are using APIs such as <code>Query</code>,
                *                 <code>DescribeIndex</code>, <code>UpdateIndex</code>, and
                *                 <code>DeleteIndex</code>.</p>
                */
            Id?: string;
            /**
                * <p>Indicates whether the index is a enterprise edition index or a
                *             developer edition index. </p>
                */
            Edition?: IndexEdition | string;
            /**
                * <p>The Unix timestamp when the index was created.</p>
                */
            CreatedAt: Date | undefined;
            /**
                * <p>The Unix timestamp when the index was last updated by the
                *                 <code>UpdateIndex</code> API.</p>
                */
            UpdatedAt: Date | undefined;
            /**
                * <p>The current status of the index. When the status is
                *                 <code>ACTIVE</code>, the index is ready to search.</p>
                */
            Status: IndexStatus | string | undefined;
    }
    export namespace IndexConfigurationSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IndexConfigurationSummary) => any;
    }
    export interface ListIndicesResponse {
            /**
                * <p>An array of summary information on the configuration of one or more indexes.</p>
                */
            IndexConfigurationSummaryItems?: IndexConfigurationSummary[];
            /**
                * <p>If the response is truncated, Amazon Kendra returns this token that you
                *       can use in the subsequent request to retrieve the next set of
                *       indexes.</p>
                */
            NextToken?: string;
    }
    export namespace ListIndicesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIndicesResponse) => any;
    }
    export interface ListQuerySuggestionsBlockListsRequest {
            /**
                * <p>The identifier of the index for a list of all block lists that exist for
                *             that index.</p>
                *         <p>For information on the current quota limits for block lists, see
                *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas
                *                 for Amazon Kendra</a>.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>If the previous response was incomplete (because there is more data to retrieve),
                *             Amazon Kendra returns a pagination token in the response. You can use this pagination
                *             token to retrieve the next set of block lists (<code>BlockListSummaryItems</code>).</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of block lists to return.</p>
                */
            MaxResults?: number;
    }
    export namespace ListQuerySuggestionsBlockListsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListQuerySuggestionsBlockListsRequest) => any;
    }
    /**
        * <p>Summary information on a query suggestions block list.</p>
        *         <p>This includes information on the block list ID, block list name, when the
        *             block list was created, when the block list was last updated, and the count
        *             of block words/phrases in the block list.</p>
        *         <p>For information on the current quota limits for block lists, see
        *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas
        *                 for Amazon Kendra</a>.</p>
        */
    export interface QuerySuggestionsBlockListSummary {
            /**
                * <p>The identifier of a block list.</p>
                */
            Id?: string;
            /**
                * <p>The name of the block list.</p>
                */
            Name?: string;
            /**
                * <p>The status of the block list.</p>
                */
            Status?: QuerySuggestionsBlockListStatus | string;
            /**
                * <p>The date-time summary information for a query suggestions
                *             block list was last created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The date-time the block list was last updated.</p>
                */
            UpdatedAt?: Date;
            /**
                * <p>The number of items in the block list file.</p>
                */
            ItemCount?: number;
    }
    export namespace QuerySuggestionsBlockListSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QuerySuggestionsBlockListSummary) => any;
    }
    export interface ListQuerySuggestionsBlockListsResponse {
            /**
                * <p>Summary items for a block list.</p>
                *         <p>This includes summary items on the block list ID, block list name, when the
                *             block list was created, when the block list was last updated, and the count
                *             of block words/phrases in the block list.</p>
                *         <p>For information on the current quota limits for block lists, see
                *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas
                *                 for Amazon Kendra</a>.</p>
                */
            BlockListSummaryItems?: QuerySuggestionsBlockListSummary[];
            /**
                * <p>If the response is truncated, Amazon Kendra returns this token that you can use
                *             in the subsequent request to retrieve the next set of block lists.</p>
                */
            NextToken?: string;
    }
    export namespace ListQuerySuggestionsBlockListsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListQuerySuggestionsBlockListsResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the index, FAQ, or data source to
                *       get a list of tags for.</p>
                */
            ResourceARN: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>A list of tags associated with the index, FAQ, or data source.</p>
                */
            Tags?: Tag[];
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    /**
        * <p></p>
        */
    export class ResourceUnavailableException extends __BaseException {
            readonly name: "ResourceUnavailableException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceUnavailableException, __BaseException>);
    }
    export interface ListThesauriRequest {
            /**
                * <p>The identifier of the index with one or more thesauri.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>If the previous response was incomplete (because there is more data to retrieve),
                *          Amazon Kendra returns a pagination token in the response. You can use this pagination token to
                *          retrieve the next set of thesauri (<code>ThesaurusSummaryItems</code>).
                *       </p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of thesauri to return.</p>
                */
            MaxResults?: number;
    }
    export namespace ListThesauriRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListThesauriRequest) => any;
    }
    /**
        * <p>An array of summary information for a thesaurus or multiple thesauri.</p>
        */
    export interface ThesaurusSummary {
            /**
                * <p>The identifier of the thesaurus.</p>
                */
            Id?: string;
            /**
                * <p>The name of the thesaurus.</p>
                */
            Name?: string;
            /**
                * <p>The status of the thesaurus.</p>
                */
            Status?: ThesaurusStatus | string;
            /**
                * <p>The Unix datetime that the thesaurus was created.</p>
                */
            CreatedAt?: Date;
            /**
                * <p>The Unix datetime that the thesaurus was last updated.</p>
                */
            UpdatedAt?: Date;
    }
    export namespace ThesaurusSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ThesaurusSummary) => any;
    }
    export interface ListThesauriResponse {
            /**
                * <p>If the response is truncated, Amazon Kendra returns this
                *          token that you can use in the subsequent request to
                *          retrieve the next set of thesauri.
                *       </p>
                */
            NextToken?: string;
            /**
                * <p>An array of summary information for a thesaurus or multiple thesauri.</p>
                */
            ThesaurusSummaryItems?: ThesaurusSummary[];
    }
    export namespace ListThesauriResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListThesauriResponse) => any;
    }
    /**
        * <p>The sub groups that belong to a group.</p>
        */
    export interface MemberGroup {
            /**
                * <p>The identifier of the sub group you want to map to a group.</p>
                */
            GroupId: string | undefined;
            /**
                * <p>The identifier of the data source for the sub group
                *             you want to map to a group.</p>
                */
            DataSourceId?: string;
    }
    export namespace MemberGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MemberGroup) => any;
    }
    /**
        * <p>The users that belong to a group.</p>
        */
    export interface MemberUser {
            /**
                * <p>The identifier of the user you want to map to a group.</p>
                */
            UserId: string | undefined;
    }
    export namespace MemberUser {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MemberUser) => any;
    }
    /**
        * <p>A list of users or sub groups that belong to a group. This is useful for
        *             user context filtering, where search results are filtered based on the user
        *             or their group access to documents.</p>
        */
    export interface GroupMembers {
            /**
                * <p>A list of sub groups that belong to a group. For example, the sub
                *             groups "Research", "Engineering", and "Sales and Marketing" all belong
                *             to the group "Company".</p>
                */
            MemberGroups?: MemberGroup[];
            /**
                * <p>A list of users that belong to a group. For example, a list of interns
                *             all belong to the "Interns" group.</p>
                */
            MemberUsers?: MemberUser[];
            /**
                * <p>If you have more than 1000 users and/or sub groups for a single group,
                *             you need to provide the path to the S3 file that lists your users and sub
                *             groups for a group. Your sub groups can contain more than 1000 users, but
                *             the list of sub groups that belong to a group (and/or users) must be no
                *             more than 1000.</p>
                *         <p>You can download this
                *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/samples/group_members.zip">example
                *                 S3 file</a> that uses the correct format for listing group members. Note,
                *             <code>dataSourceId</code> is optional. The value of <code>type</code>
                *             for a group is always <code>GROUP</code> and for a user it is
                *             always <code>USER</code>.</p>
                */
            S3PathforGroupMembers?: S3Path;
    }
    export namespace GroupMembers {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupMembers) => any;
    }
    export interface PutPrincipalMappingRequest {
            /**
                * <p>The identifier of the index you want to map users to their groups.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>The identifier of the data source you want to map users to their groups.</p>
                *         <p>This is useful if a group is tied to multiple data sources, but you only want
                *             the group to access documents of a certain data source. For example, the groups
                *             "Research", "Engineering", and "Sales and Marketing" are all tied to the company's
                *             documents stored in the data sources Confluence and Salesforce. However,
                *             "Sales and Marketing" team only needs access to customer-related documents
                *             stored in Salesforce.</p>
                */
            DataSourceId?: string;
            /**
                * <p>The identifier of the group you want to map its users to.</p>
                */
            GroupId: string | undefined;
            /**
                * <p>The list that contains your users or sub groups that belong
                *             the same group.</p>
                *         <p>For example, the group "Company" includes the user "CEO" and the
                *             sub groups "Research", "Engineering", and "Sales and Marketing".</p>
                *         <p>If you have more than 1000 users and/or sub groups for a single group,
                *             you need to provide the path to the S3 file that lists your users and
                *             sub groups for a group. Your sub groups can contain more than 1000 users,
                *             but the list of sub groups that belong to a group (and/or users) must be
                *             no more than 1000.</p>
                */
            GroupMembers: GroupMembers | undefined;
            /**
                * <p>The timestamp identifier you specify to ensure Amazon Kendra does not override
                *             the latest <code>PUT</code> action with previous actions. The highest number
                *             ID, which is the ordering ID, is the latest action you want to process and
                *             apply on top of other actions with lower number IDs. This prevents previous
                *             actions with lower number IDs from possibly overriding the latest action.</p>
                *         <p>The ordering ID can be the UNIX time of the last update you made to a
                *             group members list. You would then provide this list when calling
                *             <code>PutPrincipalMapping</code>. This ensures your <code>PUT</code> action
                *             for that updated group with the latest members list doesn't get overwritten
                *             by earlier <code>PUT</code> actions for the same group which are yet to
                *             be processed.</p>
                *         <p>The default ordering ID is the current UNIX time in milliseconds that the
                *             action was received by Amazon Kendra.</p>
                */
            OrderingId?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of a role that has access to the S3 file
                *             that contains your list of users or sub groups that belong to a group.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html#iam-roles-ds">IAM roles for Amazon Kendra</a>.</p>
                */
            RoleArn?: string;
    }
    export namespace PutPrincipalMappingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutPrincipalMappingRequest) => any;
    }
    /**
        * <p>Overrides the document relevance properties of a custom index field.</p>
        */
    export interface DocumentRelevanceConfiguration {
            /**
                * <p>The name of the index field.</p>
                */
            Name: string | undefined;
            /**
                * <p>Provides information for tuning the relevance of a field
                *          in a search. When a query includes terms that match the field, the
                *          results are given a boost in the response based on these tuning
                *          parameters.</p>
                */
            Relevance: Relevance | undefined;
    }
    export namespace DocumentRelevanceConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentRelevanceConfiguration) => any;
    }
    export enum QueryResultType {
            ANSWER = "ANSWER",
            DOCUMENT = "DOCUMENT",
            QUESTION_ANSWER = "QUESTION_ANSWER"
    }
    export enum SortOrder {
            ASC = "ASC",
            DESC = "DESC"
    }
    /**
        * <p>Specifies the document attribute to use to sort the response to a
        *             Amazon Kendra query. You can specify a single attribute for sorting. The
        *             attribute must have the <code>Sortable</code> flag set to
        *             <code>true</code>, otherwise Amazon Kendra returns an exception.</p>
        *         <p>You can sort attributes of the following types.</p>
        *         <ul>
        *             <li>
        *                 <p>Date value</p>
        *             </li>
        *             <li>
        *                 <p>Long value</p>
        *             </li>
        *             <li>
        *                 <p>String value</p>
        *             </li>
        *          </ul>
        *         <p>You can't sort attributes of the following type.</p>
        *         <ul>
        *             <li>
        *                 <p>String list value</p>
        *             </li>
        *          </ul>
        */
    export interface SortingConfiguration {
            /**
                * <p>The name of the document attribute used to sort the response. You
                *             can use any field that has the <code>Sortable</code> flag set to
                *             true.</p>
                *         <p>You can also sort by any of the following built-in
                *             attributes:</p>
                *         <ul>
                *             <li>
                *                 <p>_category</p>
                *             </li>
                *             <li>
                *                 <p>_created_at</p>
                *             </li>
                *             <li>
                *                 <p>_last_updated_at</p>
                *             </li>
                *             <li>
                *                 <p>_version</p>
                *             </li>
                *             <li>
                *                 <p>_view_count</p>
                *             </li>
                *          </ul>
                */
            DocumentAttributeKey: string | undefined;
            /**
                * <p>The order that the results should be returned in. In case of ties,
                *             the relevance assigned to the result by Amazon Kendra is used as the
                *             tie-breaker.</p>
                */
            SortOrder: SortOrder | string | undefined;
    }
    export namespace SortingConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SortingConfiguration) => any;
    }
    /**
        * <p>Provides the configuration information for suggested query spell corrections.</p>
        *         <p>Suggested spell corrections are based on words that appear in your indexed documents
        *             and how closely a corrected word matches a misspelled word.</p>
        *         <p>This feature is designed with certain defaults or limits. For information on the
        *             current limits and how to request more support for some limits, see the
        *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/query-spell-check.html">Spell
        *                 Checker documentation</a>.</p>
        */
    export interface SpellCorrectionConfiguration {
            /**
                * <p>
                *             <code>TRUE</code> to suggest spell corrections for queries.</p>
                */
            IncludeQuerySpellCheckSuggestions: boolean | undefined;
    }
    export namespace SpellCorrectionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SpellCorrectionConfiguration) => any;
    }
    /**
        * <p>Data source information for user context filtering.</p>
        */
    export interface DataSourceGroup {
            /**
                * <p>The identifier of the group you want to add to your list
                *          of groups. This is for filtering search results based on the
                *          groups' access to documents.</p>
                */
            GroupId: string | undefined;
            /**
                * <p>The identifier of the data source group you want to add
                *          to your list of data source groups. This is for filtering
                *          search results based on the groups' access to documents in
                *          that data source.</p>
                */
            DataSourceId: string | undefined;
    }
    export namespace DataSourceGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSourceGroup) => any;
    }
    /**
        * <p>Provides information about the user context for
        *          an Amazon Kendra index.</p>
        *          <p>User context filtering is a kind of personalized search with
        *          the benefit of controlling access to documents. For example, not
        *          all teams that search the company portal for information should
        *          access top-secret company documents, nor are these documents
        *          relevant to all users. Only specific users or groups of teams given
        *          access to top-secret documents should see these documents in their
        *          search results.</p>
        *          <p>You provide one of the following:</p>
        *          <ul>
        *             <li>
        *                <p>User token</p>
        *             </li>
        *             <li>
        *                <p>User ID, the groups the user belongs to, and any data sources the groups can
        *                access.</p>
        *             </li>
        *          </ul>
        *          <p>If you provide both, an exception is thrown.</p>
        */
    export interface UserContext {
            /**
                * <p>The user context token for filtering search results for a user. It must
                *          be a JWT or a JSON token.</p>
                */
            Token?: string;
            /**
                * <p>The identifier of the user you want to filter search results based on their
                *          access to documents.</p>
                */
            UserId?: string;
            /**
                * <p>The list of groups you want to filter search results based on the
                *          groups' access to documents.</p>
                */
            Groups?: string[];
            /**
                * <p>The list of data source groups you want to filter search results
                *          based on groups' access to documents in that data source.</p>
                */
            DataSourceGroups?: DataSourceGroup[];
    }
    export namespace UserContext {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserContext) => any;
    }
    export enum ScoreConfidence {
            HIGH = "HIGH",
            LOW = "LOW",
            MEDIUM = "MEDIUM",
            NOT_AVAILABLE = "NOT_AVAILABLE",
            VERY_HIGH = "VERY_HIGH"
    }
    /**
        * <p>Provides a relative ranking that indicates how confident Amazon Kendra is
        *          that the response matches the query.</p>
        */
    export interface ScoreAttributes {
            /**
                * <p>A relative ranking for how well the response matches the
                *          query.</p>
                */
            ScoreConfidence?: ScoreConfidence | string;
    }
    export namespace ScoreAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScoreAttributes) => any;
    }
    /**
        * <p>A single query result.</p>
        *          <p>A query result contains information about a document returned by the
        *          query. This includes the original location of the document, a list of
        *          attributes assigned to the document, and relevant text from the
        *          document that satisfies the query.</p>
        */
    export interface QueryResultItem {
            /**
                * <p>The unique identifier for the query result.</p>
                */
            Id?: string;
            /**
                * <p>The type of document. </p>
                */
            Type?: QueryResultType | string;
            /**
                * <p>One or more additional attributes associated with the query
                *          result.</p>
                */
            AdditionalAttributes?: AdditionalResultAttribute[];
            /**
                * <p>The unique identifier for the document.</p>
                */
            DocumentId?: string;
            /**
                * <p>The title of the document. Contains the text of the title and
                *          information for highlighting the relevant terms in the title.</p>
                */
            DocumentTitle?: TextWithHighlights;
            /**
                * <p>An extract of the text in the document. Contains information about
                *          highlighting the relevant terms in the excerpt.</p>
                */
            DocumentExcerpt?: TextWithHighlights;
            /**
                * <p>The URI of the original location of the document.</p>
                */
            DocumentURI?: string;
            /**
                * <p>An array of document attributes assigned to a document in
                *          the search results. For example, the document author (<code>_author</code>)
                *          or the source URI (<code>_source_uri</code>) of the document.</p>
                */
            DocumentAttributes?: DocumentAttribute[];
            /**
                * <p>Indicates the confidence that Amazon Kendra has that a result matches the
                *          query that you provided. Each result is placed into a bin that
                *          indicates the confidence, <code>VERY_HIGH</code>, <code>HIGH</code>,
                *             <code>MEDIUM</code> and <code>LOW</code>. You can use the score to
                *          determine if a response meets the confidence needed for your
                *          application.</p>
                *          <p>The field is only set to <code>LOW</code> when the <code>Type</code>
                *          field is set to <code>DOCUMENT</code> and Amazon Kendra is not confident that
                *          the result matches the query.</p>
                */
            ScoreAttributes?: ScoreAttributes;
            /**
                * <p>A token that identifies a particular result from a particular query.
                *          Use this token to provide click-through feedback for the result. For
                *          more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/submitting-feedback.html"> Submitting feedback
                *          </a>.</p>
                */
            FeedbackToken?: string;
    }
    export namespace QueryResultItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryResultItem) => any;
    }
    /**
        * <p>A corrected misspelled word in a query.</p>
        */
    export interface Correction {
            /**
                * <p>The zero-based location in the response string or text where
                *             the corrected word starts.</p>
                */
            BeginOffset?: number;
            /**
                * <p>The zero-based location in the response string or text where
                *             the corrected word ends.</p>
                */
            EndOffset?: number;
            /**
                * <p>The string or text of a misspelled word in a query.</p>
                */
            Term?: string;
            /**
                * <p>The string or text of a corrected misspelled word in a query.</p>
                */
            CorrectedTerm?: string;
    }
    export namespace Correction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Correction) => any;
    }
    /**
        * <p>A query with suggested spell corrections. </p>
        */
    export interface SpellCorrectedQuery {
            /**
                * <p>The query with the suggested spell corrections.</p>
                */
            SuggestedQueryText?: string;
            /**
                * <p>The corrected misspelled word or words in a query.</p>
                */
            Corrections?: Correction[];
    }
    export namespace SpellCorrectedQuery {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SpellCorrectedQuery) => any;
    }
    export enum WarningCode {
            QUERY_LANGUAGE_INVALID_SYNTAX = "QUERY_LANGUAGE_INVALID_SYNTAX"
    }
    /**
        * <p>The warning code and message that explains a problem with a query.</p>
        */
    export interface Warning {
            /**
                * <p>The message that explains the problem with the query.</p>
                */
            Message?: string;
            /**
                * <p>The code used to show the type of warning for the query.</p>
                */
            Code?: WarningCode | string;
    }
    export namespace Warning {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Warning) => any;
    }
    /**
        * <p></p>
        */
    export class ResourceInUseException extends __BaseException {
            readonly name: "ResourceInUseException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceInUseException, __BaseException>);
    }
    export interface StartDataSourceSyncJobRequest {
            /**
                * <p>The identifier of the data source to synchronize.</p>
                */
            Id: string | undefined;
            /**
                * <p>The identifier of the index that contains the data source.</p>
                */
            IndexId: string | undefined;
    }
    export namespace StartDataSourceSyncJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartDataSourceSyncJobRequest) => any;
    }
    export interface StartDataSourceSyncJobResponse {
            /**
                * <p>Identifies a particular synchronization job.</p>
                */
            ExecutionId?: string;
    }
    export namespace StartDataSourceSyncJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartDataSourceSyncJobResponse) => any;
    }
    export interface StopDataSourceSyncJobRequest {
            /**
                * <p>The identifier of the data source for which to stop the
                *       synchronization jobs.</p>
                */
            Id: string | undefined;
            /**
                * <p>The identifier of the index that contains the data source.</p>
                */
            IndexId: string | undefined;
    }
    export namespace StopDataSourceSyncJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopDataSourceSyncJobRequest) => any;
    }
    /**
        * <p>Gathers information about when a particular result was clicked by
        *             a user. Your application uses the <code>SubmitFeedback</code>
        *             API to provide click information.</p>
        */
    export interface ClickFeedback {
            /**
                * <p>The unique identifier of the search result that was
                *             clicked.</p>
                */
            ResultId: string | undefined;
            /**
                * <p>The Unix timestamp of the date and time that the result was
                *             clicked.</p>
                */
            ClickTime: Date | undefined;
    }
    export namespace ClickFeedback {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ClickFeedback) => any;
    }
    export enum RelevanceType {
            NOT_RELEVANT = "NOT_RELEVANT",
            RELEVANT = "RELEVANT"
    }
    /**
        * <p>Provides feedback on how relevant a document is to a search. Your
        *             application uses the <code>SubmitFeedback</code> API to
        *             provide relevance information.</p>
        */
    export interface RelevanceFeedback {
            /**
                * <p>The unique identifier of the search result that the user provided
                *             relevance feedback for.</p>
                */
            ResultId: string | undefined;
            /**
                * <p>Whether to document was relevant or not relevant to the
                *             search.</p>
                */
            RelevanceValue: RelevanceType | string | undefined;
    }
    export namespace RelevanceFeedback {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RelevanceFeedback) => any;
    }
    export interface SubmitFeedbackRequest {
            /**
                * <p>The identifier of the index that was queried.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>The identifier of the specific query for which you are submitting
                *             feedback. The query ID is returned in the response to the
                *                 <code>Query</code> API.</p>
                */
            QueryId: string | undefined;
            /**
                * <p>Tells Amazon Kendra that a particular search result link was chosen
                *             by the user. </p>
                */
            ClickFeedbackItems?: ClickFeedback[];
            /**
                * <p>Provides Amazon Kendra with relevant or not relevant feedback for
                *             whether a particular item was relevant to the search.</p>
                */
            RelevanceFeedbackItems?: RelevanceFeedback[];
    }
    export namespace SubmitFeedbackRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SubmitFeedbackRequest) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the index, FAQ, or data source to
                *       tag.</p>
                */
            ResourceARN: string | undefined;
            /**
                * <p>A list of tag keys to add to the index, FAQ, or data source. If a tag
                *       already exists, the existing value is replaced with the new value.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the index, FAQ, or data source to
                *       remove the tag from.</p>
                */
            ResourceARN: string | undefined;
            /**
                * <p>A list of tag keys to remove from the index, FAQ, or data source. If a
                *       tag key does not exist on the resource, it is ignored.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateAccessControlConfigurationRequest {
            /**
                * <p>The identifier of the index for an access control configuration.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>The identifier of the access control configuration you want to update.</p>
                */
            Id: string | undefined;
            /**
                * <p>A new name for the access control configuration.</p>
                */
            Name?: string;
            /**
                * <p>A new description for the access control configuration.</p>
                */
            Description?: string;
            /**
                * <p>Information you want to update on principals (users and/or groups) and which
                *             documents they should have access to. This is useful for user context filtering,
                *             where search results are filtered based on the user or their group access to
                *             documents.</p>
                */
            AccessControlList?: Principal[];
            /**
                * <p>The updated list of <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_Principal.html">principal</a> lists that
                *             define the hierarchy for which documents users should have access to.</p>
                */
            HierarchicalAccessControlList?: HierarchicalPrincipal[];
    }
    export namespace UpdateAccessControlConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAccessControlConfigurationRequest) => any;
    }
    export interface UpdateAccessControlConfigurationResponse {
    }
    export namespace UpdateAccessControlConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAccessControlConfigurationResponse) => any;
    }
    export interface UpdateDataSourceRequest {
            /**
                * <p>The identifier of the data source you want to update.</p>
                */
            Id: string | undefined;
            /**
                * <p>A new name for the data source connector. You must
                *       first delete the data source and re-create it to change the
                *       name of the data source.</p>
                */
            Name?: string;
            /**
                * <p>The identifier of the index used with the data source connector.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>Configuration information you want to update for the data source connector.</p>
                */
            Configuration?: DataSourceConfiguration;
            /**
                * <p>A new description for the data source connector.</p>
                */
            Description?: string;
            /**
                * <p>The sync schedule you want to update for the data source connector.</p>
                */
            Schedule?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of a role with permission to access
                *       the data source. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html">IAM Roles for
                *         Amazon Kendra</a>.</p>
                */
            RoleArn?: string;
            /**
                * <p>The code for a language you want to update for the data source connector.
                *             This allows you to support a language for all
                *             documents when updating the data source. English is supported
                *             by default. For more information on supported languages, including their codes,
                *             see <a href="https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html">Adding
                *                 documents in languages other than English</a>.</p>
                */
            LanguageCode?: string;
            /**
                * <p>Configuration information you want to update for altering document metadata
                *             and content during the document ingestion process.</p>
                *         <p>For more information on how to create, modify and delete document metadata, or make
                *             other content alterations when you ingest documents into Amazon Kendra, see
                *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html">Customizing
                *                 document metadata during the ingestion process</a>.</p>
                */
            CustomDocumentEnrichmentConfiguration?: CustomDocumentEnrichmentConfiguration;
    }
    export namespace UpdateDataSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDataSourceRequest) => any;
    }
    export interface UpdateExperienceRequest {
            /**
                * <p>The identifier of your Amazon Kendra experience you want to update.</p>
                */
            Id: string | undefined;
            /**
                * <p>A new name for your Amazon Kendra experience.</p>
                */
            Name?: string;
            /**
                * <p>The identifier of the index for your Amazon Kendra experience.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of a role with permission to access <code>Query</code>
                *             API, <code>QuerySuggestions</code> API, <code>SubmitFeedback</code>
                *             API, and Amazon Web Services SSO that stores your user and group information.
                *             For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html">IAM roles for Amazon Kendra</a>.</p>
                */
            RoleArn?: string;
            /**
                * <p>Configuration information you want to update for your Amazon Kendra experience.</p>
                */
            Configuration?: ExperienceConfiguration;
            /**
                * <p>A new description for your Amazon Kendra experience.</p>
                */
            Description?: string;
    }
    export namespace UpdateExperienceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateExperienceRequest) => any;
    }
    export interface UpdateIndexRequest {
            /**
                * <p>The identifier of the index you want to update.</p>
                */
            Id: string | undefined;
            /**
                * <p>The name of the index you want to update.</p>
                */
            Name?: string;
            /**
                * <p>An Identity and Access Management (IAM) role that
                *       gives Amazon Kendra permission to access Amazon CloudWatch
                *       logs and metrics.</p>
                */
            RoleArn?: string;
            /**
                * <p>A new description for the index.</p>
                */
            Description?: string;
            /**
                * <p>The document metadata configuration you want to update for the index.
                *       Document metadata are fields or attributes associated with your documents.
                *       For example, the company department name associated with each document.</p>
                */
            DocumentMetadataConfigurationUpdates?: DocumentMetadataConfiguration[];
            /**
                * <p>Sets the number of additional document storage and query capacity
                *       units that should be used by the index. You can change the capacity of
                *       the index up to 5 times per day, or make 5 API calls.</p>
                *          <p>If you are using extra storage units, you can't reduce the storage
                *       capacity below what is required to meet the storage needs for your
                *       index.</p>
                */
            CapacityUnits?: CapacityUnitsConfiguration;
            /**
                * <p>The user token configuration.</p>
                */
            UserTokenConfigurations?: UserTokenConfiguration[];
            /**
                * <p>The user context policy.</p>
                */
            UserContextPolicy?: UserContextPolicy | string;
            /**
                * <p>Enables fetching access levels of groups and users from an Amazon Web Services Single Sign On
                *          identity source. To configure this, see
                *          <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_UserGroupResolutionConfiguration.html">UserGroupResolutionConfiguration</a>.</p>
                */
            UserGroupResolutionConfiguration?: UserGroupResolutionConfiguration;
    }
    export namespace UpdateIndexRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateIndexRequest) => any;
    }
    export interface UpdateQuerySuggestionsBlockListRequest {
            /**
                * <p>The identifier of the index for the block list.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>The identifier of the block list you want to update.</p>
                */
            Id: string | undefined;
            /**
                * <p>A new name for the block list.</p>
                */
            Name?: string;
            /**
                * <p>A new description for the block list.</p>
                */
            Description?: string;
            /**
                * <p>The S3 path where your block list text file sits in S3.</p>
                *         <p>If you update your block list and provide the same path to the
                *             block list text file in S3, then Amazon Kendra reloads the file to refresh
                *             the block list. Amazon Kendra does not automatically refresh your block list.
                *             You need to call the <code>UpdateQuerySuggestionsBlockList</code> API
                *             to refresh you block list.</p>
                *         <p>If you update your block list, then Amazon Kendra asynchronously refreshes
                *             all query suggestions with the latest content in the S3 file. This
                *             means changes might not take effect immediately.</p>
                */
            SourceS3Path?: S3Path;
            /**
                * <p>The IAM (Identity and Access Management) role used to access the
                *             block list text file in S3.</p>
                */
            RoleArn?: string;
    }
    export namespace UpdateQuerySuggestionsBlockListRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateQuerySuggestionsBlockListRequest) => any;
    }
    export interface UpdateQuerySuggestionsConfigRequest {
            /**
                * <p> The identifier of the index with query suggestions you want to update.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>Set the mode to <code>ENABLED</code> or <code>LEARN_ONLY</code>.</p>
                *         <p>By default, Amazon Kendra enables query suggestions.
                *             <code>LEARN_ONLY</code> mode allows you to turn off query suggestions.
                *             You can to update this at any time.</p>
                *         <p>In <code>LEARN_ONLY</code> mode, Amazon Kendra continues to learn from new
                *             queries to keep suggestions up to date for when you are ready to
                *             switch to ENABLED mode again.</p>
                */
            Mode?: Mode | string;
            /**
                * <p>How recent your queries are in your query log time window.</p>
                *         <p>The time window is the number of days from current day to past days.</p>
                *         <p>By default, Amazon Kendra sets this to 180.</p>
                */
            QueryLogLookBackWindowInDays?: number;
            /**
                * <p>
                *             <code>TRUE</code> to include queries without user information (i.e. all queries,
                *             irrespective of the user), otherwise <code>FALSE</code> to only include queries
                *             with user information.</p>
                *         <p>If you pass user information to Amazon Kendra along with the queries, you can set this
                *             flag to <code>FALSE</code> and instruct Amazon Kendra to only consider queries with user
                *             information.</p>
                *         <p>If you set to <code>FALSE</code>, Amazon Kendra only considers queries searched at least
                *             <code>MinimumQueryCount</code> times across <code>MinimumNumberOfQueryingUsers</code>
                *             unique users for suggestions.</p>
                *         <p>If you set to <code>TRUE</code>, Amazon Kendra ignores all user information and learns
                *             from all queries.</p>
                */
            IncludeQueriesWithoutUserInformation?: boolean;
            /**
                * <p>The minimum number of unique users who must search a query in order for the query
                *             to be eligible to suggest to your users.</p>
                *         <p>Increasing this number might decrease the number of suggestions. However, this
                *             ensures a query is searched by many users and is truly popular to suggest to users.</p>
                *         <p>How you tune this setting depends on your specific needs.</p>
                */
            MinimumNumberOfQueryingUsers?: number;
            /**
                * <p>The the minimum number of times a query must be searched in order to be
                *             eligible to suggest to your users.</p>
                *         <p>Decreasing this number increases the number of suggestions. However, this
                *             affects the quality of suggestions as it sets a low bar for a query to be
                *             considered popular to suggest to users.</p>
                *         <p>How you tune this setting depends on your specific needs.</p>
                */
            MinimumQueryCount?: number;
    }
    export namespace UpdateQuerySuggestionsConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateQuerySuggestionsConfigRequest) => any;
    }
    export interface UpdateThesaurusRequest {
            /**
                * <p>The identifier of the thesaurus you want to update.</p>
                */
            Id: string | undefined;
            /**
                * <p>A new name for the thesaurus.</p>
                */
            Name?: string;
            /**
                * <p>The identifier of the index for the thesaurus.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>A new description for the thesaurus.</p>
                */
            Description?: string;
            /**
                * <p>An IAM role that gives Amazon Kendra permissions to
                *          access thesaurus file specified in <code>SourceS3Path</code>.</p>
                */
            RoleArn?: string;
            /**
                * <p>Information required to find a specific file in an Amazon S3
                *             bucket.</p>
                */
            SourceS3Path?: S3Path;
    }
    export namespace UpdateThesaurusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateThesaurusRequest) => any;
    }
    /**
        * <p>Information about a document attribute. You can use document
        *          attributes as facets.</p>
        *          <p>For example, the document attribute or facet "Department" includes
        *          the values "HR", "Engineering", and "Accounting". You can display these
        *          values in the search results so that documents can be searched by department.</p>
        *          <p>You can display up to 10 facet values per facet for a query. If you want to
        *          increase this limit, contact <a href="http://aws.amazon.com/contact-us/">Support</a>.</p>
        */
    export interface Facet {
            /**
                * <p>The unique key for the document attribute.</p>
                */
            DocumentAttributeKey?: string;
            /**
                * <p>An array of document attributes that are nested facets within a facet.</p>
                *          <p>For example, the document attribute or facet "Department" includes a
                *          value called "Engineering". In addition, the document attribute or
                *          facet "SubDepartment" includes the values "Frontend" and "Backend" for documents
                *          assigned to "Engineering". You can display nested facets in the search results
                *          so that documents can be searched not only by department but also by a sub
                *          department within a department. This helps your users further narrow their
                *          search.</p>
                *          <p>You can only have one nested facet within a facet. If you want to increase
                *          this limit, contact <a href="http://aws.amazon.com/contact-us/">Support</a>.</p>
                */
            Facets?: Facet[];
            /**
                * <p>Maximum number of facet values per facet. The default is 10. You can use
                *          this to limit the number of facet values to less than 10. If you want to
                *          increase the default, contact <a href="http://aws.amazon.com/contact-us/">Support</a>.</p>
                */
            MaxResults?: number;
    }
    export namespace Facet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Facet) => any;
    }
    /**
        * <p>Provides the count of documents that match a particular attribute
        *             when doing a faceted search.</p>
        */
    export interface DocumentAttributeValueCountPair {
            /**
                * <p>The value of the attribute. For example, "HR".</p>
                */
            DocumentAttributeValue?: DocumentAttributeValue;
            /**
                * <p>The number of documents in the response that have the attribute
                *             value for the key.</p>
                */
            Count?: number;
            /**
                * <p>Contains the results of a document attribute that is a nested facet.
                *             A <code>FacetResult</code> contains the counts for each facet nested
                *             within a facet.</p>
                *         <p>For example, the document attribute or facet "Department" includes a
                *             value called "Engineering". In addition, the document attribute
                *             or facet "SubDepartment" includes the values "Frontend" and "Backend"
                *             for documents assigned to "Engineering". You can display nested facets
                *             in the search results so that documents can be searched not only by
                *             department but also by a sub department within a department. The counts
                *             for documents that belong to "Frontend" and "Backend" within "Engineering"
                *             are returned for a query.</p>
                */
            FacetResults?: FacetResult[];
    }
    export namespace DocumentAttributeValueCountPair {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentAttributeValueCountPair) => any;
    }
    /**
        * <p>The facet values for the documents in the response.</p>
        */
    export interface FacetResult {
            /**
                * <p>The key for the facet values. This is the same as the
                *             <code>DocumentAttributeKey</code> provided in the query.</p>
                */
            DocumentAttributeKey?: string;
            /**
                * <p>The data type of the facet value. This is the same as the type
                *          defined for the index field when it was created.</p>
                */
            DocumentAttributeValueType?: DocumentAttributeValueType | string;
            /**
                * <p>An array of key/value pairs, where the key is the value of the
                *          attribute and the count is the number of documents that share the key
                *          value.</p>
                */
            DocumentAttributeValueCountPairs?: DocumentAttributeValueCountPair[];
    }
    export namespace FacetResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FacetResult) => any;
    }
    /**
        * <p>Provides filtering the query results based on document
        *          attributes.</p>
        *          <p>When you use the <code>AndAllFilters</code> or
        *             <code>OrAllFilters</code>, filters you can use 2 layers under the
        *          first attribute filter. For example, you can use:</p>
        *          <p>
        *             <code><AndAllFilters></code>
        *          </p>
        *          <ol>
        *             <li>
        *                <p>
        *                   <code> <OrAllFilters></code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code> <EqualsTo></code>
        *                </p>
        *             </li>
        *          </ol>
        *          <p>If you use more than 2 layers, you receive a
        *             <code>ValidationException</code> exception with the message
        *             "<code>AttributeFilter</code> cannot have a depth of more
        *          than 2."</p>
        *          <p>If you use more than 10 attribute filters in a given list for
        *          <code>AndAllFilters</code> or <code>OrAllFilters</code>, you receive
        *          a <code>ValidationException</code> with the message
        *          "<code>AttributeFilter</code> cannot have a length of more than 10".</p>
        */
    export interface AttributeFilter {
            /**
                * <p>Performs a logical <code>AND</code> operation on all supplied
                *          filters.</p>
                */
            AndAllFilters?: AttributeFilter[];
            /**
                * <p>Performs a logical <code>OR</code> operation on all supplied
                *          filters.</p>
                */
            OrAllFilters?: AttributeFilter[];
            /**
                * <p>Performs a logical <code>NOT</code> operation on all supplied
                *          filters.</p>
                */
            NotFilter?: AttributeFilter;
            /**
                * <p>Performs an equals operation on two document attributes.</p>
                */
            EqualsTo?: DocumentAttribute;
            /**
                * <p>Returns true when a document contains all of the specified document
                *          attributes. This filter is only applicable to
                *             <code>StringListValue</code> metadata.</p>
                */
            ContainsAll?: DocumentAttribute;
            /**
                * <p>Returns true when a document contains any of the specified document
                *          attributes. This filter is only applicable to
                *             <code>StringListValue</code> metadata.</p>
                */
            ContainsAny?: DocumentAttribute;
            /**
                * <p>Performs a greater than operation on two document attributes. Use
                *          with a document attribute of type <code>Date</code> or
                *             <code>Long</code>.</p>
                */
            GreaterThan?: DocumentAttribute;
            /**
                * <p>Performs a greater or equals than operation on two document
                *          attributes. Use with a document attribute of type <code>Date</code>
                *          or <code>Long</code>.</p>
                */
            GreaterThanOrEquals?: DocumentAttribute;
            /**
                * <p>Performs a less than operation on two document attributes. Use with
                *          a document attribute of type <code>Date</code> or
                *          <code>Long</code>.</p>
                */
            LessThan?: DocumentAttribute;
            /**
                * <p>Performs a less than or equals operation on two document attributes.
                *          Use with a document attribute of type <code>Date</code> or
                *             <code>Long</code>.</p>
                */
            LessThanOrEquals?: DocumentAttribute;
    }
    export namespace AttributeFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttributeFilter) => any;
    }
    export interface QueryResult {
            /**
                * <p>The unique identifier for the search. You use <code>QueryId</code>
                *          to identify the search when using the feedback API.</p>
                */
            QueryId?: string;
            /**
                * <p>The results of the search.</p>
                */
            ResultItems?: QueryResultItem[];
            /**
                * <p>Contains the facet results. A <code>FacetResult</code> contains the
                *          counts for each attribute key that was specified in the
                *             <code>Facets</code> input parameter.</p>
                */
            FacetResults?: FacetResult[];
            /**
                * <p>The total number of items found by the search; however, you can only
                *          retrieve up to 100 items. For example, if the search found 192 items,
                *          you can only retrieve the first 100 of the items.</p>
                */
            TotalNumberOfResults?: number;
            /**
                * <p>A list of warning codes and their messages on problems with your query.</p>
                *          <p>Amazon Kendra currently only supports one type of warning, which is a warning
                *          on invalid syntax used in the query. For examples of invalid query syntax,
                *          see <a href="https://docs.aws.amazon.com/kendra/latest/dg/searching-example.html#searching-index-query-syntax">Searching
                *             with advanced query syntax</a>.</p>
                */
            Warnings?: Warning[];
            /**
                * <p>A list of information related to suggested spell corrections for a query.</p>
                */
            SpellCorrectedQueries?: SpellCorrectedQuery[];
    }
    export namespace QueryResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryResult) => any;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_1' {
    import { AttributeFilter, DocumentRelevanceConfiguration, Facet, QueryResultType, SortingConfiguration, SpellCorrectionConfiguration, UserContext } from "@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/models_0";
    export interface QueryRequest {
            /**
                * <p>The unique identifier of the index to search. The identifier is
                *          returned in the response from the <code>CreateIndex</code>
                *          API.</p>
                */
            IndexId: string | undefined;
            /**
                * <p>The text to search for.</p>
                */
            QueryText?: string;
            /**
                * <p>Enables filtered searches based on document attributes. You can only
                *          provide one attribute filter; however, the <code>AndAllFilters</code>,
                *             <code>NotFilter</code>, and <code>OrAllFilters</code> parameters
                *          contain a list of other filters.</p>
                *          <p>The <code>AttributeFilter</code> parameter enables you to create a
                *          set of filtering rules that a document must satisfy to be included in
                *          the query results.</p>
                */
            AttributeFilter?: AttributeFilter;
            /**
                * <p>An array of documents attributes. Amazon Kendra returns a count for
                *          each attribute key specified. This helps your users narrow their search.</p>
                */
            Facets?: Facet[];
            /**
                * <p>An array of document attributes to include in the response.
                *          You can limit the response to include certain document attributes.
                *          By default all document attributes are included in the response.</p>
                */
            RequestedDocumentAttributes?: string[];
            /**
                * <p>Sets the type of query. Only results for the specified query type
                *          are returned.</p>
                */
            QueryResultTypeFilter?: QueryResultType | string;
            /**
                * <p>Overrides relevance tuning configurations of fields or attributes set at the index level.</p>
                *          <p>If you use this API to override the relevance tuning configured at the index
                *          level, but there is no relevance tuning configured at the index level, then Amazon Kendra does not apply any relevance tuning.</p>
                *          <p>If there is relevance tuning configured at the index level, but you do not use this API
                *          to override any relevance tuning in the index, then Amazon Kendra uses the relevance tuning that is configured at the index level.</p>
                *          <p>If there is relevance tuning configured for fields at the index level,
                *          but you use this API to override only some of these fields, then for the fields you did not override,
                *          the importance is set to 1.</p>
                */
            DocumentRelevanceOverrideConfigurations?: DocumentRelevanceConfiguration[];
            /**
                * <p>Query results are returned in pages the size of the
                *          <code>PageSize</code> parameter. By default, Amazon Kendra returns
                *          the first page of results. Use this parameter to get result pages after
                *          the first one.</p>
                */
            PageNumber?: number;
            /**
                * <p>Sets the number of results that are returned in each page of
                *          results. The default page size is 10. The maximum number of results
                *          returned is 100. If you ask for more than 100 results, only 100 are
                *          returned.</p>
                */
            PageSize?: number;
            /**
                * <p>Provides information that determines how the results of the query
                *          are sorted. You can set the field that Amazon Kendra should sort the results
                *          on, and specify whether the results should be sorted in ascending or
                *          descending order. In the case of ties in sorting the results, the
                *          results are sorted by relevance.</p>
                *          <p>If you don't provide sorting configuration, the results are sorted
                *          by the relevance that Amazon Kendra determines for the result.</p>
                */
            SortingConfiguration?: SortingConfiguration;
            /**
                * <p>The user context token or user and group information.</p>
                */
            UserContext?: UserContext;
            /**
                * <p>Provides an identifier for a specific user. The
                *             <code>VisitorId</code> should be a unique identifier, such as a
                *          GUID. Don't use personally identifiable information, such as the user's
                *          email address, as the <code>VisitorId</code>.</p>
                */
            VisitorId?: string;
            /**
                * <p>Enables suggested spell corrections for queries.</p>
                */
            SpellCorrectionConfiguration?: SpellCorrectionConfiguration;
    }
    export namespace QueryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryRequest) => any;
    }
}

declare module '@aws-sdk/client-kendra/node_modules/@aws-sdk/client-kendra/dist-types/models/KendraServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Kendra service.
        */
    export class KendraServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

