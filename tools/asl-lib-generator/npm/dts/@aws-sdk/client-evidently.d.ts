// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-evidently' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { BatchEvaluateFeatureCommandInput, BatchEvaluateFeatureCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/BatchEvaluateFeatureCommand";
    import { CreateExperimentCommandInput, CreateExperimentCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/CreateExperimentCommand";
    import { CreateFeatureCommandInput, CreateFeatureCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/CreateFeatureCommand";
    import { CreateLaunchCommandInput, CreateLaunchCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/CreateLaunchCommand";
    import { CreateProjectCommandInput, CreateProjectCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/CreateProjectCommand";
    import { CreateSegmentCommandInput, CreateSegmentCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/CreateSegmentCommand";
    import { DeleteExperimentCommandInput, DeleteExperimentCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/DeleteExperimentCommand";
    import { DeleteFeatureCommandInput, DeleteFeatureCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/DeleteFeatureCommand";
    import { DeleteLaunchCommandInput, DeleteLaunchCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/DeleteLaunchCommand";
    import { DeleteProjectCommandInput, DeleteProjectCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/DeleteProjectCommand";
    import { DeleteSegmentCommandInput, DeleteSegmentCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/DeleteSegmentCommand";
    import { EvaluateFeatureCommandInput, EvaluateFeatureCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/EvaluateFeatureCommand";
    import { GetExperimentCommandInput, GetExperimentCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/GetExperimentCommand";
    import { GetExperimentResultsCommandInput, GetExperimentResultsCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/GetExperimentResultsCommand";
    import { GetFeatureCommandInput, GetFeatureCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/GetFeatureCommand";
    import { GetLaunchCommandInput, GetLaunchCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/GetLaunchCommand";
    import { GetProjectCommandInput, GetProjectCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/GetProjectCommand";
    import { GetSegmentCommandInput, GetSegmentCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/GetSegmentCommand";
    import { ListExperimentsCommandInput, ListExperimentsCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/ListExperimentsCommand";
    import { ListFeaturesCommandInput, ListFeaturesCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/ListFeaturesCommand";
    import { ListLaunchesCommandInput, ListLaunchesCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/ListLaunchesCommand";
    import { ListProjectsCommandInput, ListProjectsCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/ListProjectsCommand";
    import { ListSegmentReferencesCommandInput, ListSegmentReferencesCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/ListSegmentReferencesCommand";
    import { ListSegmentsCommandInput, ListSegmentsCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/ListSegmentsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/ListTagsForResourceCommand";
    import { PutProjectEventsCommandInput, PutProjectEventsCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/PutProjectEventsCommand";
    import { StartExperimentCommandInput, StartExperimentCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/StartExperimentCommand";
    import { StartLaunchCommandInput, StartLaunchCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/StartLaunchCommand";
    import { StopExperimentCommandInput, StopExperimentCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/StopExperimentCommand";
    import { StopLaunchCommandInput, StopLaunchCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/StopLaunchCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/TagResourceCommand";
    import { TestSegmentPatternCommandInput, TestSegmentPatternCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/TestSegmentPatternCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/UntagResourceCommand";
    import { UpdateExperimentCommandInput, UpdateExperimentCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/UpdateExperimentCommand";
    import { UpdateFeatureCommandInput, UpdateFeatureCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/UpdateFeatureCommand";
    import { UpdateLaunchCommandInput, UpdateLaunchCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/UpdateLaunchCommand";
    import { UpdateProjectCommandInput, UpdateProjectCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/UpdateProjectCommand";
    import { UpdateProjectDataDeliveryCommandInput, UpdateProjectDataDeliveryCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/UpdateProjectDataDeliveryCommand";
    import { EvidentlyClient } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    /**
        * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving
        *       them to a specified percentage
        *       of your users while you roll out the feature. You can monitor the performance of the new feature
        *       to help you decide when to ramp up traffic to your users. This helps you
        *       reduce risk and identify unintended consequences before you fully launch the feature.</p>
        *          <p>You can also conduct A/B experiments to make feature design decisions based on evidence
        *       and data. An experiment can test as many as five variations at once. Evidently collects
        *       experiment data and analyzes it using statistical methods. It also provides clear
        *       recommendations about which variations perform better. You can test both user-facing features
        *       and backend features.</p>
        */
    export class Evidently extends EvidentlyClient {
            /**
                * <p>This operation assigns feature variation to user sessions. For each user session, you pass
                *       in an <code>entityID</code> that represents the user. Evidently then checks the evaluation
                *       rules and assigns the variation.</p>
                *          <p>The first rules that are evaluated are the override rules. If the user's
                *         <code>entityID</code> matches an override rule, the user is served the variation specified
                *       by that rule.</p>
                *          <p>Next, if there is a launch of the feature, the user might be assigned to a variation in
                *       the launch. The chance of this depends on the percentage of users that are allocated to that
                *       launch. If the user is enrolled in the launch, the variation they are served depends on the
                *       allocation of the various feature variations used for the launch.</p>
                *          <p>If the user is not assigned to a launch, and there is an ongoing experiment for this feature,  the user might
                *       be assigned to a variation in the experiment. The chance of this
                *       depends on the percentage of users that are allocated to that experiment. If the user is enrolled in the experiment,
                *       the variation they are served depends on the allocation of the various feature variations used for the experiment. </p>
                *          <p>If the user is not assigned to a launch or experiment, they are served the default variation.</p>
                */
            batchEvaluateFeature(args: BatchEvaluateFeatureCommandInput, options?: __HttpHandlerOptions): Promise<BatchEvaluateFeatureCommandOutput>;
            batchEvaluateFeature(args: BatchEvaluateFeatureCommandInput, cb: (err: any, data?: BatchEvaluateFeatureCommandOutput) => void): void;
            batchEvaluateFeature(args: BatchEvaluateFeatureCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchEvaluateFeatureCommandOutput) => void): void;
            /**
                * <p>Creates an Evidently <i>experiment</i>. Before you create an experiment,
                *       you must create the feature to use for the experiment.</p>
                *          <p>An experiment helps you make feature design
                *        decisions based on evidence and data. An experiment can test as
                *        many as five variations at once. Evidently collects experiment data and analyzes it by statistical methods, and provides
                *        clear recommendations about which variations perform better.</p>
                *          <p>You can optionally specify a <code>segment</code> to have the experiment consider only certain audience
                *      types in the experiment, such as using only user sessions from a certain location or who use a certain internet browser.</p>
                *          <p>Don't use this operation to update an existing experiment. Instead, use
                *        <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateExperiment.html">UpdateExperiment</a>. </p>
                */
            createExperiment(args: CreateExperimentCommandInput, options?: __HttpHandlerOptions): Promise<CreateExperimentCommandOutput>;
            createExperiment(args: CreateExperimentCommandInput, cb: (err: any, data?: CreateExperimentCommandOutput) => void): void;
            createExperiment(args: CreateExperimentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateExperimentCommandOutput) => void): void;
            /**
                * <p>Creates an Evidently <i>feature</i> that you want to launch or test. You can define up to
                *        five variations of a feature, and use these variations in your launches and experiments. A feature must be created in
                *        a project. For information about creating a project, see <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateProject.html">CreateProject</a>.</p>
                *          <p>Don't use this operation to update an existing feature. Instead, use
                *        <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateFeature.html">UpdateFeature</a>. </p>
                */
            createFeature(args: CreateFeatureCommandInput, options?: __HttpHandlerOptions): Promise<CreateFeatureCommandOutput>;
            createFeature(args: CreateFeatureCommandInput, cb: (err: any, data?: CreateFeatureCommandOutput) => void): void;
            createFeature(args: CreateFeatureCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateFeatureCommandOutput) => void): void;
            /**
                * <p>Creates a <i>launch</i> of a given feature. Before you create a launch, you
                *       must create the feature to use for the launch.</p>
                *          <p>You can use a launch to safely validate new features by serving them to a specified
                *       percentage of your users while you roll out the feature. You can monitor the performance of
                *       the new feature to help you decide when to ramp up traffic to more users. This helps you
                *       reduce risk and identify unintended consequences before you fully launch the feature.</p>
                *          <p>Don't use this operation to update an existing launch. Instead, use
                *        <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateLaunch.html">UpdateLaunch</a>. </p>
                */
            createLaunch(args: CreateLaunchCommandInput, options?: __HttpHandlerOptions): Promise<CreateLaunchCommandOutput>;
            createLaunch(args: CreateLaunchCommandInput, cb: (err: any, data?: CreateLaunchCommandOutput) => void): void;
            createLaunch(args: CreateLaunchCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLaunchCommandOutput) => void): void;
            /**
                * <p>Creates a project, which is the logical object in Evidently that can contain features, launches, and
                *       experiments. Use projects to group similar features together.</p>
                *          <p>To update an existing project, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateProject.html">UpdateProject</a>.</p>
                */
            createProject(args: CreateProjectCommandInput, options?: __HttpHandlerOptions): Promise<CreateProjectCommandOutput>;
            createProject(args: CreateProjectCommandInput, cb: (err: any, data?: CreateProjectCommandOutput) => void): void;
            createProject(args: CreateProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateProjectCommandOutput) => void): void;
            /**
                * <p>Use this operation to define a <i>segment</i> of your audience. A segment
                *       is a portion of your audience that share one or more characteristics. Examples could be Chrome browser users,
                *       users in Europe, or Firefox browser users in Europe who also fit other criteria that your application collects,
                *       such as age.</p>
                *          <p>Using a segment in an experiment limits that experiment to evaluate only the users who match the segment
                *       criteria. Using one or more segments in a launch allow you to define different traffic splits for the different
                *       audience segments.</p>
                *
                *          <p>For more information about segment pattern syntax, see
                *       <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments-syntax.html">
                *         Segment rule pattern syntax</a>.</p>
                *
                *          <p>The pattern that you define for a segment is matched against the value of <code>evaluationContext</code>, which
                *       is passed into Evidently in the <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_EvaluateFeature.html">EvaluateFeature</a> operation,
                *       when Evidently assigns a feature variation to a user.</p>
                */
            createSegment(args: CreateSegmentCommandInput, options?: __HttpHandlerOptions): Promise<CreateSegmentCommandOutput>;
            createSegment(args: CreateSegmentCommandInput, cb: (err: any, data?: CreateSegmentCommandOutput) => void): void;
            createSegment(args: CreateSegmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSegmentCommandOutput) => void): void;
            /**
                * <p>Deletes an Evidently experiment. The feature used for the experiment is not deleted.</p>
                *          <p>To stop an experiment without deleting it, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_StopExperiment.html">StopExperiment</a>. </p>
                */
            deleteExperiment(args: DeleteExperimentCommandInput, options?: __HttpHandlerOptions): Promise<DeleteExperimentCommandOutput>;
            deleteExperiment(args: DeleteExperimentCommandInput, cb: (err: any, data?: DeleteExperimentCommandOutput) => void): void;
            deleteExperiment(args: DeleteExperimentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteExperimentCommandOutput) => void): void;
            /**
                * <p>Deletes an Evidently feature.</p>
                */
            deleteFeature(args: DeleteFeatureCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFeatureCommandOutput>;
            deleteFeature(args: DeleteFeatureCommandInput, cb: (err: any, data?: DeleteFeatureCommandOutput) => void): void;
            deleteFeature(args: DeleteFeatureCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFeatureCommandOutput) => void): void;
            /**
                * <p>Deletes an Evidently launch. The feature used for the launch is not deleted.</p>
                *          <p>To stop a launch without deleting it, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_StopLaunch.html">StopLaunch</a>. </p>
                */
            deleteLaunch(args: DeleteLaunchCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLaunchCommandOutput>;
            deleteLaunch(args: DeleteLaunchCommandInput, cb: (err: any, data?: DeleteLaunchCommandOutput) => void): void;
            deleteLaunch(args: DeleteLaunchCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLaunchCommandOutput) => void): void;
            /**
                * <p>Deletes an Evidently project. Before you can delete a project, you must delete all the
                *       features that the project contains. To delete a feature, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_DeleteFeature.html">DeleteFeature</a>.</p>
                */
            deleteProject(args: DeleteProjectCommandInput, options?: __HttpHandlerOptions): Promise<DeleteProjectCommandOutput>;
            deleteProject(args: DeleteProjectCommandInput, cb: (err: any, data?: DeleteProjectCommandOutput) => void): void;
            deleteProject(args: DeleteProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteProjectCommandOutput) => void): void;
            /**
                * <p>Deletes a segment. You can't delete a segment that is being used in a launch or experiment, even if that
                *     launch or experiment is not currently running.</p>
                */
            deleteSegment(args: DeleteSegmentCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSegmentCommandOutput>;
            deleteSegment(args: DeleteSegmentCommandInput, cb: (err: any, data?: DeleteSegmentCommandOutput) => void): void;
            deleteSegment(args: DeleteSegmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSegmentCommandOutput) => void): void;
            /**
                * <p>This operation assigns a feature variation to one given user session. You pass in an
                *         <code>entityID</code> that represents the user. Evidently then checks the evaluation rules
                *       and assigns the variation.</p>
                *          <p>The first rules that are evaluated are the override rules. If the user's
                *         <code>entityID</code> matches an override rule, the user is served the variation specified
                *       by that rule.</p>
                *
                *          <p>If there is a current launch with this feature that uses segment overrides, and
                *       if the user session's <code>evaluationContext</code> matches a segment rule defined in a
                *       segment override, the configuration in the segment overrides is used. For more information
                *       about segments, see <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateSegment.html">CreateSegment</a>
                *       and
                *       <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html">Use segments to focus your
                *         audience</a>.</p>
                *          <p>If there is a launch with no segment overrides, the user might be assigned to a variation in
                *       the launch. The chance of this depends on the percentage of users that are allocated to that
                *       launch. If the user is enrolled in the launch, the variation they are served depends on the
                *       allocation of the various feature variations used for the launch.</p>
                *          <p>If the user is not assigned to a launch, and there is an ongoing experiment for this feature, the user might
                *       be assigned to a variation in the experiment. The chance of this
                *       depends on the percentage of users that are allocated to that experiment.</p>
                *          <p>If the experiment uses a segment, then only
                *       user sessions with <code>evaluationContext</code> values that match the segment rule are used in the experiment.</p>
                *          <p>If the user is enrolled in the experiment,
                *       the variation they are served depends on the allocation of the various feature variations used for the experiment. </p>
                *          <p>If the user is not assigned to a launch or experiment, they are served the default variation.</p>
                */
            evaluateFeature(args: EvaluateFeatureCommandInput, options?: __HttpHandlerOptions): Promise<EvaluateFeatureCommandOutput>;
            evaluateFeature(args: EvaluateFeatureCommandInput, cb: (err: any, data?: EvaluateFeatureCommandOutput) => void): void;
            evaluateFeature(args: EvaluateFeatureCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: EvaluateFeatureCommandOutput) => void): void;
            /**
                * <p>Returns the details about one experiment. You must already know the
                *       experiment name. To retrieve a list of experiments in your account, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListExperiments.html">ListExperiments</a>.</p>
                */
            getExperiment(args: GetExperimentCommandInput, options?: __HttpHandlerOptions): Promise<GetExperimentCommandOutput>;
            getExperiment(args: GetExperimentCommandInput, cb: (err: any, data?: GetExperimentCommandOutput) => void): void;
            getExperiment(args: GetExperimentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetExperimentCommandOutput) => void): void;
            /**
                * <p>Retrieves the results of a running or completed experiment. No results are available until
                *        there have been 100 events for each variation and at least 10 minutes have passed since the start of the experiment.</p>
                *          <p>Experiment
                *        results are available up to 63 days after the start of the experiment. They are not available after that because
                *        of CloudWatch data retention policies.</p>
                */
            getExperimentResults(args: GetExperimentResultsCommandInput, options?: __HttpHandlerOptions): Promise<GetExperimentResultsCommandOutput>;
            getExperimentResults(args: GetExperimentResultsCommandInput, cb: (err: any, data?: GetExperimentResultsCommandOutput) => void): void;
            getExperimentResults(args: GetExperimentResultsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetExperimentResultsCommandOutput) => void): void;
            /**
                * <p>Returns the details about one feature. You must already know the feature name. To
                *       retrieve a list of features in your account, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListFeatures.html">ListFeatures</a>.</p>
                */
            getFeature(args: GetFeatureCommandInput, options?: __HttpHandlerOptions): Promise<GetFeatureCommandOutput>;
            getFeature(args: GetFeatureCommandInput, cb: (err: any, data?: GetFeatureCommandOutput) => void): void;
            getFeature(args: GetFeatureCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetFeatureCommandOutput) => void): void;
            /**
                * <p>Returns the details about one launch. You must already know the
                *        launch name. To retrieve a list of launches in your account, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListLaunches.html">ListLaunches</a>.</p>
                */
            getLaunch(args: GetLaunchCommandInput, options?: __HttpHandlerOptions): Promise<GetLaunchCommandOutput>;
            getLaunch(args: GetLaunchCommandInput, cb: (err: any, data?: GetLaunchCommandOutput) => void): void;
            getLaunch(args: GetLaunchCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLaunchCommandOutput) => void): void;
            /**
                * <p>Returns the details about one launch. You must already know the
                *        project name. To retrieve a list of projects in your account, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListProjects.html">ListProjects</a>.</p>
                */
            getProject(args: GetProjectCommandInput, options?: __HttpHandlerOptions): Promise<GetProjectCommandOutput>;
            getProject(args: GetProjectCommandInput, cb: (err: any, data?: GetProjectCommandOutput) => void): void;
            getProject(args: GetProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetProjectCommandOutput) => void): void;
            /**
                * <p>Returns information about the specified segment. Specify the segment you want to view
                *     by specifying its ARN.</p>
                */
            getSegment(args: GetSegmentCommandInput, options?: __HttpHandlerOptions): Promise<GetSegmentCommandOutput>;
            getSegment(args: GetSegmentCommandInput, cb: (err: any, data?: GetSegmentCommandOutput) => void): void;
            getSegment(args: GetSegmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSegmentCommandOutput) => void): void;
            /**
                * <p>Returns configuration details about all the experiments in the specified project.</p>
                */
            listExperiments(args: ListExperimentsCommandInput, options?: __HttpHandlerOptions): Promise<ListExperimentsCommandOutput>;
            listExperiments(args: ListExperimentsCommandInput, cb: (err: any, data?: ListExperimentsCommandOutput) => void): void;
            listExperiments(args: ListExperimentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListExperimentsCommandOutput) => void): void;
            /**
                * <p>Returns configuration details about all the features in the specified project.</p>
                */
            listFeatures(args: ListFeaturesCommandInput, options?: __HttpHandlerOptions): Promise<ListFeaturesCommandOutput>;
            listFeatures(args: ListFeaturesCommandInput, cb: (err: any, data?: ListFeaturesCommandOutput) => void): void;
            listFeatures(args: ListFeaturesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFeaturesCommandOutput) => void): void;
            /**
                * <p>Returns configuration details about all the launches in the specified project.</p>
                */
            listLaunches(args: ListLaunchesCommandInput, options?: __HttpHandlerOptions): Promise<ListLaunchesCommandOutput>;
            listLaunches(args: ListLaunchesCommandInput, cb: (err: any, data?: ListLaunchesCommandOutput) => void): void;
            listLaunches(args: ListLaunchesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLaunchesCommandOutput) => void): void;
            /**
                * <p>Returns configuration details about all the projects in the current Region in your
                *       account.</p>
                */
            listProjects(args: ListProjectsCommandInput, options?: __HttpHandlerOptions): Promise<ListProjectsCommandOutput>;
            listProjects(args: ListProjectsCommandInput, cb: (err: any, data?: ListProjectsCommandOutput) => void): void;
            listProjects(args: ListProjectsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListProjectsCommandOutput) => void): void;
            /**
                * <p>Use this operation to find which experiments or launches are using a specified segment.</p>
                */
            listSegmentReferences(args: ListSegmentReferencesCommandInput, options?: __HttpHandlerOptions): Promise<ListSegmentReferencesCommandOutput>;
            listSegmentReferences(args: ListSegmentReferencesCommandInput, cb: (err: any, data?: ListSegmentReferencesCommandOutput) => void): void;
            listSegmentReferences(args: ListSegmentReferencesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSegmentReferencesCommandOutput) => void): void;
            /**
                * <p>Returns a list of audience segments that you have created in your account in this Region.</p>
                */
            listSegments(args: ListSegmentsCommandInput, options?: __HttpHandlerOptions): Promise<ListSegmentsCommandOutput>;
            listSegments(args: ListSegmentsCommandInput, cb: (err: any, data?: ListSegmentsCommandOutput) => void): void;
            listSegments(args: ListSegmentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSegmentsCommandOutput) => void): void;
            /**
                * <p>Displays the tags associated with an Evidently resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Sends performance events to Evidently. These events can be used to evaluate a launch or
                *       an experiment.</p>
                */
            putProjectEvents(args: PutProjectEventsCommandInput, options?: __HttpHandlerOptions): Promise<PutProjectEventsCommandOutput>;
            putProjectEvents(args: PutProjectEventsCommandInput, cb: (err: any, data?: PutProjectEventsCommandOutput) => void): void;
            putProjectEvents(args: PutProjectEventsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutProjectEventsCommandOutput) => void): void;
            /**
                * <p>Starts an existing experiment. To create an experiment,
                *         use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateExperiment.html">CreateExperiment</a>.</p>
                */
            startExperiment(args: StartExperimentCommandInput, options?: __HttpHandlerOptions): Promise<StartExperimentCommandOutput>;
            startExperiment(args: StartExperimentCommandInput, cb: (err: any, data?: StartExperimentCommandOutput) => void): void;
            startExperiment(args: StartExperimentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartExperimentCommandOutput) => void): void;
            /**
                * <p>Starts an existing launch. To create a launch,
                *        use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateLaunch.html">CreateLaunch</a>.</p>
                */
            startLaunch(args: StartLaunchCommandInput, options?: __HttpHandlerOptions): Promise<StartLaunchCommandOutput>;
            startLaunch(args: StartLaunchCommandInput, cb: (err: any, data?: StartLaunchCommandOutput) => void): void;
            startLaunch(args: StartLaunchCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartLaunchCommandOutput) => void): void;
            /**
                * <p>Stops an experiment that is currently running. If you stop an experiment, you can't
                *       resume it or restart it.</p>
                */
            stopExperiment(args: StopExperimentCommandInput, options?: __HttpHandlerOptions): Promise<StopExperimentCommandOutput>;
            stopExperiment(args: StopExperimentCommandInput, cb: (err: any, data?: StopExperimentCommandOutput) => void): void;
            stopExperiment(args: StopExperimentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopExperimentCommandOutput) => void): void;
            /**
                * <p>Stops a launch that is currently running. After you stop a launch, you will not be able to resume it or restart it.
                *        Also, it
                *        will not be evaluated as a rule for traffic allocation, and the traffic that was allocated to the launch
                *        will instead be available to the feature's experiment, if there is one. Otherwise, all traffic
                *        will be served the default variation after the launch is stopped.</p>
                */
            stopLaunch(args: StopLaunchCommandInput, options?: __HttpHandlerOptions): Promise<StopLaunchCommandOutput>;
            stopLaunch(args: StopLaunchCommandInput, cb: (err: any, data?: StopLaunchCommandOutput) => void): void;
            stopLaunch(args: StopLaunchCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopLaunchCommandOutput) => void): void;
            /**
                * <p>Assigns one or more tags (key-value pairs) to the specified CloudWatch Evidently resource. Projects,
                *        features, launches, and experiments can be tagged.</p>
                *          <p>Tags can help you organize and categorize your resources. You can also use them to scope user
                *        permissions by granting a user
                *        permission to access or change only resources with certain tag values.</p>
                *          <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p>
                *          <p>You can use the <code>TagResource</code> action with a resource that already has tags.
                *        If you specify a new tag key for the resource,
                *        this tag is appended to the list of tags associated
                *        with the alarm. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces
                *        the previous value for that tag.</p>
                *          <p>You can associate as many as 50 tags with a resource.</p>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Use this operation to test a rules pattern that you plan to use to create an audience segment.
                *       For more information about segments, see <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateSegment.html">CreateSegment</a>.</p>
                */
            testSegmentPattern(args: TestSegmentPatternCommandInput, options?: __HttpHandlerOptions): Promise<TestSegmentPatternCommandOutput>;
            testSegmentPattern(args: TestSegmentPatternCommandInput, cb: (err: any, data?: TestSegmentPatternCommandOutput) => void): void;
            testSegmentPattern(args: TestSegmentPatternCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TestSegmentPatternCommandOutput) => void): void;
            /**
                * <p>Removes one or more tags from the specified resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates an Evidently experiment. </p>
                *          <p>Don't use this operation to update an experiment's tag. Instead, use
                *       <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html">TagResource</a>. </p>
                */
            updateExperiment(args: UpdateExperimentCommandInput, options?: __HttpHandlerOptions): Promise<UpdateExperimentCommandOutput>;
            updateExperiment(args: UpdateExperimentCommandInput, cb: (err: any, data?: UpdateExperimentCommandOutput) => void): void;
            updateExperiment(args: UpdateExperimentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateExperimentCommandOutput) => void): void;
            /**
                * <p>Updates an existing feature.</p>
                *          <p>You can't use this operation to update the tags of an existing feature. Instead, use
                *       <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html">TagResource</a>. </p>
                */
            updateFeature(args: UpdateFeatureCommandInput, options?: __HttpHandlerOptions): Promise<UpdateFeatureCommandOutput>;
            updateFeature(args: UpdateFeatureCommandInput, cb: (err: any, data?: UpdateFeatureCommandOutput) => void): void;
            updateFeature(args: UpdateFeatureCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateFeatureCommandOutput) => void): void;
            /**
                * <p>Updates a launch of a given feature. </p>
                *          <p>Don't use this operation to update the tags of an existing launch. Instead, use
                *       <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html">TagResource</a>. </p>
                */
            updateLaunch(args: UpdateLaunchCommandInput, options?: __HttpHandlerOptions): Promise<UpdateLaunchCommandOutput>;
            updateLaunch(args: UpdateLaunchCommandInput, cb: (err: any, data?: UpdateLaunchCommandOutput) => void): void;
            updateLaunch(args: UpdateLaunchCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateLaunchCommandOutput) => void): void;
            /**
                * <p>Updates the description of an existing project.</p>
                *          <p>To create a new project, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateProject.html">CreateProject</a>.</p>
                *          <p>Don't use this operation to update the data storage options of a project. Instead, use
                *        <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateProjectDataDelivery.html">UpdateProjectDataDelivery</a>. </p>
                *          <p>Don't use this operation to update the tags of a project. Instead, use
                *        <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html">TagResource</a>. </p>
                */
            updateProject(args: UpdateProjectCommandInput, options?: __HttpHandlerOptions): Promise<UpdateProjectCommandOutput>;
            updateProject(args: UpdateProjectCommandInput, cb: (err: any, data?: UpdateProjectCommandOutput) => void): void;
            updateProject(args: UpdateProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateProjectCommandOutput) => void): void;
            /**
                * <p>Updates the data storage options for this project. If you store evaluation events, you an
                *       keep them and analyze them on your own. If you choose not to store evaluation events,
                *       Evidently deletes them after using them to produce metrics and other experiment results that
                *       you can view.</p>
                *          <p>You can't specify both <code>cloudWatchLogs</code> and <code>s3Destination</code> in the same operation.</p>
                */
            updateProjectDataDelivery(args: UpdateProjectDataDeliveryCommandInput, options?: __HttpHandlerOptions): Promise<UpdateProjectDataDeliveryCommandOutput>;
            updateProjectDataDelivery(args: UpdateProjectDataDeliveryCommandInput, cb: (err: any, data?: UpdateProjectDataDeliveryCommandOutput) => void): void;
            updateProjectDataDelivery(args: UpdateProjectDataDeliveryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateProjectDataDeliveryCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/BatchEvaluateFeatureCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { BatchEvaluateFeatureRequest, BatchEvaluateFeatureResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface BatchEvaluateFeatureCommandInput extends BatchEvaluateFeatureRequest {
    }
    export interface BatchEvaluateFeatureCommandOutput extends BatchEvaluateFeatureResponse, __MetadataBearer {
    }
    /**
        * <p>This operation assigns feature variation to user sessions. For each user session, you pass
        *       in an <code>entityID</code> that represents the user. Evidently then checks the evaluation
        *       rules and assigns the variation.</p>
        *          <p>The first rules that are evaluated are the override rules. If the user's
        *         <code>entityID</code> matches an override rule, the user is served the variation specified
        *       by that rule.</p>
        *          <p>Next, if there is a launch of the feature, the user might be assigned to a variation in
        *       the launch. The chance of this depends on the percentage of users that are allocated to that
        *       launch. If the user is enrolled in the launch, the variation they are served depends on the
        *       allocation of the various feature variations used for the launch.</p>
        *          <p>If the user is not assigned to a launch, and there is an ongoing experiment for this feature,  the user might
        *       be assigned to a variation in the experiment. The chance of this
        *       depends on the percentage of users that are allocated to that experiment. If the user is enrolled in the experiment,
        *       the variation they are served depends on the allocation of the various feature variations used for the experiment. </p>
        *          <p>If the user is not assigned to a launch or experiment, they are served the default variation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, BatchEvaluateFeatureCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, BatchEvaluateFeatureCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new BatchEvaluateFeatureCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchEvaluateFeatureCommandInput} for command's `input` shape.
        * @see {@link BatchEvaluateFeatureCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class BatchEvaluateFeatureCommand extends $Command<BatchEvaluateFeatureCommandInput, BatchEvaluateFeatureCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: BatchEvaluateFeatureCommandInput;
            constructor(input: BatchEvaluateFeatureCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchEvaluateFeatureCommandInput, BatchEvaluateFeatureCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/CreateExperimentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { CreateExperimentRequest, CreateExperimentResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface CreateExperimentCommandInput extends CreateExperimentRequest {
    }
    export interface CreateExperimentCommandOutput extends CreateExperimentResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an Evidently <i>experiment</i>. Before you create an experiment,
        *       you must create the feature to use for the experiment.</p>
        *          <p>An experiment helps you make feature design
        *        decisions based on evidence and data. An experiment can test as
        *        many as five variations at once. Evidently collects experiment data and analyzes it by statistical methods, and provides
        *        clear recommendations about which variations perform better.</p>
        *          <p>You can optionally specify a <code>segment</code> to have the experiment consider only certain audience
        *      types in the experiment, such as using only user sessions from a certain location or who use a certain internet browser.</p>
        *          <p>Don't use this operation to update an existing experiment. Instead, use
        *        <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateExperiment.html">UpdateExperiment</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, CreateExperimentCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, CreateExperimentCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new CreateExperimentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateExperimentCommandInput} for command's `input` shape.
        * @see {@link CreateExperimentCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class CreateExperimentCommand extends $Command<CreateExperimentCommandInput, CreateExperimentCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: CreateExperimentCommandInput;
            constructor(input: CreateExperimentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateExperimentCommandInput, CreateExperimentCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/CreateFeatureCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { CreateFeatureRequest, CreateFeatureResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface CreateFeatureCommandInput extends CreateFeatureRequest {
    }
    export interface CreateFeatureCommandOutput extends CreateFeatureResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an Evidently <i>feature</i> that you want to launch or test. You can define up to
        *        five variations of a feature, and use these variations in your launches and experiments. A feature must be created in
        *        a project. For information about creating a project, see <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateProject.html">CreateProject</a>.</p>
        *          <p>Don't use this operation to update an existing feature. Instead, use
        *        <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateFeature.html">UpdateFeature</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, CreateFeatureCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, CreateFeatureCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new CreateFeatureCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateFeatureCommandInput} for command's `input` shape.
        * @see {@link CreateFeatureCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class CreateFeatureCommand extends $Command<CreateFeatureCommandInput, CreateFeatureCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: CreateFeatureCommandInput;
            constructor(input: CreateFeatureCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateFeatureCommandInput, CreateFeatureCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/CreateLaunchCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { CreateLaunchRequest, CreateLaunchResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface CreateLaunchCommandInput extends CreateLaunchRequest {
    }
    export interface CreateLaunchCommandOutput extends CreateLaunchResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a <i>launch</i> of a given feature. Before you create a launch, you
        *       must create the feature to use for the launch.</p>
        *          <p>You can use a launch to safely validate new features by serving them to a specified
        *       percentage of your users while you roll out the feature. You can monitor the performance of
        *       the new feature to help you decide when to ramp up traffic to more users. This helps you
        *       reduce risk and identify unintended consequences before you fully launch the feature.</p>
        *          <p>Don't use this operation to update an existing launch. Instead, use
        *        <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateLaunch.html">UpdateLaunch</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, CreateLaunchCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, CreateLaunchCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new CreateLaunchCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLaunchCommandInput} for command's `input` shape.
        * @see {@link CreateLaunchCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class CreateLaunchCommand extends $Command<CreateLaunchCommandInput, CreateLaunchCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: CreateLaunchCommandInput;
            constructor(input: CreateLaunchCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLaunchCommandInput, CreateLaunchCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/CreateProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { CreateProjectRequest, CreateProjectResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface CreateProjectCommandInput extends CreateProjectRequest {
    }
    export interface CreateProjectCommandOutput extends CreateProjectResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a project, which is the logical object in Evidently that can contain features, launches, and
        *       experiments. Use projects to group similar features together.</p>
        *          <p>To update an existing project, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateProject.html">UpdateProject</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, CreateProjectCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, CreateProjectCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new CreateProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateProjectCommandInput} for command's `input` shape.
        * @see {@link CreateProjectCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class CreateProjectCommand extends $Command<CreateProjectCommandInput, CreateProjectCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: CreateProjectCommandInput;
            constructor(input: CreateProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateProjectCommandInput, CreateProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/CreateSegmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { CreateSegmentRequest, CreateSegmentResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface CreateSegmentCommandInput extends CreateSegmentRequest {
    }
    export interface CreateSegmentCommandOutput extends CreateSegmentResponse, __MetadataBearer {
    }
    /**
        * <p>Use this operation to define a <i>segment</i> of your audience. A segment
        *       is a portion of your audience that share one or more characteristics. Examples could be Chrome browser users,
        *       users in Europe, or Firefox browser users in Europe who also fit other criteria that your application collects,
        *       such as age.</p>
        *          <p>Using a segment in an experiment limits that experiment to evaluate only the users who match the segment
        *       criteria. Using one or more segments in a launch allow you to define different traffic splits for the different
        *       audience segments.</p>
        *
        *          <p>For more information about segment pattern syntax, see
        *       <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments-syntax.html">
        *         Segment rule pattern syntax</a>.</p>
        *
        *          <p>The pattern that you define for a segment is matched against the value of <code>evaluationContext</code>, which
        *       is passed into Evidently in the <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_EvaluateFeature.html">EvaluateFeature</a> operation,
        *       when Evidently assigns a feature variation to a user.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, CreateSegmentCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, CreateSegmentCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new CreateSegmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSegmentCommandInput} for command's `input` shape.
        * @see {@link CreateSegmentCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class CreateSegmentCommand extends $Command<CreateSegmentCommandInput, CreateSegmentCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: CreateSegmentCommandInput;
            constructor(input: CreateSegmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSegmentCommandInput, CreateSegmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/DeleteExperimentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { DeleteExperimentRequest, DeleteExperimentResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface DeleteExperimentCommandInput extends DeleteExperimentRequest {
    }
    export interface DeleteExperimentCommandOutput extends DeleteExperimentResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an Evidently experiment. The feature used for the experiment is not deleted.</p>
        *          <p>To stop an experiment without deleting it, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_StopExperiment.html">StopExperiment</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, DeleteExperimentCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, DeleteExperimentCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new DeleteExperimentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteExperimentCommandInput} for command's `input` shape.
        * @see {@link DeleteExperimentCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class DeleteExperimentCommand extends $Command<DeleteExperimentCommandInput, DeleteExperimentCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: DeleteExperimentCommandInput;
            constructor(input: DeleteExperimentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteExperimentCommandInput, DeleteExperimentCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/DeleteFeatureCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { DeleteFeatureRequest, DeleteFeatureResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface DeleteFeatureCommandInput extends DeleteFeatureRequest {
    }
    export interface DeleteFeatureCommandOutput extends DeleteFeatureResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an Evidently feature.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, DeleteFeatureCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, DeleteFeatureCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new DeleteFeatureCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFeatureCommandInput} for command's `input` shape.
        * @see {@link DeleteFeatureCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class DeleteFeatureCommand extends $Command<DeleteFeatureCommandInput, DeleteFeatureCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: DeleteFeatureCommandInput;
            constructor(input: DeleteFeatureCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFeatureCommandInput, DeleteFeatureCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/DeleteLaunchCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { DeleteLaunchRequest, DeleteLaunchResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface DeleteLaunchCommandInput extends DeleteLaunchRequest {
    }
    export interface DeleteLaunchCommandOutput extends DeleteLaunchResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an Evidently launch. The feature used for the launch is not deleted.</p>
        *          <p>To stop a launch without deleting it, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_StopLaunch.html">StopLaunch</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, DeleteLaunchCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, DeleteLaunchCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new DeleteLaunchCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLaunchCommandInput} for command's `input` shape.
        * @see {@link DeleteLaunchCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class DeleteLaunchCommand extends $Command<DeleteLaunchCommandInput, DeleteLaunchCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: DeleteLaunchCommandInput;
            constructor(input: DeleteLaunchCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLaunchCommandInput, DeleteLaunchCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/DeleteProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { DeleteProjectRequest, DeleteProjectResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface DeleteProjectCommandInput extends DeleteProjectRequest {
    }
    export interface DeleteProjectCommandOutput extends DeleteProjectResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an Evidently project. Before you can delete a project, you must delete all the
        *       features that the project contains. To delete a feature, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_DeleteFeature.html">DeleteFeature</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, DeleteProjectCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, DeleteProjectCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new DeleteProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteProjectCommandInput} for command's `input` shape.
        * @see {@link DeleteProjectCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class DeleteProjectCommand extends $Command<DeleteProjectCommandInput, DeleteProjectCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: DeleteProjectCommandInput;
            constructor(input: DeleteProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteProjectCommandInput, DeleteProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/DeleteSegmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { DeleteSegmentRequest, DeleteSegmentResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface DeleteSegmentCommandInput extends DeleteSegmentRequest {
    }
    export interface DeleteSegmentCommandOutput extends DeleteSegmentResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a segment. You can't delete a segment that is being used in a launch or experiment, even if that
        *     launch or experiment is not currently running.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, DeleteSegmentCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, DeleteSegmentCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new DeleteSegmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteSegmentCommandInput} for command's `input` shape.
        * @see {@link DeleteSegmentCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class DeleteSegmentCommand extends $Command<DeleteSegmentCommandInput, DeleteSegmentCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: DeleteSegmentCommandInput;
            constructor(input: DeleteSegmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteSegmentCommandInput, DeleteSegmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/EvaluateFeatureCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { EvaluateFeatureRequest, EvaluateFeatureResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface EvaluateFeatureCommandInput extends EvaluateFeatureRequest {
    }
    export interface EvaluateFeatureCommandOutput extends EvaluateFeatureResponse, __MetadataBearer {
    }
    /**
        * <p>This operation assigns a feature variation to one given user session. You pass in an
        *         <code>entityID</code> that represents the user. Evidently then checks the evaluation rules
        *       and assigns the variation.</p>
        *          <p>The first rules that are evaluated are the override rules. If the user's
        *         <code>entityID</code> matches an override rule, the user is served the variation specified
        *       by that rule.</p>
        *
        *          <p>If there is a current launch with this feature that uses segment overrides, and
        *       if the user session's <code>evaluationContext</code> matches a segment rule defined in a
        *       segment override, the configuration in the segment overrides is used. For more information
        *       about segments, see <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateSegment.html">CreateSegment</a>
        *       and
        *       <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html">Use segments to focus your
        *         audience</a>.</p>
        *          <p>If there is a launch with no segment overrides, the user might be assigned to a variation in
        *       the launch. The chance of this depends on the percentage of users that are allocated to that
        *       launch. If the user is enrolled in the launch, the variation they are served depends on the
        *       allocation of the various feature variations used for the launch.</p>
        *          <p>If the user is not assigned to a launch, and there is an ongoing experiment for this feature, the user might
        *       be assigned to a variation in the experiment. The chance of this
        *       depends on the percentage of users that are allocated to that experiment.</p>
        *          <p>If the experiment uses a segment, then only
        *       user sessions with <code>evaluationContext</code> values that match the segment rule are used in the experiment.</p>
        *          <p>If the user is enrolled in the experiment,
        *       the variation they are served depends on the allocation of the various feature variations used for the experiment. </p>
        *          <p>If the user is not assigned to a launch or experiment, they are served the default variation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, EvaluateFeatureCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, EvaluateFeatureCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new EvaluateFeatureCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link EvaluateFeatureCommandInput} for command's `input` shape.
        * @see {@link EvaluateFeatureCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class EvaluateFeatureCommand extends $Command<EvaluateFeatureCommandInput, EvaluateFeatureCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: EvaluateFeatureCommandInput;
            constructor(input: EvaluateFeatureCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<EvaluateFeatureCommandInput, EvaluateFeatureCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/GetExperimentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { GetExperimentRequest, GetExperimentResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface GetExperimentCommandInput extends GetExperimentRequest {
    }
    export interface GetExperimentCommandOutput extends GetExperimentResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the details about one experiment. You must already know the
        *       experiment name. To retrieve a list of experiments in your account, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListExperiments.html">ListExperiments</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, GetExperimentCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, GetExperimentCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new GetExperimentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetExperimentCommandInput} for command's `input` shape.
        * @see {@link GetExperimentCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class GetExperimentCommand extends $Command<GetExperimentCommandInput, GetExperimentCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: GetExperimentCommandInput;
            constructor(input: GetExperimentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetExperimentCommandInput, GetExperimentCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/GetExperimentResultsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { GetExperimentResultsRequest, GetExperimentResultsResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface GetExperimentResultsCommandInput extends GetExperimentResultsRequest {
    }
    export interface GetExperimentResultsCommandOutput extends GetExperimentResultsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the results of a running or completed experiment. No results are available until
        *        there have been 100 events for each variation and at least 10 minutes have passed since the start of the experiment.</p>
        *          <p>Experiment
        *        results are available up to 63 days after the start of the experiment. They are not available after that because
        *        of CloudWatch data retention policies.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, GetExperimentResultsCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, GetExperimentResultsCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new GetExperimentResultsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetExperimentResultsCommandInput} for command's `input` shape.
        * @see {@link GetExperimentResultsCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class GetExperimentResultsCommand extends $Command<GetExperimentResultsCommandInput, GetExperimentResultsCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: GetExperimentResultsCommandInput;
            constructor(input: GetExperimentResultsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetExperimentResultsCommandInput, GetExperimentResultsCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/GetFeatureCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { GetFeatureRequest, GetFeatureResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface GetFeatureCommandInput extends GetFeatureRequest {
    }
    export interface GetFeatureCommandOutput extends GetFeatureResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the details about one feature. You must already know the feature name. To
        *       retrieve a list of features in your account, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListFeatures.html">ListFeatures</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, GetFeatureCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, GetFeatureCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new GetFeatureCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetFeatureCommandInput} for command's `input` shape.
        * @see {@link GetFeatureCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class GetFeatureCommand extends $Command<GetFeatureCommandInput, GetFeatureCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: GetFeatureCommandInput;
            constructor(input: GetFeatureCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetFeatureCommandInput, GetFeatureCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/GetLaunchCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { GetLaunchRequest, GetLaunchResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface GetLaunchCommandInput extends GetLaunchRequest {
    }
    export interface GetLaunchCommandOutput extends GetLaunchResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the details about one launch. You must already know the
        *        launch name. To retrieve a list of launches in your account, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListLaunches.html">ListLaunches</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, GetLaunchCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, GetLaunchCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new GetLaunchCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLaunchCommandInput} for command's `input` shape.
        * @see {@link GetLaunchCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class GetLaunchCommand extends $Command<GetLaunchCommandInput, GetLaunchCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: GetLaunchCommandInput;
            constructor(input: GetLaunchCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLaunchCommandInput, GetLaunchCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/GetProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { GetProjectRequest, GetProjectResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface GetProjectCommandInput extends GetProjectRequest {
    }
    export interface GetProjectCommandOutput extends GetProjectResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the details about one launch. You must already know the
        *        project name. To retrieve a list of projects in your account, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListProjects.html">ListProjects</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, GetProjectCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, GetProjectCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new GetProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetProjectCommandInput} for command's `input` shape.
        * @see {@link GetProjectCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class GetProjectCommand extends $Command<GetProjectCommandInput, GetProjectCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: GetProjectCommandInput;
            constructor(input: GetProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetProjectCommandInput, GetProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/GetSegmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { GetSegmentRequest, GetSegmentResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface GetSegmentCommandInput extends GetSegmentRequest {
    }
    export interface GetSegmentCommandOutput extends GetSegmentResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the specified segment. Specify the segment you want to view
        *     by specifying its ARN.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, GetSegmentCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, GetSegmentCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new GetSegmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSegmentCommandInput} for command's `input` shape.
        * @see {@link GetSegmentCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class GetSegmentCommand extends $Command<GetSegmentCommandInput, GetSegmentCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: GetSegmentCommandInput;
            constructor(input: GetSegmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSegmentCommandInput, GetSegmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/ListExperimentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { ListExperimentsRequest, ListExperimentsResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface ListExperimentsCommandInput extends ListExperimentsRequest {
    }
    export interface ListExperimentsCommandOutput extends ListExperimentsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns configuration details about all the experiments in the specified project.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, ListExperimentsCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, ListExperimentsCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new ListExperimentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListExperimentsCommandInput} for command's `input` shape.
        * @see {@link ListExperimentsCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class ListExperimentsCommand extends $Command<ListExperimentsCommandInput, ListExperimentsCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: ListExperimentsCommandInput;
            constructor(input: ListExperimentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListExperimentsCommandInput, ListExperimentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/ListFeaturesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { ListFeaturesRequest, ListFeaturesResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface ListFeaturesCommandInput extends ListFeaturesRequest {
    }
    export interface ListFeaturesCommandOutput extends ListFeaturesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns configuration details about all the features in the specified project.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, ListFeaturesCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, ListFeaturesCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new ListFeaturesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFeaturesCommandInput} for command's `input` shape.
        * @see {@link ListFeaturesCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class ListFeaturesCommand extends $Command<ListFeaturesCommandInput, ListFeaturesCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: ListFeaturesCommandInput;
            constructor(input: ListFeaturesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFeaturesCommandInput, ListFeaturesCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/ListLaunchesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { ListLaunchesRequest, ListLaunchesResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface ListLaunchesCommandInput extends ListLaunchesRequest {
    }
    export interface ListLaunchesCommandOutput extends ListLaunchesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns configuration details about all the launches in the specified project.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, ListLaunchesCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, ListLaunchesCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new ListLaunchesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListLaunchesCommandInput} for command's `input` shape.
        * @see {@link ListLaunchesCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class ListLaunchesCommand extends $Command<ListLaunchesCommandInput, ListLaunchesCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: ListLaunchesCommandInput;
            constructor(input: ListLaunchesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListLaunchesCommandInput, ListLaunchesCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/ListProjectsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { ListProjectsRequest, ListProjectsResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface ListProjectsCommandInput extends ListProjectsRequest {
    }
    export interface ListProjectsCommandOutput extends ListProjectsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns configuration details about all the projects in the current Region in your
        *       account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, ListProjectsCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, ListProjectsCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new ListProjectsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListProjectsCommandInput} for command's `input` shape.
        * @see {@link ListProjectsCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class ListProjectsCommand extends $Command<ListProjectsCommandInput, ListProjectsCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: ListProjectsCommandInput;
            constructor(input: ListProjectsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListProjectsCommandInput, ListProjectsCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/ListSegmentReferencesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { ListSegmentReferencesRequest, ListSegmentReferencesResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface ListSegmentReferencesCommandInput extends ListSegmentReferencesRequest {
    }
    export interface ListSegmentReferencesCommandOutput extends ListSegmentReferencesResponse, __MetadataBearer {
    }
    /**
        * <p>Use this operation to find which experiments or launches are using a specified segment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, ListSegmentReferencesCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, ListSegmentReferencesCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new ListSegmentReferencesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSegmentReferencesCommandInput} for command's `input` shape.
        * @see {@link ListSegmentReferencesCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class ListSegmentReferencesCommand extends $Command<ListSegmentReferencesCommandInput, ListSegmentReferencesCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: ListSegmentReferencesCommandInput;
            constructor(input: ListSegmentReferencesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSegmentReferencesCommandInput, ListSegmentReferencesCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/ListSegmentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { ListSegmentsRequest, ListSegmentsResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface ListSegmentsCommandInput extends ListSegmentsRequest {
    }
    export interface ListSegmentsCommandOutput extends ListSegmentsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of audience segments that you have created in your account in this Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, ListSegmentsCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, ListSegmentsCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new ListSegmentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSegmentsCommandInput} for command's `input` shape.
        * @see {@link ListSegmentsCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class ListSegmentsCommand extends $Command<ListSegmentsCommandInput, ListSegmentsCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: ListSegmentsCommandInput;
            constructor(input: ListSegmentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSegmentsCommandInput, ListSegmentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Displays the tags associated with an Evidently resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, ListTagsForResourceCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, ListTagsForResourceCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/PutProjectEventsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { PutProjectEventsRequest, PutProjectEventsResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface PutProjectEventsCommandInput extends PutProjectEventsRequest {
    }
    export interface PutProjectEventsCommandOutput extends PutProjectEventsResponse, __MetadataBearer {
    }
    /**
        * <p>Sends performance events to Evidently. These events can be used to evaluate a launch or
        *       an experiment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, PutProjectEventsCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, PutProjectEventsCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new PutProjectEventsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutProjectEventsCommandInput} for command's `input` shape.
        * @see {@link PutProjectEventsCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class PutProjectEventsCommand extends $Command<PutProjectEventsCommandInput, PutProjectEventsCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: PutProjectEventsCommandInput;
            constructor(input: PutProjectEventsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutProjectEventsCommandInput, PutProjectEventsCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/StartExperimentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { StartExperimentRequest, StartExperimentResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface StartExperimentCommandInput extends StartExperimentRequest {
    }
    export interface StartExperimentCommandOutput extends StartExperimentResponse, __MetadataBearer {
    }
    /**
        * <p>Starts an existing experiment. To create an experiment,
        *         use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateExperiment.html">CreateExperiment</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, StartExperimentCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, StartExperimentCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new StartExperimentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartExperimentCommandInput} for command's `input` shape.
        * @see {@link StartExperimentCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class StartExperimentCommand extends $Command<StartExperimentCommandInput, StartExperimentCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: StartExperimentCommandInput;
            constructor(input: StartExperimentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartExperimentCommandInput, StartExperimentCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/StartLaunchCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { StartLaunchRequest, StartLaunchResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface StartLaunchCommandInput extends StartLaunchRequest {
    }
    export interface StartLaunchCommandOutput extends StartLaunchResponse, __MetadataBearer {
    }
    /**
        * <p>Starts an existing launch. To create a launch,
        *        use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateLaunch.html">CreateLaunch</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, StartLaunchCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, StartLaunchCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new StartLaunchCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartLaunchCommandInput} for command's `input` shape.
        * @see {@link StartLaunchCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class StartLaunchCommand extends $Command<StartLaunchCommandInput, StartLaunchCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: StartLaunchCommandInput;
            constructor(input: StartLaunchCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartLaunchCommandInput, StartLaunchCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/StopExperimentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { StopExperimentRequest, StopExperimentResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface StopExperimentCommandInput extends StopExperimentRequest {
    }
    export interface StopExperimentCommandOutput extends StopExperimentResponse, __MetadataBearer {
    }
    /**
        * <p>Stops an experiment that is currently running. If you stop an experiment, you can't
        *       resume it or restart it.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, StopExperimentCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, StopExperimentCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new StopExperimentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopExperimentCommandInput} for command's `input` shape.
        * @see {@link StopExperimentCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class StopExperimentCommand extends $Command<StopExperimentCommandInput, StopExperimentCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: StopExperimentCommandInput;
            constructor(input: StopExperimentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopExperimentCommandInput, StopExperimentCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/StopLaunchCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { StopLaunchRequest, StopLaunchResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface StopLaunchCommandInput extends StopLaunchRequest {
    }
    export interface StopLaunchCommandOutput extends StopLaunchResponse, __MetadataBearer {
    }
    /**
        * <p>Stops a launch that is currently running. After you stop a launch, you will not be able to resume it or restart it.
        *        Also, it
        *        will not be evaluated as a rule for traffic allocation, and the traffic that was allocated to the launch
        *        will instead be available to the feature's experiment, if there is one. Otherwise, all traffic
        *        will be served the default variation after the launch is stopped.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, StopLaunchCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, StopLaunchCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new StopLaunchCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopLaunchCommandInput} for command's `input` shape.
        * @see {@link StopLaunchCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class StopLaunchCommand extends $Command<StopLaunchCommandInput, StopLaunchCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: StopLaunchCommandInput;
            constructor(input: StopLaunchCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopLaunchCommandInput, StopLaunchCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Assigns one or more tags (key-value pairs) to the specified CloudWatch Evidently resource. Projects,
        *        features, launches, and experiments can be tagged.</p>
        *          <p>Tags can help you organize and categorize your resources. You can also use them to scope user
        *        permissions by granting a user
        *        permission to access or change only resources with certain tag values.</p>
        *          <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p>
        *          <p>You can use the <code>TagResource</code> action with a resource that already has tags.
        *        If you specify a new tag key for the resource,
        *        this tag is appended to the list of tags associated
        *        with the alarm. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces
        *        the previous value for that tag.</p>
        *          <p>You can associate as many as 50 tags with a resource.</p>
        *          <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, TagResourceCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, TagResourceCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/TestSegmentPatternCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { TestSegmentPatternRequest, TestSegmentPatternResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface TestSegmentPatternCommandInput extends TestSegmentPatternRequest {
    }
    export interface TestSegmentPatternCommandOutput extends TestSegmentPatternResponse, __MetadataBearer {
    }
    /**
        * <p>Use this operation to test a rules pattern that you plan to use to create an audience segment.
        *       For more information about segments, see <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateSegment.html">CreateSegment</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, TestSegmentPatternCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, TestSegmentPatternCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new TestSegmentPatternCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TestSegmentPatternCommandInput} for command's `input` shape.
        * @see {@link TestSegmentPatternCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class TestSegmentPatternCommand extends $Command<TestSegmentPatternCommandInput, TestSegmentPatternCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: TestSegmentPatternCommandInput;
            constructor(input: TestSegmentPatternCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TestSegmentPatternCommandInput, TestSegmentPatternCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes one or more tags from the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, UntagResourceCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, UntagResourceCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/UpdateExperimentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { UpdateExperimentRequest, UpdateExperimentResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface UpdateExperimentCommandInput extends UpdateExperimentRequest {
    }
    export interface UpdateExperimentCommandOutput extends UpdateExperimentResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an Evidently experiment. </p>
        *          <p>Don't use this operation to update an experiment's tag. Instead, use
        *       <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html">TagResource</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, UpdateExperimentCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, UpdateExperimentCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new UpdateExperimentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateExperimentCommandInput} for command's `input` shape.
        * @see {@link UpdateExperimentCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class UpdateExperimentCommand extends $Command<UpdateExperimentCommandInput, UpdateExperimentCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: UpdateExperimentCommandInput;
            constructor(input: UpdateExperimentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateExperimentCommandInput, UpdateExperimentCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/UpdateFeatureCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { UpdateFeatureRequest, UpdateFeatureResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface UpdateFeatureCommandInput extends UpdateFeatureRequest {
    }
    export interface UpdateFeatureCommandOutput extends UpdateFeatureResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an existing feature.</p>
        *          <p>You can't use this operation to update the tags of an existing feature. Instead, use
        *       <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html">TagResource</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, UpdateFeatureCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, UpdateFeatureCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new UpdateFeatureCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateFeatureCommandInput} for command's `input` shape.
        * @see {@link UpdateFeatureCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class UpdateFeatureCommand extends $Command<UpdateFeatureCommandInput, UpdateFeatureCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: UpdateFeatureCommandInput;
            constructor(input: UpdateFeatureCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateFeatureCommandInput, UpdateFeatureCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/UpdateLaunchCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { UpdateLaunchRequest, UpdateLaunchResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface UpdateLaunchCommandInput extends UpdateLaunchRequest {
    }
    export interface UpdateLaunchCommandOutput extends UpdateLaunchResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a launch of a given feature. </p>
        *          <p>Don't use this operation to update the tags of an existing launch. Instead, use
        *       <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html">TagResource</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, UpdateLaunchCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, UpdateLaunchCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new UpdateLaunchCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateLaunchCommandInput} for command's `input` shape.
        * @see {@link UpdateLaunchCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class UpdateLaunchCommand extends $Command<UpdateLaunchCommandInput, UpdateLaunchCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: UpdateLaunchCommandInput;
            constructor(input: UpdateLaunchCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateLaunchCommandInput, UpdateLaunchCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/UpdateProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { UpdateProjectRequest, UpdateProjectResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface UpdateProjectCommandInput extends UpdateProjectRequest {
    }
    export interface UpdateProjectCommandOutput extends UpdateProjectResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the description of an existing project.</p>
        *          <p>To create a new project, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateProject.html">CreateProject</a>.</p>
        *          <p>Don't use this operation to update the data storage options of a project. Instead, use
        *        <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateProjectDataDelivery.html">UpdateProjectDataDelivery</a>. </p>
        *          <p>Don't use this operation to update the tags of a project. Instead, use
        *        <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html">TagResource</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, UpdateProjectCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, UpdateProjectCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new UpdateProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateProjectCommandInput} for command's `input` shape.
        * @see {@link UpdateProjectCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class UpdateProjectCommand extends $Command<UpdateProjectCommandInput, UpdateProjectCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: UpdateProjectCommandInput;
            constructor(input: UpdateProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateProjectCommandInput, UpdateProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/UpdateProjectDataDeliveryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EvidentlyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient";
    import { UpdateProjectDataDeliveryRequest, UpdateProjectDataDeliveryResponse } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0";
    export interface UpdateProjectDataDeliveryCommandInput extends UpdateProjectDataDeliveryRequest {
    }
    export interface UpdateProjectDataDeliveryCommandOutput extends UpdateProjectDataDeliveryResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the data storage options for this project. If you store evaluation events, you an
        *       keep them and analyze them on your own. If you choose not to store evaluation events,
        *       Evidently deletes them after using them to produce metrics and other experiment results that
        *       you can view.</p>
        *          <p>You can't specify both <code>cloudWatchLogs</code> and <code>s3Destination</code> in the same operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EvidentlyClient, UpdateProjectDataDeliveryCommand } from "@aws-sdk/client-evidently"; // ES Modules import
        * // const { EvidentlyClient, UpdateProjectDataDeliveryCommand } = require("@aws-sdk/client-evidently"); // CommonJS import
        * const client = new EvidentlyClient(config);
        * const command = new UpdateProjectDataDeliveryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateProjectDataDeliveryCommandInput} for command's `input` shape.
        * @see {@link UpdateProjectDataDeliveryCommandOutput} for command's `response` shape.
        * @see {@link EvidentlyClientResolvedConfig | config} for EvidentlyClient's `config` shape.
        *
        */
    export class UpdateProjectDataDeliveryCommand extends $Command<UpdateProjectDataDeliveryCommandInput, UpdateProjectDataDeliveryCommandOutput, EvidentlyClientResolvedConfig> {
            readonly input: UpdateProjectDataDeliveryCommandInput;
            constructor(input: UpdateProjectDataDeliveryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EvidentlyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateProjectDataDeliveryCommandInput, UpdateProjectDataDeliveryCommandOutput>;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/EvidentlyClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { BatchEvaluateFeatureCommandInput, BatchEvaluateFeatureCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/BatchEvaluateFeatureCommand";
    import { CreateExperimentCommandInput, CreateExperimentCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/CreateExperimentCommand";
    import { CreateFeatureCommandInput, CreateFeatureCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/CreateFeatureCommand";
    import { CreateLaunchCommandInput, CreateLaunchCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/CreateLaunchCommand";
    import { CreateProjectCommandInput, CreateProjectCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/CreateProjectCommand";
    import { CreateSegmentCommandInput, CreateSegmentCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/CreateSegmentCommand";
    import { DeleteExperimentCommandInput, DeleteExperimentCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/DeleteExperimentCommand";
    import { DeleteFeatureCommandInput, DeleteFeatureCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/DeleteFeatureCommand";
    import { DeleteLaunchCommandInput, DeleteLaunchCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/DeleteLaunchCommand";
    import { DeleteProjectCommandInput, DeleteProjectCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/DeleteProjectCommand";
    import { DeleteSegmentCommandInput, DeleteSegmentCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/DeleteSegmentCommand";
    import { EvaluateFeatureCommandInput, EvaluateFeatureCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/EvaluateFeatureCommand";
    import { GetExperimentCommandInput, GetExperimentCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/GetExperimentCommand";
    import { GetExperimentResultsCommandInput, GetExperimentResultsCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/GetExperimentResultsCommand";
    import { GetFeatureCommandInput, GetFeatureCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/GetFeatureCommand";
    import { GetLaunchCommandInput, GetLaunchCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/GetLaunchCommand";
    import { GetProjectCommandInput, GetProjectCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/GetProjectCommand";
    import { GetSegmentCommandInput, GetSegmentCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/GetSegmentCommand";
    import { ListExperimentsCommandInput, ListExperimentsCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/ListExperimentsCommand";
    import { ListFeaturesCommandInput, ListFeaturesCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/ListFeaturesCommand";
    import { ListLaunchesCommandInput, ListLaunchesCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/ListLaunchesCommand";
    import { ListProjectsCommandInput, ListProjectsCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/ListProjectsCommand";
    import { ListSegmentReferencesCommandInput, ListSegmentReferencesCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/ListSegmentReferencesCommand";
    import { ListSegmentsCommandInput, ListSegmentsCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/ListSegmentsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/ListTagsForResourceCommand";
    import { PutProjectEventsCommandInput, PutProjectEventsCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/PutProjectEventsCommand";
    import { StartExperimentCommandInput, StartExperimentCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/StartExperimentCommand";
    import { StartLaunchCommandInput, StartLaunchCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/StartLaunchCommand";
    import { StopExperimentCommandInput, StopExperimentCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/StopExperimentCommand";
    import { StopLaunchCommandInput, StopLaunchCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/StopLaunchCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/TagResourceCommand";
    import { TestSegmentPatternCommandInput, TestSegmentPatternCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/TestSegmentPatternCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/UntagResourceCommand";
    import { UpdateExperimentCommandInput, UpdateExperimentCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/UpdateExperimentCommand";
    import { UpdateFeatureCommandInput, UpdateFeatureCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/UpdateFeatureCommand";
    import { UpdateLaunchCommandInput, UpdateLaunchCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/UpdateLaunchCommand";
    import { UpdateProjectCommandInput, UpdateProjectCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/UpdateProjectCommand";
    import { UpdateProjectDataDeliveryCommandInput, UpdateProjectDataDeliveryCommandOutput } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/commands/UpdateProjectDataDeliveryCommand";
    export type ServiceInputTypes = BatchEvaluateFeatureCommandInput | CreateExperimentCommandInput | CreateFeatureCommandInput | CreateLaunchCommandInput | CreateProjectCommandInput | CreateSegmentCommandInput | DeleteExperimentCommandInput | DeleteFeatureCommandInput | DeleteLaunchCommandInput | DeleteProjectCommandInput | DeleteSegmentCommandInput | EvaluateFeatureCommandInput | GetExperimentCommandInput | GetExperimentResultsCommandInput | GetFeatureCommandInput | GetLaunchCommandInput | GetProjectCommandInput | GetSegmentCommandInput | ListExperimentsCommandInput | ListFeaturesCommandInput | ListLaunchesCommandInput | ListProjectsCommandInput | ListSegmentReferencesCommandInput | ListSegmentsCommandInput | ListTagsForResourceCommandInput | PutProjectEventsCommandInput | StartExperimentCommandInput | StartLaunchCommandInput | StopExperimentCommandInput | StopLaunchCommandInput | TagResourceCommandInput | TestSegmentPatternCommandInput | UntagResourceCommandInput | UpdateExperimentCommandInput | UpdateFeatureCommandInput | UpdateLaunchCommandInput | UpdateProjectCommandInput | UpdateProjectDataDeliveryCommandInput;
    export type ServiceOutputTypes = BatchEvaluateFeatureCommandOutput | CreateExperimentCommandOutput | CreateFeatureCommandOutput | CreateLaunchCommandOutput | CreateProjectCommandOutput | CreateSegmentCommandOutput | DeleteExperimentCommandOutput | DeleteFeatureCommandOutput | DeleteLaunchCommandOutput | DeleteProjectCommandOutput | DeleteSegmentCommandOutput | EvaluateFeatureCommandOutput | GetExperimentCommandOutput | GetExperimentResultsCommandOutput | GetFeatureCommandOutput | GetLaunchCommandOutput | GetProjectCommandOutput | GetSegmentCommandOutput | ListExperimentsCommandOutput | ListFeaturesCommandOutput | ListLaunchesCommandOutput | ListProjectsCommandOutput | ListSegmentReferencesCommandOutput | ListSegmentsCommandOutput | ListTagsForResourceCommandOutput | PutProjectEventsCommandOutput | StartExperimentCommandOutput | StartLaunchCommandOutput | StopExperimentCommandOutput | StopLaunchCommandOutput | TagResourceCommandOutput | TestSegmentPatternCommandOutput | UntagResourceCommandOutput | UpdateExperimentCommandOutput | UpdateFeatureCommandOutput | UpdateLaunchCommandOutput | UpdateProjectCommandOutput | UpdateProjectDataDeliveryCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type EvidentlyClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of EvidentlyClient class constructor that set the region, credentials and other options.
        */
    export interface EvidentlyClientConfig extends EvidentlyClientConfigType {
    }
    type EvidentlyClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of EvidentlyClient class. This is resolved and normalized from the {@link EvidentlyClientConfig | constructor configuration interface}.
        */
    export interface EvidentlyClientResolvedConfig extends EvidentlyClientResolvedConfigType {
    }
    /**
        * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving
        *       them to a specified percentage
        *       of your users while you roll out the feature. You can monitor the performance of the new feature
        *       to help you decide when to ramp up traffic to your users. This helps you
        *       reduce risk and identify unintended consequences before you fully launch the feature.</p>
        *          <p>You can also conduct A/B experiments to make feature design decisions based on evidence
        *       and data. An experiment can test as many as five variations at once. Evidently collects
        *       experiment data and analyzes it using statistical methods. It also provides clear
        *       recommendations about which variations perform better. You can test both user-facing features
        *       and backend features.</p>
        */
    export class EvidentlyClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, EvidentlyClientResolvedConfig> {
            /**
                * The resolved configuration of EvidentlyClient class. This is resolved and normalized from the {@link EvidentlyClientConfig | constructor configuration interface}.
                */
            readonly config: EvidentlyClientResolvedConfig;
            constructor(configuration: EvidentlyClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType, LazyJsonString as __LazyJsonString } from "@aws-sdk/smithy-client";
    import { EvidentlyServiceException as __BaseException } from "@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/EvidentlyServiceException";
    /**
        * <p>You do not have sufficient permissions to perform this action. </p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>This structure assigns a feature variation to one user session.</p>
        */
    export interface EvaluationRequest {
            /**
                * <p>The name of the feature being evaluated.</p>
                */
            feature: string | undefined;
            /**
                * <p>An internal ID that represents a unique user session of the application. This
                *         <code>entityID</code> is checked against any override rules assigned for this
                *       feature.</p>
                */
            entityId: string | undefined;
            /**
                * <p>A JSON block of attributes that you can optionally pass in. This JSON block is included
                *        in the evaluation events sent to Evidently from the user session. </p>
                */
            evaluationContext?: __LazyJsonString | string;
    }
    export namespace EvaluationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EvaluationRequest) => any;
    }
    export interface BatchEvaluateFeatureRequest {
            /**
                * <p>The name or ARN of the project that contains the feature being evaluated.</p>
                */
            project: string | undefined;
            /**
                * <p>An array of structures, where each structure assigns a feature variation to one user session.</p>
                */
            requests: EvaluationRequest[] | undefined;
    }
    export namespace BatchEvaluateFeatureRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchEvaluateFeatureRequest) => any;
    }
    /**
        * <p>The value assigned to a feature variation. This structure must contain exactly one
        *       field. It can be <code>boolValue</code>, <code>doubleValue</code>, <code>longValue</code>, or
        *         <code>stringValue</code>.</p>
        */
    export type VariableValue = VariableValue.BoolValueMember | VariableValue.DoubleValueMember | VariableValue.LongValueMember | VariableValue.StringValueMember | VariableValue.$UnknownMember;
    export namespace VariableValue {
            /**
                * <p>If this feature uses the Boolean variation type, this field contains the Boolean value of
                *       this variation.</p>
                */
            interface BoolValueMember {
                    boolValue: boolean;
                    stringValue?: never;
                    longValue?: never;
                    doubleValue?: never;
                    $unknown?: never;
            }
            /**
                * <p>If this feature uses the string variation type, this field contains the string value of
                *        this variation.</p>
                */
            interface StringValueMember {
                    boolValue?: never;
                    stringValue: string;
                    longValue?: never;
                    doubleValue?: never;
                    $unknown?: never;
            }
            /**
                * <p>If this feature uses the long variation type, this field contains the long value of
                *        this variation.</p>
                */
            interface LongValueMember {
                    boolValue?: never;
                    stringValue?: never;
                    longValue: number;
                    doubleValue?: never;
                    $unknown?: never;
            }
            /**
                * <p>If this feature uses the double integer variation type, this field contains the double integer value of
                *        this variation.</p>
                */
            interface DoubleValueMember {
                    boolValue?: never;
                    stringValue?: never;
                    longValue?: never;
                    doubleValue: number;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    boolValue?: never;
                    stringValue?: never;
                    longValue?: never;
                    doubleValue?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    boolValue: (value: boolean) => T;
                    stringValue: (value: string) => T;
                    longValue: (value: number) => T;
                    doubleValue: (value: number) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: VariableValue, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VariableValue) => any;
    }
    /**
        * <p>This structure displays the results of one feature evaluation assignment to one user
        *       session.</p>
        */
    export interface EvaluationResult {
            /**
                * <p>The name or ARN of the project that contains the feature being evaluated.</p>
                */
            project?: string;
            /**
                * <p>The name of the feature being evaluated.</p>
                */
            feature: string | undefined;
            /**
                * <p>The name of the variation that was served to the user session.</p>
                */
            variation?: string;
            /**
                * <p>The value assigned to this variation to differentiate it from the other variations of this feature.</p>
                */
            value?: VariableValue;
            /**
                * <p>An internal ID that represents a unique user session of the application.</p>
                */
            entityId: string | undefined;
            /**
                * <p>Specifies the reason that the user session was assigned this variation. Possible values
                *       include <code>DEFAULT</code>, meaning the user was served the default variation;
                *         <code>LAUNCH_RULE_MATCH</code>, if the user session was enrolled in a launch; or
                *         <code>EXPERIMENT_RULE_MATCH</code>, if the user session was enrolled in an
                *       experiment.</p>
                */
            reason?: string;
            /**
                * <p>If this user was assigned to a launch or experiment, this field lists the launch or experiment name.</p>
                */
            details?: __LazyJsonString | string;
    }
    export namespace EvaluationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EvaluationResult) => any;
    }
    export interface BatchEvaluateFeatureResponse {
            /**
                * <p>An array of structures, where each structure displays the results of one feature evaluation
                *        assignment to one user session.</p>
                */
            results?: EvaluationResult[];
    }
    export namespace BatchEvaluateFeatureResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchEvaluateFeatureResponse) => any;
    }
    /**
        * <p>The request references a resource that does not exist.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * <p>The ID of the resource that caused the exception.</p>
                */
            resourceId?: string;
            /**
                * <p>The type of the resource that is associated with the error.</p>
                */
            resourceType?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>The request was denied because of request throttling. Retry the request.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            /**
                * <p>The ID of the service that is associated with the error.</p>
                */
            serviceCode?: string;
            /**
                * <p>The ID of the service quota that was exceeded.</p>
                */
            quotaCode?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    /**
        * <p>A structure containing an error name and message.</p>
        */
    export interface ValidationExceptionField {
            /**
                * <p>The error name.</p>
                */
            name: string | undefined;
            /**
                * <p>The error message.</p>
                */
            message: string | undefined;
    }
    export namespace ValidationExceptionField {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidationExceptionField) => any;
    }
    export enum ValidationExceptionReason {
            CANNOT_PARSE = "cannotParse",
            FIELD_VALIDATION_FAILED = "fieldValidationFailed",
            OTHER = "other",
            UNKNOWN_OPERATION = "unknownOperation"
    }
    /**
        * <p>The value of a parameter in the request caused an error.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            /**
                * <p>A reason for the error.</p>
                */
            reason?: ValidationExceptionReason | string;
            /**
                * <p>The parameter that caused the exception.</p>
                */
            fieldList?: ValidationExceptionField[];
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    export enum ChangeDirectionEnum {
            DECREASE = "DECREASE",
            INCREASE = "INCREASE"
    }
    /**
        * <p>A structure containing the CloudWatch Logs log group where the project stores evaluation
        *        events.</p>
        */
    export interface CloudWatchLogsDestination {
            /**
                * <p>The name of the log group where the project stores evaluation
                *        events.</p>
                */
            logGroup?: string;
    }
    export namespace CloudWatchLogsDestination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloudWatchLogsDestination) => any;
    }
    /**
        * <p>A structure containing the CloudWatch Logs log group where the project stores evaluation
        *        events.</p>
        */
    export interface CloudWatchLogsDestinationConfig {
            /**
                * <p>The name of the log group where the project stores evaluation
                *        events.</p>
                */
            logGroup?: string;
    }
    export namespace CloudWatchLogsDestinationConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloudWatchLogsDestinationConfig) => any;
    }
    /**
        * <p>A resource was in an inconsistent state during an update or a deletion.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * <p>The ID of the resource that caused the exception.</p>
                */
            resourceId?: string;
            /**
                * <p>The type of the resource that is associated with the error.</p>
                */
            resourceType?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>This structure defines a metric that you want to use to evaluate the variations
        *        during a launch or experiment.</p>
        */
    export interface MetricDefinitionConfig {
            /**
                * <p>A name for the metric.</p>
                */
            name: string | undefined;
            /**
                * <p>The entity, such as a user or session, that does an action that causes a metric
                *        value to be recorded. An example is <code>userDetails.userID</code>.</p>
                */
            entityIdKey: string | undefined;
            /**
                * <p>The value that is tracked to produce the metric.</p>
                */
            valueKey: string | undefined;
            /**
                * <p>The EventBridge event pattern that defines how the metric is recorded.</p>
                *          <p>For more information about EventBridge event patterns, see
                *        <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html">Amazon EventBridge event patterns</a>.</p>
                */
            eventPattern?: __LazyJsonString | string;
            /**
                * <p>A label for the units that the metric is measuring.</p>
                */
            unitLabel?: string;
    }
    export namespace MetricDefinitionConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricDefinitionConfig) => any;
    }
    /**
        * <p>Use this structure to tell Evidently whether higher or lower values are desired for a metric that is
        *        used in an experiment.</p>
        */
    export interface MetricGoalConfig {
            /**
                * <p>A structure that contains details about the metric.</p>
                */
            metricDefinition: MetricDefinitionConfig | undefined;
            /**
                * <p>
                *             <code>INCREASE</code> means that a variation with a higher number for this metric is performing
                *        better.</p>
                *          <p>
                *             <code>DECREASE</code> means that a variation with a lower number for this metric is performing
                *        better.</p>
                */
            desiredChange?: ChangeDirectionEnum | string;
    }
    export namespace MetricGoalConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricGoalConfig) => any;
    }
    /**
        * <p>A structure that contains the configuration of which variation to use as the "control"
        *       version. The "control" version  is used for comparison with other variations. This structure
        *       also specifies how much experiment traffic is allocated to each variation.</p>
        */
    export interface OnlineAbConfig {
            /**
                * <p>The name of the variation that is to be the default variation that the other variations are compared to.</p>
                */
            controlTreatmentName?: string;
            /**
                * <p>A set of key-value pairs. The keys are variation names, and the values are the portion
                *       of experiment traffic to be assigned to that variation. Specify the traffic portion in
                *       thousandths of a percent, so 20,000 for a variation would allocate 20% of the experiment
                *       traffic to that variation.</p>
                */
            treatmentWeights?: Record<string, number>;
    }
    export namespace OnlineAbConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OnlineAbConfig) => any;
    }
    /**
        * <p>A structure that defines one treatment in an experiment. A treatment is a variation of the feature
        *       that you are including in the experiment.</p>
        */
    export interface TreatmentConfig {
            /**
                * <p>A name for this treatment.</p>
                */
            name: string | undefined;
            /**
                * <p>A description for this treatment.</p>
                */
            description?: string;
            /**
                * <p>The feature that this experiment is testing.</p>
                */
            feature: string | undefined;
            /**
                * <p>The name of the variation to use as this treatment in the experiment.</p>
                */
            variation: string | undefined;
    }
    export namespace TreatmentConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TreatmentConfig) => any;
    }
    export interface CreateExperimentRequest {
            /**
                * <p>The name or ARN of the project that you want to create the new experiment in.</p>
                */
            project: string | undefined;
            /**
                * <p>A name for the new experiment.</p>
                */
            name: string | undefined;
            /**
                * <p>An optional description of the experiment.</p>
                */
            description?: string;
            /**
                * <p>An array of structures that describe the configuration of each feature variation used in the experiment.</p>
                */
            treatments: TreatmentConfig[] | undefined;
            /**
                * <p>An array of structures that defines the metrics used for the experiment, and whether a higher
                *       or lower value for each metric is the goal.</p>
                */
            metricGoals: MetricGoalConfig[] | undefined;
            /**
                * <p>When Evidently assigns a particular user session to an experiment, it must use a randomization ID
                *        to determine which variation the user session is served. This randomization ID is a combination of the entity ID
                *        and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses
                *        the experiment name as the <code>randomizationSalt</code>.</p>
                */
            randomizationSalt?: string;
            /**
                * <p>The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience
                *       is the total audience minus the audience that you have allocated to overrides or current launches of
                *       this feature.</p>
                *          <p>This is represented in thousandths of a percent. For example, specify 10,000 to allocate 10% of the available audience.</p>
                */
            samplingRate?: number;
            /**
                * <p>A structure that contains the configuration of which variation to use as the "control"
                *       version. tThe "control" version is used for comparison with other variations. This structure
                *       also specifies how much experiment traffic is allocated to each variation.</p>
                */
            onlineAbConfig?: OnlineAbConfig;
            /**
                * <p>Specifies an audience <i>segment</i> to use in the experiment. When a segment is used in an experiment, only
                *       user sessions that match the segment pattern are used in the experiment.</p>
                */
            segment?: string;
            /**
                * <p>Assigns one or more tags (key-value pairs) to the experiment.</p>
                *          <p>Tags can help you organize and categorize your resources. You can also use them to scope user
                *        permissions by granting a user
                *        permission to access or change only resources with certain tag values.</p>
                *          <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p>
                *
                *          <p>You can associate as many as 50 tags with an experiment.</p>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateExperimentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateExperimentRequest) => any;
    }
    /**
        * <p>This structure contains the date and time that the experiment started and ended.</p>
        */
    export interface ExperimentExecution {
            /**
                * <p>The date and time that the experiment started.</p>
                */
            startedTime?: Date;
            /**
                * <p>The date and time that the experiment ended.</p>
                */
            endedTime?: Date;
    }
    export namespace ExperimentExecution {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentExecution) => any;
    }
    /**
        * <p>This structure defines a metric that is being used to evaluate the variations
        *       during a launch or experiment.</p>
        */
    export interface MetricDefinition {
            /**
                * <p>The name of the metric.</p>
                */
            name?: string;
            /**
                * <p>The entity, such as a user or session, that does an action that causes a metric
                *       value to be recorded.</p>
                */
            entityIdKey?: string;
            /**
                * <p>The value that is tracked to produce the metric.</p>
                */
            valueKey?: string;
            /**
                * <p>The EventBridge event pattern that defines how the metric is recorded.</p>
                *          <p>For more information about EventBridge event patterns, see
                *        <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html">Amazon EventBridge event patterns</a>.</p>
                */
            eventPattern?: __LazyJsonString | string;
            /**
                * <p>The label for the units that the metric is measuring.</p>
                */
            unitLabel?: string;
    }
    export namespace MetricDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricDefinition) => any;
    }
    /**
        * <p>A structure that tells Evidently whether higher or lower values are desired for a metric that is
        *        used in an experiment.</p>
        */
    export interface MetricGoal {
            /**
                * <p>A structure that contains details about the metric.</p>
                */
            metricDefinition: MetricDefinition | undefined;
            /**
                * <p>
                *             <code>INCREASE</code> means that a variation with a higher number for this metric is performing
                *       better.</p>
                *          <p>
                *             <code>DECREASE</code> means that a variation with a lower number for this metric is performing
                *      better.</p>
                */
            desiredChange?: ChangeDirectionEnum | string;
    }
    export namespace MetricGoal {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricGoal) => any;
    }
    /**
        * <p>A structure that contains the configuration of which variation to use as the "control"
        *       version. The "control" version is used for comparison with other variations. This structure
        *       also specifies how much experiment traffic is allocated to each variation.</p>
        */
    export interface OnlineAbDefinition {
            /**
                * <p>The name of the variation that is the default variation that the other variations are compared to.</p>
                */
            controlTreatmentName?: string;
            /**
                * <p>A set of key-value pairs.  The keys are variation names, and the values are the portion
                *       of experiment traffic to be assigned to that variation. The traffic portion is specified in
                *       thousandths of a percent, so 20,000 for a variation would allocate 20% of the experiment
                *       traffic to that variation.</p>
                */
            treatmentWeights?: Record<string, number>;
    }
    export namespace OnlineAbDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OnlineAbDefinition) => any;
    }
    /**
        * <p>This structure contains the time and date that Evidently completed the analysis of the experiment.</p>
        */
    export interface ExperimentSchedule {
            /**
                * <p>The time and date that Evidently completed the analysis of the experiment.</p>
                */
            analysisCompleteTime?: Date;
    }
    export namespace ExperimentSchedule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentSchedule) => any;
    }
    export enum ExperimentStatus {
            CANCELLED = "CANCELLED",
            COMPLETED = "COMPLETED",
            CREATED = "CREATED",
            RUNNING = "RUNNING",
            UPDATING = "UPDATING"
    }
    /**
        * <p>A structure that defines one treatment in an experiment. A treatment is a variation of the feature
        *        that you are including in the experiment.</p>
        */
    export interface Treatment {
            /**
                * <p>The name of this treatment.</p>
                */
            name: string | undefined;
            /**
                * <p>The description of the treatment.</p>
                */
            description?: string;
            /**
                * <p>The feature variation used for this treatment. This is a key-value pair. The key is the
                *       feature name, and the value is the variation name.</p>
                */
            featureVariations?: Record<string, string>;
    }
    export namespace Treatment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Treatment) => any;
    }
    export enum ExperimentType {
            ONLINE_AB_EXPERIMENT = "aws.evidently.onlineab"
    }
    /**
        * <p>A structure containing the configuration details of an experiment.</p>
        */
    export interface Experiment {
            /**
                * <p>The ARN of the experiment.</p>
                */
            arn: string | undefined;
            /**
                * <p>The name of the experiment.</p>
                */
            name: string | undefined;
            /**
                * <p>The name or ARN of the project that contains this experiment.</p>
                */
            project?: string;
            /**
                * <p>The current state of the experiment.</p>
                */
            status: ExperimentStatus | string | undefined;
            /**
                * <p>If the experiment was stopped, this is the string that was entered by the person who
                *       stopped the experiment, to explain why it was stopped.</p>
                */
            statusReason?: string;
            /**
                * <p>A description of the experiment.</p>
                */
            description?: string;
            /**
                * <p>The date and time that the experiment is first created.</p>
                */
            createdTime: Date | undefined;
            /**
                * <p>The date and time that the experiment was most recently updated.</p>
                */
            lastUpdatedTime: Date | undefined;
            /**
                * <p>A structure that contains the time and date that Evidently completed the analysis of the experiment.</p>
                */
            schedule?: ExperimentSchedule;
            /**
                * <p>A structure that contains the date and time that the experiment started and ended.</p>
                */
            execution?: ExperimentExecution;
            /**
                * <p>An array of structures that describe the configuration of each feature variation used in the experiment.</p>
                */
            treatments?: Treatment[];
            /**
                * <p>An array of structures that defines the metrics used for the experiment, and whether a higher
                *       or lower value for each metric is the goal.</p>
                */
            metricGoals?: MetricGoal[];
            /**
                * <p>This value is used when Evidently assigns a particular user session to the experiment. It
                *       helps create a randomization ID to determine which variation the user session is served. This
                *       randomization ID is a combination of the entity ID and <code>randomizationSalt</code>.</p>
                */
            randomizationSalt?: string;
            /**
                * <p>In thousandths of a percent, the amount of the available audience that is allocated to this experiment.
                *       The available audience
                *       is the total audience minus the audience that you have allocated to overrides or current launches of
                *       this feature.</p>
                *          <p>This is represented in thousandths of a percent, so a value of 10,000 is 10% of the available audience.</p>
                */
            samplingRate?: number;
            /**
                * <p>The audience segment being used for the experiment, if a segment is being used.</p>
                */
            segment?: string;
            /**
                * <p>The type of this experiment. Currently, this value must be <code>aws.experiment.onlineab</code>.</p>
                */
            type: ExperimentType | string | undefined;
            /**
                * <p>A structure that contains the configuration of which variation to use as the "control"
                *       version. The "control" version is used for comparison with other variations. This structure
                *       also specifies how much experiment traffic is allocated to each variation.</p>
                */
            onlineAbDefinition?: OnlineAbDefinition;
            /**
                * <p>The list of tag keys and values associated with this experiment.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace Experiment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Experiment) => any;
    }
    export interface CreateExperimentResponse {
            /**
                * <p>A structure containing the configuration details of the experiment
                *        that you created.</p>
                */
            experiment: Experiment | undefined;
    }
    export namespace CreateExperimentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateExperimentResponse) => any;
    }
    /**
        * <p>The request would cause a service quota to be exceeded.</p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            /**
                * <p>The ID of the resource that caused the exception.</p>
                */
            resourceId?: string;
            /**
                * <p>The type of the resource that is associated with the error.</p>
                */
            resourceType?: string;
            /**
                * <p>The ID of the service that is associated with the error.</p>
                */
            serviceCode?: string;
            /**
                * <p>The ID of the service quota that was exceeded.</p>
                */
            quotaCode?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    export enum FeatureEvaluationStrategy {
            ALL_RULES = "ALL_RULES",
            DEFAULT_VARIATION = "DEFAULT_VARIATION"
    }
    /**
        * <p>This structure contains the name and variation value of one variation of a feature.</p>
        */
    export interface VariationConfig {
            /**
                * <p>The name of the variation.</p>
                */
            name: string | undefined;
            /**
                * <p>The value assigned to this variation.</p>
                */
            value: VariableValue | undefined;
    }
    export namespace VariationConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VariationConfig) => any;
    }
    export interface CreateFeatureRequest {
            /**
                * <p>The name or ARN of the project that is to contain the new feature.</p>
                */
            project: string | undefined;
            /**
                * <p>The name for the new feature.</p>
                */
            name: string | undefined;
            /**
                * <p>Specify <code>ALL_RULES</code> to activate the traffic allocation specified by any
                *       ongoing launches or experiments. Specify <code>DEFAULT_VARIATION</code> to serve the default
                *       variation to all users instead.</p>
                */
            evaluationStrategy?: FeatureEvaluationStrategy | string;
            /**
                * <p>An optional description of the feature.</p>
                */
            description?: string;
            /**
                * <p>An array of structures that contain the configuration of the feature's different variations.</p>
                */
            variations: VariationConfig[] | undefined;
            /**
                * <p>The name of the variation to use as the default variation. The default
                *       variation is served to users who are not allocated to any ongoing launches
                *       or experiments of this feature.</p>
                *          <p>This variation must also be listed in the <code>variations</code> structure.</p>
                *          <p>If you omit <code>defaultVariation</code>, the first variation listed in
                *        the <code>variations</code> structure is used as the default variation.</p>
                */
            defaultVariation?: string;
            /**
                * <p>Assigns one or more tags (key-value pairs) to the feature.</p>
                *          <p>Tags can help you organize and categorize your resources. You can also use them to scope user
                *        permissions by granting a user
                *        permission to access or change only resources with certain tag values.</p>
                *          <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p>
                *
                *          <p>You can associate as many as 50 tags with a feature.</p>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>Specify users that should always be served a specific variation of a feature. Each user
                *       is specified by a key-value pair . For each key, specify a user by entering their user ID,
                *       account ID, or some other identifier. For the value, specify the name of the variation that
                *       they are to be served.</p>
                */
            entityOverrides?: Record<string, string>;
    }
    export namespace CreateFeatureRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFeatureRequest) => any;
    }
    /**
        * <p>A structure that contains the information about an evaluation rule for this feature,
        *       if it is used in a launch or experiment.</p>
        */
    export interface EvaluationRule {
            /**
                * <p>The name of the experiment or launch.</p>
                */
            name?: string;
            /**
                * <p>This value is <code>aws.evidently.splits</code> if this is an evaluation rule for a launch, and it is
                *        <code>aws.evidently.onlineab</code> if this is an evaluation rule for an experiment.</p>
                */
            type: string | undefined;
    }
    export namespace EvaluationRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EvaluationRule) => any;
    }
    export enum FeatureStatus {
            AVAILABLE = "AVAILABLE",
            UPDATING = "UPDATING"
    }
    export enum VariationValueType {
            BOOLEAN = "BOOLEAN",
            DOUBLE = "DOUBLE",
            LONG = "LONG",
            STRING = "STRING"
    }
    /**
        * <p>This structure contains the name and variation value of one variation of a feature.</p>
        */
    export interface Variation {
            /**
                * <p>The name of the variation.</p>
                */
            name?: string;
            /**
                * <p>The value assigned to this variation.</p>
                */
            value?: VariableValue;
    }
    export namespace Variation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Variation) => any;
    }
    /**
        * <p>This structure contains information about one Evidently feature in your account.</p>
        */
    export interface Feature {
            /**
                * <p>The ARN of the feature.</p>
                */
            arn: string | undefined;
            /**
                * <p>The name of the feature.</p>
                */
            name: string | undefined;
            /**
                * <p>The name or ARN of the project that contains the feature.</p>
                */
            project?: string;
            /**
                * <p>The current state of the feature.</p>
                */
            status: FeatureStatus | string | undefined;
            /**
                * <p>The date and time that the feature is created.</p>
                */
            createdTime: Date | undefined;
            /**
                * <p>The date and time that the feature was most recently updated.</p>
                */
            lastUpdatedTime: Date | undefined;
            /**
                * <p>The description of the feature.</p>
                */
            description?: string;
            /**
                * <p>If this value is <code>ALL_RULES</code>, the traffic allocation specified by
                *       any ongoing launches or experiments is being used. If this is <code>DEFAULT_VARIATION</code>,
                *       the default variation is being served to all users.</p>
                */
            evaluationStrategy: FeatureEvaluationStrategy | string | undefined;
            /**
                * <p>Defines the type of value used to define the different feature variations.
                *       For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-variationtypes.html">Variation types</a>
                *          </p>
                */
            valueType: VariationValueType | string | undefined;
            /**
                * <p>An array of structures that contain the configuration of the feature's different variations.</p>
                */
            variations: Variation[] | undefined;
            /**
                * <p>The name of the variation that is used as the default variation. The default
                *       variation is served to users who are not allocated to any ongoing launches
                *       or experiments of this feature.</p>
                *          <p>This variation must also be listed in the <code>variations</code> structure.</p>
                *          <p>If you omit <code>defaultVariation</code>, the first variation listed in
                *     the <code>variations</code> structure is used as the default variation.</p>
                */
            defaultVariation?: string;
            /**
                * <p>An array of structures that define the evaluation rules for the feature.</p>
                */
            evaluationRules?: EvaluationRule[];
            /**
                * <p>The list of tag keys and values associated with this feature.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>A set of key-value pairs  that specify users who should always be served a specific
                *       variation of a feature. Each key specifies a user using their user ID, account ID, or some
                *       other identifier. The value specifies the name of the variation that the user is to be
                *       served.</p>
                *          <p>For the override to be successful, the value of the key must match the <code>entityId</code> used
                *       in the <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_EvaluateFeature.html">EvaluateFeature</a> operation.</p>
                */
            entityOverrides?: Record<string, string>;
    }
    export namespace Feature {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Feature) => any;
    }
    export interface CreateFeatureResponse {
            /**
                * <p>A structure that contains information about the new feature.</p>
                */
            feature?: Feature;
    }
    export namespace CreateFeatureResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFeatureResponse) => any;
    }
    /**
        * <p>A structure that defines one launch group in a launch. A launch group is a variation of
        *       the feature that you are including in the launch.</p>
        */
    export interface LaunchGroupConfig {
            /**
                * <p>A name for this launch group.</p>
                */
            name: string | undefined;
            /**
                * <p>A description of the launch group.</p>
                */
            description?: string;
            /**
                * <p>The feature that this launch is using.</p>
                */
            feature: string | undefined;
            /**
                * <p>The feature variation to use for this launch group.</p>
                */
            variation: string | undefined;
    }
    export namespace LaunchGroupConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LaunchGroupConfig) => any;
    }
    /**
        * <p>A structure that defines a metric to be used to monitor performance of the variations during a launch.</p>
        */
    export interface MetricMonitorConfig {
            /**
                * <p>A structure that defines the metric.</p>
                */
            metricDefinition: MetricDefinitionConfig | undefined;
    }
    export namespace MetricMonitorConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricMonitorConfig) => any;
    }
    /**
        * <p>This structure specifies a segment
        *       that you have already created, and defines the traffic split for that segment to be used in a launch.</p>
        */
    export interface SegmentOverride {
            /**
                * <p>The ARN of the segment to use.</p>
                */
            segment: string | undefined;
            /**
                * <p>A number indicating the order to use to evaluate segment overrides, if there are more
                *     than one. Segment overrides with lower numbers are evaluated first.</p>
                */
            evaluationOrder: number | undefined;
            /**
                * <p>The traffic allocation percentages among the feature variations to assign to this
                *       segment. This is a set of key-value pairs.   The keys are variation names. The values represent
                *       the amount of traffic to allocate to that variation for this segment. This is expressed in thousandths of a percent,
                *     so a weight of 50000 represents 50% of traffic.</p>
                */
            weights: Record<string, number> | undefined;
    }
    export namespace SegmentOverride {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SegmentOverride) => any;
    }
    /**
        * <p>This structure defines the traffic allocation percentages among the feature
        *        variations during one step of a launch, and the start time of that step.</p>
        */
    export interface ScheduledSplitConfig {
            /**
                * <p>The date and time that this step of the launch starts.</p>
                */
            startTime: Date | undefined;
            /**
                * <p>The traffic allocation percentages among the feature variations during one step of a
                *       launch. This is a set of key-value pairs. The keys are variation names. The values represent
                *       the percentage of traffic to allocate to that variation during this step.</p>
                *
                *          <p>The values is expressed in thousandths of a percent,
                *        so assigning a weight of 50000 assigns 50% of traffic to that variation.</p>
                *          <p>If the sum of the weights for all the variations in a segment override does not add up to 100,000,
                *        then the remaining traffic that matches this segment is not assigned by this segment override, and instead moves
                *        on to the next segment override or the default traffic split.</p>
                */
            groupWeights: Record<string, number> | undefined;
            /**
                * <p>Use this parameter to specify different traffic splits for one or more audience <i>segments</i>.
                *       A segment
                *       is a portion of your audience that share one or more characteristics. Examples could be Chrome browser users,
                *       users in Europe, or Firefox browser users in Europe who also fit other criteria that your application collects,
                *       such as age.</p>
                *          <p>This parameter is an array of up to six segment override objects. Each of these objects specifies a segment
                *       that you have already created, and defines the traffic split for that segment.</p>
                */
            segmentOverrides?: SegmentOverride[];
    }
    export namespace ScheduledSplitConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScheduledSplitConfig) => any;
    }
    /**
        * <p>An array of structures that define the traffic allocation percentages among the feature
        *       variations during each step of a launch. This also defines the start time of each step.</p>
        */
    export interface ScheduledSplitsLaunchConfig {
            /**
                * <p>An array of structures that define the traffic allocation percentages among the feature
                *       variations during each step of the launch. This also defines the start time of each
                *       step.</p>
                */
            steps: ScheduledSplitConfig[] | undefined;
    }
    export namespace ScheduledSplitsLaunchConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScheduledSplitsLaunchConfig) => any;
    }
    export interface CreateLaunchRequest {
            /**
                * <p>The name or ARN of the project that you want to create the launch in.</p>
                */
            project: string | undefined;
            /**
                * <p>The name for the new launch.</p>
                */
            name: string | undefined;
            /**
                * <p>An optional description for the launch.</p>
                */
            description?: string;
            /**
                * <p>An array of structures that define the traffic allocation percentages among the feature
                *       variations during each step of the launch.</p>
                */
            scheduledSplitsConfig?: ScheduledSplitsLaunchConfig;
            /**
                * <p>An array of structures that define the metrics that will be used to monitor
                *        the launch performance.</p>
                */
            metricMonitors?: MetricMonitorConfig[];
            /**
                * <p>An array of structures that contains the feature and variations that are to be used for the launch.</p>
                */
            groups: LaunchGroupConfig[] | undefined;
            /**
                * <p>When Evidently assigns a particular user session to a launch, it must use a randomization ID
                *         to determine which variation the user session is served. This randomization ID is a combination of the entity ID
                *         and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses
                *       the launch name as the <code>randomizationSalt</code>.</p>
                */
            randomizationSalt?: string;
            /**
                * <p>Assigns one or more tags (key-value pairs) to the launch.</p>
                *          <p>Tags can help you organize and categorize your resources. You can also use them to scope user
                *        permissions by granting a user
                *        permission to access or change only resources with certain tag values.</p>
                *          <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p>
                *
                *          <p>You can associate as many as 50 tags with a launch.</p>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateLaunchRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLaunchRequest) => any;
    }
    /**
        * <p>This structure contains information about the start and end times of the launch.</p>
        */
    export interface LaunchExecution {
            /**
                * <p>The date and time that the launch started.</p>
                */
            startedTime?: Date;
            /**
                * <p>The date and time that the launch ended.</p>
                */
            endedTime?: Date;
    }
    export namespace LaunchExecution {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LaunchExecution) => any;
    }
    /**
        * <p>A structure that defines one launch group in a launch. A launch group is a variation of the feature
        *       that you are including in the launch.</p>
        */
    export interface LaunchGroup {
            /**
                * <p>The name of the launch group.</p>
                */
            name: string | undefined;
            /**
                * <p>A description of the launch group.</p>
                */
            description?: string;
            /**
                * <p>The feature variation for this launch group. This is a key-value pair.</p>
                */
            featureVariations: Record<string, string> | undefined;
    }
    export namespace LaunchGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LaunchGroup) => any;
    }
    /**
        * <p>A structure that defines a metric to be used to monitor performance of the variations during a launch.</p>
        */
    export interface MetricMonitor {
            /**
                * <p>A structure that defines the metric.</p>
                */
            metricDefinition: MetricDefinition | undefined;
    }
    export namespace MetricMonitor {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricMonitor) => any;
    }
    /**
        * <p>This structure defines the traffic allocation percentages among the feature
        *        variations during one step of a launch, and the start time of that step.</p>
        */
    export interface ScheduledSplit {
            /**
                * <p>The date and time that this step of the launch starts.</p>
                */
            startTime: Date | undefined;
            /**
                * <p>The traffic allocation percentages among the feature variations during one step of a
                *       launch. This is a set of key-value pairs.   The keys are variation names. The values represent
                *       the percentage of traffic to allocate to that variation during this step.</p>
                *          <p>The values is expressed in thousandths of a percent,
                *        so assigning a weight of 50000 assigns 50% of traffic to that variation.</p>
                *          <p>If the sum of the weights for all the variations in a segment override does not add up to 100,000,
                *      then the remaining traffic that matches this segment is not assigned by this segment override, and instead moves
                *      on to the next segment override or the default traffic split.</p>
                */
            groupWeights?: Record<string, number>;
            /**
                * <p>Use this parameter to specify different traffic splits for one or more audience <i>segments</i>.
                *       A segment
                *       is a portion of your audience that share one or more characteristics. Examples could be Chrome browser users,
                *       users in Europe, or Firefox browser users in Europe who also fit other criteria that your application collects,
                *       such as age.</p>
                *          <p>This parameter is an array of up to six segment override objects. Each of these objects specifies a segment
                *     that you have already created, and defines the traffic split for that segment.</p>
                */
            segmentOverrides?: SegmentOverride[];
    }
    export namespace ScheduledSplit {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScheduledSplit) => any;
    }
    /**
        * <p>An array of structures that define the traffic allocation percentages among the feature
        *       variations during each step of a launch. This also defines the start time of each step.</p>
        */
    export interface ScheduledSplitsLaunchDefinition {
            /**
                * <p>An array of structures that define the traffic allocation percentages among the feature
                *       variations during each step of the launch. This also defines the start time of each
                *       step.</p>
                */
            steps?: ScheduledSplit[];
    }
    export namespace ScheduledSplitsLaunchDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScheduledSplitsLaunchDefinition) => any;
    }
    export enum LaunchStatus {
            CANCELLED = "CANCELLED",
            COMPLETED = "COMPLETED",
            CREATED = "CREATED",
            RUNNING = "RUNNING",
            UPDATING = "UPDATING"
    }
    export enum LaunchType {
            SCHEDULED_SPLITS_LAUNCH = "aws.evidently.splits"
    }
    /**
        * <p>This structure contains the configuration details of one Evidently launch.</p>
        */
    export interface Launch {
            /**
                * <p>The ARN of the launch.</p>
                */
            arn: string | undefined;
            /**
                * <p>The name of the launch.</p>
                */
            name: string | undefined;
            /**
                * <p>The name or ARN of the project that contains the launch.</p>
                */
            project?: string;
            /**
                * <p>The current state of the launch.</p>
                */
            status: LaunchStatus | string | undefined;
            /**
                * <p>If the launch was stopped, this is the string that was entered by the person who
                *       stopped the launch, to explain why it was stopped.</p>
                */
            statusReason?: string;
            /**
                * <p>The description of the launch.</p>
                */
            description?: string;
            /**
                * <p>The date and time that the launch is created.</p>
                */
            createdTime: Date | undefined;
            /**
                * <p>The date and time that the launch was most recently updated.</p>
                */
            lastUpdatedTime: Date | undefined;
            /**
                * <p>A structure that contains information about the start and end times of the launch.</p>
                */
            execution?: LaunchExecution;
            /**
                * <p>An array of structures that define the feature variations that are being used in the launch.</p>
                */
            groups?: LaunchGroup[];
            /**
                * <p>An array of structures that define the metrics that are being used to monitor the launch performance.</p>
                */
            metricMonitors?: MetricMonitor[];
            /**
                * <p>This value is used when Evidently assigns a particular user session to the launch, to help create a randomization ID
                *       to determine which variation the user session is served. This randomization ID is a combination of the entity ID
                *       and <code>randomizationSalt</code>.</p>
                */
            randomizationSalt?: string;
            /**
                * <p>The type of launch.</p>
                */
            type: LaunchType | string | undefined;
            /**
                * <p>An array of structures that define the traffic allocation percentages among the feature
                *       variations during each step of the launch.</p>
                */
            scheduledSplitsDefinition?: ScheduledSplitsLaunchDefinition;
            /**
                * <p>The list of tag keys and values associated with this launch.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace Launch {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Launch) => any;
    }
    export interface CreateLaunchResponse {
            /**
                * <p>A structure that contains the configuration of the launch that was created.</p>
                */
            launch: Launch | undefined;
    }
    export namespace CreateLaunchResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLaunchResponse) => any;
    }
    /**
        * <p>If the project stores evaluation events in an Amazon S3 bucket, this structure
        *        stores the bucket name and bucket prefix.</p>
        */
    export interface S3DestinationConfig {
            /**
                * <p>The name of the bucket in which Evidently stores evaluation events.</p>
                */
            bucket?: string;
            /**
                * <p>The bucket prefix in which Evidently stores evaluation events.</p>
                */
            prefix?: string;
    }
    export namespace S3DestinationConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3DestinationConfig) => any;
    }
    /**
        * <p>A structure that contains information about where Evidently is to store
        *        evaluation events for longer term storage.</p>
        */
    export interface ProjectDataDeliveryConfig {
            /**
                * <p>If the project stores evaluation events in an Amazon S3 bucket, this structure
                *        stores the bucket name and bucket prefix.</p>
                */
            s3Destination?: S3DestinationConfig;
            /**
                * <p>If the project stores evaluation events in CloudWatch Logs, this structure
                *        stores the log group name.</p>
                */
            cloudWatchLogs?: CloudWatchLogsDestinationConfig;
    }
    export namespace ProjectDataDeliveryConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProjectDataDeliveryConfig) => any;
    }
    export interface CreateProjectRequest {
            /**
                * <p>The name for the project.</p>
                */
            name: string | undefined;
            /**
                * <p>An optional description of the project.</p>
                */
            description?: string;
            /**
                * <p>A structure that contains information about where Evidently is to store
                *       evaluation events for longer term storage, if you choose to do so. If you choose
                *       not to store these events, Evidently deletes them after using them to produce metrics and other experiment
                *       results that you can view.</p>
                */
            dataDelivery?: ProjectDataDeliveryConfig;
            /**
                * <p>Assigns one or more tags (key-value pairs) to the project.</p>
                *          <p>Tags can help you organize and categorize your resources. You can also use them to scope user
                *        permissions by granting a user
                *        permission to access or change only resources with certain tag values.</p>
                *          <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p>
                *
                *          <p>You can associate as many as 50 tags with a project.</p>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateProjectRequest) => any;
    }
    /**
        * <p>If the project stores evaluation events in an Amazon S3 bucket, this structure
        *        stores the bucket name and bucket prefix.</p>
        */
    export interface S3Destination {
            /**
                * <p>The name of the bucket in which Evidently stores evaluation events.</p>
                */
            bucket?: string;
            /**
                * <p>The bucket prefix in which Evidently stores evaluation events.</p>
                */
            prefix?: string;
    }
    export namespace S3Destination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3Destination) => any;
    }
    /**
        * <p>A structure that contains information about where Evidently is to store
        *        evaluation events for longer term storage.</p>
        */
    export interface ProjectDataDelivery {
            /**
                * <p>If the project stores evaluation events in an Amazon S3 bucket, this structure
                *        stores the bucket name and bucket prefix.</p>
                */
            s3Destination?: S3Destination;
            /**
                * <p>If the project stores evaluation events in CloudWatch Logs, this structure
                *       stores the log group name.</p>
                */
            cloudWatchLogs?: CloudWatchLogsDestination;
    }
    export namespace ProjectDataDelivery {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProjectDataDelivery) => any;
    }
    export enum ProjectStatus {
            AVAILABLE = "AVAILABLE",
            UPDATING = "UPDATING"
    }
    /**
        * <p>This structure defines a project, which is the logical object in Evidently that can contain features, launches, and
        *       experiments. Use projects to group similar features together.</p>
        */
    export interface Project {
            /**
                * <p>The name or ARN of the project.</p>
                */
            arn: string | undefined;
            /**
                * <p>The name of the project.</p>
                */
            name: string | undefined;
            /**
                * <p>The current state of the project.</p>
                */
            status: ProjectStatus | string | undefined;
            /**
                * <p>The user-entered description of the project.</p>
                */
            description?: string;
            /**
                * <p>The date and time that the project is created.</p>
                */
            createdTime: Date | undefined;
            /**
                * <p>The date and time that the project was most recently updated.</p>
                */
            lastUpdatedTime: Date | undefined;
            /**
                * <p>The number of features currently in the project.</p>
                */
            featureCount?: number;
            /**
                * <p>The number of launches currently in the project. This includes all launches that have been created
                *        and not deleted, whether they are ongoing or not.</p>
                */
            launchCount?: number;
            /**
                * <p>The number of ongoing launches currently in the project.</p>
                */
            activeLaunchCount?: number;
            /**
                * <p>The number of experiments currently in the project. This includes all experiments that have been created
                *       and not deleted, whether they are ongoing or not.</p>
                */
            experimentCount?: number;
            /**
                * <p>The number of ongoing experiments currently in the project.</p>
                */
            activeExperimentCount?: number;
            /**
                * <p>A structure that contains information about where Evidently is to store
                *        evaluation events for longer term storage.</p>
                */
            dataDelivery?: ProjectDataDelivery;
            /**
                * <p>The list of tag keys and values associated with this project.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace Project {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Project) => any;
    }
    export interface CreateProjectResponse {
            /**
                * <p>A structure that contains information about the created project.</p>
                */
            project: Project | undefined;
    }
    export namespace CreateProjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateProjectResponse) => any;
    }
    export interface CreateSegmentRequest {
            /**
                * <p>A name for the segment.</p>
                */
            name: string | undefined;
            /**
                * <p>The pattern to use for the segment. For more information about pattern syntax,
                *       see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments-syntax.html">
                *         Segment rule pattern syntax</a>.</p>
                */
            pattern: __LazyJsonString | string | undefined;
            /**
                * <p>An optional description for this segment.</p>
                */
            description?: string;
            /**
                * <p>Assigns one or more tags (key-value pairs) to the segment.</p>
                *          <p>Tags can help you organize and categorize your resources. You can also use them to scope user
                *       permissions by granting a user
                *       permission to access or change only resources with certain tag values.</p>
                *          <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p>
                *
                *          <p>You can associate as many as 50 tags with a segment.</p>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateSegmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSegmentRequest) => any;
    }
    /**
        * <p>This structure contains information about one audience <i>segment</i>. You can use segments
        *     in your experiments and launches to narrow the user sessions used for experiment or launch to only the user
        *     sessions that match one or more criteria.</p>
        */
    export interface Segment {
            /**
                * <p>The ARN of the segment.</p>
                */
            arn: string | undefined;
            /**
                * <p>The name of the segment.</p>
                */
            name: string | undefined;
            /**
                * <p/>
                */
            pattern: __LazyJsonString | string | undefined;
            /**
                * <p>The date and time that this segment was created.</p>
                */
            createdTime: Date | undefined;
            /**
                * <p>The date and time that this segment was most recently updated.</p>
                */
            lastUpdatedTime: Date | undefined;
            /**
                * <p>The customer-created description for this segment.</p>
                */
            description?: string;
            /**
                * <p>The number of experiments that this segment is used in. This count includes all current experiments, not just
                *     those that are currently running.</p>
                */
            experimentCount?: number;
            /**
                * <p>The number of launches that this segment is used in. This count includes all current launches, not just
                *       those that are currently running.</p>
                */
            launchCount?: number;
            /**
                * <p>The list of tag keys and values associated with this launch.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace Segment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Segment) => any;
    }
    export interface CreateSegmentResponse {
            /**
                * <p>A structure that contains the complete information about the segment that was just created.</p>
                */
            segment: Segment | undefined;
    }
    export namespace CreateSegmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSegmentResponse) => any;
    }
    export interface DeleteExperimentRequest {
            /**
                * <p>The name or ARN of the project that contains the experiment to delete.</p>
                */
            project: string | undefined;
            /**
                * <p>The name of the experiment to delete.</p>
                */
            experiment: string | undefined;
    }
    export namespace DeleteExperimentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteExperimentRequest) => any;
    }
    export interface DeleteExperimentResponse {
    }
    export namespace DeleteExperimentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteExperimentResponse) => any;
    }
    /**
        * <p>Unexpected error while processing the request. Retry the request.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>The service was unavailable. Retry the request.</p>
        */
    export class ServiceUnavailableException extends __BaseException {
            readonly name: "ServiceUnavailableException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>);
    }
    export interface DeleteFeatureRequest {
            /**
                * <p>The name or ARN of the project that contains the feature to delete.</p>
                */
            project: string | undefined;
            /**
                * <p>The name of the feature to delete.</p>
                */
            feature: string | undefined;
    }
    export namespace DeleteFeatureRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFeatureRequest) => any;
    }
    export interface DeleteFeatureResponse {
    }
    export namespace DeleteFeatureResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFeatureResponse) => any;
    }
    export interface DeleteLaunchRequest {
            /**
                * <p>The name or ARN of the project that contains the launch to delete.</p>
                */
            project: string | undefined;
            /**
                * <p>The name of the launch to delete.</p>
                */
            launch: string | undefined;
    }
    export namespace DeleteLaunchRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLaunchRequest) => any;
    }
    export interface DeleteLaunchResponse {
    }
    export namespace DeleteLaunchResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLaunchResponse) => any;
    }
    export interface DeleteProjectRequest {
            /**
                * <p>The name or ARN of the project to delete.</p>
                */
            project: string | undefined;
    }
    export namespace DeleteProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteProjectRequest) => any;
    }
    export interface DeleteProjectResponse {
    }
    export namespace DeleteProjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteProjectResponse) => any;
    }
    export interface DeleteSegmentRequest {
            /**
                * <p>Specifies the segment to delete.</p>
                */
            segment: string | undefined;
    }
    export namespace DeleteSegmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSegmentRequest) => any;
    }
    export interface DeleteSegmentResponse {
    }
    export namespace DeleteSegmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSegmentResponse) => any;
    }
    export interface EvaluateFeatureRequest {
            /**
                * <p>The name or ARN of the project that contains this feature.</p>
                */
            project: string | undefined;
            /**
                * <p>The name of the feature being evaluated.</p>
                */
            feature: string | undefined;
            /**
                * <p>An internal ID that represents a unique user of the application. This
                *         <code>entityID</code> is checked against any override rules assigned for this
                *       feature.</p>
                */
            entityId: string | undefined;
            /**
                * <p>A JSON object of attributes that you can optionally pass in as part of the evaluation event
                *       sent to Evidently from the user session. Evidently can use
                *       this value to match user sessions with defined audience segments. For more information, see
                *       <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html">Use segments to focus your
                *         audience</a>.</p>
                *
                *          <p>If you include this parameter, the value must be a JSON object. A JSON array is not supported.</p>
                */
            evaluationContext?: __LazyJsonString | string;
    }
    export namespace EvaluateFeatureRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EvaluateFeatureRequest) => any;
    }
    export interface EvaluateFeatureResponse {
            /**
                * <p>The name of the variation that was served to the user session.</p>
                */
            variation?: string;
            /**
                * <p>The value assigned to this variation to differentiate it from the other variations of this feature.</p>
                */
            value?: VariableValue;
            /**
                * <p>Specifies the reason that the user session was assigned this variation. Possible values
                *       include <code>DEFAULT</code>, meaning the user was served the default variation;
                *         <code>LAUNCH_RULE_MATCH</code>, if the user session was enrolled in a launch;
                *         <code>EXPERIMENT_RULE_MATCH</code>, if the user session was enrolled in an experiment; or
                *         <code>ENTITY_OVERRIDES_MATCH</code>, if the user's <code>entityId</code> matches an override
                *       rule.</p>
                */
            reason?: string;
            /**
                * <p>If this user was assigned to a launch or experiment, this field lists the launch or experiment name.</p>
                */
            details?: __LazyJsonString | string;
    }
    export namespace EvaluateFeatureResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EvaluateFeatureResponse) => any;
    }
    export enum EventType {
            CUSTOM = "aws.evidently.custom",
            EVALUATION = "aws.evidently.evaluation"
    }
    /**
        * <p>A structure that contains the information about one evaluation event or custom event sent to Evidently.
        *         This is a JSON payload. If this event specifies a pre-defined event type, the payload must follow the
        *         defined event schema.</p>
        */
    export interface Event {
            /**
                * <p>The timestamp of the event.</p>
                */
            timestamp: Date | undefined;
            /**
                * <p>
                *             <code>aws.evidently.evaluation</code> specifies an evaluation event, which determines
                *       which feature variation that a user sees. <code>aws.evidently.custom</code> specifies a custom
                *       event, which generates metrics from user actions such as clicks and checkouts.</p>
                */
            type: EventType | string | undefined;
            /**
                * <p>The event data.</p>
                */
            data: __LazyJsonString | string | undefined;
    }
    export namespace Event {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Event) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The ARN of the resource that you want to see the tags of.</p>
                */
            resourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The list of tag keys and values associated with the resource you specified.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface GetExperimentRequest {
            /**
                * <p>The name or ARN of the project that contains the experiment.</p>
                */
            project: string | undefined;
            /**
                * <p>The name of the experiment that you want to see the details of.</p>
                */
            experiment: string | undefined;
    }
    export namespace GetExperimentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetExperimentRequest) => any;
    }
    export interface GetExperimentResponse {
            /**
                * <p>A structure containing the configuration details of the experiment.</p>
                */
            experiment?: Experiment;
    }
    export namespace GetExperimentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetExperimentResponse) => any;
    }
    export enum ExperimentBaseStat {
            MEAN = "Mean"
    }
    export enum ExperimentReportName {
            BAYESIAN_INFERENCE = "BayesianInference"
    }
    export enum ExperimentResultRequestType {
            BASE_STAT = "BaseStat",
            CONFIDENCE_INTERVAL = "ConfidenceInterval",
            P_VALUE = "PValue",
            TREATMENT_EFFECT = "TreatmentEffect"
    }
    export interface GetExperimentResultsRequest {
            /**
                * <p>The name or ARN of the project that contains the experiment that you want to see the results of.</p>
                */
            project: string | undefined;
            /**
                * <p>The name of the experiment to retrieve the results of.</p>
                */
            experiment: string | undefined;
            /**
                * <p>The date and time that the experiment started.</p>
                */
            startTime?: Date;
            /**
                * <p>The date and time that the experiment ended, if it is completed. This must be no longer than 30 days
                *       after the experiment start time.</p>
                */
            endTime?: Date;
            /**
                * <p>The names of the experiment metrics that you want to see the results of.</p>
                */
            metricNames: string[] | undefined;
            /**
                * <p>The names of the experiment treatments that you want to see the results for.</p>
                */
            treatmentNames: string[] | undefined;
            /**
                * <p>The statistic used to calculate experiment results. Currently the only valid value is <code>mean</code>,
                *       which uses the mean of the collected values as the statistic.</p>
                */
            baseStat?: ExperimentBaseStat | string;
            /**
                * <p>The statistics that you want to see in the returned results.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>PValue</code> specifies to use p-values for the results. A p-value is used in hypothesis
                *           testing to measure how often you are willing to make a mistake in rejecting the null
                *           hypothesis. A general practice is to reject the null hypothesis and declare that the
                *           results are statistically significant when the p-value is less than 0.05.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ConfidenceInterval</code> specifies a confidence interval for the results. The
                *           confidence interval represents the range of values for the chosen metric that is likely to
                *           contain the true difference between the <code>baseStat</code> of a variation and the
                *           baseline. Evidently returns the 95% confidence interval. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>TreatmentEffect</code> is the difference in the statistic specified by the
                *             <code>baseStat</code> parameter between each variation and the default variation. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>BaseStat</code> returns the statistical values collected for the metric for each
                *           variation. The statistic uses the same statistic specified in the <code>baseStat</code>
                *           parameter. Therefore, if <code>baseStat</code> is <code>mean</code>, this returns the mean
                *           of the values collected for each variation.</p>
                *             </li>
                *          </ul>
                */
            resultStats?: (ExperimentResultRequestType | string)[];
            /**
                * <p>The names of the report types that you want to see. Currently, <code>BayesianInference</code>
                *        is the only valid value.</p>
                */
            reportNames?: (ExperimentReportName | string)[];
            /**
                * <p>In seconds, the amount of time to aggregate results together. </p>
                */
            period?: number;
    }
    export namespace GetExperimentResultsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetExperimentResultsRequest) => any;
    }
    /**
        * <p>A structure that contains results of an experiment.</p>
        */
    export interface ExperimentReport {
            /**
                * <p>The name of the metric that is analyzed in this experiment report.</p>
                */
            metricName?: string;
            /**
                * <p>The name of the variation that this report pertains to.</p>
                */
            treatmentName?: string;
            /**
                * <p>The type of analysis used for this report.</p>
                */
            reportName?: ExperimentReportName | string;
            /**
                * <p>The content of the report.</p>
                */
            content?: __LazyJsonString | string;
    }
    export namespace ExperimentReport {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentReport) => any;
    }
    export enum ExperimentResultResponseType {
            CONFIDENCE_INTERVAL_LOWERBOUND = "ConfidenceIntervalLowerBound",
            CONFIDENCE_INTERVAL_UPPERBOUND = "ConfidenceIntervalUpperBound",
            MEAN = "Mean",
            P_VALUE = "PValue",
            TREATMENT_EFFECT = "TreatmentEffect"
    }
    /**
        * <p>A structure that contains experiment results for one metric that is monitored in
        *       the experiment.</p>
        */
    export interface ExperimentResultsData {
            /**
                * <p>The name of the metric.</p>
                */
            metricName?: string;
            /**
                * <p>The treatment, or variation, that returned the <code>values</code> in this structure.</p>
                */
            treatmentName?: string;
            /**
                * <p>The experiment statistic that these results pertain to.</p>
                */
            resultStat?: ExperimentResultResponseType | string;
            /**
                * <p>The values for the <code>metricName</code> that were recorded in the experiment.</p>
                */
            values?: number[];
    }
    export namespace ExperimentResultsData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentResultsData) => any;
    }
    export interface GetExperimentResultsResponse {
            /**
                * <p>An array of structures that include experiment results including metric names and values. </p>
                */
            resultsData?: ExperimentResultsData[];
            /**
                * <p>An array of structures that include the reports that you requested.</p>
                */
            reports?: ExperimentReport[];
            /**
                * <p>The timestamps of each result returned.</p>
                */
            timestamps?: Date[];
            /**
                * <p>If the experiment doesn't yet have enough events to provide valid results, this
                *       field is returned with the message <code>Not enough events to generate results</code>. If there are
                *       enough events to provide valid results, this field is not returned.</p>
                */
            details?: string;
    }
    export namespace GetExperimentResultsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetExperimentResultsResponse) => any;
    }
    export interface ListExperimentsRequest {
            /**
                * <p>The name or ARN of the project to return the experiment list from.</p>
                */
            project: string | undefined;
            /**
                * <p>The maximum number of results to include in the response.</p>
                */
            maxResults?: number;
            /**
                * <p>The token to use when requesting the next set of results. You received this token from a previous
                *        <code>ListExperiments</code> operation.</p>
                */
            nextToken?: string;
            /**
                * <p>Use this optional parameter to limit the returned results to only the experiments with the status that you specify here.</p>
                */
            status?: ExperimentStatus | string;
    }
    export namespace ListExperimentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListExperimentsRequest) => any;
    }
    export interface ListExperimentsResponse {
            /**
                * <p>An array of structures that contain the configuration details of the experiments in the
                *       specified project.</p>
                */
            experiments?: Experiment[];
            /**
                * <p>The token to use in a subsequent <code>ListExperiments</code> operation to return
                *        the next set of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListExperimentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListExperimentsResponse) => any;
    }
    export interface StartExperimentRequest {
            /**
                * <p>The name or ARN of the project that contains the experiment to start.</p>
                */
            project: string | undefined;
            /**
                * <p>The name of the experiment to start.</p>
                */
            experiment: string | undefined;
            /**
                * <p>The date and time to end the experiment. This must be no more than 30 days after
                *       the experiment starts.</p>
                */
            analysisCompleteTime: Date | undefined;
    }
    export namespace StartExperimentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartExperimentRequest) => any;
    }
    export interface StartExperimentResponse {
            /**
                * <p>A timestamp that indicates when the experiment started.</p>
                */
            startedTime?: Date;
    }
    export namespace StartExperimentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartExperimentResponse) => any;
    }
    export enum ExperimentStopDesiredState {
            CANCELLED = "CANCELLED",
            COMPLETED = "COMPLETED"
    }
    export interface StopExperimentRequest {
            /**
                * <p>The name or ARN of the project that contains the experiment to stop.</p>
                */
            project: string | undefined;
            /**
                * <p>The name of the experiment to stop.</p>
                */
            experiment: string | undefined;
            /**
                * <p>Specify whether the experiment is to be considered <code>COMPLETED</code> or
                *       <code>CANCELLED</code> after it stops.</p>
                */
            desiredState?: ExperimentStopDesiredState | string;
            /**
                * <p>A string that describes why you are stopping the experiment.</p>
                */
            reason?: string;
    }
    export namespace StopExperimentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopExperimentRequest) => any;
    }
    export interface StopExperimentResponse {
            /**
                * <p>The date and time that the experiment stopped.</p>
                */
            endedTime?: Date;
    }
    export namespace StopExperimentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopExperimentResponse) => any;
    }
    export interface UpdateExperimentRequest {
            /**
                * <p>The name or ARN of the project that contains the experiment that you want to update.</p>
                */
            project: string | undefined;
            /**
                * <p>The name of the experiment to update.</p>
                */
            experiment: string | undefined;
            /**
                * <p>An optional description of the experiment.</p>
                */
            description?: string;
            /**
                * <p>An array of structures that define the variations being tested in the experiment.</p>
                */
            treatments?: TreatmentConfig[];
            /**
                * <p>An array of structures that defines the metrics used for the experiment, and whether a higher
                *       or lower value for each metric is the goal.</p>
                */
            metricGoals?: MetricGoalConfig[];
            /**
                * <p>When Evidently assigns a particular user session to an experiment, it must use a randomization ID
                *       to determine which variation the user session is served. This randomization ID is a combination of the entity ID
                *       and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses
                *       the experiment name as the <code>randomizationSalt</code>.</p>
                */
            randomizationSalt?: string;
            /**
                * <p>The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience
                *       is the total audience minus the audience that you have allocated to overrides or current launches of
                *       this feature.</p>
                *          <p>This is represented in thousandths of a percent. For example, specify 20,000 to allocate 20% of the available audience.</p>
                */
            samplingRate?: number;
            /**
                * <p>Adds an audience <i>segment</i> to an experiment. When a segment is used in an experiment, only
                *       user sessions that match the segment pattern are used in the experiment. You can't use this parameter if the
                *       experiment is currently
                *       running.</p>
                */
            segment?: string;
            /**
                * <p>Removes a segment from being used in an experiment. You can't use this parameter if the experiment is currently
                *       running.</p>
                */
            removeSegment?: boolean;
            /**
                * <p>A structure that contains the configuration of which variation o use as the "control"
                *       version. The "control" version is used for comparison with other variations. This structure
                *       also specifies how much experiment traffic is allocated to each variation.</p>
                */
            onlineAbConfig?: OnlineAbConfig;
    }
    export namespace UpdateExperimentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateExperimentRequest) => any;
    }
    export interface UpdateExperimentResponse {
            /**
                * <p>A structure containing the configuration details of the experiment
                *     that was updated.</p>
                */
            experiment: Experiment | undefined;
    }
    export namespace UpdateExperimentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateExperimentResponse) => any;
    }
    export interface GetFeatureRequest {
            /**
                * <p>The name or ARN of the project that contains the feature.</p>
                */
            project: string | undefined;
            /**
                * <p>The name of the feature that you want to retrieve information for.</p>
                */
            feature: string | undefined;
    }
    export namespace GetFeatureRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFeatureRequest) => any;
    }
    export interface GetFeatureResponse {
            /**
                * <p>A structure containing the configuration details of the feature.</p>
                */
            feature: Feature | undefined;
    }
    export namespace GetFeatureResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFeatureResponse) => any;
    }
    export interface ListFeaturesRequest {
            /**
                * <p>The name or ARN of the project to return the feature list from.</p>
                */
            project: string | undefined;
            /**
                * <p>The maximum number of results to include in the response.</p>
                */
            maxResults?: number;
            /**
                * <p>The token to use when requesting the next set of results. You received this token from a previous
                *        <code>ListFeatures</code> operation.</p>
                */
            nextToken?: string;
    }
    export namespace ListFeaturesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFeaturesRequest) => any;
    }
    /**
        * <p>This structure contains information about one Evidently feature in your account.</p>
        */
    export interface FeatureSummary {
            /**
                * <p>The ARN of the feature.</p>
                */
            arn: string | undefined;
            /**
                * <p>The name of the feature.</p>
                */
            name: string | undefined;
            /**
                * <p>The name or ARN of the project that contains the feature.</p>
                */
            project?: string;
            /**
                * <p>The current state of the feature.</p>
                */
            status: FeatureStatus | string | undefined;
            /**
                * <p>The date and time that the feature is created.</p>
                */
            createdTime: Date | undefined;
            /**
                * <p>The date and time that the feature was most recently updated.</p>
                */
            lastUpdatedTime: Date | undefined;
            /**
                * <p>If this value is <code>ALL_RULES</code>, the traffic allocation specified by
                *       any ongoing launches or experiments is being used. If this is <code>DEFAULT_VARIATION</code>,
                *       the default variation is being served to all users.</p>
                */
            evaluationStrategy: FeatureEvaluationStrategy | string | undefined;
            /**
                * <p>An array of structures that define</p>
                */
            evaluationRules?: EvaluationRule[];
            /**
                * <p>The name of the variation that is used as the default variation. The default
                *       variation is served to users who are not allocated to any ongoing launches
                *       or experiments of this feature.</p>
                */
            defaultVariation?: string;
            /**
                * <p>The list of tag keys and values associated with this feature.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace FeatureSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FeatureSummary) => any;
    }
    export interface ListFeaturesResponse {
            /**
                * <p>An array of structures that contain the configuration details of the features in the
                *        specified project.</p>
                */
            features?: FeatureSummary[];
            /**
                * <p>The token to use in a subsequent <code>ListFeatures</code> operation to return
                *        the next set of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListFeaturesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFeaturesResponse) => any;
    }
    export interface UpdateFeatureRequest {
            /**
                * <p>The name or ARN of the project that contains the feature to be updated.</p>
                */
            project: string | undefined;
            /**
                * <p>The name of the feature to be updated.</p>
                */
            feature: string | undefined;
            /**
                * <p>Specify <code>ALL_RULES</code> to activate the traffic allocation specified by any ongoing
                *       launches or experiments. Specify <code>DEFAULT_VARIATION</code> to serve the default variation
                *       to all users instead.</p>
                */
            evaluationStrategy?: FeatureEvaluationStrategy | string;
            /**
                * <p>An optional description of the feature.</p>
                */
            description?: string;
            /**
                * <p>To update variation configurations for this feature, or add new ones, specify this structure.
                *       In this array, include any variations that you want to add or update. If the array includes a variation name that
                *       already exists for this feature, it is updated. If it includes a new variation name, it is added
                *       as a new variation.</p>
                */
            addOrUpdateVariations?: VariationConfig[];
            /**
                * <p>Removes a variation from the feature. If the variation you specify doesn't exist, then this
                *     makes no change and does not report an error.</p>
                *          <p>This operation fails if you try to remove a variation that is part of an
                *     ongoing launch or experiment.</p>
                */
            removeVariations?: string[];
            /**
                * <p>The name of the variation to use as the default variation. The default
                *       variation is served to users who are not allocated to any ongoing launches
                *       or experiments of this feature.</p>
                */
            defaultVariation?: string;
            /**
                * <p>Specified users that should always be served a specific variation of a feature. Each user
                *       is specified by a key-value pair . For each key, specify a user by entering their user ID,
                *       account ID, or some other identifier. For the value, specify the name of the variation that
                *       they are to be served.</p>
                */
            entityOverrides?: Record<string, string>;
    }
    export namespace UpdateFeatureRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFeatureRequest) => any;
    }
    export interface UpdateFeatureResponse {
            /**
                * <p>A structure that contains information about the updated feature.</p>
                */
            feature: Feature | undefined;
    }
    export namespace UpdateFeatureResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFeatureResponse) => any;
    }
    export interface GetProjectRequest {
            /**
                * <p>The name or ARN of the project that you want to see the details of.</p>
                */
            project: string | undefined;
    }
    export namespace GetProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetProjectRequest) => any;
    }
    export interface GetProjectResponse {
            /**
                * <p>A structure containing the configuration details of the project.</p>
                */
            project: Project | undefined;
    }
    export namespace GetProjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetProjectResponse) => any;
    }
    export interface GetLaunchRequest {
            /**
                * <p>The name or ARN of the project that contains the launch.</p>
                */
            project: string | undefined;
            /**
                * <p>The name of the launch that you want to see the details of.</p>
                */
            launch: string | undefined;
    }
    export namespace GetLaunchRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLaunchRequest) => any;
    }
    export interface GetLaunchResponse {
            /**
                * <p>A structure containing the configuration details of the launch.</p>
                */
            launch?: Launch;
    }
    export namespace GetLaunchResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLaunchResponse) => any;
    }
    export interface ListLaunchesRequest {
            /**
                * <p>The name or ARN of the project to return the launch list from.</p>
                */
            project: string | undefined;
            /**
                * <p>The maximum number of results to include in the response.</p>
                */
            maxResults?: number;
            /**
                * <p>The token to use when requesting the next set of results. You received this token from a previous
                *        <code>ListLaunches</code> operation.</p>
                */
            nextToken?: string;
            /**
                * <p>Use this optional parameter to limit the returned results to only the launches with the status that you specify here.</p>
                */
            status?: LaunchStatus | string;
    }
    export namespace ListLaunchesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLaunchesRequest) => any;
    }
    export interface ListLaunchesResponse {
            /**
                * <p>An array of structures that contain the configuration details of the launches in the
                *        specified project.</p>
                */
            launches?: Launch[];
            /**
                * <p>The token to use in a subsequent <code>ListLaunches</code> operation to return
                *        the next set of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListLaunchesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLaunchesResponse) => any;
    }
    export interface StartLaunchRequest {
            /**
                * <p>The name or ARN of the project that contains the launch to start.</p>
                */
            project: string | undefined;
            /**
                * <p>The name of the launch to start.</p>
                */
            launch: string | undefined;
    }
    export namespace StartLaunchRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartLaunchRequest) => any;
    }
    export interface StartLaunchResponse {
            /**
                * <p>A structure that contains information about the launch that was started.</p>
                */
            launch: Launch | undefined;
    }
    export namespace StartLaunchResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartLaunchResponse) => any;
    }
    export enum LaunchStopDesiredState {
            CANCELLED = "CANCELLED",
            COMPLETED = "COMPLETED"
    }
    export interface StopLaunchRequest {
            /**
                * <p>The name or ARN of the project that contains the launch that you want to stop.</p>
                */
            project: string | undefined;
            /**
                * <p>The name of the launch to stop.</p>
                */
            launch: string | undefined;
            /**
                * <p>Specify whether to consider the launch as <code>COMPLETED</code> or
                *         <code>CANCELLED</code> after it stops.</p>
                */
            desiredState?: LaunchStopDesiredState | string;
            /**
                * <p>A string that describes why you are stopping the launch.</p>
                */
            reason?: string;
    }
    export namespace StopLaunchRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopLaunchRequest) => any;
    }
    export interface StopLaunchResponse {
            /**
                * <p>The date and time that the launch stopped.</p>
                */
            endedTime?: Date;
    }
    export namespace StopLaunchResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopLaunchResponse) => any;
    }
    export interface UpdateLaunchRequest {
            /**
                * <p>The name or ARN of the project that contains the launch that you want to update.</p>
                */
            project: string | undefined;
            /**
                * <p>The name of the launch that is to be updated.</p>
                */
            launch: string | undefined;
            /**
                * <p>An optional description for the launch.</p>
                */
            description?: string;
            /**
                * <p>An array of structures that contains the feature and variations that are to be used for
                *       the launch.</p>
                */
            groups?: LaunchGroupConfig[];
            /**
                * <p>An array of structures that define the metrics that will be used to monitor
                *     the launch performance.</p>
                */
            metricMonitors?: MetricMonitorConfig[];
            /**
                * <p>When Evidently assigns a particular user session to a launch, it must use a randomization ID
                *       to determine which variation the user session is served. This randomization ID is a combination of the entity ID
                *       and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses
                *       the launch name as the <code>randomizationSalt</code>.</p>
                */
            randomizationSalt?: string;
            /**
                * <p>An array of structures that define the traffic allocation percentages among the feature
                *       variations during each step of the launch.</p>
                */
            scheduledSplitsConfig?: ScheduledSplitsLaunchConfig;
    }
    export namespace UpdateLaunchRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLaunchRequest) => any;
    }
    export interface UpdateLaunchResponse {
            /**
                * <p>A structure that contains the new configuration of the launch that was updated.</p>
                */
            launch: Launch | undefined;
    }
    export namespace UpdateLaunchResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLaunchResponse) => any;
    }
    export interface ListProjectsRequest {
            /**
                * <p>The maximum number of results to include in the response.</p>
                */
            maxResults?: number;
            /**
                * <p>The token to use when requesting the next set of results. You received this token from a previous
                *        <code>ListProjects</code> operation.</p>
                */
            nextToken?: string;
    }
    export namespace ListProjectsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProjectsRequest) => any;
    }
    /**
        * <p>A structure that contains configuration information about an Evidently project.</p>
        */
    export interface ProjectSummary {
            /**
                * <p>The name or ARN of the project.</p>
                */
            arn: string | undefined;
            /**
                * <p>The name of the project.</p>
                */
            name: string | undefined;
            /**
                * <p>The current state of the project.</p>
                */
            status: ProjectStatus | string | undefined;
            /**
                * <p>The description of the project.</p>
                */
            description?: string;
            /**
                * <p>The date and time that the project is created.</p>
                */
            createdTime: Date | undefined;
            /**
                * <p>The date and time that the project was most recently updated.</p>
                */
            lastUpdatedTime: Date | undefined;
            /**
                * <p>The number of features currently in the project.</p>
                */
            featureCount?: number;
            /**
                * <p>The number of launches currently in the project, including launches that are ongoing, completed, and not started yet.</p>
                */
            launchCount?: number;
            /**
                * <p>The number of ongoing launches currently in the project.</p>
                */
            activeLaunchCount?: number;
            /**
                * <p>The number of experiments currently in the project.</p>
                */
            experimentCount?: number;
            /**
                * <p>The number of experiments currently in the project.</p>
                */
            activeExperimentCount?: number;
            /**
                * <p>The list of tag keys and values associated with this project.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ProjectSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProjectSummary) => any;
    }
    export interface ListProjectsResponse {
            /**
                * <p>An array of structures that contain the configuration details of the projects in the Region.</p>
                */
            projects?: ProjectSummary[];
            /**
                * <p>The token to use in a subsequent <code>ListProjects</code> operation to return
                *        the next set of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListProjectsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProjectsResponse) => any;
    }
    export interface PutProjectEventsRequest {
            /**
                * <p>The name or ARN of the project to write the events to.</p>
                */
            project: string | undefined;
            /**
                * <p>An array of event structures that contain the performance data that is being sent to
                *       Evidently.</p>
                */
            events: Event[] | undefined;
    }
    export namespace PutProjectEventsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutProjectEventsRequest) => any;
    }
    /**
        * <p>A structure that contains Evidently's response to the sent events, including an event ID and error codes, if any. </p>
        */
    export interface PutProjectEventsResultEntry {
            /**
                * <p>A unique ID assigned to this <code>PutProjectEvents</code> operation. </p>
                */
            eventId?: string;
            /**
                * <p>If the <code>PutProjectEvents</code> operation has an error, the error code is returned
                *       here.</p>
                */
            errorCode?: string;
            /**
                * <p>If the <code>PutProjectEvents</code> operation has an error, the error message is
                *       returned here.</p>
                */
            errorMessage?: string;
    }
    export namespace PutProjectEventsResultEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutProjectEventsResultEntry) => any;
    }
    export interface PutProjectEventsResponse {
            /**
                * <p>The number of events in the operation that could not be used by Evidently.</p>
                */
            failedEventCount?: number;
            /**
                * <p>A structure that contains Evidently's response to the sent events, including an event ID and
                *       error codes, if any.</p>
                */
            eventResults?: PutProjectEventsResultEntry[];
    }
    export namespace PutProjectEventsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutProjectEventsResponse) => any;
    }
    export interface UpdateProjectRequest {
            /**
                * <p>The name or ARN of the project to update.</p>
                */
            project: string | undefined;
            /**
                * <p>An optional description of the project.</p>
                */
            description?: string;
    }
    export namespace UpdateProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateProjectRequest) => any;
    }
    export interface UpdateProjectResponse {
            /**
                * <p>A structure containing information about the updated project.</p>
                */
            project: Project | undefined;
    }
    export namespace UpdateProjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateProjectResponse) => any;
    }
    export interface UpdateProjectDataDeliveryRequest {
            /**
                * <p>The name or ARN of the project that you want to modify the data storage options for.</p>
                */
            project: string | undefined;
            /**
                * <p>A structure containing the S3 bucket name and bucket prefix where you want to store evaluation events.</p>
                */
            s3Destination?: S3DestinationConfig;
            /**
                * <p>A structure containing the CloudWatch Logs log group where you want to store evaluation
                *       events.</p>
                */
            cloudWatchLogs?: CloudWatchLogsDestinationConfig;
    }
    export namespace UpdateProjectDataDeliveryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateProjectDataDeliveryRequest) => any;
    }
    export interface UpdateProjectDataDeliveryResponse {
            /**
                * <p>A structure containing details about the project that you updated.</p>
                */
            project: Project | undefined;
    }
    export namespace UpdateProjectDataDeliveryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateProjectDataDeliveryResponse) => any;
    }
    export interface GetSegmentRequest {
            /**
                * <p>The ARN of the segment to return information for.</p>
                */
            segment: string | undefined;
    }
    export namespace GetSegmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSegmentRequest) => any;
    }
    export interface GetSegmentResponse {
            /**
                * <p>A structure that contains the complete information about the segment.</p>
                */
            segment: Segment | undefined;
    }
    export namespace GetSegmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSegmentResponse) => any;
    }
    export enum SegmentReferenceResourceType {
            EXPERIMENT = "EXPERIMENT",
            LAUNCH = "LAUNCH"
    }
    export interface ListSegmentReferencesRequest {
            /**
                * <p>The ARN of the segment that you want to view information for.</p>
                */
            segment: string | undefined;
            /**
                * <p>The maximum number of results to include in the response. If you omit this, the default of 50 is used.</p>
                */
            maxResults?: number;
            /**
                * <p>The token to use when requesting the next set of results. You received this token from a previous
                *       <code>ListSegmentReferences</code> operation.</p>
                */
            nextToken?: string;
            /**
                * <p>Specifies whether to return information about launches or experiments that use this segment.</p>
                */
            type: SegmentReferenceResourceType | string | undefined;
    }
    export namespace ListSegmentReferencesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSegmentReferencesRequest) => any;
    }
    /**
        * <p>A structure that contains information about one experiment or launch that
        *       uses the specified segment.  </p>
        */
    export interface RefResource {
            /**
                * <p>The name of the experiment or launch.</p>
                */
            name: string | undefined;
            /**
                * <p>Specifies whether the resource that this structure contains information about is an experiment or a launch.</p>
                */
            type: string | undefined;
            /**
                * <p>The ARN of the experiment or launch.</p>
                */
            arn?: string;
            /**
                * <p>The status of the experiment or launch.</p>
                */
            status?: string;
            /**
                * <p>The day and time that this experiment or launch started.</p>
                */
            startTime?: string;
            /**
                * <p>The day and time that this experiment or launch ended.</p>
                */
            endTime?: string;
            /**
                * <p>The day and time that this experiment or launch was most recently updated.</p>
                */
            lastUpdatedOn?: string;
    }
    export namespace RefResource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RefResource) => any;
    }
    export interface ListSegmentReferencesResponse {
            /**
                * <p>An array of structures, where each structure contains information about one experiment or launch that
                *       uses this segment.  </p>
                */
            referencedBy?: RefResource[];
            /**
                * <p>The token to use in a subsequent <code>ListSegmentReferences</code> operation to return
                *       the next set of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListSegmentReferencesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSegmentReferencesResponse) => any;
    }
    export interface ListSegmentsRequest {
            /**
                * <p>The maximum number of results to include in the response. If you omit this, the default of 50 is used.</p>
                */
            maxResults?: number;
            /**
                * <p>The token to use when requesting the next set of results. You received this token from a previous
                *       <code>ListSegments</code> operation.</p>
                */
            nextToken?: string;
    }
    export namespace ListSegmentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSegmentsRequest) => any;
    }
    export interface ListSegmentsResponse {
            /**
                * <p>An array of structures that contain information about the segments in this Region.</p>
                */
            segments?: Segment[];
            /**
                * <p>The token to use in a subsequent <code>ListSegments</code> operation to return
                *       the next set of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListSegmentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSegmentsResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The ARN of the CloudWatch Evidently resource that you're adding tags to.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The list of key-value pairs to associate with the resource.</p>
                */
            tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface TestSegmentPatternRequest {
            /**
                * <p>The pattern to test.</p>
                */
            pattern: __LazyJsonString | string | undefined;
            /**
                * <p>A sample <code>evaluationContext</code> JSON block to test against the specified pattern.</p>
                */
            payload: __LazyJsonString | string | undefined;
    }
    export namespace TestSegmentPatternRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestSegmentPatternRequest) => any;
    }
    export interface TestSegmentPatternResponse {
            /**
                * <p>Returns <code>true</code> if the pattern matches the payload.</p>
                */
            match: boolean | undefined;
    }
    export namespace TestSegmentPatternResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestSegmentPatternResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The ARN of the CloudWatch Evidently resource that you're removing tags from.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The list of tag keys to remove from the resource.</p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
}

declare module '@aws-sdk/client-evidently/node_modules/@aws-sdk/client-evidently/dist-types/models/EvidentlyServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Evidently service.
        */
    export class EvidentlyServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

