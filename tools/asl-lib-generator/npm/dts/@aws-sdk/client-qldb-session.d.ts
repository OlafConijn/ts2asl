// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-qldb-session' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { SendCommandCommandInput, SendCommandCommandOutput } from "@aws-sdk/client-qldb-session/node_modules/@aws-sdk/client-qldb-session/dist-types/commands/SendCommandCommand";
    import { QLDBSessionClient } from "@aws-sdk/client-qldb-session/node_modules/@aws-sdk/client-qldb-session/dist-types/QLDBSessionClient";
    /**
        * <p>The transactional data APIs for Amazon QLDB</p>
        *          <note>
        *             <p>Instead of interacting directly with this API, we recommend using the QLDB driver
        *             or the QLDB shell to execute data transactions on a ledger.</p>
        *             <ul>
        *                <li>
        *                   <p>If you are working with an AWS SDK, use the QLDB driver. The driver provides
        *                   a high-level abstraction layer above this <i>QLDB Session</i> data
        *                   plane and manages <code>SendCommand</code> API calls for you. For information and
        *                   a list of supported programming languages, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/getting-started-driver.html">Getting started
        *                      with the driver</a> in the <i>Amazon QLDB Developer
        *                   Guide</i>.</p>
        *                </li>
        *                <li>
        *                   <p>If you are working with the AWS Command Line Interface (AWS CLI), use the
        *                   QLDB shell. The shell is a command line interface that uses the QLDB driver to
        *                   interact with a ledger. For information, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/data-shell.html">Accessing Amazon QLDB using the
        *                      QLDB shell</a>.</p>
        *                </li>
        *             </ul>
        *          </note>
        */
    export class QLDBSession extends QLDBSessionClient {
            /**
                * <p>Sends a command to an Amazon QLDB ledger.</p>
                *          <note>
                *             <p>Instead of interacting directly with this API, we recommend using the QLDB driver
                *             or the QLDB shell to execute data transactions on a ledger.</p>
                *             <ul>
                *                <li>
                *                   <p>If you are working with an AWS SDK, use the QLDB driver. The driver provides
                *                   a high-level abstraction layer above this <i>QLDB Session</i> data
                *                   plane and manages <code>SendCommand</code> API calls for you. For information and
                *                   a list of supported programming languages, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/getting-started-driver.html">Getting started
                *                      with the driver</a> in the <i>Amazon QLDB Developer
                *                   Guide</i>.</p>
                *                </li>
                *                <li>
                *                   <p>If you are working with the AWS Command Line Interface (AWS CLI), use the
                *                   QLDB shell. The shell is a command line interface that uses the QLDB driver to
                *                   interact with a ledger. For information, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/data-shell.html">Accessing Amazon QLDB using the
                *                      QLDB shell</a>.</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            sendCommand(args: SendCommandCommandInput, options?: __HttpHandlerOptions): Promise<SendCommandCommandOutput>;
            sendCommand(args: SendCommandCommandInput, cb: (err: any, data?: SendCommandCommandOutput) => void): void;
            sendCommand(args: SendCommandCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendCommandCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-qldb-session/node_modules/@aws-sdk/client-qldb-session/dist-types/commands/SendCommandCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SendCommandRequest, SendCommandResult } from "@aws-sdk/client-qldb-session/node_modules/@aws-sdk/client-qldb-session/dist-types/models/models_0";
    import { QLDBSessionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-qldb-session/node_modules/@aws-sdk/client-qldb-session/dist-types/QLDBSessionClient";
    export interface SendCommandCommandInput extends SendCommandRequest {
    }
    export interface SendCommandCommandOutput extends SendCommandResult, __MetadataBearer {
    }
    /**
        * <p>Sends a command to an Amazon QLDB ledger.</p>
        *          <note>
        *             <p>Instead of interacting directly with this API, we recommend using the QLDB driver
        *             or the QLDB shell to execute data transactions on a ledger.</p>
        *             <ul>
        *                <li>
        *                   <p>If you are working with an AWS SDK, use the QLDB driver. The driver provides
        *                   a high-level abstraction layer above this <i>QLDB Session</i> data
        *                   plane and manages <code>SendCommand</code> API calls for you. For information and
        *                   a list of supported programming languages, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/getting-started-driver.html">Getting started
        *                      with the driver</a> in the <i>Amazon QLDB Developer
        *                   Guide</i>.</p>
        *                </li>
        *                <li>
        *                   <p>If you are working with the AWS Command Line Interface (AWS CLI), use the
        *                   QLDB shell. The shell is a command line interface that uses the QLDB driver to
        *                   interact with a ledger. For information, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/data-shell.html">Accessing Amazon QLDB using the
        *                      QLDB shell</a>.</p>
        *                </li>
        *             </ul>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QLDBSessionClient, SendCommandCommand } from "@aws-sdk/client-qldb-session"; // ES Modules import
        * // const { QLDBSessionClient, SendCommandCommand } = require("@aws-sdk/client-qldb-session"); // CommonJS import
        * const client = new QLDBSessionClient(config);
        * const command = new SendCommandCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendCommandCommandInput} for command's `input` shape.
        * @see {@link SendCommandCommandOutput} for command's `response` shape.
        * @see {@link QLDBSessionClientResolvedConfig | config} for QLDBSessionClient's `config` shape.
        *
        */
    export class SendCommandCommand extends $Command<SendCommandCommandInput, SendCommandCommandOutput, QLDBSessionClientResolvedConfig> {
            readonly input: SendCommandCommandInput;
            constructor(input: SendCommandCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QLDBSessionClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendCommandCommandInput, SendCommandCommandOutput>;
    }
}

declare module '@aws-sdk/client-qldb-session/node_modules/@aws-sdk/client-qldb-session/dist-types/QLDBSessionClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { SendCommandCommandInput, SendCommandCommandOutput } from "@aws-sdk/client-qldb-session/node_modules/@aws-sdk/client-qldb-session/dist-types/commands/SendCommandCommand";
    export type ServiceInputTypes = SendCommandCommandInput;
    export type ServiceOutputTypes = SendCommandCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type QLDBSessionClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of QLDBSessionClient class constructor that set the region, credentials and other options.
        */
    export interface QLDBSessionClientConfig extends QLDBSessionClientConfigType {
    }
    type QLDBSessionClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of QLDBSessionClient class. This is resolved and normalized from the {@link QLDBSessionClientConfig | constructor configuration interface}.
        */
    export interface QLDBSessionClientResolvedConfig extends QLDBSessionClientResolvedConfigType {
    }
    /**
        * <p>The transactional data APIs for Amazon QLDB</p>
        *          <note>
        *             <p>Instead of interacting directly with this API, we recommend using the QLDB driver
        *             or the QLDB shell to execute data transactions on a ledger.</p>
        *             <ul>
        *                <li>
        *                   <p>If you are working with an AWS SDK, use the QLDB driver. The driver provides
        *                   a high-level abstraction layer above this <i>QLDB Session</i> data
        *                   plane and manages <code>SendCommand</code> API calls for you. For information and
        *                   a list of supported programming languages, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/getting-started-driver.html">Getting started
        *                      with the driver</a> in the <i>Amazon QLDB Developer
        *                   Guide</i>.</p>
        *                </li>
        *                <li>
        *                   <p>If you are working with the AWS Command Line Interface (AWS CLI), use the
        *                   QLDB shell. The shell is a command line interface that uses the QLDB driver to
        *                   interact with a ledger. For information, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/data-shell.html">Accessing Amazon QLDB using the
        *                      QLDB shell</a>.</p>
        *                </li>
        *             </ul>
        *          </note>
        */
    export class QLDBSessionClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, QLDBSessionClientResolvedConfig> {
            /**
                * The resolved configuration of QLDBSessionClient class. This is resolved and normalized from the {@link QLDBSessionClientConfig | constructor configuration interface}.
                */
            readonly config: QLDBSessionClientResolvedConfig;
            constructor(configuration: QLDBSessionClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-qldb-session/node_modules/@aws-sdk/client-qldb-session/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { QLDBSessionServiceException as __BaseException } from "@aws-sdk/client-qldb-session/node_modules/@aws-sdk/client-qldb-session/dist-types/models/QLDBSessionServiceException";
    /**
        * <p>Contains the details of the transaction to abort.</p>
        */
    export interface AbortTransactionRequest {
    }
    export namespace AbortTransactionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AbortTransactionRequest) => any;
    }
    /**
        * <p>Contains server-side performance information for a command. Amazon QLDB captures timing
        *          information between the times when it receives the request and when it sends the
        *          corresponding response.</p>
        */
    export interface TimingInformation {
            /**
                * <p>The amount of time that QLDB spent on processing the command, measured in
                *          milliseconds.</p>
                */
            ProcessingTimeMilliseconds?: number;
    }
    export namespace TimingInformation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TimingInformation) => any;
    }
    /**
        * <p>Contains the details of the aborted transaction.</p>
        */
    export interface AbortTransactionResult {
            /**
                * <p>Contains server-side performance information for the command.</p>
                */
            TimingInformation?: TimingInformation;
    }
    export namespace AbortTransactionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AbortTransactionResult) => any;
    }
    /**
        * <p>Returned if the request is malformed or contains an error such as an invalid parameter
        *          value or a missing required parameter.</p>
        */
    export class BadRequestException extends __BaseException {
            readonly name: "BadRequestException";
            readonly $fault: "client";
            Message?: string;
            Code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BadRequestException, __BaseException>);
    }
    /**
        * <p>Returned when the request exceeds the processing capacity of the ledger.</p>
        */
    export class CapacityExceededException extends __BaseException {
            readonly name: "CapacityExceededException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CapacityExceededException, __BaseException>);
    }
    /**
        * <p>Contains the details of the transaction to commit.</p>
        */
    export interface CommitTransactionRequest {
            /**
                * <p>Specifies the transaction ID of the transaction to commit.</p>
                */
            TransactionId: string | undefined;
            /**
                * <p>Specifies the commit digest for the transaction to commit. For every active transaction,
                *          the commit digest must be passed. QLDB validates <code>CommitDigest</code> and rejects
                *          the commit with an error if the digest computed on the client does not match the digest
                *          computed by QLDB.</p>
                *          <p>The purpose of the <code>CommitDigest</code> parameter is to ensure that QLDB commits
                *          a transaction if and only if the server has processed the exact set of statements sent by
                *          the client, in the same order that client sent them, and with no duplicates.</p>
                */
            CommitDigest: Uint8Array | undefined;
    }
    export namespace CommitTransactionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CommitTransactionRequest) => any;
    }
    /**
        * <p>Contains I/O usage metrics for a command that was invoked.</p>
        */
    export interface IOUsage {
            /**
                * <p>The number of read I/O requests that the command made.</p>
                */
            ReadIOs?: number;
            /**
                * <p>The number of write I/O requests that the command made.</p>
                */
            WriteIOs?: number;
    }
    export namespace IOUsage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IOUsage) => any;
    }
    /**
        * <p>Contains the details of the committed transaction.</p>
        */
    export interface CommitTransactionResult {
            /**
                * <p>The transaction ID of the committed transaction.</p>
                */
            TransactionId?: string;
            /**
                * <p>The commit digest of the committed transaction.</p>
                */
            CommitDigest?: Uint8Array;
            /**
                * <p>Contains server-side performance information for the command.</p>
                */
            TimingInformation?: TimingInformation;
            /**
                * <p>Contains metrics about the number of I/O requests that were consumed.</p>
                */
            ConsumedIOs?: IOUsage;
    }
    export namespace CommitTransactionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CommitTransactionResult) => any;
    }
    /**
        * <p>Specifies a request to end the session.</p>
        */
    export interface EndSessionRequest {
    }
    export namespace EndSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EndSessionRequest) => any;
    }
    /**
        * <p>Contains the details of the ended session.</p>
        */
    export interface EndSessionResult {
            /**
                * <p>Contains server-side performance information for the command.</p>
                */
            TimingInformation?: TimingInformation;
    }
    export namespace EndSessionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EndSessionResult) => any;
    }
    /**
        * <p>A structure that can contain a value in multiple encoding formats.</p>
        */
    export interface ValueHolder {
            /**
                * <p>An Amazon Ion binary value contained in a <code>ValueHolder</code> structure.</p>
                */
            IonBinary?: Uint8Array;
            /**
                * <p>An Amazon Ion plaintext value contained in a <code>ValueHolder</code> structure.</p>
                */
            IonText?: string;
    }
    export namespace ValueHolder {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValueHolder) => any;
    }
    /**
        * <p>Specifies a request to execute a statement.</p>
        */
    export interface ExecuteStatementRequest {
            /**
                * <p>Specifies the transaction ID of the request.</p>
                */
            TransactionId: string | undefined;
            /**
                * <p>Specifies the statement of the request.</p>
                */
            Statement: string | undefined;
            /**
                * <p>Specifies the parameters for the parameterized statement in the request.</p>
                */
            Parameters?: ValueHolder[];
    }
    export namespace ExecuteStatementRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExecuteStatementRequest) => any;
    }
    /**
        * <p>Contains details of the fetched page.</p>
        */
    export interface Page {
            /**
                * <p>A structure that contains values in multiple encoding formats.</p>
                */
            Values?: ValueHolder[];
            /**
                * <p>The token of the next page.</p>
                */
            NextPageToken?: string;
    }
    export namespace Page {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Page) => any;
    }
    /**
        * <p>Contains the details of the executed statement.</p>
        */
    export interface ExecuteStatementResult {
            /**
                * <p>Contains the details of the first fetched page.</p>
                */
            FirstPage?: Page;
            /**
                * <p>Contains server-side performance information for the command.</p>
                */
            TimingInformation?: TimingInformation;
            /**
                * <p>Contains metrics about the number of I/O requests that were consumed.</p>
                */
            ConsumedIOs?: IOUsage;
    }
    export namespace ExecuteStatementResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExecuteStatementResult) => any;
    }
    /**
        * <p>Specifies the details of the page to be fetched.</p>
        */
    export interface FetchPageRequest {
            /**
                * <p>Specifies the transaction ID of the page to be fetched.</p>
                */
            TransactionId: string | undefined;
            /**
                * <p>Specifies the next page token of the page to be fetched.</p>
                */
            NextPageToken: string | undefined;
    }
    export namespace FetchPageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FetchPageRequest) => any;
    }
    /**
        * <p>Contains the page that was fetched.</p>
        */
    export interface FetchPageResult {
            /**
                * <p>Contains details of the fetched page.</p>
                */
            Page?: Page;
            /**
                * <p>Contains server-side performance information for the command.</p>
                */
            TimingInformation?: TimingInformation;
            /**
                * <p>Contains metrics about the number of I/O requests that were consumed.</p>
                */
            ConsumedIOs?: IOUsage;
    }
    export namespace FetchPageResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FetchPageResult) => any;
    }
    /**
        * <p>Returned if the session doesn't exist anymore because it timed out or expired.</p>
        */
    export class InvalidSessionException extends __BaseException {
            readonly name: "InvalidSessionException";
            readonly $fault: "client";
            Message?: string;
            Code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSessionException, __BaseException>);
    }
    /**
        * <p>Returned if a resource limit such as number of active sessions is exceeded.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>Returned when a transaction cannot be written to the journal due to a failure in the
        *          verification phase of <i>optimistic concurrency control</i> (OCC).</p>
        */
    export class OccConflictException extends __BaseException {
            readonly name: "OccConflictException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OccConflictException, __BaseException>);
    }
    /**
        * <p>Returned when the rate of requests exceeds the allowed throughput.</p>
        */
    export class RateExceededException extends __BaseException {
            readonly name: "RateExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RateExceededException, __BaseException>);
    }
    /**
        * <p>Specifies a request to start a new session.</p>
        */
    export interface StartSessionRequest {
            /**
                * <p>The name of the ledger to start a new session against.</p>
                */
            LedgerName: string | undefined;
    }
    export namespace StartSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartSessionRequest) => any;
    }
    /**
        * <p>Specifies a request to start a transaction.</p>
        */
    export interface StartTransactionRequest {
    }
    export namespace StartTransactionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartTransactionRequest) => any;
    }
    export interface SendCommandRequest {
            /**
                * <p>Specifies the session token for the current command. A session token is constant
                *          throughout the life of the session.</p>
                *          <p>To obtain a session token, run the <code>StartSession</code> command. This
                *             <code>SessionToken</code> is required for every subsequent command that is issued during
                *          the current session.</p>
                */
            SessionToken?: string;
            /**
                * <p>Command to start a new session. A session token is obtained as part of the
                *          response.</p>
                */
            StartSession?: StartSessionRequest;
            /**
                * <p>Command to start a new transaction.</p>
                */
            StartTransaction?: StartTransactionRequest;
            /**
                * <p>Command to end the current session.</p>
                */
            EndSession?: EndSessionRequest;
            /**
                * <p>Command to commit the specified transaction.</p>
                */
            CommitTransaction?: CommitTransactionRequest;
            /**
                * <p>Command to abort the current transaction.</p>
                */
            AbortTransaction?: AbortTransactionRequest;
            /**
                * <p>Command to execute a statement in the specified transaction.</p>
                */
            ExecuteStatement?: ExecuteStatementRequest;
            /**
                * <p>Command to fetch a page.</p>
                */
            FetchPage?: FetchPageRequest;
    }
    export namespace SendCommandRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendCommandRequest) => any;
    }
    /**
        * <p>Contains the details of the started session.</p>
        */
    export interface StartSessionResult {
            /**
                * <p>Session token of the started session. This <code>SessionToken</code> is required for
                *          every subsequent command that is issued during the current session.</p>
                */
            SessionToken?: string;
            /**
                * <p>Contains server-side performance information for the command.</p>
                */
            TimingInformation?: TimingInformation;
    }
    export namespace StartSessionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartSessionResult) => any;
    }
    /**
        * <p>Contains the details of the started transaction.</p>
        */
    export interface StartTransactionResult {
            /**
                * <p>The transaction ID of the started transaction.</p>
                */
            TransactionId?: string;
            /**
                * <p>Contains server-side performance information for the command.</p>
                */
            TimingInformation?: TimingInformation;
    }
    export namespace StartTransactionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartTransactionResult) => any;
    }
    export interface SendCommandResult {
            /**
                * <p>Contains the details of the started session that includes a session token. This
                *             <code>SessionToken</code> is required for every subsequent command that is issued during
                *          the current session.</p>
                */
            StartSession?: StartSessionResult;
            /**
                * <p>Contains the details of the started transaction.</p>
                */
            StartTransaction?: StartTransactionResult;
            /**
                * <p>Contains the details of the ended session.</p>
                */
            EndSession?: EndSessionResult;
            /**
                * <p>Contains the details of the committed transaction.</p>
                */
            CommitTransaction?: CommitTransactionResult;
            /**
                * <p>Contains the details of the aborted transaction.</p>
                */
            AbortTransaction?: AbortTransactionResult;
            /**
                * <p>Contains the details of the executed statement.</p>
                */
            ExecuteStatement?: ExecuteStatementResult;
            /**
                * <p>Contains the details of the fetched page.</p>
                */
            FetchPage?: FetchPageResult;
    }
    export namespace SendCommandResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendCommandResult) => any;
    }
}

declare module '@aws-sdk/client-qldb-session/node_modules/@aws-sdk/client-qldb-session/dist-types/models/QLDBSessionServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from QLDBSession service.
        */
    export class QLDBSessionServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

