// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-grafana' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AssociateLicenseCommandInput, AssociateLicenseCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/AssociateLicenseCommand";
    import { CreateWorkspaceApiKeyCommandInput, CreateWorkspaceApiKeyCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/CreateWorkspaceApiKeyCommand";
    import { CreateWorkspaceCommandInput, CreateWorkspaceCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/CreateWorkspaceCommand";
    import { DeleteWorkspaceApiKeyCommandInput, DeleteWorkspaceApiKeyCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/DeleteWorkspaceApiKeyCommand";
    import { DeleteWorkspaceCommandInput, DeleteWorkspaceCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/DeleteWorkspaceCommand";
    import { DescribeWorkspaceAuthenticationCommandInput, DescribeWorkspaceAuthenticationCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/DescribeWorkspaceAuthenticationCommand";
    import { DescribeWorkspaceCommandInput, DescribeWorkspaceCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/DescribeWorkspaceCommand";
    import { DisassociateLicenseCommandInput, DisassociateLicenseCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/DisassociateLicenseCommand";
    import { ListPermissionsCommandInput, ListPermissionsCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/ListPermissionsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/ListTagsForResourceCommand";
    import { ListWorkspacesCommandInput, ListWorkspacesCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/ListWorkspacesCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/UntagResourceCommand";
    import { UpdatePermissionsCommandInput, UpdatePermissionsCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/UpdatePermissionsCommand";
    import { UpdateWorkspaceAuthenticationCommandInput, UpdateWorkspaceAuthenticationCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/UpdateWorkspaceAuthenticationCommand";
    import { UpdateWorkspaceCommandInput, UpdateWorkspaceCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/UpdateWorkspaceCommand";
    import { GrafanaClient } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/GrafanaClient";
    /**
        * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to
        *        instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources.
        *        Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool
        *        that is popular for its extensible data support.</p>
        *          <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In
        *         a workspace,  you can create  Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to
        *        build, package, or deploy any hardware to run Grafana servers.  </p>
        */
    export class Grafana extends GrafanaClient {
            /**
                * <p>Assigns a Grafana Enterprise license to a workspace. Upgrading to Grafana Enterprise
                *          incurs additional fees. For more information, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/upgrade-to-Grafana-Enterprise.html">Upgrade a workspace to
                *             Grafana Enterprise</a>.</p>
                */
            associateLicense(args: AssociateLicenseCommandInput, options?: __HttpHandlerOptions): Promise<AssociateLicenseCommandOutput>;
            associateLicense(args: AssociateLicenseCommandInput, cb: (err: any, data?: AssociateLicenseCommandOutput) => void): void;
            associateLicense(args: AssociateLicenseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateLicenseCommandOutput) => void): void;
            /**
                * <p>Creates a <i>workspace</i>. In a workspace, you can create Grafana
                *          dashboards and visualizations to analyze your metrics, logs, and traces. You don't have to
                *          build, package, or deploy any hardware to run the Grafana server.</p>
                *          <p>Don't use <code>CreateWorkspace</code> to modify an existing workspace. Instead,
                *          use <a href="https://docs.aws.amazon.com/grafana/latest/APIReference/API_UpdateWorkspace.html">UpdateWorkspace</a>.</p>
                */
            createWorkspace(args: CreateWorkspaceCommandInput, options?: __HttpHandlerOptions): Promise<CreateWorkspaceCommandOutput>;
            createWorkspace(args: CreateWorkspaceCommandInput, cb: (err: any, data?: CreateWorkspaceCommandOutput) => void): void;
            createWorkspace(args: CreateWorkspaceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateWorkspaceCommandOutput) => void): void;
            /**
                * <p>Creates an API key for the workspace.  This key can be used to authenticate
                *          requests sent to the workspace's HTTP API.  See
                *          <a href=" https://docs.aws.amazon.com/grafana/latest/userguide/Using-Grafana-APIs.html"> https://docs.aws.amazon.com/grafana/latest/userguide/Using-Grafana-APIs.html</a>
                *          for available APIs and example requests.</p>
                */
            createWorkspaceApiKey(args: CreateWorkspaceApiKeyCommandInput, options?: __HttpHandlerOptions): Promise<CreateWorkspaceApiKeyCommandOutput>;
            createWorkspaceApiKey(args: CreateWorkspaceApiKeyCommandInput, cb: (err: any, data?: CreateWorkspaceApiKeyCommandOutput) => void): void;
            createWorkspaceApiKey(args: CreateWorkspaceApiKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateWorkspaceApiKeyCommandOutput) => void): void;
            /**
                * <p>Deletes an Amazon Managed Grafana workspace.</p>
                */
            deleteWorkspace(args: DeleteWorkspaceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteWorkspaceCommandOutput>;
            deleteWorkspace(args: DeleteWorkspaceCommandInput, cb: (err: any, data?: DeleteWorkspaceCommandOutput) => void): void;
            deleteWorkspace(args: DeleteWorkspaceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteWorkspaceCommandOutput) => void): void;
            /**
                * <p>Deletes an API key for a workspace.</p>
                */
            deleteWorkspaceApiKey(args: DeleteWorkspaceApiKeyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteWorkspaceApiKeyCommandOutput>;
            deleteWorkspaceApiKey(args: DeleteWorkspaceApiKeyCommandInput, cb: (err: any, data?: DeleteWorkspaceApiKeyCommandOutput) => void): void;
            deleteWorkspaceApiKey(args: DeleteWorkspaceApiKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteWorkspaceApiKeyCommandOutput) => void): void;
            /**
                * <p>Displays information about one Amazon Managed Grafana workspace.</p>
                */
            describeWorkspace(args: DescribeWorkspaceCommandInput, options?: __HttpHandlerOptions): Promise<DescribeWorkspaceCommandOutput>;
            describeWorkspace(args: DescribeWorkspaceCommandInput, cb: (err: any, data?: DescribeWorkspaceCommandOutput) => void): void;
            describeWorkspace(args: DescribeWorkspaceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeWorkspaceCommandOutput) => void): void;
            /**
                * <p>Displays information about the authentication methods used in one Amazon Managed Grafana workspace.</p>
                */
            describeWorkspaceAuthentication(args: DescribeWorkspaceAuthenticationCommandInput, options?: __HttpHandlerOptions): Promise<DescribeWorkspaceAuthenticationCommandOutput>;
            describeWorkspaceAuthentication(args: DescribeWorkspaceAuthenticationCommandInput, cb: (err: any, data?: DescribeWorkspaceAuthenticationCommandOutput) => void): void;
            describeWorkspaceAuthentication(args: DescribeWorkspaceAuthenticationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeWorkspaceAuthenticationCommandOutput) => void): void;
            /**
                * <p>Removes the Grafana Enterprise license from a workspace.</p>
                */
            disassociateLicense(args: DisassociateLicenseCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateLicenseCommandOutput>;
            disassociateLicense(args: DisassociateLicenseCommandInput, cb: (err: any, data?: DisassociateLicenseCommandOutput) => void): void;
            disassociateLicense(args: DisassociateLicenseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateLicenseCommandOutput) => void): void;
            /**
                * <p>Lists the users and groups who have the Grafana <code>Admin</code> and
                *          <code>Editor</code> roles in this workspace. If you use this
                *       operation without specifying <code>userId</code> or <code>groupId</code>, the operation returns
                *          the roles of all users
                *          and groups. If you specify a <code>userId</code> or a <code>groupId</code>, only the roles
                *          for that user or group are returned. If you do this, you can specify only one <code>userId</code> or
                *          one <code>groupId</code>.</p>
                */
            listPermissions(args: ListPermissionsCommandInput, options?: __HttpHandlerOptions): Promise<ListPermissionsCommandOutput>;
            listPermissions(args: ListPermissionsCommandInput, cb: (err: any, data?: ListPermissionsCommandOutput) => void): void;
            listPermissions(args: ListPermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPermissionsCommandOutput) => void): void;
            /**
                * <p>The <code>ListTagsForResource</code> operation returns the tags that
                *          are associated with the Amazon Managed Service for Grafana resource specified by the <code>resourceArn</code>.
                *          Currently, the only resource that can be tagged is a workspace. </p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Returns a list of Amazon Managed Grafana workspaces in the account, with some information
                *          about each workspace. For more complete information about one workspace, use <a href="https://docs.aws.amazon.com/AAMG/latest/APIReference/API_DescribeWorkspace.html">DescribeWorkspace</a>.</p>
                */
            listWorkspaces(args: ListWorkspacesCommandInput, options?: __HttpHandlerOptions): Promise<ListWorkspacesCommandOutput>;
            listWorkspaces(args: ListWorkspacesCommandInput, cb: (err: any, data?: ListWorkspacesCommandOutput) => void): void;
            listWorkspaces(args: ListWorkspacesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListWorkspacesCommandOutput) => void): void;
            /**
                * <p>The <code>TagResource</code> operation associates tags with an Amazon Managed Grafana resource.
                *          Currently, the only resource that can be tagged is workspaces. </p>
                *          <p>If you specify a new tag key for the resource, this tag is appended to the list of tags associated
                *          with the resource.  If you specify a tag key that is already associated with the resource, the new tag
                *          value that you specify replaces the previous value for that tag.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>The <code>UntagResource</code> operation removes the association of the tag with the Amazon Managed Grafana resource.
                *          </p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates which users in a workspace have the Grafana <code>Admin</code> or <code>Editor</code> roles.</p>
                */
            updatePermissions(args: UpdatePermissionsCommandInput, options?: __HttpHandlerOptions): Promise<UpdatePermissionsCommandOutput>;
            updatePermissions(args: UpdatePermissionsCommandInput, cb: (err: any, data?: UpdatePermissionsCommandOutput) => void): void;
            updatePermissions(args: UpdatePermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdatePermissionsCommandOutput) => void): void;
            /**
                * <p>Modifies an existing Amazon Managed Grafana workspace. If you use this operation and omit any
                *       optional parameters, the existing values of those parameters are not changed.</p>
                *          <p>To modify the user authentication methods that the workspace uses, such as SAML or Amazon Web Services SSO,
                *          use <a href="https://docs.aws.amazon.com/grafana/latest/APIReference/API_UpdateWorkspaceAuthentication.html">UpdateWorkspaceAuthentication</a>.</p>
                *          <p>To modify which users in the workspace have the <code>Admin</code> and <code>Editor</code> Grafana roles,
                *          use <a href="https://docs.aws.amazon.com/grafana/latest/APIReference/API_UpdatePermissions.html">UpdatePermissions</a>.</p>
                */
            updateWorkspace(args: UpdateWorkspaceCommandInput, options?: __HttpHandlerOptions): Promise<UpdateWorkspaceCommandOutput>;
            updateWorkspace(args: UpdateWorkspaceCommandInput, cb: (err: any, data?: UpdateWorkspaceCommandOutput) => void): void;
            updateWorkspace(args: UpdateWorkspaceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateWorkspaceCommandOutput) => void): void;
            /**
                * <p>Use this operation to define the identity provider (IdP) that this workspace
                *          authenticates users from, using SAML. You can also map SAML assertion attributes to
                *          workspace user information and define which groups in the assertion attribute are to have
                *          the <code>Admin</code> and <code>Editor</code> roles in the workspace.</p>
                */
            updateWorkspaceAuthentication(args: UpdateWorkspaceAuthenticationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateWorkspaceAuthenticationCommandOutput>;
            updateWorkspaceAuthentication(args: UpdateWorkspaceAuthenticationCommandInput, cb: (err: any, data?: UpdateWorkspaceAuthenticationCommandOutput) => void): void;
            updateWorkspaceAuthentication(args: UpdateWorkspaceAuthenticationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateWorkspaceAuthenticationCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/AssociateLicenseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GrafanaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/GrafanaClient";
    import { AssociateLicenseRequest, AssociateLicenseResponse } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/models/models_0";
    export interface AssociateLicenseCommandInput extends AssociateLicenseRequest {
    }
    export interface AssociateLicenseCommandOutput extends AssociateLicenseResponse, __MetadataBearer {
    }
    /**
        * <p>Assigns a Grafana Enterprise license to a workspace. Upgrading to Grafana Enterprise
        *          incurs additional fees. For more information, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/upgrade-to-Grafana-Enterprise.html">Upgrade a workspace to
        *             Grafana Enterprise</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GrafanaClient, AssociateLicenseCommand } from "@aws-sdk/client-grafana"; // ES Modules import
        * // const { GrafanaClient, AssociateLicenseCommand } = require("@aws-sdk/client-grafana"); // CommonJS import
        * const client = new GrafanaClient(config);
        * const command = new AssociateLicenseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateLicenseCommandInput} for command's `input` shape.
        * @see {@link AssociateLicenseCommandOutput} for command's `response` shape.
        * @see {@link GrafanaClientResolvedConfig | config} for GrafanaClient's `config` shape.
        *
        */
    export class AssociateLicenseCommand extends $Command<AssociateLicenseCommandInput, AssociateLicenseCommandOutput, GrafanaClientResolvedConfig> {
            readonly input: AssociateLicenseCommandInput;
            constructor(input: AssociateLicenseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GrafanaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateLicenseCommandInput, AssociateLicenseCommandOutput>;
    }
}

declare module '@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/CreateWorkspaceApiKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GrafanaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/GrafanaClient";
    import { CreateWorkspaceApiKeyRequest, CreateWorkspaceApiKeyResponse } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/models/models_0";
    export interface CreateWorkspaceApiKeyCommandInput extends CreateWorkspaceApiKeyRequest {
    }
    export interface CreateWorkspaceApiKeyCommandOutput extends CreateWorkspaceApiKeyResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an API key for the workspace.  This key can be used to authenticate
        *          requests sent to the workspace's HTTP API.  See
        *          <a href=" https://docs.aws.amazon.com/grafana/latest/userguide/Using-Grafana-APIs.html"> https://docs.aws.amazon.com/grafana/latest/userguide/Using-Grafana-APIs.html</a>
        *          for available APIs and example requests.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GrafanaClient, CreateWorkspaceApiKeyCommand } from "@aws-sdk/client-grafana"; // ES Modules import
        * // const { GrafanaClient, CreateWorkspaceApiKeyCommand } = require("@aws-sdk/client-grafana"); // CommonJS import
        * const client = new GrafanaClient(config);
        * const command = new CreateWorkspaceApiKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateWorkspaceApiKeyCommandInput} for command's `input` shape.
        * @see {@link CreateWorkspaceApiKeyCommandOutput} for command's `response` shape.
        * @see {@link GrafanaClientResolvedConfig | config} for GrafanaClient's `config` shape.
        *
        */
    export class CreateWorkspaceApiKeyCommand extends $Command<CreateWorkspaceApiKeyCommandInput, CreateWorkspaceApiKeyCommandOutput, GrafanaClientResolvedConfig> {
            readonly input: CreateWorkspaceApiKeyCommandInput;
            constructor(input: CreateWorkspaceApiKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GrafanaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateWorkspaceApiKeyCommandInput, CreateWorkspaceApiKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/CreateWorkspaceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GrafanaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/GrafanaClient";
    import { CreateWorkspaceRequest, CreateWorkspaceResponse } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/models/models_0";
    export interface CreateWorkspaceCommandInput extends CreateWorkspaceRequest {
    }
    export interface CreateWorkspaceCommandOutput extends CreateWorkspaceResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a <i>workspace</i>. In a workspace, you can create Grafana
        *          dashboards and visualizations to analyze your metrics, logs, and traces. You don't have to
        *          build, package, or deploy any hardware to run the Grafana server.</p>
        *          <p>Don't use <code>CreateWorkspace</code> to modify an existing workspace. Instead,
        *          use <a href="https://docs.aws.amazon.com/grafana/latest/APIReference/API_UpdateWorkspace.html">UpdateWorkspace</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GrafanaClient, CreateWorkspaceCommand } from "@aws-sdk/client-grafana"; // ES Modules import
        * // const { GrafanaClient, CreateWorkspaceCommand } = require("@aws-sdk/client-grafana"); // CommonJS import
        * const client = new GrafanaClient(config);
        * const command = new CreateWorkspaceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateWorkspaceCommandInput} for command's `input` shape.
        * @see {@link CreateWorkspaceCommandOutput} for command's `response` shape.
        * @see {@link GrafanaClientResolvedConfig | config} for GrafanaClient's `config` shape.
        *
        */
    export class CreateWorkspaceCommand extends $Command<CreateWorkspaceCommandInput, CreateWorkspaceCommandOutput, GrafanaClientResolvedConfig> {
            readonly input: CreateWorkspaceCommandInput;
            constructor(input: CreateWorkspaceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GrafanaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateWorkspaceCommandInput, CreateWorkspaceCommandOutput>;
    }
}

declare module '@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/DeleteWorkspaceApiKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GrafanaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/GrafanaClient";
    import { DeleteWorkspaceApiKeyRequest, DeleteWorkspaceApiKeyResponse } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/models/models_0";
    export interface DeleteWorkspaceApiKeyCommandInput extends DeleteWorkspaceApiKeyRequest {
    }
    export interface DeleteWorkspaceApiKeyCommandOutput extends DeleteWorkspaceApiKeyResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an API key for a workspace.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GrafanaClient, DeleteWorkspaceApiKeyCommand } from "@aws-sdk/client-grafana"; // ES Modules import
        * // const { GrafanaClient, DeleteWorkspaceApiKeyCommand } = require("@aws-sdk/client-grafana"); // CommonJS import
        * const client = new GrafanaClient(config);
        * const command = new DeleteWorkspaceApiKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteWorkspaceApiKeyCommandInput} for command's `input` shape.
        * @see {@link DeleteWorkspaceApiKeyCommandOutput} for command's `response` shape.
        * @see {@link GrafanaClientResolvedConfig | config} for GrafanaClient's `config` shape.
        *
        */
    export class DeleteWorkspaceApiKeyCommand extends $Command<DeleteWorkspaceApiKeyCommandInput, DeleteWorkspaceApiKeyCommandOutput, GrafanaClientResolvedConfig> {
            readonly input: DeleteWorkspaceApiKeyCommandInput;
            constructor(input: DeleteWorkspaceApiKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GrafanaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteWorkspaceApiKeyCommandInput, DeleteWorkspaceApiKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/DeleteWorkspaceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GrafanaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/GrafanaClient";
    import { DeleteWorkspaceRequest, DeleteWorkspaceResponse } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/models/models_0";
    export interface DeleteWorkspaceCommandInput extends DeleteWorkspaceRequest {
    }
    export interface DeleteWorkspaceCommandOutput extends DeleteWorkspaceResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an Amazon Managed Grafana workspace.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GrafanaClient, DeleteWorkspaceCommand } from "@aws-sdk/client-grafana"; // ES Modules import
        * // const { GrafanaClient, DeleteWorkspaceCommand } = require("@aws-sdk/client-grafana"); // CommonJS import
        * const client = new GrafanaClient(config);
        * const command = new DeleteWorkspaceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteWorkspaceCommandInput} for command's `input` shape.
        * @see {@link DeleteWorkspaceCommandOutput} for command's `response` shape.
        * @see {@link GrafanaClientResolvedConfig | config} for GrafanaClient's `config` shape.
        *
        */
    export class DeleteWorkspaceCommand extends $Command<DeleteWorkspaceCommandInput, DeleteWorkspaceCommandOutput, GrafanaClientResolvedConfig> {
            readonly input: DeleteWorkspaceCommandInput;
            constructor(input: DeleteWorkspaceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GrafanaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteWorkspaceCommandInput, DeleteWorkspaceCommandOutput>;
    }
}

declare module '@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/DescribeWorkspaceAuthenticationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GrafanaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/GrafanaClient";
    import { DescribeWorkspaceAuthenticationRequest, DescribeWorkspaceAuthenticationResponse } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/models/models_0";
    export interface DescribeWorkspaceAuthenticationCommandInput extends DescribeWorkspaceAuthenticationRequest {
    }
    export interface DescribeWorkspaceAuthenticationCommandOutput extends DescribeWorkspaceAuthenticationResponse, __MetadataBearer {
    }
    /**
        * <p>Displays information about the authentication methods used in one Amazon Managed Grafana workspace.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GrafanaClient, DescribeWorkspaceAuthenticationCommand } from "@aws-sdk/client-grafana"; // ES Modules import
        * // const { GrafanaClient, DescribeWorkspaceAuthenticationCommand } = require("@aws-sdk/client-grafana"); // CommonJS import
        * const client = new GrafanaClient(config);
        * const command = new DescribeWorkspaceAuthenticationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeWorkspaceAuthenticationCommandInput} for command's `input` shape.
        * @see {@link DescribeWorkspaceAuthenticationCommandOutput} for command's `response` shape.
        * @see {@link GrafanaClientResolvedConfig | config} for GrafanaClient's `config` shape.
        *
        */
    export class DescribeWorkspaceAuthenticationCommand extends $Command<DescribeWorkspaceAuthenticationCommandInput, DescribeWorkspaceAuthenticationCommandOutput, GrafanaClientResolvedConfig> {
            readonly input: DescribeWorkspaceAuthenticationCommandInput;
            constructor(input: DescribeWorkspaceAuthenticationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GrafanaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeWorkspaceAuthenticationCommandInput, DescribeWorkspaceAuthenticationCommandOutput>;
    }
}

declare module '@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/DescribeWorkspaceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GrafanaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/GrafanaClient";
    import { DescribeWorkspaceRequest, DescribeWorkspaceResponse } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/models/models_0";
    export interface DescribeWorkspaceCommandInput extends DescribeWorkspaceRequest {
    }
    export interface DescribeWorkspaceCommandOutput extends DescribeWorkspaceResponse, __MetadataBearer {
    }
    /**
        * <p>Displays information about one Amazon Managed Grafana workspace.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GrafanaClient, DescribeWorkspaceCommand } from "@aws-sdk/client-grafana"; // ES Modules import
        * // const { GrafanaClient, DescribeWorkspaceCommand } = require("@aws-sdk/client-grafana"); // CommonJS import
        * const client = new GrafanaClient(config);
        * const command = new DescribeWorkspaceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeWorkspaceCommandInput} for command's `input` shape.
        * @see {@link DescribeWorkspaceCommandOutput} for command's `response` shape.
        * @see {@link GrafanaClientResolvedConfig | config} for GrafanaClient's `config` shape.
        *
        */
    export class DescribeWorkspaceCommand extends $Command<DescribeWorkspaceCommandInput, DescribeWorkspaceCommandOutput, GrafanaClientResolvedConfig> {
            readonly input: DescribeWorkspaceCommandInput;
            constructor(input: DescribeWorkspaceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GrafanaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeWorkspaceCommandInput, DescribeWorkspaceCommandOutput>;
    }
}

declare module '@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/DisassociateLicenseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GrafanaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/GrafanaClient";
    import { DisassociateLicenseRequest, DisassociateLicenseResponse } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/models/models_0";
    export interface DisassociateLicenseCommandInput extends DisassociateLicenseRequest {
    }
    export interface DisassociateLicenseCommandOutput extends DisassociateLicenseResponse, __MetadataBearer {
    }
    /**
        * <p>Removes the Grafana Enterprise license from a workspace.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GrafanaClient, DisassociateLicenseCommand } from "@aws-sdk/client-grafana"; // ES Modules import
        * // const { GrafanaClient, DisassociateLicenseCommand } = require("@aws-sdk/client-grafana"); // CommonJS import
        * const client = new GrafanaClient(config);
        * const command = new DisassociateLicenseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateLicenseCommandInput} for command's `input` shape.
        * @see {@link DisassociateLicenseCommandOutput} for command's `response` shape.
        * @see {@link GrafanaClientResolvedConfig | config} for GrafanaClient's `config` shape.
        *
        */
    export class DisassociateLicenseCommand extends $Command<DisassociateLicenseCommandInput, DisassociateLicenseCommandOutput, GrafanaClientResolvedConfig> {
            readonly input: DisassociateLicenseCommandInput;
            constructor(input: DisassociateLicenseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GrafanaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateLicenseCommandInput, DisassociateLicenseCommandOutput>;
    }
}

declare module '@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/ListPermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GrafanaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/GrafanaClient";
    import { ListPermissionsRequest, ListPermissionsResponse } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/models/models_0";
    export interface ListPermissionsCommandInput extends ListPermissionsRequest {
    }
    export interface ListPermissionsCommandOutput extends ListPermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the users and groups who have the Grafana <code>Admin</code> and
        *          <code>Editor</code> roles in this workspace. If you use this
        *       operation without specifying <code>userId</code> or <code>groupId</code>, the operation returns
        *          the roles of all users
        *          and groups. If you specify a <code>userId</code> or a <code>groupId</code>, only the roles
        *          for that user or group are returned. If you do this, you can specify only one <code>userId</code> or
        *          one <code>groupId</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GrafanaClient, ListPermissionsCommand } from "@aws-sdk/client-grafana"; // ES Modules import
        * // const { GrafanaClient, ListPermissionsCommand } = require("@aws-sdk/client-grafana"); // CommonJS import
        * const client = new GrafanaClient(config);
        * const command = new ListPermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPermissionsCommandInput} for command's `input` shape.
        * @see {@link ListPermissionsCommandOutput} for command's `response` shape.
        * @see {@link GrafanaClientResolvedConfig | config} for GrafanaClient's `config` shape.
        *
        */
    export class ListPermissionsCommand extends $Command<ListPermissionsCommandInput, ListPermissionsCommandOutput, GrafanaClientResolvedConfig> {
            readonly input: ListPermissionsCommandInput;
            constructor(input: ListPermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GrafanaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPermissionsCommandInput, ListPermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GrafanaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/GrafanaClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>The <code>ListTagsForResource</code> operation returns the tags that
        *          are associated with the Amazon Managed Service for Grafana resource specified by the <code>resourceArn</code>.
        *          Currently, the only resource that can be tagged is a workspace. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GrafanaClient, ListTagsForResourceCommand } from "@aws-sdk/client-grafana"; // ES Modules import
        * // const { GrafanaClient, ListTagsForResourceCommand } = require("@aws-sdk/client-grafana"); // CommonJS import
        * const client = new GrafanaClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link GrafanaClientResolvedConfig | config} for GrafanaClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, GrafanaClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GrafanaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/ListWorkspacesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GrafanaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/GrafanaClient";
    import { ListWorkspacesRequest, ListWorkspacesResponse } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/models/models_0";
    export interface ListWorkspacesCommandInput extends ListWorkspacesRequest {
    }
    export interface ListWorkspacesCommandOutput extends ListWorkspacesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of Amazon Managed Grafana workspaces in the account, with some information
        *          about each workspace. For more complete information about one workspace, use <a href="https://docs.aws.amazon.com/AAMG/latest/APIReference/API_DescribeWorkspace.html">DescribeWorkspace</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GrafanaClient, ListWorkspacesCommand } from "@aws-sdk/client-grafana"; // ES Modules import
        * // const { GrafanaClient, ListWorkspacesCommand } = require("@aws-sdk/client-grafana"); // CommonJS import
        * const client = new GrafanaClient(config);
        * const command = new ListWorkspacesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListWorkspacesCommandInput} for command's `input` shape.
        * @see {@link ListWorkspacesCommandOutput} for command's `response` shape.
        * @see {@link GrafanaClientResolvedConfig | config} for GrafanaClient's `config` shape.
        *
        */
    export class ListWorkspacesCommand extends $Command<ListWorkspacesCommandInput, ListWorkspacesCommandOutput, GrafanaClientResolvedConfig> {
            readonly input: ListWorkspacesCommandInput;
            constructor(input: ListWorkspacesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GrafanaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListWorkspacesCommandInput, ListWorkspacesCommandOutput>;
    }
}

declare module '@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GrafanaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/GrafanaClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>The <code>TagResource</code> operation associates tags with an Amazon Managed Grafana resource.
        *          Currently, the only resource that can be tagged is workspaces. </p>
        *          <p>If you specify a new tag key for the resource, this tag is appended to the list of tags associated
        *          with the resource.  If you specify a tag key that is already associated with the resource, the new tag
        *          value that you specify replaces the previous value for that tag.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GrafanaClient, TagResourceCommand } from "@aws-sdk/client-grafana"; // ES Modules import
        * // const { GrafanaClient, TagResourceCommand } = require("@aws-sdk/client-grafana"); // CommonJS import
        * const client = new GrafanaClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link GrafanaClientResolvedConfig | config} for GrafanaClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, GrafanaClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GrafanaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GrafanaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/GrafanaClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>The <code>UntagResource</code> operation removes the association of the tag with the Amazon Managed Grafana resource.
        *          </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GrafanaClient, UntagResourceCommand } from "@aws-sdk/client-grafana"; // ES Modules import
        * // const { GrafanaClient, UntagResourceCommand } = require("@aws-sdk/client-grafana"); // CommonJS import
        * const client = new GrafanaClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link GrafanaClientResolvedConfig | config} for GrafanaClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, GrafanaClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GrafanaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/UpdatePermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GrafanaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/GrafanaClient";
    import { UpdatePermissionsRequest, UpdatePermissionsResponse } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/models/models_0";
    export interface UpdatePermissionsCommandInput extends UpdatePermissionsRequest {
    }
    export interface UpdatePermissionsCommandOutput extends UpdatePermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Updates which users in a workspace have the Grafana <code>Admin</code> or <code>Editor</code> roles.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GrafanaClient, UpdatePermissionsCommand } from "@aws-sdk/client-grafana"; // ES Modules import
        * // const { GrafanaClient, UpdatePermissionsCommand } = require("@aws-sdk/client-grafana"); // CommonJS import
        * const client = new GrafanaClient(config);
        * const command = new UpdatePermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdatePermissionsCommandInput} for command's `input` shape.
        * @see {@link UpdatePermissionsCommandOutput} for command's `response` shape.
        * @see {@link GrafanaClientResolvedConfig | config} for GrafanaClient's `config` shape.
        *
        */
    export class UpdatePermissionsCommand extends $Command<UpdatePermissionsCommandInput, UpdatePermissionsCommandOutput, GrafanaClientResolvedConfig> {
            readonly input: UpdatePermissionsCommandInput;
            constructor(input: UpdatePermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GrafanaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdatePermissionsCommandInput, UpdatePermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/UpdateWorkspaceAuthenticationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GrafanaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/GrafanaClient";
    import { UpdateWorkspaceAuthenticationRequest, UpdateWorkspaceAuthenticationResponse } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/models/models_0";
    export interface UpdateWorkspaceAuthenticationCommandInput extends UpdateWorkspaceAuthenticationRequest {
    }
    export interface UpdateWorkspaceAuthenticationCommandOutput extends UpdateWorkspaceAuthenticationResponse, __MetadataBearer {
    }
    /**
        * <p>Use this operation to define the identity provider (IdP) that this workspace
        *          authenticates users from, using SAML. You can also map SAML assertion attributes to
        *          workspace user information and define which groups in the assertion attribute are to have
        *          the <code>Admin</code> and <code>Editor</code> roles in the workspace.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GrafanaClient, UpdateWorkspaceAuthenticationCommand } from "@aws-sdk/client-grafana"; // ES Modules import
        * // const { GrafanaClient, UpdateWorkspaceAuthenticationCommand } = require("@aws-sdk/client-grafana"); // CommonJS import
        * const client = new GrafanaClient(config);
        * const command = new UpdateWorkspaceAuthenticationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateWorkspaceAuthenticationCommandInput} for command's `input` shape.
        * @see {@link UpdateWorkspaceAuthenticationCommandOutput} for command's `response` shape.
        * @see {@link GrafanaClientResolvedConfig | config} for GrafanaClient's `config` shape.
        *
        */
    export class UpdateWorkspaceAuthenticationCommand extends $Command<UpdateWorkspaceAuthenticationCommandInput, UpdateWorkspaceAuthenticationCommandOutput, GrafanaClientResolvedConfig> {
            readonly input: UpdateWorkspaceAuthenticationCommandInput;
            constructor(input: UpdateWorkspaceAuthenticationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GrafanaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateWorkspaceAuthenticationCommandInput, UpdateWorkspaceAuthenticationCommandOutput>;
    }
}

declare module '@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/UpdateWorkspaceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GrafanaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/GrafanaClient";
    import { UpdateWorkspaceRequest, UpdateWorkspaceResponse } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/models/models_0";
    export interface UpdateWorkspaceCommandInput extends UpdateWorkspaceRequest {
    }
    export interface UpdateWorkspaceCommandOutput extends UpdateWorkspaceResponse, __MetadataBearer {
    }
    /**
        * <p>Modifies an existing Amazon Managed Grafana workspace. If you use this operation and omit any
        *       optional parameters, the existing values of those parameters are not changed.</p>
        *          <p>To modify the user authentication methods that the workspace uses, such as SAML or Amazon Web Services SSO,
        *          use <a href="https://docs.aws.amazon.com/grafana/latest/APIReference/API_UpdateWorkspaceAuthentication.html">UpdateWorkspaceAuthentication</a>.</p>
        *          <p>To modify which users in the workspace have the <code>Admin</code> and <code>Editor</code> Grafana roles,
        *          use <a href="https://docs.aws.amazon.com/grafana/latest/APIReference/API_UpdatePermissions.html">UpdatePermissions</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GrafanaClient, UpdateWorkspaceCommand } from "@aws-sdk/client-grafana"; // ES Modules import
        * // const { GrafanaClient, UpdateWorkspaceCommand } = require("@aws-sdk/client-grafana"); // CommonJS import
        * const client = new GrafanaClient(config);
        * const command = new UpdateWorkspaceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateWorkspaceCommandInput} for command's `input` shape.
        * @see {@link UpdateWorkspaceCommandOutput} for command's `response` shape.
        * @see {@link GrafanaClientResolvedConfig | config} for GrafanaClient's `config` shape.
        *
        */
    export class UpdateWorkspaceCommand extends $Command<UpdateWorkspaceCommandInput, UpdateWorkspaceCommandOutput, GrafanaClientResolvedConfig> {
            readonly input: UpdateWorkspaceCommandInput;
            constructor(input: UpdateWorkspaceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GrafanaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateWorkspaceCommandInput, UpdateWorkspaceCommandOutput>;
    }
}

declare module '@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/GrafanaClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AssociateLicenseCommandInput, AssociateLicenseCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/AssociateLicenseCommand";
    import { CreateWorkspaceApiKeyCommandInput, CreateWorkspaceApiKeyCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/CreateWorkspaceApiKeyCommand";
    import { CreateWorkspaceCommandInput, CreateWorkspaceCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/CreateWorkspaceCommand";
    import { DeleteWorkspaceApiKeyCommandInput, DeleteWorkspaceApiKeyCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/DeleteWorkspaceApiKeyCommand";
    import { DeleteWorkspaceCommandInput, DeleteWorkspaceCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/DeleteWorkspaceCommand";
    import { DescribeWorkspaceAuthenticationCommandInput, DescribeWorkspaceAuthenticationCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/DescribeWorkspaceAuthenticationCommand";
    import { DescribeWorkspaceCommandInput, DescribeWorkspaceCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/DescribeWorkspaceCommand";
    import { DisassociateLicenseCommandInput, DisassociateLicenseCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/DisassociateLicenseCommand";
    import { ListPermissionsCommandInput, ListPermissionsCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/ListPermissionsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/ListTagsForResourceCommand";
    import { ListWorkspacesCommandInput, ListWorkspacesCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/ListWorkspacesCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/UntagResourceCommand";
    import { UpdatePermissionsCommandInput, UpdatePermissionsCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/UpdatePermissionsCommand";
    import { UpdateWorkspaceAuthenticationCommandInput, UpdateWorkspaceAuthenticationCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/UpdateWorkspaceAuthenticationCommand";
    import { UpdateWorkspaceCommandInput, UpdateWorkspaceCommandOutput } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/commands/UpdateWorkspaceCommand";
    export type ServiceInputTypes = AssociateLicenseCommandInput | CreateWorkspaceApiKeyCommandInput | CreateWorkspaceCommandInput | DeleteWorkspaceApiKeyCommandInput | DeleteWorkspaceCommandInput | DescribeWorkspaceAuthenticationCommandInput | DescribeWorkspaceCommandInput | DisassociateLicenseCommandInput | ListPermissionsCommandInput | ListTagsForResourceCommandInput | ListWorkspacesCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdatePermissionsCommandInput | UpdateWorkspaceAuthenticationCommandInput | UpdateWorkspaceCommandInput;
    export type ServiceOutputTypes = AssociateLicenseCommandOutput | CreateWorkspaceApiKeyCommandOutput | CreateWorkspaceCommandOutput | DeleteWorkspaceApiKeyCommandOutput | DeleteWorkspaceCommandOutput | DescribeWorkspaceAuthenticationCommandOutput | DescribeWorkspaceCommandOutput | DisassociateLicenseCommandOutput | ListPermissionsCommandOutput | ListTagsForResourceCommandOutput | ListWorkspacesCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdatePermissionsCommandOutput | UpdateWorkspaceAuthenticationCommandOutput | UpdateWorkspaceCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type GrafanaClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of GrafanaClient class constructor that set the region, credentials and other options.
        */
    export interface GrafanaClientConfig extends GrafanaClientConfigType {
    }
    type GrafanaClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of GrafanaClient class. This is resolved and normalized from the {@link GrafanaClientConfig | constructor configuration interface}.
        */
    export interface GrafanaClientResolvedConfig extends GrafanaClientResolvedConfigType {
    }
    /**
        * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to
        *        instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources.
        *        Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool
        *        that is popular for its extensible data support.</p>
        *          <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In
        *         a workspace,  you can create  Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to
        *        build, package, or deploy any hardware to run Grafana servers.  </p>
        */
    export class GrafanaClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, GrafanaClientResolvedConfig> {
            /**
                * The resolved configuration of GrafanaClient class. This is resolved and normalized from the {@link GrafanaClientConfig | constructor configuration interface}.
                */
            readonly config: GrafanaClientResolvedConfig;
            constructor(configuration: GrafanaClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { GrafanaServiceException as __BaseException } from "@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/models/GrafanaServiceException";
    /**
        * <p>You do not have sufficient permissions to perform this action. </p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    export enum AccountAccessType {
            /**
                * Indicates that the customer is using Grafana to monitor resources in their current account.
                */
            CURRENT_ACCOUNT = "CURRENT_ACCOUNT",
            /**
                * Indicates that the customer is using Grafana to monitor resources in organizational units.
                */
            ORGANIZATION = "ORGANIZATION"
    }
    /**
        * <p>A resource was in an inconsistent state during an update or a deletion.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * <p>The ID of the resource that is associated with the error.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>The type of the resource that is associated with the error.</p>
                */
            resourceType: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    export interface CreateWorkspaceApiKeyRequest {
            /**
                * <p>Specifies the name of the key to create.  Key names must be unique to the workspace.</p>
                */
            keyName: string | undefined;
            /**
                * <p>Specifies the permission level of the key.</p>
                *          <p>Valid Values: <code>VIEWER</code> | <code>EDITOR</code> | <code>ADMIN</code>
                *          </p>
                */
            keyRole: string | undefined;
            /**
                * <p>Specifies the time in seconds until the key expires.  Keys can be valid for up to 30 days.</p>
                */
            secondsToLive: number | undefined;
            /**
                * <p>The ID of the workspace in which to create an API key.</p>
                */
            workspaceId: string | undefined;
    }
    export namespace CreateWorkspaceApiKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkspaceApiKeyRequest) => any;
    }
    export interface CreateWorkspaceApiKeyResponse {
            /**
                * <p>The name of the key that was created.</p>
                */
            keyName: string | undefined;
            /**
                * <p>The key token that was created.  Use this value as a bearer token to
                *          authenticate HTTP requests to the workspace.</p>
                */
            key: string | undefined;
            /**
                * <p>The ID of the workspace that the key is valid for.</p>
                */
            workspaceId: string | undefined;
    }
    export namespace CreateWorkspaceApiKeyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkspaceApiKeyResponse) => any;
    }
    /**
        * <p>Unexpected error while processing the request. Retry the request.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            $retryable: {};
            /**
                * <p>How long to wait before you retry this operation.</p>
                */
            retryAfterSeconds?: number;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>The request references a resource that does not exist.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * <p>The ID of the resource that is associated with the error.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>The type of the resource that is associated with the error.</p>
                */
            resourceType: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>The request would cause a service quota to be exceeded.</p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            /**
                * <p>The ID of the resource that is associated with the error.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>The type of the resource that is associated with the error.</p>
                */
            resourceType: string | undefined;
            /**
                * <p>The value of a parameter in the request caused an error.</p>
                */
            serviceCode: string | undefined;
            /**
                * <p>The ID of the service quota that was exceeded.</p>
                */
            quotaCode: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    /**
        * <p>The request was denied because of request throttling. Retry the request.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            $retryable: {};
            /**
                * <p>The ID of the service that is associated with the error.</p>
                */
            serviceCode?: string;
            /**
                * <p>The ID of the service quota that was exceeded.</p>
                */
            quotaCode?: string;
            /**
                * <p>The value of a parameter in the request caused an error.</p>
                */
            retryAfterSeconds?: number;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    /**
        * <p>A structure that contains information about a request parameter that caused an error.</p>
        */
    export interface ValidationExceptionField {
            /**
                * <p>The name of the field that caused the validation error.</p>
                */
            name: string | undefined;
            /**
                * <p>A message describing why this field couldn't be validated.</p>
                */
            message: string | undefined;
    }
    export namespace ValidationExceptionField {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidationExceptionField) => any;
    }
    export enum ValidationExceptionReason {
            CANNOT_PARSE = "CANNOT_PARSE",
            FIELD_VALIDATION_FAILED = "FIELD_VALIDATION_FAILED",
            OTHER = "OTHER",
            UNKNOWN_OPERATION = "UNKNOWN_OPERATION"
    }
    /**
        * <p>The value of a parameter in the request caused an error.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            /**
                * <p>The reason that the operation failed.</p>
                */
            reason: ValidationExceptionReason | string | undefined;
            /**
                * <p>A list of fields that might be associated with the error.</p>
                */
            fieldList?: ValidationExceptionField[];
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    export interface DeleteWorkspaceApiKeyRequest {
            /**
                * <p>The name of the API key to delete.</p>
                */
            keyName: string | undefined;
            /**
                * <p>The ID of the workspace to delete.</p>
                */
            workspaceId: string | undefined;
    }
    export namespace DeleteWorkspaceApiKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorkspaceApiKeyRequest) => any;
    }
    export interface DeleteWorkspaceApiKeyResponse {
            /**
                * <p>The name of the API key that was deleted.</p>
                */
            keyName: string | undefined;
            /**
                * <p>The ID of the workspace where the key was deleted.</p>
                */
            workspaceId: string | undefined;
    }
    export namespace DeleteWorkspaceApiKeyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorkspaceApiKeyResponse) => any;
    }
    /**
        * <p>A structure that defines which attributes in the IdP assertion are to be used to define
        *          information about the users authenticated by the IdP to use the workspace.</p>
        */
    export interface AssertionAttributes {
            /**
                * <p>The name of the attribute within the SAML assertion to use as the user full "friendly" names for SAML users.</p>
                */
            name?: string;
            /**
                * <p>The name of the attribute within the SAML assertion to use as the login names for SAML users.</p>
                */
            login?: string;
            /**
                * <p>The name of the attribute within the SAML assertion to use as the email names for SAML users.</p>
                */
            email?: string;
            /**
                * <p>The name of the attribute within the SAML assertion to use as the user full "friendly" names for user groups.</p>
                */
            groups?: string;
            /**
                * <p>The name of the attribute within the SAML assertion to use as the user roles.</p>
                */
            role?: string;
            /**
                * <p>The name of the attribute within the SAML assertion to use as the user full "friendly" names for the users' organizations.</p>
                */
            org?: string;
    }
    export namespace AssertionAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssertionAttributes) => any;
    }
    export enum LicenseType {
            /**
                * Grafana Enterprise License.
                */
            ENTERPRISE = "ENTERPRISE",
            /**
                * Grafana Enterprise Free Trial License.
                */
            ENTERPRISE_FREE_TRIAL = "ENTERPRISE_FREE_TRIAL"
    }
    export interface AssociateLicenseRequest {
            /**
                * <p>The ID of the workspace to associate the license with.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>The type of license to associate with the workspace.</p>
                */
            licenseType: LicenseType | string | undefined;
    }
    export namespace AssociateLicenseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateLicenseRequest) => any;
    }
    export enum AuthenticationProviderTypes {
            /**
                * Indicates that AMG workspace has AWS SSO enabled as its authentication provider.
                */
            AWS_SSO = "AWS_SSO",
            /**
                * Indicates that the AMG workspace has SAML enabled as its authentication provider.
                */
            SAML = "SAML"
    }
    export enum SamlConfigurationStatus {
            /**
                * Indicates that SAML on an AMG workspace is enabled and has been configured.
                */
            CONFIGURED = "CONFIGURED",
            /**
                * Indicates that SAML on an AMG workspace is enabled but has not been configured.
                */
            NOT_CONFIGURED = "NOT_CONFIGURED"
    }
    /**
        * <p>A structure that describes whether the workspace uses SAML, Amazon Web Services SSO, or both methods
        *          for user authentication, and whether that authentication is fully configured.</p>
        */
    export interface AuthenticationSummary {
            /**
                * <p>Specifies whether the workspace uses SAML, Amazon Web Services SSO, or both methods for user
                *          authentication.</p>
                */
            providers: (AuthenticationProviderTypes | string)[] | undefined;
            /**
                * <p>Specifies whether the workplace's user authentication method is fully configured.</p>
                */
            samlConfigurationStatus?: SamlConfigurationStatus | string;
    }
    export namespace AuthenticationSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AuthenticationSummary) => any;
    }
    export enum DataSourceType {
            /**
                * Amazon OpenSearch Service
                */
            AMAZON_OPENSEARCH_SERVICE = "AMAZON_OPENSEARCH_SERVICE",
            /**
                * Amazon Athena
                */
            ATHENA = "ATHENA",
            /**
                * CloudWatch Logs
                */
            CLOUDWATCH = "CLOUDWATCH",
            /**
                * Managed Prometheus
                */
            PROMETHEUS = "PROMETHEUS",
            /**
                * Redshift
                */
            REDSHIFT = "REDSHIFT",
            /**
                * IoT SiteWise
                */
            SITEWISE = "SITEWISE",
            /**
                * Timestream
                */
            TIMESTREAM = "TIMESTREAM",
            /**
                * X-Ray
                */
            XRAY = "XRAY"
    }
    export enum NotificationDestinationType {
            /**
                * AWS Simple Notification Service
                */
            SNS = "SNS"
    }
    export enum PermissionType {
            /**
                * Customer Managed
                */
            CUSTOMER_MANAGED = "CUSTOMER_MANAGED",
            /**
                * Service Managed
                */
            SERVICE_MANAGED = "SERVICE_MANAGED"
    }
    export enum WorkspaceStatus {
            /**
                * Workspace is active.
                */
            ACTIVE = "ACTIVE",
            /**
                * Workspace is being created.
                */
            CREATING = "CREATING",
            /**
                * Workspace creation failed.
                */
            CREATION_FAILED = "CREATION_FAILED",
            /**
                * Workspace is being deleted.
                */
            DELETING = "DELETING",
            /**
                * Workspace deletion failed.
                */
            DELETION_FAILED = "DELETION_FAILED",
            /**
                * Workspace is in an invalid state, it can only and should be deleted.
                */
            FAILED = "FAILED",
            /**
                * Failed to remove enterprise license from workspace.
                */
            LICENSE_REMOVAL_FAILED = "LICENSE_REMOVAL_FAILED",
            /**
                * Workspace update failed.
                */
            UPDATE_FAILED = "UPDATE_FAILED",
            /**
                * Workspace is being updated.
                */
            UPDATING = "UPDATING",
            /**
                * Workspace upgrade failed.
                */
            UPGRADE_FAILED = "UPGRADE_FAILED",
            /**
                * Workspace is being upgraded to enterprise.
                */
            UPGRADING = "UPGRADING"
    }
    /**
        * <p>A structure containing information about an Amazon Managed Grafana workspace in your account.</p>
        */
    export interface WorkspaceDescription {
            /**
                * <p>Specifies whether the workspace can access Amazon Web Services resources in this Amazon Web Services account only, or whether it can also access Amazon Web Services resources in
                *          other accounts in the same organization. If this is <code>ORGANIZATION</code>, the
                *             <code>workspaceOrganizationalUnits</code> parameter specifies which organizational units
                *          the workspace can access.</p>
                */
            accountAccessType?: AccountAccessType | string;
            /**
                * <p>The date that the workspace was created.</p>
                */
            created: Date | undefined;
            /**
                * <p>Specifies the Amazon Web Services data sources that have been configured to have IAM
                *          roles and permissions created to allow
                *          Amazon Managed Grafana to read data from these sources.</p>
                */
            dataSources: (DataSourceType | string)[] | undefined;
            /**
                * <p>The user-defined description of the workspace.</p>
                */
            description?: string;
            /**
                * <p>The URL that users can use to access the Grafana console in the workspace.</p>
                */
            endpoint: string | undefined;
            /**
                * <p>The version of Grafana supported in this workspace.</p>
                */
            grafanaVersion: string | undefined;
            /**
                * <p>The unique ID of this workspace.</p>
                */
            id: string | undefined;
            /**
                * <p>The most recent date that the workspace was modified.</p>
                */
            modified: Date | undefined;
            /**
                * <p>The name of the workspace.</p>
                */
            name?: string;
            /**
                * <p>The name of the IAM role that is used to access resources through Organizations.</p>
                */
            organizationRoleName?: string;
            /**
                * <p>The Amazon Web Services notification channels that Amazon Managed Grafana can automatically create IAM
                *          roles and permissions for, to allow
                *          Amazon Managed Grafana to use these channels.</p>
                */
            notificationDestinations?: (NotificationDestinationType | string)[];
            /**
                * <p>Specifies the organizational units that this workspace is allowed to use data sources
                *          from, if this workspace is in an account that is part of an organization.</p>
                */
            organizationalUnits?: string[];
            /**
                * <p>If this is <code>Service Managed</code>, Amazon Managed Grafana automatically creates the IAM roles
                *          and provisions the permissions that the workspace needs to use Amazon Web Services data sources and notification channels.</p>
                *          <p>If this is <code>CUSTOMER_MANAGED</code>, you manage those roles and permissions
                *          yourself. If you are creating this workspace in a member account of an organization and that account is not a
                *          delegated administrator account, and
                *          you want the workspace to access data sources in other Amazon Web Services accounts in the
                *          organization, you must choose <code>CUSTOMER_MANAGED</code>.</p>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html">Amazon Managed Grafana permissions and policies for
                *          Amazon Web Services data sources and notification channels</a>
                *          </p>
                */
            permissionType?: PermissionType | string;
            /**
                * <p>The name of the CloudFormation stack set that is used to generate IAM roles
                *          to be used for this workspace.</p>
                */
            stackSetName?: string;
            /**
                * <p>The current status of the workspace.</p>
                */
            status: WorkspaceStatus | string | undefined;
            /**
                * <p>The IAM role that grants permissions to the Amazon Web Services resources that the
                *          workspace will view data from. This role must already exist.</p>
                */
            workspaceRoleArn?: string;
            /**
                * <p>Specifies whether this workspace has a full Grafana Enterprise license or a free trial license.</p>
                */
            licenseType?: LicenseType | string;
            /**
                * <p>Specifies whether this workspace has already fully used its free trial for Grafana Enterprise.</p>
                */
            freeTrialConsumed?: boolean;
            /**
                * <p>If this workspace has a full Grafana Enterprise license, this specifies when the license ends and
                *       will need to be renewed.</p>
                */
            licenseExpiration?: Date;
            /**
                * <p>If this workspace is currently in the free trial period for Grafana Enterprise, this value specifies
                *       when that free trial ends.</p>
                */
            freeTrialExpiration?: Date;
            /**
                * <p>A structure that describes whether the workspace uses SAML, Amazon Web Services SSO, or both methods
                *       for user authentication.</p>
                */
            authentication: AuthenticationSummary | undefined;
            /**
                * <p>The list of tags associated with the workspace.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace WorkspaceDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkspaceDescription) => any;
    }
    export interface AssociateLicenseResponse {
            /**
                * <p>A structure containing data about the workspace.</p>
                */
            workspace: WorkspaceDescription | undefined;
    }
    export namespace AssociateLicenseResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateLicenseResponse) => any;
    }
    export interface DescribeWorkspaceAuthenticationRequest {
            /**
                * <p>The ID of the workspace to return authentication information about.</p>
                */
            workspaceId: string | undefined;
    }
    export namespace DescribeWorkspaceAuthenticationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkspaceAuthenticationRequest) => any;
    }
    /**
        * <p>A structure containing information about how this workspace works with
        *       Amazon Web Services SSO. </p>
        */
    export interface AwsSsoAuthentication {
            /**
                * <p>The ID of the Amazon Web Services SSO-managed application that is created by Amazon Managed Grafana.</p>
                */
            ssoClientId?: string;
    }
    export namespace AwsSsoAuthentication {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsSsoAuthentication) => any;
    }
    /**
        * <p>A structure containing the identity provider (IdP) metadata used to integrate the
        *          identity provider with this workspace. You can specify the metadata either by providing a
        *          URL to its location in the <code>url</code> parameter, or by specifying the full metadata
        *          in XML format in the <code>xml</code> parameter.</p>
        */
    export type IdpMetadata = IdpMetadata.UrlMember | IdpMetadata.XmlMember | IdpMetadata.$UnknownMember;
    export namespace IdpMetadata {
            /**
                * <p>The URL of the location containing the metadata.</p>
                */
            interface UrlMember {
                    url: string;
                    xml?: never;
                    $unknown?: never;
            }
            /**
                * <p>The actual full metadata file, in XML format.</p>
                */
            interface XmlMember {
                    url?: never;
                    xml: string;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    url?: never;
                    xml?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    url: (value: string) => T;
                    xml: (value: string) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: IdpMetadata, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IdpMetadata) => any;
    }
    /**
        * <p>This structure defines which groups defined in the SAML assertion attribute are to be mapped
        *       to the Grafana <code>Admin</code> and <code>Editor</code> roles in the workspace.</p>
        */
    export interface RoleValues {
            /**
                * <p>A list of groups from the SAML assertion attribute to grant the Grafana
                *             <code>Editor</code> role to.</p>
                */
            editor?: string[];
            /**
                * <p>A list of groups from the SAML assertion attribute to grant the Grafana
                *             <code>Admin</code> role to.</p>
                */
            admin?: string[];
    }
    export namespace RoleValues {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RoleValues) => any;
    }
    /**
        * <p>A structure containing information about how this workspace works with
        *          SAML. </p>
        */
    export interface SamlConfiguration {
            /**
                * <p>A structure containing the identity provider (IdP) metadata used to integrate the
                *          identity provider with this workspace.</p>
                */
            idpMetadata: IdpMetadata | undefined;
            /**
                * <p>A structure that defines which attributes in the SAML assertion are to be used to define information about
                *       the users authenticated by that IdP to use the workspace.</p>
                */
            assertionAttributes?: AssertionAttributes;
            /**
                * <p>A structure containing arrays that map group names in the SAML assertion to the
                *       Grafana <code>Admin</code> and <code>Editor</code> roles in the workspace.</p>
                */
            roleValues?: RoleValues;
            /**
                * <p>Lists which organizations defined in the SAML assertion are allowed to use the Amazon Managed Grafana workspace.
                *       If this is empty, all organizations in the assertion attribute have access.</p>
                */
            allowedOrganizations?: string[];
            /**
                * <p>How long a sign-on session by a SAML user is valid, before the user has to sign on
                *          again.</p>
                */
            loginValidityDuration?: number;
    }
    export namespace SamlConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SamlConfiguration) => any;
    }
    /**
        * <p>A structure containing information about how this workspace works with
        *          SAML. </p>
        */
    export interface SamlAuthentication {
            /**
                * <p>Specifies whether the workspace's SAML configuration is complete.</p>
                */
            status: SamlConfigurationStatus | string | undefined;
            /**
                * <p>A structure containing details about how this workspace works with
                *          SAML. </p>
                */
            configuration?: SamlConfiguration;
    }
    export namespace SamlAuthentication {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SamlAuthentication) => any;
    }
    /**
        * <p>A structure containing information about the user authentication methods used by the workspace.</p>
        */
    export interface AuthenticationDescription {
            /**
                * <p>Specifies whether this workspace uses Amazon Web Services SSO, SAML, or both methods to authenticate
                *          users to use the Grafana console in the Amazon Managed Grafana workspace.</p>
                */
            providers: (AuthenticationProviderTypes | string)[] | undefined;
            /**
                * <p>A structure containing information about how this workspace works with
                *         SAML, including what attributes within the assertion are to be mapped to user information in the workspace. </p>
                */
            saml?: SamlAuthentication;
            /**
                * <p>A structure containing information about how this workspace works with
                *          Amazon Web Services SSO. </p>
                */
            awsSso?: AwsSsoAuthentication;
    }
    export namespace AuthenticationDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AuthenticationDescription) => any;
    }
    export interface DescribeWorkspaceAuthenticationResponse {
            /**
                * <p>A structure containing information about the authentication methods used in
                *       the workspace.</p>
                */
            authentication: AuthenticationDescription | undefined;
    }
    export namespace DescribeWorkspaceAuthenticationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkspaceAuthenticationResponse) => any;
    }
    export interface UpdateWorkspaceAuthenticationRequest {
            /**
                * <p>The ID of the workspace to update the authentication for.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>Specifies whether this workspace uses SAML 2.0, Amazon Web Services Single Sign On, or both to authenticate
                *          users for using the Grafana console within a workspace. For more information,
                *          see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/authentication-in-AMG.html">User authentication in
                *             Amazon Managed Grafana</a>.</p>
                */
            authenticationProviders: (AuthenticationProviderTypes | string)[] | undefined;
            /**
                * <p>If the workspace uses SAML, use this structure to
                *          map SAML assertion attributes to workspace user information and
                *          define which groups in the assertion attribute are to have the <code>Admin</code> and <code>Editor</code> roles
                *          in the workspace.</p>
                */
            samlConfiguration?: SamlConfiguration;
    }
    export namespace UpdateWorkspaceAuthenticationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorkspaceAuthenticationRequest) => any;
    }
    export interface UpdateWorkspaceAuthenticationResponse {
            /**
                * <p>A structure that describes the user authentication for this workspace after the update is made.</p>
                */
            authentication: AuthenticationDescription | undefined;
    }
    export namespace UpdateWorkspaceAuthenticationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorkspaceAuthenticationResponse) => any;
    }
    export interface DisassociateLicenseRequest {
            /**
                * <p>The ID of the workspace to remove the Grafana Enterprise license from.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>The type of license to remove from the workspace.</p>
                */
            licenseType: LicenseType | string | undefined;
    }
    export namespace DisassociateLicenseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateLicenseRequest) => any;
    }
    export interface DisassociateLicenseResponse {
            /**
                * <p>A structure containing information about the workspace.</p>
                */
            workspace: WorkspaceDescription | undefined;
    }
    export namespace DisassociateLicenseResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateLicenseResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The ARN of the resource the list of tags are associated with.</p>
                */
            resourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The list of tags that are associated with the resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export enum UserType {
            /**
                * SSO group.
                */
            SSO_GROUP = "SSO_GROUP",
            /**
                * SSO user.
                */
            SSO_USER = "SSO_USER"
    }
    export interface ListPermissionsRequest {
            /**
                * <p>The maximum number of results to include in the response.</p>
                */
            maxResults?: number;
            /**
                * <p>The token to use when requesting the next set of results. You received this token from a previous
                *          <code>ListPermissions</code> operation.</p>
                */
            nextToken?: string;
            /**
                * <p>(Optional) If you specify <code>SSO_USER</code>, then only the permissions of Amazon Web Services SSO users
                *          are returned. If you specify <code>SSO_GROUP</code>, only the permissions of Amazon Web Services SSO groups
                *             are returned.</p>
                */
            userType?: UserType | string;
            /**
                * <p>(Optional) Limits the results to only the user that matches this ID.</p>
                */
            userId?: string;
            /**
                * <p>(Optional) Limits the results to only the group that matches this ID.</p>
                */
            groupId?: string;
            /**
                * <p>The ID of the workspace to list permissions for. This parameter is required.</p>
                */
            workspaceId: string | undefined;
    }
    export namespace ListPermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPermissionsRequest) => any;
    }
    export enum Role {
            /**
                * Role Admin.
                */
            ADMIN = "ADMIN",
            /**
                * Role Editor.
                */
            EDITOR = "EDITOR",
            /**
                * Role Viewer.
                */
            VIEWER = "VIEWER"
    }
    /**
        * <p>A structure that specifies one user or group in the workspace.</p>
        */
    export interface User {
            /**
                * <p>The ID of the user or group.</p>
                *          <p>Pattern: <code>^([0-9a-fA-F]{10}-|)[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}$</code>
                *          </p>
                */
            id: string | undefined;
            /**
                * <p>Specifies whether this is a single user or a group.</p>
                */
            type: UserType | string | undefined;
    }
    export namespace User {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: User) => any;
    }
    /**
        * <p>A structure containing the identity of one user or group and the <code>Admin</code>
        *       or <code>Editor</code> role that they have.</p>
        */
    export interface PermissionEntry {
            /**
                * <p>A structure with the ID of the user or group with this role.</p>
                */
            user: User | undefined;
            /**
                * <p>Specifies whether the user or group has the <code>Admin</code>
                *          or <code>Editor</code> role.</p>
                */
            role: Role | string | undefined;
    }
    export namespace PermissionEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PermissionEntry) => any;
    }
    export interface ListPermissionsResponse {
            /**
                * <p>The token to use in a subsequent <code>ListPermissions</code> operation to return
                *          the next set of results.</p>
                */
            nextToken?: string;
            /**
                * <p>The permissions returned by the operation.</p>
                */
            permissions: PermissionEntry[] | undefined;
    }
    export namespace ListPermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPermissionsResponse) => any;
    }
    export enum UpdateAction {
            /**
                * Add permissions.
                */
            ADD = "ADD",
            /**
                * Revoke permissions.
                */
            REVOKE = "REVOKE"
    }
    /**
        * <p>Contains the instructions for one Grafana role permission update in a
        *          <a href="https://docs.aws.amazon.com/grafana/latest/APIReference/API_UpdatePermissions.html">UpdatePermissions</a> operation.</p>
        */
    export interface UpdateInstruction {
            /**
                * <p>Specifies whether this update is to add or revoke role permissions.</p>
                */
            action: UpdateAction | string | undefined;
            /**
                * <p>The role to add or revoke for the user or the group specified in <code>users</code>.</p>
                */
            role: Role | string | undefined;
            /**
                * <p>A structure that specifies the user or group to add or revoke the role for.</p>
                */
            users: User[] | undefined;
    }
    export namespace UpdateInstruction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateInstruction) => any;
    }
    export interface UpdatePermissionsRequest {
            /**
                * <p>An array of structures that contain the permission updates to make.</p>
                */
            updateInstructionBatch: UpdateInstruction[] | undefined;
            /**
                * <p>The ID of the workspace to update.</p>
                */
            workspaceId: string | undefined;
    }
    export namespace UpdatePermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePermissionsRequest) => any;
    }
    /**
        * <p>A structure containing information about one error encountered while performing an
        *             <a href="https://docs.aws.amazon.com/grafana/latest/APIReference/API_UpdatePermissions.html">UpdatePermissions</a> operation.</p>
        */
    export interface UpdateError {
            /**
                * <p>The error code.</p>
                */
            code: number | undefined;
            /**
                * <p>The message for this error.</p>
                */
            message: string | undefined;
            /**
                * <p>Specifies which permission update caused the error.</p>
                */
            causedBy: UpdateInstruction | undefined;
    }
    export namespace UpdateError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateError) => any;
    }
    export interface UpdatePermissionsResponse {
            /**
                * <p>An array of structures that contain the errors from the operation, if any.</p>
                */
            errors: UpdateError[] | undefined;
    }
    export namespace UpdatePermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePermissionsResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The ARN of the resource the tag is associated with.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The list of tag keys and values to associate with the resource.  You can associate tag keys only, tags (key and values) only
                *       or a combination of tag keys and tags.</p>
                */
            tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The ARN of the resource the tag association is removed from.  </p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The key values of the tag to be removed from the resource.</p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface CreateWorkspaceRequest {
            /**
                * <p>Specifies whether the workspace can access Amazon Web Services resources in this Amazon Web Services account only, or whether it can also access Amazon Web Services resources in
                *          other accounts in the same organization. If you specify <code>ORGANIZATION</code>, you must
                *          specify which organizational units the workspace can access in the
                *             <code>workspaceOrganizationalUnits</code> parameter.</p>
                */
            accountAccessType: AccountAccessType | string | undefined;
            /**
                * <p>A unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.</p>
                */
            clientToken?: string;
            /**
                * <p>The name of an IAM role that already exists to use with Organizations to access Amazon Web Services
                *          data sources and notification channels in other accounts in an organization.</p>
                */
            organizationRoleName?: string;
            /**
                * <p>If you specify <code>SERVICE_MANAGED</code> on AWS Grafana console, Amazon Managed Grafana automatically creates
                *          the IAM roles and provisions the permissions that the workspace needs to use
                *          Amazon Web Services data sources and notification channels. In CLI mode, the permissionType <code>SERVICE_MANAGED</code> will not create the IAM role
                *          for you.</p>
                *          <p>If you specify <code>CUSTOMER_MANAGED</code>, you will manage those roles and
                *          permissions yourself. If you are creating this workspace in a member account of an
                *          organization that is not a delegated administrator account, and you want the workspace to access data sources in other Amazon Web Services
                *          accounts in the organization, you must choose <code>CUSTOMER_MANAGED</code>.</p>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html">Amazon Managed Grafana permissions and policies for
                *          Amazon Web Services data sources and notification channels</a>.</p>
                */
            permissionType: PermissionType | string | undefined;
            /**
                * <p>The name of the CloudFormation stack set to use to generate IAM roles
                *       to be used for this workspace.</p>
                */
            stackSetName?: string;
            /**
                * <p>Specify the Amazon Web Services data sources that you want to be queried in this
                *          workspace. Specifying these data sources here enables Amazon Managed Grafana to create IAM roles and permissions that allow Amazon Managed Grafana to read data from these
                *          sources. You must still add them as data sources in the Grafana console in the
                *          workspace.</p>
                *          <p>If you don't specify a data source here, you can still add it as a data source in the
                *          workspace console later. However, you will then have to manually configure permissions for
                *          it.</p>
                */
            workspaceDataSources?: (DataSourceType | string)[];
            /**
                * <p>A description for the workspace. This is used only to help you identify this workspace.</p>
                *          <p>Pattern: <code>^[\\p{L}\\p{Z}\\p{N}\\p{P}]{0,2048}$</code>
                *          </p>
                */
            workspaceDescription?: string;
            /**
                * <p>The name for the workspace. It does not have to be unique.</p>
                */
            workspaceName?: string;
            /**
                * <p>Specify the Amazon Web Services notification channels that you plan to use in this workspace. Specifying these
                *          data sources here enables Amazon Managed Grafana to create IAM roles and permissions that allow
                *          Amazon Managed Grafana to use these channels.</p>
                */
            workspaceNotificationDestinations?: (NotificationDestinationType | string)[];
            /**
                * <p>Specifies the organizational units that this workspace is allowed to use data sources
                *          from, if this workspace is in an account that is part of an organization.</p>
                */
            workspaceOrganizationalUnits?: string[];
            /**
                * <p>The workspace needs an IAM role that grants permissions to the Amazon Web Services resources that the
                *       workspace will view data from. If you already have a role that you want to use, specify it here.  The permission type should be set to  <code>CUSTOMER_MANAGED</code>.</p>
                */
            workspaceRoleArn?: string;
            /**
                * <p>Specifies whether this workspace uses SAML 2.0, Amazon Web Services Single Sign On, or both to authenticate
                *          users for using the Grafana console within a workspace. For more information,
                *          see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/authentication-in-AMG.html">User authentication in
                *             Amazon Managed Grafana</a>.</p>
                */
            authenticationProviders: (AuthenticationProviderTypes | string)[] | undefined;
            /**
                * <p>The list of tags associated with the workspace.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateWorkspaceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkspaceRequest) => any;
    }
    export interface CreateWorkspaceResponse {
            /**
                * <p>A structure containing data about the workspace that was created.</p>
                */
            workspace: WorkspaceDescription | undefined;
    }
    export namespace CreateWorkspaceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkspaceResponse) => any;
    }
    export interface DeleteWorkspaceRequest {
            /**
                * <p>The ID of the workspace to delete.</p>
                */
            workspaceId: string | undefined;
    }
    export namespace DeleteWorkspaceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorkspaceRequest) => any;
    }
    export interface DeleteWorkspaceResponse {
            /**
                * <p>A structure containing information about the workspace that was deleted.</p>
                */
            workspace: WorkspaceDescription | undefined;
    }
    export namespace DeleteWorkspaceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorkspaceResponse) => any;
    }
    export interface DescribeWorkspaceRequest {
            /**
                * <p>The ID of the workspace to display information about.</p>
                */
            workspaceId: string | undefined;
    }
    export namespace DescribeWorkspaceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkspaceRequest) => any;
    }
    export interface DescribeWorkspaceResponse {
            /**
                * <p>A structure containing information about the workspace.</p>
                */
            workspace: WorkspaceDescription | undefined;
    }
    export namespace DescribeWorkspaceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkspaceResponse) => any;
    }
    export interface ListWorkspacesRequest {
            /**
                * <p>The maximum number of workspaces to include in the results.</p>
                */
            maxResults?: number;
            /**
                * <p>The token for the next set of workspaces to return. (You receive this token from a
                *          previous <code>ListWorkspaces</code> operation.)</p>
                */
            nextToken?: string;
    }
    export namespace ListWorkspacesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorkspacesRequest) => any;
    }
    /**
        * <p>A structure that contains some information about one workspace in the account.</p>
        */
    export interface WorkspaceSummary {
            /**
                * <p>The date that the workspace was created.</p>
                */
            created: Date | undefined;
            /**
                * <p>The customer-entered description of the workspace.</p>
                */
            description?: string;
            /**
                * <p>The URL endpoint to use to access the Grafana console in the workspace.</p>
                */
            endpoint: string | undefined;
            /**
                * <p>The Grafana version that the workspace is running.</p>
                */
            grafanaVersion: string | undefined;
            /**
                * <p>The unique ID of the workspace.</p>
                */
            id: string | undefined;
            /**
                * <p>The most recent date that the workspace was modified.</p>
                */
            modified: Date | undefined;
            /**
                * <p>The name of the workspace.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Web Services notification channels that Amazon Managed Grafana can automatically
                *          create IAM roles and permissions for, which allows Amazon Managed Grafana to use
                *          these channels.</p>
                */
            notificationDestinations?: (NotificationDestinationType | string)[];
            /**
                * <p>The current status of the workspace.</p>
                */
            status: WorkspaceStatus | string | undefined;
            /**
                * <p>A structure containing information about the authentication methods used in
                *          the workspace.</p>
                */
            authentication: AuthenticationSummary | undefined;
            /**
                * <p>The list of tags associated with the workspace.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace WorkspaceSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkspaceSummary) => any;
    }
    export interface ListWorkspacesResponse {
            /**
                * <p>An array of structures that contain some information about the workspaces in the account.</p>
                */
            workspaces: WorkspaceSummary[] | undefined;
            /**
                * <p>The token to use when requesting the next set of workspaces.</p>
                */
            nextToken?: string;
    }
    export namespace ListWorkspacesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorkspacesResponse) => any;
    }
    export interface UpdateWorkspaceRequest {
            /**
                * <p>Specifies whether the workspace can access Amazon Web Services resources in this Amazon Web Services account only, or whether it can also access Amazon Web Services resources in
                *          other accounts in the same organization. If you specify <code>ORGANIZATION</code>, you must
                *          specify which organizational units the workspace can access in the
                *             <code>workspaceOrganizationalUnits</code> parameter.</p>
                */
            accountAccessType?: AccountAccessType | string;
            /**
                * <p>The name of an IAM role that already exists to use to access resources through Organizations.</p>
                */
            organizationRoleName?: string;
            /**
                * <p>If you specify <code>Service Managed</code>, Amazon Managed Grafana automatically creates
                *          the IAM roles and provisions the permissions that the workspace needs to use
                *             Amazon Web Services data sources and notification channels.</p>
                *          <p>If you specify <code>CUSTOMER_MANAGED</code>, you will manage those roles and
                *          permissions yourself. If you are creating this workspace in a member account of an
                *          organization and that account is not a delegated administrator account, and you want the workspace to access data sources in other Amazon Web Services
                *          accounts in the organization, you must choose <code>CUSTOMER_MANAGED</code>.</p>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html">Amazon Managed Grafana permissions and policies for
                *          Amazon Web Services data sources and notification channels</a>
                *          </p>
                */
            permissionType?: PermissionType | string;
            /**
                * <p>The name of the CloudFormation stack set to use to generate IAM roles
                *          to be used for this workspace.</p>
                */
            stackSetName?: string;
            /**
                * <p>Specify the Amazon Web Services data sources that you want to be queried in this
                *          workspace. Specifying these data sources here enables Amazon Managed Grafana to create IAM roles and permissions that allow Amazon Managed Grafana to read data from these
                *          sources. You must still add them as data sources in the Grafana console in the
                *          workspace.</p>
                *          <p>If you don't specify a data source here, you can still add it as a data source later in
                *          the workspace console. However, you will then have to manually configure permissions for
                *          it.</p>
                */
            workspaceDataSources?: (DataSourceType | string)[];
            /**
                * <p>A description for the workspace. This is used only to help you identify this workspace.</p>
                */
            workspaceDescription?: string;
            /**
                * <p>The ID of the workspace to update.</p>
                */
            workspaceId: string | undefined;
            /**
                * <p>A new name for the workspace to update.</p>
                */
            workspaceName?: string;
            /**
                * <p>Specify the Amazon Web Services notification channels that you plan to use in this workspace. Specifying these
                *          data sources here enables Amazon Managed Grafana to create IAM roles and permissions that allow
                *          Amazon Managed Grafana to use these channels.</p>
                */
            workspaceNotificationDestinations?: (NotificationDestinationType | string)[];
            /**
                * <p>Specifies the organizational units that this workspace is allowed to use data sources
                *          from, if this workspace is in an account that is part of an organization.</p>
                */
            workspaceOrganizationalUnits?: string[];
            /**
                * <p>The workspace needs an IAM role that grants permissions to the Amazon Web Services resources that the
                *          workspace will view data from. If you already have a role that you want to use, specify it here. If you omit
                *          this field and you specify some Amazon Web Services resources in <code>workspaceDataSources</code> or
                *          <code>workspaceNotificationDestinations</code>, a new IAM role with the necessary permissions is
                *          automatically created.</p>
                */
            workspaceRoleArn?: string;
    }
    export namespace UpdateWorkspaceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorkspaceRequest) => any;
    }
    export interface UpdateWorkspaceResponse {
            /**
                * <p>A structure containing data about the workspace that was created.</p>
                */
            workspace: WorkspaceDescription | undefined;
    }
    export namespace UpdateWorkspaceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorkspaceResponse) => any;
    }
}

declare module '@aws-sdk/client-grafana/node_modules/@aws-sdk/client-grafana/dist-types/models/GrafanaServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Grafana service.
        */
    export class GrafanaServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

