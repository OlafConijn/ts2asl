// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client

declare module '@aws-sdk/client-cloudtrail' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CloudTrailClient } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { AddTagsCommandInput, AddTagsCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/AddTagsCommand";
    import { CancelQueryCommandInput, CancelQueryCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/CancelQueryCommand";
    import { CreateEventDataStoreCommandInput, CreateEventDataStoreCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/CreateEventDataStoreCommand";
    import { CreateTrailCommandInput, CreateTrailCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/CreateTrailCommand";
    import { DeleteEventDataStoreCommandInput, DeleteEventDataStoreCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/DeleteEventDataStoreCommand";
    import { DeleteTrailCommandInput, DeleteTrailCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/DeleteTrailCommand";
    import { DescribeQueryCommandInput, DescribeQueryCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/DescribeQueryCommand";
    import { DescribeTrailsCommandInput, DescribeTrailsCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/DescribeTrailsCommand";
    import { GetEventDataStoreCommandInput, GetEventDataStoreCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/GetEventDataStoreCommand";
    import { GetEventSelectorsCommandInput, GetEventSelectorsCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/GetEventSelectorsCommand";
    import { GetInsightSelectorsCommandInput, GetInsightSelectorsCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/GetInsightSelectorsCommand";
    import { GetQueryResultsCommandInput, GetQueryResultsCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/GetQueryResultsCommand";
    import { GetTrailCommandInput, GetTrailCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/GetTrailCommand";
    import { GetTrailStatusCommandInput, GetTrailStatusCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/GetTrailStatusCommand";
    import { ListEventDataStoresCommandInput, ListEventDataStoresCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/ListEventDataStoresCommand";
    import { ListPublicKeysCommandInput, ListPublicKeysCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/ListPublicKeysCommand";
    import { ListQueriesCommandInput, ListQueriesCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/ListQueriesCommand";
    import { ListTagsCommandInput, ListTagsCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/ListTagsCommand";
    import { ListTrailsCommandInput, ListTrailsCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/ListTrailsCommand";
    import { LookupEventsCommandInput, LookupEventsCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/LookupEventsCommand";
    import { PutEventSelectorsCommandInput, PutEventSelectorsCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/PutEventSelectorsCommand";
    import { PutInsightSelectorsCommandInput, PutInsightSelectorsCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/PutInsightSelectorsCommand";
    import { RemoveTagsCommandInput, RemoveTagsCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/RemoveTagsCommand";
    import { RestoreEventDataStoreCommandInput, RestoreEventDataStoreCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/RestoreEventDataStoreCommand";
    import { StartLoggingCommandInput, StartLoggingCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/StartLoggingCommand";
    import { StartQueryCommandInput, StartQueryCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/StartQueryCommand";
    import { StopLoggingCommandInput, StopLoggingCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/StopLoggingCommand";
    import { UpdateEventDataStoreCommandInput, UpdateEventDataStoreCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/UpdateEventDataStoreCommand";
    import { UpdateTrailCommandInput, UpdateTrailCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/UpdateTrailCommand";
    /**
        * <fullname>CloudTrail</fullname>
        *          <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p>
        *          <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket.
        *          The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p>
        *
        *          <note>
        *             <p>As an alternative to the API,
        *             you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various
        *          programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs
        *          provide programmatic access to CloudTrail. For example, the SDKs
        *          handle cryptographically signing requests, managing errors, and retrying requests
        *          automatically. For more information about the Amazon Web Services SDKs, including how to download and install
        *             them, see <a href="http://aws.amazon.com/tools/">Tools to Build on Amazon Web Services</a>.</p>
        *          </note>
        *          <p>See the <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html">CloudTrail User
        *          Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
        */
    export class CloudTrail extends CloudTrailClient {
            /**
                * <p>Adds one or more tags to a trail or event data store, up to a limit of 50. Overwrites an
                *          existing tag's value when a new value is specified for an existing tag key.
                *          Tag key names must be unique for a trail; you cannot have two keys with the same name but
                *          different values.
                *           If you specify a key without a value, the tag will be created with the specified key and a
                *           value of null.
                *           You can tag a trail or event data store that applies to all Amazon Web Services Regions
                *          only from the Region in which the trail or event data store was created (also known as its
                *          home region).</p>
                */
            addTags(args: AddTagsCommandInput, options?: __HttpHandlerOptions): Promise<AddTagsCommandOutput>;
            addTags(args: AddTagsCommandInput, cb: (err: any, data?: AddTagsCommandOutput) => void): void;
            addTags(args: AddTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddTagsCommandOutput) => void): void;
            /**
                * <p>Cancels a query if the query is not in a terminated state, such as <code>CANCELLED</code>, <code>FAILED</code>, <code>TIMED_OUT</code>, or <code>FINISHED</code>. You must specify an ARN value for <code>EventDataStore</code>.
                *          The ID of the query that you want to cancel is also required. When you run <code>CancelQuery</code>, the query status might
                *          show as <code>CANCELLED</code> even if the operation is not yet finished.</p>
                */
            cancelQuery(args: CancelQueryCommandInput, options?: __HttpHandlerOptions): Promise<CancelQueryCommandOutput>;
            cancelQuery(args: CancelQueryCommandInput, cb: (err: any, data?: CancelQueryCommandOutput) => void): void;
            cancelQuery(args: CancelQueryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelQueryCommandOutput) => void): void;
            /**
                * <p>Creates a new event data store.</p>
                */
            createEventDataStore(args: CreateEventDataStoreCommandInput, options?: __HttpHandlerOptions): Promise<CreateEventDataStoreCommandOutput>;
            createEventDataStore(args: CreateEventDataStoreCommandInput, cb: (err: any, data?: CreateEventDataStoreCommandOutput) => void): void;
            createEventDataStore(args: CreateEventDataStoreCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEventDataStoreCommandOutput) => void): void;
            /**
                * <p>Creates a trail that specifies the settings for delivery of log data to an Amazon S3 bucket.
                *          </p>
                */
            createTrail(args: CreateTrailCommandInput, options?: __HttpHandlerOptions): Promise<CreateTrailCommandOutput>;
            createTrail(args: CreateTrailCommandInput, cb: (err: any, data?: CreateTrailCommandOutput) => void): void;
            createTrail(args: CreateTrailCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTrailCommandOutput) => void): void;
            /**
                * <p>Disables the event data store specified by <code>EventDataStore</code>, which accepts an event data store ARN.
                *          After you run <code>DeleteEventDataStore</code>, the event data store enters a <code>PENDING_DELETION</code> state, and is automatically deleted after a wait period of
                *          seven days. <code>TerminationProtectionEnabled</code> must be set to <code>False</code> on the event data store; this
                *          operation cannot work if <code>TerminationProtectionEnabled</code> is <code>True</code>.</p>
                *          <p>After you run <code>DeleteEventDataStore</code> on an event data store, you cannot run <code>ListQueries</code>,
                *          <code>DescribeQuery</code>, or <code>GetQueryResults</code> on queries that are using an event data store in a
                *          <code>PENDING_DELETION</code> state. An event data store in the <code>PENDING_DELETION</code> state does not incur costs.</p>
                */
            deleteEventDataStore(args: DeleteEventDataStoreCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEventDataStoreCommandOutput>;
            deleteEventDataStore(args: DeleteEventDataStoreCommandInput, cb: (err: any, data?: DeleteEventDataStoreCommandOutput) => void): void;
            deleteEventDataStore(args: DeleteEventDataStoreCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEventDataStoreCommandOutput) => void): void;
            /**
                * <p>Deletes a trail. This operation must be called from the region in which the trail was
                *          created. <code>DeleteTrail</code> cannot be called on the shadow trails (replicated trails
                *          in other regions) of a trail that is enabled in all regions.</p>
                */
            deleteTrail(args: DeleteTrailCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTrailCommandOutput>;
            deleteTrail(args: DeleteTrailCommandInput, cb: (err: any, data?: DeleteTrailCommandOutput) => void): void;
            deleteTrail(args: DeleteTrailCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTrailCommandOutput) => void): void;
            /**
                * <p>Returns metadata about a query, including query run time in milliseconds, number of events scanned and matched, and query
                *          status. You must specify an ARN for <code>EventDataStore</code>, and a value for <code>QueryID</code>.</p>
                */
            describeQuery(args: DescribeQueryCommandInput, options?: __HttpHandlerOptions): Promise<DescribeQueryCommandOutput>;
            describeQuery(args: DescribeQueryCommandInput, cb: (err: any, data?: DescribeQueryCommandOutput) => void): void;
            describeQuery(args: DescribeQueryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeQueryCommandOutput) => void): void;
            /**
                * <p>Retrieves settings for one or more trails associated with the current region for your account.</p>
                */
            describeTrails(args: DescribeTrailsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTrailsCommandOutput>;
            describeTrails(args: DescribeTrailsCommandInput, cb: (err: any, data?: DescribeTrailsCommandOutput) => void): void;
            describeTrails(args: DescribeTrailsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTrailsCommandOutput) => void): void;
            /**
                * <p>Returns information about an event data store specified as either an ARN or the ID portion of the ARN.</p>
                */
            getEventDataStore(args: GetEventDataStoreCommandInput, options?: __HttpHandlerOptions): Promise<GetEventDataStoreCommandOutput>;
            getEventDataStore(args: GetEventDataStoreCommandInput, cb: (err: any, data?: GetEventDataStoreCommandOutput) => void): void;
            getEventDataStore(args: GetEventDataStoreCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEventDataStoreCommandOutput) => void): void;
            /**
                * <p>Describes the settings for the event selectors that you configured for your trail.
                *          The information returned for your event selectors includes the following:</p>
                *          <ul>
                *             <li>
                *                <p>If your event selector includes read-only events, write-only events, or
                *             all events. This applies to both management events and data events.</p>
                *             </li>
                *             <li>
                *                <p>If your event selector includes management events.</p>
                *             </li>
                *             <li>
                *                <p>If your event selector includes data events, the resources on which you are logging data
                *                events.</p>
                *             </li>
                *          </ul>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-management-and-data-events-with-cloudtrail.html">Logging Data and Management Events for Trails
                *       </a> in the <i>CloudTrail User Guide</i>.</p>
                */
            getEventSelectors(args: GetEventSelectorsCommandInput, options?: __HttpHandlerOptions): Promise<GetEventSelectorsCommandOutput>;
            getEventSelectors(args: GetEventSelectorsCommandInput, cb: (err: any, data?: GetEventSelectorsCommandOutput) => void): void;
            getEventSelectors(args: GetEventSelectorsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEventSelectorsCommandOutput) => void): void;
            /**
                * <p>Describes the settings for the Insights event selectors that you configured for your trail. <code>GetInsightSelectors</code> shows
                *          if CloudTrail Insights event logging is enabled on the trail, and if it is, which insight types are enabled.
                *          If you run <code>GetInsightSelectors</code> on a trail that does not have Insights events enabled, the operation throws the exception
                *          <code>InsightNotEnabledException</code>
                *          </p>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-insights-events-with-cloudtrail.html">Logging CloudTrail Insights Events for Trails
                *       </a> in the <i>CloudTrail User Guide</i>.</p>
                */
            getInsightSelectors(args: GetInsightSelectorsCommandInput, options?: __HttpHandlerOptions): Promise<GetInsightSelectorsCommandOutput>;
            getInsightSelectors(args: GetInsightSelectorsCommandInput, cb: (err: any, data?: GetInsightSelectorsCommandOutput) => void): void;
            getInsightSelectors(args: GetInsightSelectorsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetInsightSelectorsCommandOutput) => void): void;
            /**
                * <p>Gets event data results of a query. You must specify the <code>QueryID</code> value returned by the <code>StartQuery</code>
                *          operation, and an ARN for <code>EventDataStore</code>.</p>
                */
            getQueryResults(args: GetQueryResultsCommandInput, options?: __HttpHandlerOptions): Promise<GetQueryResultsCommandOutput>;
            getQueryResults(args: GetQueryResultsCommandInput, cb: (err: any, data?: GetQueryResultsCommandOutput) => void): void;
            getQueryResults(args: GetQueryResultsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetQueryResultsCommandOutput) => void): void;
            /**
                * <p>Returns settings information for a specified trail.</p>
                */
            getTrail(args: GetTrailCommandInput, options?: __HttpHandlerOptions): Promise<GetTrailCommandOutput>;
            getTrail(args: GetTrailCommandInput, cb: (err: any, data?: GetTrailCommandOutput) => void): void;
            getTrail(args: GetTrailCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTrailCommandOutput) => void): void;
            /**
                * <p>Returns a JSON-formatted list of information about the specified trail. Fields include information on delivery errors, Amazon SNS and Amazon S3 errors, and start and stop logging times for each trail. This operation returns trail status from a single region. To return trail status from all regions, you must call the operation on each region.</p>
                */
            getTrailStatus(args: GetTrailStatusCommandInput, options?: __HttpHandlerOptions): Promise<GetTrailStatusCommandOutput>;
            getTrailStatus(args: GetTrailStatusCommandInput, cb: (err: any, data?: GetTrailStatusCommandOutput) => void): void;
            getTrailStatus(args: GetTrailStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTrailStatusCommandOutput) => void): void;
            /**
                * <p>Returns information about all event data stores in the account, in the current region.</p>
                */
            listEventDataStores(args: ListEventDataStoresCommandInput, options?: __HttpHandlerOptions): Promise<ListEventDataStoresCommandOutput>;
            listEventDataStores(args: ListEventDataStoresCommandInput, cb: (err: any, data?: ListEventDataStoresCommandOutput) => void): void;
            listEventDataStores(args: ListEventDataStoresCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEventDataStoresCommandOutput) => void): void;
            /**
                * <p>Returns all public keys whose private keys were used to sign the digest files within the specified time range. The public key is needed to validate digest files that were signed with its corresponding private key.</p>
                *          <note>
                *             <p>CloudTrail uses different private and public key pairs per region. Each digest file is signed with a private key
                *             unique to its region. When you validate a digest file from a specific region, you must look in the same region for its
                *             corresponding public key.</p>
                *          </note>
                */
            listPublicKeys(args: ListPublicKeysCommandInput, options?: __HttpHandlerOptions): Promise<ListPublicKeysCommandOutput>;
            listPublicKeys(args: ListPublicKeysCommandInput, cb: (err: any, data?: ListPublicKeysCommandOutput) => void): void;
            listPublicKeys(args: ListPublicKeysCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPublicKeysCommandOutput) => void): void;
            /**
                * <p>Returns a list of queries and query statuses for the past seven days. You must specify an ARN value for
                *          <code>EventDataStore</code>. Optionally, to shorten the list of results, you can specify a time range,
                *          formatted as timestamps, by adding <code>StartTime</code> and <code>EndTime</code> parameters, and a
                *          <code>QueryStatus</code> value. Valid values for <code>QueryStatus</code> include <code>QUEUED</code>, <code>RUNNING</code>,
                *          <code>FINISHED</code>, <code>FAILED</code>, <code>TIMED_OUT</code>, or <code>CANCELLED</code>.</p>
                */
            listQueries(args: ListQueriesCommandInput, options?: __HttpHandlerOptions): Promise<ListQueriesCommandOutput>;
            listQueries(args: ListQueriesCommandInput, cb: (err: any, data?: ListQueriesCommandOutput) => void): void;
            listQueries(args: ListQueriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListQueriesCommandOutput) => void): void;
            /**
                * <p>Lists the tags for the trail or event data store in the current region.</p>
                */
            listTags(args: ListTagsCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsCommandOutput>;
            listTags(args: ListTagsCommandInput, cb: (err: any, data?: ListTagsCommandOutput) => void): void;
            listTags(args: ListTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsCommandOutput) => void): void;
            /**
                * <p>Lists trails that are in the current account.</p>
                */
            listTrails(args: ListTrailsCommandInput, options?: __HttpHandlerOptions): Promise<ListTrailsCommandOutput>;
            listTrails(args: ListTrailsCommandInput, cb: (err: any, data?: ListTrailsCommandOutput) => void): void;
            listTrails(args: ListTrailsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTrailsCommandOutput) => void): void;
            /**
                * <p>Looks up <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html#cloudtrail-concepts-management-events">management events</a> or
                *          <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html#cloudtrail-concepts-insights-events">CloudTrail Insights events</a> that are captured by CloudTrail.
                *          You can look up events that occurred in a region within the last 90 days. Lookup supports the following attributes for management events:</p>
                *          <ul>
                *             <li>
                *                <p>Amazon Web Services access key</p>
                *             </li>
                *             <li>
                *                <p>Event ID</p>
                *             </li>
                *             <li>
                *                <p>Event name</p>
                *             </li>
                *             <li>
                *                <p>Event source</p>
                *             </li>
                *             <li>
                *                <p>Read only</p>
                *             </li>
                *             <li>
                *                <p>Resource name</p>
                *             </li>
                *             <li>
                *                <p>Resource type</p>
                *             </li>
                *             <li>
                *                <p>User name</p>
                *             </li>
                *          </ul>
                *          <p>Lookup supports the following attributes for Insights events:</p>
                *          <ul>
                *             <li>
                *                <p>Event ID</p>
                *             </li>
                *             <li>
                *                <p>Event name</p>
                *             </li>
                *             <li>
                *                <p>Event source</p>
                *             </li>
                *          </ul>
                *          <p>All attributes are optional. The default number of results returned is 50, with a
                *          maximum of 50 possible. The response includes a token that you can use to get the next page
                *          of results.</p>
                *          <important>
                *             <p>The rate of lookup requests is limited to two per second, per account, per region. If this
                *             limit is exceeded, a throttling error occurs.</p>
                *          </important>
                */
            lookupEvents(args: LookupEventsCommandInput, options?: __HttpHandlerOptions): Promise<LookupEventsCommandOutput>;
            lookupEvents(args: LookupEventsCommandInput, cb: (err: any, data?: LookupEventsCommandOutput) => void): void;
            lookupEvents(args: LookupEventsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: LookupEventsCommandOutput) => void): void;
            /**
                * <p>Configures an event selector or advanced event selectors for your trail.
                *          Use event selectors or advanced event selectors to specify management and data event settings for your trail. By
                *          default, trails created without specific event selectors are configured to log all read and
                *          write management events, and no data events.</p>
                *          <p>When an event occurs in your account, CloudTrail
                *          evaluates the event selectors or advanced event selectors in all trails. For each trail, if the event matches
                *          any event selector, the trail processes and logs the event. If the event doesn't match any event
                *          selector, the trail doesn't log the event.</p>
                *          <p>Example</p>
                *          <ol>
                *             <li>
                *                <p>You create an event selector for a trail and specify that you want
                *                write-only events.</p>
                *             </li>
                *             <li>
                *                <p>The EC2 <code>GetConsoleOutput</code> and <code>RunInstances</code> API
                *                operations occur in your account.</p>
                *             </li>
                *             <li>
                *                <p>CloudTrail evaluates whether the events match your event
                *                selectors.</p>
                *             </li>
                *             <li>
                *                <p>The <code>RunInstances</code> is a write-only event and it matches your
                *                event selector. The trail logs the event.</p>
                *             </li>
                *             <li>
                *                <p>The <code>GetConsoleOutput</code> is a read-only event that doesn't
                *                match your event selector. The trail doesn't log the event.
                *          </p>
                *             </li>
                *          </ol>
                *          <p>The <code>PutEventSelectors</code> operation must be called from the region in which
                *          the trail was created; otherwise, an <code>InvalidHomeRegionException</code> exception is
                *          thrown.</p>
                *          <p>You can configure up to five event selectors for each trail. For more information, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-management-and-data-events-with-cloudtrail.html">Logging data and management events for trails
                *       </a> and <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html">Quotas in CloudTrail</a>
                *          in the <i>CloudTrail User Guide</i>.</p>
                *          <p>You can add advanced event selectors, and conditions for your advanced
                *          event selectors, up to a maximum of 500 values for all conditions and selectors on a trail.
                *          You can use either <code>AdvancedEventSelectors</code> or <code>EventSelectors</code>, but not both. If you apply <code>AdvancedEventSelectors</code>
                *          to a trail, any existing <code>EventSelectors</code> are overwritten. For more information about
                *          advanced event selectors, see
                *          <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html">Logging
                *             data events for trails</a> in the <i>CloudTrail User Guide</i>.</p>
                */
            putEventSelectors(args: PutEventSelectorsCommandInput, options?: __HttpHandlerOptions): Promise<PutEventSelectorsCommandOutput>;
            putEventSelectors(args: PutEventSelectorsCommandInput, cb: (err: any, data?: PutEventSelectorsCommandOutput) => void): void;
            putEventSelectors(args: PutEventSelectorsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutEventSelectorsCommandOutput) => void): void;
            /**
                * <p>Lets you enable Insights event logging by specifying the Insights
                *          selectors that you want to enable on an existing trail. You also use
                *          <code>PutInsightSelectors</code> to turn off Insights event logging, by passing an empty list of insight types.
                *          The valid Insights event types in this release are <code>ApiErrorRateInsight</code> and <code>ApiCallRateInsight</code>.</p>
                */
            putInsightSelectors(args: PutInsightSelectorsCommandInput, options?: __HttpHandlerOptions): Promise<PutInsightSelectorsCommandOutput>;
            putInsightSelectors(args: PutInsightSelectorsCommandInput, cb: (err: any, data?: PutInsightSelectorsCommandOutput) => void): void;
            putInsightSelectors(args: PutInsightSelectorsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutInsightSelectorsCommandOutput) => void): void;
            /**
                * <p>Removes the specified tags from a trail or event data store.</p>
                */
            removeTags(args: RemoveTagsCommandInput, options?: __HttpHandlerOptions): Promise<RemoveTagsCommandOutput>;
            removeTags(args: RemoveTagsCommandInput, cb: (err: any, data?: RemoveTagsCommandOutput) => void): void;
            removeTags(args: RemoveTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveTagsCommandOutput) => void): void;
            /**
                * <p>Restores a deleted event data store specified by <code>EventDataStore</code>, which accepts an event data store ARN.
                *          You can only restore a deleted event data store within the seven-day wait period after deletion. Restoring an event data store
                *          can take several minutes, depending on the size of the event data store.</p>
                */
            restoreEventDataStore(args: RestoreEventDataStoreCommandInput, options?: __HttpHandlerOptions): Promise<RestoreEventDataStoreCommandOutput>;
            restoreEventDataStore(args: RestoreEventDataStoreCommandInput, cb: (err: any, data?: RestoreEventDataStoreCommandOutput) => void): void;
            restoreEventDataStore(args: RestoreEventDataStoreCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RestoreEventDataStoreCommandOutput) => void): void;
            /**
                * <p>Starts the recording of Amazon Web Services API calls and log file delivery for a trail. For a trail that is enabled in all regions, this operation must be called from the region in which the trail was created. This operation cannot be called on the shadow trails (replicated trails in other regions) of a trail that is enabled in all regions.</p>
                */
            startLogging(args: StartLoggingCommandInput, options?: __HttpHandlerOptions): Promise<StartLoggingCommandOutput>;
            startLogging(args: StartLoggingCommandInput, cb: (err: any, data?: StartLoggingCommandOutput) => void): void;
            startLogging(args: StartLoggingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartLoggingCommandOutput) => void): void;
            /**
                * <p>Starts a CloudTrail Lake query. The required <code>QueryStatement</code>
                *          parameter provides your SQL query, enclosed in single quotation marks.</p>
                */
            startQuery(args: StartQueryCommandInput, options?: __HttpHandlerOptions): Promise<StartQueryCommandOutput>;
            startQuery(args: StartQueryCommandInput, cb: (err: any, data?: StartQueryCommandOutput) => void): void;
            startQuery(args: StartQueryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartQueryCommandOutput) => void): void;
            /**
                * <p>Suspends the recording of Amazon Web Services API calls and log file delivery for the specified trail.
                *          Under most circumstances, there is no need to use this action. You can update a trail
                *          without stopping it first. This action is the only way to stop recording. For a trail
                *          enabled in all regions, this operation must be called from the region in which the trail
                *          was created, or an <code>InvalidHomeRegionException</code> will occur. This operation
                *          cannot be called on the shadow trails (replicated trails in other regions) of a trail
                *          enabled in all regions.</p>
                */
            stopLogging(args: StopLoggingCommandInput, options?: __HttpHandlerOptions): Promise<StopLoggingCommandOutput>;
            stopLogging(args: StopLoggingCommandInput, cb: (err: any, data?: StopLoggingCommandOutput) => void): void;
            stopLogging(args: StopLoggingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopLoggingCommandOutput) => void): void;
            /**
                * <p>Updates an event data store. The required <code>EventDataStore</code> value is an ARN or the ID portion of the ARN.
                *          Other parameters are optional, but at least one optional parameter must be specified, or CloudTrail throws an error.
                *          <code>RetentionPeriod</code> is in days, and valid values are integers between 90 and 2555.
                *          By default, <code>TerminationProtection</code> is enabled. <code>AdvancedEventSelectors</code> includes or excludes management
                *          and data events in your event data store; for more information about <code>AdvancedEventSelectors</code>, see
                *          <a>PutEventSelectorsRequest$AdvancedEventSelectors</a>.</p>
                */
            updateEventDataStore(args: UpdateEventDataStoreCommandInput, options?: __HttpHandlerOptions): Promise<UpdateEventDataStoreCommandOutput>;
            updateEventDataStore(args: UpdateEventDataStoreCommandInput, cb: (err: any, data?: UpdateEventDataStoreCommandOutput) => void): void;
            updateEventDataStore(args: UpdateEventDataStoreCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateEventDataStoreCommandOutput) => void): void;
            /**
                * <p>Updates trail settings that control what events you are logging, and how to handle log files. Changes to a trail do not require
                *          stopping the CloudTrail service. Use this action to designate an existing bucket for log
                *          delivery. If the existing bucket has previously been a target for CloudTrail log files,
                *          an IAM policy exists for the bucket. <code>UpdateTrail</code> must be called from the
                *          region in which the trail was created; otherwise, an
                *             <code>InvalidHomeRegionException</code> is thrown.</p>
                */
            updateTrail(args: UpdateTrailCommandInput, options?: __HttpHandlerOptions): Promise<UpdateTrailCommandOutput>;
            updateTrail(args: UpdateTrailCommandInput, cb: (err: any, data?: UpdateTrailCommandOutput) => void): void;
            updateTrail(args: UpdateTrailCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateTrailCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AddTagsCommandInput, AddTagsCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/AddTagsCommand";
    import { CancelQueryCommandInput, CancelQueryCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/CancelQueryCommand";
    import { CreateEventDataStoreCommandInput, CreateEventDataStoreCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/CreateEventDataStoreCommand";
    import { CreateTrailCommandInput, CreateTrailCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/CreateTrailCommand";
    import { DeleteEventDataStoreCommandInput, DeleteEventDataStoreCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/DeleteEventDataStoreCommand";
    import { DeleteTrailCommandInput, DeleteTrailCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/DeleteTrailCommand";
    import { DescribeQueryCommandInput, DescribeQueryCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/DescribeQueryCommand";
    import { DescribeTrailsCommandInput, DescribeTrailsCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/DescribeTrailsCommand";
    import { GetEventDataStoreCommandInput, GetEventDataStoreCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/GetEventDataStoreCommand";
    import { GetEventSelectorsCommandInput, GetEventSelectorsCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/GetEventSelectorsCommand";
    import { GetInsightSelectorsCommandInput, GetInsightSelectorsCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/GetInsightSelectorsCommand";
    import { GetQueryResultsCommandInput, GetQueryResultsCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/GetQueryResultsCommand";
    import { GetTrailCommandInput, GetTrailCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/GetTrailCommand";
    import { GetTrailStatusCommandInput, GetTrailStatusCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/GetTrailStatusCommand";
    import { ListEventDataStoresCommandInput, ListEventDataStoresCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/ListEventDataStoresCommand";
    import { ListPublicKeysCommandInput, ListPublicKeysCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/ListPublicKeysCommand";
    import { ListQueriesCommandInput, ListQueriesCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/ListQueriesCommand";
    import { ListTagsCommandInput, ListTagsCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/ListTagsCommand";
    import { ListTrailsCommandInput, ListTrailsCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/ListTrailsCommand";
    import { LookupEventsCommandInput, LookupEventsCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/LookupEventsCommand";
    import { PutEventSelectorsCommandInput, PutEventSelectorsCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/PutEventSelectorsCommand";
    import { PutInsightSelectorsCommandInput, PutInsightSelectorsCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/PutInsightSelectorsCommand";
    import { RemoveTagsCommandInput, RemoveTagsCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/RemoveTagsCommand";
    import { RestoreEventDataStoreCommandInput, RestoreEventDataStoreCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/RestoreEventDataStoreCommand";
    import { StartLoggingCommandInput, StartLoggingCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/StartLoggingCommand";
    import { StartQueryCommandInput, StartQueryCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/StartQueryCommand";
    import { StopLoggingCommandInput, StopLoggingCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/StopLoggingCommand";
    import { UpdateEventDataStoreCommandInput, UpdateEventDataStoreCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/UpdateEventDataStoreCommand";
    import { UpdateTrailCommandInput, UpdateTrailCommandOutput } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/UpdateTrailCommand";
    export type ServiceInputTypes = AddTagsCommandInput | CancelQueryCommandInput | CreateEventDataStoreCommandInput | CreateTrailCommandInput | DeleteEventDataStoreCommandInput | DeleteTrailCommandInput | DescribeQueryCommandInput | DescribeTrailsCommandInput | GetEventDataStoreCommandInput | GetEventSelectorsCommandInput | GetInsightSelectorsCommandInput | GetQueryResultsCommandInput | GetTrailCommandInput | GetTrailStatusCommandInput | ListEventDataStoresCommandInput | ListPublicKeysCommandInput | ListQueriesCommandInput | ListTagsCommandInput | ListTrailsCommandInput | LookupEventsCommandInput | PutEventSelectorsCommandInput | PutInsightSelectorsCommandInput | RemoveTagsCommandInput | RestoreEventDataStoreCommandInput | StartLoggingCommandInput | StartQueryCommandInput | StopLoggingCommandInput | UpdateEventDataStoreCommandInput | UpdateTrailCommandInput;
    export type ServiceOutputTypes = AddTagsCommandOutput | CancelQueryCommandOutput | CreateEventDataStoreCommandOutput | CreateTrailCommandOutput | DeleteEventDataStoreCommandOutput | DeleteTrailCommandOutput | DescribeQueryCommandOutput | DescribeTrailsCommandOutput | GetEventDataStoreCommandOutput | GetEventSelectorsCommandOutput | GetInsightSelectorsCommandOutput | GetQueryResultsCommandOutput | GetTrailCommandOutput | GetTrailStatusCommandOutput | ListEventDataStoresCommandOutput | ListPublicKeysCommandOutput | ListQueriesCommandOutput | ListTagsCommandOutput | ListTrailsCommandOutput | LookupEventsCommandOutput | PutEventSelectorsCommandOutput | PutInsightSelectorsCommandOutput | RemoveTagsCommandOutput | RestoreEventDataStoreCommandOutput | StartLoggingCommandOutput | StartQueryCommandOutput | StopLoggingCommandOutput | UpdateEventDataStoreCommandOutput | UpdateTrailCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type CloudTrailClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of CloudTrailClient class constructor that set the region, credentials and other options.
        */
    export interface CloudTrailClientConfig extends CloudTrailClientConfigType {
    }
    type CloudTrailClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of CloudTrailClient class. This is resolved and normalized from the {@link CloudTrailClientConfig | constructor configuration interface}.
        */
    export interface CloudTrailClientResolvedConfig extends CloudTrailClientResolvedConfigType {
    }
    /**
        * <fullname>CloudTrail</fullname>
        *          <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p>
        *          <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket.
        *          The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p>
        *
        *          <note>
        *             <p>As an alternative to the API,
        *             you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various
        *          programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs
        *          provide programmatic access to CloudTrail. For example, the SDKs
        *          handle cryptographically signing requests, managing errors, and retrying requests
        *          automatically. For more information about the Amazon Web Services SDKs, including how to download and install
        *             them, see <a href="http://aws.amazon.com/tools/">Tools to Build on Amazon Web Services</a>.</p>
        *          </note>
        *          <p>See the <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html">CloudTrail User
        *          Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
        */
    export class CloudTrailClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, CloudTrailClientResolvedConfig> {
            /**
                * The resolved configuration of CloudTrailClient class. This is resolved and normalized from the {@link CloudTrailClientConfig | constructor configuration interface}.
                */
            readonly config: CloudTrailClientResolvedConfig;
            constructor(configuration: CloudTrailClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/AddTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { AddTagsRequest, AddTagsResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface AddTagsCommandInput extends AddTagsRequest {
    }
    export interface AddTagsCommandOutput extends AddTagsResponse, __MetadataBearer {
    }
    /**
        * <p>Adds one or more tags to a trail or event data store, up to a limit of 50. Overwrites an
        *          existing tag's value when a new value is specified for an existing tag key.
        *          Tag key names must be unique for a trail; you cannot have two keys with the same name but
        *          different values.
        *           If you specify a key without a value, the tag will be created with the specified key and a
        *           value of null.
        *           You can tag a trail or event data store that applies to all Amazon Web Services Regions
        *          only from the Region in which the trail or event data store was created (also known as its
        *          home region).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, AddTagsCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, AddTagsCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new AddTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddTagsCommandInput} for command's `input` shape.
        * @see {@link AddTagsCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class AddTagsCommand extends $Command<AddTagsCommandInput, AddTagsCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: AddTagsCommandInput;
            constructor(input: AddTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddTagsCommandInput, AddTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/CancelQueryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { CancelQueryRequest, CancelQueryResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface CancelQueryCommandInput extends CancelQueryRequest {
    }
    export interface CancelQueryCommandOutput extends CancelQueryResponse, __MetadataBearer {
    }
    /**
        * <p>Cancels a query if the query is not in a terminated state, such as <code>CANCELLED</code>, <code>FAILED</code>, <code>TIMED_OUT</code>, or <code>FINISHED</code>. You must specify an ARN value for <code>EventDataStore</code>.
        *          The ID of the query that you want to cancel is also required. When you run <code>CancelQuery</code>, the query status might
        *          show as <code>CANCELLED</code> even if the operation is not yet finished.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, CancelQueryCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, CancelQueryCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new CancelQueryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelQueryCommandInput} for command's `input` shape.
        * @see {@link CancelQueryCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class CancelQueryCommand extends $Command<CancelQueryCommandInput, CancelQueryCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: CancelQueryCommandInput;
            constructor(input: CancelQueryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelQueryCommandInput, CancelQueryCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/CreateEventDataStoreCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { CreateEventDataStoreRequest, CreateEventDataStoreResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface CreateEventDataStoreCommandInput extends CreateEventDataStoreRequest {
    }
    export interface CreateEventDataStoreCommandOutput extends CreateEventDataStoreResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new event data store.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, CreateEventDataStoreCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, CreateEventDataStoreCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new CreateEventDataStoreCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateEventDataStoreCommandInput} for command's `input` shape.
        * @see {@link CreateEventDataStoreCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class CreateEventDataStoreCommand extends $Command<CreateEventDataStoreCommandInput, CreateEventDataStoreCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: CreateEventDataStoreCommandInput;
            constructor(input: CreateEventDataStoreCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateEventDataStoreCommandInput, CreateEventDataStoreCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/CreateTrailCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { CreateTrailRequest, CreateTrailResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface CreateTrailCommandInput extends CreateTrailRequest {
    }
    export interface CreateTrailCommandOutput extends CreateTrailResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a trail that specifies the settings for delivery of log data to an Amazon S3 bucket.
        *          </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, CreateTrailCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, CreateTrailCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new CreateTrailCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateTrailCommandInput} for command's `input` shape.
        * @see {@link CreateTrailCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class CreateTrailCommand extends $Command<CreateTrailCommandInput, CreateTrailCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: CreateTrailCommandInput;
            constructor(input: CreateTrailCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateTrailCommandInput, CreateTrailCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/DeleteEventDataStoreCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { DeleteEventDataStoreRequest, DeleteEventDataStoreResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface DeleteEventDataStoreCommandInput extends DeleteEventDataStoreRequest {
    }
    export interface DeleteEventDataStoreCommandOutput extends DeleteEventDataStoreResponse, __MetadataBearer {
    }
    /**
        * <p>Disables the event data store specified by <code>EventDataStore</code>, which accepts an event data store ARN.
        *          After you run <code>DeleteEventDataStore</code>, the event data store enters a <code>PENDING_DELETION</code> state, and is automatically deleted after a wait period of
        *          seven days. <code>TerminationProtectionEnabled</code> must be set to <code>False</code> on the event data store; this
        *          operation cannot work if <code>TerminationProtectionEnabled</code> is <code>True</code>.</p>
        *          <p>After you run <code>DeleteEventDataStore</code> on an event data store, you cannot run <code>ListQueries</code>,
        *          <code>DescribeQuery</code>, or <code>GetQueryResults</code> on queries that are using an event data store in a
        *          <code>PENDING_DELETION</code> state. An event data store in the <code>PENDING_DELETION</code> state does not incur costs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, DeleteEventDataStoreCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, DeleteEventDataStoreCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new DeleteEventDataStoreCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEventDataStoreCommandInput} for command's `input` shape.
        * @see {@link DeleteEventDataStoreCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class DeleteEventDataStoreCommand extends $Command<DeleteEventDataStoreCommandInput, DeleteEventDataStoreCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: DeleteEventDataStoreCommandInput;
            constructor(input: DeleteEventDataStoreCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEventDataStoreCommandInput, DeleteEventDataStoreCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/DeleteTrailCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { DeleteTrailRequest, DeleteTrailResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface DeleteTrailCommandInput extends DeleteTrailRequest {
    }
    export interface DeleteTrailCommandOutput extends DeleteTrailResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a trail. This operation must be called from the region in which the trail was
        *          created. <code>DeleteTrail</code> cannot be called on the shadow trails (replicated trails
        *          in other regions) of a trail that is enabled in all regions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, DeleteTrailCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, DeleteTrailCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new DeleteTrailCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteTrailCommandInput} for command's `input` shape.
        * @see {@link DeleteTrailCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class DeleteTrailCommand extends $Command<DeleteTrailCommandInput, DeleteTrailCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: DeleteTrailCommandInput;
            constructor(input: DeleteTrailCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteTrailCommandInput, DeleteTrailCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/DescribeQueryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { DescribeQueryRequest, DescribeQueryResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface DescribeQueryCommandInput extends DescribeQueryRequest {
    }
    export interface DescribeQueryCommandOutput extends DescribeQueryResponse, __MetadataBearer {
    }
    /**
        * <p>Returns metadata about a query, including query run time in milliseconds, number of events scanned and matched, and query
        *          status. You must specify an ARN for <code>EventDataStore</code>, and a value for <code>QueryID</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, DescribeQueryCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, DescribeQueryCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new DescribeQueryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeQueryCommandInput} for command's `input` shape.
        * @see {@link DescribeQueryCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class DescribeQueryCommand extends $Command<DescribeQueryCommandInput, DescribeQueryCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: DescribeQueryCommandInput;
            constructor(input: DescribeQueryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeQueryCommandInput, DescribeQueryCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/DescribeTrailsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { DescribeTrailsRequest, DescribeTrailsResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface DescribeTrailsCommandInput extends DescribeTrailsRequest {
    }
    export interface DescribeTrailsCommandOutput extends DescribeTrailsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves settings for one or more trails associated with the current region for your account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, DescribeTrailsCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, DescribeTrailsCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new DescribeTrailsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeTrailsCommandInput} for command's `input` shape.
        * @see {@link DescribeTrailsCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class DescribeTrailsCommand extends $Command<DescribeTrailsCommandInput, DescribeTrailsCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: DescribeTrailsCommandInput;
            constructor(input: DescribeTrailsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeTrailsCommandInput, DescribeTrailsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/GetEventDataStoreCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { GetEventDataStoreRequest, GetEventDataStoreResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface GetEventDataStoreCommandInput extends GetEventDataStoreRequest {
    }
    export interface GetEventDataStoreCommandOutput extends GetEventDataStoreResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about an event data store specified as either an ARN or the ID portion of the ARN.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, GetEventDataStoreCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, GetEventDataStoreCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new GetEventDataStoreCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetEventDataStoreCommandInput} for command's `input` shape.
        * @see {@link GetEventDataStoreCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class GetEventDataStoreCommand extends $Command<GetEventDataStoreCommandInput, GetEventDataStoreCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: GetEventDataStoreCommandInput;
            constructor(input: GetEventDataStoreCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetEventDataStoreCommandInput, GetEventDataStoreCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/GetEventSelectorsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { GetEventSelectorsRequest, GetEventSelectorsResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface GetEventSelectorsCommandInput extends GetEventSelectorsRequest {
    }
    export interface GetEventSelectorsCommandOutput extends GetEventSelectorsResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the settings for the event selectors that you configured for your trail.
        *          The information returned for your event selectors includes the following:</p>
        *          <ul>
        *             <li>
        *                <p>If your event selector includes read-only events, write-only events, or
        *             all events. This applies to both management events and data events.</p>
        *             </li>
        *             <li>
        *                <p>If your event selector includes management events.</p>
        *             </li>
        *             <li>
        *                <p>If your event selector includes data events, the resources on which you are logging data
        *                events.</p>
        *             </li>
        *          </ul>
        *          <p>For more information, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-management-and-data-events-with-cloudtrail.html">Logging Data and Management Events for Trails
        *       </a> in the <i>CloudTrail User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, GetEventSelectorsCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, GetEventSelectorsCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new GetEventSelectorsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetEventSelectorsCommandInput} for command's `input` shape.
        * @see {@link GetEventSelectorsCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class GetEventSelectorsCommand extends $Command<GetEventSelectorsCommandInput, GetEventSelectorsCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: GetEventSelectorsCommandInput;
            constructor(input: GetEventSelectorsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetEventSelectorsCommandInput, GetEventSelectorsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/GetInsightSelectorsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { GetInsightSelectorsRequest, GetInsightSelectorsResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface GetInsightSelectorsCommandInput extends GetInsightSelectorsRequest {
    }
    export interface GetInsightSelectorsCommandOutput extends GetInsightSelectorsResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the settings for the Insights event selectors that you configured for your trail. <code>GetInsightSelectors</code> shows
        *          if CloudTrail Insights event logging is enabled on the trail, and if it is, which insight types are enabled.
        *          If you run <code>GetInsightSelectors</code> on a trail that does not have Insights events enabled, the operation throws the exception
        *          <code>InsightNotEnabledException</code>
        *          </p>
        *          <p>For more information, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-insights-events-with-cloudtrail.html">Logging CloudTrail Insights Events for Trails
        *       </a> in the <i>CloudTrail User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, GetInsightSelectorsCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, GetInsightSelectorsCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new GetInsightSelectorsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetInsightSelectorsCommandInput} for command's `input` shape.
        * @see {@link GetInsightSelectorsCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class GetInsightSelectorsCommand extends $Command<GetInsightSelectorsCommandInput, GetInsightSelectorsCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: GetInsightSelectorsCommandInput;
            constructor(input: GetInsightSelectorsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetInsightSelectorsCommandInput, GetInsightSelectorsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/GetQueryResultsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { GetQueryResultsRequest, GetQueryResultsResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface GetQueryResultsCommandInput extends GetQueryResultsRequest {
    }
    export interface GetQueryResultsCommandOutput extends GetQueryResultsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets event data results of a query. You must specify the <code>QueryID</code> value returned by the <code>StartQuery</code>
        *          operation, and an ARN for <code>EventDataStore</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, GetQueryResultsCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, GetQueryResultsCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new GetQueryResultsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetQueryResultsCommandInput} for command's `input` shape.
        * @see {@link GetQueryResultsCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class GetQueryResultsCommand extends $Command<GetQueryResultsCommandInput, GetQueryResultsCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: GetQueryResultsCommandInput;
            constructor(input: GetQueryResultsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetQueryResultsCommandInput, GetQueryResultsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/GetTrailCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { GetTrailRequest, GetTrailResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface GetTrailCommandInput extends GetTrailRequest {
    }
    export interface GetTrailCommandOutput extends GetTrailResponse, __MetadataBearer {
    }
    /**
        * <p>Returns settings information for a specified trail.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, GetTrailCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, GetTrailCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new GetTrailCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTrailCommandInput} for command's `input` shape.
        * @see {@link GetTrailCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class GetTrailCommand extends $Command<GetTrailCommandInput, GetTrailCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: GetTrailCommandInput;
            constructor(input: GetTrailCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTrailCommandInput, GetTrailCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/GetTrailStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { GetTrailStatusRequest, GetTrailStatusResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface GetTrailStatusCommandInput extends GetTrailStatusRequest {
    }
    export interface GetTrailStatusCommandOutput extends GetTrailStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a JSON-formatted list of information about the specified trail. Fields include information on delivery errors, Amazon SNS and Amazon S3 errors, and start and stop logging times for each trail. This operation returns trail status from a single region. To return trail status from all regions, you must call the operation on each region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, GetTrailStatusCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, GetTrailStatusCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new GetTrailStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTrailStatusCommandInput} for command's `input` shape.
        * @see {@link GetTrailStatusCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class GetTrailStatusCommand extends $Command<GetTrailStatusCommandInput, GetTrailStatusCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: GetTrailStatusCommandInput;
            constructor(input: GetTrailStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTrailStatusCommandInput, GetTrailStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/ListEventDataStoresCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { ListEventDataStoresRequest, ListEventDataStoresResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface ListEventDataStoresCommandInput extends ListEventDataStoresRequest {
    }
    export interface ListEventDataStoresCommandOutput extends ListEventDataStoresResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about all event data stores in the account, in the current region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, ListEventDataStoresCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, ListEventDataStoresCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new ListEventDataStoresCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEventDataStoresCommandInput} for command's `input` shape.
        * @see {@link ListEventDataStoresCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class ListEventDataStoresCommand extends $Command<ListEventDataStoresCommandInput, ListEventDataStoresCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: ListEventDataStoresCommandInput;
            constructor(input: ListEventDataStoresCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEventDataStoresCommandInput, ListEventDataStoresCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/ListPublicKeysCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { ListPublicKeysRequest, ListPublicKeysResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface ListPublicKeysCommandInput extends ListPublicKeysRequest {
    }
    export interface ListPublicKeysCommandOutput extends ListPublicKeysResponse, __MetadataBearer {
    }
    /**
        * <p>Returns all public keys whose private keys were used to sign the digest files within the specified time range. The public key is needed to validate digest files that were signed with its corresponding private key.</p>
        *          <note>
        *             <p>CloudTrail uses different private and public key pairs per region. Each digest file is signed with a private key
        *             unique to its region. When you validate a digest file from a specific region, you must look in the same region for its
        *             corresponding public key.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, ListPublicKeysCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, ListPublicKeysCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new ListPublicKeysCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPublicKeysCommandInput} for command's `input` shape.
        * @see {@link ListPublicKeysCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class ListPublicKeysCommand extends $Command<ListPublicKeysCommandInput, ListPublicKeysCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: ListPublicKeysCommandInput;
            constructor(input: ListPublicKeysCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPublicKeysCommandInput, ListPublicKeysCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/ListQueriesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { ListQueriesRequest, ListQueriesResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface ListQueriesCommandInput extends ListQueriesRequest {
    }
    export interface ListQueriesCommandOutput extends ListQueriesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of queries and query statuses for the past seven days. You must specify an ARN value for
        *          <code>EventDataStore</code>. Optionally, to shorten the list of results, you can specify a time range,
        *          formatted as timestamps, by adding <code>StartTime</code> and <code>EndTime</code> parameters, and a
        *          <code>QueryStatus</code> value. Valid values for <code>QueryStatus</code> include <code>QUEUED</code>, <code>RUNNING</code>,
        *          <code>FINISHED</code>, <code>FAILED</code>, <code>TIMED_OUT</code>, or <code>CANCELLED</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, ListQueriesCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, ListQueriesCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new ListQueriesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListQueriesCommandInput} for command's `input` shape.
        * @see {@link ListQueriesCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class ListQueriesCommand extends $Command<ListQueriesCommandInput, ListQueriesCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: ListQueriesCommandInput;
            constructor(input: ListQueriesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListQueriesCommandInput, ListQueriesCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/ListTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { ListTagsRequest, ListTagsResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface ListTagsCommandInput extends ListTagsRequest {
    }
    export interface ListTagsCommandOutput extends ListTagsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the tags for the trail or event data store in the current region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, ListTagsCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, ListTagsCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new ListTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsCommandInput} for command's `input` shape.
        * @see {@link ListTagsCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class ListTagsCommand extends $Command<ListTagsCommandInput, ListTagsCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: ListTagsCommandInput;
            constructor(input: ListTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsCommandInput, ListTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/ListTrailsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { ListTrailsRequest, ListTrailsResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface ListTrailsCommandInput extends ListTrailsRequest {
    }
    export interface ListTrailsCommandOutput extends ListTrailsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists trails that are in the current account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, ListTrailsCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, ListTrailsCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new ListTrailsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTrailsCommandInput} for command's `input` shape.
        * @see {@link ListTrailsCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class ListTrailsCommand extends $Command<ListTrailsCommandInput, ListTrailsCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: ListTrailsCommandInput;
            constructor(input: ListTrailsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTrailsCommandInput, ListTrailsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/LookupEventsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { LookupEventsRequest, LookupEventsResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface LookupEventsCommandInput extends LookupEventsRequest {
    }
    export interface LookupEventsCommandOutput extends LookupEventsResponse, __MetadataBearer {
    }
    /**
        * <p>Looks up <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html#cloudtrail-concepts-management-events">management events</a> or
        *          <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html#cloudtrail-concepts-insights-events">CloudTrail Insights events</a> that are captured by CloudTrail.
        *          You can look up events that occurred in a region within the last 90 days. Lookup supports the following attributes for management events:</p>
        *          <ul>
        *             <li>
        *                <p>Amazon Web Services access key</p>
        *             </li>
        *             <li>
        *                <p>Event ID</p>
        *             </li>
        *             <li>
        *                <p>Event name</p>
        *             </li>
        *             <li>
        *                <p>Event source</p>
        *             </li>
        *             <li>
        *                <p>Read only</p>
        *             </li>
        *             <li>
        *                <p>Resource name</p>
        *             </li>
        *             <li>
        *                <p>Resource type</p>
        *             </li>
        *             <li>
        *                <p>User name</p>
        *             </li>
        *          </ul>
        *          <p>Lookup supports the following attributes for Insights events:</p>
        *          <ul>
        *             <li>
        *                <p>Event ID</p>
        *             </li>
        *             <li>
        *                <p>Event name</p>
        *             </li>
        *             <li>
        *                <p>Event source</p>
        *             </li>
        *          </ul>
        *          <p>All attributes are optional. The default number of results returned is 50, with a
        *          maximum of 50 possible. The response includes a token that you can use to get the next page
        *          of results.</p>
        *          <important>
        *             <p>The rate of lookup requests is limited to two per second, per account, per region. If this
        *             limit is exceeded, a throttling error occurs.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, LookupEventsCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, LookupEventsCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new LookupEventsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link LookupEventsCommandInput} for command's `input` shape.
        * @see {@link LookupEventsCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class LookupEventsCommand extends $Command<LookupEventsCommandInput, LookupEventsCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: LookupEventsCommandInput;
            constructor(input: LookupEventsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<LookupEventsCommandInput, LookupEventsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/PutEventSelectorsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { PutEventSelectorsRequest, PutEventSelectorsResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface PutEventSelectorsCommandInput extends PutEventSelectorsRequest {
    }
    export interface PutEventSelectorsCommandOutput extends PutEventSelectorsResponse, __MetadataBearer {
    }
    /**
        * <p>Configures an event selector or advanced event selectors for your trail.
        *          Use event selectors or advanced event selectors to specify management and data event settings for your trail. By
        *          default, trails created without specific event selectors are configured to log all read and
        *          write management events, and no data events.</p>
        *          <p>When an event occurs in your account, CloudTrail
        *          evaluates the event selectors or advanced event selectors in all trails. For each trail, if the event matches
        *          any event selector, the trail processes and logs the event. If the event doesn't match any event
        *          selector, the trail doesn't log the event.</p>
        *          <p>Example</p>
        *          <ol>
        *             <li>
        *                <p>You create an event selector for a trail and specify that you want
        *                write-only events.</p>
        *             </li>
        *             <li>
        *                <p>The EC2 <code>GetConsoleOutput</code> and <code>RunInstances</code> API
        *                operations occur in your account.</p>
        *             </li>
        *             <li>
        *                <p>CloudTrail evaluates whether the events match your event
        *                selectors.</p>
        *             </li>
        *             <li>
        *                <p>The <code>RunInstances</code> is a write-only event and it matches your
        *                event selector. The trail logs the event.</p>
        *             </li>
        *             <li>
        *                <p>The <code>GetConsoleOutput</code> is a read-only event that doesn't
        *                match your event selector. The trail doesn't log the event.
        *          </p>
        *             </li>
        *          </ol>
        *          <p>The <code>PutEventSelectors</code> operation must be called from the region in which
        *          the trail was created; otherwise, an <code>InvalidHomeRegionException</code> exception is
        *          thrown.</p>
        *          <p>You can configure up to five event selectors for each trail. For more information, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-management-and-data-events-with-cloudtrail.html">Logging data and management events for trails
        *       </a> and <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html">Quotas in CloudTrail</a>
        *          in the <i>CloudTrail User Guide</i>.</p>
        *          <p>You can add advanced event selectors, and conditions for your advanced
        *          event selectors, up to a maximum of 500 values for all conditions and selectors on a trail.
        *          You can use either <code>AdvancedEventSelectors</code> or <code>EventSelectors</code>, but not both. If you apply <code>AdvancedEventSelectors</code>
        *          to a trail, any existing <code>EventSelectors</code> are overwritten. For more information about
        *          advanced event selectors, see
        *          <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html">Logging
        *             data events for trails</a> in the <i>CloudTrail User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, PutEventSelectorsCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, PutEventSelectorsCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new PutEventSelectorsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutEventSelectorsCommandInput} for command's `input` shape.
        * @see {@link PutEventSelectorsCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class PutEventSelectorsCommand extends $Command<PutEventSelectorsCommandInput, PutEventSelectorsCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: PutEventSelectorsCommandInput;
            constructor(input: PutEventSelectorsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutEventSelectorsCommandInput, PutEventSelectorsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/PutInsightSelectorsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { PutInsightSelectorsRequest, PutInsightSelectorsResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface PutInsightSelectorsCommandInput extends PutInsightSelectorsRequest {
    }
    export interface PutInsightSelectorsCommandOutput extends PutInsightSelectorsResponse, __MetadataBearer {
    }
    /**
        * <p>Lets you enable Insights event logging by specifying the Insights
        *          selectors that you want to enable on an existing trail. You also use
        *          <code>PutInsightSelectors</code> to turn off Insights event logging, by passing an empty list of insight types.
        *          The valid Insights event types in this release are <code>ApiErrorRateInsight</code> and <code>ApiCallRateInsight</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, PutInsightSelectorsCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, PutInsightSelectorsCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new PutInsightSelectorsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutInsightSelectorsCommandInput} for command's `input` shape.
        * @see {@link PutInsightSelectorsCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class PutInsightSelectorsCommand extends $Command<PutInsightSelectorsCommandInput, PutInsightSelectorsCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: PutInsightSelectorsCommandInput;
            constructor(input: PutInsightSelectorsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutInsightSelectorsCommandInput, PutInsightSelectorsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/RemoveTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { RemoveTagsRequest, RemoveTagsResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface RemoveTagsCommandInput extends RemoveTagsRequest {
    }
    export interface RemoveTagsCommandOutput extends RemoveTagsResponse, __MetadataBearer {
    }
    /**
        * <p>Removes the specified tags from a trail or event data store.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, RemoveTagsCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, RemoveTagsCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new RemoveTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveTagsCommandInput} for command's `input` shape.
        * @see {@link RemoveTagsCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class RemoveTagsCommand extends $Command<RemoveTagsCommandInput, RemoveTagsCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: RemoveTagsCommandInput;
            constructor(input: RemoveTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveTagsCommandInput, RemoveTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/RestoreEventDataStoreCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { RestoreEventDataStoreRequest, RestoreEventDataStoreResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface RestoreEventDataStoreCommandInput extends RestoreEventDataStoreRequest {
    }
    export interface RestoreEventDataStoreCommandOutput extends RestoreEventDataStoreResponse, __MetadataBearer {
    }
    /**
        * <p>Restores a deleted event data store specified by <code>EventDataStore</code>, which accepts an event data store ARN.
        *          You can only restore a deleted event data store within the seven-day wait period after deletion. Restoring an event data store
        *          can take several minutes, depending on the size of the event data store.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, RestoreEventDataStoreCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, RestoreEventDataStoreCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new RestoreEventDataStoreCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RestoreEventDataStoreCommandInput} for command's `input` shape.
        * @see {@link RestoreEventDataStoreCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class RestoreEventDataStoreCommand extends $Command<RestoreEventDataStoreCommandInput, RestoreEventDataStoreCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: RestoreEventDataStoreCommandInput;
            constructor(input: RestoreEventDataStoreCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RestoreEventDataStoreCommandInput, RestoreEventDataStoreCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/StartLoggingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { StartLoggingRequest, StartLoggingResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface StartLoggingCommandInput extends StartLoggingRequest {
    }
    export interface StartLoggingCommandOutput extends StartLoggingResponse, __MetadataBearer {
    }
    /**
        * <p>Starts the recording of Amazon Web Services API calls and log file delivery for a trail. For a trail that is enabled in all regions, this operation must be called from the region in which the trail was created. This operation cannot be called on the shadow trails (replicated trails in other regions) of a trail that is enabled in all regions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, StartLoggingCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, StartLoggingCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new StartLoggingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartLoggingCommandInput} for command's `input` shape.
        * @see {@link StartLoggingCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class StartLoggingCommand extends $Command<StartLoggingCommandInput, StartLoggingCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: StartLoggingCommandInput;
            constructor(input: StartLoggingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartLoggingCommandInput, StartLoggingCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/StartQueryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { StartQueryRequest, StartQueryResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface StartQueryCommandInput extends StartQueryRequest {
    }
    export interface StartQueryCommandOutput extends StartQueryResponse, __MetadataBearer {
    }
    /**
        * <p>Starts a CloudTrail Lake query. The required <code>QueryStatement</code>
        *          parameter provides your SQL query, enclosed in single quotation marks.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, StartQueryCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, StartQueryCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new StartQueryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartQueryCommandInput} for command's `input` shape.
        * @see {@link StartQueryCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class StartQueryCommand extends $Command<StartQueryCommandInput, StartQueryCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: StartQueryCommandInput;
            constructor(input: StartQueryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartQueryCommandInput, StartQueryCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/StopLoggingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { StopLoggingRequest, StopLoggingResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface StopLoggingCommandInput extends StopLoggingRequest {
    }
    export interface StopLoggingCommandOutput extends StopLoggingResponse, __MetadataBearer {
    }
    /**
        * <p>Suspends the recording of Amazon Web Services API calls and log file delivery for the specified trail.
        *          Under most circumstances, there is no need to use this action. You can update a trail
        *          without stopping it first. This action is the only way to stop recording. For a trail
        *          enabled in all regions, this operation must be called from the region in which the trail
        *          was created, or an <code>InvalidHomeRegionException</code> will occur. This operation
        *          cannot be called on the shadow trails (replicated trails in other regions) of a trail
        *          enabled in all regions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, StopLoggingCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, StopLoggingCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new StopLoggingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopLoggingCommandInput} for command's `input` shape.
        * @see {@link StopLoggingCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class StopLoggingCommand extends $Command<StopLoggingCommandInput, StopLoggingCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: StopLoggingCommandInput;
            constructor(input: StopLoggingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopLoggingCommandInput, StopLoggingCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/UpdateEventDataStoreCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { UpdateEventDataStoreRequest, UpdateEventDataStoreResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface UpdateEventDataStoreCommandInput extends UpdateEventDataStoreRequest {
    }
    export interface UpdateEventDataStoreCommandOutput extends UpdateEventDataStoreResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an event data store. The required <code>EventDataStore</code> value is an ARN or the ID portion of the ARN.
        *          Other parameters are optional, but at least one optional parameter must be specified, or CloudTrail throws an error.
        *          <code>RetentionPeriod</code> is in days, and valid values are integers between 90 and 2555.
        *          By default, <code>TerminationProtection</code> is enabled. <code>AdvancedEventSelectors</code> includes or excludes management
        *          and data events in your event data store; for more information about <code>AdvancedEventSelectors</code>, see
        *          <a>PutEventSelectorsRequest$AdvancedEventSelectors</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, UpdateEventDataStoreCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, UpdateEventDataStoreCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new UpdateEventDataStoreCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateEventDataStoreCommandInput} for command's `input` shape.
        * @see {@link UpdateEventDataStoreCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class UpdateEventDataStoreCommand extends $Command<UpdateEventDataStoreCommandInput, UpdateEventDataStoreCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: UpdateEventDataStoreCommandInput;
            constructor(input: UpdateEventDataStoreCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateEventDataStoreCommandInput, UpdateEventDataStoreCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/commands/UpdateTrailCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudTrailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/CloudTrailClient";
    import { UpdateTrailRequest, UpdateTrailResponse } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0";
    export interface UpdateTrailCommandInput extends UpdateTrailRequest {
    }
    export interface UpdateTrailCommandOutput extends UpdateTrailResponse, __MetadataBearer {
    }
    /**
        * <p>Updates trail settings that control what events you are logging, and how to handle log files. Changes to a trail do not require
        *          stopping the CloudTrail service. Use this action to designate an existing bucket for log
        *          delivery. If the existing bucket has previously been a target for CloudTrail log files,
        *          an IAM policy exists for the bucket. <code>UpdateTrail</code> must be called from the
        *          region in which the trail was created; otherwise, an
        *             <code>InvalidHomeRegionException</code> is thrown.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudTrailClient, UpdateTrailCommand } from "@aws-sdk/client-cloudtrail"; // ES Modules import
        * // const { CloudTrailClient, UpdateTrailCommand } = require("@aws-sdk/client-cloudtrail"); // CommonJS import
        * const client = new CloudTrailClient(config);
        * const command = new UpdateTrailCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateTrailCommandInput} for command's `input` shape.
        * @see {@link UpdateTrailCommandOutput} for command's `response` shape.
        * @see {@link CloudTrailClientResolvedConfig | config} for CloudTrailClient's `config` shape.
        *
        */
    export class UpdateTrailCommand extends $Command<UpdateTrailCommandInput, UpdateTrailCommandOutput, CloudTrailClientResolvedConfig> {
            readonly input: UpdateTrailCommandInput;
            constructor(input: UpdateTrailCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudTrailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateTrailCommandInput, UpdateTrailCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { CloudTrailServiceException as __BaseException } from "@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/CloudTrailServiceException";
    /**
        * <p>A custom key-value pair associated with a resource such as a CloudTrail trail.</p>
        */
    export interface Tag {
            /**
                * <p>The key in a key-value pair. The key must be must be no longer than 128 Unicode characters.
                *          The key must be unique for the resource to which it applies.</p>
                */
            Key: string | undefined;
            /**
                * <p>The value in a key-value pair of a tag. The value must be no longer than 256 Unicode characters.</p>
                */
            Value?: string;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    /**
        * <p>Specifies the tags to add to a trail or event data store.</p>
        */
    export interface AddTagsRequest {
            /**
                * <p>Specifies the ARN of the trail or event data store to which one or more tags will be added. The format of a trail ARN is:</p>
                *          <p>
                *             <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code>
                *          </p>
                */
            ResourceId: string | undefined;
            /**
                * <p>Contains a list of tags, up to a limit of 50</p>
                */
            TagsList: Tag[] | undefined;
    }
    export namespace AddTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddTagsRequest) => any;
    }
    /**
        * <p>Returns the objects or data if successful. Otherwise, returns an error.</p>
        */
    export interface AddTagsResponse {
    }
    export namespace AddTagsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddTagsResponse) => any;
    }
    /**
        * <p>This exception is thrown when an operation is called with a trail ARN that is not valid. The following is the format of a trail ARN.</p>
        *          <p>
        *             <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code>
        *          </p>
        */
    export class CloudTrailARNInvalidException extends __BaseException {
            readonly name: "CloudTrailARNInvalidException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CloudTrailARNInvalidException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the specified resource is not ready for an operation.
        *          This can occur when you try to run an operation on a resource before CloudTrail has time to fully load the resource.
        *          If this exception occurs, wait a few minutes, and then try the operation again.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>The specified event data store was not found.</p>
        */
    export class EventDataStoreNotFoundException extends __BaseException {
            readonly name: "EventDataStoreNotFoundException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EventDataStoreNotFoundException, __BaseException>);
    }
    /**
        * <p>The event data store is inactive.</p>
        */
    export class InactiveEventDataStoreException extends __BaseException {
            readonly name: "InactiveEventDataStoreException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InactiveEventDataStoreException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the specified tag key or values are not valid.
        *          It can also occur if there are duplicate tags or too many tags on the resource.</p>
        */
    export class InvalidTagParameterException extends __BaseException {
            readonly name: "InvalidTagParameterException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTagParameterException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the provided trail name is not valid. Trail names must meet the following requirements:</p>
        *          <ul>
        *             <li>
        *                <p>Contain only ASCII letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), or dashes (-)</p>
        *             </li>
        *             <li>
        *                <p>Start with a letter or number, and end with a letter or number</p>
        *             </li>
        *             <li>
        *                <p>Be between 3 and 128 characters</p>
        *             </li>
        *             <li>
        *                <p>Have no adjacent periods, underscores or dashes. Names like <code>my-_namespace</code>
        *             and <code>my--namespace</code> are not valid.</p>
        *             </li>
        *             <li>
        *                <p>Not be in IP address format (for example, 192.168.5.4)</p>
        *             </li>
        *          </ul>
        */
    export class InvalidTrailNameException extends __BaseException {
            readonly name: "InvalidTrailNameException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTrailNameException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the Amazon Web Services account making the request to create
        *          or update an organization trail or event data store is not the management account for an
        *          organization in Organizations. For more information, see
        *          <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/creating-an-organizational-trail-prepare.html">Prepare For Creating a Trail For Your Organization</a> or <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/query-event-data-store.html">Create an event data store</a>.</p>
        */
    export class NotOrganizationMasterAccountException extends __BaseException {
            readonly name: "NotOrganizationMasterAccountException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotOrganizationMasterAccountException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the requested operation is not permitted.</p>
        */
    export class OperationNotPermittedException extends __BaseException {
            readonly name: "OperationNotPermittedException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OperationNotPermittedException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the specified resource is not found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the specified resource type is not supported by CloudTrail.</p>
        */
    export class ResourceTypeNotSupportedException extends __BaseException {
            readonly name: "ResourceTypeNotSupportedException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceTypeNotSupportedException, __BaseException>);
    }
    /**
        * <p>The number of tags per trail has exceeded the permitted amount. Currently, the limit is 50.</p>
        */
    export class TagsLimitExceededException extends __BaseException {
            readonly name: "TagsLimitExceededException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TagsLimitExceededException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the requested operation is not supported.</p>
        */
    export class UnsupportedOperationException extends __BaseException {
            readonly name: "UnsupportedOperationException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedOperationException, __BaseException>);
    }
    /**
        * <p>A single selector statement in an advanced event selector.</p>
        */
    export interface AdvancedFieldSelector {
            /**
                * <p>
                *          A field in an event record on which to filter events to be logged. Supported fields include <code>readOnly</code>, <code>eventCategory</code>,
                *          <code>eventSource</code> (for management events), <code>eventName</code>, <code>resources.type</code>, and <code>resources.ARN</code>.
                *       </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>readOnly</code>
                *                   </b> - Optional. Can be set to <code>Equals</code> a value of <code>true</code>
                *             or <code>false</code>. If you do not add this field, CloudTrail logs both both <code>read</code> and
                *             <code>write</code> events. A value of <code>true</code> logs only <code>read</code> events. A value of <code>false</code>
                *             logs only <code>write</code> events.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>eventSource</code>
                *                   </b> - For filtering management events only.
                *             This can be set only to <code>NotEquals</code>
                *                   <code>kms.amazonaws.com</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>eventName</code>
                *                   </b> - Can use any operator. You can use it to ﬁlter in
                *             or ﬁlter out any data event logged to CloudTrail, such as <code>PutBucket</code> or <code>GetSnapshotBlock</code>. You can have multiple values
                *             for this ﬁeld, separated by commas.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>eventCategory</code>
                *                   </b> - This is required. It must be set to <code>Equals</code>, and
                *             the value must be <code>Management</code> or <code>Data</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>resources.type</code>
                *                   </b> - This ﬁeld is required.
                *                   <code>resources.type</code> can only use the <code>Equals</code> operator, and the
                *             value can be one of the following:</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>AWS::S3::Object</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>AWS::Lambda::Function</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>AWS::DynamoDB::Table</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>AWS::S3Outposts::Object</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>AWS::ManagedBlockchain::Node</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>AWS::S3ObjectLambda::AccessPoint</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>AWS::EC2::Snapshot</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>AWS::S3::AccessPoint</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>AWS::DynamoDB::Stream</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>AWS::Glue::Table</code>
                *                      </p>
                *                   </li>
                *                </ul>
                *                <p>
                *                You can have only one <code>resources.type</code> ﬁeld per selector. To log data
                *                events on more than one resource type, add another selector.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>resources.ARN</code>
                *                   </b> - You can use any operator with
                *                <code>resources.ARN</code>, but if you use <code>Equals</code> or <code>NotEquals</code>, the
                *                value must exactly match the ARN of a valid resource of the type you've speciﬁed in
                *                the template as the value of resources.type. For example, if resources.type equals
                *                   <code>AWS::S3::Object</code>, the ARN must be in one of the following formats. To
                *                log all data events for all objects in a specific S3 bucket, use the
                *                   <code>StartsWith</code> operator, and include only the bucket ARN as the matching value.</p>
                *                <p>The trailing slash is intentional; do not exclude it. Replace the text between
                *                less than and greater than symbols (<>) with resource-specific information. </p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>arn:<partition>:s3:::<bucket_name>/</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>arn:<partition>:s3:::<bucket_name>/<object_path>/</code>
                *                      </p>
                *                   </li>
                *                </ul>
                *                <p>When <code>resources.type</code> equals <code>AWS::S3::AccessPoint</code>, and the
                *                operator is set to <code>Equals</code> or <code>NotEquals</code>, the ARN must be in
                *                one of the following formats. To log events on all objects in an S3 access point, we
                *                recommend that you use only the access point ARN, don’t include the object path, and
                *                use the <code>StartsWith</code> or <code>NotStartsWith</code> operators.</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>arn:<partition>:s3:<region>:<account_ID>:accesspoint/<access_point_name></code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>arn:<partition>:s3:<region>:<account_ID>:accesspoint/<access_point_name>/object/<object_path></code>
                *                      </p>
                *                   </li>
                *                </ul>
                *                <p>When resources.type equals <code>AWS::Lambda::Function</code>, and the operator is set
                *             to <code>Equals</code> or <code>NotEquals</code>, the ARN must be in the following format:</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>arn:<partition>:lambda:<region>:<account_ID>:function:<function_name></code>
                *                      </p>
                *                   </li>
                *                </ul>
                *                <p>When resources.type equals <code>AWS::DynamoDB::Table</code>, and the operator is
                *                set to <code>Equals</code> or <code>NotEquals</code>, the ARN must be in the
                *                following format:</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>arn:<partition>:dynamodb:<region>:<account_ID>:table/<table_name></code>
                *                      </p>
                *                   </li>
                *                </ul>
                *                <p>When <code>resources.type</code> equals <code>AWS::S3Outposts::Object</code>, and the operator
                *                is set to <code>Equals</code> or <code>NotEquals</code>, the ARN must be in the following format:</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>arn:<partition>:s3-outposts:<region>:<account_ID>:<object_path></code>
                *                      </p>
                *                   </li>
                *                </ul>
                *                <p>When <code>resources.type</code> equals <code>AWS::ManagedBlockchain::Node</code>,
                *                and the operator is set to <code>Equals</code> or <code>NotEquals</code>, the ARN
                *                must be in the following format:</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>arn:<partition>:managedblockchain:<region>:<account_ID>:nodes/<node_ID></code>
                *                      </p>
                *                   </li>
                *                </ul>
                *                <p>When <code>resources.type</code> equals
                *                   <code>AWS::S3ObjectLambda::AccessPoint</code>, and the operator is set to
                *                   <code>Equals</code> or <code>NotEquals</code>, the ARN must be in the following
                *                format:</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>arn:<partition>:s3-object-lambda:<region>:<account_ID>:accesspoint/<access_point_name></code>
                *                      </p>
                *                   </li>
                *                </ul>
                *                <p>When <code>resources.type</code> equals <code>AWS::EC2::Snapshot</code>, and the
                *                operator is set to <code>Equals</code> or <code>NotEquals</code>, the ARN must be in
                *                the following format:</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>arn:<partition>:ec2:<region>::snapshot/<snapshot_ID></code>
                *                      </p>
                *                   </li>
                *                </ul>
                *                <p>When <code>resources.type</code> equals <code>AWS::DynamoDB::Stream</code>, and the operator is set to
                *                <code>Equals</code> or <code>NotEquals</code>, the ARN must be in the following format:</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>arn:<partition>:dynamodb:<region>:<account_ID>:table/<table_name>/stream/<date_time></code>
                *                      </p>
                *                   </li>
                *                </ul>
                *                <p>When <code>resources.type</code> equals <code>AWS::Glue::Table</code>, and the operator is set to
                *                <code>Equals</code> or <code>NotEquals</code>, the ARN must be in the following format:</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>arn:<partition>:glue:<region>:<account_ID>:table/<database_name>/<table_name></code>
                *                      </p>
                *                   </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            Field: string | undefined;
            /**
                * <p> An operator that includes events that match the exact value of the event record field
                *          specified as the value of <code>Field</code>. This is the only valid operator that you can
                *          use with the <code>readOnly</code>, <code>eventCategory</code>, and
                *             <code>resources.type</code> fields.</p>
                */
            Equals?: string[];
            /**
                * <p>An operator that includes events that match the first few characters of the event record
                *          field specified as the value of <code>Field</code>.</p>
                */
            StartsWith?: string[];
            /**
                * <p>An operator that includes events that match the last few characters of the event record
                *          field specified as the value of <code>Field</code>.</p>
                */
            EndsWith?: string[];
            /**
                * <p>
                *          An operator that excludes events that match the exact value of the event record field specified as the value of <code>Field</code>.
                *       </p>
                */
            NotEquals?: string[];
            /**
                * <p>
                *          An operator that excludes events that match the first few characters of the event record field specified as the value of <code>Field</code>.
                *       </p>
                */
            NotStartsWith?: string[];
            /**
                * <p>
                *          An operator that excludes events that match the last few characters of the event record field specified as the value of <code>Field</code>.
                *       </p>
                */
            NotEndsWith?: string[];
    }
    export namespace AdvancedFieldSelector {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdvancedFieldSelector) => any;
    }
    /**
        * <p>Advanced event selectors let you create fine-grained selectors for the following CloudTrail
        *          event record ﬁelds. They help you control costs by logging only those events
        *          that are important to you. For more information about advanced event selectors, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html">Logging data events for trails</a> in the <i>CloudTrail User Guide</i>.</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>readOnly</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>eventSource</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>eventName</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>eventCategory</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>resources.type</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>resources.ARN</code>
        *                </p>
        *             </li>
        *          </ul>
        *          <p>You cannot apply both event selectors and advanced event selectors to a trail.</p>
        */
    export interface AdvancedEventSelector {
            /**
                * <p>An optional, descriptive name for an advanced event selector, such as "Log data events
                *          for only two S3 buckets".</p>
                */
            Name?: string;
            /**
                * <p>Contains all selector statements in an advanced event selector.</p>
                */
            FieldSelectors: AdvancedFieldSelector[] | undefined;
    }
    export namespace AdvancedEventSelector {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdvancedEventSelector) => any;
    }
    export interface CancelQueryRequest {
            /**
                * <p>The ARN (or the ID suffix of the ARN) of an event data store on which the specified query is running.</p>
                */
            EventDataStore: string | undefined;
            /**
                * <p>The ID of the query that you want to cancel. The <code>QueryId</code> comes from the response of a <code>StartQuery</code>
                *       operation.</p>
                */
            QueryId: string | undefined;
    }
    export namespace CancelQueryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelQueryRequest) => any;
    }
    export enum QueryStatus {
            CANCELLED = "CANCELLED",
            FAILED = "FAILED",
            FINISHED = "FINISHED",
            QUEUED = "QUEUED",
            RUNNING = "RUNNING",
            TIMED_OUT = "TIMED_OUT"
    }
    export interface CancelQueryResponse {
            /**
                * <p>The ID of the canceled query.</p>
                */
            QueryId: string | undefined;
            /**
                * <p>Shows the status of a query after a <code>CancelQuery</code> request. Typically, the values shown are either
                *          <code>RUNNING</code> or <code>CANCELLED</code>.</p>
                */
            QueryStatus: QueryStatus | string | undefined;
    }
    export namespace CancelQueryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelQueryResponse) => any;
    }
    /**
        * <p>The specified event data store ARN is not valid or does not map to an event data store in your account.</p>
        */
    export class EventDataStoreARNInvalidException extends __BaseException {
            readonly name: "EventDataStoreARNInvalidException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EventDataStoreARNInvalidException, __BaseException>);
    }
    /**
        * <p>The specified query cannot be canceled because it is in the <code>FINISHED</code>, <code>FAILED</code>, <code>TIMED_OUT</code>, or
        *          <code>CANCELLED</code> state.</p>
        */
    export class InactiveQueryException extends __BaseException {
            readonly name: "InactiveQueryException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InactiveQueryException, __BaseException>);
    }
    /**
        * <p>The request includes a parameter that is not valid.</p>
        */
    export class InvalidParameterException extends __BaseException {
            readonly name: "InvalidParameterException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidParameterException, __BaseException>);
    }
    /**
        * <p>The query ID does not exist or does not map to a query.</p>
        */
    export class QueryIdNotFoundException extends __BaseException {
            readonly name: "QueryIdNotFoundException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<QueryIdNotFoundException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when trusted access has not been enabled between CloudTrail and Organizations. For more information,
        *          see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">Enabling Trusted Access with Other Amazon Web Services Services</a>
        *          and <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/creating-an-organizational-trail-prepare.html">Prepare For Creating a Trail For Your Organization</a>. </p>
        */
    export class CloudTrailAccessNotEnabledException extends __BaseException {
            readonly name: "CloudTrailAccessNotEnabledException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CloudTrailAccessNotEnabledException, __BaseException>);
    }
    export interface CreateEventDataStoreRequest {
            /**
                * <p>The name of the event data store.</p>
                */
            Name: string | undefined;
            /**
                * <p>The advanced event selectors to use to select the events for the data store. For more information about how to use advanced event
                *          selectors, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html#creating-data-event-selectors-advanced">Log events by using advanced event selectors</a> in the CloudTrail
                *          User Guide.</p>
                */
            AdvancedEventSelectors?: AdvancedEventSelector[];
            /**
                * <p>Specifies whether the event data store includes events from all regions, or only from the region in which the event data store
                *          is created.</p>
                */
            MultiRegionEnabled?: boolean;
            /**
                * <p>Specifies whether an event data store collects events logged for an organization in Organizations.</p>
                */
            OrganizationEnabled?: boolean;
            /**
                * <p>The retention period of the event data store, in days. You can set a retention period of up to 2555 days,
                *       the equivalent of seven years.</p>
                */
            RetentionPeriod?: number;
            /**
                * <p>Specifies whether termination protection is enabled for the event data store. If termination protection is enabled, you
                *       cannot delete the event data store until termination protection is disabled.</p>
                */
            TerminationProtectionEnabled?: boolean;
            /**
                * <p>A list of tags.</p>
                */
            TagsList?: Tag[];
    }
    export namespace CreateEventDataStoreRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEventDataStoreRequest) => any;
    }
    export enum EventDataStoreStatus {
            CREATED = "CREATED",
            ENABLED = "ENABLED",
            PENDING_DELETION = "PENDING_DELETION"
    }
    export interface CreateEventDataStoreResponse {
            /**
                * <p>The ARN of the event data store.</p>
                */
            EventDataStoreArn?: string;
            /**
                * <p>The name of the event data store.</p>
                */
            Name?: string;
            /**
                * <p>The status of event data store creation.</p>
                */
            Status?: EventDataStoreStatus | string;
            /**
                * <p>The advanced event selectors that were used to select the events for the data store.</p>
                */
            AdvancedEventSelectors?: AdvancedEventSelector[];
            /**
                * <p>Indicates whether the event data store collects events from all regions, or only from the region in which it was created.</p>
                */
            MultiRegionEnabled?: boolean;
            /**
                * <p>Indicates whether an event data store is collecting logged events for an organization in Organizations.</p>
                */
            OrganizationEnabled?: boolean;
            /**
                * <p>The retention period of an event data store, in days.</p>
                */
            RetentionPeriod?: number;
            /**
                * <p>Indicates whether termination protection is enabled for the event data store.</p>
                */
            TerminationProtectionEnabled?: boolean;
            /**
                * <p>A list of tags.</p>
                */
            TagsList?: Tag[];
            /**
                * <p>The timestamp that shows when the event data store was created.</p>
                */
            CreatedTimestamp?: Date;
            /**
                * <p>The timestamp that shows when an event data store was updated, if applicable.
                *          <code>UpdatedTimestamp</code> is always either the same or newer than the time shown in <code>CreatedTimestamp</code>.</p>
                */
            UpdatedTimestamp?: Date;
    }
    export namespace CreateEventDataStoreResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEventDataStoreResponse) => any;
    }
    /**
        * <p>An event data store with that name already exists.</p>
        */
    export class EventDataStoreAlreadyExistsException extends __BaseException {
            readonly name: "EventDataStoreAlreadyExistsException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EventDataStoreAlreadyExistsException, __BaseException>);
    }
    /**
        * <p>Your account has used the maximum number of event data stores.</p>
        */
    export class EventDataStoreMaxLimitExceededException extends __BaseException {
            readonly name: "EventDataStoreMaxLimitExceededException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EventDataStoreMaxLimitExceededException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the IAM user or role that is used to create
        *          the organization resource lacks one or more required permissions for
        *          creating an organization resource in a required service.</p>
        */
    export class InsufficientDependencyServiceAccessPermissionException extends __BaseException {
            readonly name: "InsufficientDependencyServiceAccessPermissionException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InsufficientDependencyServiceAccessPermissionException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when Organizations is not configured to support all
        *          features. All features must be enabled in Organizations to support
        *          creating an organization trail or event data store.</p>
        */
    export class OrganizationNotInAllFeaturesModeException extends __BaseException {
            readonly name: "OrganizationNotInAllFeaturesModeException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OrganizationNotInAllFeaturesModeException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the request is made from an Amazon Web Services account that is not a member of an organization.
        *          To make this request, sign in using the credentials of an account that belongs to an organization.</p>
        */
    export class OrganizationsNotInUseException extends __BaseException {
            readonly name: "OrganizationsNotInUseException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OrganizationsNotInUseException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when a call results in the <code>InvalidClientTokenId</code> error code.
        *          This can occur when you are creating or updating a trail to send notifications to an Amazon SNS topic that
        *          is in a suspended Amazon Web Services account.</p>
        */
    export class CloudTrailInvalidClientTokenIdException extends __BaseException {
            readonly name: "CloudTrailInvalidClientTokenIdException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CloudTrailInvalidClientTokenIdException, __BaseException>);
    }
    /**
        * <p>Cannot set a CloudWatch Logs delivery for this region.</p>
        */
    export class CloudWatchLogsDeliveryUnavailableException extends __BaseException {
            readonly name: "CloudWatchLogsDeliveryUnavailableException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CloudWatchLogsDeliveryUnavailableException, __BaseException>);
    }
    /**
        * <p>Specifies the settings for each trail.</p>
        */
    export interface CreateTrailRequest {
            /**
                * <p>Specifies the name of the trail. The name must meet the following requirements:</p>
                *          <ul>
                *             <li>
                *                <p>Contain only ASCII letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), or dashes (-)</p>
                *             </li>
                *             <li>
                *                <p>Start with a letter or number, and end with a letter or number</p>
                *             </li>
                *             <li>
                *                <p>Be between 3 and 128 characters</p>
                *             </li>
                *             <li>
                *                <p>Have no adjacent periods, underscores or dashes. Names like <code>my-_namespace</code>
                *             and <code>my--namespace</code> are not valid.</p>
                *             </li>
                *             <li>
                *                <p>Not be in IP address format (for example, 192.168.5.4)</p>
                *             </li>
                *          </ul>
                */
            Name: string | undefined;
            /**
                * <p>Specifies the name of the Amazon S3 bucket designated for publishing log files. See <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/create_trail_naming_policy.html">Amazon S3 Bucket Naming Requirements</a>.</p>
                */
            S3BucketName: string | undefined;
            /**
                * <p>Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated
                *          for log file delivery. For more information, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-find-log-files.html">Finding Your CloudTrail Log Files</a>. The maximum length is 200 characters.</p>
                */
            S3KeyPrefix?: string;
            /**
                * <p>Specifies the name of the Amazon SNS topic defined for notification of log file delivery. The maximum length is 256 characters.</p>
                */
            SnsTopicName?: string;
            /**
                * <p>Specifies whether the trail is publishing events from global services such as IAM to the log files.</p>
                */
            IncludeGlobalServiceEvents?: boolean;
            /**
                * <p>Specifies whether the trail is created in the current region or in all regions. The default is false, which creates a trail only in the region where you are signed in. As a best practice, consider
                *       creating trails that log events in all regions.</p>
                */
            IsMultiRegionTrail?: boolean;
            /**
                * <p>Specifies whether log file integrity validation is enabled. The default is false.</p>
                *          <note>
                *             <p>When you disable log file integrity validation, the chain of digest files is broken after one hour. CloudTrail does
                *             not create digest files for log files that were delivered during a period in which log file integrity validation was disabled.
                *             For example, if you enable log file integrity validation at noon on January 1, disable it at noon on January 2, and re-enable
                *             it at noon on January 10, digest files will not be created for the log files delivered from noon on January 2 to noon on
                *             January 10. The same applies whenever you stop CloudTrail logging or delete a trail.</p>
                *          </note>
                */
            EnableLogFileValidation?: boolean;
            /**
                * <p>Specifies a log group name using an Amazon Resource Name (ARN), a unique identifier that represents the log group
                *          to which CloudTrail logs will be delivered. Not required unless you specify <code>CloudWatchLogsRoleArn</code>.</p>
                */
            CloudWatchLogsLogGroupArn?: string;
            /**
                * <p>Specifies the role for the CloudWatch Logs endpoint to assume to write to a user's log group.</p>
                */
            CloudWatchLogsRoleArn?: string;
            /**
                * <p>Specifies the KMS key ID to use to encrypt the logs delivered by CloudTrail. The
                *          value can be an alias name prefixed by "alias/", a fully specified ARN to an alias, a fully
                *          specified ARN to a key, or a globally unique identifier.</p>
                *          <p>CloudTrail also supports KMS multi-Region keys. For more information about multi-Region keys,
                *          see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">Using multi-Region keys</a> in the <i>Key Management Service Developer Guide</i>.</p>
                *          <p>Examples:</p>
                *          <ul>
                *             <li>
                *                <p>alias/MyAliasName</p>
                *             </li>
                *             <li>
                *                <p>arn:aws:kms:us-east-2:123456789012:alias/MyAliasName</p>
                *             </li>
                *             <li>
                *                <p>arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012</p>
                *             </li>
                *             <li>
                *                <p>12345678-1234-1234-1234-123456789012</p>
                *             </li>
                *          </ul>
                */
            KmsKeyId?: string;
            /**
                * <p>Specifies whether the trail is created for all accounts in an organization in Organizations, or only for the current Amazon Web Services account.
                *          The default is false, and cannot be true unless the call is made on behalf of an Amazon Web Services account that is the management account for an organization in
                *          Organizations.</p>
                */
            IsOrganizationTrail?: boolean;
            /**
                * <p>A list of tags.</p>
                */
            TagsList?: Tag[];
    }
    export namespace CreateTrailRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTrailRequest) => any;
    }
    /**
        * <p>Returns the objects or data listed below if successful. Otherwise, returns an error.</p>
        */
    export interface CreateTrailResponse {
            /**
                * <p>Specifies the name of the trail.</p>
                */
            Name?: string;
            /**
                * <p>Specifies the name of the Amazon S3 bucket designated for publishing log files.</p>
                */
            S3BucketName?: string;
            /**
                * <p>Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated
                *          for log file delivery. For more information, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-find-log-files.html">Finding Your CloudTrail Log Files</a>.</p>
                */
            S3KeyPrefix?: string;
            /**
                * @deprecated
                *
                * <p>This field is no longer in use. Use SnsTopicARN.</p>
                */
            SnsTopicName?: string;
            /**
                * <p>Specifies the ARN of the Amazon SNS topic that CloudTrail uses to send notifications when log files are delivered. The format of a topic ARN is:</p>
                *          <p>
                *             <code>arn:aws:sns:us-east-2:123456789012:MyTopic</code>
                *          </p>
                */
            SnsTopicARN?: string;
            /**
                * <p>Specifies whether the trail is publishing events from global services such as IAM to the log files.</p>
                */
            IncludeGlobalServiceEvents?: boolean;
            /**
                * <p>Specifies whether the trail exists in one region or in all regions.</p>
                */
            IsMultiRegionTrail?: boolean;
            /**
                * <p>Specifies the ARN of the trail that was created. The format of a trail ARN
                *          is:</p>
                *          <p>
                *             <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code>
                *          </p>
                */
            TrailARN?: string;
            /**
                * <p>Specifies whether log file integrity validation is enabled.</p>
                */
            LogFileValidationEnabled?: boolean;
            /**
                * <p>Specifies the Amazon Resource Name (ARN) of the log group to which CloudTrail logs will be delivered.</p>
                */
            CloudWatchLogsLogGroupArn?: string;
            /**
                * <p>Specifies the role for the CloudWatch Logs endpoint to assume to write to a user's log group.</p>
                */
            CloudWatchLogsRoleArn?: string;
            /**
                * <p>Specifies the KMS key ID that encrypts the logs delivered by CloudTrail.
                *          The value is a fully specified ARN to a KMS key in the following format.</p>
                *          <p>
                *             <code>arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012</code>
                *          </p>
                */
            KmsKeyId?: string;
            /**
                * <p>Specifies whether the trail is an organization trail.</p>
                */
            IsOrganizationTrail?: boolean;
    }
    export namespace CreateTrailResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTrailResponse) => any;
    }
    /**
        * <p>This exception is thrown when the policy on the S3 bucket or KMS key is not sufficient.</p>
        */
    export class InsufficientEncryptionPolicyException extends __BaseException {
            readonly name: "InsufficientEncryptionPolicyException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InsufficientEncryptionPolicyException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the policy on the S3 bucket is not sufficient.</p>
        */
    export class InsufficientS3BucketPolicyException extends __BaseException {
            readonly name: "InsufficientS3BucketPolicyException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InsufficientS3BucketPolicyException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the policy on the Amazon SNS topic is not sufficient.</p>
        */
    export class InsufficientSnsTopicPolicyException extends __BaseException {
            readonly name: "InsufficientSnsTopicPolicyException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InsufficientSnsTopicPolicyException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the provided CloudWatch Logs log group is not valid.</p>
        */
    export class InvalidCloudWatchLogsLogGroupArnException extends __BaseException {
            readonly name: "InvalidCloudWatchLogsLogGroupArnException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidCloudWatchLogsLogGroupArnException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the provided role is not valid.</p>
        */
    export class InvalidCloudWatchLogsRoleArnException extends __BaseException {
            readonly name: "InvalidCloudWatchLogsRoleArnException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidCloudWatchLogsRoleArnException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the KMS key ARN is not valid.</p>
        */
    export class InvalidKmsKeyIdException extends __BaseException {
            readonly name: "InvalidKmsKeyIdException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidKmsKeyIdException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the combination of parameters provided is not valid.</p>
        */
    export class InvalidParameterCombinationException extends __BaseException {
            readonly name: "InvalidParameterCombinationException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidParameterCombinationException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the provided S3 bucket name is not valid.</p>
        */
    export class InvalidS3BucketNameException extends __BaseException {
            readonly name: "InvalidS3BucketNameException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidS3BucketNameException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the provided S3 prefix is not valid.</p>
        */
    export class InvalidS3PrefixException extends __BaseException {
            readonly name: "InvalidS3PrefixException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidS3PrefixException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the provided SNS topic name is not valid.</p>
        */
    export class InvalidSnsTopicNameException extends __BaseException {
            readonly name: "InvalidSnsTopicNameException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSnsTopicNameException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when there is an issue with the specified KMS key and the trail can’t be updated.</p>
        */
    export class KmsException extends __BaseException {
            readonly name: "KmsException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KmsException, __BaseException>);
    }
    /**
        * @deprecated
        *
        * <p>This exception is no longer in use.</p>
        */
    export class KmsKeyDisabledException extends __BaseException {
            readonly name: "KmsKeyDisabledException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KmsKeyDisabledException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the KMS key does not exist, when the S3 bucket and the
        *          KMS key are not in the same region, or when the KMS key associated with the Amazon SNS
        *          topic either does not exist or is not in the same region.</p>
        */
    export class KmsKeyNotFoundException extends __BaseException {
            readonly name: "KmsKeyNotFoundException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KmsKeyNotFoundException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the maximum number of trails is reached.</p>
        */
    export class MaximumNumberOfTrailsExceededException extends __BaseException {
            readonly name: "MaximumNumberOfTrailsExceededException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaximumNumberOfTrailsExceededException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the specified S3 bucket does not exist.</p>
        */
    export class S3BucketDoesNotExistException extends __BaseException {
            readonly name: "S3BucketDoesNotExistException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<S3BucketDoesNotExistException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the specified trail already exists.</p>
        */
    export class TrailAlreadyExistsException extends __BaseException {
            readonly name: "TrailAlreadyExistsException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TrailAlreadyExistsException, __BaseException>);
    }
    /**
        * <p>This exception is no longer in use.</p>
        */
    export class TrailNotProvidedException extends __BaseException {
            readonly name: "TrailNotProvidedException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TrailNotProvidedException, __BaseException>);
    }
    export interface DeleteEventDataStoreRequest {
            /**
                * <p>The ARN (or the ID suffix of the ARN) of the event data store to delete.</p>
                */
            EventDataStore: string | undefined;
    }
    export namespace DeleteEventDataStoreRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEventDataStoreRequest) => any;
    }
    export interface DeleteEventDataStoreResponse {
    }
    export namespace DeleteEventDataStoreResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEventDataStoreResponse) => any;
    }
    /**
        * <p>The event data store cannot be deleted because termination protection is enabled for it.</p>
        */
    export class EventDataStoreTerminationProtectedException extends __BaseException {
            readonly name: "EventDataStoreTerminationProtectedException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EventDataStoreTerminationProtectedException, __BaseException>);
    }
    /**
        * <p>The request that specifies the name of a trail to delete.</p>
        */
    export interface DeleteTrailRequest {
            /**
                * <p>Specifies the name or the CloudTrail ARN of the trail to be deleted. The following is the format of a
                *          trail ARN.
                *          <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code>
                *          </p>
                */
            Name: string | undefined;
    }
    export namespace DeleteTrailRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTrailRequest) => any;
    }
    /**
        * <p>Returns the objects or data listed below if successful. Otherwise, returns an error.</p>
        */
    export interface DeleteTrailResponse {
    }
    export namespace DeleteTrailResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTrailResponse) => any;
    }
    /**
        * <p>This exception is thrown when an operation is called on a trail from a region other than the region in which the trail was created.</p>
        */
    export class InvalidHomeRegionException extends __BaseException {
            readonly name: "InvalidHomeRegionException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidHomeRegionException, __BaseException>);
    }
    /**
        * <p>This exception is thrown when the trail with the given name is not found.</p>
        */
    export class TrailNotFoundException extends __BaseException {
            readonly name: "TrailNotFoundException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TrailNotFoundException, __BaseException>);
    }
    export interface DescribeQueryRequest {
            /**
                * <p>The ARN (or the ID suffix of the ARN) of an event data store on which the specified query was run.</p>
                */
            EventDataStore: string | undefined;
            /**
                * <p>The query ID.</p>
                */
            QueryId: string | undefined;
    }
    export namespace DescribeQueryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeQueryRequest) => any;
    }
    /**
        * <p>Gets metadata about a query, including the number of events that were matched, the total number of events scanned, the query run time
        *          in milliseconds, and the query's creation time.</p>
        */
    export interface QueryStatisticsForDescribeQuery {
            /**
                * <p>The number of events that matched a query.</p>
                */
            EventsMatched?: number;
            /**
                * <p>The number of events that the query scanned in the event data store.</p>
                */
            EventsScanned?: number;
            /**
                * <p>The total bytes that the query scanned in the event data store. This value matches the number of
                *       bytes for which your account is billed for the query, unless the query is still running.</p>
                */
            BytesScanned?: number;
            /**
                * <p>The query's run time, in milliseconds.</p>
                */
            ExecutionTimeInMillis?: number;
            /**
                * <p>The creation time of the query.</p>
                */
            CreationTime?: Date;
    }
    export namespace QueryStatisticsForDescribeQuery {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryStatisticsForDescribeQuery) => any;
    }
    export interface DescribeQueryResponse {
            /**
                * <p>The ID of the query.</p>
                */
            QueryId?: string;
            /**
                * <p>The SQL code of a query.</p>
                */
            QueryString?: string;
            /**
                * <p>The status of a query. Values for <code>QueryStatus</code> include <code>QUEUED</code>, <code>RUNNING</code>,
                *          <code>FINISHED</code>, <code>FAILED</code>, <code>TIMED_OUT</code>, or <code>CANCELLED</code>
                *          </p>
                */
            QueryStatus?: QueryStatus | string;
            /**
                * <p>Metadata about a query, including the number of events that were matched, the total number of events scanned, the query run time
                *          in milliseconds, and the query's creation time.</p>
                */
            QueryStatistics?: QueryStatisticsForDescribeQuery;
            /**
                * <p>The error message returned if a query failed.</p>
                */
            ErrorMessage?: string;
    }
    export namespace DescribeQueryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeQueryResponse) => any;
    }
    /**
        * <p>Returns information about the trail.</p>
        */
    export interface DescribeTrailsRequest {
            /**
                * <p>Specifies a list of trail names, trail ARNs, or both, of the trails to describe. The format of a trail ARN is:</p>
                *          <p>
                *             <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code>
                *          </p>
                *
                *          <p>If an empty list is specified, information for the trail in the current region is returned.</p>
                *          <ul>
                *             <li>
                *                <p>If an empty list is specified and <code>IncludeShadowTrails</code> is false, then
                *             information for all trails in the current region is returned.</p>
                *             </li>
                *             <li>
                *                <p>If an empty list is specified and IncludeShadowTrails is null or true, then information for all trails in the current region and any associated shadow trails in other regions is returned.</p>
                *             </li>
                *          </ul>
                *          <note>
                *             <p>If one or more trail names are specified, information is returned only if the names match the names of trails belonging only to the current region. To return information about a trail in another region, you must specify its trail ARN.</p>
                *          </note>
                */
            trailNameList?: string[];
            /**
                * <p>Specifies whether to include shadow trails in the response. A shadow trail is the replication in a region of a trail that was created in a different region,
                *          or in the case of an organization trail, the replication of an organization trail in member accounts. If you do not include shadow trails, organization trails in a member account
                *          and region replication trails will not be returned. The default is true.</p>
                */
            includeShadowTrails?: boolean;
    }
    export namespace DescribeTrailsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTrailsRequest) => any;
    }
    /**
        * <p>The settings for a trail.</p>
        */
    export interface Trail {
            /**
                * <p>Name of the trail set by calling <a>CreateTrail</a>. The maximum length is 128
                *          characters.</p>
                */
            Name?: string;
            /**
                * <p>Name of the Amazon S3 bucket into which CloudTrail delivers your trail files. See <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/create_trail_naming_policy.html">Amazon S3 Bucket Naming Requirements</a>.</p>
                */
            S3BucketName?: string;
            /**
                * <p>Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated
                *          for log file delivery. For more information, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-find-log-files.html">Finding Your CloudTrail Log Files</a>.
                *          The maximum length is 200 characters.</p>
                */
            S3KeyPrefix?: string;
            /**
                * @deprecated
                *
                * <p>This field is no longer in use. Use SnsTopicARN.</p>
                */
            SnsTopicName?: string;
            /**
                * <p>Specifies the ARN of the Amazon SNS topic that CloudTrail uses to send notifications
                *          when log files are delivered. The following is the format of a topic ARN.</p>
                *          <p>
                *             <code>arn:aws:sns:us-east-2:123456789012:MyTopic</code>
                *          </p>
                */
            SnsTopicARN?: string;
            /**
                * <p>Set to <b>True</b> to include Amazon Web Services API calls from Amazon Web Services global services such as IAM.
                *          Otherwise, <b>False</b>.</p>
                */
            IncludeGlobalServiceEvents?: boolean;
            /**
                * <p>Specifies whether the trail exists only in one region or exists in all regions.</p>
                */
            IsMultiRegionTrail?: boolean;
            /**
                * <p>The region in which the trail was created.</p>
                */
            HomeRegion?: string;
            /**
                * <p>Specifies the ARN of the trail. The following is the format of a trail ARN.</p>
                *          <p>
                *             <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code>
                *          </p>
                */
            TrailARN?: string;
            /**
                * <p>Specifies whether log file validation is enabled.</p>
                */
            LogFileValidationEnabled?: boolean;
            /**
                * <p>Specifies an Amazon Resource Name (ARN), a unique identifier that represents the log group to which CloudTrail logs will be delivered.</p>
                */
            CloudWatchLogsLogGroupArn?: string;
            /**
                * <p>Specifies the role for the CloudWatch Logs endpoint to assume to write to a user's log group.</p>
                */
            CloudWatchLogsRoleArn?: string;
            /**
                * <p>Specifies the KMS key ID that encrypts the logs delivered by CloudTrail.
                *          The value is a fully specified ARN to a KMS key in the following format.</p>
                *          <p>
                *             <code>arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012</code>
                *          </p>
                */
            KmsKeyId?: string;
            /**
                * <p>Specifies if the trail has custom event selectors.</p>
                */
            HasCustomEventSelectors?: boolean;
            /**
                * <p>Specifies whether a trail has insight types specified in an <code>InsightSelector</code> list.</p>
                */
            HasInsightSelectors?: boolean;
            /**
                * <p>Specifies whether the trail is an organization trail.</p>
                */
            IsOrganizationTrail?: boolean;
    }
    export namespace Trail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Trail) => any;
    }
    /**
        * <p>Returns the objects or data listed below if successful. Otherwise, returns an error.</p>
        */
    export interface DescribeTrailsResponse {
            /**
                * <p>The list of trail objects. Trail objects with string values are only returned if values for the objects exist in a trail's configuration.
                *          For example, <code>SNSTopicName</code> and <code>SNSTopicARN</code> are only returned in results if a trail is configured to send SNS notifications. Similarly,
                *          <code>KMSKeyId</code> only appears in results if a trail's log files are encrypted with KMS customer managed keys.</p>
                */
            trailList?: Trail[];
    }
    export namespace DescribeTrailsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTrailsResponse) => any;
    }
    export interface GetEventDataStoreRequest {
            /**
                * <p>The ARN (or ID suffix of the ARN) of the event data store about which you want information.</p>
                */
            EventDataStore: string | undefined;
    }
    export namespace GetEventDataStoreRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEventDataStoreRequest) => any;
    }
    export interface GetEventDataStoreResponse {
            /**
                * <p>The event data store Amazon Resource Number (ARN).</p>
                */
            EventDataStoreArn?: string;
            /**
                * <p>The name of the event data store.</p>
                */
            Name?: string;
            /**
                * <p>The status of an event data store. Values can be <code>ENABLED</code> and <code>PENDING_DELETION</code>.</p>
                */
            Status?: EventDataStoreStatus | string;
            /**
                * <p>The advanced event selectors used to select events for the data store.</p>
                */
            AdvancedEventSelectors?: AdvancedEventSelector[];
            /**
                * <p>Indicates whether the event data store includes events from all regions, or only from the region in which it was created.</p>
                */
            MultiRegionEnabled?: boolean;
            /**
                * <p>Indicates whether an event data store is collecting logged events for an organization in Organizations.</p>
                */
            OrganizationEnabled?: boolean;
            /**
                * <p>The retention period of the event data store, in days.</p>
                */
            RetentionPeriod?: number;
            /**
                * <p>Indicates that termination protection is enabled.</p>
                */
            TerminationProtectionEnabled?: boolean;
            /**
                * <p>The timestamp of the event data store's creation.</p>
                */
            CreatedTimestamp?: Date;
            /**
                * <p>Shows the time that an event data store was updated, if applicable. <code>UpdatedTimestamp</code> is always either the same or newer than the time shown in <code>CreatedTimestamp</code>.</p>
                */
            UpdatedTimestamp?: Date;
    }
    export namespace GetEventDataStoreResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEventDataStoreResponse) => any;
    }
    export interface GetEventSelectorsRequest {
            /**
                * <p>Specifies the name of the trail or trail ARN. If you specify a trail name, the
                *          string must meet the following requirements:</p>
                *          <ul>
                *             <li>
                *                <p>Contain only ASCII letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), or dashes (-)</p>
                *             </li>
                *             <li>
                *                <p>Start with a letter or number, and end with a letter or number</p>
                *             </li>
                *             <li>
                *                <p>Be between 3 and 128 characters</p>
                *             </li>
                *             <li>
                *                <p>Have no adjacent periods, underscores or dashes. Names like <code>my-_namespace</code>
                *                   and <code>my--namespace</code> are not valid.</p>
                *             </li>
                *             <li>
                *                <p>Not be in IP address format (for example, 192.168.5.4)</p>
                *             </li>
                *          </ul>
                *          <p>If you specify a trail ARN, it must be in the format:</p>
                *          <p>
                *             <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code>
                *          </p>
                */
            TrailName: string | undefined;
    }
    export namespace GetEventSelectorsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEventSelectorsRequest) => any;
    }
    /**
        * <p>The Amazon S3 buckets, Lambda functions, or Amazon DynamoDB tables that you specify
        *          in your event selectors for your trail to log data events. Data events provide information
        *          about the resource operations performed on or within a resource itself. These are also
        *          known as data plane operations. You can specify up to 250 data resources for a
        *          trail.</p>
        *          <note>
        *             <p>The total number of allowed data resources is 250. This number can be distributed between 1 and 5 event selectors,
        *       but the total cannot exceed 250 across all selectors.</p>
        *             <p>If you are using advanced event selectors, the maximum total number of values for
        *             all conditions, across all advanced event selectors for the trail, is 500.</p>
        *          </note>
        *          <p>The following example demonstrates how logging works when you configure logging of all data events
        *          for an S3 bucket named <code>bucket-1</code>. In this example, the CloudTrail user specified an empty prefix,
        *       and the option to log both <code>Read</code> and <code>Write</code> data events.</p>
        *          <ol>
        *             <li>
        *                <p>A user uploads an image file to <code>bucket-1</code>.</p>
        *             </li>
        *             <li>
        *                <p>The <code>PutObject</code> API operation is an Amazon S3 object-level API.
        *             It is recorded as a data event in CloudTrail. Because the CloudTrail user specified an S3 bucket
        *             with an empty prefix, events that occur on any object in that bucket are logged. The trail processes and logs the
        *                event.</p>
        *             </li>
        *             <li>
        *                <p>A user uploads an object to an Amazon S3 bucket named
        *                   <code>arn:aws:s3:::bucket-2</code>.</p>
        *             </li>
        *             <li>
        *                <p>The <code>PutObject</code> API operation occurred for an object in an S3 bucket that the CloudTrail
        *             user didn't specify for the trail. The trail doesn’t log the event.</p>
        *             </li>
        *          </ol>
        *          <p>The following example demonstrates how logging works when you configure logging of Lambda data events for a
        *          Lambda function named <i>MyLambdaFunction</i>, but not for all Lambda functions.</p>
        *          <ol>
        *             <li>
        *                <p>A user runs a script that includes a call to the <i>MyLambdaFunction</i> function and the
        *                <i>MyOtherLambdaFunction</i> function.</p>
        *             </li>
        *             <li>
        *                <p>The <code>Invoke</code> API operation on <i>MyLambdaFunction</i> is an Lambda API.
        *                It is recorded as a data event in CloudTrail. Because the CloudTrail user specified logging data events for
        *                <i>MyLambdaFunction</i>, any invocations of that function are logged. The trail processes and logs the event.</p>
        *             </li>
        *             <li>
        *                <p>The <code>Invoke</code> API operation on <i>MyOtherLambdaFunction</i> is an Lambda API.
        *                Because the CloudTrail user did not specify logging data events for all Lambda functions,
        *                the <code>Invoke</code> operation for <i>MyOtherLambdaFunction</i> does not match the function specified for the trail.
        *                The trail doesn’t log the event. </p>
        *             </li>
        *          </ol>
        */
    export interface DataResource {
            /**
                * <p>The resource type in which you want to log data events. You can specify
                *          the following <i>basic</i> event selector resource types:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>AWS::S3::Object</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>AWS::Lambda::Function</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>AWS::DynamoDB::Table</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *          <p>The following resource types are also availble through <i>advanced</i> event selectors.
                *          Basic event selector resource types are valid in advanced event selectors, but
                *          advanced event selector resource types are not valid in basic event selectors.
                *          For more information, see <a>AdvancedFieldSelector$Field</a>.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>AWS::S3Outposts::Object</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>AWS::ManagedBlockchain::Node</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>AWS::S3ObjectLambda::AccessPoint</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>AWS::EC2::Snapshot</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>AWS::S3::AccessPoint</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>AWS::DynamoDB::Stream</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>AWS::Glue::Table</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Type?: string;
            /**
                * <p>An array of Amazon Resource Name (ARN) strings or partial ARN strings for the specified objects.</p>
                *          <ul>
                *             <li>
                *                <p>To log data events for all objects in all S3 buckets in your Amazon Web Services account, specify the
                *          prefix as <code>arn:aws:s3:::</code>.</p>
                *                <note>
                *                   <p>This also enables logging of data event activity performed by any user or role in your Amazon Web Services account,
                *          even if that activity is performed on a bucket that belongs to another Amazon Web Services account.</p>
                *                </note>
                *             </li>
                *             <li>
                *                <p>To log data events for all objects in an S3 bucket, specify the bucket and an empty
                *          object prefix such as <code>arn:aws:s3:::bucket-1/</code>. The trail logs data events for
                *          all objects in this S3 bucket.</p>
                *             </li>
                *             <li>
                *                <p>To log data events for specific objects, specify the S3 bucket and object prefix such
                *          as <code>arn:aws:s3:::bucket-1/example-images</code>. The trail logs data events for
                *          objects in this S3 bucket that match the prefix.</p>
                *             </li>
                *             <li>
                *                <p>To log data events for all Lambda functions in your Amazon Web Services account, specify the prefix as
                *                   <code>arn:aws:lambda</code>.</p>
                *                <note>
                *                   <p>This also enables logging of <code>Invoke</code> activity performed by any user or role in your Amazon Web Services account,
                *          even if that activity is performed on a function that belongs to another Amazon Web Services account. </p>
                *                </note>
                *             </li>
                *             <li>
                *                <p>To log data events for a specific Lambda function, specify the function ARN.</p>
                *                <note>
                *                   <p>Lambda function ARNs are exact. For example, if you specify a
                *             function ARN <i>arn:aws:lambda:us-west-2:111111111111:function:helloworld</i>, data events will
                *             only be logged for <i>arn:aws:lambda:us-west-2:111111111111:function:helloworld</i>. They will
                *             not be logged for <i>arn:aws:lambda:us-west-2:111111111111:function:helloworld2</i>.</p>
                *                </note>
                *             </li>
                *             <li>
                *                <p>To log data events for all DynamoDB tables in your Amazon Web Services account, specify the prefix
                *                as <code>arn:aws:dynamodb</code>.</p>
                *             </li>
                *          </ul>
                */
            Values?: string[];
    }
    export namespace DataResource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataResource) => any;
    }
    export enum ReadWriteType {
            All = "All",
            ReadOnly = "ReadOnly",
            WriteOnly = "WriteOnly"
    }
    /**
        * <p>Use event selectors to further specify the management and data event settings for your trail. By
        *          default, trails created without specific event selectors will be configured to log all read and
        *          write management events, and no data events. When an event occurs in your account, CloudTrail evaluates the event selector
        *          for all trails. For each trail, if the event matches any event selector, the trail
        *          processes and logs the event. If the event doesn't match any event selector, the trail
        *          doesn't log the event.</p>
        *          <p>You can configure up to five event selectors for a trail.</p>
        *          <p>You cannot apply both event selectors and advanced event selectors to a trail.</p>
        */
    export interface EventSelector {
            /**
                * <p>Specify if you want your trail to log read-only events, write-only events, or all. For example,
                *          the EC2 <code>GetConsoleOutput</code> is a read-only API operation and
                *             <code>RunInstances</code> is a write-only API operation.</p>
                *          <p> By default, the value is <code>All</code>.</p>
                */
            ReadWriteType?: ReadWriteType | string;
            /**
                * <p>Specify if you want your event selector to include management events for your trail.</p>
                *          <p>
                *          For more information, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-management-and-data-events-with-cloudtrail.html#logging-management-events">Management Events</a> in the <i>CloudTrail User Guide</i>.</p>
                *
                *          <p>By default, the value is <code>true</code>.</p>
                *          <p>The first copy of management events is free. You are charged for additional copies of management
                *          events that you are logging on any subsequent trail in the same region. For more information about
                *          CloudTrail pricing, see <a href="http://aws.amazon.com/cloudtrail/pricing/">CloudTrail Pricing</a>.</p>
                */
            IncludeManagementEvents?: boolean;
            /**
                * <p>CloudTrail supports data event logging for Amazon S3 objects, Lambda functions,
                *          and Amazon DynamoDB tables
                *          with basic event selectors. You can specify up to 250 resources for an individual event
                *          selector, but the total number of data resources cannot exceed 250 across all event
                *          selectors in a trail. This limit does not apply if you configure resource logging for all
                *          data events.</p>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-management-and-data-events-with-cloudtrail.html#logging-data-events">Data Events</a> and <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html">Limits in CloudTrail</a>
                *          in the <i>CloudTrail User Guide</i>.</p>
                */
            DataResources?: DataResource[];
            /**
                * <p>An optional list of service event sources from which you do not want management events to be logged on your trail. In this release, the list can be empty (disables the filter),
                *          or it can filter out Key Management Service or Amazon RDS Data API events by
                *          containing <code>kms.amazonaws.com</code> or <code>rdsdata.amazonaws.com</code>. By default, <code>ExcludeManagementEventSources</code> is empty, and KMS and
                *          Amazon RDS Data API events are logged to your trail. You can exclude management event sources only in regions that support the event source.</p>
                */
            ExcludeManagementEventSources?: string[];
    }
    export namespace EventSelector {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventSelector) => any;
    }
    export interface GetEventSelectorsResponse {
            /**
                * <p>The specified trail ARN that has the event selectors.</p>
                */
            TrailARN?: string;
            /**
                * <p>The event selectors that are configured for the trail.</p>
                */
            EventSelectors?: EventSelector[];
            /**
                * <p>
                *          The advanced event selectors that are configured for the trail.
                *       </p>
                */
            AdvancedEventSelectors?: AdvancedEventSelector[];
    }
    export namespace GetEventSelectorsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEventSelectorsResponse) => any;
    }
    export interface GetInsightSelectorsRequest {
            /**
                * <p>Specifies the name of the trail or trail ARN. If you specify a trail name, the
                *          string must meet the following requirements:</p>
                *          <ul>
                *             <li>
                *                <p>Contain only ASCII letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), or dashes (-)</p>
                *             </li>
                *             <li>
                *                <p>Start with a letter or number, and end with a letter or number</p>
                *             </li>
                *             <li>
                *                <p>Be between 3 and 128 characters</p>
                *             </li>
                *             <li>
                *                <p>Have no adjacent periods, underscores or dashes. Names like <code>my-_namespace</code>
                *                and <code>my--namespace</code> are not valid.</p>
                *             </li>
                *             <li>
                *                <p>Not be in IP address format (for example, 192.168.5.4)</p>
                *             </li>
                *          </ul>
                *          <p>If you specify a trail ARN, it must be in the format:</p>
                *          <p>
                *             <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code>
                *          </p>
                */
            TrailName: string | undefined;
    }
    export namespace GetInsightSelectorsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInsightSelectorsRequest) => any;
    }
    export enum InsightType {
            ApiCallRateInsight = "ApiCallRateInsight",
            ApiErrorRateInsight = "ApiErrorRateInsight"
    }
    /**
        * <p>A JSON string that contains a list of insight types that are logged on a trail.</p>
        */
    export interface InsightSelector {
            /**
                * <p>The type of insights to log on a trail. <code>ApiCallRateInsight</code> and <code>ApiErrorRateInsight</code> are valid insight types.</p>
                */
            InsightType?: InsightType | string;
    }
    export namespace InsightSelector {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InsightSelector) => any;
    }
    export interface GetInsightSelectorsResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of a trail for which you want to get Insights selectors.</p>
                */
            TrailARN?: string;
            /**
                * <p>A JSON string that contains the insight types you want to log on a trail. In this release, <code>ApiErrorRateInsight</code> and
                *          <code>ApiCallRateInsight</code> are supported as insight types.</p>
                */
            InsightSelectors?: InsightSelector[];
    }
    export namespace GetInsightSelectorsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInsightSelectorsResponse) => any;
    }
    /**
        * <p>If you run <code>GetInsightSelectors</code> on a trail that does not have Insights events enabled, the operation throws the exception <code>InsightNotEnabledException</code>.</p>
        */
    export class InsightNotEnabledException extends __BaseException {
            readonly name: "InsightNotEnabledException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InsightNotEnabledException, __BaseException>);
    }
    export interface GetQueryResultsRequest {
            /**
                * <p>The ARN (or ID suffix of the ARN) of the event data store against which the query was run.</p>
                */
            EventDataStore: string | undefined;
            /**
                * <p>The ID of the query for which you want to get results.</p>
                */
            QueryId: string | undefined;
            /**
                * <p>A token you can use to get the next page of query results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of query results to display on a single page.</p>
                */
            MaxQueryResults?: number;
    }
    export namespace GetQueryResultsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetQueryResultsRequest) => any;
    }
    /**
        * <p>Metadata about a query, such as the number of results.</p>
        */
    export interface QueryStatistics {
            /**
                * <p>The number of results returned.</p>
                */
            ResultsCount?: number;
            /**
                * <p>The total number of results returned by a query.</p>
                */
            TotalResultsCount?: number;
            /**
                * <p>The total bytes that the query scanned in the event data store. This value matches the number of
                *          bytes for which your account is billed for the query, unless the query is still running.</p>
                */
            BytesScanned?: number;
    }
    export namespace QueryStatistics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryStatistics) => any;
    }
    export interface GetQueryResultsResponse {
            /**
                * <p>The status of the query. Values include <code>QUEUED</code>, <code>RUNNING</code>, <code>FINISHED</code>, <code>FAILED</code>,
                *          <code>TIMED_OUT</code>, or <code>CANCELLED</code>.</p>
                */
            QueryStatus?: QueryStatus | string;
            /**
                * <p>Shows the count of query results.</p>
                */
            QueryStatistics?: QueryStatistics;
            /**
                * <p>Contains the individual event results of the query.</p>
                */
            QueryResultRows?: Record<string, string>[][];
            /**
                * <p>A token you can use to get the next page of query results.</p>
                */
            NextToken?: string;
            /**
                * <p>The error message returned if a query failed.</p>
                */
            ErrorMessage?: string;
    }
    export namespace GetQueryResultsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetQueryResultsResponse) => any;
    }
    /**
        * <p>This exception is thrown if the limit specified is not valid.</p>
        */
    export class InvalidMaxResultsException extends __BaseException {
            readonly name: "InvalidMaxResultsException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidMaxResultsException, __BaseException>);
    }
    /**
        * <p>A token that is not valid, or a token that was previously used in a request with different parameters. This exception is thrown if the token is not valid.</p>
        */
    export class InvalidNextTokenException extends __BaseException {
            readonly name: "InvalidNextTokenException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidNextTokenException, __BaseException>);
    }
    export interface GetTrailRequest {
            /**
                * <p>The name or the Amazon Resource Name (ARN) of the trail for which you want to retrieve settings information.</p>
                */
            Name: string | undefined;
    }
    export namespace GetTrailRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTrailRequest) => any;
    }
    export interface GetTrailResponse {
            /**
                * <p>The settings for a trail.</p>
                */
            Trail?: Trail;
    }
    export namespace GetTrailResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTrailResponse) => any;
    }
    /**
        * <p>The name of a trail about which you want the current status.</p>
        */
    export interface GetTrailStatusRequest {
            /**
                * <p>Specifies the name or the CloudTrail ARN of the trail for which you are requesting status. To get the status of a
                *          shadow trail (a replication of the trail in another region), you must specify its ARN. The following is the format of a trail ARN.</p>
                *           <p>
                *             <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code>
                *          </p>
                */
            Name: string | undefined;
    }
    export namespace GetTrailStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTrailStatusRequest) => any;
    }
    /**
        * <p>Returns the objects or data listed below if successful. Otherwise, returns an error.</p>
        */
    export interface GetTrailStatusResponse {
            /**
                * <p>Whether the CloudTrail trail is currently logging Amazon Web Services API calls.</p>
                */
            IsLogging?: boolean;
            /**
                * <p>Displays any Amazon S3 error that CloudTrail encountered when attempting to deliver log files
                *          to the designated bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html">Error
                *             Responses</a> in the Amazon S3 API Reference. </p>
                *          <note>
                *             <p>This error occurs only when there is a problem with the destination S3 bucket, and does
                *          not occur for requests that time out. To resolve the issue, create a new bucket, and then call
                *             <code>UpdateTrail</code> to specify the new bucket; or fix the existing objects so that
                *          CloudTrail can again write to the bucket.</p>
                *          </note>
                */
            LatestDeliveryError?: string;
            /**
                * <p>Displays any Amazon SNS error that CloudTrail encountered when attempting to send a
                *          notification. For more information about Amazon SNS errors, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/welcome.html">Amazon SNS Developer Guide</a>.
                *       </p>
                */
            LatestNotificationError?: string;
            /**
                * <p>Specifies the date and time that CloudTrail last delivered log files to an account's Amazon S3 bucket.</p>
                */
            LatestDeliveryTime?: Date;
            /**
                * <p>Specifies the date and time of the most recent Amazon SNS notification that CloudTrail has written a new log file to an account's Amazon S3 bucket.</p>
                */
            LatestNotificationTime?: Date;
            /**
                * <p>Specifies the most recent date and time when CloudTrail started recording API calls for an Amazon Web Services account.</p>
                */
            StartLoggingTime?: Date;
            /**
                * <p>Specifies the most recent date and time when CloudTrail stopped recording API calls for an Amazon Web Services account.</p>
                */
            StopLoggingTime?: Date;
            /**
                * <p>Displays any CloudWatch Logs error that CloudTrail encountered when attempting to deliver logs to CloudWatch Logs.</p>
                */
            LatestCloudWatchLogsDeliveryError?: string;
            /**
                * <p>Displays the most recent date and time when CloudTrail delivered logs to CloudWatch Logs.</p>
                */
            LatestCloudWatchLogsDeliveryTime?: Date;
            /**
                * <p>Specifies the date and time that CloudTrail last delivered a digest file to an account's Amazon S3 bucket.</p>
                */
            LatestDigestDeliveryTime?: Date;
            /**
                * <p>Displays any Amazon S3 error that CloudTrail encountered when attempting to deliver a digest
                *          file to the designated bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html">Error
                *             Responses</a> in the Amazon S3 API Reference. </p>
                *          <note>
                *             <p>This error occurs only when there is a problem with the destination S3 bucket, and does
                *          not occur for requests that time out. To resolve the issue, create a new bucket, and then call
                *             <code>UpdateTrail</code> to specify the new bucket; or fix the existing objects so that
                *             CloudTrail can again write to the bucket.</p>
                *          </note>
                */
            LatestDigestDeliveryError?: string;
            /**
                * <p>This field is no longer in use.</p>
                */
            LatestDeliveryAttemptTime?: string;
            /**
                * <p>This field is no longer in use.</p>
                */
            LatestNotificationAttemptTime?: string;
            /**
                * <p>This field is no longer in use.</p>
                */
            LatestNotificationAttemptSucceeded?: string;
            /**
                * <p>This field is no longer in use.</p>
                */
            LatestDeliveryAttemptSucceeded?: string;
            /**
                * <p>This field is no longer in use.</p>
                */
            TimeLoggingStarted?: string;
            /**
                * <p>This field is no longer in use.</p>
                */
            TimeLoggingStopped?: string;
    }
    export namespace GetTrailStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTrailStatusResponse) => any;
    }
    export interface ListEventDataStoresRequest {
            /**
                * <p>A token you can use to get the next page of event data store results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of event data stores to display on a single page.</p>
                */
            MaxResults?: number;
    }
    export namespace ListEventDataStoresRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEventDataStoresRequest) => any;
    }
    /**
        * <p>A storage lake of event data against which you can run complex SQL-based queries. An event data store can include events
        *          that you have logged on your account from the last 90 to 2555 days
        *          (about three months to up to seven years). To select events for an event data store,
        *          use <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html#creating-data-event-selectors-advanced">advanced event selectors</a>.</p>
        */
    export interface EventDataStore {
            /**
                * <p>The ARN of the event data store.</p>
                */
            EventDataStoreArn?: string;
            /**
                * <p>The name of the event data store.</p>
                */
            Name?: string;
            /**
                * @deprecated
                *
                * <p>This field is being deprecated. Indicates whether the event data store is protected from termination.</p>
                */
            TerminationProtectionEnabled?: boolean;
            /**
                * @deprecated
                *
                * <p>This field is being deprecated. The status of an event data store. Values are <code>ENABLED</code> and <code>PENDING_DELETION</code>.</p>
                */
            Status?: EventDataStoreStatus | string;
            /**
                * @deprecated
                *
                * <p>This field is being deprecated. The advanced event selectors that were used to select events for the data store.</p>
                */
            AdvancedEventSelectors?: AdvancedEventSelector[];
            /**
                * @deprecated
                *
                * <p>This field is being deprecated. Indicates whether the event data store includes events from all regions, or only from the region in which it was created.</p>
                */
            MultiRegionEnabled?: boolean;
            /**
                * @deprecated
                *
                * <p>This field is being deprecated. Indicates that an event data store is collecting logged events for an organization.</p>
                */
            OrganizationEnabled?: boolean;
            /**
                * @deprecated
                *
                * <p>This field is being deprecated. The retention period, in days.</p>
                */
            RetentionPeriod?: number;
            /**
                * @deprecated
                *
                * <p>This field is being deprecated. The timestamp of the event data store's creation.</p>
                */
            CreatedTimestamp?: Date;
            /**
                * @deprecated
                *
                * <p>This field is being deprecated. The timestamp showing when an event data store was updated, if applicable. <code>UpdatedTimestamp</code> is always either the same or newer than the time shown in <code>CreatedTimestamp</code>.</p>
                */
            UpdatedTimestamp?: Date;
    }
    export namespace EventDataStore {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventDataStore) => any;
    }
    export interface ListEventDataStoresResponse {
            /**
                * <p>Contains information about event data stores in the account, in the current region.</p>
                */
            EventDataStores?: EventDataStore[];
            /**
                * <p>A token you can use to get the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListEventDataStoresResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEventDataStoresResponse) => any;
    }
    /**
        * <p>Occurs if the timestamp values are not valid. Either the start time occurs after the end time, or the time range is outside the range of possible values.</p>
        */
    export class InvalidTimeRangeException extends __BaseException {
            readonly name: "InvalidTimeRangeException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTimeRangeException, __BaseException>);
    }
    /**
        * <p>Reserved for future use.</p>
        */
    export class InvalidTokenException extends __BaseException {
            readonly name: "InvalidTokenException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTokenException, __BaseException>);
    }
    /**
        * <p>Requests the public keys for a specified time range.</p>
        */
    export interface ListPublicKeysRequest {
            /**
                * <p>Optionally specifies, in UTC, the start of the time range to look up public keys for CloudTrail digest files.
                *          If not specified, the current time is used, and the current public key is returned.</p>
                */
            StartTime?: Date;
            /**
                * <p>Optionally specifies, in UTC, the end of the time range to look up public keys for CloudTrail digest files. If not
                *          specified, the current time is used.</p>
                */
            EndTime?: Date;
            /**
                * <p>Reserved for future use.</p>
                */
            NextToken?: string;
    }
    export namespace ListPublicKeysRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPublicKeysRequest) => any;
    }
    /**
        * <p>Contains information about a returned public key.</p>
        */
    export interface PublicKey {
            /**
                * <p>The DER encoded public key value in PKCS#1 format.</p>
                */
            Value?: Uint8Array;
            /**
                * <p>The starting time of validity of the public key.</p>
                */
            ValidityStartTime?: Date;
            /**
                * <p>The ending time of validity of the public key.</p>
                */
            ValidityEndTime?: Date;
            /**
                * <p>The fingerprint of the public key.</p>
                */
            Fingerprint?: string;
    }
    export namespace PublicKey {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PublicKey) => any;
    }
    /**
        * <p>Returns the objects or data listed below if successful. Otherwise, returns an error.</p>
        */
    export interface ListPublicKeysResponse {
            /**
                * <p>Contains an array of PublicKey objects.</p>
                *          <note>
                *             <p>The returned public keys may have validity time ranges that overlap.</p>
                *          </note>
                */
            PublicKeyList?: PublicKey[];
            /**
                * <p>Reserved for future use.</p>
                */
            NextToken?: string;
    }
    export namespace ListPublicKeysResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPublicKeysResponse) => any;
    }
    /**
        * <p>A date range for the query was specified that is not valid. Be sure that the start time is chronologically
        *          before the end time. For more information
        *          about writing a query, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/query-create-edit-query.html">Create
        *             or edit a query</a> in the <i>CloudTrail User Guide</i>.</p>
        */
    export class InvalidDateRangeException extends __BaseException {
            readonly name: "InvalidDateRangeException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDateRangeException, __BaseException>);
    }
    /**
        * <p>The query status is not valid for the operation.</p>
        */
    export class InvalidQueryStatusException extends __BaseException {
            readonly name: "InvalidQueryStatusException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidQueryStatusException, __BaseException>);
    }
    export interface ListQueriesRequest {
            /**
                * <p>The ARN (or the ID suffix of the ARN) of an event data store on which queries were run.</p>
                */
            EventDataStore: string | undefined;
            /**
                * <p>A token you can use to get the next page of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of queries to show on a page.</p>
                */
            MaxResults?: number;
            /**
                * <p>Use with <code>EndTime</code> to bound a <code>ListQueries</code> request, and limit its results to only those queries run
                *          within a specified time period.</p>
                */
            StartTime?: Date;
            /**
                * <p>Use with <code>StartTime</code> to bound a <code>ListQueries</code> request, and limit its results to only those queries run
                *       within a specified time period.</p>
                */
            EndTime?: Date;
            /**
                * <p>The status of queries that you want to return in results. Valid values for <code>QueryStatus</code> include <code>QUEUED</code>, <code>RUNNING</code>,
                *          <code>FINISHED</code>, <code>FAILED</code>, <code>TIMED_OUT</code>, or <code>CANCELLED</code>.</p>
                */
            QueryStatus?: QueryStatus | string;
    }
    export namespace ListQueriesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListQueriesRequest) => any;
    }
    /**
        * <p>A SQL string of criteria about events that you want to collect in an event data store.</p>
        */
    export interface Query {
            /**
                * <p>The ID of a query.</p>
                */
            QueryId?: string;
            /**
                * <p>The status of the query. This can be <code>QUEUED</code>, <code>RUNNING</code>, <code>FINISHED</code>, <code>FAILED</code>,
                *          <code>TIMED_OUT</code>, or <code>CANCELLED</code>.</p>
                */
            QueryStatus?: QueryStatus | string;
            /**
                * <p>The creation time of a query.</p>
                */
            CreationTime?: Date;
    }
    export namespace Query {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Query) => any;
    }
    export interface ListQueriesResponse {
            /**
                * <p>Lists matching query results, and shows query ID, status, and creation time of each query.</p>
                */
            Queries?: Query[];
            /**
                * <p>A token you can use to get the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListQueriesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListQueriesResponse) => any;
    }
    /**
        * <p>Specifies a list of tags to return.</p>
        */
    export interface ListTagsRequest {
            /**
                * <p>Specifies a list of trail and event data store ARNs whose tags will be listed. The list
                *          has a limit of 20 ARNs.</p>
                */
            ResourceIdList: string[] | undefined;
            /**
                * <p>Reserved for future use.</p>
                */
            NextToken?: string;
    }
    export namespace ListTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsRequest) => any;
    }
    /**
        * <p>A resource tag.</p>
        */
    export interface ResourceTag {
            /**
                * <p>Specifies the ARN of the resource.</p>
                */
            ResourceId?: string;
            /**
                * <p>A list of tags.</p>
                */
            TagsList?: Tag[];
    }
    export namespace ResourceTag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceTag) => any;
    }
    /**
        * <p>Returns the objects or data listed below if successful. Otherwise, returns an error.</p>
        */
    export interface ListTagsResponse {
            /**
                * <p>A list of resource tags.</p>
                */
            ResourceTagList?: ResourceTag[];
            /**
                * <p>Reserved for future use.</p>
                */
            NextToken?: string;
    }
    export namespace ListTagsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsResponse) => any;
    }
    export interface ListTrailsRequest {
            /**
                * <p>The token to use to get the next page of results after a previous API call. This token must be passed
                *          in with the same parameters that were specified in the the original call. For example, if the original
                *          call specified an AttributeKey of 'Username' with a value of 'root', the call with NextToken should
                *          include those same parameters.</p>
                */
            NextToken?: string;
    }
    export namespace ListTrailsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTrailsRequest) => any;
    }
    /**
        * <p>Information about a CloudTrail trail, including the trail's name, home region, and Amazon Resource Name (ARN).</p>
        */
    export interface TrailInfo {
            /**
                * <p>The ARN of a trail.</p>
                */
            TrailARN?: string;
            /**
                * <p>The name of a trail.</p>
                */
            Name?: string;
            /**
                * <p>The Amazon Web Services Region in which a trail was created.</p>
                */
            HomeRegion?: string;
    }
    export namespace TrailInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrailInfo) => any;
    }
    export interface ListTrailsResponse {
            /**
                * <p>Returns the name, ARN, and home region of trails in the current account.</p>
                */
            Trails?: TrailInfo[];
            /**
                * <p>The token to use to get the next page of results after a previous API call. If the token does not appear,
                *          there are no more results to return. The token must be passed in with the same parameters as the previous call.
                *          For example, if the original call specified an AttributeKey of 'Username' with a value of 'root', the call with
                *          NextToken should include those same parameters.</p>
                */
            NextToken?: string;
    }
    export namespace ListTrailsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTrailsResponse) => any;
    }
    /**
        * <p>Occurs if an event category that is not valid is specified as a value of <code>EventCategory</code>.</p>
        */
    export class InvalidEventCategoryException extends __BaseException {
            readonly name: "InvalidEventCategoryException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidEventCategoryException, __BaseException>);
    }
    /**
        * <p>Occurs when a lookup attribute is specified that is not valid.</p>
        */
    export class InvalidLookupAttributesException extends __BaseException {
            readonly name: "InvalidLookupAttributesException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidLookupAttributesException, __BaseException>);
    }
    export enum EventCategory {
            Insight = "insight"
    }
    export enum LookupAttributeKey {
            ACCESS_KEY_ID = "AccessKeyId",
            EVENT_ID = "EventId",
            EVENT_NAME = "EventName",
            EVENT_SOURCE = "EventSource",
            READ_ONLY = "ReadOnly",
            RESOURCE_NAME = "ResourceName",
            RESOURCE_TYPE = "ResourceType",
            USERNAME = "Username"
    }
    /**
        * <p>Specifies an attribute and value that filter the events returned.</p>
        */
    export interface LookupAttribute {
            /**
                * <p>Specifies an attribute on which to filter the events returned.</p>
                */
            AttributeKey: LookupAttributeKey | string | undefined;
            /**
                * <p>Specifies a value for the specified AttributeKey.</p>
                */
            AttributeValue: string | undefined;
    }
    export namespace LookupAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LookupAttribute) => any;
    }
    /**
        * <p>Contains a request for LookupEvents.</p>
        */
    export interface LookupEventsRequest {
            /**
                * <p>Contains a list of lookup attributes. Currently the list can contain only one item.</p>
                */
            LookupAttributes?: LookupAttribute[];
            /**
                * <p>Specifies that only events that occur after or at the specified time are returned. If the specified start time is after the specified end time, an error is returned.</p>
                */
            StartTime?: Date;
            /**
                * <p>Specifies that only events that occur before or at the specified time are returned. If the specified end time is before the specified start time, an error is returned.</p>
                */
            EndTime?: Date;
            /**
                * <p>Specifies the event category. If you do not specify an event category, events of the category are not returned in the response. For example,
                *          if you do not specify <code>insight</code> as the value of <code>EventCategory</code>, no Insights events are returned.</p>
                */
            EventCategory?: EventCategory | string;
            /**
                * <p>The number of events to return. Possible values are 1 through 50. The default is 50.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token to use to get the next page of results after a previous API call. This token must be passed in with the same parameters that were specified in the the original call.
                *          For example, if the original call specified an AttributeKey of 'Username' with a value of 'root', the call with NextToken should include those same parameters.</p>
                */
            NextToken?: string;
    }
    export namespace LookupEventsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LookupEventsRequest) => any;
    }
    /**
        * <p>Specifies the type and name of a resource referenced by an event.</p>
        */
    export interface Resource {
            /**
                * <p>The type of a resource referenced by the event returned. When the resource type cannot be
                *          determined, null is returned. Some examples of resource types are: <b>Instance</b> for EC2,
                *          <b>Trail</b> for CloudTrail, <b>DBInstance</b> for Amazon RDS, and <b>AccessKey</b> for IAM.
                *          To learn more about how to look up and filter events by the resource types supported for a service, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/view-cloudtrail-events-console.html#filtering-cloudtrail-events">Filtering CloudTrail Events</a>.</p>
                */
            ResourceType?: string;
            /**
                * <p>The name of the resource referenced by the event returned. These are user-created names whose values will depend on the environment. For example, the resource name might be "auto-scaling-test-group" for an Auto Scaling Group or "i-1234567" for an EC2 Instance.</p>
                */
            ResourceName?: string;
    }
    export namespace Resource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Resource) => any;
    }
    /**
        * <p>Contains information about an event that was returned by a lookup request. The result includes a representation of a CloudTrail event.</p>
        */
    export interface Event {
            /**
                * <p>The CloudTrail ID of the event returned.</p>
                */
            EventId?: string;
            /**
                * <p>The name of the event returned.</p>
                */
            EventName?: string;
            /**
                * <p>Information about whether the event is a write event or a read event. </p>
                */
            ReadOnly?: string;
            /**
                * <p>The Amazon Web Services access key ID that was used to sign the request. If the request was made
                *          with temporary security credentials, this is the access key ID of the temporary credentials.</p>
                */
            AccessKeyId?: string;
            /**
                * <p>The date and time of the event returned.</p>
                */
            EventTime?: Date;
            /**
                * <p>The Amazon Web Services service to which the request was made.</p>
                */
            EventSource?: string;
            /**
                * <p>A user name or role name of the requester that called the API in the event returned.</p>
                */
            Username?: string;
            /**
                * <p>A list of resources referenced by the event returned.</p>
                */
            Resources?: Resource[];
            /**
                * <p>A JSON string that contains a representation of the event returned.</p>
                */
            CloudTrailEvent?: string;
    }
    export namespace Event {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Event) => any;
    }
    /**
        * <p>Contains a response to a LookupEvents action.</p>
        */
    export interface LookupEventsResponse {
            /**
                * <p>A list of events returned based on the lookup attributes specified and the CloudTrail event. The events list is sorted by time. The most recent event is listed first.</p>
                */
            Events?: Event[];
            /**
                * <p>The token to use to get the next page of results after a previous API call. If the token does not appear,
                *          there are no more results to return. The token must be passed in with the same parameters as the previous call.
                *          For example, if the original call specified an AttributeKey of 'Username' with a value of 'root', the call with
                *          NextToken should include those same parameters.</p>
                */
            NextToken?: string;
    }
    export namespace LookupEventsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LookupEventsResponse) => any;
    }
    /**
        * <p>This exception is thrown when the <code>PutEventSelectors</code> operation is called with a number of event
        *          selectors, advanced event selectors, or data resources that is not valid. The combination of event selectors or advanced event selectors and
        *          data resources is not valid. A trail can have up to 5 event selectors. If a trail uses advanced event selectors, a maximum
        *          of 500 total values for all conditions in all advanced event selectors is allowed. A trail is limited to 250 data resources. These data resources can be distributed across event selectors, but the overall total cannot exceed 250.</p>
        *          <p>You can:</p>
        *          <ul>
        *             <li>
        *                <p>Specify a valid number of event selectors (1 to 5) for a trail.</p>
        *             </li>
        *             <li>
        *                <p>Specify a valid number of data resources (1 to 250) for an event selector.
        *                The limit of number of resources on an individual event selector is configurable up to 250.
        *                However, this upper limit is allowed only if the total number of data resources does not
        *                exceed 250 across all event selectors for a trail.</p>
        *             </li>
        *             <li>
        *                <p>Specify up to 500 values for all conditions in all advanced event selectors for a trail.</p>
        *             </li>
        *             <li>
        *                <p>Specify a valid value for a parameter. For example, specifying the <code>ReadWriteType</code>
        *                parameter with a value of <code>read-only</code> is not valid.</p>
        *             </li>
        *          </ul>
        */
    export class InvalidEventSelectorsException extends __BaseException {
            readonly name: "InvalidEventSelectorsException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidEventSelectorsException, __BaseException>);
    }
    export interface PutEventSelectorsRequest {
            /**
                * <p>Specifies the name of the trail or trail ARN. If you specify a trail name, the
                *          string must meet the following requirements:</p>
                *          <ul>
                *             <li>
                *                <p>Contain only ASCII letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), or dashes (-)</p>
                *             </li>
                *             <li>
                *                <p>Start with a letter or number, and end with a letter or number</p>
                *             </li>
                *             <li>
                *                <p>Be between 3 and 128 characters</p>
                *             </li>
                *             <li>
                *                <p>Have no adjacent periods, underscores or dashes. Names like <code>my-_namespace</code>
                *                and <code>my--namespace</code> are not valid.</p>
                *             </li>
                *             <li>
                *                <p>Not be in IP address format (for example, 192.168.5.4)</p>
                *             </li>
                *          </ul>
                *          <p>If you specify a trail ARN, it must be in the following format.</p>
                *          <p>
                *             <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code>
                *          </p>
                */
            TrailName: string | undefined;
            /**
                * <p>Specifies the settings for your event selectors. You can configure up to five event selectors for a trail.
                *          You can use either <code>EventSelectors</code> or <code>AdvancedEventSelectors</code> in a <code>PutEventSelectors</code> request, but not both.
                *          If you apply <code>EventSelectors</code> to a trail, any existing <code>AdvancedEventSelectors</code> are overwritten.</p>
                */
            EventSelectors?: EventSelector[];
            /**
                * <p>
                *          Specifies the settings for advanced event selectors. You can add advanced event selectors, and conditions for your advanced
                *          event selectors, up to a maximum of 500 values for all conditions and selectors on a trail.
                *          You can use either <code>AdvancedEventSelectors</code> or <code>EventSelectors</code>, but not both. If you apply <code>AdvancedEventSelectors</code>
                *          to a trail, any existing <code>EventSelectors</code> are overwritten. For more information about
                *          advanced event selectors, see
                *          <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html">Logging
                *             data events for trails</a> in the <i>CloudTrail User Guide</i>.
                *       </p>
                */
            AdvancedEventSelectors?: AdvancedEventSelector[];
    }
    export namespace PutEventSelectorsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutEventSelectorsRequest) => any;
    }
    export interface PutEventSelectorsResponse {
            /**
                * <p>Specifies the ARN of the trail that was updated with event selectors. The following is the format of a trail ARN.</p>
                *          <p>
                *             <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code>
                *          </p>
                */
            TrailARN?: string;
            /**
                * <p>Specifies the event selectors configured for your trail.</p>
                */
            EventSelectors?: EventSelector[];
            /**
                * <p>Specifies the advanced event selectors configured for your trail.</p>
                */
            AdvancedEventSelectors?: AdvancedEventSelector[];
    }
    export namespace PutEventSelectorsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutEventSelectorsResponse) => any;
    }
    /**
        * <p>The formatting or syntax of the <code>InsightSelectors</code> JSON statement in your <code>PutInsightSelectors</code> or <code>GetInsightSelectors</code> request
        *          is not valid, or the specified insight type in the <code>InsightSelectors</code> statement is not a valid insight type.</p>
        */
    export class InvalidInsightSelectorsException extends __BaseException {
            readonly name: "InvalidInsightSelectorsException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidInsightSelectorsException, __BaseException>);
    }
    export interface PutInsightSelectorsRequest {
            /**
                * <p>The name of the CloudTrail trail for which you want to change or add Insights selectors.</p>
                */
            TrailName: string | undefined;
            /**
                * <p>A JSON string that contains the insight types you want to log on a trail. <code>ApiCallRateInsight</code> and <code>ApiErrorRateInsight</code> are valid insight types.</p>
                */
            InsightSelectors: InsightSelector[] | undefined;
    }
    export namespace PutInsightSelectorsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutInsightSelectorsRequest) => any;
    }
    export interface PutInsightSelectorsResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of a trail for which you want to change or add Insights selectors.</p>
                */
            TrailARN?: string;
            /**
                * <p>A JSON string that contains the Insights event types that you want to log on a trail. The valid Insights types in this release are
                *          <code>ApiErrorRateInsight</code> and <code>ApiCallRateInsight</code>.</p>
                */
            InsightSelectors?: InsightSelector[];
    }
    export namespace PutInsightSelectorsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutInsightSelectorsResponse) => any;
    }
    /**
        * <p>Specifies the tags to remove from a trail or event data store.</p>
        */
    export interface RemoveTagsRequest {
            /**
                * <p>Specifies the ARN of the trail or event data store from which tags should be removed.</p>
                *          <p>
                *          Example trail ARN format: <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code>
                *          </p>
                *          <p>Example event data store ARN format: <code>arn:aws:cloudtrail:us-east-2:12345678910:eventdatastore/EXAMPLE-f852-4e8f-8bd1-bcf6cEXAMPLE</code>
                *          </p>
                */
            ResourceId: string | undefined;
            /**
                * <p>Specifies a list of tags to be removed.</p>
                */
            TagsList: Tag[] | undefined;
    }
    export namespace RemoveTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveTagsRequest) => any;
    }
    /**
        * <p>Returns the objects or data listed below if successful. Otherwise, returns an error.</p>
        */
    export interface RemoveTagsResponse {
    }
    export namespace RemoveTagsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveTagsResponse) => any;
    }
    /**
        * <p>The event data store is not in a status that supports the operation.</p>
        */
    export class InvalidEventDataStoreStatusException extends __BaseException {
            readonly name: "InvalidEventDataStoreStatusException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidEventDataStoreStatusException, __BaseException>);
    }
    export interface RestoreEventDataStoreRequest {
            /**
                * <p>The ARN (or the ID suffix of the ARN) of the event data store that you want to restore.</p>
                */
            EventDataStore: string | undefined;
    }
    export namespace RestoreEventDataStoreRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreEventDataStoreRequest) => any;
    }
    export interface RestoreEventDataStoreResponse {
            /**
                * <p>The event data store ARN.</p>
                */
            EventDataStoreArn?: string;
            /**
                * <p>The name of the event data store.</p>
                */
            Name?: string;
            /**
                * <p>The status of the event data store.</p>
                */
            Status?: EventDataStoreStatus | string;
            /**
                * <p>The advanced event selectors that were used to select events.</p>
                */
            AdvancedEventSelectors?: AdvancedEventSelector[];
            /**
                * <p>Indicates whether the event data store is collecting events from all regions, or only from the region in which the event data
                *       store was created.</p>
                */
            MultiRegionEnabled?: boolean;
            /**
                * <p>Indicates whether an event data store is collecting logged events for an organization in Organizations.</p>
                */
            OrganizationEnabled?: boolean;
            /**
                * <p>The retention period, in days.</p>
                */
            RetentionPeriod?: number;
            /**
                * <p>Indicates that termination protection is enabled and the event data store cannot be automatically deleted.</p>
                */
            TerminationProtectionEnabled?: boolean;
            /**
                * <p>The timestamp of an event data store's creation.</p>
                */
            CreatedTimestamp?: Date;
            /**
                * <p>The timestamp that shows when an event data store was updated, if applicable.
                *          <code>UpdatedTimestamp</code> is always either the same or newer than the time shown in <code>CreatedTimestamp</code>.</p>
                */
            UpdatedTimestamp?: Date;
    }
    export namespace RestoreEventDataStoreResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreEventDataStoreResponse) => any;
    }
    /**
        * <p>The request to CloudTrail to start logging Amazon Web Services API calls for an account.</p>
        */
    export interface StartLoggingRequest {
            /**
                * <p>Specifies the name or the CloudTrail ARN of the trail for which CloudTrail logs Amazon Web Services API calls.
                *          The following is the format of a trail ARN.</p>
                *             <p>
                *             <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code>
                *          </p>
                */
            Name: string | undefined;
    }
    export namespace StartLoggingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartLoggingRequest) => any;
    }
    /**
        * <p>Returns the objects or data listed below if successful. Otherwise, returns an error.</p>
        */
    export interface StartLoggingResponse {
    }
    export namespace StartLoggingResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartLoggingResponse) => any;
    }
    /**
        * <p>The query that was submitted has validation errors, or uses incorrect syntax or unsupported keywords. For more information
        *          about writing a query, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/query-create-edit-query.html">Create
        *             or edit a query</a> in the <i>CloudTrail User Guide</i>.</p>
        */
    export class InvalidQueryStatementException extends __BaseException {
            readonly name: "InvalidQueryStatementException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidQueryStatementException, __BaseException>);
    }
    /**
        * <p>You are already running the maximum number of concurrent queries. Wait a minute for some queries to finish, and then
        *          run the query again.</p>
        */
    export class MaxConcurrentQueriesException extends __BaseException {
            readonly name: "MaxConcurrentQueriesException";
            readonly $fault: "client";
            /**
                * <p>Brief description of the exception returned by the request.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaxConcurrentQueriesException, __BaseException>);
    }
    export interface StartQueryRequest {
            /**
                * <p>The SQL code of your query.</p>
                */
            QueryStatement: string | undefined;
    }
    export namespace StartQueryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartQueryRequest) => any;
    }
    export interface StartQueryResponse {
            /**
                * <p>The ID of the started query.</p>
                */
            QueryId?: string;
    }
    export namespace StartQueryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartQueryResponse) => any;
    }
    /**
        * <p>Passes the request to CloudTrail to stop logging Amazon Web Services API calls for the specified account.</p>
        */
    export interface StopLoggingRequest {
            /**
                * <p>Specifies the name or the CloudTrail ARN of the trail for which CloudTrail will stop logging Amazon Web Services
                *          API calls. The following is the format of a trail ARN.</p>
                *             <p>
                *             <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code>
                *          </p>
                */
            Name: string | undefined;
    }
    export namespace StopLoggingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopLoggingRequest) => any;
    }
    /**
        * <p>Returns the objects or data listed below if successful. Otherwise, returns an error.</p>
        */
    export interface StopLoggingResponse {
    }
    export namespace StopLoggingResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopLoggingResponse) => any;
    }
    export interface UpdateEventDataStoreRequest {
            /**
                * <p>The ARN (or the ID suffix of the ARN) of the event data store that you want to update.</p>
                */
            EventDataStore: string | undefined;
            /**
                * <p>The event data store name.</p>
                */
            Name?: string;
            /**
                * <p>The advanced event selectors used to select events for the event data store.</p>
                */
            AdvancedEventSelectors?: AdvancedEventSelector[];
            /**
                * <p>Specifies whether an event data store collects events from all regions, or only from the region in which it was created.</p>
                */
            MultiRegionEnabled?: boolean;
            /**
                * <p>Specifies whether an event data store collects events logged for an organization in Organizations.</p>
                */
            OrganizationEnabled?: boolean;
            /**
                * <p>The retention period, in days.</p>
                */
            RetentionPeriod?: number;
            /**
                * <p>Indicates that termination protection is enabled and the event data store cannot be automatically deleted.</p>
                */
            TerminationProtectionEnabled?: boolean;
    }
    export namespace UpdateEventDataStoreRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateEventDataStoreRequest) => any;
    }
    export interface UpdateEventDataStoreResponse {
            /**
                * <p>The ARN of the event data store.</p>
                */
            EventDataStoreArn?: string;
            /**
                * <p>The name of the event data store.</p>
                */
            Name?: string;
            /**
                * <p>The status of an event data store. Values can be <code>ENABLED</code> and <code>PENDING_DELETION</code>.</p>
                */
            Status?: EventDataStoreStatus | string;
            /**
                * <p>The advanced event selectors that are applied to the event data store.</p>
                */
            AdvancedEventSelectors?: AdvancedEventSelector[];
            /**
                * <p>Indicates whether the event data store includes events from all regions, or only from the region in which it was created.</p>
                */
            MultiRegionEnabled?: boolean;
            /**
                * <p>Indicates whether an event data store is collecting logged events for an organization in Organizations.</p>
                */
            OrganizationEnabled?: boolean;
            /**
                * <p>The retention period, in days.</p>
                */
            RetentionPeriod?: number;
            /**
                * <p>Indicates whether termination protection is enabled for the event data store.</p>
                */
            TerminationProtectionEnabled?: boolean;
            /**
                * <p>The timestamp that shows when an event data store was first created.</p>
                */
            CreatedTimestamp?: Date;
            /**
                * <p>The timestamp that shows when the event data store was last updated. <code>UpdatedTimestamp</code> is always either the same or newer than the time shown in <code>CreatedTimestamp</code>.</p>
                */
            UpdatedTimestamp?: Date;
    }
    export namespace UpdateEventDataStoreResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateEventDataStoreResponse) => any;
    }
    /**
        * <p>Specifies settings to update for the trail.</p>
        */
    export interface UpdateTrailRequest {
            /**
                * <p>Specifies the name of the trail or trail ARN. If <code>Name</code> is a trail name, the
                *          string must meet the following requirements:</p>
                *          <ul>
                *             <li>
                *                <p>Contain only ASCII letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), or dashes (-)</p>
                *             </li>
                *             <li>
                *                <p>Start with a letter or number, and end with a letter or number</p>
                *             </li>
                *             <li>
                *                <p>Be between 3 and 128 characters</p>
                *             </li>
                *             <li>
                *                <p>Have no adjacent periods, underscores or dashes. Names like <code>my-_namespace</code>
                *             and <code>my--namespace</code> are not valid.</p>
                *             </li>
                *             <li>
                *                <p>Not be in IP address format (for example, 192.168.5.4)</p>
                *             </li>
                *          </ul>
                *          <p>If <code>Name</code> is a trail ARN, it must be in the following format.</p>
                *             <p>
                *             <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code>
                *          </p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies the name of the Amazon S3 bucket designated for publishing log files. See <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/create_trail_naming_policy.html">Amazon S3 Bucket Naming Requirements</a>.</p>
                */
            S3BucketName?: string;
            /**
                * <p>Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated
                *          for log file delivery. For more information, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-find-log-files.html">Finding Your CloudTrail Log Files</a>. The maximum length is 200 characters.</p>
                */
            S3KeyPrefix?: string;
            /**
                * <p>Specifies the name of the Amazon SNS topic defined for notification of log file delivery. The maximum length is 256 characters.</p>
                */
            SnsTopicName?: string;
            /**
                * <p>Specifies whether the trail is publishing events from global services such as IAM to the log files.</p>
                */
            IncludeGlobalServiceEvents?: boolean;
            /**
                * <p>Specifies whether the trail applies only to the current region or to all regions. The default is false. If the trail exists only in the current region and this value is set to true,
                *          shadow trails (replications of the trail) will be created in the other regions. If the trail exists in all regions and this value is set to false, the trail will remain in the region
                *          where it was created, and its shadow trails in other regions will be deleted. As a best practice, consider
                *          using trails that log events in all regions.</p>
                */
            IsMultiRegionTrail?: boolean;
            /**
                * <p>Specifies whether log file validation is enabled. The default is false.</p>
                *          <note>
                *             <p>When you disable log file integrity validation, the chain of digest files is broken after one hour. CloudTrail
                *             does not create digest files for log files that were delivered during a period in which log file integrity validation
                *             was disabled. For example, if you enable log file integrity validation at noon on January 1, disable it at noon on
                *             January 2, and re-enable it at noon on January 10, digest files will not be created for the log files delivered from noon
                *             on January 2 to noon on January 10. The same applies whenever you stop CloudTrail logging or delete a trail.</p>
                *          </note>
                */
            EnableLogFileValidation?: boolean;
            /**
                * <p>Specifies a log group name using an Amazon Resource Name (ARN), a unique identifier that represents the log group to which CloudTrail logs are delivered. Not required unless you specify <code>CloudWatchLogsRoleArn</code>.</p>
                */
            CloudWatchLogsLogGroupArn?: string;
            /**
                * <p>Specifies the role for the CloudWatch Logs endpoint to assume to write to a user's log group.</p>
                */
            CloudWatchLogsRoleArn?: string;
            /**
                * <p>Specifies the KMS key ID to use to encrypt the logs delivered by CloudTrail. The
                *          value can be an alias name prefixed by "alias/", a fully specified ARN to an alias, a fully
                *          specified ARN to a key, or a globally unique identifier.</p>
                *          <p>CloudTrail also supports KMS multi-Region keys. For more information about multi-Region keys,
                *          see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">Using multi-Region keys</a> in the <i>Key Management Service Developer Guide</i>.</p>
                *          <p>Examples:</p>
                *          <ul>
                *             <li>
                *                <p>alias/MyAliasName</p>
                *             </li>
                *             <li>
                *                <p>arn:aws:kms:us-east-2:123456789012:alias/MyAliasName</p>
                *             </li>
                *             <li>
                *                <p>arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012</p>
                *             </li>
                *             <li>
                *                <p>12345678-1234-1234-1234-123456789012</p>
                *             </li>
                *          </ul>
                */
            KmsKeyId?: string;
            /**
                * <p>Specifies whether the trail is applied to all accounts in an organization in Organizations, or only for the current Amazon Web Services account.
                *          The default is false, and cannot be true unless the call is made on behalf of an Amazon Web Services account that is the management account for an organization in
                *          Organizations. If the trail is not an organization trail and this is set to <code>true</code>, the trail will be created in all Amazon Web Services accounts that belong
                *          to the organization. If the trail is an organization trail and this is set to <code>false</code>, the trail will remain in the current Amazon Web Services account but be
                *          deleted from all member accounts in the organization.</p>
                */
            IsOrganizationTrail?: boolean;
    }
    export namespace UpdateTrailRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTrailRequest) => any;
    }
    /**
        * <p>Returns the objects or data listed below if successful. Otherwise, returns an error.</p>
        */
    export interface UpdateTrailResponse {
            /**
                * <p>Specifies the name of the trail.</p>
                */
            Name?: string;
            /**
                * <p>Specifies the name of the Amazon S3 bucket designated for publishing log files.</p>
                */
            S3BucketName?: string;
            /**
                * <p>Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated
                *          for log file delivery.
                *          For more information, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-find-log-files.html">Finding Your IAM Log Files</a>.</p>
                */
            S3KeyPrefix?: string;
            /**
                * @deprecated
                *
                * <p>This field is no longer in use. Use <a>UpdateTrailResponse$SnsTopicARN</a>.</p>
                */
            SnsTopicName?: string;
            /**
                * <p>Specifies the ARN of the Amazon SNS topic that CloudTrail uses to send notifications
                *          when log files are delivered. The following is the format of a topic ARN.</p>
                *          <p>
                *             <code>arn:aws:sns:us-east-2:123456789012:MyTopic</code>
                *          </p>
                */
            SnsTopicARN?: string;
            /**
                * <p>Specifies whether the trail is publishing events from global services such as IAM to the log files.</p>
                */
            IncludeGlobalServiceEvents?: boolean;
            /**
                * <p>Specifies whether the trail exists in one region or in all regions.</p>
                */
            IsMultiRegionTrail?: boolean;
            /**
                * <p>Specifies the ARN of the trail that was updated. The following is the format of a trail ARN.</p>
                *          <p>
                *             <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code>
                *          </p>
                */
            TrailARN?: string;
            /**
                * <p>Specifies whether log file integrity validation is enabled.</p>
                */
            LogFileValidationEnabled?: boolean;
            /**
                * <p>Specifies the Amazon Resource Name (ARN) of the log group to which CloudTrail logs are delivered.</p>
                */
            CloudWatchLogsLogGroupArn?: string;
            /**
                * <p>Specifies the role for the CloudWatch Logs endpoint to assume to write to a user's log group.</p>
                */
            CloudWatchLogsRoleArn?: string;
            /**
                * <p>Specifies the KMS key ID that encrypts the logs delivered by CloudTrail. The value is a fully specified ARN to a KMS key in the following format.</p>
                *
                *          <p>
                *             <code>arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012</code>
                *          </p>
                */
            KmsKeyId?: string;
            /**
                * <p>Specifies whether the trail is an organization trail.</p>
                */
            IsOrganizationTrail?: boolean;
    }
    export namespace UpdateTrailResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTrailResponse) => any;
    }
}

declare module '@aws-sdk/client-cloudtrail/node_modules/@aws-sdk/client-cloudtrail/dist-types/models/CloudTrailServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from CloudTrail service.
        */
    export class CloudTrailServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

