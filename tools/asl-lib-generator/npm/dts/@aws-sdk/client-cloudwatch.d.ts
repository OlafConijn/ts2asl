// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client

declare module '@aws-sdk/client-cloudwatch' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CloudWatchClient } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { DeleteAlarmsCommandInput, DeleteAlarmsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DeleteAlarmsCommand";
    import { DeleteAnomalyDetectorCommandInput, DeleteAnomalyDetectorCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DeleteAnomalyDetectorCommand";
    import { DeleteDashboardsCommandInput, DeleteDashboardsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DeleteDashboardsCommand";
    import { DeleteInsightRulesCommandInput, DeleteInsightRulesCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DeleteInsightRulesCommand";
    import { DeleteMetricStreamCommandInput, DeleteMetricStreamCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DeleteMetricStreamCommand";
    import { DescribeAlarmHistoryCommandInput, DescribeAlarmHistoryCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DescribeAlarmHistoryCommand";
    import { DescribeAlarmsCommandInput, DescribeAlarmsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DescribeAlarmsCommand";
    import { DescribeAlarmsForMetricCommandInput, DescribeAlarmsForMetricCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DescribeAlarmsForMetricCommand";
    import { DescribeAnomalyDetectorsCommandInput, DescribeAnomalyDetectorsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DescribeAnomalyDetectorsCommand";
    import { DescribeInsightRulesCommandInput, DescribeInsightRulesCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DescribeInsightRulesCommand";
    import { DisableAlarmActionsCommandInput, DisableAlarmActionsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DisableAlarmActionsCommand";
    import { DisableInsightRulesCommandInput, DisableInsightRulesCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DisableInsightRulesCommand";
    import { EnableAlarmActionsCommandInput, EnableAlarmActionsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/EnableAlarmActionsCommand";
    import { EnableInsightRulesCommandInput, EnableInsightRulesCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/EnableInsightRulesCommand";
    import { GetDashboardCommandInput, GetDashboardCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/GetDashboardCommand";
    import { GetInsightRuleReportCommandInput, GetInsightRuleReportCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/GetInsightRuleReportCommand";
    import { GetMetricDataCommandInput, GetMetricDataCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/GetMetricDataCommand";
    import { GetMetricStatisticsCommandInput, GetMetricStatisticsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/GetMetricStatisticsCommand";
    import { GetMetricStreamCommandInput, GetMetricStreamCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/GetMetricStreamCommand";
    import { GetMetricWidgetImageCommandInput, GetMetricWidgetImageCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/GetMetricWidgetImageCommand";
    import { ListDashboardsCommandInput, ListDashboardsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/ListDashboardsCommand";
    import { ListMetricsCommandInput, ListMetricsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/ListMetricsCommand";
    import { ListMetricStreamsCommandInput, ListMetricStreamsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/ListMetricStreamsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/ListTagsForResourceCommand";
    import { PutAnomalyDetectorCommandInput, PutAnomalyDetectorCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/PutAnomalyDetectorCommand";
    import { PutCompositeAlarmCommandInput, PutCompositeAlarmCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/PutCompositeAlarmCommand";
    import { PutDashboardCommandInput, PutDashboardCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/PutDashboardCommand";
    import { PutInsightRuleCommandInput, PutInsightRuleCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/PutInsightRuleCommand";
    import { PutMetricAlarmCommandInput, PutMetricAlarmCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/PutMetricAlarmCommand";
    import { PutMetricDataCommandInput, PutMetricDataCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/PutMetricDataCommand";
    import { PutMetricStreamCommandInput, PutMetricStreamCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/PutMetricStreamCommand";
    import { SetAlarmStateCommandInput, SetAlarmStateCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/SetAlarmStateCommand";
    import { StartMetricStreamsCommandInput, StartMetricStreamsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/StartMetricStreamsCommand";
    import { StopMetricStreamsCommandInput, StopMetricStreamsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/StopMetricStreamsCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/UntagResourceCommand";
    /**
        * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the
        * 			applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track
        * 			metrics, which are the variables you want to measure for your resources and
        * 			applications.</p>
        *
        * 		       <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules
        * 			that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2
        * 			instances. Then, use this data to determine whether you should launch
        * 			additional instances to handle increased load. You can also use this data to stop
        * 			under-used instances to save
        * 			money.</p>
        *
        * 		       <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor
        * 			your own custom metrics. With CloudWatch, you gain system-wide visibility into resource
        * 			utilization, application performance, and operational health.</p>
        */
    export class CloudWatch extends CloudWatchClient {
            /**
                * <p>Deletes the specified alarms. You can delete up to 100 alarms in one operation. However, this total can include no more
                * 			than one composite alarm. For example, you could delete 99 metric alarms and one composite alarms with one operation, but you can't
                * 			delete two composite alarms with one operation.</p>
                * 		       <p>
                * 			In the event of an error, no alarms are
                * 			deleted.</p>
                * 		       <note>
                *             <p>It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and
                * 			composite alarm B also depends on composite alarm A. In this scenario, you can't delete any composite alarm that is part of the cycle
                * 			because there is always still a composite alarm that depends on that alarm that you want to delete.</p>
                * 			         <p>To get out of such a situation, you must
                * 				break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest
                * 				change to make to break a cycle is to change the <code>AlarmRule</code> of one of the alarms to <code>False</code>. </p>
                * 			         <p>Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path.
                * 			</p>
                *          </note>
                */
            deleteAlarms(args: DeleteAlarmsCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAlarmsCommandOutput>;
            deleteAlarms(args: DeleteAlarmsCommandInput, cb: (err: any, data?: DeleteAlarmsCommandOutput) => void): void;
            deleteAlarms(args: DeleteAlarmsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAlarmsCommandOutput) => void): void;
            /**
                * <p>Deletes the specified anomaly detection model from your account.</p>
                */
            deleteAnomalyDetector(args: DeleteAnomalyDetectorCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAnomalyDetectorCommandOutput>;
            deleteAnomalyDetector(args: DeleteAnomalyDetectorCommandInput, cb: (err: any, data?: DeleteAnomalyDetectorCommandOutput) => void): void;
            deleteAnomalyDetector(args: DeleteAnomalyDetectorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAnomalyDetectorCommandOutput) => void): void;
            /**
                * <p>Deletes all dashboards that you specify. You
                * 			can specify up to 100 dashboards to delete. If there is an error during this call, no dashboards are
                * 			deleted.</p>
                */
            deleteDashboards(args: DeleteDashboardsCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDashboardsCommandOutput>;
            deleteDashboards(args: DeleteDashboardsCommandInput, cb: (err: any, data?: DeleteDashboardsCommandOutput) => void): void;
            deleteDashboards(args: DeleteDashboardsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDashboardsCommandOutput) => void): void;
            /**
                * <p>Permanently deletes the specified Contributor Insights rules.</p>
                * 		       <p>If you create a rule, delete it, and then re-create it with the same name, historical data from the first time
                * 			the rule was created might
                * 			not be available.</p>
                */
            deleteInsightRules(args: DeleteInsightRulesCommandInput, options?: __HttpHandlerOptions): Promise<DeleteInsightRulesCommandOutput>;
            deleteInsightRules(args: DeleteInsightRulesCommandInput, cb: (err: any, data?: DeleteInsightRulesCommandOutput) => void): void;
            deleteInsightRules(args: DeleteInsightRulesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteInsightRulesCommandOutput) => void): void;
            /**
                * <p>Permanently deletes the metric stream that you specify.</p>
                */
            deleteMetricStream(args: DeleteMetricStreamCommandInput, options?: __HttpHandlerOptions): Promise<DeleteMetricStreamCommandOutput>;
            deleteMetricStream(args: DeleteMetricStreamCommandInput, cb: (err: any, data?: DeleteMetricStreamCommandOutput) => void): void;
            deleteMetricStream(args: DeleteMetricStreamCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteMetricStreamCommandOutput) => void): void;
            /**
                * <p>Retrieves the history for the specified alarm. You can filter the results by date range or item type.
                * 			If an alarm name is not specified, the histories for either all metric alarms or all composite alarms are returned.</p>
                * 		       <p>CloudWatch retains the history of an alarm even if you delete the alarm.</p>
                * 		       <p>To use this operation and return information about a composite alarm, you must be signed on with
                * 			the <code>cloudwatch:DescribeAlarmHistory</code> permission that is scoped to <code>*</code>. You can't return information
                * 			about composite alarms if your <code>cloudwatch:DescribeAlarmHistory</code> permission has a narrower scope.</p>
                */
            describeAlarmHistory(args: DescribeAlarmHistoryCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAlarmHistoryCommandOutput>;
            describeAlarmHistory(args: DescribeAlarmHistoryCommandInput, cb: (err: any, data?: DescribeAlarmHistoryCommandOutput) => void): void;
            describeAlarmHistory(args: DescribeAlarmHistoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAlarmHistoryCommandOutput) => void): void;
            /**
                * <p>Retrieves the specified alarms. You can filter the results by specifying a prefix for the alarm
                * 			name, the alarm state, or a prefix for any action.</p>
                * 		       <p>To use this operation and return information about composite alarms, you must be signed on with
                * 		the <code>cloudwatch:DescribeAlarms</code> permission that is scoped to <code>*</code>. You can't return information
                * 			about composite alarms if your <code>cloudwatch:DescribeAlarms</code> permission has a narrower scope.</p>
                */
            describeAlarms(args: DescribeAlarmsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAlarmsCommandOutput>;
            describeAlarms(args: DescribeAlarmsCommandInput, cb: (err: any, data?: DescribeAlarmsCommandOutput) => void): void;
            describeAlarms(args: DescribeAlarmsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAlarmsCommandOutput) => void): void;
            /**
                * <p>Retrieves the alarms for the specified metric. To
                * 			filter the results, specify a statistic, period, or unit.</p>
                * 		       <p>This operation retrieves only standard alarms that are based on
                * 		the specified metric. It does not return alarms based on math expressions that
                * 		use the specified metric, or composite alarms that use the specified metric.</p>
                */
            describeAlarmsForMetric(args: DescribeAlarmsForMetricCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAlarmsForMetricCommandOutput>;
            describeAlarmsForMetric(args: DescribeAlarmsForMetricCommandInput, cb: (err: any, data?: DescribeAlarmsForMetricCommandOutput) => void): void;
            describeAlarmsForMetric(args: DescribeAlarmsForMetricCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAlarmsForMetricCommandOutput) => void): void;
            /**
                * <p>Lists the anomaly detection models that you have created in your account.
                * 			For single metric anomaly detectors,
                * 			you can list all of the models in your account or filter the results
                * 			to only the models that are related to a certain namespace, metric name, or metric dimension.
                * 			For metric math anomaly detectors,
                * 			you can list them by adding <code>METRIC_MATH</code> to the <code>AnomalyDetectorTypes</code> array.
                * 			This will return all metric math anomaly detectors in your account.</p>
                */
            describeAnomalyDetectors(args: DescribeAnomalyDetectorsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAnomalyDetectorsCommandOutput>;
            describeAnomalyDetectors(args: DescribeAnomalyDetectorsCommandInput, cb: (err: any, data?: DescribeAnomalyDetectorsCommandOutput) => void): void;
            describeAnomalyDetectors(args: DescribeAnomalyDetectorsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAnomalyDetectorsCommandOutput) => void): void;
            /**
                * <p>Returns a list of all the Contributor Insights rules in your account.</p>
                *
                * 		       <p>For more information about Contributor Insights, see
                * 		<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html">Using Contributor Insights to Analyze High-Cardinality Data</a>.</p>
                */
            describeInsightRules(args: DescribeInsightRulesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeInsightRulesCommandOutput>;
            describeInsightRules(args: DescribeInsightRulesCommandInput, cb: (err: any, data?: DescribeInsightRulesCommandOutput) => void): void;
            describeInsightRules(args: DescribeInsightRulesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeInsightRulesCommandOutput) => void): void;
            /**
                * <p>Disables the actions for the specified alarms. When an alarm's actions are disabled, the
                * 			alarm actions do not execute when the alarm state changes.</p>
                */
            disableAlarmActions(args: DisableAlarmActionsCommandInput, options?: __HttpHandlerOptions): Promise<DisableAlarmActionsCommandOutput>;
            disableAlarmActions(args: DisableAlarmActionsCommandInput, cb: (err: any, data?: DisableAlarmActionsCommandOutput) => void): void;
            disableAlarmActions(args: DisableAlarmActionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisableAlarmActionsCommandOutput) => void): void;
            /**
                * <p>Disables the specified Contributor Insights rules. When rules are disabled, they do not analyze log groups and do
                * 		not incur costs.</p>
                */
            disableInsightRules(args: DisableInsightRulesCommandInput, options?: __HttpHandlerOptions): Promise<DisableInsightRulesCommandOutput>;
            disableInsightRules(args: DisableInsightRulesCommandInput, cb: (err: any, data?: DisableInsightRulesCommandOutput) => void): void;
            disableInsightRules(args: DisableInsightRulesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisableInsightRulesCommandOutput) => void): void;
            /**
                * <p>Enables the actions for the specified alarms.</p>
                */
            enableAlarmActions(args: EnableAlarmActionsCommandInput, options?: __HttpHandlerOptions): Promise<EnableAlarmActionsCommandOutput>;
            enableAlarmActions(args: EnableAlarmActionsCommandInput, cb: (err: any, data?: EnableAlarmActionsCommandOutput) => void): void;
            enableAlarmActions(args: EnableAlarmActionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: EnableAlarmActionsCommandOutput) => void): void;
            /**
                * <p>Enables the specified Contributor Insights rules. When rules are enabled, they immediately begin analyzing log data.</p>
                */
            enableInsightRules(args: EnableInsightRulesCommandInput, options?: __HttpHandlerOptions): Promise<EnableInsightRulesCommandOutput>;
            enableInsightRules(args: EnableInsightRulesCommandInput, cb: (err: any, data?: EnableInsightRulesCommandOutput) => void): void;
            enableInsightRules(args: EnableInsightRulesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: EnableInsightRulesCommandOutput) => void): void;
            /**
                * <p>Displays the details of the dashboard that you specify.</p>
                * 		       <p>To copy an existing dashboard, use <code>GetDashboard</code>, and then use the data returned
                * 			within <code>DashboardBody</code> as the template for the new dashboard when you call <code>PutDashboard</code> to create
                * 			the copy.</p>
                */
            getDashboard(args: GetDashboardCommandInput, options?: __HttpHandlerOptions): Promise<GetDashboardCommandOutput>;
            getDashboard(args: GetDashboardCommandInput, cb: (err: any, data?: GetDashboardCommandOutput) => void): void;
            getDashboard(args: GetDashboardCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDashboardCommandOutput) => void): void;
            /**
                * <p>This operation returns the time series data collected by a Contributor Insights rule. The data includes the identity and number of
                * 		contributors to the log group.</p>
                * 		       <p>You can also optionally return one or more statistics about each data point in the time series. These statistics can include the following:</p>
                * 		       <ul>
                *             <li>
                * 				           <p>
                *                   <code>UniqueContributors</code> -- the number of unique contributors for each data point.</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                *                   <code>MaxContributorValue</code> -- the value of the top contributor for each data point. The identity of the
                * 					contributor might change for each data point in the graph.</p>
                * 				           <p>If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the
                * 					most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified
                * 					by the rule's <code>Value</code>, during that period.</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                *                   <code>SampleCount</code> -- the number of data points matched by the rule.</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                *                   <code>Sum</code> -- the sum of the values from all contributors during the time period represented by that data point.</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                *                   <code>Minimum</code> -- the minimum value from a single observation during the time period represented by that data point.</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                *                   <code>Maximum</code> -- the maximum value from a single observation during the time period represented by that data point.</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                *                   <code>Average</code> -- the average value from all contributors during the time period represented by that data point.</p>
                * 			         </li>
                *          </ul>
                */
            getInsightRuleReport(args: GetInsightRuleReportCommandInput, options?: __HttpHandlerOptions): Promise<GetInsightRuleReportCommandOutput>;
            getInsightRuleReport(args: GetInsightRuleReportCommandInput, cb: (err: any, data?: GetInsightRuleReportCommandOutput) => void): void;
            getInsightRuleReport(args: GetInsightRuleReportCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetInsightRuleReportCommandOutput) => void): void;
            /**
                * <p>You can use the <code>GetMetricData</code> API to retrieve CloudWatch metric values. The operation
                * 			can also include a CloudWatch Metrics Insights query, and one or more metric math functions.</p>
                * 		       <p>A <code>GetMetricData</code> operation that does not include a query can retrieve as many as 500 different
                * 			metrics in a single request, with a total of as many as 100,800 data points. You can also
                * 			optionally perform metric math expressions on the values of the returned statistics, to create
                * 			new time series that represent new insights into your data. For example, using Lambda
                * 			metrics, you could divide the Errors metric by the Invocations metric to get an error
                * 			rate time series. For more information about metric math expressions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax">Metric Math Syntax and Functions</a> in the <i>Amazon CloudWatch User
                * 					Guide</i>.</p>
                *
                *
                * 		       <p>If you include a Metrics Insights query, each <code>GetMetricData</code> operation can include only one
                * 			query. But the same <code>GetMetricData</code> operation can also retrieve other metrics. Metrics Insights queries
                * 		can query only the most recent three hours of metric data. For more information about Metrics Insights,
                * 		see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/query_with_cloudwatch-metrics-insights.html">Query your metrics with CloudWatch Metrics Insights</a>.</p>
                *
                * 		       <p>Calls to the <code>GetMetricData</code> API have a different pricing structure than
                * 			calls to <code>GetMetricStatistics</code>. For more information about pricing, see
                * 			<a href="https://aws.amazon.com/cloudwatch/pricing/">Amazon CloudWatch Pricing</a>.</p>
                *
                * 		       <p>Amazon CloudWatch retains metric data as follows:</p>
                * 		       <ul>
                *             <li>
                *                <p>Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution
                * 				metrics and are available only for custom metrics that have been defined with a <code>StorageResolution</code> of 1.</p>
                *             </li>
                *             <li>
                *                <p>Data points with a period of 60 seconds (1-minute) are available for 15 days.</p>
                *             </li>
                *             <li>
                *                <p>Data points with a period of 300 seconds (5-minute) are available for 63 days.</p>
                *             </li>
                *             <li>
                *                <p>Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).</p>
                *             </li>
                *          </ul>
                * 		       <p>Data points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect
                * 			data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available,
                * 			but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with
                * 			a resolution of 1 hour.</p>
                *
                * 		       <p>If you omit <code>Unit</code> in your request, all data that was collected with any unit is returned, along with the corresponding units that were specified
                * 			when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified.
                * 			If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.</p>
                *
                * 		       <p>
                *             <b>Using Metrics Insights queries with metric math</b>
                *          </p>
                * 		       <p>You can't mix a Metric Insights query and metric math syntax in the same expression, but
                * 			you can reference results from a Metrics Insights query within other Metric math expressions. A Metrics Insights
                * 			query without a <b>GROUP BY</b> clause returns a single time-series (TS),
                * 			and can be used as input for a metric math expression that expects a single time series. A Metrics Insights
                * 			query with a <b>GROUP BY</b> clause returns an array of time-series (TS[]),
                * 			and can be used as input for a metric math expression that expects an array of time series. </p>
                */
            getMetricData(args: GetMetricDataCommandInput, options?: __HttpHandlerOptions): Promise<GetMetricDataCommandOutput>;
            getMetricData(args: GetMetricDataCommandInput, cb: (err: any, data?: GetMetricDataCommandOutput) => void): void;
            getMetricData(args: GetMetricDataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMetricDataCommandOutput) => void): void;
            /**
                * <p>Gets statistics for the specified metric.</p>
                *
                *
                *
                * 		       <p>The maximum number of data points returned from a single call is 1,440. If
                * 			you request more than 1,440 data points, CloudWatch returns an error.
                * 			To reduce the number of data points, you can narrow the specified time range and make
                * 			multiple requests across adjacent time ranges, or you can increase the specified period.
                * 			Data points are not returned in chronological order.</p>
                *
                * 		       <p>CloudWatch aggregates data points based on the length of the period
                * 			that you specify. For example, if you request statistics with a one-hour period,
                * 			CloudWatch aggregates all data points with time stamps that fall within each
                * 			one-hour period. Therefore, the number of values aggregated by CloudWatch is larger than
                * 			the number of data points returned.</p>
                * 		       <p>CloudWatch needs raw data points to calculate percentile statistics. If you publish
                * 			data using a statistic set instead, you can only retrieve
                * 			percentile statistics for this data if one of the following conditions is true:</p>
                * 		       <ul>
                *             <li>
                *                <p>The SampleCount value of the statistic set is 1.</p>
                *             </li>
                *             <li>
                *                <p>The Min and the Max values of the statistic set are equal.</p>
                *             </li>
                *          </ul>
                * 		       <p>Percentile statistics are not available for metrics when any of the metric values are negative numbers.</p>
                * 		       <p>Amazon CloudWatch retains metric data as follows:</p>
                * 		       <ul>
                *             <li>
                *                <p>Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution
                * 				metrics and are available only for custom metrics that have been defined with a <code>StorageResolution</code> of 1.</p>
                *             </li>
                *             <li>
                *                <p>Data points with a period of 60 seconds (1-minute) are available for 15 days.</p>
                *             </li>
                *             <li>
                *                <p>Data points with a period of 300 seconds (5-minute) are available for 63 days.</p>
                *             </li>
                *             <li>
                *                <p>Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).</p>
                *             </li>
                *          </ul>
                * 		       <p>Data points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect
                * 			data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available,
                * 			but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with
                * 		a resolution of 1 hour.</p>
                * 		       <p>CloudWatch started retaining 5-minute and 1-hour metric data as of July 9, 2016.</p>
                *
                * 		       <p>For information about metrics and dimensions supported by Amazon Web Services services, see the
                * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CW_Support_For_AWS.html">Amazon CloudWatch Metrics and Dimensions Reference</a> in the
                * 			<i>Amazon CloudWatch User Guide</i>.</p>
                */
            getMetricStatistics(args: GetMetricStatisticsCommandInput, options?: __HttpHandlerOptions): Promise<GetMetricStatisticsCommandOutput>;
            getMetricStatistics(args: GetMetricStatisticsCommandInput, cb: (err: any, data?: GetMetricStatisticsCommandOutput) => void): void;
            getMetricStatistics(args: GetMetricStatisticsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMetricStatisticsCommandOutput) => void): void;
            /**
                * <p>Returns information about the metric stream that you specify.</p>
                */
            getMetricStream(args: GetMetricStreamCommandInput, options?: __HttpHandlerOptions): Promise<GetMetricStreamCommandOutput>;
            getMetricStream(args: GetMetricStreamCommandInput, cb: (err: any, data?: GetMetricStreamCommandOutput) => void): void;
            getMetricStream(args: GetMetricStreamCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMetricStreamCommandOutput) => void): void;
            /**
                * <p>You can use the <code>GetMetricWidgetImage</code> API to retrieve a snapshot graph of
                * 			one or more Amazon CloudWatch metrics as a bitmap image. You can then embed this
                * 			image into your services and products, such as wiki pages, reports, and documents.
                * 			You could also retrieve images regularly, such as every minute, and create your own
                * 			custom live dashboard.</p>
                *
                * 		       <p>The graph you retrieve can include all CloudWatch metric graph features, including metric math
                * 		and horizontal and vertical annotations.</p>
                *
                * 		       <p>There is a limit of 20 transactions per second for this API. Each <code>GetMetricWidgetImage</code> action has the following limits:</p>
                * 		       <ul>
                *             <li>
                * 				           <p>As many as 100 metrics in the graph.</p>
                * 			         </li>
                *             <li>
                * 				           <p>Up to 100 KB uncompressed payload.</p>
                * 			         </li>
                *          </ul>
                */
            getMetricWidgetImage(args: GetMetricWidgetImageCommandInput, options?: __HttpHandlerOptions): Promise<GetMetricWidgetImageCommandOutput>;
            getMetricWidgetImage(args: GetMetricWidgetImageCommandInput, cb: (err: any, data?: GetMetricWidgetImageCommandOutput) => void): void;
            getMetricWidgetImage(args: GetMetricWidgetImageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMetricWidgetImageCommandOutput) => void): void;
            /**
                * <p>Returns a list of the dashboards for your account. If you include <code>DashboardNamePrefix</code>, only
                * 			those dashboards with names starting with the prefix are listed. Otherwise, all dashboards in your account are
                * 			listed.
                * 	    </p>
                * 		       <p>
                *             <code>ListDashboards</code> returns up to 1000 results on one page. If there
                * 			are more than 1000 dashboards, you can call <code>ListDashboards</code> again and
                * 		include the value you received for <code>NextToken</code> in the first call, to receive
                * 		the next 1000 results.</p>
                */
            listDashboards(args: ListDashboardsCommandInput, options?: __HttpHandlerOptions): Promise<ListDashboardsCommandOutput>;
            listDashboards(args: ListDashboardsCommandInput, cb: (err: any, data?: ListDashboardsCommandOutput) => void): void;
            listDashboards(args: ListDashboardsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDashboardsCommandOutput) => void): void;
            /**
                * <p>List the specified metrics. You can use the returned metrics with
                * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html">GetMetricData</a> or
                * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html">GetMetricStatistics</a> to obtain statistical data.</p>
                * 		       <p>Up to 500 results are returned for any one call. To retrieve additional results,
                * 			use the returned token with subsequent calls.</p>
                * 		       <p>After you create a metric, allow up to 15 minutes before the metric appears.
                * 			You can see statistics about the metric sooner by using <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html">GetMetricData</a> or
                * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html">GetMetricStatistics</a>.</p>
                *
                * 	        <p>
                *             <code>ListMetrics</code> doesn't return information about metrics if those metrics haven't
                * 	reported data in the past two weeks. To retrieve those metrics, use
                * 		<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html">GetMetricData</a> or
                * 		<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html">GetMetricStatistics</a>.</p>
                */
            listMetrics(args: ListMetricsCommandInput, options?: __HttpHandlerOptions): Promise<ListMetricsCommandOutput>;
            listMetrics(args: ListMetricsCommandInput, cb: (err: any, data?: ListMetricsCommandOutput) => void): void;
            listMetrics(args: ListMetricsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListMetricsCommandOutput) => void): void;
            /**
                * <p>Returns a list of metric streams in this account.</p>
                */
            listMetricStreams(args: ListMetricStreamsCommandInput, options?: __HttpHandlerOptions): Promise<ListMetricStreamsCommandOutput>;
            listMetricStreams(args: ListMetricStreamsCommandInput, cb: (err: any, data?: ListMetricStreamsCommandOutput) => void): void;
            listMetricStreams(args: ListMetricStreamsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListMetricStreamsCommandOutput) => void): void;
            /**
                * <p>Displays the tags associated with a CloudWatch resource. Currently, alarms
                * 			and Contributor Insights rules support tagging.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Creates an anomaly detection model for a CloudWatch metric. You can use the model
                * 			to display a band of expected normal values when the metric is graphed.</p>
                * 		       <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Anomaly_Detection.html">CloudWatch Anomaly Detection</a>.</p>
                */
            putAnomalyDetector(args: PutAnomalyDetectorCommandInput, options?: __HttpHandlerOptions): Promise<PutAnomalyDetectorCommandOutput>;
            putAnomalyDetector(args: PutAnomalyDetectorCommandInput, cb: (err: any, data?: PutAnomalyDetectorCommandOutput) => void): void;
            putAnomalyDetector(args: PutAnomalyDetectorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutAnomalyDetectorCommandOutput) => void): void;
            /**
                * <p>Creates or updates a <i>composite alarm</i>. When you create a composite
                * 			alarm, you specify a rule expression for the alarm that takes into account the alarm
                * 			states of other alarms that you have created. The composite alarm goes into ALARM state
                * 			only if all conditions of the rule are met.</p>
                * 		       <p>The alarms specified in a composite alarm's rule expression can include metric alarms
                * 			and other composite alarms. The rule expression of a composite alarm can include as many as 100 underlying alarms.
                * 			Any single alarm can be included in the rule expressions of as many as 150 composite alarms.</p>
                * 		       <p>Using composite alarms can reduce
                * 			alarm noise. You can create multiple metric alarms,
                * 			and also create a composite alarm and
                * 			set up alerts only
                * 			for the composite alarm. For example, you could create a composite
                * 			alarm that goes into ALARM state only when more than one of the underlying metric alarms
                * 			are in ALARM state.</p>
                * 		       <p>Currently, the only alarm actions that can be taken by composite alarms are notifying
                * 			SNS topics.</p>
                * 		       <note>
                *             <p>It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and
                * 			composite alarm B also depends on composite alarm A. In this scenario, you can't delete any composite alarm that is part of the cycle
                * 			because there is always still a composite alarm that depends on that alarm that you want to delete.</p>
                * 			         <p>To get out of such a situation, you must
                * 			break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest
                * 			change to make to break a cycle is to change the <code>AlarmRule</code> of one of the alarms to <code>False</code>. </p>
                * 			         <p>Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path.
                * 		</p>
                *          </note>
                * 		       <p>When this operation creates an alarm, the alarm state is immediately set to
                * 				<code>INSUFFICIENT_DATA</code>. The alarm is then evaluated and its state is set
                * 			appropriately. Any actions associated with the new state are then executed. For a
                * 			composite alarm, this initial time after creation is the only time that
                * 			the
                * 			alarm can be in <code>INSUFFICIENT_DATA</code> state.</p>
                * 		       <p>When you update an existing alarm, its state is left unchanged, but the update
                * 			completely overwrites the previous configuration of the alarm.</p>
                *
                * 		       <p>To use this operation, you must be signed on with
                * 			the <code>cloudwatch:PutCompositeAlarm</code> permission that is scoped to <code>*</code>. You can't create a
                * 			composite alarms if your <code>cloudwatch:PutCompositeAlarm</code> permission has a narrower scope.</p>
                *
                * 		       <p>If you are an IAM user, you must have <code>iam:CreateServiceLinkedRole</code> to create
                * 			a composite alarm that has Systems Manager OpsItem actions.</p>
                */
            putCompositeAlarm(args: PutCompositeAlarmCommandInput, options?: __HttpHandlerOptions): Promise<PutCompositeAlarmCommandOutput>;
            putCompositeAlarm(args: PutCompositeAlarmCommandInput, cb: (err: any, data?: PutCompositeAlarmCommandOutput) => void): void;
            putCompositeAlarm(args: PutCompositeAlarmCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutCompositeAlarmCommandOutput) => void): void;
            /**
                * <p>Creates a dashboard if it does not already exist, or updates an existing dashboard. If you update a dashboard,
                * 		the entire contents are replaced with what you specify here.</p>
                * 		       <p>All dashboards in your account are global, not region-specific.</p>
                * 		       <p>A simple way to create a dashboard using <code>PutDashboard</code> is to copy an
                * 			existing dashboard. To copy an existing dashboard using the console, you can load the dashboard
                * 			and then use the View/edit source command in the Actions menu to display the JSON  block
                * 			for that dashboard. Another way to copy a dashboard is to
                * 			use <code>GetDashboard</code>, and then use the data returned
                * 			within <code>DashboardBody</code> as the template for the new dashboard when you call <code>PutDashboard</code>.</p>
                * 		       <p>When you create a dashboard with <code>PutDashboard</code>, a good practice is to
                * 			add a text widget at the top of the dashboard with a message that the dashboard was created by script and should
                * 		not be changed in the console. This message could also point console users to the location
                * 		of the <code>DashboardBody</code> script or the CloudFormation template used to create the
                * 		dashboard.</p>
                */
            putDashboard(args: PutDashboardCommandInput, options?: __HttpHandlerOptions): Promise<PutDashboardCommandOutput>;
            putDashboard(args: PutDashboardCommandInput, cb: (err: any, data?: PutDashboardCommandOutput) => void): void;
            putDashboard(args: PutDashboardCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutDashboardCommandOutput) => void): void;
            /**
                * <p>Creates a Contributor Insights rule. Rules evaluate log events in a
                * 		CloudWatch Logs log group, enabling you to find contributor data for the log events in that log group. For more information,
                * 		see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html">Using Contributor Insights to Analyze High-Cardinality Data</a>.</p>
                * 		       <p>If you create a rule, delete it, and then re-create it with the same name, historical data from the first time
                * 			the rule was created might not be available.</p>
                */
            putInsightRule(args: PutInsightRuleCommandInput, options?: __HttpHandlerOptions): Promise<PutInsightRuleCommandOutput>;
            putInsightRule(args: PutInsightRuleCommandInput, cb: (err: any, data?: PutInsightRuleCommandOutput) => void): void;
            putInsightRule(args: PutInsightRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutInsightRuleCommandOutput) => void): void;
            /**
                * <p>Creates or updates an alarm and associates it with the specified metric, metric math expression,
                * 			or anomaly detection model.</p>
                *
                *
                * 		       <p>Alarms based on anomaly detection models cannot have Auto Scaling actions.</p>
                * 		       <p>When this operation creates an alarm, the alarm state is immediately set to
                * 			<code>INSUFFICIENT_DATA</code>. The alarm is then evaluated and its state is set
                * 			appropriately. Any actions associated with the new state are then executed.</p>
                * 		       <p>When you update an existing alarm, its state is left unchanged, but the
                * 			update completely overwrites the previous configuration of the alarm.</p>
                *
                * 		       <p>If you are an IAM user, you must have
                * 			Amazon EC2 permissions for some alarm operations:</p>
                * 		       <ul>
                *             <li>
                * 				           <p>The <code>iam:CreateServiceLinkedRole</code> for all alarms with EC2 actions</p>
                *
                * 			         </li>
                *             <li>
                *
                * 				           <p>The <code>iam:CreateServiceLinkedRole</code> to create an alarm
                * 					with Systems Manager OpsItem actions.</p>
                * 			         </li>
                *          </ul>
                *
                *
                *
                *
                *
                *
                * 		       <p>The first time you create an alarm in the
                * 			Amazon Web Services Management Console, the CLI, or by using the PutMetricAlarm API, CloudWatch
                * 			creates the necessary service-linked role for you. The service-linked roles
                * 			are called <code>AWSServiceRoleForCloudWatchEvents</code> and
                * 			<code>AWSServiceRoleForCloudWatchAlarms_ActionSSM</code>.
                * 			For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Amazon Web Services service-linked role</a>.</p>
                *
                * 		       <p>
                *             <b>Cross-account alarms</b>
                *          </p>
                *
                * 		       <p>You can set an alarm on metrics in the current account, or in another
                * 			account. To create a cross-account alarm that watches a metric in a different account, you must have completed the following
                * 			pre-requisites:</p>
                * 		       <ul>
                *             <li>
                *                <p>The account where the metrics are located (the <i>sharing account</i>) must
                * 				already have a sharing role named <b>CloudWatch-CrossAccountSharingRole</b>. If it does not already
                * 				have this role, you must create it using the instructions in <b>Set up a
                * 					sharing account</b> in <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Cross-Account-Cross-Region.html#enable-cross-account-cross-Region">
                * 					Cross-account cross-Region CloudWatch console</a>. The policy for that
                * 				role must grant access
                * 				to the ID of the account where you are creating the alarm.
                * 			</p>
                *             </li>
                *             <li>
                *                <p>The account where you are creating the alarm (the <i>monitoring account</i>) must
                * 				already have a service-linked role named
                * 				<b>AWSServiceRoleForCloudWatchCrossAccount</b> to allow
                * 				CloudWatch to assume the sharing role in the sharing account. If it does not, you must create it following the directions in <b>Set up a
                * 					monitoring account</b> in <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Cross-Account-Cross-Region.html#enable-cross-account-cross-Region">
                * 						Cross-account cross-Region CloudWatch console</a>.</p>
                *             </li>
                *          </ul>
                */
            putMetricAlarm(args: PutMetricAlarmCommandInput, options?: __HttpHandlerOptions): Promise<PutMetricAlarmCommandOutput>;
            putMetricAlarm(args: PutMetricAlarmCommandInput, cb: (err: any, data?: PutMetricAlarmCommandOutput) => void): void;
            putMetricAlarm(args: PutMetricAlarmCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutMetricAlarmCommandOutput) => void): void;
            /**
                * <p>Publishes metric data points to Amazon CloudWatch. CloudWatch associates
                * 			the data points with the specified metric. If the specified metric does not exist,
                * 			CloudWatch creates the metric. When CloudWatch creates a metric, it can
                * 			take up to fifteen minutes for the metric to appear in calls to <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_ListMetrics.html">ListMetrics</a>.</p>
                *
                * 		       <p>You can publish either individual data points in the <code>Value</code> field, or
                * 		arrays of values and the number of times each value occurred during the period by using the
                * 		<code>Values</code> and <code>Counts</code> fields in the <code>MetricDatum</code> structure. Using
                * 		the <code>Values</code> and <code>Counts</code> method enables you to publish up to 150 values per metric
                * 			with one <code>PutMetricData</code> request, and
                * 		supports retrieving percentile statistics on this data.</p>
                * 		       <p>Each <code>PutMetricData</code> request is limited to 40 KB in size for HTTP POST requests. You can
                * 			send a payload compressed by gzip. Each request
                * 		is also limited to no more than 20 different metrics.</p>
                * 		       <p>Although the <code>Value</code> parameter accepts numbers of type
                * 			<code>Double</code>, CloudWatch rejects values that are either too small
                * 			or too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity,
                * 			-Infinity) are not supported.</p>
                * 		       <p>You can use up to 10 dimensions per metric to further clarify what data the metric collects. Each dimension
                * 			consists of a Name and Value pair. For more information about specifying dimensions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html">Publishing Metrics</a> in the
                * 			<i>Amazon CloudWatch User Guide</i>.</p>
                *
                * 		       <p>You specify the time stamp to be associated with each data point. You can specify
                * 		time stamps that are as much as two weeks before the current date, and as much as 2 hours after
                * 		the current day and time.</p>
                * 		       <p>Data points with time stamps from 24 hours ago or longer can take at least 48
                * 			hours to become available for <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html">GetMetricData</a> or
                * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html">GetMetricStatistics</a> from the time they
                * 			are submitted. Data points with time stamps between 3 and 24 hours ago can take as much as 2 hours to become available
                * 			for for <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html">GetMetricData</a> or
                * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html">GetMetricStatistics</a>.</p>
                * 		       <p>CloudWatch needs raw data points to calculate percentile statistics. If you publish
                * 			data using a statistic set instead, you can only retrieve
                * 			percentile statistics for this data if one of the following conditions is true:</p>
                * 			      <ul>
                *             <li>
                *                <p>The <code>SampleCount</code> value of the statistic set is 1 and <code>Min</code>,
                * 					<code>Max</code>, and <code>Sum</code> are all equal.</p>
                *             </li>
                *             <li>
                *                <p>The <code>Min</code> and
                * 					<code>Max</code> are equal, and <code>Sum</code> is equal to <code>Min</code>
                * 					multiplied by <code>SampleCount</code>.</p>
                *             </li>
                *          </ul>
                */
            putMetricData(args: PutMetricDataCommandInput, options?: __HttpHandlerOptions): Promise<PutMetricDataCommandOutput>;
            putMetricData(args: PutMetricDataCommandInput, cb: (err: any, data?: PutMetricDataCommandOutput) => void): void;
            putMetricData(args: PutMetricDataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutMetricDataCommandOutput) => void): void;
            /**
                * <p>Creates or updates a metric stream. Metric streams can automatically stream CloudWatch metrics
                * 			to Amazon Web Services destinations including
                * 			Amazon S3 and to many third-party solutions.</p>
                * 		       <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Metric-Streams.html">
                * 		Using Metric Streams</a>.</p>
                * 		       <p>To create a metric stream,
                * 			you must be logged on to an account that has the <code>iam:PassRole</code> permission
                * 			and either the <code>CloudWatchFullAccess</code>
                * 		policy or the <code>cloudwatch:PutMetricStream</code>
                * 		permission.</p>
                * 		       <p>When you create or update a metric stream, you choose one of the following:</p>
                * 		       <ul>
                *             <li>
                *                <p>Stream metrics from all metric namespaces in the account.</p>
                *             </li>
                *             <li>
                *                <p>Stream metrics from all metric namespaces in the account, except
                * 				for the namespaces that you list in <code>ExcludeFilters</code>.</p>
                *             </li>
                *             <li>
                *                <p>Stream metrics from only the metric namespaces that you list in
                * 				<code>IncludeFilters</code>.</p>
                *             </li>
                *          </ul>
                *
                * 		       <p>By default, a metric stream always sends the <code>MAX</code>, <code>MIN</code>, <code>SUM</code>,
                * 			and <code>SAMPLECOUNT</code> statistics for each metric that is streamed. You can use the
                * 			<code>StatisticsConfigurations</code> parameter to have
                * 			the metric stream also send additional statistics in the stream. Streaming additional statistics incurs
                * 			additional costs. For more information, see <a href="https://aws.amazon.com/cloudwatch/pricing/">Amazon CloudWatch Pricing</a>. </p>
                *
                * 		       <p>When you use <code>PutMetricStream</code> to create a new metric stream, the stream
                * 		is created in the <code>running</code> state. If you use it to update an existing stream,
                * 		the state of the stream is not changed.</p>
                */
            putMetricStream(args: PutMetricStreamCommandInput, options?: __HttpHandlerOptions): Promise<PutMetricStreamCommandOutput>;
            putMetricStream(args: PutMetricStreamCommandInput, cb: (err: any, data?: PutMetricStreamCommandOutput) => void): void;
            putMetricStream(args: PutMetricStreamCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutMetricStreamCommandOutput) => void): void;
            /**
                * <p>Temporarily sets the state of an alarm for testing purposes. When the updated
                * 			state differs from the previous value, the action configured for
                * 			the appropriate state is invoked. For example, if your alarm is configured to send an
                * 			Amazon SNS message when an alarm is triggered, temporarily changing the alarm state to
                * 			<code>ALARM</code> sends an SNS message.</p>
                * 		       <p>Metric alarms
                * 			returns to their actual state quickly, often within seconds. Because the metric alarm state change
                * 			happens quickly, it is typically only visible in the alarm's <b>History</b> tab in the Amazon CloudWatch console or through
                * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeAlarmHistory.html">DescribeAlarmHistory</a>.</p>
                * 		       <p>If you use <code>SetAlarmState</code> on a composite alarm, the composite alarm is not guaranteed to return
                * 			to its actual state. It
                * 			returns to its actual state only once any of its children alarms change state. It is also
                * 			reevaluated if you update its
                * 			configuration.</p>
                * 		       <p>If an alarm triggers EC2 Auto Scaling policies or application Auto Scaling policies, you must include
                * 		information in the <code>StateReasonData</code> parameter to enable the policy to take the correct action.</p>
                */
            setAlarmState(args: SetAlarmStateCommandInput, options?: __HttpHandlerOptions): Promise<SetAlarmStateCommandOutput>;
            setAlarmState(args: SetAlarmStateCommandInput, cb: (err: any, data?: SetAlarmStateCommandOutput) => void): void;
            setAlarmState(args: SetAlarmStateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetAlarmStateCommandOutput) => void): void;
            /**
                * <p>Starts the streaming of metrics for one or more of your metric streams.</p>
                */
            startMetricStreams(args: StartMetricStreamsCommandInput, options?: __HttpHandlerOptions): Promise<StartMetricStreamsCommandOutput>;
            startMetricStreams(args: StartMetricStreamsCommandInput, cb: (err: any, data?: StartMetricStreamsCommandOutput) => void): void;
            startMetricStreams(args: StartMetricStreamsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartMetricStreamsCommandOutput) => void): void;
            /**
                * <p>Stops the streaming of metrics for one or more of your metric streams.</p>
                */
            stopMetricStreams(args: StopMetricStreamsCommandInput, options?: __HttpHandlerOptions): Promise<StopMetricStreamsCommandOutput>;
            stopMetricStreams(args: StopMetricStreamsCommandInput, cb: (err: any, data?: StopMetricStreamsCommandOutput) => void): void;
            stopMetricStreams(args: StopMetricStreamsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopMetricStreamsCommandOutput) => void): void;
            /**
                * <p>Assigns one or more tags (key-value pairs) to the specified CloudWatch resource. Currently, the only CloudWatch resources that
                * 			can be tagged are alarms and Contributor Insights rules.</p>
                * 		       <p>Tags can help you organize and categorize your resources. You can also use them to scope user
                * 			permissions by granting a user
                * 			permission to access or change only resources with certain tag values.</p>
                * 		       <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p>
                * 		       <p>You can use the <code>TagResource</code> action with an alarm that already has tags. If you specify a new tag key for the alarm,
                * 			this tag is appended to the list of tags associated
                * 			with the alarm. If you specify a tag key that is already associated with the alarm, the new tag value that you specify replaces
                * 			the previous value for that tag.</p>
                * 		       <p>You can associate as many as 50 tags with a CloudWatch resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes one or more tags from the specified resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { DeleteAlarmsCommandInput, DeleteAlarmsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DeleteAlarmsCommand";
    import { DeleteAnomalyDetectorCommandInput, DeleteAnomalyDetectorCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DeleteAnomalyDetectorCommand";
    import { DeleteDashboardsCommandInput, DeleteDashboardsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DeleteDashboardsCommand";
    import { DeleteInsightRulesCommandInput, DeleteInsightRulesCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DeleteInsightRulesCommand";
    import { DeleteMetricStreamCommandInput, DeleteMetricStreamCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DeleteMetricStreamCommand";
    import { DescribeAlarmHistoryCommandInput, DescribeAlarmHistoryCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DescribeAlarmHistoryCommand";
    import { DescribeAlarmsCommandInput, DescribeAlarmsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DescribeAlarmsCommand";
    import { DescribeAlarmsForMetricCommandInput, DescribeAlarmsForMetricCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DescribeAlarmsForMetricCommand";
    import { DescribeAnomalyDetectorsCommandInput, DescribeAnomalyDetectorsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DescribeAnomalyDetectorsCommand";
    import { DescribeInsightRulesCommandInput, DescribeInsightRulesCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DescribeInsightRulesCommand";
    import { DisableAlarmActionsCommandInput, DisableAlarmActionsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DisableAlarmActionsCommand";
    import { DisableInsightRulesCommandInput, DisableInsightRulesCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DisableInsightRulesCommand";
    import { EnableAlarmActionsCommandInput, EnableAlarmActionsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/EnableAlarmActionsCommand";
    import { EnableInsightRulesCommandInput, EnableInsightRulesCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/EnableInsightRulesCommand";
    import { GetDashboardCommandInput, GetDashboardCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/GetDashboardCommand";
    import { GetInsightRuleReportCommandInput, GetInsightRuleReportCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/GetInsightRuleReportCommand";
    import { GetMetricDataCommandInput, GetMetricDataCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/GetMetricDataCommand";
    import { GetMetricStatisticsCommandInput, GetMetricStatisticsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/GetMetricStatisticsCommand";
    import { GetMetricStreamCommandInput, GetMetricStreamCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/GetMetricStreamCommand";
    import { GetMetricWidgetImageCommandInput, GetMetricWidgetImageCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/GetMetricWidgetImageCommand";
    import { ListDashboardsCommandInput, ListDashboardsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/ListDashboardsCommand";
    import { ListMetricsCommandInput, ListMetricsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/ListMetricsCommand";
    import { ListMetricStreamsCommandInput, ListMetricStreamsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/ListMetricStreamsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/ListTagsForResourceCommand";
    import { PutAnomalyDetectorCommandInput, PutAnomalyDetectorCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/PutAnomalyDetectorCommand";
    import { PutCompositeAlarmCommandInput, PutCompositeAlarmCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/PutCompositeAlarmCommand";
    import { PutDashboardCommandInput, PutDashboardCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/PutDashboardCommand";
    import { PutInsightRuleCommandInput, PutInsightRuleCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/PutInsightRuleCommand";
    import { PutMetricAlarmCommandInput, PutMetricAlarmCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/PutMetricAlarmCommand";
    import { PutMetricDataCommandInput, PutMetricDataCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/PutMetricDataCommand";
    import { PutMetricStreamCommandInput, PutMetricStreamCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/PutMetricStreamCommand";
    import { SetAlarmStateCommandInput, SetAlarmStateCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/SetAlarmStateCommand";
    import { StartMetricStreamsCommandInput, StartMetricStreamsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/StartMetricStreamsCommand";
    import { StopMetricStreamsCommandInput, StopMetricStreamsCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/StopMetricStreamsCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/UntagResourceCommand";
    export type ServiceInputTypes = DeleteAlarmsCommandInput | DeleteAnomalyDetectorCommandInput | DeleteDashboardsCommandInput | DeleteInsightRulesCommandInput | DeleteMetricStreamCommandInput | DescribeAlarmHistoryCommandInput | DescribeAlarmsCommandInput | DescribeAlarmsForMetricCommandInput | DescribeAnomalyDetectorsCommandInput | DescribeInsightRulesCommandInput | DisableAlarmActionsCommandInput | DisableInsightRulesCommandInput | EnableAlarmActionsCommandInput | EnableInsightRulesCommandInput | GetDashboardCommandInput | GetInsightRuleReportCommandInput | GetMetricDataCommandInput | GetMetricStatisticsCommandInput | GetMetricStreamCommandInput | GetMetricWidgetImageCommandInput | ListDashboardsCommandInput | ListMetricStreamsCommandInput | ListMetricsCommandInput | ListTagsForResourceCommandInput | PutAnomalyDetectorCommandInput | PutCompositeAlarmCommandInput | PutDashboardCommandInput | PutInsightRuleCommandInput | PutMetricAlarmCommandInput | PutMetricDataCommandInput | PutMetricStreamCommandInput | SetAlarmStateCommandInput | StartMetricStreamsCommandInput | StopMetricStreamsCommandInput | TagResourceCommandInput | UntagResourceCommandInput;
    export type ServiceOutputTypes = DeleteAlarmsCommandOutput | DeleteAnomalyDetectorCommandOutput | DeleteDashboardsCommandOutput | DeleteInsightRulesCommandOutput | DeleteMetricStreamCommandOutput | DescribeAlarmHistoryCommandOutput | DescribeAlarmsCommandOutput | DescribeAlarmsForMetricCommandOutput | DescribeAnomalyDetectorsCommandOutput | DescribeInsightRulesCommandOutput | DisableAlarmActionsCommandOutput | DisableInsightRulesCommandOutput | EnableAlarmActionsCommandOutput | EnableInsightRulesCommandOutput | GetDashboardCommandOutput | GetInsightRuleReportCommandOutput | GetMetricDataCommandOutput | GetMetricStatisticsCommandOutput | GetMetricStreamCommandOutput | GetMetricWidgetImageCommandOutput | ListDashboardsCommandOutput | ListMetricStreamsCommandOutput | ListMetricsCommandOutput | ListTagsForResourceCommandOutput | PutAnomalyDetectorCommandOutput | PutCompositeAlarmCommandOutput | PutDashboardCommandOutput | PutInsightRuleCommandOutput | PutMetricAlarmCommandOutput | PutMetricDataCommandOutput | PutMetricStreamCommandOutput | SetAlarmStateCommandOutput | StartMetricStreamsCommandOutput | StopMetricStreamsCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type CloudWatchClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of CloudWatchClient class constructor that set the region, credentials and other options.
        */
    export interface CloudWatchClientConfig extends CloudWatchClientConfigType {
    }
    type CloudWatchClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of CloudWatchClient class. This is resolved and normalized from the {@link CloudWatchClientConfig | constructor configuration interface}.
        */
    export interface CloudWatchClientResolvedConfig extends CloudWatchClientResolvedConfigType {
    }
    /**
        * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the
        * 			applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track
        * 			metrics, which are the variables you want to measure for your resources and
        * 			applications.</p>
        *
        * 		       <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules
        * 			that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2
        * 			instances. Then, use this data to determine whether you should launch
        * 			additional instances to handle increased load. You can also use this data to stop
        * 			under-used instances to save
        * 			money.</p>
        *
        * 		       <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor
        * 			your own custom metrics. With CloudWatch, you gain system-wide visibility into resource
        * 			utilization, application performance, and operational health.</p>
        */
    export class CloudWatchClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, CloudWatchClientResolvedConfig> {
            /**
                * The resolved configuration of CloudWatchClient class. This is resolved and normalized from the {@link CloudWatchClientConfig | constructor configuration interface}.
                */
            readonly config: CloudWatchClientResolvedConfig;
            constructor(configuration: CloudWatchClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DeleteAlarmsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { DeleteAlarmsInput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface DeleteAlarmsCommandInput extends DeleteAlarmsInput {
    }
    export interface DeleteAlarmsCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified alarms. You can delete up to 100 alarms in one operation. However, this total can include no more
        * 			than one composite alarm. For example, you could delete 99 metric alarms and one composite alarms with one operation, but you can't
        * 			delete two composite alarms with one operation.</p>
        * 		       <p>
        * 			In the event of an error, no alarms are
        * 			deleted.</p>
        * 		       <note>
        *             <p>It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and
        * 			composite alarm B also depends on composite alarm A. In this scenario, you can't delete any composite alarm that is part of the cycle
        * 			because there is always still a composite alarm that depends on that alarm that you want to delete.</p>
        * 			         <p>To get out of such a situation, you must
        * 				break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest
        * 				change to make to break a cycle is to change the <code>AlarmRule</code> of one of the alarms to <code>False</code>. </p>
        * 			         <p>Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path.
        * 			</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, DeleteAlarmsCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, DeleteAlarmsCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new DeleteAlarmsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAlarmsCommandInput} for command's `input` shape.
        * @see {@link DeleteAlarmsCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class DeleteAlarmsCommand extends $Command<DeleteAlarmsCommandInput, DeleteAlarmsCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: DeleteAlarmsCommandInput;
            constructor(input: DeleteAlarmsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAlarmsCommandInput, DeleteAlarmsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DeleteAnomalyDetectorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { DeleteAnomalyDetectorInput, DeleteAnomalyDetectorOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface DeleteAnomalyDetectorCommandInput extends DeleteAnomalyDetectorInput {
    }
    export interface DeleteAnomalyDetectorCommandOutput extends DeleteAnomalyDetectorOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified anomaly detection model from your account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, DeleteAnomalyDetectorCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, DeleteAnomalyDetectorCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new DeleteAnomalyDetectorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAnomalyDetectorCommandInput} for command's `input` shape.
        * @see {@link DeleteAnomalyDetectorCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class DeleteAnomalyDetectorCommand extends $Command<DeleteAnomalyDetectorCommandInput, DeleteAnomalyDetectorCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: DeleteAnomalyDetectorCommandInput;
            constructor(input: DeleteAnomalyDetectorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAnomalyDetectorCommandInput, DeleteAnomalyDetectorCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DeleteDashboardsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { DeleteDashboardsInput, DeleteDashboardsOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface DeleteDashboardsCommandInput extends DeleteDashboardsInput {
    }
    export interface DeleteDashboardsCommandOutput extends DeleteDashboardsOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes all dashboards that you specify. You
        * 			can specify up to 100 dashboards to delete. If there is an error during this call, no dashboards are
        * 			deleted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, DeleteDashboardsCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, DeleteDashboardsCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new DeleteDashboardsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDashboardsCommandInput} for command's `input` shape.
        * @see {@link DeleteDashboardsCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class DeleteDashboardsCommand extends $Command<DeleteDashboardsCommandInput, DeleteDashboardsCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: DeleteDashboardsCommandInput;
            constructor(input: DeleteDashboardsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDashboardsCommandInput, DeleteDashboardsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DeleteInsightRulesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { DeleteInsightRulesInput, DeleteInsightRulesOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface DeleteInsightRulesCommandInput extends DeleteInsightRulesInput {
    }
    export interface DeleteInsightRulesCommandOutput extends DeleteInsightRulesOutput, __MetadataBearer {
    }
    /**
        * <p>Permanently deletes the specified Contributor Insights rules.</p>
        * 		       <p>If you create a rule, delete it, and then re-create it with the same name, historical data from the first time
        * 			the rule was created might
        * 			not be available.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, DeleteInsightRulesCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, DeleteInsightRulesCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new DeleteInsightRulesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteInsightRulesCommandInput} for command's `input` shape.
        * @see {@link DeleteInsightRulesCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class DeleteInsightRulesCommand extends $Command<DeleteInsightRulesCommandInput, DeleteInsightRulesCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: DeleteInsightRulesCommandInput;
            constructor(input: DeleteInsightRulesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteInsightRulesCommandInput, DeleteInsightRulesCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DeleteMetricStreamCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { DeleteMetricStreamInput, DeleteMetricStreamOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface DeleteMetricStreamCommandInput extends DeleteMetricStreamInput {
    }
    export interface DeleteMetricStreamCommandOutput extends DeleteMetricStreamOutput, __MetadataBearer {
    }
    /**
        * <p>Permanently deletes the metric stream that you specify.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, DeleteMetricStreamCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, DeleteMetricStreamCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new DeleteMetricStreamCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteMetricStreamCommandInput} for command's `input` shape.
        * @see {@link DeleteMetricStreamCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class DeleteMetricStreamCommand extends $Command<DeleteMetricStreamCommandInput, DeleteMetricStreamCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: DeleteMetricStreamCommandInput;
            constructor(input: DeleteMetricStreamCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteMetricStreamCommandInput, DeleteMetricStreamCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DescribeAlarmHistoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { DescribeAlarmHistoryInput, DescribeAlarmHistoryOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface DescribeAlarmHistoryCommandInput extends DescribeAlarmHistoryInput {
    }
    export interface DescribeAlarmHistoryCommandOutput extends DescribeAlarmHistoryOutput, __MetadataBearer {
    }
    /**
        * <p>Retrieves the history for the specified alarm. You can filter the results by date range or item type.
        * 			If an alarm name is not specified, the histories for either all metric alarms or all composite alarms are returned.</p>
        * 		       <p>CloudWatch retains the history of an alarm even if you delete the alarm.</p>
        * 		       <p>To use this operation and return information about a composite alarm, you must be signed on with
        * 			the <code>cloudwatch:DescribeAlarmHistory</code> permission that is scoped to <code>*</code>. You can't return information
        * 			about composite alarms if your <code>cloudwatch:DescribeAlarmHistory</code> permission has a narrower scope.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, DescribeAlarmHistoryCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, DescribeAlarmHistoryCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new DescribeAlarmHistoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAlarmHistoryCommandInput} for command's `input` shape.
        * @see {@link DescribeAlarmHistoryCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class DescribeAlarmHistoryCommand extends $Command<DescribeAlarmHistoryCommandInput, DescribeAlarmHistoryCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: DescribeAlarmHistoryCommandInput;
            constructor(input: DescribeAlarmHistoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAlarmHistoryCommandInput, DescribeAlarmHistoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DescribeAlarmsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { DescribeAlarmsInput, DescribeAlarmsOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface DescribeAlarmsCommandInput extends DescribeAlarmsInput {
    }
    export interface DescribeAlarmsCommandOutput extends DescribeAlarmsOutput, __MetadataBearer {
    }
    /**
        * <p>Retrieves the specified alarms. You can filter the results by specifying a prefix for the alarm
        * 			name, the alarm state, or a prefix for any action.</p>
        * 		       <p>To use this operation and return information about composite alarms, you must be signed on with
        * 		the <code>cloudwatch:DescribeAlarms</code> permission that is scoped to <code>*</code>. You can't return information
        * 			about composite alarms if your <code>cloudwatch:DescribeAlarms</code> permission has a narrower scope.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, DescribeAlarmsCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, DescribeAlarmsCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new DescribeAlarmsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAlarmsCommandInput} for command's `input` shape.
        * @see {@link DescribeAlarmsCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class DescribeAlarmsCommand extends $Command<DescribeAlarmsCommandInput, DescribeAlarmsCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: DescribeAlarmsCommandInput;
            constructor(input: DescribeAlarmsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAlarmsCommandInput, DescribeAlarmsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DescribeAlarmsForMetricCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { DescribeAlarmsForMetricInput, DescribeAlarmsForMetricOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface DescribeAlarmsForMetricCommandInput extends DescribeAlarmsForMetricInput {
    }
    export interface DescribeAlarmsForMetricCommandOutput extends DescribeAlarmsForMetricOutput, __MetadataBearer {
    }
    /**
        * <p>Retrieves the alarms for the specified metric. To
        * 			filter the results, specify a statistic, period, or unit.</p>
        * 		       <p>This operation retrieves only standard alarms that are based on
        * 		the specified metric. It does not return alarms based on math expressions that
        * 		use the specified metric, or composite alarms that use the specified metric.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, DescribeAlarmsForMetricCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, DescribeAlarmsForMetricCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new DescribeAlarmsForMetricCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAlarmsForMetricCommandInput} for command's `input` shape.
        * @see {@link DescribeAlarmsForMetricCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class DescribeAlarmsForMetricCommand extends $Command<DescribeAlarmsForMetricCommandInput, DescribeAlarmsForMetricCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: DescribeAlarmsForMetricCommandInput;
            constructor(input: DescribeAlarmsForMetricCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAlarmsForMetricCommandInput, DescribeAlarmsForMetricCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DescribeAnomalyDetectorsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { DescribeAnomalyDetectorsInput, DescribeAnomalyDetectorsOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface DescribeAnomalyDetectorsCommandInput extends DescribeAnomalyDetectorsInput {
    }
    export interface DescribeAnomalyDetectorsCommandOutput extends DescribeAnomalyDetectorsOutput, __MetadataBearer {
    }
    /**
        * <p>Lists the anomaly detection models that you have created in your account.
        * 			For single metric anomaly detectors,
        * 			you can list all of the models in your account or filter the results
        * 			to only the models that are related to a certain namespace, metric name, or metric dimension.
        * 			For metric math anomaly detectors,
        * 			you can list them by adding <code>METRIC_MATH</code> to the <code>AnomalyDetectorTypes</code> array.
        * 			This will return all metric math anomaly detectors in your account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, DescribeAnomalyDetectorsCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, DescribeAnomalyDetectorsCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new DescribeAnomalyDetectorsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAnomalyDetectorsCommandInput} for command's `input` shape.
        * @see {@link DescribeAnomalyDetectorsCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class DescribeAnomalyDetectorsCommand extends $Command<DescribeAnomalyDetectorsCommandInput, DescribeAnomalyDetectorsCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: DescribeAnomalyDetectorsCommandInput;
            constructor(input: DescribeAnomalyDetectorsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAnomalyDetectorsCommandInput, DescribeAnomalyDetectorsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DescribeInsightRulesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { DescribeInsightRulesInput, DescribeInsightRulesOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface DescribeInsightRulesCommandInput extends DescribeInsightRulesInput {
    }
    export interface DescribeInsightRulesCommandOutput extends DescribeInsightRulesOutput, __MetadataBearer {
    }
    /**
        * <p>Returns a list of all the Contributor Insights rules in your account.</p>
        *
        * 		       <p>For more information about Contributor Insights, see
        * 		<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html">Using Contributor Insights to Analyze High-Cardinality Data</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, DescribeInsightRulesCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, DescribeInsightRulesCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new DescribeInsightRulesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeInsightRulesCommandInput} for command's `input` shape.
        * @see {@link DescribeInsightRulesCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class DescribeInsightRulesCommand extends $Command<DescribeInsightRulesCommandInput, DescribeInsightRulesCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: DescribeInsightRulesCommandInput;
            constructor(input: DescribeInsightRulesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeInsightRulesCommandInput, DescribeInsightRulesCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DisableAlarmActionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { DisableAlarmActionsInput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface DisableAlarmActionsCommandInput extends DisableAlarmActionsInput {
    }
    export interface DisableAlarmActionsCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Disables the actions for the specified alarms. When an alarm's actions are disabled, the
        * 			alarm actions do not execute when the alarm state changes.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, DisableAlarmActionsCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, DisableAlarmActionsCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new DisableAlarmActionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisableAlarmActionsCommandInput} for command's `input` shape.
        * @see {@link DisableAlarmActionsCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class DisableAlarmActionsCommand extends $Command<DisableAlarmActionsCommandInput, DisableAlarmActionsCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: DisableAlarmActionsCommandInput;
            constructor(input: DisableAlarmActionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisableAlarmActionsCommandInput, DisableAlarmActionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/DisableInsightRulesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { DisableInsightRulesInput, DisableInsightRulesOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface DisableInsightRulesCommandInput extends DisableInsightRulesInput {
    }
    export interface DisableInsightRulesCommandOutput extends DisableInsightRulesOutput, __MetadataBearer {
    }
    /**
        * <p>Disables the specified Contributor Insights rules. When rules are disabled, they do not analyze log groups and do
        * 		not incur costs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, DisableInsightRulesCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, DisableInsightRulesCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new DisableInsightRulesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisableInsightRulesCommandInput} for command's `input` shape.
        * @see {@link DisableInsightRulesCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class DisableInsightRulesCommand extends $Command<DisableInsightRulesCommandInput, DisableInsightRulesCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: DisableInsightRulesCommandInput;
            constructor(input: DisableInsightRulesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisableInsightRulesCommandInput, DisableInsightRulesCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/EnableAlarmActionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { EnableAlarmActionsInput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface EnableAlarmActionsCommandInput extends EnableAlarmActionsInput {
    }
    export interface EnableAlarmActionsCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Enables the actions for the specified alarms.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, EnableAlarmActionsCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, EnableAlarmActionsCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new EnableAlarmActionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link EnableAlarmActionsCommandInput} for command's `input` shape.
        * @see {@link EnableAlarmActionsCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class EnableAlarmActionsCommand extends $Command<EnableAlarmActionsCommandInput, EnableAlarmActionsCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: EnableAlarmActionsCommandInput;
            constructor(input: EnableAlarmActionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<EnableAlarmActionsCommandInput, EnableAlarmActionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/EnableInsightRulesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { EnableInsightRulesInput, EnableInsightRulesOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface EnableInsightRulesCommandInput extends EnableInsightRulesInput {
    }
    export interface EnableInsightRulesCommandOutput extends EnableInsightRulesOutput, __MetadataBearer {
    }
    /**
        * <p>Enables the specified Contributor Insights rules. When rules are enabled, they immediately begin analyzing log data.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, EnableInsightRulesCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, EnableInsightRulesCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new EnableInsightRulesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link EnableInsightRulesCommandInput} for command's `input` shape.
        * @see {@link EnableInsightRulesCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class EnableInsightRulesCommand extends $Command<EnableInsightRulesCommandInput, EnableInsightRulesCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: EnableInsightRulesCommandInput;
            constructor(input: EnableInsightRulesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<EnableInsightRulesCommandInput, EnableInsightRulesCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/GetDashboardCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { GetDashboardInput, GetDashboardOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface GetDashboardCommandInput extends GetDashboardInput {
    }
    export interface GetDashboardCommandOutput extends GetDashboardOutput, __MetadataBearer {
    }
    /**
        * <p>Displays the details of the dashboard that you specify.</p>
        * 		       <p>To copy an existing dashboard, use <code>GetDashboard</code>, and then use the data returned
        * 			within <code>DashboardBody</code> as the template for the new dashboard when you call <code>PutDashboard</code> to create
        * 			the copy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, GetDashboardCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, GetDashboardCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new GetDashboardCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDashboardCommandInput} for command's `input` shape.
        * @see {@link GetDashboardCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class GetDashboardCommand extends $Command<GetDashboardCommandInput, GetDashboardCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: GetDashboardCommandInput;
            constructor(input: GetDashboardCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDashboardCommandInput, GetDashboardCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/GetInsightRuleReportCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { GetInsightRuleReportInput, GetInsightRuleReportOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface GetInsightRuleReportCommandInput extends GetInsightRuleReportInput {
    }
    export interface GetInsightRuleReportCommandOutput extends GetInsightRuleReportOutput, __MetadataBearer {
    }
    /**
        * <p>This operation returns the time series data collected by a Contributor Insights rule. The data includes the identity and number of
        * 		contributors to the log group.</p>
        * 		       <p>You can also optionally return one or more statistics about each data point in the time series. These statistics can include the following:</p>
        * 		       <ul>
        *             <li>
        * 				           <p>
        *                   <code>UniqueContributors</code> -- the number of unique contributors for each data point.</p>
        * 			         </li>
        *             <li>
        * 				           <p>
        *                   <code>MaxContributorValue</code> -- the value of the top contributor for each data point. The identity of the
        * 					contributor might change for each data point in the graph.</p>
        * 				           <p>If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the
        * 					most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified
        * 					by the rule's <code>Value</code>, during that period.</p>
        * 			         </li>
        *             <li>
        * 				           <p>
        *                   <code>SampleCount</code> -- the number of data points matched by the rule.</p>
        * 			         </li>
        *             <li>
        * 				           <p>
        *                   <code>Sum</code> -- the sum of the values from all contributors during the time period represented by that data point.</p>
        * 			         </li>
        *             <li>
        * 				           <p>
        *                   <code>Minimum</code> -- the minimum value from a single observation during the time period represented by that data point.</p>
        * 			         </li>
        *             <li>
        * 				           <p>
        *                   <code>Maximum</code> -- the maximum value from a single observation during the time period represented by that data point.</p>
        * 			         </li>
        *             <li>
        * 				           <p>
        *                   <code>Average</code> -- the average value from all contributors during the time period represented by that data point.</p>
        * 			         </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, GetInsightRuleReportCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, GetInsightRuleReportCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new GetInsightRuleReportCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetInsightRuleReportCommandInput} for command's `input` shape.
        * @see {@link GetInsightRuleReportCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class GetInsightRuleReportCommand extends $Command<GetInsightRuleReportCommandInput, GetInsightRuleReportCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: GetInsightRuleReportCommandInput;
            constructor(input: GetInsightRuleReportCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetInsightRuleReportCommandInput, GetInsightRuleReportCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/GetMetricDataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { GetMetricDataInput, GetMetricDataOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface GetMetricDataCommandInput extends GetMetricDataInput {
    }
    export interface GetMetricDataCommandOutput extends GetMetricDataOutput, __MetadataBearer {
    }
    /**
        * <p>You can use the <code>GetMetricData</code> API to retrieve CloudWatch metric values. The operation
        * 			can also include a CloudWatch Metrics Insights query, and one or more metric math functions.</p>
        * 		       <p>A <code>GetMetricData</code> operation that does not include a query can retrieve as many as 500 different
        * 			metrics in a single request, with a total of as many as 100,800 data points. You can also
        * 			optionally perform metric math expressions on the values of the returned statistics, to create
        * 			new time series that represent new insights into your data. For example, using Lambda
        * 			metrics, you could divide the Errors metric by the Invocations metric to get an error
        * 			rate time series. For more information about metric math expressions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax">Metric Math Syntax and Functions</a> in the <i>Amazon CloudWatch User
        * 					Guide</i>.</p>
        *
        *
        * 		       <p>If you include a Metrics Insights query, each <code>GetMetricData</code> operation can include only one
        * 			query. But the same <code>GetMetricData</code> operation can also retrieve other metrics. Metrics Insights queries
        * 		can query only the most recent three hours of metric data. For more information about Metrics Insights,
        * 		see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/query_with_cloudwatch-metrics-insights.html">Query your metrics with CloudWatch Metrics Insights</a>.</p>
        *
        * 		       <p>Calls to the <code>GetMetricData</code> API have a different pricing structure than
        * 			calls to <code>GetMetricStatistics</code>. For more information about pricing, see
        * 			<a href="https://aws.amazon.com/cloudwatch/pricing/">Amazon CloudWatch Pricing</a>.</p>
        *
        * 		       <p>Amazon CloudWatch retains metric data as follows:</p>
        * 		       <ul>
        *             <li>
        *                <p>Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution
        * 				metrics and are available only for custom metrics that have been defined with a <code>StorageResolution</code> of 1.</p>
        *             </li>
        *             <li>
        *                <p>Data points with a period of 60 seconds (1-minute) are available for 15 days.</p>
        *             </li>
        *             <li>
        *                <p>Data points with a period of 300 seconds (5-minute) are available for 63 days.</p>
        *             </li>
        *             <li>
        *                <p>Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).</p>
        *             </li>
        *          </ul>
        * 		       <p>Data points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect
        * 			data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available,
        * 			but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with
        * 			a resolution of 1 hour.</p>
        *
        * 		       <p>If you omit <code>Unit</code> in your request, all data that was collected with any unit is returned, along with the corresponding units that were specified
        * 			when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified.
        * 			If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.</p>
        *
        * 		       <p>
        *             <b>Using Metrics Insights queries with metric math</b>
        *          </p>
        * 		       <p>You can't mix a Metric Insights query and metric math syntax in the same expression, but
        * 			you can reference results from a Metrics Insights query within other Metric math expressions. A Metrics Insights
        * 			query without a <b>GROUP BY</b> clause returns a single time-series (TS),
        * 			and can be used as input for a metric math expression that expects a single time series. A Metrics Insights
        * 			query with a <b>GROUP BY</b> clause returns an array of time-series (TS[]),
        * 			and can be used as input for a metric math expression that expects an array of time series. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, GetMetricDataCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, GetMetricDataCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new GetMetricDataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMetricDataCommandInput} for command's `input` shape.
        * @see {@link GetMetricDataCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class GetMetricDataCommand extends $Command<GetMetricDataCommandInput, GetMetricDataCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: GetMetricDataCommandInput;
            constructor(input: GetMetricDataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMetricDataCommandInput, GetMetricDataCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/GetMetricStatisticsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { GetMetricStatisticsInput, GetMetricStatisticsOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface GetMetricStatisticsCommandInput extends GetMetricStatisticsInput {
    }
    export interface GetMetricStatisticsCommandOutput extends GetMetricStatisticsOutput, __MetadataBearer {
    }
    /**
        * <p>Gets statistics for the specified metric.</p>
        *
        *
        *
        * 		       <p>The maximum number of data points returned from a single call is 1,440. If
        * 			you request more than 1,440 data points, CloudWatch returns an error.
        * 			To reduce the number of data points, you can narrow the specified time range and make
        * 			multiple requests across adjacent time ranges, or you can increase the specified period.
        * 			Data points are not returned in chronological order.</p>
        *
        * 		       <p>CloudWatch aggregates data points based on the length of the period
        * 			that you specify. For example, if you request statistics with a one-hour period,
        * 			CloudWatch aggregates all data points with time stamps that fall within each
        * 			one-hour period. Therefore, the number of values aggregated by CloudWatch is larger than
        * 			the number of data points returned.</p>
        * 		       <p>CloudWatch needs raw data points to calculate percentile statistics. If you publish
        * 			data using a statistic set instead, you can only retrieve
        * 			percentile statistics for this data if one of the following conditions is true:</p>
        * 		       <ul>
        *             <li>
        *                <p>The SampleCount value of the statistic set is 1.</p>
        *             </li>
        *             <li>
        *                <p>The Min and the Max values of the statistic set are equal.</p>
        *             </li>
        *          </ul>
        * 		       <p>Percentile statistics are not available for metrics when any of the metric values are negative numbers.</p>
        * 		       <p>Amazon CloudWatch retains metric data as follows:</p>
        * 		       <ul>
        *             <li>
        *                <p>Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution
        * 				metrics and are available only for custom metrics that have been defined with a <code>StorageResolution</code> of 1.</p>
        *             </li>
        *             <li>
        *                <p>Data points with a period of 60 seconds (1-minute) are available for 15 days.</p>
        *             </li>
        *             <li>
        *                <p>Data points with a period of 300 seconds (5-minute) are available for 63 days.</p>
        *             </li>
        *             <li>
        *                <p>Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).</p>
        *             </li>
        *          </ul>
        * 		       <p>Data points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect
        * 			data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available,
        * 			but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with
        * 		a resolution of 1 hour.</p>
        * 		       <p>CloudWatch started retaining 5-minute and 1-hour metric data as of July 9, 2016.</p>
        *
        * 		       <p>For information about metrics and dimensions supported by Amazon Web Services services, see the
        * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CW_Support_For_AWS.html">Amazon CloudWatch Metrics and Dimensions Reference</a> in the
        * 			<i>Amazon CloudWatch User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, GetMetricStatisticsCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, GetMetricStatisticsCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new GetMetricStatisticsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMetricStatisticsCommandInput} for command's `input` shape.
        * @see {@link GetMetricStatisticsCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class GetMetricStatisticsCommand extends $Command<GetMetricStatisticsCommandInput, GetMetricStatisticsCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: GetMetricStatisticsCommandInput;
            constructor(input: GetMetricStatisticsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMetricStatisticsCommandInput, GetMetricStatisticsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/GetMetricStreamCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { GetMetricStreamInput, GetMetricStreamOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface GetMetricStreamCommandInput extends GetMetricStreamInput {
    }
    export interface GetMetricStreamCommandOutput extends GetMetricStreamOutput, __MetadataBearer {
    }
    /**
        * <p>Returns information about the metric stream that you specify.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, GetMetricStreamCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, GetMetricStreamCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new GetMetricStreamCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMetricStreamCommandInput} for command's `input` shape.
        * @see {@link GetMetricStreamCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class GetMetricStreamCommand extends $Command<GetMetricStreamCommandInput, GetMetricStreamCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: GetMetricStreamCommandInput;
            constructor(input: GetMetricStreamCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMetricStreamCommandInput, GetMetricStreamCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/GetMetricWidgetImageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { GetMetricWidgetImageInput, GetMetricWidgetImageOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface GetMetricWidgetImageCommandInput extends GetMetricWidgetImageInput {
    }
    export interface GetMetricWidgetImageCommandOutput extends GetMetricWidgetImageOutput, __MetadataBearer {
    }
    /**
        * <p>You can use the <code>GetMetricWidgetImage</code> API to retrieve a snapshot graph of
        * 			one or more Amazon CloudWatch metrics as a bitmap image. You can then embed this
        * 			image into your services and products, such as wiki pages, reports, and documents.
        * 			You could also retrieve images regularly, such as every minute, and create your own
        * 			custom live dashboard.</p>
        *
        * 		       <p>The graph you retrieve can include all CloudWatch metric graph features, including metric math
        * 		and horizontal and vertical annotations.</p>
        *
        * 		       <p>There is a limit of 20 transactions per second for this API. Each <code>GetMetricWidgetImage</code> action has the following limits:</p>
        * 		       <ul>
        *             <li>
        * 				           <p>As many as 100 metrics in the graph.</p>
        * 			         </li>
        *             <li>
        * 				           <p>Up to 100 KB uncompressed payload.</p>
        * 			         </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, GetMetricWidgetImageCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, GetMetricWidgetImageCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new GetMetricWidgetImageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMetricWidgetImageCommandInput} for command's `input` shape.
        * @see {@link GetMetricWidgetImageCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class GetMetricWidgetImageCommand extends $Command<GetMetricWidgetImageCommandInput, GetMetricWidgetImageCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: GetMetricWidgetImageCommandInput;
            constructor(input: GetMetricWidgetImageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMetricWidgetImageCommandInput, GetMetricWidgetImageCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/ListDashboardsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { ListDashboardsInput, ListDashboardsOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface ListDashboardsCommandInput extends ListDashboardsInput {
    }
    export interface ListDashboardsCommandOutput extends ListDashboardsOutput, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the dashboards for your account. If you include <code>DashboardNamePrefix</code>, only
        * 			those dashboards with names starting with the prefix are listed. Otherwise, all dashboards in your account are
        * 			listed.
        * 	    </p>
        * 		       <p>
        *             <code>ListDashboards</code> returns up to 1000 results on one page. If there
        * 			are more than 1000 dashboards, you can call <code>ListDashboards</code> again and
        * 		include the value you received for <code>NextToken</code> in the first call, to receive
        * 		the next 1000 results.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, ListDashboardsCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, ListDashboardsCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new ListDashboardsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDashboardsCommandInput} for command's `input` shape.
        * @see {@link ListDashboardsCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class ListDashboardsCommand extends $Command<ListDashboardsCommandInput, ListDashboardsCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: ListDashboardsCommandInput;
            constructor(input: ListDashboardsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDashboardsCommandInput, ListDashboardsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/ListMetricsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { ListMetricsInput, ListMetricsOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface ListMetricsCommandInput extends ListMetricsInput {
    }
    export interface ListMetricsCommandOutput extends ListMetricsOutput, __MetadataBearer {
    }
    /**
        * <p>List the specified metrics. You can use the returned metrics with
        * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html">GetMetricData</a> or
        * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html">GetMetricStatistics</a> to obtain statistical data.</p>
        * 		       <p>Up to 500 results are returned for any one call. To retrieve additional results,
        * 			use the returned token with subsequent calls.</p>
        * 		       <p>After you create a metric, allow up to 15 minutes before the metric appears.
        * 			You can see statistics about the metric sooner by using <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html">GetMetricData</a> or
        * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html">GetMetricStatistics</a>.</p>
        *
        * 	        <p>
        *             <code>ListMetrics</code> doesn't return information about metrics if those metrics haven't
        * 	reported data in the past two weeks. To retrieve those metrics, use
        * 		<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html">GetMetricData</a> or
        * 		<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html">GetMetricStatistics</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, ListMetricsCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, ListMetricsCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new ListMetricsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListMetricsCommandInput} for command's `input` shape.
        * @see {@link ListMetricsCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class ListMetricsCommand extends $Command<ListMetricsCommandInput, ListMetricsCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: ListMetricsCommandInput;
            constructor(input: ListMetricsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListMetricsCommandInput, ListMetricsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/ListMetricStreamsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { ListMetricStreamsInput, ListMetricStreamsOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface ListMetricStreamsCommandInput extends ListMetricStreamsInput {
    }
    export interface ListMetricStreamsCommandOutput extends ListMetricStreamsOutput, __MetadataBearer {
    }
    /**
        * <p>Returns a list of metric streams in this account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, ListMetricStreamsCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, ListMetricStreamsCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new ListMetricStreamsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListMetricStreamsCommandInput} for command's `input` shape.
        * @see {@link ListMetricStreamsCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class ListMetricStreamsCommand extends $Command<ListMetricStreamsCommandInput, ListMetricStreamsCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: ListMetricStreamsCommandInput;
            constructor(input: ListMetricStreamsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListMetricStreamsCommandInput, ListMetricStreamsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { ListTagsForResourceInput, ListTagsForResourceOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceInput {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceOutput, __MetadataBearer {
    }
    /**
        * <p>Displays the tags associated with a CloudWatch resource. Currently, alarms
        * 			and Contributor Insights rules support tagging.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, ListTagsForResourceCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, ListTagsForResourceCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/PutAnomalyDetectorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { PutAnomalyDetectorInput, PutAnomalyDetectorOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface PutAnomalyDetectorCommandInput extends PutAnomalyDetectorInput {
    }
    export interface PutAnomalyDetectorCommandOutput extends PutAnomalyDetectorOutput, __MetadataBearer {
    }
    /**
        * <p>Creates an anomaly detection model for a CloudWatch metric. You can use the model
        * 			to display a band of expected normal values when the metric is graphed.</p>
        * 		       <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Anomaly_Detection.html">CloudWatch Anomaly Detection</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, PutAnomalyDetectorCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, PutAnomalyDetectorCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new PutAnomalyDetectorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutAnomalyDetectorCommandInput} for command's `input` shape.
        * @see {@link PutAnomalyDetectorCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class PutAnomalyDetectorCommand extends $Command<PutAnomalyDetectorCommandInput, PutAnomalyDetectorCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: PutAnomalyDetectorCommandInput;
            constructor(input: PutAnomalyDetectorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutAnomalyDetectorCommandInput, PutAnomalyDetectorCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/PutCompositeAlarmCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { PutCompositeAlarmInput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface PutCompositeAlarmCommandInput extends PutCompositeAlarmInput {
    }
    export interface PutCompositeAlarmCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Creates or updates a <i>composite alarm</i>. When you create a composite
        * 			alarm, you specify a rule expression for the alarm that takes into account the alarm
        * 			states of other alarms that you have created. The composite alarm goes into ALARM state
        * 			only if all conditions of the rule are met.</p>
        * 		       <p>The alarms specified in a composite alarm's rule expression can include metric alarms
        * 			and other composite alarms. The rule expression of a composite alarm can include as many as 100 underlying alarms.
        * 			Any single alarm can be included in the rule expressions of as many as 150 composite alarms.</p>
        * 		       <p>Using composite alarms can reduce
        * 			alarm noise. You can create multiple metric alarms,
        * 			and also create a composite alarm and
        * 			set up alerts only
        * 			for the composite alarm. For example, you could create a composite
        * 			alarm that goes into ALARM state only when more than one of the underlying metric alarms
        * 			are in ALARM state.</p>
        * 		       <p>Currently, the only alarm actions that can be taken by composite alarms are notifying
        * 			SNS topics.</p>
        * 		       <note>
        *             <p>It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and
        * 			composite alarm B also depends on composite alarm A. In this scenario, you can't delete any composite alarm that is part of the cycle
        * 			because there is always still a composite alarm that depends on that alarm that you want to delete.</p>
        * 			         <p>To get out of such a situation, you must
        * 			break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest
        * 			change to make to break a cycle is to change the <code>AlarmRule</code> of one of the alarms to <code>False</code>. </p>
        * 			         <p>Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path.
        * 		</p>
        *          </note>
        * 		       <p>When this operation creates an alarm, the alarm state is immediately set to
        * 				<code>INSUFFICIENT_DATA</code>. The alarm is then evaluated and its state is set
        * 			appropriately. Any actions associated with the new state are then executed. For a
        * 			composite alarm, this initial time after creation is the only time that
        * 			the
        * 			alarm can be in <code>INSUFFICIENT_DATA</code> state.</p>
        * 		       <p>When you update an existing alarm, its state is left unchanged, but the update
        * 			completely overwrites the previous configuration of the alarm.</p>
        *
        * 		       <p>To use this operation, you must be signed on with
        * 			the <code>cloudwatch:PutCompositeAlarm</code> permission that is scoped to <code>*</code>. You can't create a
        * 			composite alarms if your <code>cloudwatch:PutCompositeAlarm</code> permission has a narrower scope.</p>
        *
        * 		       <p>If you are an IAM user, you must have <code>iam:CreateServiceLinkedRole</code> to create
        * 			a composite alarm that has Systems Manager OpsItem actions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, PutCompositeAlarmCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, PutCompositeAlarmCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new PutCompositeAlarmCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutCompositeAlarmCommandInput} for command's `input` shape.
        * @see {@link PutCompositeAlarmCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class PutCompositeAlarmCommand extends $Command<PutCompositeAlarmCommandInput, PutCompositeAlarmCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: PutCompositeAlarmCommandInput;
            constructor(input: PutCompositeAlarmCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutCompositeAlarmCommandInput, PutCompositeAlarmCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/PutDashboardCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { PutDashboardInput, PutDashboardOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface PutDashboardCommandInput extends PutDashboardInput {
    }
    export interface PutDashboardCommandOutput extends PutDashboardOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a dashboard if it does not already exist, or updates an existing dashboard. If you update a dashboard,
        * 		the entire contents are replaced with what you specify here.</p>
        * 		       <p>All dashboards in your account are global, not region-specific.</p>
        * 		       <p>A simple way to create a dashboard using <code>PutDashboard</code> is to copy an
        * 			existing dashboard. To copy an existing dashboard using the console, you can load the dashboard
        * 			and then use the View/edit source command in the Actions menu to display the JSON  block
        * 			for that dashboard. Another way to copy a dashboard is to
        * 			use <code>GetDashboard</code>, and then use the data returned
        * 			within <code>DashboardBody</code> as the template for the new dashboard when you call <code>PutDashboard</code>.</p>
        * 		       <p>When you create a dashboard with <code>PutDashboard</code>, a good practice is to
        * 			add a text widget at the top of the dashboard with a message that the dashboard was created by script and should
        * 		not be changed in the console. This message could also point console users to the location
        * 		of the <code>DashboardBody</code> script or the CloudFormation template used to create the
        * 		dashboard.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, PutDashboardCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, PutDashboardCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new PutDashboardCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutDashboardCommandInput} for command's `input` shape.
        * @see {@link PutDashboardCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class PutDashboardCommand extends $Command<PutDashboardCommandInput, PutDashboardCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: PutDashboardCommandInput;
            constructor(input: PutDashboardCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutDashboardCommandInput, PutDashboardCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/PutInsightRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { PutInsightRuleInput, PutInsightRuleOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface PutInsightRuleCommandInput extends PutInsightRuleInput {
    }
    export interface PutInsightRuleCommandOutput extends PutInsightRuleOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a Contributor Insights rule. Rules evaluate log events in a
        * 		CloudWatch Logs log group, enabling you to find contributor data for the log events in that log group. For more information,
        * 		see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html">Using Contributor Insights to Analyze High-Cardinality Data</a>.</p>
        * 		       <p>If you create a rule, delete it, and then re-create it with the same name, historical data from the first time
        * 			the rule was created might not be available.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, PutInsightRuleCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, PutInsightRuleCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new PutInsightRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutInsightRuleCommandInput} for command's `input` shape.
        * @see {@link PutInsightRuleCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class PutInsightRuleCommand extends $Command<PutInsightRuleCommandInput, PutInsightRuleCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: PutInsightRuleCommandInput;
            constructor(input: PutInsightRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutInsightRuleCommandInput, PutInsightRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/PutMetricAlarmCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { PutMetricAlarmInput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface PutMetricAlarmCommandInput extends PutMetricAlarmInput {
    }
    export interface PutMetricAlarmCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Creates or updates an alarm and associates it with the specified metric, metric math expression,
        * 			or anomaly detection model.</p>
        *
        *
        * 		       <p>Alarms based on anomaly detection models cannot have Auto Scaling actions.</p>
        * 		       <p>When this operation creates an alarm, the alarm state is immediately set to
        * 			<code>INSUFFICIENT_DATA</code>. The alarm is then evaluated and its state is set
        * 			appropriately. Any actions associated with the new state are then executed.</p>
        * 		       <p>When you update an existing alarm, its state is left unchanged, but the
        * 			update completely overwrites the previous configuration of the alarm.</p>
        *
        * 		       <p>If you are an IAM user, you must have
        * 			Amazon EC2 permissions for some alarm operations:</p>
        * 		       <ul>
        *             <li>
        * 				           <p>The <code>iam:CreateServiceLinkedRole</code> for all alarms with EC2 actions</p>
        *
        * 			         </li>
        *             <li>
        *
        * 				           <p>The <code>iam:CreateServiceLinkedRole</code> to create an alarm
        * 					with Systems Manager OpsItem actions.</p>
        * 			         </li>
        *          </ul>
        *
        *
        *
        *
        *
        *
        * 		       <p>The first time you create an alarm in the
        * 			Amazon Web Services Management Console, the CLI, or by using the PutMetricAlarm API, CloudWatch
        * 			creates the necessary service-linked role for you. The service-linked roles
        * 			are called <code>AWSServiceRoleForCloudWatchEvents</code> and
        * 			<code>AWSServiceRoleForCloudWatchAlarms_ActionSSM</code>.
        * 			For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Amazon Web Services service-linked role</a>.</p>
        *
        * 		       <p>
        *             <b>Cross-account alarms</b>
        *          </p>
        *
        * 		       <p>You can set an alarm on metrics in the current account, or in another
        * 			account. To create a cross-account alarm that watches a metric in a different account, you must have completed the following
        * 			pre-requisites:</p>
        * 		       <ul>
        *             <li>
        *                <p>The account where the metrics are located (the <i>sharing account</i>) must
        * 				already have a sharing role named <b>CloudWatch-CrossAccountSharingRole</b>. If it does not already
        * 				have this role, you must create it using the instructions in <b>Set up a
        * 					sharing account</b> in <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Cross-Account-Cross-Region.html#enable-cross-account-cross-Region">
        * 					Cross-account cross-Region CloudWatch console</a>. The policy for that
        * 				role must grant access
        * 				to the ID of the account where you are creating the alarm.
        * 			</p>
        *             </li>
        *             <li>
        *                <p>The account where you are creating the alarm (the <i>monitoring account</i>) must
        * 				already have a service-linked role named
        * 				<b>AWSServiceRoleForCloudWatchCrossAccount</b> to allow
        * 				CloudWatch to assume the sharing role in the sharing account. If it does not, you must create it following the directions in <b>Set up a
        * 					monitoring account</b> in <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Cross-Account-Cross-Region.html#enable-cross-account-cross-Region">
        * 						Cross-account cross-Region CloudWatch console</a>.</p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, PutMetricAlarmCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, PutMetricAlarmCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new PutMetricAlarmCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutMetricAlarmCommandInput} for command's `input` shape.
        * @see {@link PutMetricAlarmCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class PutMetricAlarmCommand extends $Command<PutMetricAlarmCommandInput, PutMetricAlarmCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: PutMetricAlarmCommandInput;
            constructor(input: PutMetricAlarmCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutMetricAlarmCommandInput, PutMetricAlarmCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/PutMetricDataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { PutMetricDataInput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface PutMetricDataCommandInput extends PutMetricDataInput {
    }
    export interface PutMetricDataCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Publishes metric data points to Amazon CloudWatch. CloudWatch associates
        * 			the data points with the specified metric. If the specified metric does not exist,
        * 			CloudWatch creates the metric. When CloudWatch creates a metric, it can
        * 			take up to fifteen minutes for the metric to appear in calls to <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_ListMetrics.html">ListMetrics</a>.</p>
        *
        * 		       <p>You can publish either individual data points in the <code>Value</code> field, or
        * 		arrays of values and the number of times each value occurred during the period by using the
        * 		<code>Values</code> and <code>Counts</code> fields in the <code>MetricDatum</code> structure. Using
        * 		the <code>Values</code> and <code>Counts</code> method enables you to publish up to 150 values per metric
        * 			with one <code>PutMetricData</code> request, and
        * 		supports retrieving percentile statistics on this data.</p>
        * 		       <p>Each <code>PutMetricData</code> request is limited to 40 KB in size for HTTP POST requests. You can
        * 			send a payload compressed by gzip. Each request
        * 		is also limited to no more than 20 different metrics.</p>
        * 		       <p>Although the <code>Value</code> parameter accepts numbers of type
        * 			<code>Double</code>, CloudWatch rejects values that are either too small
        * 			or too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity,
        * 			-Infinity) are not supported.</p>
        * 		       <p>You can use up to 10 dimensions per metric to further clarify what data the metric collects. Each dimension
        * 			consists of a Name and Value pair. For more information about specifying dimensions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html">Publishing Metrics</a> in the
        * 			<i>Amazon CloudWatch User Guide</i>.</p>
        *
        * 		       <p>You specify the time stamp to be associated with each data point. You can specify
        * 		time stamps that are as much as two weeks before the current date, and as much as 2 hours after
        * 		the current day and time.</p>
        * 		       <p>Data points with time stamps from 24 hours ago or longer can take at least 48
        * 			hours to become available for <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html">GetMetricData</a> or
        * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html">GetMetricStatistics</a> from the time they
        * 			are submitted. Data points with time stamps between 3 and 24 hours ago can take as much as 2 hours to become available
        * 			for for <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html">GetMetricData</a> or
        * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html">GetMetricStatistics</a>.</p>
        * 		       <p>CloudWatch needs raw data points to calculate percentile statistics. If you publish
        * 			data using a statistic set instead, you can only retrieve
        * 			percentile statistics for this data if one of the following conditions is true:</p>
        * 			      <ul>
        *             <li>
        *                <p>The <code>SampleCount</code> value of the statistic set is 1 and <code>Min</code>,
        * 					<code>Max</code>, and <code>Sum</code> are all equal.</p>
        *             </li>
        *             <li>
        *                <p>The <code>Min</code> and
        * 					<code>Max</code> are equal, and <code>Sum</code> is equal to <code>Min</code>
        * 					multiplied by <code>SampleCount</code>.</p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, PutMetricDataCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, PutMetricDataCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new PutMetricDataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutMetricDataCommandInput} for command's `input` shape.
        * @see {@link PutMetricDataCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class PutMetricDataCommand extends $Command<PutMetricDataCommandInput, PutMetricDataCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: PutMetricDataCommandInput;
            constructor(input: PutMetricDataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutMetricDataCommandInput, PutMetricDataCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/PutMetricStreamCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { PutMetricStreamInput, PutMetricStreamOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface PutMetricStreamCommandInput extends PutMetricStreamInput {
    }
    export interface PutMetricStreamCommandOutput extends PutMetricStreamOutput, __MetadataBearer {
    }
    /**
        * <p>Creates or updates a metric stream. Metric streams can automatically stream CloudWatch metrics
        * 			to Amazon Web Services destinations including
        * 			Amazon S3 and to many third-party solutions.</p>
        * 		       <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Metric-Streams.html">
        * 		Using Metric Streams</a>.</p>
        * 		       <p>To create a metric stream,
        * 			you must be logged on to an account that has the <code>iam:PassRole</code> permission
        * 			and either the <code>CloudWatchFullAccess</code>
        * 		policy or the <code>cloudwatch:PutMetricStream</code>
        * 		permission.</p>
        * 		       <p>When you create or update a metric stream, you choose one of the following:</p>
        * 		       <ul>
        *             <li>
        *                <p>Stream metrics from all metric namespaces in the account.</p>
        *             </li>
        *             <li>
        *                <p>Stream metrics from all metric namespaces in the account, except
        * 				for the namespaces that you list in <code>ExcludeFilters</code>.</p>
        *             </li>
        *             <li>
        *                <p>Stream metrics from only the metric namespaces that you list in
        * 				<code>IncludeFilters</code>.</p>
        *             </li>
        *          </ul>
        *
        * 		       <p>By default, a metric stream always sends the <code>MAX</code>, <code>MIN</code>, <code>SUM</code>,
        * 			and <code>SAMPLECOUNT</code> statistics for each metric that is streamed. You can use the
        * 			<code>StatisticsConfigurations</code> parameter to have
        * 			the metric stream also send additional statistics in the stream. Streaming additional statistics incurs
        * 			additional costs. For more information, see <a href="https://aws.amazon.com/cloudwatch/pricing/">Amazon CloudWatch Pricing</a>. </p>
        *
        * 		       <p>When you use <code>PutMetricStream</code> to create a new metric stream, the stream
        * 		is created in the <code>running</code> state. If you use it to update an existing stream,
        * 		the state of the stream is not changed.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, PutMetricStreamCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, PutMetricStreamCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new PutMetricStreamCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutMetricStreamCommandInput} for command's `input` shape.
        * @see {@link PutMetricStreamCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class PutMetricStreamCommand extends $Command<PutMetricStreamCommandInput, PutMetricStreamCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: PutMetricStreamCommandInput;
            constructor(input: PutMetricStreamCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutMetricStreamCommandInput, PutMetricStreamCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/SetAlarmStateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { SetAlarmStateInput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface SetAlarmStateCommandInput extends SetAlarmStateInput {
    }
    export interface SetAlarmStateCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Temporarily sets the state of an alarm for testing purposes. When the updated
        * 			state differs from the previous value, the action configured for
        * 			the appropriate state is invoked. For example, if your alarm is configured to send an
        * 			Amazon SNS message when an alarm is triggered, temporarily changing the alarm state to
        * 			<code>ALARM</code> sends an SNS message.</p>
        * 		       <p>Metric alarms
        * 			returns to their actual state quickly, often within seconds. Because the metric alarm state change
        * 			happens quickly, it is typically only visible in the alarm's <b>History</b> tab in the Amazon CloudWatch console or through
        * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeAlarmHistory.html">DescribeAlarmHistory</a>.</p>
        * 		       <p>If you use <code>SetAlarmState</code> on a composite alarm, the composite alarm is not guaranteed to return
        * 			to its actual state. It
        * 			returns to its actual state only once any of its children alarms change state. It is also
        * 			reevaluated if you update its
        * 			configuration.</p>
        * 		       <p>If an alarm triggers EC2 Auto Scaling policies or application Auto Scaling policies, you must include
        * 		information in the <code>StateReasonData</code> parameter to enable the policy to take the correct action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, SetAlarmStateCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, SetAlarmStateCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new SetAlarmStateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetAlarmStateCommandInput} for command's `input` shape.
        * @see {@link SetAlarmStateCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class SetAlarmStateCommand extends $Command<SetAlarmStateCommandInput, SetAlarmStateCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: SetAlarmStateCommandInput;
            constructor(input: SetAlarmStateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetAlarmStateCommandInput, SetAlarmStateCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/StartMetricStreamsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { StartMetricStreamsInput, StartMetricStreamsOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface StartMetricStreamsCommandInput extends StartMetricStreamsInput {
    }
    export interface StartMetricStreamsCommandOutput extends StartMetricStreamsOutput, __MetadataBearer {
    }
    /**
        * <p>Starts the streaming of metrics for one or more of your metric streams.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, StartMetricStreamsCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, StartMetricStreamsCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new StartMetricStreamsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartMetricStreamsCommandInput} for command's `input` shape.
        * @see {@link StartMetricStreamsCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class StartMetricStreamsCommand extends $Command<StartMetricStreamsCommandInput, StartMetricStreamsCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: StartMetricStreamsCommandInput;
            constructor(input: StartMetricStreamsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartMetricStreamsCommandInput, StartMetricStreamsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/StopMetricStreamsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { StopMetricStreamsInput, StopMetricStreamsOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface StopMetricStreamsCommandInput extends StopMetricStreamsInput {
    }
    export interface StopMetricStreamsCommandOutput extends StopMetricStreamsOutput, __MetadataBearer {
    }
    /**
        * <p>Stops the streaming of metrics for one or more of your metric streams.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, StopMetricStreamsCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, StopMetricStreamsCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new StopMetricStreamsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopMetricStreamsCommandInput} for command's `input` shape.
        * @see {@link StopMetricStreamsCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class StopMetricStreamsCommand extends $Command<StopMetricStreamsCommandInput, StopMetricStreamsCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: StopMetricStreamsCommandInput;
            constructor(input: StopMetricStreamsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopMetricStreamsCommandInput, StopMetricStreamsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { TagResourceInput, TagResourceOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceInput {
    }
    export interface TagResourceCommandOutput extends TagResourceOutput, __MetadataBearer {
    }
    /**
        * <p>Assigns one or more tags (key-value pairs) to the specified CloudWatch resource. Currently, the only CloudWatch resources that
        * 			can be tagged are alarms and Contributor Insights rules.</p>
        * 		       <p>Tags can help you organize and categorize your resources. You can also use them to scope user
        * 			permissions by granting a user
        * 			permission to access or change only resources with certain tag values.</p>
        * 		       <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p>
        * 		       <p>You can use the <code>TagResource</code> action with an alarm that already has tags. If you specify a new tag key for the alarm,
        * 			this tag is appended to the list of tags associated
        * 			with the alarm. If you specify a tag key that is already associated with the alarm, the new tag value that you specify replaces
        * 			the previous value for that tag.</p>
        * 		       <p>You can associate as many as 50 tags with a CloudWatch resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, TagResourceCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, TagResourceCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/CloudWatchClient";
    import { UntagResourceInput, UntagResourceOutput } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceInput {
    }
    export interface UntagResourceCommandOutput extends UntagResourceOutput, __MetadataBearer {
    }
    /**
        * <p>Removes one or more tags from the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchClient, UntagResourceCommand } from "@aws-sdk/client-cloudwatch"; // ES Modules import
        * // const { CloudWatchClient, UntagResourceCommand } = require("@aws-sdk/client-cloudwatch"); // CommonJS import
        * const client = new CloudWatchClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchClientResolvedConfig | config} for CloudWatchClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, CloudWatchClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { CloudWatchServiceException as __BaseException } from "@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/CloudWatchServiceException";
    export enum ActionsSuppressedBy {
            Alarm = "Alarm",
            ExtensionPeriod = "ExtensionPeriod",
            WaitPeriod = "WaitPeriod"
    }
    export type AlarmType = "CompositeAlarm" | "MetricAlarm";
    export type HistoryItemType = "Action" | "ConfigurationUpdate" | "StateUpdate";
    /**
        * <p>Represents the history of a specific alarm.</p>
        */
    export interface AlarmHistoryItem {
            /**
                * <p>The descriptive name for the alarm.</p>
                */
            AlarmName?: string;
            /**
                * <p>The type of alarm, either metric alarm or composite alarm.</p>
                */
            AlarmType?: AlarmType | string;
            /**
                * <p>The time stamp for the alarm history item.</p>
                */
            Timestamp?: Date;
            /**
                * <p>The type of alarm history item.</p>
                */
            HistoryItemType?: HistoryItemType | string;
            /**
                * <p>A summary of the alarm history, in text format.</p>
                */
            HistorySummary?: string;
            /**
                * <p>Data about the alarm, in JSON format.</p>
                */
            HistoryData?: string;
    }
    export namespace AlarmHistoryItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AlarmHistoryItem) => any;
    }
    /**
        * <p>Specifies one range of days or times to exclude from use for training an
        * 		anomaly detection model.</p>
        */
    export interface Range {
            /**
                * <p>The start time of the range to exclude. The format is <code>yyyy-MM-dd'T'HH:mm:ss</code>. For example,
                * 			<code>2019-07-01T23:59:59</code>.</p>
                */
            StartTime: Date | undefined;
            /**
                * <p>The end time of the range to exclude. The format is <code>yyyy-MM-dd'T'HH:mm:ss</code>. For example,
                * 			<code>2019-07-01T23:59:59</code>.</p>
                */
            EndTime: Date | undefined;
    }
    export namespace Range {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Range) => any;
    }
    /**
        * <p>The configuration specifies details about how the anomaly detection model is to be trained,
        * 			including time ranges to exclude from use for training the model and the time zone to
        * 			use for the metric.</p>
        */
    export interface AnomalyDetectorConfiguration {
            /**
                * <p>An array of time ranges to exclude from use when the anomaly detection model is trained. Use
                * 			this to make sure that events that could cause unusual values for the metric, such as
                * 			deployments, aren't used when CloudWatch creates the model.</p>
                */
            ExcludedTimeRanges?: Range[];
            /**
                * <p>The time zone to use for the metric. This is useful to enable the model to automatically
                * 			account for daylight savings time changes if the metric is sensitive to such time
                * 			changes.</p>
                * 		       <p>To specify a time zone, use the name of the time zone as specified in the standard tz database. For more information,
                * 			see <a href="https://en.wikipedia.org/wiki/Tz_database">tz database</a>.</p>
                */
            MetricTimezone?: string;
    }
    export namespace AnomalyDetectorConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AnomalyDetectorConfiguration) => any;
    }
    /**
        * <p>A dimension is a name/value pair that is part of the identity of a metric. Because dimensions are part of the unique
        * 			identifier for a metric, whenever you add a unique name/value pair to one of
        * 			your metrics, you are creating a new variation of that metric. For example, many Amazon EC2 metrics publish
        * 		<code>InstanceId</code> as a dimension name, and the actual instance ID as the value for that dimension.</p>
        * 		       <p>You
        * 		can assign up to 10 dimensions to a metric.</p>
        */
    export interface Dimension {
            /**
                * <p>The name of the dimension. Dimension names must contain only ASCII characters, must include
                * 			at least one non-whitespace character, and cannot start with a colon (<code>:</code>).</p>
                */
            Name: string | undefined;
            /**
                * <p>The value of the dimension. Dimension values must contain only ASCII characters and must include
                * 			at least one non-whitespace character.</p>
                */
            Value: string | undefined;
    }
    export namespace Dimension {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Dimension) => any;
    }
    /**
        * <p>Represents a specific metric.</p>
        */
    export interface Metric {
            /**
                * <p>The namespace of the metric.</p>
                */
            Namespace?: string;
            /**
                * <p>The name of the metric. This is a required field.</p>
                */
            MetricName?: string;
            /**
                * <p>The dimensions for the metric.</p>
                */
            Dimensions?: Dimension[];
    }
    export namespace Metric {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Metric) => any;
    }
    export type StandardUnit = "Bits" | "Bits/Second" | "Bytes" | "Bytes/Second" | "Count" | "Count/Second" | "Gigabits" | "Gigabits/Second" | "Gigabytes" | "Gigabytes/Second" | "Kilobits" | "Kilobits/Second" | "Kilobytes" | "Kilobytes/Second" | "Megabits" | "Megabits/Second" | "Megabytes" | "Megabytes/Second" | "Microseconds" | "Milliseconds" | "None" | "Percent" | "Seconds" | "Terabits" | "Terabits/Second" | "Terabytes" | "Terabytes/Second";
    /**
        * <p>This structure defines the metric to be returned, along with the statistics, period, and units.</p>
        */
    export interface MetricStat {
            /**
                * <p>The metric to return, including the metric name, namespace, and dimensions.</p>
                */
            Metric: Metric | undefined;
            /**
                * <p>The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can
                * 			be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected
                * 			at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics
                * 			are those metrics stored by a <code>PutMetricData</code> call that includes a <code>StorageResolution</code> of 1 second.</p>
                * 			      <p>If the <code>StartTime</code> parameter specifies a time stamp that is greater than
                * 				3 hours ago, you must specify the period as follows or no data points in that time range is returned:</p>
                * 			      <ul>
                *             <li>
                *                <p>Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).</p>
                *             </li>
                *             <li>
                *                <p>Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).</p>
                *             </li>
                *             <li>
                *                <p>Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).</p>
                *             </li>
                *          </ul>
                */
            Period: number | undefined;
            /**
                * <p>The statistic to return. It can include any CloudWatch statistic or extended statistic.</p>
                */
            Stat: string | undefined;
            /**
                * <p>When you are using a <code>Put</code> operation, this defines what unit you want to use when storing the metric.</p>
                * 		       <p>In a <code>Get</code> operation, if you omit <code>Unit</code> then all data that was collected with any unit is returned, along with the corresponding units that were specified
                * 			when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified.
                * 			If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.</p>
                */
            Unit?: StandardUnit | string;
    }
    export namespace MetricStat {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricStat) => any;
    }
    /**
        * <p>This structure is used in both <code>GetMetricData</code> and <code>PutMetricAlarm</code>. The supported
        * 			use of this structure is different for those two operations.</p>
        * 		       <p>When used in <code>GetMetricData</code>, it indicates the metric data to return, and whether this call is just retrieving
        * 			a batch set of data for one metric, or is performing a Metrics Insights query or a math expression. A
        * 			single <code>GetMetricData</code> call can include up to 500 <code>MetricDataQuery</code>
        * 			structures.</p>
        * 		       <p>When used in <code>PutMetricAlarm</code>, it enables you to create an alarm based on a
        * 			metric math expression. Each <code>MetricDataQuery</code> in the array specifies either
        * 			a metric to retrieve, or a math expression to be performed on retrieved metrics. A
        * 			single <code>PutMetricAlarm</code> call can include up to 20
        * 				<code>MetricDataQuery</code> structures in the array. The 20 structures can include
        * 			as many as 10 structures that contain a <code>MetricStat</code> parameter to retrieve a
        * 			metric, and as many as 10 structures that contain the <code>Expression</code> parameter
        * 			to perform a math expression. Of those <code>Expression</code> structures, one must have <code>True</code>
        * 		as the value for <code>ReturnData</code>. The result of this expression is the value the alarm watches.</p>
        *
        * 		       <p>Any expression used in a <code>PutMetricAlarm</code>
        * 			operation must return a single time series. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax">Metric Math Syntax and Functions</a> in the <i>Amazon CloudWatch User
        * 				Guide</i>.</p>
        *
        * 		       <p>Some of the parameters of this structure also have different uses whether you are using this structure in a <code>GetMetricData</code>
        * 			operation or a <code>PutMetricAlarm</code> operation. These differences are explained in the following parameter list.</p>
        */
    export interface MetricDataQuery {
            /**
                * <p>A short name used to tie this object to the results in the response. This name must be
                * 			unique within a single call to <code>GetMetricData</code>. If you are performing math
                * 			expressions on this set of data, this name represents that data and can serve as a
                * 			variable in the mathematical expression. The valid characters are letters, numbers, and
                * 			underscore. The first character must be a lowercase letter.</p>
                */
            Id: string | undefined;
            /**
                * <p>The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric
                * 			and not performing a math expression on returned data.</p>
                * 		       <p>Within one MetricDataQuery object, you must specify either
                * 			<code>Expression</code> or <code>MetricStat</code> but not both.</p>
                */
            MetricStat?: MetricStat;
            /**
                * <p>This field can contain either a Metrics Insights query, or a metric math expression to be performed on the
                * 			returned data. For more information about Metrics Insights queries, see
                * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch-metrics-insights-querylanguage">Metrics Insights query components and syntax</a> in the
                * 			<i>Amazon CloudWatch User Guide</i>.</p>
                * 		       <p>A math expression
                * 			can use the <code>Id</code> of the other metrics or queries to refer to those metrics, and can also use
                * 			the <code>Id</code> of other
                * 			expressions to use the result of those expressions. For more information about metric math expressions, see
                * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax">Metric Math Syntax and Functions</a> in the
                * 			<i>Amazon CloudWatch User Guide</i>.</p>
                * 		       <p>Within each MetricDataQuery object, you must specify either
                * 			<code>Expression</code> or <code>MetricStat</code> but not both.</p>
                */
            Expression?: string;
            /**
                * <p>A human-readable label for this metric or expression. This is especially useful
                * 			if this is an expression, so that you know
                * 			what the value represents. If the metric or expression is shown in a
                * 			CloudWatch dashboard widget, the label is shown. If Label is omitted, CloudWatch
                * 			generates a default.</p>
                * 		       <p>You can put dynamic expressions into a label, so that it is more descriptive.
                * 			For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html">Using Dynamic Labels</a>.</p>
                */
            Label?: string;
            /**
                * <p>When used in <code>GetMetricData</code>, this option indicates whether to return the
                * 			timestamps and raw data values of this metric. If you are performing this call just to
                * 			do math expressions and do not also need the raw data returned, you can specify
                * 				<code>False</code>. If you omit this, the default of <code>True</code> is
                * 			used.</p>
                * 		       <p>When used in <code>PutMetricAlarm</code>, specify <code>True</code> for the one expression result to use as the alarm. For all
                * 		other metrics and expressions in the same <code>PutMetricAlarm</code> operation, specify <code>ReturnData</code> as False.</p>
                */
            ReturnData?: boolean;
            /**
                * <p>The granularity, in seconds, of the returned data points. For metrics with regular resolution, a
                * 			period can be as short as one minute (60 seconds) and must be a multiple of 60.
                * 			For high-resolution metrics that are collected at intervals of less than one minute,
                * 			the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics
                * 			stored by a <code>PutMetricData</code> operation that includes a <code>StorageResolution of 1 second</code>.</p>
                */
            Period?: number;
            /**
                * <p>The ID of the account where the metrics are located, if this is a cross-account alarm.</p>
                * 		       <p>Use this field only for <code>PutMetricAlarm</code> operations. It is not used in
                * 		<code>GetMetricData</code> operations.</p>
                */
            AccountId?: string;
    }
    export namespace MetricDataQuery {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricDataQuery) => any;
    }
    /**
        * <p>Indicates the CloudWatch math expression that provides the time series the anomaly detector
        * 			uses as input.
        * 			The designated math expression must return a single time series.</p>
        */
    export interface MetricMathAnomalyDetector {
            /**
                * <p>An array of metric data query structures
                * 			that enables you to create an anomaly detector
                * 			based on the result of a metric math expression.
                * 			Each item in <code>MetricDataQueries</code> gets a metric or performs a math expression.
                * 			One item in <code>MetricDataQueries</code> is the expression
                * 			that provides the time series
                * 			that the anomaly detector uses as input.
                * 			Designate the expression by setting <code>ReturnData</code> to <code>True</code>
                * 			for this object in the array.
                * 			For all other expressions and metrics, set <code>ReturnData</code> to <code>False</code>.
                * 			The designated expression must return
                * 			a single time series.</p>
                */
            MetricDataQueries?: MetricDataQuery[];
    }
    export namespace MetricMathAnomalyDetector {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricMathAnomalyDetector) => any;
    }
    /**
        * <p>Designates the CloudWatch metric and statistic that provides the time series the anomaly detector
        * 			uses as input.</p>
        */
    export interface SingleMetricAnomalyDetector {
            /**
                * <p>The namespace of the metric to create the anomaly detection model for.</p>
                */
            Namespace?: string;
            /**
                * <p>The name of the metric to create the anomaly detection model for.</p>
                */
            MetricName?: string;
            /**
                * <p>The metric dimensions to create the anomaly detection model for.</p>
                */
            Dimensions?: Dimension[];
            /**
                * <p>The statistic to use for the metric and anomaly detection model.</p>
                */
            Stat?: string;
    }
    export namespace SingleMetricAnomalyDetector {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SingleMetricAnomalyDetector) => any;
    }
    export type AnomalyDetectorStateValue = "PENDING_TRAINING" | "TRAINED" | "TRAINED_INSUFFICIENT_DATA";
    /**
        * <p>An anomaly detection model associated with a particular CloudWatch metric, statistic, or metric math expression.
        * 			You can use the model to display a band of expected, normal values
        * 			when the metric is graphed.</p>
        */
    export interface AnomalyDetector {
            /**
                * @deprecated
                *
                * <p>The namespace of the metric associated with the anomaly detection model.</p>
                */
            Namespace?: string;
            /**
                * @deprecated
                *
                * <p>The name of the metric associated with the anomaly detection model.</p>
                */
            MetricName?: string;
            /**
                * @deprecated
                *
                * <p>The metric dimensions associated with the anomaly detection model.</p>
                */
            Dimensions?: Dimension[];
            /**
                * @deprecated
                *
                * <p>The statistic associated with the anomaly detection model.</p>
                */
            Stat?: string;
            /**
                * <p>The configuration specifies details about how the
                * 		anomaly detection model is to be trained, including time ranges to
                * 		exclude from use for training the model, and the time zone to use for
                * 		the metric.</p>
                */
            Configuration?: AnomalyDetectorConfiguration;
            /**
                * <p>The current status of the anomaly detector's training. The possible values are <code>TRAINED | PENDING_TRAINING | TRAINED_INSUFFICIENT_DATA</code>
                *          </p>
                */
            StateValue?: AnomalyDetectorStateValue | string;
            /**
                * <p>The CloudWatch metric and statistic for this anomaly detector.</p>
                */
            SingleMetricAnomalyDetector?: SingleMetricAnomalyDetector;
            /**
                * <p>The CloudWatch metric math expression for this anomaly detector.</p>
                */
            MetricMathAnomalyDetector?: MetricMathAnomalyDetector;
    }
    export namespace AnomalyDetector {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AnomalyDetector) => any;
    }
    export enum AnomalyDetectorType {
            METRIC_MATH = "METRIC_MATH",
            SINGLE_METRIC = "SINGLE_METRIC"
    }
    /**
        * <p>This array is empty if the API operation was successful for all the rules specified in the request. If the operation could
        * 		not process one of the rules, the following data is returned for each of those rules.</p>
        */
    export interface PartialFailure {
            /**
                * <p>The specified rule that could not be deleted.</p>
                */
            FailureResource?: string;
            /**
                * <p>The type of error.</p>
                */
            ExceptionType?: string;
            /**
                * <p>The code of the error.</p>
                */
            FailureCode?: string;
            /**
                * <p>A description of the error.</p>
                */
            FailureDescription?: string;
    }
    export namespace PartialFailure {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PartialFailure) => any;
    }
    export type ComparisonOperator = "GreaterThanOrEqualToThreshold" | "GreaterThanThreshold" | "GreaterThanUpperThreshold" | "LessThanLowerOrGreaterThanUpperThreshold" | "LessThanLowerThreshold" | "LessThanOrEqualToThreshold" | "LessThanThreshold";
    export type StateValue = "ALARM" | "INSUFFICIENT_DATA" | "OK";
    /**
        * <p>The details about a composite alarm.</p>
        */
    export interface CompositeAlarm {
            /**
                * <p>Indicates whether actions should be executed during any changes to the alarm state.</p>
                */
            ActionsEnabled?: boolean;
            /**
                * <p>The actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).</p>
                */
            AlarmActions?: string[];
            /**
                * <p>The Amazon Resource Name (ARN) of the alarm.</p>
                */
            AlarmArn?: string;
            /**
                * <p>The time stamp of the last update to the alarm configuration.</p>
                */
            AlarmConfigurationUpdatedTimestamp?: Date;
            /**
                * <p>The description of the alarm.</p>
                */
            AlarmDescription?: string;
            /**
                * <p>The name of the alarm.</p>
                */
            AlarmName?: string;
            /**
                * <p>The rule that this alarm uses to evaluate its alarm state.</p>
                */
            AlarmRule?: string;
            /**
                * <p>The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).</p>
                */
            InsufficientDataActions?: string[];
            /**
                * <p>The actions to execute when this alarm transitions to the OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).</p>
                */
            OKActions?: string[];
            /**
                * <p>An explanation for the alarm state, in text format.</p>
                */
            StateReason?: string;
            /**
                * <p>An explanation for the alarm state, in JSON format.</p>
                */
            StateReasonData?: string;
            /**
                * <p>Tracks the timestamp of any state update, even if <code>StateValue</code> doesn't change.</p>
                */
            StateUpdatedTimestamp?: Date;
            /**
                * <p>The state value for the alarm.</p>
                */
            StateValue?: StateValue | string;
            /**
                * <p>
                * 			The timestamp
                * 			of the last change
                * 			to the alarm's <code>StateValue</code>.
                * 		</p>
                */
            StateTransitionedTimestamp?: Date;
            /**
                * <p>
                * 			When the value is <code>ALARM</code>,
                * 			it means
                * 			that the actions are suppressed
                * 			because the suppressor alarm is
                * 			in <code>ALARM</code>
                * 			When the value is <code>WaitPeriod</code>,
                * 			it means that
                * 			the actions are suppressed
                * 			because the composite alarm is waiting
                * 			for the suppressor alarm
                * 			to go
                * 			into
                * 			into the <code>ALARM</code> state.
                * 			The maximum waiting time is as specified
                * 			in <code>ActionsSuppressorWaitPeriod</code>.
                * 			After this time,
                * 			the composite alarm performs its actions.
                * 			When the value is <code>ExtensionPeriod</code>,
                * 			it means
                * 			that the actions are suppressed
                * 			because the composite alarm is waiting
                * 			after the suppressor alarm went out
                * 			of the <code>ALARM</code> state.
                * 			The maximum waiting time is as specified
                * 			in <code>ActionsSuppressorExtensionPeriod</code>.
                * 			After this time,
                * 			the composite alarm performs its actions.
                * 		</p>
                */
            ActionsSuppressedBy?: ActionsSuppressedBy | string;
            /**
                * <p>
                * 			Captures the reason for action suppression.
                * 		</p>
                */
            ActionsSuppressedReason?: string;
            /**
                * <p>
                * 			Actions will be suppressed
                * 			if the suppressor alarm is
                * 			in the <code>ALARM</code> state.
                * 			<code>ActionsSuppressor</code> can be an AlarmName or an Amazon Resource Name (ARN)
                * 			from an existing alarm.
                * 		</p>
                */
            ActionsSuppressor?: string;
            /**
                * <p>
                * 			The maximum time
                * 			in seconds
                * 			that the composite alarm waits
                * 			for the suppressor alarm
                * 			to go
                * 			into the <code>ALARM</code> state.
                * 			After this time,
                * 			the composite alarm performs its actions.
                * 		</p>
                * 		       <important>
                * 			         <p>
                * 				           <code>WaitPeriod</code>
                * 				is required only
                * 				when <code>ActionsSuppressor</code> is specified.
                * 			</p>
                * 		       </important>
                */
            ActionsSuppressorWaitPeriod?: number;
            /**
                * <p>
                * 			The maximum time
                * 			in seconds
                * 			that the composite alarm waits
                * 			after suppressor alarm goes out
                * 			of the <code>ALARM</code> state.
                * 			After this time,
                * 			the composite alarm performs its actions.
                * 		</p>
                * 		       <important>
                * 			         <p>
                * 				           <code>ExtensionPeriod</code>
                * 				is required only
                * 				when <code>ActionsSuppressor</code> is specified.
                * 			</p>
                * 		       </important>
                */
            ActionsSuppressorExtensionPeriod?: number;
    }
    export namespace CompositeAlarm {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CompositeAlarm) => any;
    }
    /**
        * <p>More than one process tried to modify a resource at the same time.</p>
        */
    export class ConcurrentModificationException extends __BaseException {
            readonly name: "ConcurrentModificationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConcurrentModificationException, __BaseException>);
    }
    /**
        * <p>Represents a specific dashboard.</p>
        */
    export interface DashboardEntry {
            /**
                * <p>The name of the dashboard.</p>
                */
            DashboardName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the dashboard.</p>
                */
            DashboardArn?: string;
            /**
                * <p>The time stamp of when the dashboard was last modified, either by an API call or
                * 			through the console. This number is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
                */
            LastModified?: Date;
            /**
                * <p>The size of the dashboard, in bytes.</p>
                */
            Size?: number;
    }
    export namespace DashboardEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DashboardEntry) => any;
    }
    /**
        * <p>An error or warning for the operation.</p>
        */
    export interface DashboardValidationMessage {
            /**
                * <p>The data path related to the message.</p>
                */
            DataPath?: string;
            /**
                * <p>A message describing the error or warning.</p>
                */
            Message?: string;
    }
    export namespace DashboardValidationMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DashboardValidationMessage) => any;
    }
    /**
        * <p>Some part of the dashboard data is invalid.</p>
        */
    export class DashboardInvalidInputError extends __BaseException {
            readonly name: "DashboardInvalidInputError";
            readonly $fault: "client";
            dashboardValidationMessages?: DashboardValidationMessage[];
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DashboardInvalidInputError, __BaseException>);
    }
    /**
        * <p>The specified dashboard does not exist.</p>
        */
    export class DashboardNotFoundError extends __BaseException {
            readonly name: "DashboardNotFoundError";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DashboardNotFoundError, __BaseException>);
    }
    /**
        * <p>Encapsulates the statistical data that CloudWatch computes from metric data.</p>
        */
    export interface Datapoint {
            /**
                * <p>The time stamp used for the data point.</p>
                */
            Timestamp?: Date;
            /**
                * <p>The number of metric values that contributed to the aggregate value of this
                * 			data point.</p>
                */
            SampleCount?: number;
            /**
                * <p>The average of the metric values that correspond to the data point.</p>
                */
            Average?: number;
            /**
                * <p>The sum of the metric values for the data point.</p>
                */
            Sum?: number;
            /**
                * <p>The minimum metric value for the data point.</p>
                */
            Minimum?: number;
            /**
                * <p>The maximum metric value for the data point.</p>
                */
            Maximum?: number;
            /**
                * <p>The standard unit for the data point.</p>
                */
            Unit?: StandardUnit | string;
            /**
                * <p>The percentile statistic for the data point.</p>
                */
            ExtendedStatistics?: Record<string, number>;
    }
    export namespace Datapoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Datapoint) => any;
    }
    export interface DeleteAlarmsInput {
            /**
                * <p>The alarms to be deleted.</p>
                */
            AlarmNames: string[] | undefined;
    }
    export namespace DeleteAlarmsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAlarmsInput) => any;
    }
    /**
        * <p>The named resource does not exist.</p>
        */
    export class ResourceNotFound extends __BaseException {
            readonly name: "ResourceNotFound";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFound, __BaseException>);
    }
    export interface DeleteAnomalyDetectorInput {
            /**
                * @deprecated
                *
                * <p>The namespace associated with the anomaly detection model to delete.</p>
                */
            Namespace?: string;
            /**
                * @deprecated
                *
                * <p>The metric name associated with the anomaly detection model to delete.</p>
                */
            MetricName?: string;
            /**
                * @deprecated
                *
                * <p>The metric dimensions associated with the anomaly detection model to delete.</p>
                */
            Dimensions?: Dimension[];
            /**
                * @deprecated
                *
                * <p>The statistic associated with the anomaly detection model to delete.</p>
                */
            Stat?: string;
            /**
                * <p>A single metric anomaly detector to be deleted.</p>
                * 		       <p>When using <code>SingleMetricAnomalyDetector</code>,
                * 			you cannot include the following parameters in the same operation:</p>
                *
                * 		       <ul>
                *             <li>
                *                <p>
                *                   <code>Dimensions</code>,</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MetricName</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Namespace</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Stat</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>the <code>MetricMathAnomalyDetector</code> parameters of <code>DeleteAnomalyDetectorInput</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                * 		       <p>Instead, specify the single metric anomaly detector attributes
                * 			as part of the <code>SingleMetricAnomalyDetector</code> property.</p>
                */
            SingleMetricAnomalyDetector?: SingleMetricAnomalyDetector;
            /**
                * <p>The metric math anomaly detector to be deleted.</p>
                * 		       <p>When using <code>MetricMathAnomalyDetector</code>, you cannot include following parameters in the same operation:</p>
                *
                * 		       <ul>
                *             <li>
                *                <p>
                *                   <code>Dimensions</code>,</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MetricName</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Namespace</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Stat</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>the <code>SingleMetricAnomalyDetector</code> parameters of <code>DeleteAnomalyDetectorInput</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                * 		       <p>Instead, specify the metric math anomaly detector attributes as part of the
                * 			<code>MetricMathAnomalyDetector</code> property.</p>
                */
            MetricMathAnomalyDetector?: MetricMathAnomalyDetector;
    }
    export namespace DeleteAnomalyDetectorInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAnomalyDetectorInput) => any;
    }
    export interface DeleteAnomalyDetectorOutput {
    }
    export namespace DeleteAnomalyDetectorOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAnomalyDetectorOutput) => any;
    }
    /**
        * <p>Request processing has failed due to some unknown error, exception, or failure.</p>
        */
    export class InternalServiceFault extends __BaseException {
            readonly name: "InternalServiceFault";
            readonly $fault: "server";
            /**
                * <p></p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServiceFault, __BaseException>);
    }
    /**
        * <p>Parameters were used together that cannot be used together.</p>
        */
    export class InvalidParameterCombinationException extends __BaseException {
            readonly name: "InvalidParameterCombinationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidParameterCombinationException, __BaseException>);
    }
    /**
        * <p>The value of an input parameter is bad or out-of-range.</p>
        */
    export class InvalidParameterValueException extends __BaseException {
            readonly name: "InvalidParameterValueException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidParameterValueException, __BaseException>);
    }
    /**
        * <p>An input parameter that is required is missing.</p>
        */
    export class MissingRequiredParameterException extends __BaseException {
            readonly name: "MissingRequiredParameterException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MissingRequiredParameterException, __BaseException>);
    }
    /**
        * <p>The named resource does not exist.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            ResourceType?: string;
            ResourceId?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    export interface DeleteDashboardsInput {
            /**
                * <p>The dashboards to be deleted. This parameter is required.</p>
                */
            DashboardNames: string[] | undefined;
    }
    export namespace DeleteDashboardsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDashboardsInput) => any;
    }
    export interface DeleteDashboardsOutput {
    }
    export namespace DeleteDashboardsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDashboardsOutput) => any;
    }
    export interface DeleteInsightRulesInput {
            /**
                * <p>An array of the rule names to delete. If you need to find out the names of your rules, use <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html">DescribeInsightRules</a>.</p>
                */
            RuleNames: string[] | undefined;
    }
    export namespace DeleteInsightRulesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteInsightRulesInput) => any;
    }
    export interface DeleteInsightRulesOutput {
            /**
                * <p>An array listing the rules that could not be deleted. You cannot delete built-in rules.</p>
                */
            Failures?: PartialFailure[];
    }
    export namespace DeleteInsightRulesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteInsightRulesOutput) => any;
    }
    export interface DeleteMetricStreamInput {
            /**
                * <p>The name of the metric stream to delete.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteMetricStreamInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteMetricStreamInput) => any;
    }
    export interface DeleteMetricStreamOutput {
    }
    export namespace DeleteMetricStreamOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteMetricStreamOutput) => any;
    }
    export enum ScanBy {
            TIMESTAMP_ASCENDING = "TimestampAscending",
            TIMESTAMP_DESCENDING = "TimestampDescending"
    }
    export interface DescribeAlarmHistoryInput {
            /**
                * <p>The name of the alarm.</p>
                */
            AlarmName?: string;
            /**
                * <p>Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter,
                * 			only metric alarms are returned.</p>
                */
            AlarmTypes?: (AlarmType | string)[];
            /**
                * <p>The type of alarm histories to retrieve.</p>
                */
            HistoryItemType?: HistoryItemType | string;
            /**
                * <p>The starting date to retrieve alarm history.</p>
                */
            StartDate?: Date;
            /**
                * <p>The ending date to retrieve alarm history.</p>
                */
            EndDate?: Date;
            /**
                * <p>The maximum number of alarm history records to retrieve.</p>
                */
            MaxRecords?: number;
            /**
                * <p>The token returned by a previous call to indicate that there is more data
                * 			available.</p>
                */
            NextToken?: string;
            /**
                * <p>Specified whether to return the newest or oldest alarm history first. Specify <code>TimestampDescending</code> to have the newest
                * 		event history returned first, and specify <code>TimestampAscending</code> to have the oldest history returned first.</p>
                */
            ScanBy?: ScanBy | string;
    }
    export namespace DescribeAlarmHistoryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAlarmHistoryInput) => any;
    }
    export interface DescribeAlarmHistoryOutput {
            /**
                * <p>The alarm histories, in JSON format.</p>
                */
            AlarmHistoryItems?: AlarmHistoryItem[];
            /**
                * <p>The token that marks the start of the next batch of returned results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAlarmHistoryOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAlarmHistoryOutput) => any;
    }
    /**
        * <p>The next token specified is invalid.</p>
        */
    export class InvalidNextToken extends __BaseException {
            readonly name: "InvalidNextToken";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidNextToken, __BaseException>);
    }
    export interface DescribeAlarmsInput {
            /**
                * <p>The names of the alarms to retrieve information about.</p>
                */
            AlarmNames?: string[];
            /**
                * <p>An alarm name prefix. If you specify this parameter, you receive information about all alarms that have names
                * 			that start with this prefix.</p>
                * 		       <p>If this parameter
                * 			is specified, you cannot specify <code>AlarmNames</code>.</p>
                */
            AlarmNamePrefix?: string;
            /**
                * <p>Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter,
                * 		only metric alarms are returned.</p>
                */
            AlarmTypes?: (AlarmType | string)[];
            /**
                * <p>If you use this parameter and specify the name of a composite alarm, the operation returns
                * 			information about the "children" alarms
                * 			of the alarm you specify. These are the metric alarms and composite alarms referenced in the
                * 			<code>AlarmRule</code> field of the composite alarm that you specify in
                * 			<code>ChildrenOfAlarmName</code>. Information about the composite alarm that you name in
                * 			<code>ChildrenOfAlarmName</code> is not returned.</p>
                * 		       <p>If you specify <code>ChildrenOfAlarmName</code>, you cannot specify any other parameters in the request except
                * 			for <code>MaxRecords</code> and <code>NextToken</code>. If you do so, you
                * 			receive a validation
                * 			error.</p>
                * 		       <note>
                *             <p>Only the <code>Alarm Name</code>, <code>ARN</code>, <code>StateValue</code> (OK/ALARM/INSUFFICIENT_DATA), and <code>StateUpdatedTimestamp</code>
                * 			information are returned by this operation
                * 			when you use this parameter. To get complete information about
                * 			these alarms, perform another <code>DescribeAlarms</code> operation and specify
                * 			the parent alarm names in the <code>AlarmNames</code> parameter.</p>
                *          </note>
                */
            ChildrenOfAlarmName?: string;
            /**
                * <p>If you use this parameter and specify the name of a metric or composite alarm, the operation returns
                * 			information about the "parent" alarms
                * 			of the alarm you specify. These are the composite alarms that have <code>AlarmRule</code>
                * 			parameters that reference
                * 			the alarm named in <code>ParentsOfAlarmName</code>. Information about the alarm that you specify in
                * 			<code>ParentsOfAlarmName</code> is not returned.</p>
                * 		       <p>If you specify <code>ParentsOfAlarmName</code>, you cannot specify any other parameters in the request except
                * 			for <code>MaxRecords</code> and <code>NextToken</code>. If you do so, you receive a validation
                * 			error.</p>
                * 		       <note>
                *             <p>Only the Alarm Name and ARN are returned by this operation when you use this parameter. To get complete information about
                * 			these alarms, perform another <code>DescribeAlarms</code> operation and specify
                * 			the parent alarm names in the <code>AlarmNames</code> parameter.</p>
                *          </note>
                */
            ParentsOfAlarmName?: string;
            /**
                * <p>Specify this parameter to receive information only about alarms that are currently in the state that you specify.</p>
                */
            StateValue?: StateValue | string;
            /**
                * <p>Use this parameter to filter the results of the operation to only those alarms that
                * 		use a certain alarm action. For example, you could specify the ARN of an SNS topic to find all
                * 		alarms that send notifications to that topic.</p>
                */
            ActionPrefix?: string;
            /**
                * <p>The maximum number of alarm descriptions to retrieve.</p>
                */
            MaxRecords?: number;
            /**
                * <p>The token returned by a previous call to indicate that there is more data
                * 			available.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAlarmsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAlarmsInput) => any;
    }
    export type Statistic = "Average" | "Maximum" | "Minimum" | "SampleCount" | "Sum";
    /**
        * <p>The details about a metric alarm.</p>
        */
    export interface MetricAlarm {
            /**
                * <p>The name of the alarm.</p>
                */
            AlarmName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the alarm.</p>
                */
            AlarmArn?: string;
            /**
                * <p>The description of the alarm.</p>
                */
            AlarmDescription?: string;
            /**
                * <p>The time stamp of the last update to the alarm configuration.</p>
                */
            AlarmConfigurationUpdatedTimestamp?: Date;
            /**
                * <p>Indicates whether actions should be executed during any changes to the alarm state.</p>
                */
            ActionsEnabled?: boolean;
            /**
                * <p>The actions to execute when this alarm transitions to the <code>OK</code> state
                * 			from any other state. Each action is specified as an Amazon Resource Name (ARN).</p>
                */
            OKActions?: string[];
            /**
                * <p>The actions to execute when this alarm transitions to the <code>ALARM</code> state
                * 			from any other state. Each action is specified as an Amazon Resource Name (ARN).</p>
                */
            AlarmActions?: string[];
            /**
                * <p>The actions to execute when this alarm transitions to the <code>INSUFFICIENT_DATA</code> state
                * 			from any other state. Each action is specified as an Amazon Resource Name (ARN).</p>
                */
            InsufficientDataActions?: string[];
            /**
                * <p>The state value for the alarm.</p>
                */
            StateValue?: StateValue | string;
            /**
                * <p>An explanation for the alarm state, in text format.</p>
                */
            StateReason?: string;
            /**
                * <p>An explanation for the alarm state, in JSON format.</p>
                */
            StateReasonData?: string;
            /**
                * <p>The time stamp of the last update to the alarm state.</p>
                */
            StateUpdatedTimestamp?: Date;
            /**
                * <p>The name of the metric associated with the alarm, if this is an alarm
                * 		based on a single metric.</p>
                */
            MetricName?: string;
            /**
                * <p>The namespace of the metric associated with the alarm.</p>
                */
            Namespace?: string;
            /**
                * <p>The statistic for the metric associated with the alarm, other than percentile.
                * 		    For percentile statistics, use <code>ExtendedStatistic</code>.</p>
                */
            Statistic?: Statistic | string;
            /**
                * <p>The percentile statistic for the metric associated with the alarm. Specify a value between
                * 			p0.0 and p100.</p>
                */
            ExtendedStatistic?: string;
            /**
                * <p>The dimensions for the metric associated with the alarm.</p>
                */
            Dimensions?: Dimension[];
            /**
                * <p>The period, in seconds, over which the statistic is applied.</p>
                */
            Period?: number;
            /**
                * <p>The unit of the metric associated with the alarm.</p>
                */
            Unit?: StandardUnit | string;
            /**
                * <p>The number of periods over which data is compared to the specified threshold.</p>
                */
            EvaluationPeriods?: number;
            /**
                * <p>The number of data points that must be breaching to trigger the alarm.</p>
                */
            DatapointsToAlarm?: number;
            /**
                * <p>The value to compare with the specified statistic.</p>
                */
            Threshold?: number;
            /**
                * <p>The arithmetic operation to use when comparing the specified
                * 			statistic and threshold. The specified statistic value is used as the first operand.</p>
                */
            ComparisonOperator?: ComparisonOperator | string;
            /**
                * <p>Sets how this alarm is to handle missing data points. The valid values
                *         	are <code>breaching</code>, <code>notBreaching</code>, <code>ignore</code>, and
                *         	<code>missing</code>. For more information, see
                *         	<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data">Configuring how CloudWatch alarms treat missing data</a>.</p>
                * 		       <p>If this parameter is omitted, the default
                *         	behavior of <code>missing</code> is used.</p>
                */
            TreatMissingData?: string;
            /**
                * <p>Used only for alarms based on percentiles. If <code>ignore</code>, the alarm state does not change
                * 			during periods with too few data points to be statistically significant. If <code>evaluate</code> or this
                * 			parameter is not used, the alarm is always evaluated and possibly changes state no matter
                * 			how many data points are available.</p>
                */
            EvaluateLowSampleCountPercentile?: string;
            /**
                * <p>An array of MetricDataQuery structures, used in an alarm based on a
                * 			metric math expression. Each structure either retrieves a
                * 			metric or performs a math expression.
                *
                * 			One item in the Metrics array is the math expression that the alarm watches.
                * 			This expression by designated by having <code>ReturnData</code> set to
                * 			true.</p>
                */
            Metrics?: MetricDataQuery[];
            /**
                * <p>In an alarm based on an anomaly detection model, this is the ID of the
                * 			<code>ANOMALY_DETECTION_BAND</code> function
                * 			used as the threshold for the alarm.</p>
                */
            ThresholdMetricId?: string;
    }
    export namespace MetricAlarm {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricAlarm) => any;
    }
    export interface DescribeAlarmsOutput {
            /**
                * <p>The information about any composite alarms returned by the operation.</p>
                */
            CompositeAlarms?: CompositeAlarm[];
            /**
                * <p>The information about any metric alarms returned by the operation.</p>
                */
            MetricAlarms?: MetricAlarm[];
            /**
                * <p>The token that marks the start of the next batch of returned results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAlarmsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAlarmsOutput) => any;
    }
    export interface DescribeAlarmsForMetricInput {
            /**
                * <p>The name of the metric.</p>
                */
            MetricName: string | undefined;
            /**
                * <p>The namespace of the metric.</p>
                */
            Namespace: string | undefined;
            /**
                * <p>The statistic for the metric, other than percentiles.
                * 		    For percentile statistics, use <code>ExtendedStatistics</code>.</p>
                */
            Statistic?: Statistic | string;
            /**
                * <p>The percentile statistic for the metric. Specify a value between
                * 		    p0.0 and p100.</p>
                */
            ExtendedStatistic?: string;
            /**
                * <p>The dimensions associated with the metric. If the metric has any associated
                * 			dimensions, you must specify them in order for the call to succeed.</p>
                */
            Dimensions?: Dimension[];
            /**
                * <p>The period, in seconds, over which the statistic is applied.</p>
                */
            Period?: number;
            /**
                * <p>The unit for the metric.</p>
                */
            Unit?: StandardUnit | string;
    }
    export namespace DescribeAlarmsForMetricInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAlarmsForMetricInput) => any;
    }
    export interface DescribeAlarmsForMetricOutput {
            /**
                * <p>The information for each alarm with the specified metric.</p>
                */
            MetricAlarms?: MetricAlarm[];
    }
    export namespace DescribeAlarmsForMetricOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAlarmsForMetricOutput) => any;
    }
    export interface DescribeAnomalyDetectorsInput {
            /**
                * <p>Use the token returned by the previous operation to request the next page of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return in one operation. The maximum
                * 			value that you can specify is 100.</p>
                * 			      <p>To retrieve the remaining results, make another call with the returned
                * 			<code>NextToken</code> value. </p>
                */
            MaxResults?: number;
            /**
                * <p>Limits the results to only the anomaly detection models that
                * 			are associated with the specified namespace.</p>
                */
            Namespace?: string;
            /**
                * <p>Limits the results to only the anomaly detection models that are associated with the
                * 			specified metric name. If there are multiple metrics with this name in different
                * 			namespaces that have anomaly detection models, they're all returned.</p>
                */
            MetricName?: string;
            /**
                * <p>Limits the results to only the anomaly detection models that are associated with the
                * 			specified metric dimensions. If there are multiple metrics that have these dimensions
                * 			and have anomaly detection models associated, they're all returned.</p>
                */
            Dimensions?: Dimension[];
            /**
                * <p>The anomaly detector types to request when using <code>DescribeAnomalyDetectorsInput</code>.
                * 			If empty, defaults to <code>SINGLE_METRIC</code>.</p>
                */
            AnomalyDetectorTypes?: (AnomalyDetectorType | string)[];
    }
    export namespace DescribeAnomalyDetectorsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAnomalyDetectorsInput) => any;
    }
    export interface DescribeAnomalyDetectorsOutput {
            /**
                * <p>The list of anomaly detection models returned by the operation.</p>
                */
            AnomalyDetectors?: AnomalyDetector[];
            /**
                * <p>A token that you can use in a subsequent operation to
                * 		retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAnomalyDetectorsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAnomalyDetectorsOutput) => any;
    }
    export interface DescribeInsightRulesInput {
            /**
                * <p>Include this value, if it was returned by the previous operation, to get the next set of rules.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return in one operation. If you omit this
                * 		parameter, the default of 500 is used.</p>
                */
            MaxResults?: number;
    }
    export namespace DescribeInsightRulesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeInsightRulesInput) => any;
    }
    /**
        * <p>This structure contains the definition
        * 			for a Contributor Insights rule.
        * 			For more information about this rule,
        * 			see<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html">
        * 				Using Constributor Insights to analyze high-cardinality data</a>
        * 			in the <i>Amazon CloudWatch User Guide</i>.</p>
        */
    export interface InsightRule {
            /**
                * <p>The name of the rule.</p>
                */
            Name: string | undefined;
            /**
                * <p>Indicates whether the rule is enabled or disabled.</p>
                */
            State: string | undefined;
            /**
                * <p>For rules that you create, this is always <code>{"Name": "CloudWatchLogRule", "Version": 1}</code>. For managed rules,
                * 			this is <code>{"Name": "ServiceLogRule", "Version": 1}</code>
                *          </p>
                */
            Schema: string | undefined;
            /**
                * <p>The definition of the rule, as a JSON object. The definition contains the keywords used to define contributors,
                * 			the value to aggregate on if this rule returns a sum instead of a count, and the filters. For details on the valid syntax, see
                * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights-RuleSyntax.html">Contributor Insights
                * 				Rule Syntax</a>.</p>
                */
            Definition: string | undefined;
    }
    export namespace InsightRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InsightRule) => any;
    }
    export interface DescribeInsightRulesOutput {
            /**
                * <p>If this parameter is present, it is a token that marks the start of the next batch of returned results.      </p>
                */
            NextToken?: string;
            /**
                * <p>The rules returned by the operation.</p>
                */
            InsightRules?: InsightRule[];
    }
    export namespace DescribeInsightRulesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeInsightRulesOutput) => any;
    }
    /**
        * <p>Represents filters for a dimension.</p>
        */
    export interface DimensionFilter {
            /**
                * <p>The dimension name to be matched.</p>
                */
            Name: string | undefined;
            /**
                * <p>The value of the dimension to be matched.</p>
                */
            Value?: string;
    }
    export namespace DimensionFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DimensionFilter) => any;
    }
    export interface DisableAlarmActionsInput {
            /**
                * <p>The names of the alarms.</p>
                */
            AlarmNames: string[] | undefined;
    }
    export namespace DisableAlarmActionsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableAlarmActionsInput) => any;
    }
    export interface DisableInsightRulesInput {
            /**
                * <p>An array of the rule names to disable. If you need to find out the names of your rules, use <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html">DescribeInsightRules</a>.</p>
                */
            RuleNames: string[] | undefined;
    }
    export namespace DisableInsightRulesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableInsightRulesInput) => any;
    }
    export interface DisableInsightRulesOutput {
            /**
                * <p>An array listing the rules that could not be disabled. You cannot disable built-in rules.</p>
                */
            Failures?: PartialFailure[];
    }
    export namespace DisableInsightRulesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableInsightRulesOutput) => any;
    }
    export interface EnableAlarmActionsInput {
            /**
                * <p>The names of the alarms.</p>
                */
            AlarmNames: string[] | undefined;
    }
    export namespace EnableAlarmActionsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableAlarmActionsInput) => any;
    }
    export interface EnableInsightRulesInput {
            /**
                * <p>An array of the rule names to enable. If you need to find out the names of your rules, use <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html">DescribeInsightRules</a>.</p>
                */
            RuleNames: string[] | undefined;
    }
    export namespace EnableInsightRulesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableInsightRulesInput) => any;
    }
    export interface EnableInsightRulesOutput {
            /**
                * <p>An array listing the rules that could not be enabled. You cannot disable or enable built-in rules.</p>
                */
            Failures?: PartialFailure[];
    }
    export namespace EnableInsightRulesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableInsightRulesOutput) => any;
    }
    /**
        * <p>The operation exceeded one or more limits.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    export interface GetDashboardInput {
            /**
                * <p>The name of the dashboard to be described.</p>
                */
            DashboardName: string | undefined;
    }
    export namespace GetDashboardInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDashboardInput) => any;
    }
    export interface GetDashboardOutput {
            /**
                * <p>The Amazon Resource Name (ARN) of the dashboard.</p>
                */
            DashboardArn?: string;
            /**
                * <p>The detailed information about the dashboard, including what widgets are included and their location
                * 			on the dashboard. For more information about the <code>DashboardBody</code> syntax,
                * 			see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html">Dashboard Body Structure and Syntax</a>. </p>
                */
            DashboardBody?: string;
            /**
                * <p>The name of the dashboard.</p>
                */
            DashboardName?: string;
    }
    export namespace GetDashboardOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDashboardOutput) => any;
    }
    export interface GetInsightRuleReportInput {
            /**
                * <p>The name of the rule that you want to see data from.</p>
                */
            RuleName: string | undefined;
            /**
                * <p>The start time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as
                * 			<code>yyyy-MM-dd'T'HH:mm:ss</code>. For example,
                * 			<code>2019-07-01T23:59:59</code>.</p>
                */
            StartTime: Date | undefined;
            /**
                * <p>The end time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as
                * 			<code>yyyy-MM-dd'T'HH:mm:ss</code>. For example,
                * 			<code>2019-07-01T23:59:59</code>.</p>
                */
            EndTime: Date | undefined;
            /**
                * <p>The period, in seconds, to use for the statistics in the <code>InsightRuleMetricDatapoint</code> results.</p>
                */
            Period: number | undefined;
            /**
                * <p>The maximum number of contributors to include in the report. The range is 1 to 100. If you omit this, the default of 10 is used.</p>
                */
            MaxContributorCount?: number;
            /**
                * <p>Specifies which metrics to use for aggregation of contributor values for the report. You can specify one or more
                * 		of the following metrics:</p>
                * 		       <ul>
                *             <li>
                * 				           <p>
                *                   <code>UniqueContributors</code> -- the number of unique contributors for each data point.</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                *                   <code>MaxContributorValue</code> -- the value of the top contributor for each data point. The identity of the
                * 					contributor might change for each data point in the graph.</p>
                * 				           <p>If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the
                * 					most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified
                * 					by the rule's <code>Value</code>, during that period.</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                *                   <code>SampleCount</code> -- the number of data points matched by the rule.</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                *                   <code>Sum</code> -- the sum of the values from all contributors during the time period represented by that data point.</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                *                   <code>Minimum</code> -- the minimum value from a single observation during the time period represented by that data point.</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                *                   <code>Maximum</code> -- the maximum value from a single observation during the time period represented by that data point.</p>
                * 			         </li>
                *             <li>
                * 				           <p>
                *                   <code>Average</code> -- the average value from all contributors during the time period represented by that data point.</p>
                * 			         </li>
                *          </ul>
                */
            Metrics?: string[];
            /**
                * <p>Determines what statistic to use to rank the contributors. Valid values are SUM and MAXIMUM.</p>
                */
            OrderBy?: string;
    }
    export namespace GetInsightRuleReportInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInsightRuleReportInput) => any;
    }
    /**
        * <p>One data point related to one contributor.</p>
        * 		       <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetInsightRuleReport.html">GetInsightRuleReport</a> and
        * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_InsightRuleContributor.html">InsightRuleContributor</a>.</p>
        */
    export interface InsightRuleContributorDatapoint {
            /**
                * <p>The timestamp of the data point.</p>
                */
            Timestamp: Date | undefined;
            /**
                * <p>The approximate value that this contributor added during this timestamp.</p>
                */
            ApproximateValue: number | undefined;
    }
    export namespace InsightRuleContributorDatapoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InsightRuleContributorDatapoint) => any;
    }
    /**
        * <p>One of the unique contributors found by a Contributor Insights rule. If the rule contains multiple keys, then
        * 			a unique contributor is a unique combination of values from all the keys in the rule.</p>
        * 		       <p>If the rule contains a single key, then each unique contributor is each unique value for this key.</p>
        * 		       <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetInsightRuleReport.html">GetInsightRuleReport</a>.</p>
        */
    export interface InsightRuleContributor {
            /**
                * <p>One of the log entry field keywords that is used to define contributors for this rule.</p>
                */
            Keys: string[] | undefined;
            /**
                * <p>An approximation of the aggregate value that comes from this contributor.</p>
                */
            ApproximateAggregateValue: number | undefined;
            /**
                * <p>An array of the data points where this contributor is present. Only the data points when this contributor appeared are included in the array.</p>
                */
            Datapoints: InsightRuleContributorDatapoint[] | undefined;
    }
    export namespace InsightRuleContributor {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InsightRuleContributor) => any;
    }
    /**
        * <p>One data point from the metric time series returned in a Contributor Insights rule report.</p>
        * 		       <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetInsightRuleReport.html">GetInsightRuleReport</a>.</p>
        */
    export interface InsightRuleMetricDatapoint {
            /**
                * <p>The timestamp of the data point.</p>
                */
            Timestamp: Date | undefined;
            /**
                * <p>The number of unique contributors who published data during this timestamp.</p>
                * 		       <p>This statistic is returned only if you included it in the <code>Metrics</code> array in your request.</p>
                */
            UniqueContributors?: number;
            /**
                * <p>The maximum value provided by one contributor during this timestamp. Each timestamp is evaluated separately,
                * 			so the identity of the max contributor
                * 		could be different for each timestamp.</p>
                * 		       <p>This statistic is returned only if you included it in the <code>Metrics</code> array in your request.</p>
                */
            MaxContributorValue?: number;
            /**
                * <p>The number of occurrences that matched the rule during this data point.</p>
                * 		       <p>This statistic is returned only if you included it in the <code>Metrics</code> array in your request.</p>
                */
            SampleCount?: number;
            /**
                * <p>The average value from all contributors during the time period represented by that data point.</p>
                * 		       <p>This statistic is returned only if you included it in the <code>Metrics</code> array in your request.</p>
                */
            Average?: number;
            /**
                * <p>The sum of the values from all contributors during the time period represented by that data point.</p>
                * 		       <p>This statistic is returned only if you included it in the <code>Metrics</code> array in your request.</p>
                */
            Sum?: number;
            /**
                * <p>The minimum value from a single contributor during the time period represented by that data point.</p>
                * 		       <p>This statistic is returned only if you included it in the <code>Metrics</code> array in your request.</p>
                */
            Minimum?: number;
            /**
                * <p>The maximum value from a single occurence from a single contributor during the time period represented by that data point.</p>
                * 		       <p>This statistic is returned only if you included it in the <code>Metrics</code> array in your request.</p>
                */
            Maximum?: number;
    }
    export namespace InsightRuleMetricDatapoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InsightRuleMetricDatapoint) => any;
    }
    export interface GetInsightRuleReportOutput {
            /**
                * <p>An array of the strings used as the keys for this rule. The keys are the dimensions used to classify contributors.
                * 			If the rule contains more than one key, then each unique combination of values for the keys is counted as a unique contributor.</p>
                */
            KeyLabels?: string[];
            /**
                * <p>Specifies whether this rule aggregates contributor data by COUNT or SUM.</p>
                */
            AggregationStatistic?: string;
            /**
                * <p>The sum of the values from all individual contributors that match the rule.</p>
                */
            AggregateValue?: number;
            /**
                * <p>An approximate count of the unique contributors found by this rule in this time period.</p>
                */
            ApproximateUniqueCount?: number;
            /**
                * <p>An array of the unique contributors found by this rule in this time period. If the rule contains multiple keys, each combination of values
                * 		for the keys counts as a unique contributor.</p>
                */
            Contributors?: InsightRuleContributor[];
            /**
                * <p>A time series of metric data points that matches the time period in the rule request.</p>
                */
            MetricDatapoints?: InsightRuleMetricDatapoint[];
    }
    export namespace GetInsightRuleReportOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInsightRuleReportOutput) => any;
    }
    /**
        * <p>This structure includes the <code>Timezone</code> parameter, which you can use
        * 			to specify your time zone so that the labels that are associated with returned metrics display the
        * 			correct time
        * 			for your time zone. </p>
        * 		       <p>The <code>Timezone</code> value affects a label only if you have a time-based
        * 		dynamic expression in the label. For more information about dynamic expressions in labels,
        * 		see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html">Using Dynamic Labels</a>.</p>
        */
    export interface LabelOptions {
            /**
                * <p>The time zone to use for metric data return in this operation.
                * 			The format is <code>+</code> or <code>-</code> followed by four digits.
                * 			The first two digits indicate the number of hours ahead or behind of UTC, and
                * 			the final two digits are the number of minutes. For example, +0130 indicates a time zone that is 1 hour
                * 			and 30 minutes ahead of UTC. The default is +0000. </p>
                */
            Timezone?: string;
    }
    export namespace LabelOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LabelOptions) => any;
    }
    export interface GetMetricDataInput {
            /**
                * <p>The metric queries to be returned. A single <code>GetMetricData</code> call can include as many as 500 <code>MetricDataQuery</code>
                * 		structures. Each of these structures can specify either a metric to retrieve, a Metrics Insights query,
                * 		or a math expression to perform on retrieved data. </p>
                */
            MetricDataQueries: MetricDataQuery[] | undefined;
            /**
                * <p>The time stamp indicating the earliest data to be returned.</p>
                * 		       <p>The value specified is inclusive; results include data points with the specified time stamp. </p>
                * 		       <p>CloudWatch rounds the specified time stamp as follows:</p>
                * 		       <ul>
                *             <li>
                *                <p>Start time less than 15 days ago - Round down to the nearest whole minute.
                * 				For example, 12:32:34 is rounded down to 12:32:00.</p>
                *             </li>
                *             <li>
                *                <p>Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval.
                * 				For example, 12:32:34 is rounded down to 12:30:00.</p>
                *             </li>
                *             <li>
                *                <p>Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval.
                * 				For example, 12:32:34 is rounded down to 12:00:00.</p>
                *             </li>
                *          </ul>
                * 		       <p>If you set <code>Period</code> to 5, 10, or 30, the start time of your request is
                * 			rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions
                * 			of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous
                * 			10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to
                * 			01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a
                * 			period of 5 seconds, you receive data
                * 			timestamped between 15:02:15 and 15:07:15.
                * 		</p>
                * 		       <p>For better performance, specify <code>StartTime</code> and <code>EndTime</code>
                * 		values that align with the value of the metric's <code>Period</code> and sync up with
                * 		the beginning and end of an hour. For example, if the <code>Period</code> of a metric
                * 		is 5 minutes, specifying 12:05 or 12:30 as <code>StartTime</code> can get a faster response
                * 			from CloudWatch than setting 12:07 or 12:29 as the <code>StartTime</code>.</p>
                */
            StartTime: Date | undefined;
            /**
                * <p>The time stamp indicating the latest data to be returned.</p>
                * 		       <p>The value specified is exclusive; results include data points up to the specified time stamp.</p>
                * 		       <p>For better performance, specify <code>StartTime</code> and <code>EndTime</code>
                * 			values that align with the value of the metric's <code>Period</code> and sync up with
                * 			the beginning and end of an hour. For example, if the <code>Period</code> of a metric
                * 			is 5 minutes, specifying 12:05 or 12:30 as <code>EndTime</code> can get a faster response
                * 			from CloudWatch than setting 12:07 or 12:29 as the <code>EndTime</code>.</p>
                */
            EndTime: Date | undefined;
            /**
                * <p>Include this value, if it was returned by the previous <code>GetMetricData</code> operation,
                * 			to get the next set of data points.</p>
                */
            NextToken?: string;
            /**
                * <p>The order in which data points should be returned. <code>TimestampDescending</code> returns the newest data first and paginates
                * 			when the <code>MaxDatapoints</code> limit is reached. <code>TimestampAscending</code> returns the oldest data first and paginates
                * 			when the <code>MaxDatapoints</code> limit is reached.</p>
                */
            ScanBy?: ScanBy | string;
            /**
                * <p>The maximum number of data points the request should return before paginating. If you omit
                * 			this, the default of 100,800 is used.</p>
                */
            MaxDatapoints?: number;
            /**
                * <p>This structure includes the <code>Timezone</code> parameter, which you can use
                * 			to specify your time zone so that the labels of returned data display the
                * 			correct time
                * 			for your time zone. </p>
                */
            LabelOptions?: LabelOptions;
    }
    export namespace GetMetricDataInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMetricDataInput) => any;
    }
    /**
        * <p>A message returned by the <code>GetMetricData</code>API, including a code and a description.</p>
        * 		       <p>If a cross-Region <code>GetMetricData</code> operation fails with a code of <code>Forbidden</code> and a
        * 			value of <code>Authentication too complex to
        * 			retrieve cross region data</code>, you can correct the problem by running the <code>GetMetricData</code>
        * 		operation in the same Region where the metric data is.</p>
        */
    export interface MessageData {
            /**
                * <p>The error code or status code associated with the message.</p>
                */
            Code?: string;
            /**
                * <p>The message text.</p>
                */
            Value?: string;
    }
    export namespace MessageData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MessageData) => any;
    }
    export enum StatusCode {
            COMPLETE = "Complete",
            INTERNAL_ERROR = "InternalError",
            PARTIAL_DATA = "PartialData"
    }
    /**
        * <p>A <code>GetMetricData</code> call returns an array of <code>MetricDataResult</code>
        * 			structures. Each of these structures includes the data points for that metric, along
        * 			with the timestamps of those data points and other identifying information.</p>
        */
    export interface MetricDataResult {
            /**
                * <p>The short name you specified to represent this metric.</p>
                */
            Id?: string;
            /**
                * <p>The human-readable label associated with the data.</p>
                */
            Label?: string;
            /**
                * <p>The timestamps for the data points, formatted in Unix timestamp format. The number of
                * 			timestamps always matches the number of values and the value for Timestamps[x] is
                * 			Values[x].</p>
                */
            Timestamps?: Date[];
            /**
                * <p>The data points for the metric corresponding to <code>Timestamps</code>. The number of
                * 			values always matches the number of timestamps and the timestamp for Values[x] is
                * 			Timestamps[x].</p>
                */
            Values?: number[];
            /**
                * <p>The status of the returned data. <code>Complete</code> indicates that all data points in the requested time range were returned.
                * 			<code>PartialData</code> means that an incomplete set of data points were returned.
                * 					You can use the <code>NextToken</code> value that was returned and repeat your request to get more data points.
                * 			<code>NextToken</code> is not returned if you are performing a math expression. <code>InternalError</code>
                * 			indicates that an error occurred. Retry your request using <code>NextToken</code>, if present.</p>
                */
            StatusCode?: StatusCode | string;
            /**
                * <p>A list of messages with additional information about the data returned.</p>
                */
            Messages?: MessageData[];
    }
    export namespace MetricDataResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricDataResult) => any;
    }
    export interface GetMetricDataOutput {
            /**
                * <p>The metrics that are returned, including the metric name, namespace, and dimensions.</p>
                */
            MetricDataResults?: MetricDataResult[];
            /**
                * <p>A token that marks the next batch of returned results.</p>
                */
            NextToken?: string;
            /**
                * <p>Contains a message about this <code>GetMetricData</code> operation, if the operation results in such a message.
                * 			An example of a message that
                * 			might be returned is <code>Maximum number of allowed metrics exceeded</code>. If there is a message, as much of the
                * 			operation as possible is still executed.</p>
                * 		       <p>A message appears here only if it is related to the global <code>GetMetricData</code> operation. Any message
                * 			about a specific metric returned by the operation appears in the <code>MetricDataResult</code> object returned for that metric.</p>
                */
            Messages?: MessageData[];
    }
    export namespace GetMetricDataOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMetricDataOutput) => any;
    }
    export interface GetMetricStatisticsInput {
            /**
                * <p>The namespace of the metric, with or without spaces.</p>
                */
            Namespace: string | undefined;
            /**
                * <p>The name of the metric, with or without spaces.</p>
                */
            MetricName: string | undefined;
            /**
                * <p>The dimensions. If the metric contains multiple dimensions, you must include a value for each dimension.
                * 			CloudWatch treats each unique combination of dimensions as a separate metric.
                * 		    If a specific combination of dimensions was not published, you can't retrieve statistics for it.
                * 		    You must specify the same dimensions that were used when the metrics were created. For an example,
                * 		    see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#dimension-combinations">Dimension Combinations</a> in the <i>Amazon CloudWatch User Guide</i>. For more information about specifying dimensions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html">Publishing Metrics</a> in the
                * 			<i>Amazon CloudWatch User Guide</i>.</p>
                */
            Dimensions?: Dimension[];
            /**
                * <p>The time stamp that determines the first data point to return. Start times are
                * 			evaluated relative to the time that CloudWatch receives the request.</p>
                * 	        <p>The value specified is inclusive; results include data points with the specified time stamp.
                * 	    	In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example, 2016-10-03T23:00:00Z).</p>
                * 		       <p>CloudWatch rounds the specified time stamp as follows:</p>
                * 		       <ul>
                *             <li>
                *                <p>Start time less than 15 days ago - Round down to the nearest whole minute.
                * 			    For example, 12:32:34 is rounded down to 12:32:00.</p>
                *             </li>
                *             <li>
                *                <p>Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval.
                * 			    For example, 12:32:34 is rounded down to 12:30:00.</p>
                *             </li>
                *             <li>
                *                <p>Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval.
                * 			    For example, 12:32:34 is rounded down to 12:00:00.</p>
                *             </li>
                *          </ul>
                * 		       <p>If you set <code>Period</code> to 5, 10, or 30, the start time of your request is
                * 			rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions
                * 			of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous
                * 			10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to
                * 			01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a
                * 			period of 5 seconds, you receive data
                * 			timestamped between 15:02:15 and 15:07:15.
                * 		</p>
                */
            StartTime: Date | undefined;
            /**
                * <p>The time stamp that determines the last data point to return.</p>
                * 		       <p>The value specified is exclusive; results include data points up to the specified time stamp.
                * 			In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example, 2016-10-10T23:00:00Z).</p>
                */
            EndTime: Date | undefined;
            /**
                * <p>The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can
                * 			be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected
                * 			at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics
                * 		are those metrics stored by a <code>PutMetricData</code> call that includes a <code>StorageResolution</code> of 1 second.</p>
                * 		       <p>If the <code>StartTime</code> parameter specifies a time stamp that is greater than
                * 		    3 hours ago, you must specify the period as follows or no data points in that time range is returned:</p>
                * 		       <ul>
                *             <li>
                *                <p>Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).</p>
                *             </li>
                *             <li>
                *                <p>Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).</p>
                *             </li>
                *             <li>
                *                <p>Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).</p>
                *             </li>
                *          </ul>
                */
            Period: number | undefined;
            /**
                * <p>The metric statistics, other than percentile. For percentile statistics,
                * 		    use <code>ExtendedStatistics</code>. When calling <code>GetMetricStatistics</code>, you must
                * 		specify either <code>Statistics</code> or <code>ExtendedStatistics</code>, but not both.</p>
                */
            Statistics?: (Statistic | string)[];
            /**
                * <p>The percentile statistics. Specify values between p0.0 and p100. When calling <code>GetMetricStatistics</code>, you must
                * 			specify either <code>Statistics</code> or <code>ExtendedStatistics</code>, but not both. Percentile statistics are not
                * 			available for metrics when any of the metric values are negative numbers.</p>
                */
            ExtendedStatistics?: string[];
            /**
                * <p>The unit for a given metric.
                * 			If you omit <code>Unit</code>, all data that was collected with any unit is returned, along with the corresponding units that were specified
                * 			when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified.
                * 			If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.</p>
                */
            Unit?: StandardUnit | string;
    }
    export namespace GetMetricStatisticsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMetricStatisticsInput) => any;
    }
    export interface GetMetricStatisticsOutput {
            /**
                * <p>A label for the specified metric.</p>
                */
            Label?: string;
            /**
                * <p>The data points for the specified metric.</p>
                */
            Datapoints?: Datapoint[];
    }
    export namespace GetMetricStatisticsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMetricStatisticsOutput) => any;
    }
    export interface GetMetricStreamInput {
            /**
                * <p>The name of the metric stream to retrieve information about.</p>
                */
            Name: string | undefined;
    }
    export namespace GetMetricStreamInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMetricStreamInput) => any;
    }
    /**
        * <p>This structure contains the name of one of the metric namespaces that is listed in
        * 		a filter of a metric stream.</p>
        */
    export interface MetricStreamFilter {
            /**
                * <p>The name of the metric namespace in the filter.</p>
                */
            Namespace?: string;
    }
    export namespace MetricStreamFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricStreamFilter) => any;
    }
    export enum MetricStreamOutputFormat {
            JSON = "json",
            OPEN_TELEMETRY_0_7 = "opentelemetry0.7"
    }
    /**
        * <p>This object contains the information for one metric that is to be streamed with
        * 		additional statistics.</p>
        */
    export interface MetricStreamStatisticsMetric {
            /**
                * <p>The namespace of the metric.</p>
                */
            Namespace: string | undefined;
            /**
                * <p>The name of the metric.</p>
                */
            MetricName: string | undefined;
    }
    export namespace MetricStreamStatisticsMetric {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricStreamStatisticsMetric) => any;
    }
    /**
        * <p>By default, a metric stream always sends the <code>MAX</code>, <code>MIN</code>, <code>SUM</code>,
        * 			and <code>SAMPLECOUNT</code> statistics for each metric that is streamed. This structure contains information for
        * 			one metric that includes additional statistics in the stream. For more information about statistics,
        * 			see CloudWatch, listed in
        * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html">
        * 				CloudWatch statistics definitions</a>.</p>
        */
    export interface MetricStreamStatisticsConfiguration {
            /**
                * <p>An array of metric name and namespace pairs that stream the additional statistics listed
                * 		in the value of the <code>AdditionalStatistics</code> parameter. There can be as many as
                * 		100 pairs in the array.</p>
                * 		       <p>All metrics that match the combination of metric name and namespace will be streamed
                * 		with the additional statistics, no matter their dimensions.</p>
                */
            IncludeMetrics: MetricStreamStatisticsMetric[] | undefined;
            /**
                * <p>The list of additional statistics that are to be streamed for the metrics listed
                * 		in the <code>IncludeMetrics</code> array in this structure. This list can include as many as 20 statistics.</p>
                * 		       <p>If the <code>OutputFormat</code> for the stream is <code>opentelemetry0.7</code>, the only
                * 			valid values are <code>p<i>??</i>
                *             </code> percentile statistics such as <code>p90</code>, <code>p99</code> and so on.</p>
                * 		       <p>If the <code>OutputFormat</code> for the stream is <code>json</code>,
                * 			the valid values include the abbreviations for all of the statistics listed in
                * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html">
                * 				CloudWatch statistics definitions</a>. For example, this includes
                * 		<code>tm98, </code>
                *             <code>wm90</code>, <code>PR(:300)</code>, and so on.</p>
                */
            AdditionalStatistics: string[] | undefined;
    }
    export namespace MetricStreamStatisticsConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricStreamStatisticsConfiguration) => any;
    }
    export interface GetMetricStreamOutput {
            /**
                * <p>The ARN of the metric stream.</p>
                */
            Arn?: string;
            /**
                * <p>The name of the metric stream.</p>
                */
            Name?: string;
            /**
                * <p>If this array of metric namespaces is present, then these
                * 			namespaces are the only
                * 		metric namespaces that are streamed by this metric stream.</p>
                */
            IncludeFilters?: MetricStreamFilter[];
            /**
                * <p>If this array of metric namespaces is present, then these namespaces are the only
                * 			metric namespaces that are not streamed by this metric stream. In this case, all other metric namespaces in
                * 		the account are streamed by this metric stream.</p>
                */
            ExcludeFilters?: MetricStreamFilter[];
            /**
                * <p>The ARN of the Amazon Kinesis Firehose delivery stream that is used by
                * 		this metric stream.</p>
                */
            FirehoseArn?: string;
            /**
                * <p>The ARN of the IAM role that is used by this metric stream.</p>
                */
            RoleArn?: string;
            /**
                * <p>The state of the metric stream. The possible values are <code>running</code>
                * 		and <code>stopped</code>.</p>
                */
            State?: string;
            /**
                * <p>The date that the metric stream was created.</p>
                */
            CreationDate?: Date;
            /**
                * <p>The date of the most recent update to the metric stream's configuration.</p>
                */
            LastUpdateDate?: Date;
            /**
                * <p>The output format for the stream. Valid values are <code>json</code>
                * 			and <code>opentelemetry0.7</code>. For more information about metric stream
                * 			output formats, see
                * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html">
                * 				Metric streams output formats</a>.</p>
                */
            OutputFormat?: MetricStreamOutputFormat | string;
            /**
                * <p>Each entry in this array displays information about one or more metrics that include additional statistics
                * 			in the metric stream. For more information about the additional statistics, see
                * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html">
                * 				CloudWatch statistics definitions</a>. </p>
                */
            StatisticsConfigurations?: MetricStreamStatisticsConfiguration[];
    }
    export namespace GetMetricStreamOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMetricStreamOutput) => any;
    }
    export interface GetMetricWidgetImageInput {
            /**
                * <p>A JSON string that defines the bitmap graph to be retrieved. The string includes the
                * 			metrics to include in the graph, statistics, annotations, title, axis limits, and so on.
                * 			You can include only one <code>MetricWidget</code> parameter in each <code>GetMetricWidgetImage</code> call.</p>
                * 		       <p>For more information about the syntax of <code>MetricWidget</code> see
                * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Metric-Widget-Structure.html">GetMetricWidgetImage: Metric Widget Structure and Syntax</a>.</p>
                *
                * 		       <p>If any metric on the graph could not load all the requested data points, an orange triangle with an exclamation
                * 			point appears next to the graph legend.</p>
                */
            MetricWidget: string | undefined;
            /**
                * <p>The format of the resulting image. Only PNG images are supported.</p>
                *
                * 		       <p>The default is <code>png</code>. If you specify <code>png</code>, the API returns an HTTP response with the
                * 			content-type set to <code>text/xml</code>. The image data is in a <code>MetricWidgetImage</code>
                * 			field. For example:</p>
                *
                * 		       <p>
                *             <code>
                * 			<GetMetricWidgetImageResponse xmlns=<URLstring>></code>
                *          </p>
                * 		       <p>
                *             <code>  <GetMetricWidgetImageResult></code>
                *          </p>
                * 		       <p>
                *             <code>    <MetricWidgetImage></code>
                *          </p>
                * 		       <p>
                *             <code>       iVBORw0KGgoAAAANSUhEUgAAAlgAAAGQEAYAAAAip...</code>
                *          </p>
                * 		       <p>
                *             <code>    </MetricWidgetImage></code>
                *          </p>
                * 		       <p>
                *             <code>  </GetMetricWidgetImageResult></code>
                *          </p>
                * 		       <p>
                *             <code>  <ResponseMetadata></code>
                *          </p>
                * 		       <p>
                *             <code>    <RequestId>6f0d4192-4d42-11e8-82c1-f539a07e0e3b</RequestId></code>
                *          </p>
                * 		       <p>
                *             <code>  </ResponseMetadata></code>
                *          </p>
                * 		       <p>
                *             <code></GetMetricWidgetImageResponse></code>
                *          </p>
                *
                * 		       <p>The <code>image/png</code> setting is intended only for custom HTTP requests. For most
                * 			use cases, and all actions using an Amazon Web Services SDK, you should use <code>png</code>. If you specify
                * 			<code>image/png</code>, the HTTP response has a content-type set to <code>image/png</code>,
                * 			and the body of the response is a PNG image. </p>
                */
            OutputFormat?: string;
    }
    export namespace GetMetricWidgetImageInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMetricWidgetImageInput) => any;
    }
    export interface GetMetricWidgetImageOutput {
            /**
                * <p>The image of the graph, in the output format specified. The output is base64-encoded.</p>
                */
            MetricWidgetImage?: Uint8Array;
    }
    export namespace GetMetricWidgetImageOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMetricWidgetImageOutput) => any;
    }
    export interface ListDashboardsInput {
            /**
                * <p>If you specify this parameter, only
                * 			the dashboards with names starting with the specified string are listed. The maximum length is 255, and
                * 			valid characters are A-Z, a-z, 0-9, ".", "-", and "_".
                *
                * 		</p>
                */
            DashboardNamePrefix?: string;
            /**
                * <p>The token returned by a previous call to indicate that there is more data available.</p>
                */
            NextToken?: string;
    }
    export namespace ListDashboardsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDashboardsInput) => any;
    }
    export interface ListDashboardsOutput {
            /**
                * <p>The list of matching dashboards.</p>
                */
            DashboardEntries?: DashboardEntry[];
            /**
                * <p>The token that marks the start of the next batch of returned results.</p>
                */
            NextToken?: string;
    }
    export namespace ListDashboardsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDashboardsOutput) => any;
    }
    export enum RecentlyActive {
            PT3H = "PT3H"
    }
    export interface ListMetricsInput {
            /**
                * <p>The metric namespace to filter against. Only the namespace that matches exactly
                * 		will be returned.</p>
                */
            Namespace?: string;
            /**
                * <p>The name of the metric to filter against.  Only the metrics with names that match exactly
                * 			will be returned.</p>
                */
            MetricName?: string;
            /**
                * <p>The dimensions to filter against.  Only the dimensions that match exactly
                * 			will be returned.</p>
                */
            Dimensions?: DimensionFilter[];
            /**
                * <p>The token returned by a previous call to indicate that there is more data
                * 			available.</p>
                */
            NextToken?: string;
            /**
                * <p>To filter the results to show only metrics that have had data points published
                * 			in the past three hours, specify this parameter
                * 			with a value of <code>PT3H</code>. This is the only valid value
                * 			for this parameter.</p>
                * 		       <p>The results that are returned are an approximation of the value you specify. There
                * 		is a low probability that the returned results include metrics with last published
                * 		data as much as 40 minutes more than the specified time interval.</p>
                */
            RecentlyActive?: RecentlyActive | string;
    }
    export namespace ListMetricsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMetricsInput) => any;
    }
    export interface ListMetricsOutput {
            /**
                * <p>The metrics that match your request. </p>
                */
            Metrics?: Metric[];
            /**
                * <p>The token that marks the start of the next batch of returned results. </p>
                */
            NextToken?: string;
    }
    export namespace ListMetricsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMetricsOutput) => any;
    }
    export interface ListMetricStreamsInput {
            /**
                * <p>Include this value, if it was returned by the previous call, to get the next set of metric streams.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return in one operation.</p>
                */
            MaxResults?: number;
    }
    export namespace ListMetricStreamsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMetricStreamsInput) => any;
    }
    /**
        * <p>This structure contains the configuration information about one metric stream.</p>
        */
    export interface MetricStreamEntry {
            /**
                * <p>The ARN of the metric stream.</p>
                */
            Arn?: string;
            /**
                * <p>The date that the metric stream was originally created.</p>
                */
            CreationDate?: Date;
            /**
                * <p>The date that the configuration of this metric stream was most recently updated.</p>
                */
            LastUpdateDate?: Date;
            /**
                * <p>The name of the metric stream.</p>
                */
            Name?: string;
            /**
                * <p>The ARN of the Kinesis Firehose devlivery stream that is used for this metric stream.</p>
                */
            FirehoseArn?: string;
            /**
                * <p>The current state of this stream. Valid values are <code>running</code> and <code>stopped</code>.</p>
                */
            State?: string;
            /**
                * <p>The output format of this metric stream. Valid values are
                * 			<code>json</code>
                * 			and <code>opentelemetry0.7</code>.</p>
                */
            OutputFormat?: MetricStreamOutputFormat | string;
    }
    export namespace MetricStreamEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricStreamEntry) => any;
    }
    export interface ListMetricStreamsOutput {
            /**
                * <p>The token that marks the start of the next batch of returned results. You can use this
                * 		token in a subsequent operation to get the next batch of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The array of metric stream information.</p>
                */
            Entries?: MetricStreamEntry[];
    }
    export namespace ListMetricStreamsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMetricStreamsOutput) => any;
    }
    export interface ListTagsForResourceInput {
            /**
                * <p>The ARN of the CloudWatch resource that you want to view tags for.</p>
                * 		       <p>The ARN format of an alarm is
                * 			<code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:alarm:<i>alarm-name</i>
                *             </code>
                *          </p>
                * 		       <p>The ARN format of a Contributor Insights rule is
                * 			<code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:insight-rule:<i>insight-rule-name</i>
                *             </code>
                *          </p>
                * 	        <p>For more information about ARN format, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies"> Resource
                * 				Types Defined by Amazon CloudWatch</a> in the <i>Amazon Web Services General
                * 			Reference</i>.</p>
                */
            ResourceARN: string | undefined;
    }
    export namespace ListTagsForResourceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceInput) => any;
    }
    /**
        * <p>A key-value pair associated with a CloudWatch resource.</p>
        */
    export interface Tag {
            /**
                * <p>A string that you can use to assign a value. The combination of tag keys and values can help you organize and categorize your
                * 		resources.</p>
                */
            Key: string | undefined;
            /**
                * <p>The value for the specified tag key.</p>
                */
            Value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface ListTagsForResourceOutput {
            /**
                * <p>The list of tag keys and values associated with the resource you specified.</p>
                */
            Tags?: Tag[];
    }
    export namespace ListTagsForResourceOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceOutput) => any;
    }
    export interface PutAnomalyDetectorInput {
            /**
                * @deprecated
                *
                * <p>The namespace of the metric to create the anomaly detection model for.</p>
                */
            Namespace?: string;
            /**
                * @deprecated
                *
                * <p>The name of the metric to create the anomaly detection model for.</p>
                */
            MetricName?: string;
            /**
                * @deprecated
                *
                * <p>The metric dimensions to create the anomaly detection model for.</p>
                */
            Dimensions?: Dimension[];
            /**
                * @deprecated
                *
                * <p>The statistic to use for the metric and the anomaly detection model.</p>
                */
            Stat?: string;
            /**
                * <p>The configuration specifies details about how the
                * 			anomaly detection model is to be trained, including
                * 			time ranges to exclude when training and updating the model.
                * 			You can specify as many as 10 time ranges.</p>
                * 		       <p>The configuration can also include the time zone to use for
                * 			the metric.</p>
                */
            Configuration?: AnomalyDetectorConfiguration;
            /**
                * <p>A single metric anomaly detector to be created.</p>
                * 		       <p>When using <code>SingleMetricAnomalyDetector</code>,
                * 			you cannot include the following parameters in the same operation:</p>
                *
                * 		       <ul>
                *             <li>
                *                <p>
                *                   <code>Dimensions</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MetricName</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Namespace</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Stat</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>the <code>MetricMatchAnomalyDetector</code> parameters of <code>PutAnomalyDetectorInput</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                * 		       <p>Instead, specify the single metric anomaly detector attributes
                * 			as part of the property <code>SingleMetricAnomalyDetector</code>.</p>
                */
            SingleMetricAnomalyDetector?: SingleMetricAnomalyDetector;
            /**
                * <p>The metric math anomaly detector to be created.</p>
                *
                * 		       <p>When using <code>MetricMathAnomalyDetector</code>, you cannot include the following parameters in the same operation:</p>
                *
                * 		       <ul>
                *             <li>
                *                <p>
                *                   <code>Dimensions</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MetricName</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Namespace</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Stat</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>the <code>SingleMetricAnomalyDetector</code> parameters of <code>PutAnomalyDetectorInput</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                * 		       <p>Instead, specify the metric math anomaly detector attributes
                * 			as part of the property <code>MetricMathAnomalyDetector</code>.</p>
                */
            MetricMathAnomalyDetector?: MetricMathAnomalyDetector;
    }
    export namespace PutAnomalyDetectorInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutAnomalyDetectorInput) => any;
    }
    export interface PutAnomalyDetectorOutput {
    }
    export namespace PutAnomalyDetectorOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutAnomalyDetectorOutput) => any;
    }
    /**
        * <p>The quota for alarms for this customer has already been reached.</p>
        */
    export class LimitExceededFault extends __BaseException {
            readonly name: "LimitExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededFault, __BaseException>);
    }
    export interface PutCompositeAlarmInput {
            /**
                * <p>Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. The default is
                * 			<code>TRUE</code>.</p>
                */
            ActionsEnabled?: boolean;
            /**
                * <p>The actions to execute when this alarm transitions to the <code>ALARM</code> state from any other state.
                * 			Each action is specified as an Amazon Resource Name (ARN).</p>
                *
                * 		       <p>Valid Values: <code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i>
                *             </code>
                * 			| <code>arn:aws:ssm:<i>region</i>:<i>account-id</i>:opsitem:<i>severity</i>
                *             </code>
                *          </p>
                */
            AlarmActions?: string[];
            /**
                * <p>The description for the composite alarm.</p>
                */
            AlarmDescription?: string;
            /**
                * <p>The name for the composite alarm. This name must be unique within the Region.</p>
                */
            AlarmName: string | undefined;
            /**
                * <p>An expression that specifies which other alarms are to be evaluated to determine this
                * 			composite alarm's state. For each alarm that you reference, you
                * 			designate a function that
                * 			specifies whether that alarm needs to be in ALARM state, OK state, or INSUFFICIENT_DATA state. You
                * 			can use operators (AND, OR and NOT) to combine multiple functions in a single expression. You can use parenthesis to logically group the
                * 			functions in your expression.</p>
                * 		       <p>You can use either alarm names or ARNs to reference the other alarms that are to be evaluated.</p>
                * 		       <p>Functions can include the following:</p>
                * 		       <ul>
                *             <li>
                *                <p>
                *                   <code>ALARM("<i>alarm-name</i> or <i>alarm-ARN</i>")</code> is TRUE if the named
                * 			alarm is in ALARM state.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>OK("<i>alarm-name</i> or <i>alarm-ARN</i>")</code> is TRUE if the named
                * 				alarm is in OK state.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>INSUFFICIENT_DATA("<i>alarm-name</i> or <i>alarm-ARN</i>")</code> is TRUE if the named
                * 				alarm is in INSUFFICIENT_DATA state.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>TRUE</code> always evaluates to TRUE.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>FALSE</code> always evaluates to FALSE.</p>
                *             </li>
                *          </ul>
                * 		       <p>TRUE and FALSE are useful for testing a complex <code>AlarmRule</code> structure, and
                * 		for testing your alarm actions.</p>
                * 		       <p>Alarm names specified in <code>AlarmRule</code> can be surrounded with double-quotes ("), but do not have to be.</p>
                * 		       <p>The following
                * 			are some examples of <code>AlarmRule</code>:</p>
                * 		       <ul>
                *             <li>
                *                <p>
                *                   <code>ALARM(CPUUtilizationTooHigh) AND ALARM(DiskReadOpsTooHigh)</code> specifies that the composite alarm goes into ALARM state only
                * 				if both CPUUtilizationTooHigh and DiskReadOpsTooHigh alarms are in ALARM state.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ALARM(CPUUtilizationTooHigh) AND NOT ALARM(DeploymentInProgress)</code>
                * 					specifies that the alarm goes to ALARM state if CPUUtilizationTooHigh is in ALARM state
                * 					and DeploymentInProgress is not in ALARM state. This example reduces
                * 					alarm noise during a known deployment window.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>(ALARM(CPUUtilizationTooHigh) OR ALARM(DiskReadOpsTooHigh)) AND OK(NetworkOutTooHigh)</code> goes into ALARM
                * 				state if CPUUtilizationTooHigh OR DiskReadOpsTooHigh is in ALARM state, and if NetworkOutTooHigh is in OK state.
                * 				This provides another example of using a composite alarm to prevent noise. This rule ensures that you are not notified with an
                * 				alarm action on high CPU or disk usage if a known network problem is also occurring.</p>
                *             </li>
                *          </ul>
                * 		       <p>The <code>AlarmRule</code> can specify as many as 100
                * 			"children" alarms. The <code>AlarmRule</code> expression can have as many as 500 elements. Elements
                * 			are child alarms, TRUE or FALSE statements, and
                * 			parentheses.</p>
                */
            AlarmRule: string | undefined;
            /**
                * <p>The actions to execute when this alarm transitions to the <code>INSUFFICIENT_DATA</code> state from any other state.
                * 			Each action is specified as an Amazon Resource Name (ARN).</p>
                *
                * 		       <p>Valid Values: <code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i>
                *             </code>
                *          </p>
                */
            InsufficientDataActions?: string[];
            /**
                * <p>The actions to execute when this alarm transitions to an <code>OK</code> state
                * 			from any other state. Each action is specified as an Amazon Resource Name (ARN).</p>
                *
                *
                * 		       <p>Valid Values: <code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i>
                *             </code>
                *          </p>
                */
            OKActions?: string[];
            /**
                * <p>A list of key-value pairs to associate with the composite alarm. You can associate as many as 50 tags with an alarm.</p>
                * 		       <p>Tags can help you organize and categorize your
                * 			resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with
                * 			certain tag values.</p>
                */
            Tags?: Tag[];
            /**
                * <p>
                * 			Actions will be suppressed
                * 			if the suppressor alarm is
                * 			in the <code>ALARM</code> state.
                * 			<code>ActionsSuppressor</code> can be an AlarmName or an Amazon Resource Name (ARN)
                * 			from an existing alarm.
                * 		</p>
                */
            ActionsSuppressor?: string;
            /**
                * <p>
                * 			The maximum time
                * 			in seconds
                * 			that the composite alarm waits
                * 			for the suppressor alarm
                * 			to go
                * 			into the <code>ALARM</code> state.
                * 			After this time,
                * 			the composite alarm performs its actions.
                * 		</p>
                * 		       <important>
                * 			         <p>
                * 				           <code>WaitPeriod</code>
                * 				is required only
                * 				when <code>ActionsSuppressor</code> is specified.
                * 			</p>
                * 		       </important>
                */
            ActionsSuppressorWaitPeriod?: number;
            /**
                * <p>
                * 			The maximum time
                * 			in seconds
                * 			that the composite alarm waits
                * 			after suppressor alarm goes out
                * 			of the <code>ALARM</code> state.
                * 			After this time,
                * 			the composite alarm performs its actions.
                * 		</p>
                * 		       <important>
                * 			         <p>
                * 				           <code>ExtensionPeriod</code>
                * 				is required only
                * 				when <code>ActionsSuppressor</code> is specified.
                * 			</p>
                * 		       </important>
                */
            ActionsSuppressorExtensionPeriod?: number;
    }
    export namespace PutCompositeAlarmInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutCompositeAlarmInput) => any;
    }
    export interface PutDashboardInput {
            /**
                * <p>The name of the dashboard. If a dashboard with this name already exists, this call modifies that dashboard, replacing
                * 			its current contents. Otherwise, a new dashboard is created. The maximum length is 255, and valid characters are
                * 			A-Z, a-z, 0-9, "-", and "_".  This parameter is required.</p>
                */
            DashboardName: string | undefined;
            /**
                * <p>The detailed information about the dashboard in JSON format, including the widgets to include and their location
                * 			on the dashboard.  This parameter is required.</p>
                * 		       <p>For more information about the syntax,
                * 			see  <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html">Dashboard Body Structure and Syntax</a>.</p>
                */
            DashboardBody: string | undefined;
    }
    export namespace PutDashboardInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutDashboardInput) => any;
    }
    export interface PutDashboardOutput {
            /**
                * <p>If the input for <code>PutDashboard</code> was correct and the dashboard was successfully created or modified, this result is empty.</p>
                * 			      <p>If this result includes only warning messages, then the input was valid enough for the dashboard to be
                * 			created or modified, but some elements of the dashboard
                * 			might not render.</p>
                * 				     <p>If this result includes error messages, the input was not valid and the operation failed.</p>
                */
            DashboardValidationMessages?: DashboardValidationMessage[];
    }
    export namespace PutDashboardOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutDashboardOutput) => any;
    }
    export interface PutInsightRuleInput {
            /**
                * <p>A unique name for the rule.</p>
                */
            RuleName: string | undefined;
            /**
                * <p>The state of the rule. Valid values are ENABLED and DISABLED.</p>
                */
            RuleState?: string;
            /**
                * <p>The definition of the rule, as a JSON object. For details on the valid syntax, see
                * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights-RuleSyntax.html">Contributor Insights
                * 			Rule Syntax</a>.</p>
                */
            RuleDefinition: string | undefined;
            /**
                * <p>A list of key-value pairs to associate with the Contributor Insights rule.
                * 			You can associate as many as 50 tags with a rule.</p>
                * 		       <p>Tags can help you organize and categorize your
                * 			resources. You can also use them to scope user permissions, by
                * 			granting a user permission to access or change only the resources that have
                * 			certain tag values.</p>
                * 		       <p>To be able to associate tags with a rule, you must have the <code>cloudwatch:TagResource</code>
                * 		permission in addition to the <code>cloudwatch:PutInsightRule</code> permission.</p>
                * 		       <p>If you are using this operation to update an existing Contributor Insights rule, any tags
                * 		you specify in this parameter are ignored. To change the tags of an existing rule, use
                * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html">TagResource</a>.</p>
                */
            Tags?: Tag[];
    }
    export namespace PutInsightRuleInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutInsightRuleInput) => any;
    }
    export interface PutInsightRuleOutput {
    }
    export namespace PutInsightRuleOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutInsightRuleOutput) => any;
    }
    export interface PutMetricAlarmInput {
            /**
                * <p>The name for the alarm. This name must be unique within the Region.</p>
                */
            AlarmName: string | undefined;
            /**
                * <p>The description for the alarm.</p>
                */
            AlarmDescription?: string;
            /**
                * <p>Indicates whether actions should be executed during any changes to the alarm state. The default is
                * 			<code>TRUE</code>.</p>
                */
            ActionsEnabled?: boolean;
            /**
                * <p>The actions to execute when this alarm transitions to an <code>OK</code> state
                * 			from any other state. Each action is specified as an Amazon Resource Name (ARN).</p>
                *
                * 		       <p>Valid Values: <code>arn:aws:automate:<i>region</i>:ec2:stop</code> |
                * 			<code>arn:aws:automate:<i>region</i>:ec2:terminate</code> |
                * 			<code>arn:aws:automate:<i>region</i>:ec2:recover</code> |
                * 			<code>arn:aws:automate:<i>region</i>:ec2:reboot</code> |
                * 			<code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i>
                *             </code> |
                * 			<code>arn:aws:autoscaling:<i>region</i>:<i>account-id</i>:scalingPolicy:<i>policy-id</i>:autoScalingGroupName/<i>group-friendly-name</i>:policyName/<i>policy-friendly-name</i>
                *             </code>
                *          </p>
                *
                * 		       <p>Valid Values (for use with IAM roles):
                * 			<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Stop/1.0</code> |
                * 				<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Terminate/1.0</code> |
                * 				<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Reboot/1.0</code> |
                * 			    <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Recover/1.0</code>
                *          </p>
                */
            OKActions?: string[];
            /**
                * <p>The actions to execute when this alarm transitions to the <code>ALARM</code> state from any other state.
                * 			Each action is specified as an Amazon Resource Name (ARN).</p>
                *
                * 		       <p>Valid Values: <code>arn:aws:automate:<i>region</i>:ec2:stop</code> |
                * 			<code>arn:aws:automate:<i>region</i>:ec2:terminate</code> |
                * 			<code>arn:aws:automate:<i>region</i>:ec2:recover</code> |
                * 			<code>arn:aws:automate:<i>region</i>:ec2:reboot</code> |
                * 			<code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i>
                *             </code> |
                * 			<code>arn:aws:autoscaling:<i>region</i>:<i>account-id</i>:scalingPolicy:<i>policy-id</i>:autoScalingGroupName/<i>group-friendly-name</i>:policyName/<i>policy-friendly-name</i>
                *             </code>
                * 			| <code>arn:aws:ssm:<i>region</i>:<i>account-id</i>:opsitem:<i>severity</i>
                *             </code>
                * 			| <code>arn:aws:ssm-incidents::<i>account-id</i>:response-plan:<i>response-plan-name</i>
                *             </code>
                *          </p>
                *
                * 		       <p>Valid Values (for use with IAM roles):
                * 			<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Stop/1.0</code> |
                * 				<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Terminate/1.0</code> |
                * 				<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Reboot/1.0</code> |
                * 			<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Recover/1.0</code>
                *          </p>
                */
            AlarmActions?: string[];
            /**
                * <p>The actions to execute when this alarm transitions to the <code>INSUFFICIENT_DATA</code> state from any other state.
                * 			Each action is specified as an Amazon Resource Name (ARN).</p>
                *
                * 		       <p>Valid Values: <code>arn:aws:automate:<i>region</i>:ec2:stop</code> |
                * 			<code>arn:aws:automate:<i>region</i>:ec2:terminate</code> |
                * 			<code>arn:aws:automate:<i>region</i>:ec2:recover</code> |
                * 			<code>arn:aws:automate:<i>region</i>:ec2:reboot</code> |
                * 			<code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i>
                *             </code> |
                * 			<code>arn:aws:autoscaling:<i>region</i>:<i>account-id</i>:scalingPolicy:<i>policy-id</i>:autoScalingGroupName/<i>group-friendly-name</i>:policyName/<i>policy-friendly-name</i>
                *             </code>
                *          </p>
                *
                * 		       <p>Valid Values (for use with IAM roles):
                * 			<code>>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Stop/1.0</code> |
                * 				<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Terminate/1.0</code> |
                * 				<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Reboot/1.0</code>
                *          </p>
                */
            InsufficientDataActions?: string[];
            /**
                * <p>The name for the metric associated with the alarm. For each <code>PutMetricAlarm</code>
                * 		operation, you must specify either <code>MetricName</code> or a <code>Metrics</code> array.</p>
                * 		       <p>If you are creating an alarm based on a math expression, you cannot specify this parameter, or any of the
                * 			<code>Dimensions</code>, <code>Period</code>,
                * 			<code>Namespace</code>, <code>Statistic</code>, or <code>ExtendedStatistic</code> parameters. Instead, you specify
                * 		all this information in the <code>Metrics</code> array.</p>
                */
            MetricName?: string;
            /**
                * <p>The namespace for the metric associated specified in <code>MetricName</code>.</p>
                */
            Namespace?: string;
            /**
                * <p>The statistic for the metric specified in <code>MetricName</code>, other than percentile.
                * 		    For percentile statistics, use <code>ExtendedStatistic</code>. When you call <code>PutMetricAlarm</code> and specify
                * 			a <code>MetricName</code>, you must
                * 		specify either <code>Statistic</code> or <code>ExtendedStatistic,</code> but not both.</p>
                */
            Statistic?: Statistic | string;
            /**
                * <p>The percentile statistic for the metric specified in <code>MetricName</code>. Specify a value
                * 			between p0.0 and p100. When you call <code>PutMetricAlarm</code> and specify
                * 			a <code>MetricName</code>, you must
                * 			specify either <code>Statistic</code> or <code>ExtendedStatistic,</code> but not both.</p>
                */
            ExtendedStatistic?: string;
            /**
                * <p>The dimensions for the metric specified in <code>MetricName</code>.</p>
                */
            Dimensions?: Dimension[];
            /**
                * <p>The length, in seconds, used each time the metric specified in <code>MetricName</code> is
                * 			evaluated. Valid values are 10, 30, and any multiple of 60.</p>
                * 		       <p>
                *             <code>Period</code> is required for alarms based on static thresholds. If
                * 		you are creating an alarm based on a metric math expression, you specify the
                * 		period for each metric within the objects in the <code>Metrics</code> array.</p>
                * 		       <p>Be sure to specify 10 or 30 only for metrics that are stored by a <code>PutMetricData</code> call with a
                * 				<code>StorageResolution</code> of 1. If you specify a period of 10 or 30 for a metric that does not have
                * 			sub-minute resolution, the alarm still attempts to gather data at the period rate that you specify. In this case,
                * 			it does not receive data for the attempts that do not correspond to a one-minute data resolution, and the alarm
                * 			might often lapse into INSUFFICENT_DATA status. Specifying 10 or 30 also sets this alarm as a high-resolution alarm,
                * 			which has a higher charge than other alarms. For more information about pricing, see <a href="https://aws.amazon.com/cloudwatch/pricing/">Amazon CloudWatch Pricing</a>.</p>
                * 		       <p>An alarm's total current evaluation period can
                * 		be no longer than one day, so <code>Period</code> multiplied by <code>EvaluationPeriods</code> cannot be more than 86,400 seconds.</p>
                */
            Period?: number;
            /**
                * <p>The unit of measure for the statistic. For example, the units for the Amazon EC2
                * 			NetworkIn metric are Bytes because NetworkIn tracks the number of bytes that an instance
                * 			receives on all network interfaces. You can also specify a unit when you create a custom
                * 			metric. Units help provide conceptual meaning to your data. Metric data points that
                * 			specify a unit of measure, such as Percent, are aggregated separately.</p>
                * 		       <p>If you don't specify <code>Unit</code>, CloudWatch retrieves all unit types that have been published for the
                * 			metric and attempts to evaluate the alarm.
                * 			Usually, metrics are
                * 			published with only one unit, so the alarm
                * 			works as intended.</p>
                * 			      <p>However, if the metric is published with multiple types of units and you don't specify a unit, the alarm's
                * 			behavior is not defined and
                * 			it behaves predictably.</p>
                * 		       <p>We recommend omitting <code>Unit</code> so that you don't inadvertently
                * 			specify an incorrect unit that is not published for this metric. Doing so
                * 			causes the alarm to be stuck in the <code>INSUFFICIENT DATA</code> state.</p>
                */
            Unit?: StandardUnit | string;
            /**
                * <p>The number of periods over which data is compared to the specified threshold. If you are
                * 			setting an alarm that requires that a number of consecutive data points be breaching to
                * 			trigger the alarm, this value specifies that number. If you are setting an "M out of N"
                * 			alarm, this value is the N.</p>
                * 		       <p>An alarm's total current evaluation period can
                * 			be no longer than one day, so this number multiplied by <code>Period</code> cannot be more than 86,400 seconds.</p>
                */
            EvaluationPeriods: number | undefined;
            /**
                * <p>The number of data points that must be breaching to trigger the alarm. This is used only if you are setting
                * 			an "M out of N" alarm. In that case, this value is the M. For more information, see
                * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation">Evaluating an Alarm</a> in the
                * 			<i>Amazon CloudWatch User Guide</i>.</p>
                */
            DatapointsToAlarm?: number;
            /**
                * <p>The value against which the specified statistic is compared.</p>
                * 		       <p>This parameter is required for alarms based on static thresholds, but should
                * 		not be used for alarms based on anomaly detection models.</p>
                */
            Threshold?: number;
            /**
                * <p> The arithmetic operation to use when comparing the specified statistic and
                * 			threshold. The specified statistic value is used as the first operand.</p>
                * 		       <p>The values <code>LessThanLowerOrGreaterThanUpperThreshold</code>,
                * 			<code>LessThanLowerThreshold</code>, and <code>GreaterThanUpperThreshold</code>
                * 		are used only for alarms based on anomaly detection models.</p>
                */
            ComparisonOperator: ComparisonOperator | string | undefined;
            /**
                * <p> Sets how this alarm is to handle missing data points. If <code>TreatMissingData</code> is omitted, the default behavior of <code>missing</code> is used.
                * 			For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data">Configuring How CloudWatch
                * 				Alarms Treats Missing Data</a>.</p>
                * 		       <p>Valid Values: <code>breaching | notBreaching | ignore | missing</code>
                *          </p>
                * 		       <note>
                *             <p>Alarms that evaluate metrics in the <code>AWS/DynamoDB</code> namespace always <code>ignore</code>
                * 			missing data even if you choose a different option for <code>TreatMissingData</code>. When an
                * 			<code>AWS/DynamoDB</code> metric has missing data, alarms that evaluate that metric remain in their current state.</p>
                * 		       </note>
                */
            TreatMissingData?: string;
            /**
                * <p> Used only for alarms based on percentiles. If you specify <code>ignore</code>, the alarm state does not change during periods with too few data points to be
                * 			statistically significant. If you specify <code>evaluate</code> or omit this parameter, the alarm is always evaluated and possibly changes state
                * 			no matter how many data points are available. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#percentiles-with-low-samples">Percentile-Based CloudWatch Alarms and Low Data Samples</a>.</p>
                * 		       <p>Valid Values: <code>evaluate | ignore</code>
                *          </p>
                */
            EvaluateLowSampleCountPercentile?: string;
            /**
                * <p>An array of <code>MetricDataQuery</code> structures that enable you to create an alarm based on the result of a
                * 			metric math expression. For each <code>PutMetricAlarm</code>
                * 			operation, you must specify either <code>MetricName</code> or a <code>Metrics</code> array.</p>
                * 		       <p>Each item in the <code>Metrics</code> array either retrieves a metric or performs a math expression.</p>
                * 		       <p>One item in the <code>Metrics</code> array is the expression that the alarm watches. You designate this expression
                * 			by setting <code>ReturnData</code> to true for this object in the array. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDataQuery.html">MetricDataQuery</a>.</p>
                * 		       <p>If you use the <code>Metrics</code> parameter, you cannot include the <code>MetricName</code>, <code>Dimensions</code>, <code>Period</code>,
                * 			<code>Namespace</code>, <code>Statistic</code>, or <code>ExtendedStatistic</code> parameters of <code>PutMetricAlarm</code> in the same operation.
                * 			Instead, you retrieve
                * 		the metrics you are using in your math expression as part of the <code>Metrics</code> array.</p>
                */
            Metrics?: MetricDataQuery[];
            /**
                * <p>A list of key-value pairs to associate with the alarm. You can associate as many as 50 tags with an alarm.</p>
                * 		       <p>Tags can help you organize and categorize your resources. You can also use them to scope user
                * 			permissions by granting a user
                * 			permission to access or change only resources with certain tag values.</p>
                * 		       <p>If you are using this operation to update an existing alarm, any tags
                * 			you specify in this parameter are ignored. To change the tags of an existing alarm, use
                * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html">TagResource</a>
                * 			or <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_UntagResource.html">UntagResource</a>.</p>
                */
            Tags?: Tag[];
            /**
                * <p>If this is an alarm based on an anomaly detection model, make this value match
                * 			the ID of
                * 			the <code>ANOMALY_DETECTION_BAND</code> function.</p>
                * 		       <p>For an example of how to use this parameter, see the
                * 			<b>Anomaly Detection
                * 		Model Alarm</b> example on this page.</p>
                * 		       <p>If your alarm uses this parameter, it cannot have Auto Scaling actions.</p>
                */
            ThresholdMetricId?: string;
    }
    export namespace PutMetricAlarmInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutMetricAlarmInput) => any;
    }
    /**
        * <p>Represents a set of statistics that describes a specific metric. </p>
        */
    export interface StatisticSet {
            /**
                * <p>The number of samples used for the statistic set.</p>
                */
            SampleCount: number | undefined;
            /**
                * <p>The sum of values for the sample set.</p>
                */
            Sum: number | undefined;
            /**
                * <p>The minimum value of the sample set.</p>
                */
            Minimum: number | undefined;
            /**
                * <p>The maximum value of the sample set.</p>
                */
            Maximum: number | undefined;
    }
    export namespace StatisticSet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatisticSet) => any;
    }
    /**
        * <p>Encapsulates the information sent to either create a metric or add new values
        * 			to be aggregated into an existing metric.</p>
        */
    export interface MetricDatum {
            /**
                * <p>The name of the metric.</p>
                */
            MetricName: string | undefined;
            /**
                * <p>The dimensions associated with the metric.</p>
                */
            Dimensions?: Dimension[];
            /**
                * <p>The time the metric data was received, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
                */
            Timestamp?: Date;
            /**
                * <p>The value for the metric.</p>
                * 		       <p>Although the parameter accepts numbers of type Double, CloudWatch rejects values that are either too small or
                * 			too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity, -Infinity)
                * 			are not supported.</p>
                */
            Value?: number;
            /**
                * <p>The statistical values for the metric.</p>
                */
            StatisticValues?: StatisticSet;
            /**
                * <p>Array of numbers representing the values for the metric during the period. Each unique value is listed just once
                * 		in this array, and the corresponding number in the <code>Counts</code> array specifies the number of times that value occurred during the period.
                * 		You can include up to 150 unique values in each <code>PutMetricData</code> action that specifies a <code>Values</code> array.</p>
                * 		       <p>Although the <code>Values</code> array accepts numbers of type
                * 			<code>Double</code>, CloudWatch rejects values that are either too small
                * 			or too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity,
                * 			-Infinity) are not supported.</p>
                */
            Values?: number[];
            /**
                * <p>Array of numbers that is used along with the <code>Values</code> array. Each number in the <code>Count</code> array
                * 			is the number of times the corresponding value in the <code>Values</code> array occurred during the period. </p>
                * 		       <p>If you omit the <code>Counts</code> array, the default of 1 is used as the value for each count. If you
                * 		include a <code>Counts</code> array, it must include the same amount of values as the <code>Values</code> array.</p>
                */
            Counts?: number[];
            /**
                * <p>When you are using a <code>Put</code> operation, this defines what unit you want to use when storing the metric.</p>
                * 		       <p>In
                * 		a <code>Get</code> operation, this displays the unit that is used for the metric.</p>
                */
            Unit?: StandardUnit | string;
            /**
                * <p>Valid values are 1 and 60. Setting this to 1 specifies this metric as a high-resolution metric, so that CloudWatch stores the metric with
                * 			sub-minute resolution down to one second.
                * 		Setting this to 60 specifies this metric as a regular-resolution metric, which CloudWatch stores at 1-minute resolution. Currently, high resolution is available
                * 		only for custom metrics. For more information about high-resolution metrics,
                * 			see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html#high-resolution-metrics">High-Resolution Metrics</a> in the
                * 			<i>Amazon CloudWatch User Guide</i>.
                * 		</p>
                * 	        <p>This field is optional, if you do not specify it the default of 60 is used.</p>
                */
            StorageResolution?: number;
    }
    export namespace MetricDatum {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricDatum) => any;
    }
    export interface PutMetricDataInput {
            /**
                * <p>The namespace for the metric data.</p>
                * 		       <p>To avoid conflicts
                * 			with Amazon Web Services service namespaces, you should not specify a namespace that begins with <code>AWS/</code>
                *          </p>
                */
            Namespace: string | undefined;
            /**
                * <p>The data for the metric. The array can include no more than 20 metrics per call.</p>
                */
            MetricData: MetricDatum[] | undefined;
    }
    export namespace PutMetricDataInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutMetricDataInput) => any;
    }
    export interface PutMetricStreamInput {
            /**
                * <p>If you are creating a new metric stream, this is the name for the new stream. The name
                * 		must be different than the names of other metric streams in this account and Region.</p>
                * 		       <p>If you are updating a metric stream, specify the name of that stream here.</p>
                * 		       <p>Valid characters are A-Z, a-z, 0-9, "-" and "_".</p>
                */
            Name: string | undefined;
            /**
                * <p>If you specify this parameter, the stream sends only the
                * 		metrics from the metric namespaces that you specify here.</p>
                * 		       <p>You cannot include <code>IncludeFilters</code> and <code>ExcludeFilters</code>
                * 		in the same operation.</p>
                */
            IncludeFilters?: MetricStreamFilter[];
            /**
                * <p>If you specify this parameter, the stream sends metrics from all
                * 			metric namespaces except for the namespaces that you specify here.</p>
                * 		       <p>You cannot include <code>ExcludeFilters</code> and <code>IncludeFilters</code> in
                * 			the same operation.</p>
                */
            ExcludeFilters?: MetricStreamFilter[];
            /**
                * <p>The ARN of the Amazon Kinesis Firehose delivery stream to use for this metric stream.
                * 		This Amazon Kinesis Firehose delivery stream must already exist and must be in the same
                * 		account as the metric stream.</p>
                */
            FirehoseArn: string | undefined;
            /**
                * <p>The ARN of an IAM role that this metric stream will use to access
                * 			Amazon Kinesis Firehose resources. This IAM role must already
                * 		exist and must be in the same account as the metric stream. This IAM role must include the following permissions:</p>
                * 		       <ul>
                *             <li>
                *                <p>firehose:PutRecord</p>
                *             </li>
                *             <li>
                *                <p>firehose:PutRecordBatch</p>
                *             </li>
                *          </ul>
                */
            RoleArn: string | undefined;
            /**
                * <p>The output format for the stream. Valid values are <code>json</code>
                * 		and <code>opentelemetry0.7</code>. For more information about metric stream
                * 		output formats, see
                * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html">
                * 				Metric streams output formats</a>.</p>
                */
            OutputFormat: MetricStreamOutputFormat | string | undefined;
            /**
                * <p>A list of key-value pairs to associate with the metric stream. You can associate as
                * 			many as 50 tags with a metric stream.</p>
                * 		       <p>Tags can help you organize and categorize your resources. You can also use them to scope user
                * 			permissions by granting a user
                * 			permission to access or change only resources with certain tag values.</p>
                * 		       <p>You can use this parameter only when you are creating a new metric stream. If you are using this operation to update an existing metric stream, any tags
                * 			you specify in this parameter are ignored. To change the tags of an existing metric stream, use
                * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html">TagResource</a>
                * 			or <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_UntagResource.html">UntagResource</a>.</p>
                */
            Tags?: Tag[];
            /**
                * <p>By default, a metric stream always sends the <code>MAX</code>, <code>MIN</code>, <code>SUM</code>,
                * 			and <code>SAMPLECOUNT</code> statistics for each metric that is streamed. You can use this parameter to have
                * 			the metric stream also send additional statistics in the stream. This
                * 			array can have up to 100 members.</p>
                * 		       <p>For each entry in this array, you specify one or more metrics and the list of additional statistics to stream
                * 			for those metrics. The additional statistics that you can stream depend on the stream's <code>OutputFormat</code>.
                * 			If the <code>OutputFormat</code> is <code>json</code>, you can stream any additional statistic that is supported
                * 			by CloudWatch, listed in
                * 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html">
                * 				CloudWatch statistics definitions</a>. If the <code>OutputFormat</code> is
                * 			<code>opentelemetry0.7</code>, you can stream percentile statistics such as p95, p99.9 and so on.</p>
                */
            StatisticsConfigurations?: MetricStreamStatisticsConfiguration[];
    }
    export namespace PutMetricStreamInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutMetricStreamInput) => any;
    }
    export interface PutMetricStreamOutput {
            /**
                * <p>The ARN of the metric stream.</p>
                */
            Arn?: string;
    }
    export namespace PutMetricStreamOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutMetricStreamOutput) => any;
    }
    /**
        * <p>Data was not syntactically valid JSON.</p>
        */
    export class InvalidFormatFault extends __BaseException {
            readonly name: "InvalidFormatFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidFormatFault, __BaseException>);
    }
    export interface SetAlarmStateInput {
            /**
                * <p>The name of the alarm.</p>
                */
            AlarmName: string | undefined;
            /**
                * <p>The value of the state.</p>
                */
            StateValue: StateValue | string | undefined;
            /**
                * <p>The reason that this alarm is set to this specific state, in text format.</p>
                */
            StateReason: string | undefined;
            /**
                * <p>The reason that this alarm is set to this specific state, in JSON format.</p>
                * 		       <p>For SNS or EC2 alarm actions, this is just informational. But for EC2 Auto Scaling or application Auto Scaling
                * 		alarm actions, the Auto Scaling policy uses the information in this field to take the correct action.</p>
                */
            StateReasonData?: string;
    }
    export namespace SetAlarmStateInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetAlarmStateInput) => any;
    }
    export interface StartMetricStreamsInput {
            /**
                * <p>The array of the names of metric streams to start streaming.</p>
                * 		       <p>This is an "all or nothing" operation. If you do not have
                * 		permission to access all of the metric streams that you list here, then none of the streams that you list
                * 		in the operation will start streaming.</p>
                */
            Names: string[] | undefined;
    }
    export namespace StartMetricStreamsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartMetricStreamsInput) => any;
    }
    export interface StartMetricStreamsOutput {
    }
    export namespace StartMetricStreamsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartMetricStreamsOutput) => any;
    }
    export interface StopMetricStreamsInput {
            /**
                * <p>The array of the names of metric streams to stop streaming.</p>
                * 		       <p>This is an "all or nothing" operation. If you do not have
                * 			permission to access all of the metric streams that you list here, then none of the streams that you list
                * 			in the operation will stop streaming.</p>
                */
            Names: string[] | undefined;
    }
    export namespace StopMetricStreamsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopMetricStreamsInput) => any;
    }
    export interface StopMetricStreamsOutput {
    }
    export namespace StopMetricStreamsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopMetricStreamsOutput) => any;
    }
    export interface TagResourceInput {
            /**
                * <p>The ARN of the CloudWatch resource that you're adding tags to.</p>
                * 		       <p>The ARN format of an alarm is
                * 			<code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:alarm:<i>alarm-name</i>
                *             </code>
                *          </p>
                * 		       <p>The ARN format of a Contributor Insights rule is
                * 			<code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:insight-rule:<i>insight-rule-name</i>
                *             </code>
                *          </p>
                * 		       <p>For more information about ARN format, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies"> Resource
                * 				Types Defined by Amazon CloudWatch</a> in the <i>Amazon Web Services General
                * 			Reference</i>.</p>
                */
            ResourceARN: string | undefined;
            /**
                * <p>The list of key-value pairs to associate with the alarm.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagResourceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceInput) => any;
    }
    export interface TagResourceOutput {
    }
    export namespace TagResourceOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceOutput) => any;
    }
    export interface UntagResourceInput {
            /**
                * <p>The ARN of the CloudWatch resource that you're removing tags from.</p>
                * 		       <p>The ARN format of an alarm is
                * 			<code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:alarm:<i>alarm-name</i>
                *             </code>
                *          </p>
                * 		       <p>The ARN format of a Contributor Insights rule is
                * 			<code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:insight-rule:<i>insight-rule-name</i>
                *             </code>
                *          </p>
                * 	        <p>For more information about ARN format, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies"> Resource
                * 				Types Defined by Amazon CloudWatch</a> in the <i>Amazon Web Services General
                * 			Reference</i>.</p>
                */
            ResourceARN: string | undefined;
            /**
                * <p>The list of tag keys to remove from the resource.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceInput) => any;
    }
    export interface UntagResourceOutput {
    }
    export namespace UntagResourceOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceOutput) => any;
    }
}

declare module '@aws-sdk/client-cloudwatch/node_modules/@aws-sdk/client-cloudwatch/dist-types/models/CloudWatchServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from CloudWatch service.
        */
    export class CloudWatchServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

