// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-outposts' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CancelOrderCommandInput, CancelOrderCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/CancelOrderCommand";
    import { CreateOrderCommandInput, CreateOrderCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/CreateOrderCommand";
    import { CreateOutpostCommandInput, CreateOutpostCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/CreateOutpostCommand";
    import { CreateSiteCommandInput, CreateSiteCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/CreateSiteCommand";
    import { DeleteOutpostCommandInput, DeleteOutpostCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/DeleteOutpostCommand";
    import { DeleteSiteCommandInput, DeleteSiteCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/DeleteSiteCommand";
    import { GetCatalogItemCommandInput, GetCatalogItemCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/GetCatalogItemCommand";
    import { GetConnectionCommandInput, GetConnectionCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/GetConnectionCommand";
    import { GetOrderCommandInput, GetOrderCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/GetOrderCommand";
    import { GetOutpostCommandInput, GetOutpostCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/GetOutpostCommand";
    import { GetOutpostInstanceTypesCommandInput, GetOutpostInstanceTypesCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/GetOutpostInstanceTypesCommand";
    import { GetSiteAddressCommandInput, GetSiteAddressCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/GetSiteAddressCommand";
    import { GetSiteCommandInput, GetSiteCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/GetSiteCommand";
    import { ListAssetsCommandInput, ListAssetsCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/ListAssetsCommand";
    import { ListCatalogItemsCommandInput, ListCatalogItemsCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/ListCatalogItemsCommand";
    import { ListOrdersCommandInput, ListOrdersCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/ListOrdersCommand";
    import { ListOutpostsCommandInput, ListOutpostsCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/ListOutpostsCommand";
    import { ListSitesCommandInput, ListSitesCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/ListSitesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/ListTagsForResourceCommand";
    import { StartConnectionCommandInput, StartConnectionCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/StartConnectionCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/UntagResourceCommand";
    import { UpdateOutpostCommandInput, UpdateOutpostCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/UpdateOutpostCommand";
    import { UpdateSiteAddressCommandInput, UpdateSiteAddressCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/UpdateSiteAddressCommand";
    import { UpdateSiteCommandInput, UpdateSiteCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/UpdateSiteCommand";
    import { UpdateSiteRackPhysicalPropertiesCommandInput, UpdateSiteRackPhysicalPropertiesCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/UpdateSiteRackPhysicalPropertiesCommand";
    import { OutpostsClient } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    /**
        * <p>Amazon Web Services Outposts is a fully managed service that extends Amazon Web Services infrastructure, APIs, and tools
        *       to customer premises. By providing local access to Amazon Web Services managed infrastructure, Amazon Web Services Outposts
        *       enables customers to build and run applications on premises using the same programming
        *       interfaces as in Amazon Web Services Regions, while using local compute and storage resources for lower
        *       latency and local data processing needs.</p>
        */
    export class Outposts extends OutpostsClient {
            /**
                * <p>
                *       Cancels an order for an Outpost.
                *     </p>
                */
            cancelOrder(args: CancelOrderCommandInput, options?: __HttpHandlerOptions): Promise<CancelOrderCommandOutput>;
            cancelOrder(args: CancelOrderCommandInput, cb: (err: any, data?: CancelOrderCommandOutput) => void): void;
            cancelOrder(args: CancelOrderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelOrderCommandOutput) => void): void;
            /**
                * <p>Creates an order for an Outpost.</p>
                */
            createOrder(args: CreateOrderCommandInput, options?: __HttpHandlerOptions): Promise<CreateOrderCommandOutput>;
            createOrder(args: CreateOrderCommandInput, cb: (err: any, data?: CreateOrderCommandOutput) => void): void;
            createOrder(args: CreateOrderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateOrderCommandOutput) => void): void;
            /**
                * <p>Creates an Outpost.</p>
                *          <p>You can specify <code>AvailabilityZone</code> or <code>AvailabilityZoneId</code>.</p>
                */
            createOutpost(args: CreateOutpostCommandInput, options?: __HttpHandlerOptions): Promise<CreateOutpostCommandOutput>;
            createOutpost(args: CreateOutpostCommandInput, cb: (err: any, data?: CreateOutpostCommandOutput) => void): void;
            createOutpost(args: CreateOutpostCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateOutpostCommandOutput) => void): void;
            /**
                * <p>
                *       Creates a site for an Outpost.
                *     </p>
                */
            createSite(args: CreateSiteCommandInput, options?: __HttpHandlerOptions): Promise<CreateSiteCommandOutput>;
            createSite(args: CreateSiteCommandInput, cb: (err: any, data?: CreateSiteCommandOutput) => void): void;
            createSite(args: CreateSiteCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSiteCommandOutput) => void): void;
            /**
                * <p>Deletes the Outpost.</p>
                */
            deleteOutpost(args: DeleteOutpostCommandInput, options?: __HttpHandlerOptions): Promise<DeleteOutpostCommandOutput>;
            deleteOutpost(args: DeleteOutpostCommandInput, cb: (err: any, data?: DeleteOutpostCommandOutput) => void): void;
            deleteOutpost(args: DeleteOutpostCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteOutpostCommandOutput) => void): void;
            /**
                * <p>Deletes the site.</p>
                */
            deleteSite(args: DeleteSiteCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSiteCommandOutput>;
            deleteSite(args: DeleteSiteCommandInput, cb: (err: any, data?: DeleteSiteCommandOutput) => void): void;
            deleteSite(args: DeleteSiteCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSiteCommandOutput) => void): void;
            /**
                * <p>Gets information about a catalog item.</p>
                */
            getCatalogItem(args: GetCatalogItemCommandInput, options?: __HttpHandlerOptions): Promise<GetCatalogItemCommandOutput>;
            getCatalogItem(args: GetCatalogItemCommandInput, cb: (err: any, data?: GetCatalogItemCommandOutput) => void): void;
            getCatalogItem(args: GetCatalogItemCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCatalogItemCommandOutput) => void): void;
            /**
                * <note>
                *             <p>
                *       Amazon Web Services uses this action to install Outpost servers.</p>
                *          </note>
                *          <p>
                *       Gets information about a specified connection.
                *     </p>
                *          <p>
                *       Use CloudTrail to monitor this action or Amazon Web Services managed policy for Amazon Web Services Outposts to secure it. For
                *       more information, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/security-iam-awsmanpol.html">
                *       Amazon Web Services managed policies for Amazon Web Services Outposts</a> and <a href="https://docs.aws.amazon.com/outposts/latest/userguide/logging-using-cloudtrail.html">
                *       Logging Amazon Web Services Outposts API calls with Amazon Web Services CloudTrail</a> in the <i>Amazon Web Services Outposts User Guide</i>.
                *       </p>
                */
            getConnection(args: GetConnectionCommandInput, options?: __HttpHandlerOptions): Promise<GetConnectionCommandOutput>;
            getConnection(args: GetConnectionCommandInput, cb: (err: any, data?: GetConnectionCommandOutput) => void): void;
            getConnection(args: GetConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConnectionCommandOutput) => void): void;
            /**
                * <p>Gets an order.</p>
                */
            getOrder(args: GetOrderCommandInput, options?: __HttpHandlerOptions): Promise<GetOrderCommandOutput>;
            getOrder(args: GetOrderCommandInput, cb: (err: any, data?: GetOrderCommandOutput) => void): void;
            getOrder(args: GetOrderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetOrderCommandOutput) => void): void;
            /**
                * <p>Gets information about the specified Outpost.</p>
                */
            getOutpost(args: GetOutpostCommandInput, options?: __HttpHandlerOptions): Promise<GetOutpostCommandOutput>;
            getOutpost(args: GetOutpostCommandInput, cb: (err: any, data?: GetOutpostCommandOutput) => void): void;
            getOutpost(args: GetOutpostCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetOutpostCommandOutput) => void): void;
            /**
                * <p>Gets the instance types for the specified Outpost.</p>
                */
            getOutpostInstanceTypes(args: GetOutpostInstanceTypesCommandInput, options?: __HttpHandlerOptions): Promise<GetOutpostInstanceTypesCommandOutput>;
            getOutpostInstanceTypes(args: GetOutpostInstanceTypesCommandInput, cb: (err: any, data?: GetOutpostInstanceTypesCommandOutput) => void): void;
            getOutpostInstanceTypes(args: GetOutpostInstanceTypesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetOutpostInstanceTypesCommandOutput) => void): void;
            /**
                * <p>
                *       Gets information about the specified Outpost site.
                *     </p>
                */
            getSite(args: GetSiteCommandInput, options?: __HttpHandlerOptions): Promise<GetSiteCommandOutput>;
            getSite(args: GetSiteCommandInput, cb: (err: any, data?: GetSiteCommandOutput) => void): void;
            getSite(args: GetSiteCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSiteCommandOutput) => void): void;
            /**
                * <p>
                *       Gets the site address.
                *     </p>
                */
            getSiteAddress(args: GetSiteAddressCommandInput, options?: __HttpHandlerOptions): Promise<GetSiteAddressCommandOutput>;
            getSiteAddress(args: GetSiteAddressCommandInput, cb: (err: any, data?: GetSiteAddressCommandOutput) => void): void;
            getSiteAddress(args: GetSiteAddressCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSiteAddressCommandOutput) => void): void;
            /**
                * <p>
                *       Lists the hardware assets in an Outpost. If you are using Dedicated Hosts on
                *       Amazon Web Services Outposts, you can filter your request by host ID to return a list of hardware
                *       assets that allocate resources for Dedicated Hosts.
                *     </p>
                */
            listAssets(args: ListAssetsCommandInput, options?: __HttpHandlerOptions): Promise<ListAssetsCommandOutput>;
            listAssets(args: ListAssetsCommandInput, cb: (err: any, data?: ListAssetsCommandOutput) => void): void;
            listAssets(args: ListAssetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAssetsCommandOutput) => void): void;
            /**
                * <p>Lists the items in the catalog. Add filters to your request to return a
                *       more specific list of results. Use filters to match an item class, storage
                *       option, or EC2 family. </p>
                *          <p>If you specify multiple filters, the filters are joined with an <code>AND</code>, and
                *       the request returns only results that match all of the specified filters.</p>
                */
            listCatalogItems(args: ListCatalogItemsCommandInput, options?: __HttpHandlerOptions): Promise<ListCatalogItemsCommandOutput>;
            listCatalogItems(args: ListCatalogItemsCommandInput, cb: (err: any, data?: ListCatalogItemsCommandOutput) => void): void;
            listCatalogItems(args: ListCatalogItemsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCatalogItemsCommandOutput) => void): void;
            /**
                * <p>Lists the Outpost orders for your Amazon Web Services account. You can filter your request by Outpost to
                *       return a more specific list of results. </p>
                */
            listOrders(args: ListOrdersCommandInput, options?: __HttpHandlerOptions): Promise<ListOrdersCommandOutput>;
            listOrders(args: ListOrdersCommandInput, cb: (err: any, data?: ListOrdersCommandOutput) => void): void;
            listOrders(args: ListOrdersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListOrdersCommandOutput) => void): void;
            /**
                * <p>Lists the Outposts for your Amazon Web Services account. Add filters to your request to return
                *       a more specific list of results. Use filters to match an Outpost lifecycle status,
                *       Availability Zone (<code>us-east-1a</code>), and AZ ID (<code>use1-az1</code>). </p>
                *
                *          <p>If you specify multiple filters, the filters are joined with an <code>AND</code>, and the request returns only
                *       results that match all of the specified filters.</p>
                */
            listOutposts(args: ListOutpostsCommandInput, options?: __HttpHandlerOptions): Promise<ListOutpostsCommandOutput>;
            listOutposts(args: ListOutpostsCommandInput, cb: (err: any, data?: ListOutpostsCommandOutput) => void): void;
            listOutposts(args: ListOutpostsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListOutpostsCommandOutput) => void): void;
            /**
                * <p>Lists the Outpost sites for your Amazon Web Services account. Add operating address filters to your request to
                *       return a more specific list of results. Use filters to match site city, country code, or state/region of the
                *       operating address. </p>
                *
                *          <p>If you specify multiple filters, the filters are joined with an <code>AND</code>, and the request returns only
                *       results that match all of the specified filters.</p>
                */
            listSites(args: ListSitesCommandInput, options?: __HttpHandlerOptions): Promise<ListSitesCommandOutput>;
            listSites(args: ListSitesCommandInput, cb: (err: any, data?: ListSitesCommandOutput) => void): void;
            listSites(args: ListSitesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSitesCommandOutput) => void): void;
            /**
                * <p>Lists the tags for the specified resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <note>
                *             <p>
                *       Amazon Web Services uses this action to install Outpost servers.</p>
                *          </note>
                *          <p>
                *       Starts the connection required for Outpost server installation.
                *     </p>
                *          <p>
                *       Use CloudTrail to monitor this action or Amazon Web Services managed policy for Amazon Web Services Outposts to secure it. For
                *       more information, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/security-iam-awsmanpol.html">
                *       Amazon Web Services managed policies for Amazon Web Services Outposts</a> and <a href="https://docs.aws.amazon.com/outposts/latest/userguide/logging-using-cloudtrail.html">
                *       Logging Amazon Web Services Outposts API calls with Amazon Web Services CloudTrail</a> in the <i>Amazon Web Services Outposts User Guide</i>.
                *       </p>
                */
            startConnection(args: StartConnectionCommandInput, options?: __HttpHandlerOptions): Promise<StartConnectionCommandOutput>;
            startConnection(args: StartConnectionCommandInput, cb: (err: any, data?: StartConnectionCommandOutput) => void): void;
            startConnection(args: StartConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartConnectionCommandOutput) => void): void;
            /**
                * <p>Adds tags to the specified resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes tags from the specified resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>
                *       Updates an Outpost.
                *     </p>
                */
            updateOutpost(args: UpdateOutpostCommandInput, options?: __HttpHandlerOptions): Promise<UpdateOutpostCommandOutput>;
            updateOutpost(args: UpdateOutpostCommandInput, cb: (err: any, data?: UpdateOutpostCommandOutput) => void): void;
            updateOutpost(args: UpdateOutpostCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateOutpostCommandOutput) => void): void;
            /**
                * <p>
                *       Updates the site.
                *     </p>
                */
            updateSite(args: UpdateSiteCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSiteCommandOutput>;
            updateSite(args: UpdateSiteCommandInput, cb: (err: any, data?: UpdateSiteCommandOutput) => void): void;
            updateSite(args: UpdateSiteCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSiteCommandOutput) => void): void;
            /**
                * <p>
                *       Updates the site address.
                *     </p>
                *          <p>
                *       To update a site address
                *       with an order <code>IN_PROGRESS</code>, you must wait for the order
                *       to complete or cancel the order.
                *     </p>
                *          <p>You
                *       can update the operating address before you place an order at the
                *       site, or after all Outposts that belong to the site have been deactivated.
                *     </p>
                */
            updateSiteAddress(args: UpdateSiteAddressCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSiteAddressCommandOutput>;
            updateSiteAddress(args: UpdateSiteAddressCommandInput, cb: (err: any, data?: UpdateSiteAddressCommandOutput) => void): void;
            updateSiteAddress(args: UpdateSiteAddressCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSiteAddressCommandOutput) => void): void;
            /**
                * <p>Update the physical and logistical details for a rack at a site. For more information
                *       about hardware requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#checklist">Network
                *         readiness checklist</a> in the Amazon Web Services Outposts User Guide.
                *          </p>
                *          <p>To update a rack at a site with an order of <code>IN_PROGRESS</code>, you must wait for
                *       the order to complete or cancel the order.</p>
                */
            updateSiteRackPhysicalProperties(args: UpdateSiteRackPhysicalPropertiesCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSiteRackPhysicalPropertiesCommandOutput>;
            updateSiteRackPhysicalProperties(args: UpdateSiteRackPhysicalPropertiesCommandInput, cb: (err: any, data?: UpdateSiteRackPhysicalPropertiesCommandOutput) => void): void;
            updateSiteRackPhysicalProperties(args: UpdateSiteRackPhysicalPropertiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSiteRackPhysicalPropertiesCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/CancelOrderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CancelOrderInput, CancelOrderOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface CancelOrderCommandInput extends CancelOrderInput {
    }
    export interface CancelOrderCommandOutput extends CancelOrderOutput, __MetadataBearer {
    }
    /**
        * <p>
        *       Cancels an order for an Outpost.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, CancelOrderCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, CancelOrderCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new CancelOrderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelOrderCommandInput} for command's `input` shape.
        * @see {@link CancelOrderCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class CancelOrderCommand extends $Command<CancelOrderCommandInput, CancelOrderCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: CancelOrderCommandInput;
            constructor(input: CancelOrderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelOrderCommandInput, CancelOrderCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/CreateOrderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateOrderInput, CreateOrderOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface CreateOrderCommandInput extends CreateOrderInput {
    }
    export interface CreateOrderCommandOutput extends CreateOrderOutput, __MetadataBearer {
    }
    /**
        * <p>Creates an order for an Outpost.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, CreateOrderCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, CreateOrderCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new CreateOrderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateOrderCommandInput} for command's `input` shape.
        * @see {@link CreateOrderCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class CreateOrderCommand extends $Command<CreateOrderCommandInput, CreateOrderCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: CreateOrderCommandInput;
            constructor(input: CreateOrderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateOrderCommandInput, CreateOrderCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/CreateOutpostCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateOutpostInput, CreateOutpostOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface CreateOutpostCommandInput extends CreateOutpostInput {
    }
    export interface CreateOutpostCommandOutput extends CreateOutpostOutput, __MetadataBearer {
    }
    /**
        * <p>Creates an Outpost.</p>
        *          <p>You can specify <code>AvailabilityZone</code> or <code>AvailabilityZoneId</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, CreateOutpostCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, CreateOutpostCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new CreateOutpostCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateOutpostCommandInput} for command's `input` shape.
        * @see {@link CreateOutpostCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class CreateOutpostCommand extends $Command<CreateOutpostCommandInput, CreateOutpostCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: CreateOutpostCommandInput;
            constructor(input: CreateOutpostCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateOutpostCommandInput, CreateOutpostCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/CreateSiteCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateSiteInput, CreateSiteOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface CreateSiteCommandInput extends CreateSiteInput {
    }
    export interface CreateSiteCommandOutput extends CreateSiteOutput, __MetadataBearer {
    }
    /**
        * <p>
        *       Creates a site for an Outpost.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, CreateSiteCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, CreateSiteCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new CreateSiteCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSiteCommandInput} for command's `input` shape.
        * @see {@link CreateSiteCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class CreateSiteCommand extends $Command<CreateSiteCommandInput, CreateSiteCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: CreateSiteCommandInput;
            constructor(input: CreateSiteCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSiteCommandInput, CreateSiteCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/DeleteOutpostCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteOutpostInput, DeleteOutpostOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface DeleteOutpostCommandInput extends DeleteOutpostInput {
    }
    export interface DeleteOutpostCommandOutput extends DeleteOutpostOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes the Outpost.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, DeleteOutpostCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, DeleteOutpostCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new DeleteOutpostCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteOutpostCommandInput} for command's `input` shape.
        * @see {@link DeleteOutpostCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class DeleteOutpostCommand extends $Command<DeleteOutpostCommandInput, DeleteOutpostCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: DeleteOutpostCommandInput;
            constructor(input: DeleteOutpostCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteOutpostCommandInput, DeleteOutpostCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/DeleteSiteCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteSiteInput, DeleteSiteOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface DeleteSiteCommandInput extends DeleteSiteInput {
    }
    export interface DeleteSiteCommandOutput extends DeleteSiteOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes the site.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, DeleteSiteCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, DeleteSiteCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new DeleteSiteCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteSiteCommandInput} for command's `input` shape.
        * @see {@link DeleteSiteCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class DeleteSiteCommand extends $Command<DeleteSiteCommandInput, DeleteSiteCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: DeleteSiteCommandInput;
            constructor(input: DeleteSiteCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteSiteCommandInput, DeleteSiteCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/GetCatalogItemCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetCatalogItemInput, GetCatalogItemOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface GetCatalogItemCommandInput extends GetCatalogItemInput {
    }
    export interface GetCatalogItemCommandOutput extends GetCatalogItemOutput, __MetadataBearer {
    }
    /**
        * <p>Gets information about a catalog item.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, GetCatalogItemCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, GetCatalogItemCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new GetCatalogItemCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCatalogItemCommandInput} for command's `input` shape.
        * @see {@link GetCatalogItemCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class GetCatalogItemCommand extends $Command<GetCatalogItemCommandInput, GetCatalogItemCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: GetCatalogItemCommandInput;
            constructor(input: GetCatalogItemCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCatalogItemCommandInput, GetCatalogItemCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/GetConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetConnectionRequest, GetConnectionResponse } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface GetConnectionCommandInput extends GetConnectionRequest {
    }
    export interface GetConnectionCommandOutput extends GetConnectionResponse, __MetadataBearer {
    }
    /**
        * <note>
        *             <p>
        *       Amazon Web Services uses this action to install Outpost servers.</p>
        *          </note>
        *          <p>
        *       Gets information about a specified connection.
        *     </p>
        *          <p>
        *       Use CloudTrail to monitor this action or Amazon Web Services managed policy for Amazon Web Services Outposts to secure it. For
        *       more information, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/security-iam-awsmanpol.html">
        *       Amazon Web Services managed policies for Amazon Web Services Outposts</a> and <a href="https://docs.aws.amazon.com/outposts/latest/userguide/logging-using-cloudtrail.html">
        *       Logging Amazon Web Services Outposts API calls with Amazon Web Services CloudTrail</a> in the <i>Amazon Web Services Outposts User Guide</i>.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, GetConnectionCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, GetConnectionCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new GetConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetConnectionCommandInput} for command's `input` shape.
        * @see {@link GetConnectionCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class GetConnectionCommand extends $Command<GetConnectionCommandInput, GetConnectionCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: GetConnectionCommandInput;
            constructor(input: GetConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetConnectionCommandInput, GetConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/GetOrderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetOrderInput, GetOrderOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface GetOrderCommandInput extends GetOrderInput {
    }
    export interface GetOrderCommandOutput extends GetOrderOutput, __MetadataBearer {
    }
    /**
        * <p>Gets an order.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, GetOrderCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, GetOrderCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new GetOrderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetOrderCommandInput} for command's `input` shape.
        * @see {@link GetOrderCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class GetOrderCommand extends $Command<GetOrderCommandInput, GetOrderCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: GetOrderCommandInput;
            constructor(input: GetOrderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetOrderCommandInput, GetOrderCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/GetOutpostCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetOutpostInput, GetOutpostOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface GetOutpostCommandInput extends GetOutpostInput {
    }
    export interface GetOutpostCommandOutput extends GetOutpostOutput, __MetadataBearer {
    }
    /**
        * <p>Gets information about the specified Outpost.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, GetOutpostCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, GetOutpostCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new GetOutpostCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetOutpostCommandInput} for command's `input` shape.
        * @see {@link GetOutpostCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class GetOutpostCommand extends $Command<GetOutpostCommandInput, GetOutpostCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: GetOutpostCommandInput;
            constructor(input: GetOutpostCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetOutpostCommandInput, GetOutpostCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/GetOutpostInstanceTypesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetOutpostInstanceTypesInput, GetOutpostInstanceTypesOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface GetOutpostInstanceTypesCommandInput extends GetOutpostInstanceTypesInput {
    }
    export interface GetOutpostInstanceTypesCommandOutput extends GetOutpostInstanceTypesOutput, __MetadataBearer {
    }
    /**
        * <p>Gets the instance types for the specified Outpost.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, GetOutpostInstanceTypesCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, GetOutpostInstanceTypesCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new GetOutpostInstanceTypesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetOutpostInstanceTypesCommandInput} for command's `input` shape.
        * @see {@link GetOutpostInstanceTypesCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class GetOutpostInstanceTypesCommand extends $Command<GetOutpostInstanceTypesCommandInput, GetOutpostInstanceTypesCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: GetOutpostInstanceTypesCommandInput;
            constructor(input: GetOutpostInstanceTypesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetOutpostInstanceTypesCommandInput, GetOutpostInstanceTypesCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/GetSiteAddressCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetSiteAddressInput, GetSiteAddressOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface GetSiteAddressCommandInput extends GetSiteAddressInput {
    }
    export interface GetSiteAddressCommandOutput extends GetSiteAddressOutput, __MetadataBearer {
    }
    /**
        * <p>
        *       Gets the site address.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, GetSiteAddressCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, GetSiteAddressCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new GetSiteAddressCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSiteAddressCommandInput} for command's `input` shape.
        * @see {@link GetSiteAddressCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class GetSiteAddressCommand extends $Command<GetSiteAddressCommandInput, GetSiteAddressCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: GetSiteAddressCommandInput;
            constructor(input: GetSiteAddressCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSiteAddressCommandInput, GetSiteAddressCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/GetSiteCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetSiteInput, GetSiteOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface GetSiteCommandInput extends GetSiteInput {
    }
    export interface GetSiteCommandOutput extends GetSiteOutput, __MetadataBearer {
    }
    /**
        * <p>
        *       Gets information about the specified Outpost site.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, GetSiteCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, GetSiteCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new GetSiteCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSiteCommandInput} for command's `input` shape.
        * @see {@link GetSiteCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class GetSiteCommand extends $Command<GetSiteCommandInput, GetSiteCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: GetSiteCommandInput;
            constructor(input: GetSiteCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSiteCommandInput, GetSiteCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/ListAssetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListAssetsInput, ListAssetsOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface ListAssetsCommandInput extends ListAssetsInput {
    }
    export interface ListAssetsCommandOutput extends ListAssetsOutput, __MetadataBearer {
    }
    /**
        * <p>
        *       Lists the hardware assets in an Outpost. If you are using Dedicated Hosts on
        *       Amazon Web Services Outposts, you can filter your request by host ID to return a list of hardware
        *       assets that allocate resources for Dedicated Hosts.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, ListAssetsCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, ListAssetsCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new ListAssetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAssetsCommandInput} for command's `input` shape.
        * @see {@link ListAssetsCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class ListAssetsCommand extends $Command<ListAssetsCommandInput, ListAssetsCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: ListAssetsCommandInput;
            constructor(input: ListAssetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAssetsCommandInput, ListAssetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/ListCatalogItemsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListCatalogItemsInput, ListCatalogItemsOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface ListCatalogItemsCommandInput extends ListCatalogItemsInput {
    }
    export interface ListCatalogItemsCommandOutput extends ListCatalogItemsOutput, __MetadataBearer {
    }
    /**
        * <p>Lists the items in the catalog. Add filters to your request to return a
        *       more specific list of results. Use filters to match an item class, storage
        *       option, or EC2 family. </p>
        *          <p>If you specify multiple filters, the filters are joined with an <code>AND</code>, and
        *       the request returns only results that match all of the specified filters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, ListCatalogItemsCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, ListCatalogItemsCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new ListCatalogItemsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListCatalogItemsCommandInput} for command's `input` shape.
        * @see {@link ListCatalogItemsCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class ListCatalogItemsCommand extends $Command<ListCatalogItemsCommandInput, ListCatalogItemsCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: ListCatalogItemsCommandInput;
            constructor(input: ListCatalogItemsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListCatalogItemsCommandInput, ListCatalogItemsCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/ListOrdersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListOrdersInput, ListOrdersOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface ListOrdersCommandInput extends ListOrdersInput {
    }
    export interface ListOrdersCommandOutput extends ListOrdersOutput, __MetadataBearer {
    }
    /**
        * <p>Lists the Outpost orders for your Amazon Web Services account. You can filter your request by Outpost to
        *       return a more specific list of results. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, ListOrdersCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, ListOrdersCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new ListOrdersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListOrdersCommandInput} for command's `input` shape.
        * @see {@link ListOrdersCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class ListOrdersCommand extends $Command<ListOrdersCommandInput, ListOrdersCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: ListOrdersCommandInput;
            constructor(input: ListOrdersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListOrdersCommandInput, ListOrdersCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/ListOutpostsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListOutpostsInput, ListOutpostsOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface ListOutpostsCommandInput extends ListOutpostsInput {
    }
    export interface ListOutpostsCommandOutput extends ListOutpostsOutput, __MetadataBearer {
    }
    /**
        * <p>Lists the Outposts for your Amazon Web Services account. Add filters to your request to return
        *       a more specific list of results. Use filters to match an Outpost lifecycle status,
        *       Availability Zone (<code>us-east-1a</code>), and AZ ID (<code>use1-az1</code>). </p>
        *
        *          <p>If you specify multiple filters, the filters are joined with an <code>AND</code>, and the request returns only
        *       results that match all of the specified filters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, ListOutpostsCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, ListOutpostsCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new ListOutpostsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListOutpostsCommandInput} for command's `input` shape.
        * @see {@link ListOutpostsCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class ListOutpostsCommand extends $Command<ListOutpostsCommandInput, ListOutpostsCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: ListOutpostsCommandInput;
            constructor(input: ListOutpostsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListOutpostsCommandInput, ListOutpostsCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/ListSitesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListSitesInput, ListSitesOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface ListSitesCommandInput extends ListSitesInput {
    }
    export interface ListSitesCommandOutput extends ListSitesOutput, __MetadataBearer {
    }
    /**
        * <p>Lists the Outpost sites for your Amazon Web Services account. Add operating address filters to your request to
        *       return a more specific list of results. Use filters to match site city, country code, or state/region of the
        *       operating address. </p>
        *
        *          <p>If you specify multiple filters, the filters are joined with an <code>AND</code>, and the request returns only
        *       results that match all of the specified filters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, ListSitesCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, ListSitesCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new ListSitesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSitesCommandInput} for command's `input` shape.
        * @see {@link ListSitesCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class ListSitesCommand extends $Command<ListSitesCommandInput, ListSitesCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: ListSitesCommandInput;
            constructor(input: ListSitesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSitesCommandInput, ListSitesCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the tags for the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, ListTagsForResourceCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, ListTagsForResourceCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/StartConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartConnectionRequest, StartConnectionResponse } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface StartConnectionCommandInput extends StartConnectionRequest {
    }
    export interface StartConnectionCommandOutput extends StartConnectionResponse, __MetadataBearer {
    }
    /**
        * <note>
        *             <p>
        *       Amazon Web Services uses this action to install Outpost servers.</p>
        *          </note>
        *          <p>
        *       Starts the connection required for Outpost server installation.
        *     </p>
        *          <p>
        *       Use CloudTrail to monitor this action or Amazon Web Services managed policy for Amazon Web Services Outposts to secure it. For
        *       more information, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/security-iam-awsmanpol.html">
        *       Amazon Web Services managed policies for Amazon Web Services Outposts</a> and <a href="https://docs.aws.amazon.com/outposts/latest/userguide/logging-using-cloudtrail.html">
        *       Logging Amazon Web Services Outposts API calls with Amazon Web Services CloudTrail</a> in the <i>Amazon Web Services Outposts User Guide</i>.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, StartConnectionCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, StartConnectionCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new StartConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartConnectionCommandInput} for command's `input` shape.
        * @see {@link StartConnectionCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class StartConnectionCommand extends $Command<StartConnectionCommandInput, StartConnectionCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: StartConnectionCommandInput;
            constructor(input: StartConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartConnectionCommandInput, StartConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Adds tags to the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, TagResourceCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, TagResourceCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes tags from the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, UntagResourceCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, UntagResourceCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/UpdateOutpostCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateOutpostInput, UpdateOutpostOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface UpdateOutpostCommandInput extends UpdateOutpostInput {
    }
    export interface UpdateOutpostCommandOutput extends UpdateOutpostOutput, __MetadataBearer {
    }
    /**
        * <p>
        *       Updates an Outpost.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, UpdateOutpostCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, UpdateOutpostCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new UpdateOutpostCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateOutpostCommandInput} for command's `input` shape.
        * @see {@link UpdateOutpostCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class UpdateOutpostCommand extends $Command<UpdateOutpostCommandInput, UpdateOutpostCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: UpdateOutpostCommandInput;
            constructor(input: UpdateOutpostCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateOutpostCommandInput, UpdateOutpostCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/UpdateSiteAddressCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateSiteAddressInput, UpdateSiteAddressOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface UpdateSiteAddressCommandInput extends UpdateSiteAddressInput {
    }
    export interface UpdateSiteAddressCommandOutput extends UpdateSiteAddressOutput, __MetadataBearer {
    }
    /**
        * <p>
        *       Updates the site address.
        *     </p>
        *          <p>
        *       To update a site address
        *       with an order <code>IN_PROGRESS</code>, you must wait for the order
        *       to complete or cancel the order.
        *     </p>
        *          <p>You
        *       can update the operating address before you place an order at the
        *       site, or after all Outposts that belong to the site have been deactivated.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, UpdateSiteAddressCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, UpdateSiteAddressCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new UpdateSiteAddressCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSiteAddressCommandInput} for command's `input` shape.
        * @see {@link UpdateSiteAddressCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class UpdateSiteAddressCommand extends $Command<UpdateSiteAddressCommandInput, UpdateSiteAddressCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: UpdateSiteAddressCommandInput;
            constructor(input: UpdateSiteAddressCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSiteAddressCommandInput, UpdateSiteAddressCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/UpdateSiteCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateSiteInput, UpdateSiteOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface UpdateSiteCommandInput extends UpdateSiteInput {
    }
    export interface UpdateSiteCommandOutput extends UpdateSiteOutput, __MetadataBearer {
    }
    /**
        * <p>
        *       Updates the site.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, UpdateSiteCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, UpdateSiteCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new UpdateSiteCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSiteCommandInput} for command's `input` shape.
        * @see {@link UpdateSiteCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class UpdateSiteCommand extends $Command<UpdateSiteCommandInput, UpdateSiteCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: UpdateSiteCommandInput;
            constructor(input: UpdateSiteCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSiteCommandInput, UpdateSiteCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/UpdateSiteRackPhysicalPropertiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateSiteRackPhysicalPropertiesInput, UpdateSiteRackPhysicalPropertiesOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0";
    import { OutpostsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient";
    export interface UpdateSiteRackPhysicalPropertiesCommandInput extends UpdateSiteRackPhysicalPropertiesInput {
    }
    export interface UpdateSiteRackPhysicalPropertiesCommandOutput extends UpdateSiteRackPhysicalPropertiesOutput, __MetadataBearer {
    }
    /**
        * <p>Update the physical and logistical details for a rack at a site. For more information
        *       about hardware requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#checklist">Network
        *         readiness checklist</a> in the Amazon Web Services Outposts User Guide.
        *          </p>
        *          <p>To update a rack at a site with an order of <code>IN_PROGRESS</code>, you must wait for
        *       the order to complete or cancel the order.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OutpostsClient, UpdateSiteRackPhysicalPropertiesCommand } from "@aws-sdk/client-outposts"; // ES Modules import
        * // const { OutpostsClient, UpdateSiteRackPhysicalPropertiesCommand } = require("@aws-sdk/client-outposts"); // CommonJS import
        * const client = new OutpostsClient(config);
        * const command = new UpdateSiteRackPhysicalPropertiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSiteRackPhysicalPropertiesCommandInput} for command's `input` shape.
        * @see {@link UpdateSiteRackPhysicalPropertiesCommandOutput} for command's `response` shape.
        * @see {@link OutpostsClientResolvedConfig | config} for OutpostsClient's `config` shape.
        *
        */
    export class UpdateSiteRackPhysicalPropertiesCommand extends $Command<UpdateSiteRackPhysicalPropertiesCommandInput, UpdateSiteRackPhysicalPropertiesCommandOutput, OutpostsClientResolvedConfig> {
            readonly input: UpdateSiteRackPhysicalPropertiesCommandInput;
            constructor(input: UpdateSiteRackPhysicalPropertiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OutpostsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSiteRackPhysicalPropertiesCommandInput, UpdateSiteRackPhysicalPropertiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/OutpostsClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CancelOrderCommandInput, CancelOrderCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/CancelOrderCommand";
    import { CreateOrderCommandInput, CreateOrderCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/CreateOrderCommand";
    import { CreateOutpostCommandInput, CreateOutpostCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/CreateOutpostCommand";
    import { CreateSiteCommandInput, CreateSiteCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/CreateSiteCommand";
    import { DeleteOutpostCommandInput, DeleteOutpostCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/DeleteOutpostCommand";
    import { DeleteSiteCommandInput, DeleteSiteCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/DeleteSiteCommand";
    import { GetCatalogItemCommandInput, GetCatalogItemCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/GetCatalogItemCommand";
    import { GetConnectionCommandInput, GetConnectionCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/GetConnectionCommand";
    import { GetOrderCommandInput, GetOrderCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/GetOrderCommand";
    import { GetOutpostCommandInput, GetOutpostCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/GetOutpostCommand";
    import { GetOutpostInstanceTypesCommandInput, GetOutpostInstanceTypesCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/GetOutpostInstanceTypesCommand";
    import { GetSiteAddressCommandInput, GetSiteAddressCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/GetSiteAddressCommand";
    import { GetSiteCommandInput, GetSiteCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/GetSiteCommand";
    import { ListAssetsCommandInput, ListAssetsCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/ListAssetsCommand";
    import { ListCatalogItemsCommandInput, ListCatalogItemsCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/ListCatalogItemsCommand";
    import { ListOrdersCommandInput, ListOrdersCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/ListOrdersCommand";
    import { ListOutpostsCommandInput, ListOutpostsCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/ListOutpostsCommand";
    import { ListSitesCommandInput, ListSitesCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/ListSitesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/ListTagsForResourceCommand";
    import { StartConnectionCommandInput, StartConnectionCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/StartConnectionCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/UntagResourceCommand";
    import { UpdateOutpostCommandInput, UpdateOutpostCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/UpdateOutpostCommand";
    import { UpdateSiteAddressCommandInput, UpdateSiteAddressCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/UpdateSiteAddressCommand";
    import { UpdateSiteCommandInput, UpdateSiteCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/UpdateSiteCommand";
    import { UpdateSiteRackPhysicalPropertiesCommandInput, UpdateSiteRackPhysicalPropertiesCommandOutput } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/commands/UpdateSiteRackPhysicalPropertiesCommand";
    export type ServiceInputTypes = CancelOrderCommandInput | CreateOrderCommandInput | CreateOutpostCommandInput | CreateSiteCommandInput | DeleteOutpostCommandInput | DeleteSiteCommandInput | GetCatalogItemCommandInput | GetConnectionCommandInput | GetOrderCommandInput | GetOutpostCommandInput | GetOutpostInstanceTypesCommandInput | GetSiteAddressCommandInput | GetSiteCommandInput | ListAssetsCommandInput | ListCatalogItemsCommandInput | ListOrdersCommandInput | ListOutpostsCommandInput | ListSitesCommandInput | ListTagsForResourceCommandInput | StartConnectionCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateOutpostCommandInput | UpdateSiteAddressCommandInput | UpdateSiteCommandInput | UpdateSiteRackPhysicalPropertiesCommandInput;
    export type ServiceOutputTypes = CancelOrderCommandOutput | CreateOrderCommandOutput | CreateOutpostCommandOutput | CreateSiteCommandOutput | DeleteOutpostCommandOutput | DeleteSiteCommandOutput | GetCatalogItemCommandOutput | GetConnectionCommandOutput | GetOrderCommandOutput | GetOutpostCommandOutput | GetOutpostInstanceTypesCommandOutput | GetSiteAddressCommandOutput | GetSiteCommandOutput | ListAssetsCommandOutput | ListCatalogItemsCommandOutput | ListOrdersCommandOutput | ListOutpostsCommandOutput | ListSitesCommandOutput | ListTagsForResourceCommandOutput | StartConnectionCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateOutpostCommandOutput | UpdateSiteAddressCommandOutput | UpdateSiteCommandOutput | UpdateSiteRackPhysicalPropertiesCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type OutpostsClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of OutpostsClient class constructor that set the region, credentials and other options.
        */
    export interface OutpostsClientConfig extends OutpostsClientConfigType {
    }
    type OutpostsClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of OutpostsClient class. This is resolved and normalized from the {@link OutpostsClientConfig | constructor configuration interface}.
        */
    export interface OutpostsClientResolvedConfig extends OutpostsClientResolvedConfigType {
    }
    /**
        * <p>Amazon Web Services Outposts is a fully managed service that extends Amazon Web Services infrastructure, APIs, and tools
        *       to customer premises. By providing local access to Amazon Web Services managed infrastructure, Amazon Web Services Outposts
        *       enables customers to build and run applications on premises using the same programming
        *       interfaces as in Amazon Web Services Regions, while using local compute and storage resources for lower
        *       latency and local data processing needs.</p>
        */
    export class OutpostsClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, OutpostsClientResolvedConfig> {
            /**
                * The resolved configuration of OutpostsClient class. This is resolved and normalized from the {@link OutpostsClientConfig | constructor configuration interface}.
                */
            readonly config: OutpostsClientResolvedConfig;
            constructor(configuration: OutpostsClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { OutpostsServiceException as __BaseException } from "@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/OutpostsServiceException";
    /**
        * <p>You do not have permission to perform this operation.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>
        *       Information about an address.
        *     </p>
        */
    export interface Address {
            /**
                * <p>The name of the contact.</p>
                */
            ContactName?: string;
            /**
                * <p>The phone number of the contact.</p>
                */
            ContactPhoneNumber?: string;
            /**
                * <p>The first line of the address.</p>
                */
            AddressLine1: string | undefined;
            /**
                * <p>The second line of the address.</p>
                */
            AddressLine2?: string;
            /**
                * <p>The third line of the address.</p>
                */
            AddressLine3?: string;
            /**
                * <p>The city for the address.</p>
                */
            City: string | undefined;
            /**
                * <p>The state for the address.</p>
                */
            StateOrRegion: string | undefined;
            /**
                * <p>The district or county for the address.</p>
                */
            DistrictOrCounty?: string;
            /**
                * <p>The postal code for the address.</p>
                */
            PostalCode: string | undefined;
            /**
                * <p>The ISO-3166 two-letter country code for the address.</p>
                */
            CountryCode: string | undefined;
            /**
                * <p>The municipality for the address.</p>
                */
            Municipality?: string;
    }
    export namespace Address {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Address) => any;
    }
    export enum AddressType {
            OPERATING_ADDRESS = "OPERATING_ADDRESS",
            SHIPPING_ADDRESS = "SHIPPING_ADDRESS"
    }
    /**
        * <p>
        *       Information about the position of the asset in a rack.
        *     </p>
        */
    export interface AssetLocation {
            /**
                * <p>
                *       The position of an asset in a rack measured in rack units.
                *     </p>
                */
            RackElevation?: number;
    }
    export namespace AssetLocation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssetLocation) => any;
    }
    export enum AssetType {
            COMPUTE = "COMPUTE"
    }
    /**
        * <p>
        *       Information about compute hardware assets.
        *     </p>
        */
    export interface ComputeAttributes {
            /**
                * <p>
                *       The host ID of any Dedicated Hosts on the asset.
                *     </p>
                */
            HostId?: string;
    }
    export namespace ComputeAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComputeAttributes) => any;
    }
    /**
        * <p>
        *       Information about hardware assets.
        *     </p>
        */
    export interface AssetInfo {
            /**
                * <p>
                *       The ID of the asset.
                *     </p>
                */
            AssetId?: string;
            /**
                * <p>
                *       The rack ID of the asset.
                *     </p>
                */
            RackId?: string;
            /**
                * <p>
                *       The type of the asset.
                *     </p>
                */
            AssetType?: AssetType | string;
            /**
                * <p>
                *       Information about compute hardware assets.
                *     </p>
                */
            ComputeAttributes?: ComputeAttributes;
            /**
                * <p>
                *       The position of an asset in a rack.
                *     </p>
                */
            AssetLocation?: AssetLocation;
    }
    export namespace AssetInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssetInfo) => any;
    }
    export interface CancelOrderInput {
            /**
                * <p>
                *       The ID of the order to cancel.
                *     </p>
                */
            OrderId: string | undefined;
    }
    export namespace CancelOrderInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelOrderInput) => any;
    }
    export interface CancelOrderOutput {
    }
    export namespace CancelOrderOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelOrderOutput) => any;
    }
    export enum ResourceType {
            ORDER = "ORDER",
            OUTPOST = "OUTPOST"
    }
    /**
        * <p>Updating or deleting this resource can cause an inconsistent state.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The ID of the resource causing the conflict.</p>
                */
            ResourceId?: string;
            /**
                * <p>The type of the resource causing the conflict.</p>
                */
            ResourceType?: ResourceType | string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>An internal error has occurred.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>The specified request is not valid.</p>
        */
    export class NotFoundException extends __BaseException {
            readonly name: "NotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
    }
    /**
        * <p>A parameter is not valid.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    /**
        * <p> Information about EC2 capacity. </p>
        */
    export interface EC2Capacity {
            /**
                * <p>
                *       The family of the EC2 capacity.
                *     </p>
                */
            Family?: string;
            /**
                * <p>
                *       The maximum size of the EC2 capacity.
                *     </p>
                */
            MaxSize?: string;
            /**
                * <p>
                *       The quantity of the EC2 capacity.
                *     </p>
                */
            Quantity?: string;
    }
    export namespace EC2Capacity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EC2Capacity) => any;
    }
    export enum CatalogItemStatus {
            AVAILABLE = "AVAILABLE",
            DISCONTINUED = "DISCONTINUED"
    }
    export enum SupportedStorageEnum {
            EBS = "EBS",
            S3 = "S3"
    }
    /**
        * <p> Information about a catalog item. </p>
        */
    export interface CatalogItem {
            /**
                * <p>
                *       The ID of the catalog item.
                *     </p>
                */
            CatalogItemId?: string;
            /**
                * <p>
                *       The status of a catalog item.
                *     </p>
                */
            ItemStatus?: CatalogItemStatus | string;
            /**
                * <p>
                *       Information about the EC2 capacity of an item.
                *     </p>
                */
            EC2Capacities?: EC2Capacity[];
            /**
                * <p>
                *       Information about the power draw of an item.
                *     </p>
                */
            PowerKva?: number;
            /**
                * <p> The weight of the item in pounds. </p>
                */
            WeightLbs?: number;
            /**
                * <p>
                *       The uplink speed this catalog item requires for the
                *       connection to the Region.
                *     </p>
                */
            SupportedUplinkGbps?: number[];
            /**
                * <p>
                *       The supported storage options for the catalog item.
                *     </p>
                */
            SupportedStorage?: (SupportedStorageEnum | string)[];
    }
    export namespace CatalogItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CatalogItem) => any;
    }
    export enum CatalogItemClass {
            RACK = "RACK",
            SERVER = "SERVER"
    }
    /**
        * <p>
        *     Information about a connection.
        *     </p>
        */
    export interface ConnectionDetails {
            /**
                * <p>
                *       The public key of the client.
                *     </p>
                */
            ClientPublicKey?: string;
            /**
                * <p>
                *       The public key of the server.
                *     </p>
                */
            ServerPublicKey?: string;
            /**
                * <p>
                *       The endpoint for the server.
                *     </p>
                */
            ServerEndpoint?: string;
            /**
                * <p>
                *       The client tunnel address.
                *     </p>
                */
            ClientTunnelAddress?: string;
            /**
                * <p>
                *       The server tunnel address.
                *     </p>
                */
            ServerTunnelAddress?: string;
            /**
                * <p>
                *       The allowed IP addresses.
                *     </p>
                */
            AllowedIps?: string[];
    }
    export namespace ConnectionDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionDetails) => any;
    }
    /**
        * <p>Information about a line item request.</p>
        */
    export interface LineItemRequest {
            /**
                * <p>The ID of the catalog item.</p>
                */
            CatalogItemId?: string;
            /**
                * <p>The quantity of a line item request.</p>
                */
            Quantity?: number;
    }
    export namespace LineItemRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LineItemRequest) => any;
    }
    export enum PaymentOption {
            ALL_UPFRONT = "ALL_UPFRONT",
            NO_UPFRONT = "NO_UPFRONT",
            PARTIAL_UPFRONT = "PARTIAL_UPFRONT"
    }
    export enum PaymentTerm {
            THREE_YEARS = "THREE_YEARS"
    }
    export interface CreateOrderInput {
            /**
                * <p>
                *       The ID or the Amazon Resource Name (ARN) of the Outpost.
                *     </p>
                */
            OutpostIdentifier: string | undefined;
            /**
                * <p>The line items that make up the order.</p>
                */
            LineItems: LineItemRequest[] | undefined;
            /**
                * <p>The payment option for the order.</p>
                */
            PaymentOption: PaymentOption | string | undefined;
            /**
                * <p>The payment terms for the order.</p>
                */
            PaymentTerm?: PaymentTerm | string;
    }
    export namespace CreateOrderInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateOrderInput) => any;
    }
    /**
        * <p>
        *       Information about a line item asset.
        *     </p>
        */
    export interface LineItemAssetInformation {
            /**
                * <p>
                *       The ID of the asset.
                *     </p>
                */
            AssetId?: string;
            /**
                * <p>
                *       MAC addresses of the asset.
                *     </p>
                */
            MacAddressList?: string[];
    }
    export namespace LineItemAssetInformation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LineItemAssetInformation) => any;
    }
    export enum ShipmentCarrier {
            DBS = "DBS",
            DHL = "DHL",
            FEDEX = "FEDEX",
            UPS = "UPS"
    }
    /**
        * <p>
        *       Information about a line item shipment.
        *     </p>
        */
    export interface ShipmentInformation {
            /**
                * <p>
                *       The tracking number of the shipment.
                *     </p>
                */
            ShipmentTrackingNumber?: string;
            /**
                * <p>
                *       The carrier of the shipment.
                *     </p>
                */
            ShipmentCarrier?: ShipmentCarrier | string;
    }
    export namespace ShipmentInformation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ShipmentInformation) => any;
    }
    export enum LineItemStatus {
            BUILDING = "BUILDING",
            CANCELLED = "CANCELLED",
            DELIVERED = "DELIVERED",
            ERROR = "ERROR",
            INSTALLED = "INSTALLED",
            INSTALLING = "INSTALLING",
            PREPARING = "PREPARING",
            SHIPPED = "SHIPPED"
    }
    /**
        * <p>Information about a line item.</p>
        */
    export interface LineItem {
            /**
                * <p>
                *       The ID of the catalog item.
                *     </p>
                */
            CatalogItemId?: string;
            /**
                * <p>The ID of the line item.</p>
                */
            LineItemId?: string;
            /**
                * <p>The quantity of the line item.</p>
                */
            Quantity?: number;
            /**
                * <p>The status of the line item.</p>
                */
            Status?: LineItemStatus | string;
            /**
                * <p>
                *       Information about a line item shipment.
                *     </p>
                */
            ShipmentInformation?: ShipmentInformation;
            /**
                * <p>
                *       Information about assets.
                *     </p>
                */
            AssetInformationList?: LineItemAssetInformation[];
    }
    export namespace LineItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LineItem) => any;
    }
    export enum OrderStatus {
            CANCELLED = "CANCELLED",
            COMPLETED = "COMPLETED",
            ERROR = "ERROR",
            FULFILLED = "FULFILLED",
            INSTALLING = "INSTALLING",
            IN_PROGRESS = "IN_PROGRESS",
            PENDING = "PENDING",
            PREPARING = "PREPARING",
            PROCESSING = "PROCESSING",
            RECEIVED = "RECEIVED"
    }
    /**
        * <p>Information about an order.</p>
        */
    export interface Order {
            /**
                * <p>
                *       The ID of the Outpost in the order.
                *     </p>
                */
            OutpostId?: string;
            /**
                * <p>The ID of the order.</p>
                */
            OrderId?: string;
            /**
                * <p>The status of the order.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>PREPARING</code> - Order is received and being prepared.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>IN_PROGRESS</code> - Order is either being built, shipped, or installed. To get more
                *           details, see the <code>LineItem</code> status.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>COMPLETED</code> - Order is complete.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CANCELLED</code> - Order is cancelled.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ERROR</code> - Customer should contact support.</p>
                *             </li>
                *          </ul>
                *
                *          <note>
                *             <p>The following status are deprecated: <code>RECEIVED</code>, <code>PENDING</code>,
                *           <code>PROCESSING</code>, <code>INSTALLING</code>, and <code>FULFILLED</code>. </p>
                *          </note>
                */
            Status?: OrderStatus | string;
            /**
                * <p>The line items for the order</p>
                */
            LineItems?: LineItem[];
            /**
                * <p>The payment option for the order.</p>
                */
            PaymentOption?: PaymentOption | string;
            /**
                * <p>The submission date for the order.</p>
                */
            OrderSubmissionDate?: Date;
            /**
                * <p>The fulfillment date of the order.</p>
                */
            OrderFulfilledDate?: Date;
    }
    export namespace Order {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Order) => any;
    }
    export interface CreateOrderOutput {
            /**
                * <p>Information about this order.</p>
                */
            Order?: Order;
    }
    export namespace CreateOrderOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateOrderOutput) => any;
    }
    /**
        * <p>You have exceeded a service quota.</p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    export enum SupportedHardwareType {
            RACK = "RACK",
            SERVER = "SERVER"
    }
    export interface CreateOutpostInput {
            /**
                * <p>The name of the Outpost.</p>
                */
            Name: string | undefined;
            /**
                * <p>The description of the Outpost.</p>
                */
            Description?: string;
            /**
                * <p>
                *       The ID or the Amazon Resource Name (ARN) of the site.
                *     </p>
                *          <note>
                *             <p>In requests, Amazon Web Services Outposts accepts the Amazon Resource Name (ARN) or an ID for Outposts and
                *       sites throughout the Outposts Query API. To address backwards compatibility, the parameter names
                *       <code>OutpostID</code> or <code>SiteID</code> remain in use. Despite the parameter name,
                *       you can make the request with an ARN.</p>
                *          </note>
                */
            SiteId: string | undefined;
            /**
                * <p>The Availability Zone.</p>
                */
            AvailabilityZone?: string;
            /**
                * <p>The ID of the Availability Zone.</p>
                */
            AvailabilityZoneId?: string;
            /**
                * <p>The tags to apply to the Outpost.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>
                *       The type of hardware for this Outpost.
                *     </p>
                */
            SupportedHardwareType?: SupportedHardwareType | string;
    }
    export namespace CreateOutpostInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateOutpostInput) => any;
    }
    /**
        * <p>Information about an Outpost.</p>
        */
    export interface Outpost {
            /**
                * <p>
                *       The ID of the Outpost.
                *     </p>
                */
            OutpostId?: string;
            /**
                * <p>The Amazon Web Services account ID of the Outpost owner.</p>
                */
            OwnerId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the Outpost.</p>
                */
            OutpostArn?: string;
            /**
                * <p>
                *       The ID of the site.
                *     </p>
                */
            SiteId?: string;
            /**
                * <p>The name of the Outpost.</p>
                */
            Name?: string;
            /**
                * <p>The description of the Outpost.</p>
                */
            Description?: string;
            /**
                * <p>The life cycle status.</p>
                */
            LifeCycleStatus?: string;
            /**
                * <p>The Availability Zone.</p>
                */
            AvailabilityZone?: string;
            /**
                * <p>The ID of the Availability Zone.</p>
                */
            AvailabilityZoneId?: string;
            /**
                * <p>The Outpost tags.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The Amazon Resource Name (ARN) of the site.</p>
                */
            SiteArn?: string;
            /**
                * <p>
                *       The hardware type.
                *     </p>
                */
            SupportedHardwareType?: SupportedHardwareType | string;
    }
    export namespace Outpost {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Outpost) => any;
    }
    export interface CreateOutpostOutput {
            /**
                * <p>Information about an Outpost.</p>
                */
            Outpost?: Outpost;
    }
    export namespace CreateOutpostOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateOutpostOutput) => any;
    }
    export enum FiberOpticCableType {
            MULTI_MODE = "MULTI_MODE",
            SINGLE_MODE = "SINGLE_MODE"
    }
    export enum MaximumSupportedWeightLbs {
            MAX_1400_LBS = "MAX_1400_LBS",
            MAX_1600_LBS = "MAX_1600_LBS",
            MAX_1800_LBS = "MAX_1800_LBS",
            MAX_2000_LBS = "MAX_2000_LBS",
            NO_LIMIT = "NO_LIMIT"
    }
    export enum OpticalStandard {
            OPTIC_1000BASE_LX = "OPTIC_1000BASE_LX",
            OPTIC_1000BASE_SX = "OPTIC_1000BASE_SX",
            OPTIC_100GBASE_CWDM4 = "OPTIC_100GBASE_CWDM4",
            OPTIC_100GBASE_LR4 = "OPTIC_100GBASE_LR4",
            OPTIC_100GBASE_SR4 = "OPTIC_100GBASE_SR4",
            OPTIC_100G_PSM4_MSA = "OPTIC_100G_PSM4_MSA",
            OPTIC_10GBASE_IR = "OPTIC_10GBASE_IR",
            OPTIC_10GBASE_LR = "OPTIC_10GBASE_LR",
            OPTIC_10GBASE_SR = "OPTIC_10GBASE_SR",
            OPTIC_40GBASE_ESR = "OPTIC_40GBASE_ESR",
            OPTIC_40GBASE_IR4_LR4L = "OPTIC_40GBASE_IR4_LR4L",
            OPTIC_40GBASE_LR4 = "OPTIC_40GBASE_LR4",
            OPTIC_40GBASE_SR = "OPTIC_40GBASE_SR"
    }
    export enum PowerConnector {
            AH530P7W = "AH530P7W",
            AH532P6W = "AH532P6W",
            IEC309 = "IEC309",
            L6_30P = "L6_30P"
    }
    export enum PowerDrawKva {
            POWER_10_KVA = "POWER_10_KVA",
            POWER_15_KVA = "POWER_15_KVA",
            POWER_5_KVA = "POWER_5_KVA"
    }
    export enum PowerFeedDrop {
            ABOVE_RACK = "ABOVE_RACK",
            BELOW_RACK = "BELOW_RACK"
    }
    export enum PowerPhase {
            SINGLE_PHASE = "SINGLE_PHASE",
            THREE_PHASE = "THREE_PHASE"
    }
    export enum UplinkCount {
            UPLINK_COUNT_1 = "UPLINK_COUNT_1",
            UPLINK_COUNT_12 = "UPLINK_COUNT_12",
            UPLINK_COUNT_16 = "UPLINK_COUNT_16",
            UPLINK_COUNT_2 = "UPLINK_COUNT_2",
            UPLINK_COUNT_3 = "UPLINK_COUNT_3",
            UPLINK_COUNT_4 = "UPLINK_COUNT_4",
            UPLINK_COUNT_5 = "UPLINK_COUNT_5",
            UPLINK_COUNT_6 = "UPLINK_COUNT_6",
            UPLINK_COUNT_7 = "UPLINK_COUNT_7",
            UPLINK_COUNT_8 = "UPLINK_COUNT_8"
    }
    export enum UplinkGbps {
            UPLINK_100G = "UPLINK_100G",
            UPLINK_10G = "UPLINK_10G",
            UPLINK_1G = "UPLINK_1G",
            UPLINK_40G = "UPLINK_40G"
    }
    /**
        * <p> Information about the physical and logistical details for racks at sites.
        *       For more information
        *       about hardware requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#checklist">Network
        *         readiness checklist</a> in the Amazon Web Services Outposts User Guide.
        *         </p>
        */
    export interface RackPhysicalProperties {
            /**
                * <p>The power draw available at the hardware placement position for the rack. </p>
                */
            PowerDrawKva?: PowerDrawKva | string;
            /**
                * <p>The power option that you can provide for hardware.</p>
                */
            PowerPhase?: PowerPhase | string;
            /**
                * <p>The power connector for the hardware. </p>
                */
            PowerConnector?: PowerConnector | string;
            /**
                * <p>The position of the power feed.</p>
                */
            PowerFeedDrop?: PowerFeedDrop | string;
            /**
                * <p>The uplink speed the rack supports for the connection to the Region. </p>
                */
            UplinkGbps?: UplinkGbps | string;
            /**
                * <p>The number of uplinks each Outpost network device.</p>
                */
            UplinkCount?: UplinkCount | string;
            /**
                * <p>The type of fiber used to attach the Outpost to the network. </p>
                */
            FiberOpticCableType?: FiberOpticCableType | string;
            /**
                * <p>The type of optical standard used to attach the Outpost to the network. This field is
                *       dependent on uplink speed, fiber type, and distance to the upstream device. For more information
                *       about networking requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#facility-networking">Network</a>
                *         in the Amazon Web Services Outposts User Guide.
                *         </p>
                */
            OpticalStandard?: OpticalStandard | string;
            /**
                * <p>The maximum rack weight that this site can support. <code>NO_LIMIT</code> is over 2000 lbs
                *       (907 kg). </p>
                */
            MaximumSupportedWeightLbs?: MaximumSupportedWeightLbs | string;
    }
    export namespace RackPhysicalProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RackPhysicalProperties) => any;
    }
    export interface CreateSiteInput {
            /**
                * <p>The name of the site.</p>
                */
            Name: string | undefined;
            /**
                * <p>The description of the site.</p>
                */
            Description?: string;
            /**
                * <p>Additional information that you provide about site access requirements, electrician
                *       scheduling, personal protective equipment, or regulation of equipment materials that could
                *       affect your installation process. </p>
                */
            Notes?: string;
            /**
                * <p>
                *       The tags to apply to a site.
                *     </p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>
                *       The location to install and power on the hardware. This address might be
                *       different from the shipping address.
                *     </p>
                */
            OperatingAddress?: Address;
            /**
                * <p>
                *       The location to ship the hardware. This address might be different
                *       from the operating address.
                *     </p>
                */
            ShippingAddress?: Address;
            /**
                * <p> Information about the physical and logistical details for the rack at this site.
                *       For more information
                *       about hardware requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#checklist">Network
                *         readiness checklist</a> in the Amazon Web Services Outposts User Guide.
                *         </p>
                */
            RackPhysicalProperties?: RackPhysicalProperties;
    }
    export namespace CreateSiteInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSiteInput) => any;
    }
    /**
        * <p>Information about a site.</p>
        */
    export interface Site {
            /**
                * <p>
                *       The ID of the site.
                *     </p>
                */
            SiteId?: string;
            /**
                * <p>The ID of the Amazon Web Services account.</p>
                */
            AccountId?: string;
            /**
                * <p>The name of the site.</p>
                */
            Name?: string;
            /**
                * <p>The description of the site.</p>
                */
            Description?: string;
            /**
                * <p>The site tags.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The Amazon Resource Name (ARN) of the site.</p>
                */
            SiteArn?: string;
            /**
                * <p>
                *       Notes about a site.
                *     </p>
                */
            Notes?: string;
            /**
                * <p>
                *       The ISO-3166 two-letter country code where the hardware is installed and powered on.
                *     </p>
                */
            OperatingAddressCountryCode?: string;
            /**
                * <p> State or region where the hardware is installed and powered on. </p>
                */
            OperatingAddressStateOrRegion?: string;
            /**
                * <p>
                *       City where the hardware is installed and powered on.
                *     </p>
                */
            OperatingAddressCity?: string;
            /**
                * <p>
                *       Information about the physical and logistical details for a rack at the site.
                *     </p>
                */
            RackPhysicalProperties?: RackPhysicalProperties;
    }
    export namespace Site {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Site) => any;
    }
    export interface CreateSiteOutput {
            /**
                * <p>Information about a site.</p>
                */
            Site?: Site;
    }
    export namespace CreateSiteOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSiteOutput) => any;
    }
    export interface DeleteOutpostInput {
            /**
                * <p>
                *       The ID or the Amazon Resource Name (ARN) of the Outpost.
                *     </p>
                *          <note>
                *             <p>In requests, Amazon Web Services Outposts accepts the Amazon Resource Name (ARN) or an ID for Outposts and
                *       sites throughout the Outposts Query API. To address backwards compatibility, the parameter names
                *       <code>OutpostID</code> or <code>SiteID</code> remain in use. Despite the parameter name,
                *       you can make the request with an ARN.</p>
                *          </note>
                */
            OutpostId: string | undefined;
    }
    export namespace DeleteOutpostInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteOutpostInput) => any;
    }
    export interface DeleteOutpostOutput {
    }
    export namespace DeleteOutpostOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteOutpostOutput) => any;
    }
    export interface DeleteSiteInput {
            /**
                * <p>
                *       The ID or the Amazon Resource Name (ARN) of the site.
                *     </p>
                *          <note>
                *             <p>In requests, Amazon Web Services Outposts accepts the Amazon Resource Name (ARN) or an ID for Outposts and
                *       sites throughout the Outposts Query API. To address backwards compatibility, the parameter names
                *       <code>OutpostID</code> or <code>SiteID</code> remain in use. Despite the parameter name,
                *       you can make the request with an ARN.</p>
                *          </note>
                */
            SiteId: string | undefined;
    }
    export namespace DeleteSiteInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSiteInput) => any;
    }
    export interface DeleteSiteOutput {
    }
    export namespace DeleteSiteOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSiteOutput) => any;
    }
    export interface GetCatalogItemInput {
            /**
                * <p>The ID of the catalog item.</p>
                */
            CatalogItemId: string | undefined;
    }
    export namespace GetCatalogItemInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCatalogItemInput) => any;
    }
    export interface GetCatalogItemOutput {
            /**
                * <p>Information about this catalog item.</p>
                */
            CatalogItem?: CatalogItem;
    }
    export namespace GetCatalogItemOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCatalogItemOutput) => any;
    }
    export interface GetConnectionRequest {
            /**
                * <p>
                *       The ID of the connection you request.
                *     </p>
                */
            ConnectionId: string | undefined;
    }
    export namespace GetConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectionRequest) => any;
    }
    export interface GetConnectionResponse {
            /**
                * <p>
                *       The ID of the connection you receive.
                *     </p>
                */
            ConnectionId?: string;
            /**
                * <p>
                *      Information about a connection.
                *     </p>
                */
            ConnectionDetails?: ConnectionDetails;
    }
    export namespace GetConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectionResponse) => any;
    }
    export interface GetOrderInput {
            /**
                * <p>The ID of the order.</p>
                */
            OrderId: string | undefined;
    }
    export namespace GetOrderInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOrderInput) => any;
    }
    export interface GetOrderOutput {
            /**
                * <p>Information about an order.</p>
                */
            Order?: Order;
    }
    export namespace GetOrderOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOrderOutput) => any;
    }
    export interface GetOutpostInput {
            /**
                * <p>
                *       The ID or the Amazon Resource Name (ARN) of the Outpost.
                *     </p>
                *          <note>
                *             <p>In requests, Amazon Web Services Outposts accepts the Amazon Resource Name (ARN) or an ID for Outposts and
                *       sites throughout the Outposts Query API. To address backwards compatibility, the parameter names
                *       <code>OutpostID</code> or <code>SiteID</code> remain in use. Despite the parameter name,
                *       you can make the request with an ARN.</p>
                *          </note>
                */
            OutpostId: string | undefined;
    }
    export namespace GetOutpostInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOutpostInput) => any;
    }
    export interface GetOutpostOutput {
            /**
                * <p>Information about an Outpost.</p>
                */
            Outpost?: Outpost;
    }
    export namespace GetOutpostOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOutpostOutput) => any;
    }
    export interface GetOutpostInstanceTypesInput {
            /**
                * <p>
                *       The ID or the Amazon Resource Name (ARN) of the Outpost.
                *     </p>
                *          <note>
                *             <p>In requests, Amazon Web Services Outposts accepts the Amazon Resource Name (ARN) or an ID for Outposts and
                *       sites throughout the Outposts Query API. To address backwards compatibility, the parameter names
                *       <code>OutpostID</code> or <code>SiteID</code> remain in use. Despite the parameter name,
                *       you can make the request with an ARN.</p>
                *          </note>
                */
            OutpostId: string | undefined;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum page size.</p>
                */
            MaxResults?: number;
    }
    export namespace GetOutpostInstanceTypesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOutpostInstanceTypesInput) => any;
    }
    /**
        * <p>Information about an instance type.</p>
        */
    export interface InstanceTypeItem {
            /**
                * <p>The instance type.</p>
                */
            InstanceType?: string;
    }
    export namespace InstanceTypeItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceTypeItem) => any;
    }
    export interface GetOutpostInstanceTypesOutput {
            /**
                * <p>Information about the instance types.</p>
                */
            InstanceTypes?: InstanceTypeItem[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>
                *       The ID of the Outpost.
                *     </p>
                *          <note>
                *             <p>In requests, Amazon Web Services Outposts accepts the Amazon Resource Name (ARN) or an ID for Outposts and
                *       sites throughout the Outposts Query API. To address backwards compatibility, the parameter names
                *       <code>OutpostID</code> or <code>SiteID</code> remain in use. Despite the parameter name,
                *       you can make the request with an ARN.</p>
                *          </note>
                */
            OutpostId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the Outpost.</p>
                */
            OutpostArn?: string;
    }
    export namespace GetOutpostInstanceTypesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOutpostInstanceTypesOutput) => any;
    }
    export interface GetSiteInput {
            /**
                * <p>
                *       The ID or the Amazon Resource Name (ARN) of the site.
                *     </p>
                *          <note>
                *             <p>In requests, Amazon Web Services Outposts accepts the Amazon Resource Name (ARN) or an ID for Outposts and
                *       sites throughout the Outposts Query API. To address backwards compatibility, the parameter names
                *       <code>OutpostID</code> or <code>SiteID</code> remain in use. Despite the parameter name,
                *       you can make the request with an ARN.</p>
                *          </note>
                */
            SiteId: string | undefined;
    }
    export namespace GetSiteInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSiteInput) => any;
    }
    export interface GetSiteOutput {
            /**
                * <p>Information about a site.</p>
                */
            Site?: Site;
    }
    export namespace GetSiteOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSiteOutput) => any;
    }
    export interface GetSiteAddressInput {
            /**
                * <p>
                *       The ID or the Amazon Resource Name (ARN) of the site.
                *     </p>
                *          <note>
                *             <p>In requests, Amazon Web Services Outposts accepts the Amazon Resource Name (ARN) or an ID for Outposts and
                *       sites throughout the Outposts Query API. To address backwards compatibility, the parameter names
                *       <code>OutpostID</code> or <code>SiteID</code> remain in use. Despite the parameter name,
                *       you can make the request with an ARN.</p>
                *          </note>
                */
            SiteId: string | undefined;
            /**
                * <p> The type of the address you request. </p>
                */
            AddressType: AddressType | string | undefined;
    }
    export namespace GetSiteAddressInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSiteAddressInput) => any;
    }
    export interface GetSiteAddressOutput {
            /**
                * <p>
                *       The ID of the site.
                *     </p>
                */
            SiteId?: string;
            /**
                * <p> The type of the address you receive. </p>
                */
            AddressType?: AddressType | string;
            /**
                * <p>
                *       Information about the address.
                *     </p>
                */
            Address?: Address;
    }
    export namespace GetSiteAddressOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSiteAddressOutput) => any;
    }
    export interface ListAssetsInput {
            /**
                * <p>
                *       The ID or the Amazon Resource Name (ARN) of the Outpost.
                *     </p>
                */
            OutpostIdentifier: string | undefined;
            /**
                * <p>
                *       A filter for the host ID of Dedicated Hosts on the Outpost.
                *     </p>
                *          <p>Filter values are case sensitive. If you specify multiple
                *          values for a filter, the values are joined with an <code>OR</code>, and the request returns
                *          all results that match any of the specified values.</p>
                */
            HostIdFilter?: string[];
            /**
                * <p>The maximum page size.</p>
                */
            MaxResults?: number;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListAssetsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssetsInput) => any;
    }
    export interface ListAssetsOutput {
            /**
                * <p>
                *       Information about hardware assets.
                *     </p>
                */
            Assets?: AssetInfo[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListAssetsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssetsOutput) => any;
    }
    export interface ListCatalogItemsInput {
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum page size.</p>
                */
            MaxResults?: number;
            /**
                * <p>
                *       A filter for the class of items in the catalog.
                *     </p>
                *          <p>Filter values are case sensitive. If you specify multiple
                *          values for a filter, the values are joined with an <code>OR</code>, and the request returns
                *          all results that match any of the specified values.</p>
                */
            ItemClassFilter?: (CatalogItemClass | string)[];
            /**
                * <p>
                *       A filter for the storage options of items in the catalog.
                *     </p>
                *          <p>Filter values are case sensitive. If you specify multiple
                *          values for a filter, the values are joined with an <code>OR</code>, and the request returns
                *          all results that match any of the specified values.</p>
                */
            SupportedStorageFilter?: (SupportedStorageEnum | string)[];
            /**
                * <p>
                *       A filter for EC2 family options for items in the catalog.
                *     </p>
                *          <p>Filter values are case sensitive. If you specify multiple
                *          values for a filter, the values are joined with an <code>OR</code>, and the request returns
                *          all results that match any of the specified values.</p>
                */
            EC2FamilyFilter?: string[];
    }
    export namespace ListCatalogItemsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCatalogItemsInput) => any;
    }
    export interface ListCatalogItemsOutput {
            /**
                * <p>Information about the catalog items.</p>
                */
            CatalogItems?: CatalogItem[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListCatalogItemsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCatalogItemsOutput) => any;
    }
    export interface ListOrdersInput {
            /**
                * <p>
                *       The ID or the Amazon Resource Name (ARN) of the Outpost.
                *     </p>
                */
            OutpostIdentifierFilter?: string;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum page size.</p>
                */
            MaxResults?: number;
    }
    export namespace ListOrdersInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOrdersInput) => any;
    }
    export enum OrderType {
            OUTPOST = "OUTPOST",
            REPLACEMENT = "REPLACEMENT"
    }
    /**
        * <p>
        *       A summary of line items in your order.
        *     </p>
        */
    export interface OrderSummary {
            /**
                * <p>
                *       The ID of the Outpost.
                *     </p>
                */
            OutpostId?: string;
            /**
                * <p>
                *       The ID of the order.
                *     </p>
                */
            OrderId?: string;
            /**
                * <p>
                *       The type of order.
                *     </p>
                */
            OrderType?: OrderType | string;
            /**
                * <p>The status of the order.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>PREPARING</code> - Order is received and is being prepared.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>IN_PROGRESS</code> - Order is either being built, shipped, or installed. For more
                *           information, see the <code>LineItem</code> status.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>COMPLETED</code> - Order is complete.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CANCELLED</code> - Order is cancelled.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ERROR</code> - Customer should contact support.</p>
                *             </li>
                *          </ul>
                *
                *          <note>
                *             <p>The following statuses are deprecated: <code>RECEIVED</code>, <code>PENDING</code>,
                *           <code>PROCESSING</code>, <code>INSTALLING</code>, and <code>FULFILLED</code>. </p>
                *          </note>
                */
            Status?: OrderStatus | string;
            /**
                * <p>
                *       The status of all line items in the order.
                *     </p>
                */
            LineItemCountsByStatus?: Record<string, number>;
            /**
                * <p>
                *       Submission date for the order.
                *     </p>
                */
            OrderSubmissionDate?: Date;
            /**
                * <p>
                *       Fulfilment date for the order.
                *     </p>
                */
            OrderFulfilledDate?: Date;
    }
    export namespace OrderSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OrderSummary) => any;
    }
    export interface ListOrdersOutput {
            /**
                * <p>
                *       Information about the orders.
                *     </p>
                */
            Orders?: OrderSummary[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListOrdersOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOrdersOutput) => any;
    }
    export interface ListOutpostsInput {
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum page size.</p>
                */
            MaxResults?: number;
            /**
                * <p>
                *       A filter for the lifecycle status of the Outpost.
                *     </p>
                *          <p>Filter values are case sensitive. If you specify multiple
                *          values for a filter, the values are joined with an <code>OR</code>, and the request returns
                *          all results that match any of the specified values.</p>
                */
            LifeCycleStatusFilter?: string[];
            /**
                * <p> A filter for the Availability Zone (<code>us-east-1a</code>) of the Outpost. </p>
                *
                *          <p>Filter values are case sensitive. If you specify multiple
                *          values for a filter, the values are joined with an <code>OR</code>, and the request returns
                *          all results that match any of the specified values.</p>
                */
            AvailabilityZoneFilter?: string[];
            /**
                * <p>
                *       A filter for the AZ IDs (<code>use1-az1</code>) of the Outpost.
                *     </p>
                *
                *          <p>Filter values are case sensitive. If you specify multiple
                *          values for a filter, the values are joined with an <code>OR</code>, and the request returns
                *          all results that match any of the specified values.</p>
                */
            AvailabilityZoneIdFilter?: string[];
    }
    export namespace ListOutpostsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOutpostsInput) => any;
    }
    export interface ListOutpostsOutput {
            /**
                * <p>Information about the Outposts.</p>
                */
            Outposts?: Outpost[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListOutpostsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOutpostsOutput) => any;
    }
    export interface ListSitesInput {
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum page size.</p>
                */
            MaxResults?: number;
            /**
                * <p> A filter for the country code of the Outpost site. </p>
                *          <p>Filter values are case sensitive. If you specify multiple
                *          values for a filter, the values are joined with an <code>OR</code>, and the request returns
                *          all results that match any of the specified values.</p>
                */
            OperatingAddressCountryCodeFilter?: string[];
            /**
                * <p> A filter for the state/region of the Outpost site. </p>
                *          <p>Filter values are case sensitive. If you specify multiple
                *          values for a filter, the values are joined with an <code>OR</code>, and the request returns
                *          all results that match any of the specified values.</p>
                */
            OperatingAddressStateOrRegionFilter?: string[];
            /**
                * <p>
                *       A filter for the city of the Outpost site.
                *     </p>
                *          <p>Filter values are case sensitive. If you specify multiple
                *          values for a filter, the values are joined with an <code>OR</code>, and the request returns
                *          all results that match any of the specified values.</p>
                */
            OperatingAddressCityFilter?: string[];
    }
    export namespace ListSitesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSitesInput) => any;
    }
    export interface ListSitesOutput {
            /**
                * <p>Information about the sites.</p>
                */
            Sites?: Site[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListSitesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSitesOutput) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The resource tags.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface StartConnectionRequest {
            /**
                * <p>
                *       The serial number of the dongle.
                *     </p>
                */
            DeviceSerialNumber: string | undefined;
            /**
                * <p>
                *       The ID of the Outpost server.
                *     </p>
                */
            AssetId: string | undefined;
            /**
                * <p>
                *       The public key of the client.
                *     </p>
                */
            ClientPublicKey: string | undefined;
            /**
                * <p>
                *       The device index of the network interface on the Outpost server.
                *     </p>
                */
            NetworkInterfaceDeviceIndex: number | undefined;
    }
    export namespace StartConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartConnectionRequest) => any;
    }
    export interface StartConnectionResponse {
            /**
                * <p>
                *       The ID of the connection.
                *     </p>
                */
            ConnectionId?: string;
            /**
                * <p>
                *       The underlay IP address.
                *     </p>
                */
            UnderlayIpAddress?: string;
    }
    export namespace StartConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartConnectionResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The tags to add to the resource.</p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The tag keys.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateOutpostInput {
            /**
                * <p>
                *       The ID or the Amazon Resource Name (ARN) of the Outpost.
                *     </p>
                *          <note>
                *             <p>In requests, Amazon Web Services Outposts accepts the Amazon Resource Name (ARN) or an ID for Outposts and
                *       sites throughout the Outposts Query API. To address backwards compatibility, the parameter names
                *       <code>OutpostID</code> or <code>SiteID</code> remain in use. Despite the parameter name,
                *       you can make the request with an ARN.</p>
                *          </note>
                */
            OutpostId: string | undefined;
            /**
                * <p>The name of the Outpost.</p>
                */
            Name?: string;
            /**
                * <p>The description of the Outpost.</p>
                */
            Description?: string;
            /**
                * <p>
                *       The type of hardware for this Outpost.
                *     </p>
                */
            SupportedHardwareType?: SupportedHardwareType | string;
    }
    export namespace UpdateOutpostInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateOutpostInput) => any;
    }
    export interface UpdateOutpostOutput {
            /**
                * <p>Information about an Outpost.</p>
                */
            Outpost?: Outpost;
    }
    export namespace UpdateOutpostOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateOutpostOutput) => any;
    }
    export interface UpdateSiteInput {
            /**
                * <p>
                *       The ID or the Amazon Resource Name (ARN) of the site.
                *     </p>
                *          <note>
                *             <p>In requests, Amazon Web Services Outposts accepts the Amazon Resource Name (ARN) or an ID for Outposts and
                *       sites throughout the Outposts Query API. To address backwards compatibility, the parameter names
                *       <code>OutpostID</code> or <code>SiteID</code> remain in use. Despite the parameter name,
                *       you can make the request with an ARN.</p>
                *          </note>
                */
            SiteId: string | undefined;
            /**
                * <p>The name of the site.</p>
                */
            Name?: string;
            /**
                * <p>The description of the site.</p>
                */
            Description?: string;
            /**
                * <p>
                *       Notes about a site.
                *     </p>
                */
            Notes?: string;
    }
    export namespace UpdateSiteInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSiteInput) => any;
    }
    export interface UpdateSiteOutput {
            /**
                * <p>Information about a site.</p>
                */
            Site?: Site;
    }
    export namespace UpdateSiteOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSiteOutput) => any;
    }
    export interface UpdateSiteAddressInput {
            /**
                * <p>
                *       The ID or the Amazon Resource Name (ARN) of the site.
                *     </p>
                *          <note>
                *             <p>In requests, Amazon Web Services Outposts accepts the Amazon Resource Name (ARN) or an ID for Outposts and
                *       sites throughout the Outposts Query API. To address backwards compatibility, the parameter names
                *       <code>OutpostID</code> or <code>SiteID</code> remain in use. Despite the parameter name,
                *       you can make the request with an ARN.</p>
                *          </note>
                */
            SiteId: string | undefined;
            /**
                * <p>
                *       The type of the address.
                *     </p>
                */
            AddressType: AddressType | string | undefined;
            /**
                * <p>
                *       The address for the site.
                *     </p>
                */
            Address: Address | undefined;
    }
    export namespace UpdateSiteAddressInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSiteAddressInput) => any;
    }
    export interface UpdateSiteAddressOutput {
            /**
                * <p>
                *       The type of the address.
                *     </p>
                */
            AddressType?: AddressType | string;
            /**
                * <p>
                *       Information about an address.
                *     </p>
                */
            Address?: Address;
    }
    export namespace UpdateSiteAddressOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSiteAddressOutput) => any;
    }
    export interface UpdateSiteRackPhysicalPropertiesInput {
            /**
                * <p>
                *       The ID or the Amazon Resource Name (ARN) of the site.
                *     </p>
                *          <note>
                *             <p>In requests, Amazon Web Services Outposts accepts the Amazon Resource Name (ARN) or an ID for Outposts and
                *       sites throughout the Outposts Query API. To address backwards compatibility, the parameter names
                *       <code>OutpostID</code> or <code>SiteID</code> remain in use. Despite the parameter name,
                *       you can make the request with an ARN.</p>
                *          </note>
                */
            SiteId: string | undefined;
            /**
                * <p>Specify in kVA the power draw available at the hardware placement position for the
                *       rack.</p>
                */
            PowerDrawKva?: PowerDrawKva | string;
            /**
                * <p> Specify the power option that you can provide for hardware. </p>
                *          <ul>
                *             <li>
                *                <p>Single-phase AC feed: 200 V to 277 V, 50 Hz or 60 Hz</p>
                *             </li>
                *             <li>
                *                <p>Three-phase AC feed: 346 V to 480 V, 50 Hz or 60 Hz</p>
                *             </li>
                *          </ul>
                */
            PowerPhase?: PowerPhase | string;
            /**
                * <p> Specify the power connector that Amazon Web Services should plan to provide for connections to the
                *       hardware. Note the correlation between <code>PowerPhase</code> and
                *       <code>PowerConnector</code>. </p>
                *          <ul>
                *             <li>
                *                <p>Single-phase AC feed</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <b>L6-30P</b> – (common in US); 30A; single phase</p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <b>IEC309 (blue)</b> – P+N+E, 6hr; 32 A; single
                *               phase</p>
                *                   </li>
                *                </ul>
                *             </li>
                *             <li>
                *                <p>Three-phase AC feed</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <b>AH530P7W (red)</b> – 3P+N+E, 7hr; 30A; three
                *               phase</p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <b>AH532P6W (red)</b> – 3P+N+E, 6hr; 32A; three
                *               phase</p>
                *                   </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            PowerConnector?: PowerConnector | string;
            /**
                * <p> Specify whether the power feed comes above or below the rack. </p>
                */
            PowerFeedDrop?: PowerFeedDrop | string;
            /**
                * <p> Specify the uplink speed the rack should support for the connection to the Region.
                *     </p>
                */
            UplinkGbps?: UplinkGbps | string;
            /**
                * <p>Racks come with two Outpost network devices. Depending on the supported uplink speed at
                *       the site, the Outpost network devices provide a variable number of uplinks. Specify the number
                *       of uplinks for each Outpost network device that you intend to use to connect the rack to your
                *       network. Note the correlation between <code>UplinkGbps</code> and <code>UplinkCount</code>. </p>
                *          <ul>
                *             <li>
                *                <p>1Gbps - Uplinks available: 1, 2, 4, 6, 8</p>
                *             </li>
                *             <li>
                *                <p>10Gbps - Uplinks available: 1, 2, 4, 8, 12, 16</p>
                *             </li>
                *             <li>
                *                <p>40 and 100 Gbps- Uplinks available: 1, 2, 4</p>
                *             </li>
                *          </ul>
                */
            UplinkCount?: UplinkCount | string;
            /**
                * <p> Specify the type of fiber that you will use to attach the Outpost to your network.
                *     </p>
                */
            FiberOpticCableType?: FiberOpticCableType | string;
            /**
                * <p>Specify the type of optical standard that you will use to attach the Outpost to your
                *       network. This field is dependent on uplink speed, fiber type, and distance to the upstream
                *       device. For more information
                *       about networking requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#facility-networking">Network</a>
                *         in the Amazon Web Services Outposts User Guide.
                *         </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>OPTIC_10GBASE_SR</code>: 10GBASE-SR</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>OPTIC_10GBASE_IR</code>: 10GBASE-IR</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>OPTIC_10GBASE_LR</code>: 10GBASE-LR</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>OPTIC_40GBASE_SR</code>: 40GBASE-SR</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>OPTIC_40GBASE_ESR</code>: 40GBASE-ESR</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>OPTIC_40GBASE_IR4_LR4L</code>: 40GBASE-IR (LR4L)</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>OPTIC_40GBASE_LR4</code>: 40GBASE-LR4</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>OPTIC_100GBASE_SR4</code>: 100GBASE-SR4</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>OPTIC_100GBASE_CWDM4</code>: 100GBASE-CWDM4</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>OPTIC_100GBASE_LR4</code>: 100GBASE-LR4</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>OPTIC_100G_PSM4_MSA</code>: 100G PSM4 MSA</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>OPTIC_1000BASE_LX</code>: 1000Base-LX</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>OPTIC_1000BASE_SX</code> : 1000Base-SX</p>
                *             </li>
                *          </ul>
                */
            OpticalStandard?: OpticalStandard | string;
            /**
                * <p> Specify the maximum rack weight that this site can support. <code>NO_LIMIT</code> is over
                *       2000lbs. </p>
                */
            MaximumSupportedWeightLbs?: MaximumSupportedWeightLbs | string;
    }
    export namespace UpdateSiteRackPhysicalPropertiesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSiteRackPhysicalPropertiesInput) => any;
    }
    export interface UpdateSiteRackPhysicalPropertiesOutput {
            /**
                * <p>Information about a site.</p>
                */
            Site?: Site;
    }
    export namespace UpdateSiteRackPhysicalPropertiesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSiteRackPhysicalPropertiesOutput) => any;
    }
}

declare module '@aws-sdk/client-outposts/node_modules/@aws-sdk/client-outposts/dist-types/models/OutpostsServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Outposts service.
        */
    export class OutpostsServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

