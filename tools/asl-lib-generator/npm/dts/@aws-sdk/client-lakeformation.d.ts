// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   stream

declare module '@aws-sdk/client-lakeformation' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AddLFTagsToResourceCommandInput, AddLFTagsToResourceCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/AddLFTagsToResourceCommand";
    import { BatchGrantPermissionsCommandInput, BatchGrantPermissionsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/BatchGrantPermissionsCommand";
    import { BatchRevokePermissionsCommandInput, BatchRevokePermissionsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/BatchRevokePermissionsCommand";
    import { CancelTransactionCommandInput, CancelTransactionCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/CancelTransactionCommand";
    import { CommitTransactionCommandInput, CommitTransactionCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/CommitTransactionCommand";
    import { CreateDataCellsFilterCommandInput, CreateDataCellsFilterCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/CreateDataCellsFilterCommand";
    import { CreateLFTagCommandInput, CreateLFTagCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/CreateLFTagCommand";
    import { DeleteDataCellsFilterCommandInput, DeleteDataCellsFilterCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/DeleteDataCellsFilterCommand";
    import { DeleteLFTagCommandInput, DeleteLFTagCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/DeleteLFTagCommand";
    import { DeleteObjectsOnCancelCommandInput, DeleteObjectsOnCancelCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/DeleteObjectsOnCancelCommand";
    import { DeregisterResourceCommandInput, DeregisterResourceCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/DeregisterResourceCommand";
    import { DescribeResourceCommandInput, DescribeResourceCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/DescribeResourceCommand";
    import { DescribeTransactionCommandInput, DescribeTransactionCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/DescribeTransactionCommand";
    import { ExtendTransactionCommandInput, ExtendTransactionCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/ExtendTransactionCommand";
    import { GetDataLakeSettingsCommandInput, GetDataLakeSettingsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetDataLakeSettingsCommand";
    import { GetEffectivePermissionsForPathCommandInput, GetEffectivePermissionsForPathCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetEffectivePermissionsForPathCommand";
    import { GetLFTagCommandInput, GetLFTagCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetLFTagCommand";
    import { GetQueryStateCommandInput, GetQueryStateCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetQueryStateCommand";
    import { GetQueryStatisticsCommandInput, GetQueryStatisticsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetQueryStatisticsCommand";
    import { GetResourceLFTagsCommandInput, GetResourceLFTagsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetResourceLFTagsCommand";
    import { GetTableObjectsCommandInput, GetTableObjectsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetTableObjectsCommand";
    import { GetTemporaryGluePartitionCredentialsCommandInput, GetTemporaryGluePartitionCredentialsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetTemporaryGluePartitionCredentialsCommand";
    import { GetTemporaryGlueTableCredentialsCommandInput, GetTemporaryGlueTableCredentialsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetTemporaryGlueTableCredentialsCommand";
    import { GetWorkUnitResultsCommandInput, GetWorkUnitResultsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetWorkUnitResultsCommand";
    import { GetWorkUnitsCommandInput, GetWorkUnitsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetWorkUnitsCommand";
    import { GrantPermissionsCommandInput, GrantPermissionsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GrantPermissionsCommand";
    import { ListDataCellsFilterCommandInput, ListDataCellsFilterCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/ListDataCellsFilterCommand";
    import { ListLFTagsCommandInput, ListLFTagsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/ListLFTagsCommand";
    import { ListPermissionsCommandInput, ListPermissionsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/ListPermissionsCommand";
    import { ListResourcesCommandInput, ListResourcesCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/ListResourcesCommand";
    import { ListTableStorageOptimizersCommandInput, ListTableStorageOptimizersCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/ListTableStorageOptimizersCommand";
    import { ListTransactionsCommandInput, ListTransactionsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/ListTransactionsCommand";
    import { PutDataLakeSettingsCommandInput, PutDataLakeSettingsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/PutDataLakeSettingsCommand";
    import { RegisterResourceCommandInput, RegisterResourceCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/RegisterResourceCommand";
    import { RemoveLFTagsFromResourceCommandInput, RemoveLFTagsFromResourceCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/RemoveLFTagsFromResourceCommand";
    import { RevokePermissionsCommandInput, RevokePermissionsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/RevokePermissionsCommand";
    import { SearchDatabasesByLFTagsCommandInput, SearchDatabasesByLFTagsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/SearchDatabasesByLFTagsCommand";
    import { SearchTablesByLFTagsCommandInput, SearchTablesByLFTagsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/SearchTablesByLFTagsCommand";
    import { StartQueryPlanningCommandInput, StartQueryPlanningCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/StartQueryPlanningCommand";
    import { StartTransactionCommandInput, StartTransactionCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/StartTransactionCommand";
    import { UpdateLFTagCommandInput, UpdateLFTagCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/UpdateLFTagCommand";
    import { UpdateResourceCommandInput, UpdateResourceCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/UpdateResourceCommand";
    import { UpdateTableObjectsCommandInput, UpdateTableObjectsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/UpdateTableObjectsCommand";
    import { UpdateTableStorageOptimizerCommandInput, UpdateTableStorageOptimizerCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/UpdateTableStorageOptimizerCommand";
    import { LakeFormationClient } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    /**
        * <fullname>Lake Formation</fullname>
        *          <p>Defines the public endpoint for the Lake Formation service.</p>
        */
    export class LakeFormation extends LakeFormationClient {
            /**
                * <p>Attaches one or more LF-tags to an existing resource.</p>
                */
            addLFTagsToResource(args: AddLFTagsToResourceCommandInput, options?: __HttpHandlerOptions): Promise<AddLFTagsToResourceCommandOutput>;
            addLFTagsToResource(args: AddLFTagsToResourceCommandInput, cb: (err: any, data?: AddLFTagsToResourceCommandOutput) => void): void;
            addLFTagsToResource(args: AddLFTagsToResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddLFTagsToResourceCommandOutput) => void): void;
            /**
                * <p>Batch operation to grant permissions to the principal.</p>
                */
            batchGrantPermissions(args: BatchGrantPermissionsCommandInput, options?: __HttpHandlerOptions): Promise<BatchGrantPermissionsCommandOutput>;
            batchGrantPermissions(args: BatchGrantPermissionsCommandInput, cb: (err: any, data?: BatchGrantPermissionsCommandOutput) => void): void;
            batchGrantPermissions(args: BatchGrantPermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGrantPermissionsCommandOutput) => void): void;
            /**
                * <p>Batch operation to revoke permissions from the principal.</p>
                */
            batchRevokePermissions(args: BatchRevokePermissionsCommandInput, options?: __HttpHandlerOptions): Promise<BatchRevokePermissionsCommandOutput>;
            batchRevokePermissions(args: BatchRevokePermissionsCommandInput, cb: (err: any, data?: BatchRevokePermissionsCommandOutput) => void): void;
            batchRevokePermissions(args: BatchRevokePermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchRevokePermissionsCommandOutput) => void): void;
            /**
                * <p>Attempts to cancel the specified transaction. Returns an exception if the transaction was previously committed.</p>
                */
            cancelTransaction(args: CancelTransactionCommandInput, options?: __HttpHandlerOptions): Promise<CancelTransactionCommandOutput>;
            cancelTransaction(args: CancelTransactionCommandInput, cb: (err: any, data?: CancelTransactionCommandOutput) => void): void;
            cancelTransaction(args: CancelTransactionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelTransactionCommandOutput) => void): void;
            /**
                * <p>Attempts to commit the specified transaction. Returns an exception if the transaction was previously aborted. This API action is idempotent if called multiple times for the same transaction.</p>
                */
            commitTransaction(args: CommitTransactionCommandInput, options?: __HttpHandlerOptions): Promise<CommitTransactionCommandOutput>;
            commitTransaction(args: CommitTransactionCommandInput, cb: (err: any, data?: CommitTransactionCommandOutput) => void): void;
            commitTransaction(args: CommitTransactionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CommitTransactionCommandOutput) => void): void;
            /**
                * <p>Creates a data cell filter to allow one to grant access to certain columns on certain rows.</p>
                */
            createDataCellsFilter(args: CreateDataCellsFilterCommandInput, options?: __HttpHandlerOptions): Promise<CreateDataCellsFilterCommandOutput>;
            createDataCellsFilter(args: CreateDataCellsFilterCommandInput, cb: (err: any, data?: CreateDataCellsFilterCommandOutput) => void): void;
            createDataCellsFilter(args: CreateDataCellsFilterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDataCellsFilterCommandOutput) => void): void;
            /**
                * <p>Creates an LF-tag with the specified name and values.</p>
                */
            createLFTag(args: CreateLFTagCommandInput, options?: __HttpHandlerOptions): Promise<CreateLFTagCommandOutput>;
            createLFTag(args: CreateLFTagCommandInput, cb: (err: any, data?: CreateLFTagCommandOutput) => void): void;
            createLFTag(args: CreateLFTagCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLFTagCommandOutput) => void): void;
            /**
                * <p>Deletes a data cell filter.</p>
                */
            deleteDataCellsFilter(args: DeleteDataCellsFilterCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDataCellsFilterCommandOutput>;
            deleteDataCellsFilter(args: DeleteDataCellsFilterCommandInput, cb: (err: any, data?: DeleteDataCellsFilterCommandOutput) => void): void;
            deleteDataCellsFilter(args: DeleteDataCellsFilterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDataCellsFilterCommandOutput) => void): void;
            /**
                * <p>Deletes the specified LF-tag key name. If the attribute key does not exist or the LF-tag does not exist, then the operation will not do anything. If the attribute key exists, then the operation checks if any resources are tagged with this attribute key, if yes, the API throws a 400 Exception with the message "Delete not allowed" as the LF-tag key is still attached with resources. You can consider untagging resources with this LF-tag key.</p>
                */
            deleteLFTag(args: DeleteLFTagCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLFTagCommandOutput>;
            deleteLFTag(args: DeleteLFTagCommandInput, cb: (err: any, data?: DeleteLFTagCommandOutput) => void): void;
            deleteLFTag(args: DeleteLFTagCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLFTagCommandOutput) => void): void;
            /**
                * <p>For a specific governed table, provides a list of Amazon S3 objects that will be written during the current transaction and that can be automatically deleted
                *       if the transaction is canceled. Without this call, no Amazon S3 objects are automatically deleted when a transaction cancels.
                *     </p>
                *          <p>
                *       The Glue ETL library function <code>write_dynamic_frame.from_catalog()</code> includes an option to automatically
                *       call <code>DeleteObjectsOnCancel</code> before writes. For more information, see
                *       <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/transactions-data-operations.html#rolling-back-writes">Rolling Back Amazon S3 Writes</a>.
                *     </p>
                */
            deleteObjectsOnCancel(args: DeleteObjectsOnCancelCommandInput, options?: __HttpHandlerOptions): Promise<DeleteObjectsOnCancelCommandOutput>;
            deleteObjectsOnCancel(args: DeleteObjectsOnCancelCommandInput, cb: (err: any, data?: DeleteObjectsOnCancelCommandOutput) => void): void;
            deleteObjectsOnCancel(args: DeleteObjectsOnCancelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteObjectsOnCancelCommandOutput) => void): void;
            /**
                * <p>Deregisters the resource as managed by the Data Catalog.</p>
                *
                *          <p>When you deregister a path, Lake Formation removes the path from the inline policy attached to your service-linked role.</p>
                */
            deregisterResource(args: DeregisterResourceCommandInput, options?: __HttpHandlerOptions): Promise<DeregisterResourceCommandOutput>;
            deregisterResource(args: DeregisterResourceCommandInput, cb: (err: any, data?: DeregisterResourceCommandOutput) => void): void;
            deregisterResource(args: DeregisterResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeregisterResourceCommandOutput) => void): void;
            /**
                * <p>Retrieves the current data access role for the given resource registered in Lake Formation.</p>
                */
            describeResource(args: DescribeResourceCommandInput, options?: __HttpHandlerOptions): Promise<DescribeResourceCommandOutput>;
            describeResource(args: DescribeResourceCommandInput, cb: (err: any, data?: DescribeResourceCommandOutput) => void): void;
            describeResource(args: DescribeResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeResourceCommandOutput) => void): void;
            /**
                * <p>Returns the details of a single transaction.</p>
                */
            describeTransaction(args: DescribeTransactionCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTransactionCommandOutput>;
            describeTransaction(args: DescribeTransactionCommandInput, cb: (err: any, data?: DescribeTransactionCommandOutput) => void): void;
            describeTransaction(args: DescribeTransactionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTransactionCommandOutput) => void): void;
            /**
                * <p>Indicates to the service that the specified transaction is still active and should not be treated as idle and aborted.</p>
                *
                * 	        <p>Write transactions that remain idle for a long period are automatically aborted unless explicitly extended.</p>
                */
            extendTransaction(args: ExtendTransactionCommandInput, options?: __HttpHandlerOptions): Promise<ExtendTransactionCommandOutput>;
            extendTransaction(args: ExtendTransactionCommandInput, cb: (err: any, data?: ExtendTransactionCommandOutput) => void): void;
            extendTransaction(args: ExtendTransactionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ExtendTransactionCommandOutput) => void): void;
            /**
                * <p>Retrieves the list of the data lake administrators of a Lake Formation-managed data lake. </p>
                */
            getDataLakeSettings(args: GetDataLakeSettingsCommandInput, options?: __HttpHandlerOptions): Promise<GetDataLakeSettingsCommandOutput>;
            getDataLakeSettings(args: GetDataLakeSettingsCommandInput, cb: (err: any, data?: GetDataLakeSettingsCommandOutput) => void): void;
            getDataLakeSettings(args: GetDataLakeSettingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDataLakeSettingsCommandOutput) => void): void;
            /**
                * <p>Returns the Lake Formation permissions for a specified table or database resource located
                *       at a path in Amazon S3. <code>GetEffectivePermissionsForPath</code> will not return databases and tables if the catalog is encrypted.</p>
                */
            getEffectivePermissionsForPath(args: GetEffectivePermissionsForPathCommandInput, options?: __HttpHandlerOptions): Promise<GetEffectivePermissionsForPathCommandOutput>;
            getEffectivePermissionsForPath(args: GetEffectivePermissionsForPathCommandInput, cb: (err: any, data?: GetEffectivePermissionsForPathCommandOutput) => void): void;
            getEffectivePermissionsForPath(args: GetEffectivePermissionsForPathCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEffectivePermissionsForPathCommandOutput) => void): void;
            /**
                * <p>Returns an LF-tag definition.</p>
                */
            getLFTag(args: GetLFTagCommandInput, options?: __HttpHandlerOptions): Promise<GetLFTagCommandOutput>;
            getLFTag(args: GetLFTagCommandInput, cb: (err: any, data?: GetLFTagCommandOutput) => void): void;
            getLFTag(args: GetLFTagCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLFTagCommandOutput) => void): void;
            /**
                * <p>Returns the state of a query previously submitted. Clients are expected to poll <code>GetQueryState</code> to monitor the current state of the planning before retrieving the work units. A query state is only visible to the principal that made the initial call to <code>StartQueryPlanning</code>.</p>
                */
            getQueryState(args: GetQueryStateCommandInput, options?: __HttpHandlerOptions): Promise<GetQueryStateCommandOutput>;
            getQueryState(args: GetQueryStateCommandInput, cb: (err: any, data?: GetQueryStateCommandOutput) => void): void;
            getQueryState(args: GetQueryStateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetQueryStateCommandOutput) => void): void;
            /**
                * <p>Retrieves statistics on the planning and execution of a query.</p>
                */
            getQueryStatistics(args: GetQueryStatisticsCommandInput, options?: __HttpHandlerOptions): Promise<GetQueryStatisticsCommandOutput>;
            getQueryStatistics(args: GetQueryStatisticsCommandInput, cb: (err: any, data?: GetQueryStatisticsCommandOutput) => void): void;
            getQueryStatistics(args: GetQueryStatisticsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetQueryStatisticsCommandOutput) => void): void;
            /**
                * <p>Returns the LF-tags applied to a resource.</p>
                */
            getResourceLFTags(args: GetResourceLFTagsCommandInput, options?: __HttpHandlerOptions): Promise<GetResourceLFTagsCommandOutput>;
            getResourceLFTags(args: GetResourceLFTagsCommandInput, cb: (err: any, data?: GetResourceLFTagsCommandOutput) => void): void;
            getResourceLFTags(args: GetResourceLFTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetResourceLFTagsCommandOutput) => void): void;
            /**
                * <p>Returns the set of Amazon S3 objects that make up the specified governed table. A transaction ID or timestamp can be specified for time-travel queries.</p>
                */
            getTableObjects(args: GetTableObjectsCommandInput, options?: __HttpHandlerOptions): Promise<GetTableObjectsCommandOutput>;
            getTableObjects(args: GetTableObjectsCommandInput, cb: (err: any, data?: GetTableObjectsCommandOutput) => void): void;
            getTableObjects(args: GetTableObjectsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTableObjectsCommandOutput) => void): void;
            /**
                * <p>This API is identical to <code>GetTemporaryTableCredentials</code> except that this is used when the target Data Catalog resource is of type Partition.  Lake Formation restricts the permission of the vended credentials with the same scope down policy which restricts access to a single Amazon S3 prefix.</p>
                */
            getTemporaryGluePartitionCredentials(args: GetTemporaryGluePartitionCredentialsCommandInput, options?: __HttpHandlerOptions): Promise<GetTemporaryGluePartitionCredentialsCommandOutput>;
            getTemporaryGluePartitionCredentials(args: GetTemporaryGluePartitionCredentialsCommandInput, cb: (err: any, data?: GetTemporaryGluePartitionCredentialsCommandOutput) => void): void;
            getTemporaryGluePartitionCredentials(args: GetTemporaryGluePartitionCredentialsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTemporaryGluePartitionCredentialsCommandOutput) => void): void;
            /**
                * <p>Allows a caller in a secure environment to assume a role with permission to access Amazon S3. In order to vend such credentials, Lake Formation assumes the role associated with a registered location, for example an Amazon S3 bucket, with a scope down policy which restricts the access to a single prefix.</p>
                */
            getTemporaryGlueTableCredentials(args: GetTemporaryGlueTableCredentialsCommandInput, options?: __HttpHandlerOptions): Promise<GetTemporaryGlueTableCredentialsCommandOutput>;
            getTemporaryGlueTableCredentials(args: GetTemporaryGlueTableCredentialsCommandInput, cb: (err: any, data?: GetTemporaryGlueTableCredentialsCommandOutput) => void): void;
            getTemporaryGlueTableCredentials(args: GetTemporaryGlueTableCredentialsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTemporaryGlueTableCredentialsCommandOutput) => void): void;
            /**
                * <p>Returns the work units resulting from the query. Work units can be executed in any order and in parallel. </p>
                */
            getWorkUnitResults(args: GetWorkUnitResultsCommandInput, options?: __HttpHandlerOptions): Promise<GetWorkUnitResultsCommandOutput>;
            getWorkUnitResults(args: GetWorkUnitResultsCommandInput, cb: (err: any, data?: GetWorkUnitResultsCommandOutput) => void): void;
            getWorkUnitResults(args: GetWorkUnitResultsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetWorkUnitResultsCommandOutput) => void): void;
            /**
                * <p>Retrieves the work units generated by the <code>StartQueryPlanning</code> operation.</p>
                */
            getWorkUnits(args: GetWorkUnitsCommandInput, options?: __HttpHandlerOptions): Promise<GetWorkUnitsCommandOutput>;
            getWorkUnits(args: GetWorkUnitsCommandInput, cb: (err: any, data?: GetWorkUnitsCommandOutput) => void): void;
            getWorkUnits(args: GetWorkUnitsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetWorkUnitsCommandOutput) => void): void;
            /**
                * <p>Grants permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3.</p>
                * 	        <p>For information about permissions, see <a href="https://docs-aws.amazon.com/lake-formation/latest/dg/security-data-access.html">Security and Access Control to Metadata and Data</a>.</p>
                */
            grantPermissions(args: GrantPermissionsCommandInput, options?: __HttpHandlerOptions): Promise<GrantPermissionsCommandOutput>;
            grantPermissions(args: GrantPermissionsCommandInput, cb: (err: any, data?: GrantPermissionsCommandOutput) => void): void;
            grantPermissions(args: GrantPermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GrantPermissionsCommandOutput) => void): void;
            /**
                * <p>Lists all the data cell filters on a table.</p>
                */
            listDataCellsFilter(args: ListDataCellsFilterCommandInput, options?: __HttpHandlerOptions): Promise<ListDataCellsFilterCommandOutput>;
            listDataCellsFilter(args: ListDataCellsFilterCommandInput, cb: (err: any, data?: ListDataCellsFilterCommandOutput) => void): void;
            listDataCellsFilter(args: ListDataCellsFilterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDataCellsFilterCommandOutput) => void): void;
            /**
                * <p>Lists LF-tags that the requester has permission to view. </p>
                */
            listLFTags(args: ListLFTagsCommandInput, options?: __HttpHandlerOptions): Promise<ListLFTagsCommandOutput>;
            listLFTags(args: ListLFTagsCommandInput, cb: (err: any, data?: ListLFTagsCommandOutput) => void): void;
            listLFTags(args: ListLFTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLFTagsCommandOutput) => void): void;
            /**
                * <p>Returns a list of the principal permissions on the resource, filtered by the permissions of the caller. For example, if you are granted an ALTER permission, you are able to see only the principal permissions for ALTER.</p>
                * 	        <p>This operation returns only those permissions that have been explicitly granted.</p>
                * 	        <p>For information about permissions, see <a href="https://docs-aws.amazon.com/lake-formation/latest/dg/security-data-access.html">Security and Access Control to Metadata and Data</a>.</p>
                */
            listPermissions(args: ListPermissionsCommandInput, options?: __HttpHandlerOptions): Promise<ListPermissionsCommandOutput>;
            listPermissions(args: ListPermissionsCommandInput, cb: (err: any, data?: ListPermissionsCommandOutput) => void): void;
            listPermissions(args: ListPermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPermissionsCommandOutput) => void): void;
            /**
                * <p>Lists the resources registered to be managed by the Data Catalog.</p>
                */
            listResources(args: ListResourcesCommandInput, options?: __HttpHandlerOptions): Promise<ListResourcesCommandOutput>;
            listResources(args: ListResourcesCommandInput, cb: (err: any, data?: ListResourcesCommandOutput) => void): void;
            listResources(args: ListResourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListResourcesCommandOutput) => void): void;
            /**
                * <p>Returns the configuration of all storage optimizers associated with a specified table.</p>
                */
            listTableStorageOptimizers(args: ListTableStorageOptimizersCommandInput, options?: __HttpHandlerOptions): Promise<ListTableStorageOptimizersCommandOutput>;
            listTableStorageOptimizers(args: ListTableStorageOptimizersCommandInput, cb: (err: any, data?: ListTableStorageOptimizersCommandOutput) => void): void;
            listTableStorageOptimizers(args: ListTableStorageOptimizersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTableStorageOptimizersCommandOutput) => void): void;
            /**
                * <p>Returns metadata about transactions and their status. To prevent the response from growing indefinitely, only uncommitted transactions and those available for time-travel queries are returned.</p>
                * 	        <p>This operation can help you identify uncommitted transactions or to get information about transactions.</p>
                */
            listTransactions(args: ListTransactionsCommandInput, options?: __HttpHandlerOptions): Promise<ListTransactionsCommandOutput>;
            listTransactions(args: ListTransactionsCommandInput, cb: (err: any, data?: ListTransactionsCommandOutput) => void): void;
            listTransactions(args: ListTransactionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTransactionsCommandOutput) => void): void;
            /**
                * <p>Sets the list of data lake administrators who have admin privileges on all resources managed by Lake Formation. For more information on admin privileges, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/lake-formation-permissions.html">Granting Lake Formation Permissions</a>.</p>
                *
                * 	        <p>This API replaces the current list of data lake admins with the new list being passed. To add an admin, fetch the current list and add the new admin to that list and pass that list in this API.</p>
                */
            putDataLakeSettings(args: PutDataLakeSettingsCommandInput, options?: __HttpHandlerOptions): Promise<PutDataLakeSettingsCommandOutput>;
            putDataLakeSettings(args: PutDataLakeSettingsCommandInput, cb: (err: any, data?: PutDataLakeSettingsCommandOutput) => void): void;
            putDataLakeSettings(args: PutDataLakeSettingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutDataLakeSettingsCommandOutput) => void): void;
            /**
                * <p>Registers the resource as managed by the Data Catalog.</p>
                *
                *          <p>To add or update data, Lake Formation needs read/write access to the chosen Amazon S3 path. Choose a role that you know has permission to do this, or choose the AWSServiceRoleForLakeFormationDataAccess service-linked role. When you register the first Amazon S3 path, the service-linked role and a new inline policy are created on your behalf. Lake Formation adds the first path to the inline policy and attaches it to the service-linked role. When you register subsequent paths, Lake Formation adds the path to the existing policy.</p>
                *
                *          <p>The following request registers a new location and gives Lake Formation permission to use the service-linked role to access that location.</p>
                *
                *          <p>
                *             <code>ResourceArn = arn:aws:s3:::my-bucket
                * UseServiceLinkedRole = true</code>
                *          </p>
                *
                * 	        <p>If <code>UseServiceLinkedRole</code> is not set to true, you must provide or set the <code>RoleArn</code>:</p>
                *
                *          <p>
                *             <code>arn:aws:iam::12345:role/my-data-access-role</code>
                *          </p>
                */
            registerResource(args: RegisterResourceCommandInput, options?: __HttpHandlerOptions): Promise<RegisterResourceCommandOutput>;
            registerResource(args: RegisterResourceCommandInput, cb: (err: any, data?: RegisterResourceCommandOutput) => void): void;
            registerResource(args: RegisterResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterResourceCommandOutput) => void): void;
            /**
                * <p>Removes an LF-tag from the resource. Only database, table, or tableWithColumns resource are allowed. To tag columns, use the column inclusion list in <code>tableWithColumns</code> to specify column input.</p>
                */
            removeLFTagsFromResource(args: RemoveLFTagsFromResourceCommandInput, options?: __HttpHandlerOptions): Promise<RemoveLFTagsFromResourceCommandOutput>;
            removeLFTagsFromResource(args: RemoveLFTagsFromResourceCommandInput, cb: (err: any, data?: RemoveLFTagsFromResourceCommandOutput) => void): void;
            removeLFTagsFromResource(args: RemoveLFTagsFromResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveLFTagsFromResourceCommandOutput) => void): void;
            /**
                * <p>Revokes permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3.</p>
                */
            revokePermissions(args: RevokePermissionsCommandInput, options?: __HttpHandlerOptions): Promise<RevokePermissionsCommandOutput>;
            revokePermissions(args: RevokePermissionsCommandInput, cb: (err: any, data?: RevokePermissionsCommandOutput) => void): void;
            revokePermissions(args: RevokePermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RevokePermissionsCommandOutput) => void): void;
            /**
                * <p>This operation allows a search on <code>DATABASE</code> resources by <code>TagCondition</code>. This operation is used by admins who want to grant user permissions on certain <code>TagConditions</code>. Before making a grant, the admin can use <code>SearchDatabasesByTags</code> to find all resources where the given <code>TagConditions</code> are valid to verify whether the returned resources can be shared.</p>
                */
            searchDatabasesByLFTags(args: SearchDatabasesByLFTagsCommandInput, options?: __HttpHandlerOptions): Promise<SearchDatabasesByLFTagsCommandOutput>;
            searchDatabasesByLFTags(args: SearchDatabasesByLFTagsCommandInput, cb: (err: any, data?: SearchDatabasesByLFTagsCommandOutput) => void): void;
            searchDatabasesByLFTags(args: SearchDatabasesByLFTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SearchDatabasesByLFTagsCommandOutput) => void): void;
            /**
                * <p>This operation allows a search on <code>TABLE</code> resources by <code>LFTag</code>s. This will be used by admins who want to grant user permissions on certain LF-tags. Before making a grant, the admin can use <code>SearchTablesByLFTags</code> to find all resources where the given <code>LFTag</code>s are valid to verify whether the returned resources can be shared.</p>
                */
            searchTablesByLFTags(args: SearchTablesByLFTagsCommandInput, options?: __HttpHandlerOptions): Promise<SearchTablesByLFTagsCommandOutput>;
            searchTablesByLFTags(args: SearchTablesByLFTagsCommandInput, cb: (err: any, data?: SearchTablesByLFTagsCommandOutput) => void): void;
            searchTablesByLFTags(args: SearchTablesByLFTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SearchTablesByLFTagsCommandOutput) => void): void;
            /**
                * <p>Submits a request to process a query statement.</p>
                *
                * 	        <p>This operation generates work units that can be retrieved with the <code>GetWorkUnits</code> operation as soon as the query state is WORKUNITS_AVAILABLE or FINISHED.</p>
                */
            startQueryPlanning(args: StartQueryPlanningCommandInput, options?: __HttpHandlerOptions): Promise<StartQueryPlanningCommandOutput>;
            startQueryPlanning(args: StartQueryPlanningCommandInput, cb: (err: any, data?: StartQueryPlanningCommandOutput) => void): void;
            startQueryPlanning(args: StartQueryPlanningCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartQueryPlanningCommandOutput) => void): void;
            /**
                * <p>Starts a new transaction and returns its transaction ID. Transaction IDs are opaque objects that you can use to identify a transaction.</p>
                */
            startTransaction(args: StartTransactionCommandInput, options?: __HttpHandlerOptions): Promise<StartTransactionCommandOutput>;
            startTransaction(args: StartTransactionCommandInput, cb: (err: any, data?: StartTransactionCommandOutput) => void): void;
            startTransaction(args: StartTransactionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartTransactionCommandOutput) => void): void;
            /**
                * <p>Updates the list of possible values for the specified LF-tag key. If the LF-tag does not exist, the operation throws an EntityNotFoundException. The values in the delete key values will be deleted from list of possible values. If any value in the delete key values is attached to a resource, then API errors out with a 400 Exception - "Update not allowed". Untag the attribute before deleting the LF-tag key's value. </p>
                */
            updateLFTag(args: UpdateLFTagCommandInput, options?: __HttpHandlerOptions): Promise<UpdateLFTagCommandOutput>;
            updateLFTag(args: UpdateLFTagCommandInput, cb: (err: any, data?: UpdateLFTagCommandOutput) => void): void;
            updateLFTag(args: UpdateLFTagCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateLFTagCommandOutput) => void): void;
            /**
                * <p>Updates the data access role used for vending access to the given (registered) resource in Lake Formation. </p>
                */
            updateResource(args: UpdateResourceCommandInput, options?: __HttpHandlerOptions): Promise<UpdateResourceCommandOutput>;
            updateResource(args: UpdateResourceCommandInput, cb: (err: any, data?: UpdateResourceCommandOutput) => void): void;
            updateResource(args: UpdateResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateResourceCommandOutput) => void): void;
            /**
                * <p>Updates the manifest of Amazon S3 objects that make up the specified governed table.</p>
                */
            updateTableObjects(args: UpdateTableObjectsCommandInput, options?: __HttpHandlerOptions): Promise<UpdateTableObjectsCommandOutput>;
            updateTableObjects(args: UpdateTableObjectsCommandInput, cb: (err: any, data?: UpdateTableObjectsCommandOutput) => void): void;
            updateTableObjects(args: UpdateTableObjectsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateTableObjectsCommandOutput) => void): void;
            /**
                * <p>Updates the configuration of the storage optimizers for a table.</p>
                */
            updateTableStorageOptimizer(args: UpdateTableStorageOptimizerCommandInput, options?: __HttpHandlerOptions): Promise<UpdateTableStorageOptimizerCommandOutput>;
            updateTableStorageOptimizer(args: UpdateTableStorageOptimizerCommandInput, cb: (err: any, data?: UpdateTableStorageOptimizerCommandOutput) => void): void;
            updateTableStorageOptimizer(args: UpdateTableStorageOptimizerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateTableStorageOptimizerCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/AddLFTagsToResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { AddLFTagsToResourceRequest, AddLFTagsToResourceResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface AddLFTagsToResourceCommandInput extends AddLFTagsToResourceRequest {
    }
    export interface AddLFTagsToResourceCommandOutput extends AddLFTagsToResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Attaches one or more LF-tags to an existing resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, AddLFTagsToResourceCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, AddLFTagsToResourceCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new AddLFTagsToResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddLFTagsToResourceCommandInput} for command's `input` shape.
        * @see {@link AddLFTagsToResourceCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class AddLFTagsToResourceCommand extends $Command<AddLFTagsToResourceCommandInput, AddLFTagsToResourceCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: AddLFTagsToResourceCommandInput;
            constructor(input: AddLFTagsToResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddLFTagsToResourceCommandInput, AddLFTagsToResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/BatchGrantPermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { BatchGrantPermissionsRequest, BatchGrantPermissionsResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface BatchGrantPermissionsCommandInput extends BatchGrantPermissionsRequest {
    }
    export interface BatchGrantPermissionsCommandOutput extends BatchGrantPermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Batch operation to grant permissions to the principal.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, BatchGrantPermissionsCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, BatchGrantPermissionsCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new BatchGrantPermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchGrantPermissionsCommandInput} for command's `input` shape.
        * @see {@link BatchGrantPermissionsCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class BatchGrantPermissionsCommand extends $Command<BatchGrantPermissionsCommandInput, BatchGrantPermissionsCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: BatchGrantPermissionsCommandInput;
            constructor(input: BatchGrantPermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGrantPermissionsCommandInput, BatchGrantPermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/BatchRevokePermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { BatchRevokePermissionsRequest, BatchRevokePermissionsResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface BatchRevokePermissionsCommandInput extends BatchRevokePermissionsRequest {
    }
    export interface BatchRevokePermissionsCommandOutput extends BatchRevokePermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Batch operation to revoke permissions from the principal.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, BatchRevokePermissionsCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, BatchRevokePermissionsCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new BatchRevokePermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchRevokePermissionsCommandInput} for command's `input` shape.
        * @see {@link BatchRevokePermissionsCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class BatchRevokePermissionsCommand extends $Command<BatchRevokePermissionsCommandInput, BatchRevokePermissionsCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: BatchRevokePermissionsCommandInput;
            constructor(input: BatchRevokePermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchRevokePermissionsCommandInput, BatchRevokePermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/CancelTransactionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { CancelTransactionRequest, CancelTransactionResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface CancelTransactionCommandInput extends CancelTransactionRequest {
    }
    export interface CancelTransactionCommandOutput extends CancelTransactionResponse, __MetadataBearer {
    }
    /**
        * <p>Attempts to cancel the specified transaction. Returns an exception if the transaction was previously committed.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, CancelTransactionCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, CancelTransactionCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new CancelTransactionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelTransactionCommandInput} for command's `input` shape.
        * @see {@link CancelTransactionCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class CancelTransactionCommand extends $Command<CancelTransactionCommandInput, CancelTransactionCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: CancelTransactionCommandInput;
            constructor(input: CancelTransactionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelTransactionCommandInput, CancelTransactionCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/CommitTransactionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { CommitTransactionRequest, CommitTransactionResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface CommitTransactionCommandInput extends CommitTransactionRequest {
    }
    export interface CommitTransactionCommandOutput extends CommitTransactionResponse, __MetadataBearer {
    }
    /**
        * <p>Attempts to commit the specified transaction. Returns an exception if the transaction was previously aborted. This API action is idempotent if called multiple times for the same transaction.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, CommitTransactionCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, CommitTransactionCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new CommitTransactionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CommitTransactionCommandInput} for command's `input` shape.
        * @see {@link CommitTransactionCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class CommitTransactionCommand extends $Command<CommitTransactionCommandInput, CommitTransactionCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: CommitTransactionCommandInput;
            constructor(input: CommitTransactionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CommitTransactionCommandInput, CommitTransactionCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/CreateDataCellsFilterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { CreateDataCellsFilterRequest, CreateDataCellsFilterResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface CreateDataCellsFilterCommandInput extends CreateDataCellsFilterRequest {
    }
    export interface CreateDataCellsFilterCommandOutput extends CreateDataCellsFilterResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a data cell filter to allow one to grant access to certain columns on certain rows.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, CreateDataCellsFilterCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, CreateDataCellsFilterCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new CreateDataCellsFilterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDataCellsFilterCommandInput} for command's `input` shape.
        * @see {@link CreateDataCellsFilterCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class CreateDataCellsFilterCommand extends $Command<CreateDataCellsFilterCommandInput, CreateDataCellsFilterCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: CreateDataCellsFilterCommandInput;
            constructor(input: CreateDataCellsFilterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDataCellsFilterCommandInput, CreateDataCellsFilterCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/CreateLFTagCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { CreateLFTagRequest, CreateLFTagResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface CreateLFTagCommandInput extends CreateLFTagRequest {
    }
    export interface CreateLFTagCommandOutput extends CreateLFTagResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an LF-tag with the specified name and values.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, CreateLFTagCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, CreateLFTagCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new CreateLFTagCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLFTagCommandInput} for command's `input` shape.
        * @see {@link CreateLFTagCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class CreateLFTagCommand extends $Command<CreateLFTagCommandInput, CreateLFTagCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: CreateLFTagCommandInput;
            constructor(input: CreateLFTagCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLFTagCommandInput, CreateLFTagCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/DeleteDataCellsFilterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { DeleteDataCellsFilterRequest, DeleteDataCellsFilterResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface DeleteDataCellsFilterCommandInput extends DeleteDataCellsFilterRequest {
    }
    export interface DeleteDataCellsFilterCommandOutput extends DeleteDataCellsFilterResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a data cell filter.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, DeleteDataCellsFilterCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, DeleteDataCellsFilterCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new DeleteDataCellsFilterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDataCellsFilterCommandInput} for command's `input` shape.
        * @see {@link DeleteDataCellsFilterCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class DeleteDataCellsFilterCommand extends $Command<DeleteDataCellsFilterCommandInput, DeleteDataCellsFilterCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: DeleteDataCellsFilterCommandInput;
            constructor(input: DeleteDataCellsFilterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDataCellsFilterCommandInput, DeleteDataCellsFilterCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/DeleteLFTagCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { DeleteLFTagRequest, DeleteLFTagResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface DeleteLFTagCommandInput extends DeleteLFTagRequest {
    }
    export interface DeleteLFTagCommandOutput extends DeleteLFTagResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified LF-tag key name. If the attribute key does not exist or the LF-tag does not exist, then the operation will not do anything. If the attribute key exists, then the operation checks if any resources are tagged with this attribute key, if yes, the API throws a 400 Exception with the message "Delete not allowed" as the LF-tag key is still attached with resources. You can consider untagging resources with this LF-tag key.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, DeleteLFTagCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, DeleteLFTagCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new DeleteLFTagCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLFTagCommandInput} for command's `input` shape.
        * @see {@link DeleteLFTagCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class DeleteLFTagCommand extends $Command<DeleteLFTagCommandInput, DeleteLFTagCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: DeleteLFTagCommandInput;
            constructor(input: DeleteLFTagCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLFTagCommandInput, DeleteLFTagCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/DeleteObjectsOnCancelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { DeleteObjectsOnCancelRequest, DeleteObjectsOnCancelResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface DeleteObjectsOnCancelCommandInput extends DeleteObjectsOnCancelRequest {
    }
    export interface DeleteObjectsOnCancelCommandOutput extends DeleteObjectsOnCancelResponse, __MetadataBearer {
    }
    /**
        * <p>For a specific governed table, provides a list of Amazon S3 objects that will be written during the current transaction and that can be automatically deleted
        *       if the transaction is canceled. Without this call, no Amazon S3 objects are automatically deleted when a transaction cancels.
        *     </p>
        *          <p>
        *       The Glue ETL library function <code>write_dynamic_frame.from_catalog()</code> includes an option to automatically
        *       call <code>DeleteObjectsOnCancel</code> before writes. For more information, see
        *       <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/transactions-data-operations.html#rolling-back-writes">Rolling Back Amazon S3 Writes</a>.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, DeleteObjectsOnCancelCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, DeleteObjectsOnCancelCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new DeleteObjectsOnCancelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteObjectsOnCancelCommandInput} for command's `input` shape.
        * @see {@link DeleteObjectsOnCancelCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class DeleteObjectsOnCancelCommand extends $Command<DeleteObjectsOnCancelCommandInput, DeleteObjectsOnCancelCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: DeleteObjectsOnCancelCommandInput;
            constructor(input: DeleteObjectsOnCancelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteObjectsOnCancelCommandInput, DeleteObjectsOnCancelCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/DeregisterResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { DeregisterResourceRequest, DeregisterResourceResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface DeregisterResourceCommandInput extends DeregisterResourceRequest {
    }
    export interface DeregisterResourceCommandOutput extends DeregisterResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Deregisters the resource as managed by the Data Catalog.</p>
        *
        *          <p>When you deregister a path, Lake Formation removes the path from the inline policy attached to your service-linked role.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, DeregisterResourceCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, DeregisterResourceCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new DeregisterResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeregisterResourceCommandInput} for command's `input` shape.
        * @see {@link DeregisterResourceCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class DeregisterResourceCommand extends $Command<DeregisterResourceCommandInput, DeregisterResourceCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: DeregisterResourceCommandInput;
            constructor(input: DeregisterResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeregisterResourceCommandInput, DeregisterResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/DescribeResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { DescribeResourceRequest, DescribeResourceResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface DescribeResourceCommandInput extends DescribeResourceRequest {
    }
    export interface DescribeResourceCommandOutput extends DescribeResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the current data access role for the given resource registered in Lake Formation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, DescribeResourceCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, DescribeResourceCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new DescribeResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeResourceCommandInput} for command's `input` shape.
        * @see {@link DescribeResourceCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class DescribeResourceCommand extends $Command<DescribeResourceCommandInput, DescribeResourceCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: DescribeResourceCommandInput;
            constructor(input: DescribeResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeResourceCommandInput, DescribeResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/DescribeTransactionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { DescribeTransactionRequest, DescribeTransactionResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface DescribeTransactionCommandInput extends DescribeTransactionRequest {
    }
    export interface DescribeTransactionCommandOutput extends DescribeTransactionResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the details of a single transaction.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, DescribeTransactionCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, DescribeTransactionCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new DescribeTransactionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeTransactionCommandInput} for command's `input` shape.
        * @see {@link DescribeTransactionCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class DescribeTransactionCommand extends $Command<DescribeTransactionCommandInput, DescribeTransactionCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: DescribeTransactionCommandInput;
            constructor(input: DescribeTransactionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeTransactionCommandInput, DescribeTransactionCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/ExtendTransactionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { ExtendTransactionRequest, ExtendTransactionResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface ExtendTransactionCommandInput extends ExtendTransactionRequest {
    }
    export interface ExtendTransactionCommandOutput extends ExtendTransactionResponse, __MetadataBearer {
    }
    /**
        * <p>Indicates to the service that the specified transaction is still active and should not be treated as idle and aborted.</p>
        *
        * 	        <p>Write transactions that remain idle for a long period are automatically aborted unless explicitly extended.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, ExtendTransactionCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, ExtendTransactionCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new ExtendTransactionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ExtendTransactionCommandInput} for command's `input` shape.
        * @see {@link ExtendTransactionCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class ExtendTransactionCommand extends $Command<ExtendTransactionCommandInput, ExtendTransactionCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: ExtendTransactionCommandInput;
            constructor(input: ExtendTransactionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ExtendTransactionCommandInput, ExtendTransactionCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetDataLakeSettingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { GetDataLakeSettingsRequest, GetDataLakeSettingsResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface GetDataLakeSettingsCommandInput extends GetDataLakeSettingsRequest {
    }
    export interface GetDataLakeSettingsCommandOutput extends GetDataLakeSettingsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the list of the data lake administrators of a Lake Formation-managed data lake. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, GetDataLakeSettingsCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, GetDataLakeSettingsCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new GetDataLakeSettingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDataLakeSettingsCommandInput} for command's `input` shape.
        * @see {@link GetDataLakeSettingsCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class GetDataLakeSettingsCommand extends $Command<GetDataLakeSettingsCommandInput, GetDataLakeSettingsCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: GetDataLakeSettingsCommandInput;
            constructor(input: GetDataLakeSettingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDataLakeSettingsCommandInput, GetDataLakeSettingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetEffectivePermissionsForPathCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { GetEffectivePermissionsForPathRequest, GetEffectivePermissionsForPathResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface GetEffectivePermissionsForPathCommandInput extends GetEffectivePermissionsForPathRequest {
    }
    export interface GetEffectivePermissionsForPathCommandOutput extends GetEffectivePermissionsForPathResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the Lake Formation permissions for a specified table or database resource located
        *       at a path in Amazon S3. <code>GetEffectivePermissionsForPath</code> will not return databases and tables if the catalog is encrypted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, GetEffectivePermissionsForPathCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, GetEffectivePermissionsForPathCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new GetEffectivePermissionsForPathCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetEffectivePermissionsForPathCommandInput} for command's `input` shape.
        * @see {@link GetEffectivePermissionsForPathCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class GetEffectivePermissionsForPathCommand extends $Command<GetEffectivePermissionsForPathCommandInput, GetEffectivePermissionsForPathCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: GetEffectivePermissionsForPathCommandInput;
            constructor(input: GetEffectivePermissionsForPathCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetEffectivePermissionsForPathCommandInput, GetEffectivePermissionsForPathCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetLFTagCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { GetLFTagRequest, GetLFTagResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface GetLFTagCommandInput extends GetLFTagRequest {
    }
    export interface GetLFTagCommandOutput extends GetLFTagResponse, __MetadataBearer {
    }
    /**
        * <p>Returns an LF-tag definition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, GetLFTagCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, GetLFTagCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new GetLFTagCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLFTagCommandInput} for command's `input` shape.
        * @see {@link GetLFTagCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class GetLFTagCommand extends $Command<GetLFTagCommandInput, GetLFTagCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: GetLFTagCommandInput;
            constructor(input: GetLFTagCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLFTagCommandInput, GetLFTagCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetQueryStateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { GetQueryStateRequest, GetQueryStateResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface GetQueryStateCommandInput extends GetQueryStateRequest {
    }
    export interface GetQueryStateCommandOutput extends GetQueryStateResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the state of a query previously submitted. Clients are expected to poll <code>GetQueryState</code> to monitor the current state of the planning before retrieving the work units. A query state is only visible to the principal that made the initial call to <code>StartQueryPlanning</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, GetQueryStateCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, GetQueryStateCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new GetQueryStateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetQueryStateCommandInput} for command's `input` shape.
        * @see {@link GetQueryStateCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class GetQueryStateCommand extends $Command<GetQueryStateCommandInput, GetQueryStateCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: GetQueryStateCommandInput;
            constructor(input: GetQueryStateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetQueryStateCommandInput, GetQueryStateCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetQueryStatisticsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { GetQueryStatisticsRequest, GetQueryStatisticsResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface GetQueryStatisticsCommandInput extends GetQueryStatisticsRequest {
    }
    export interface GetQueryStatisticsCommandOutput extends GetQueryStatisticsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves statistics on the planning and execution of a query.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, GetQueryStatisticsCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, GetQueryStatisticsCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new GetQueryStatisticsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetQueryStatisticsCommandInput} for command's `input` shape.
        * @see {@link GetQueryStatisticsCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class GetQueryStatisticsCommand extends $Command<GetQueryStatisticsCommandInput, GetQueryStatisticsCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: GetQueryStatisticsCommandInput;
            constructor(input: GetQueryStatisticsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetQueryStatisticsCommandInput, GetQueryStatisticsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetResourceLFTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { GetResourceLFTagsRequest, GetResourceLFTagsResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface GetResourceLFTagsCommandInput extends GetResourceLFTagsRequest {
    }
    export interface GetResourceLFTagsCommandOutput extends GetResourceLFTagsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the LF-tags applied to a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, GetResourceLFTagsCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, GetResourceLFTagsCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new GetResourceLFTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetResourceLFTagsCommandInput} for command's `input` shape.
        * @see {@link GetResourceLFTagsCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class GetResourceLFTagsCommand extends $Command<GetResourceLFTagsCommandInput, GetResourceLFTagsCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: GetResourceLFTagsCommandInput;
            constructor(input: GetResourceLFTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetResourceLFTagsCommandInput, GetResourceLFTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetTableObjectsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { GetTableObjectsRequest, GetTableObjectsResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface GetTableObjectsCommandInput extends GetTableObjectsRequest {
    }
    export interface GetTableObjectsCommandOutput extends GetTableObjectsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the set of Amazon S3 objects that make up the specified governed table. A transaction ID or timestamp can be specified for time-travel queries.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, GetTableObjectsCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, GetTableObjectsCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new GetTableObjectsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTableObjectsCommandInput} for command's `input` shape.
        * @see {@link GetTableObjectsCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class GetTableObjectsCommand extends $Command<GetTableObjectsCommandInput, GetTableObjectsCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: GetTableObjectsCommandInput;
            constructor(input: GetTableObjectsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTableObjectsCommandInput, GetTableObjectsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetTemporaryGluePartitionCredentialsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { GetTemporaryGluePartitionCredentialsRequest, GetTemporaryGluePartitionCredentialsResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface GetTemporaryGluePartitionCredentialsCommandInput extends GetTemporaryGluePartitionCredentialsRequest {
    }
    export interface GetTemporaryGluePartitionCredentialsCommandOutput extends GetTemporaryGluePartitionCredentialsResponse, __MetadataBearer {
    }
    /**
        * <p>This API is identical to <code>GetTemporaryTableCredentials</code> except that this is used when the target Data Catalog resource is of type Partition.  Lake Formation restricts the permission of the vended credentials with the same scope down policy which restricts access to a single Amazon S3 prefix.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, GetTemporaryGluePartitionCredentialsCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, GetTemporaryGluePartitionCredentialsCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new GetTemporaryGluePartitionCredentialsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTemporaryGluePartitionCredentialsCommandInput} for command's `input` shape.
        * @see {@link GetTemporaryGluePartitionCredentialsCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class GetTemporaryGluePartitionCredentialsCommand extends $Command<GetTemporaryGluePartitionCredentialsCommandInput, GetTemporaryGluePartitionCredentialsCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: GetTemporaryGluePartitionCredentialsCommandInput;
            constructor(input: GetTemporaryGluePartitionCredentialsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTemporaryGluePartitionCredentialsCommandInput, GetTemporaryGluePartitionCredentialsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetTemporaryGlueTableCredentialsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { GetTemporaryGlueTableCredentialsRequest, GetTemporaryGlueTableCredentialsResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface GetTemporaryGlueTableCredentialsCommandInput extends GetTemporaryGlueTableCredentialsRequest {
    }
    export interface GetTemporaryGlueTableCredentialsCommandOutput extends GetTemporaryGlueTableCredentialsResponse, __MetadataBearer {
    }
    /**
        * <p>Allows a caller in a secure environment to assume a role with permission to access Amazon S3. In order to vend such credentials, Lake Formation assumes the role associated with a registered location, for example an Amazon S3 bucket, with a scope down policy which restricts the access to a single prefix.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, GetTemporaryGlueTableCredentialsCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, GetTemporaryGlueTableCredentialsCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new GetTemporaryGlueTableCredentialsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTemporaryGlueTableCredentialsCommandInput} for command's `input` shape.
        * @see {@link GetTemporaryGlueTableCredentialsCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class GetTemporaryGlueTableCredentialsCommand extends $Command<GetTemporaryGlueTableCredentialsCommandInput, GetTemporaryGlueTableCredentialsCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: GetTemporaryGlueTableCredentialsCommandInput;
            constructor(input: GetTemporaryGlueTableCredentialsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTemporaryGlueTableCredentialsCommandInput, GetTemporaryGlueTableCredentialsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetWorkUnitResultsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { GetWorkUnitResultsRequest, GetWorkUnitResultsResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface GetWorkUnitResultsCommandInput extends GetWorkUnitResultsRequest {
    }
    export interface GetWorkUnitResultsCommandOutput extends GetWorkUnitResultsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the work units resulting from the query. Work units can be executed in any order and in parallel. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, GetWorkUnitResultsCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, GetWorkUnitResultsCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new GetWorkUnitResultsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetWorkUnitResultsCommandInput} for command's `input` shape.
        * @see {@link GetWorkUnitResultsCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class GetWorkUnitResultsCommand extends $Command<GetWorkUnitResultsCommandInput, GetWorkUnitResultsCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: GetWorkUnitResultsCommandInput;
            constructor(input: GetWorkUnitResultsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetWorkUnitResultsCommandInput, GetWorkUnitResultsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetWorkUnitsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { GetWorkUnitsRequest, GetWorkUnitsResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface GetWorkUnitsCommandInput extends GetWorkUnitsRequest {
    }
    export interface GetWorkUnitsCommandOutput extends GetWorkUnitsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the work units generated by the <code>StartQueryPlanning</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, GetWorkUnitsCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, GetWorkUnitsCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new GetWorkUnitsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetWorkUnitsCommandInput} for command's `input` shape.
        * @see {@link GetWorkUnitsCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class GetWorkUnitsCommand extends $Command<GetWorkUnitsCommandInput, GetWorkUnitsCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: GetWorkUnitsCommandInput;
            constructor(input: GetWorkUnitsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetWorkUnitsCommandInput, GetWorkUnitsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GrantPermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { GrantPermissionsRequest, GrantPermissionsResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface GrantPermissionsCommandInput extends GrantPermissionsRequest {
    }
    export interface GrantPermissionsCommandOutput extends GrantPermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Grants permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3.</p>
        * 	        <p>For information about permissions, see <a href="https://docs-aws.amazon.com/lake-formation/latest/dg/security-data-access.html">Security and Access Control to Metadata and Data</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, GrantPermissionsCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, GrantPermissionsCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new GrantPermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GrantPermissionsCommandInput} for command's `input` shape.
        * @see {@link GrantPermissionsCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class GrantPermissionsCommand extends $Command<GrantPermissionsCommandInput, GrantPermissionsCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: GrantPermissionsCommandInput;
            constructor(input: GrantPermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GrantPermissionsCommandInput, GrantPermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/ListDataCellsFilterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { ListDataCellsFilterRequest, ListDataCellsFilterResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface ListDataCellsFilterCommandInput extends ListDataCellsFilterRequest {
    }
    export interface ListDataCellsFilterCommandOutput extends ListDataCellsFilterResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all the data cell filters on a table.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, ListDataCellsFilterCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, ListDataCellsFilterCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new ListDataCellsFilterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDataCellsFilterCommandInput} for command's `input` shape.
        * @see {@link ListDataCellsFilterCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class ListDataCellsFilterCommand extends $Command<ListDataCellsFilterCommandInput, ListDataCellsFilterCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: ListDataCellsFilterCommandInput;
            constructor(input: ListDataCellsFilterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDataCellsFilterCommandInput, ListDataCellsFilterCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/ListLFTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { ListLFTagsRequest, ListLFTagsResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface ListLFTagsCommandInput extends ListLFTagsRequest {
    }
    export interface ListLFTagsCommandOutput extends ListLFTagsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists LF-tags that the requester has permission to view. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, ListLFTagsCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, ListLFTagsCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new ListLFTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListLFTagsCommandInput} for command's `input` shape.
        * @see {@link ListLFTagsCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class ListLFTagsCommand extends $Command<ListLFTagsCommandInput, ListLFTagsCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: ListLFTagsCommandInput;
            constructor(input: ListLFTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListLFTagsCommandInput, ListLFTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/ListPermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { ListPermissionsRequest, ListPermissionsResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface ListPermissionsCommandInput extends ListPermissionsRequest {
    }
    export interface ListPermissionsCommandOutput extends ListPermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the principal permissions on the resource, filtered by the permissions of the caller. For example, if you are granted an ALTER permission, you are able to see only the principal permissions for ALTER.</p>
        * 	        <p>This operation returns only those permissions that have been explicitly granted.</p>
        * 	        <p>For information about permissions, see <a href="https://docs-aws.amazon.com/lake-formation/latest/dg/security-data-access.html">Security and Access Control to Metadata and Data</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, ListPermissionsCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, ListPermissionsCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new ListPermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPermissionsCommandInput} for command's `input` shape.
        * @see {@link ListPermissionsCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class ListPermissionsCommand extends $Command<ListPermissionsCommandInput, ListPermissionsCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: ListPermissionsCommandInput;
            constructor(input: ListPermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPermissionsCommandInput, ListPermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/ListResourcesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { ListResourcesRequest, ListResourcesResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface ListResourcesCommandInput extends ListResourcesRequest {
    }
    export interface ListResourcesCommandOutput extends ListResourcesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the resources registered to be managed by the Data Catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, ListResourcesCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, ListResourcesCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new ListResourcesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListResourcesCommandInput} for command's `input` shape.
        * @see {@link ListResourcesCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class ListResourcesCommand extends $Command<ListResourcesCommandInput, ListResourcesCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: ListResourcesCommandInput;
            constructor(input: ListResourcesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListResourcesCommandInput, ListResourcesCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/ListTableStorageOptimizersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { ListTableStorageOptimizersRequest, ListTableStorageOptimizersResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface ListTableStorageOptimizersCommandInput extends ListTableStorageOptimizersRequest {
    }
    export interface ListTableStorageOptimizersCommandOutput extends ListTableStorageOptimizersResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the configuration of all storage optimizers associated with a specified table.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, ListTableStorageOptimizersCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, ListTableStorageOptimizersCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new ListTableStorageOptimizersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTableStorageOptimizersCommandInput} for command's `input` shape.
        * @see {@link ListTableStorageOptimizersCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class ListTableStorageOptimizersCommand extends $Command<ListTableStorageOptimizersCommandInput, ListTableStorageOptimizersCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: ListTableStorageOptimizersCommandInput;
            constructor(input: ListTableStorageOptimizersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTableStorageOptimizersCommandInput, ListTableStorageOptimizersCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/ListTransactionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { ListTransactionsRequest, ListTransactionsResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface ListTransactionsCommandInput extends ListTransactionsRequest {
    }
    export interface ListTransactionsCommandOutput extends ListTransactionsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns metadata about transactions and their status. To prevent the response from growing indefinitely, only uncommitted transactions and those available for time-travel queries are returned.</p>
        * 	        <p>This operation can help you identify uncommitted transactions or to get information about transactions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, ListTransactionsCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, ListTransactionsCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new ListTransactionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTransactionsCommandInput} for command's `input` shape.
        * @see {@link ListTransactionsCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class ListTransactionsCommand extends $Command<ListTransactionsCommandInput, ListTransactionsCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: ListTransactionsCommandInput;
            constructor(input: ListTransactionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTransactionsCommandInput, ListTransactionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/PutDataLakeSettingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { PutDataLakeSettingsRequest, PutDataLakeSettingsResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface PutDataLakeSettingsCommandInput extends PutDataLakeSettingsRequest {
    }
    export interface PutDataLakeSettingsCommandOutput extends PutDataLakeSettingsResponse, __MetadataBearer {
    }
    /**
        * <p>Sets the list of data lake administrators who have admin privileges on all resources managed by Lake Formation. For more information on admin privileges, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/lake-formation-permissions.html">Granting Lake Formation Permissions</a>.</p>
        *
        * 	        <p>This API replaces the current list of data lake admins with the new list being passed. To add an admin, fetch the current list and add the new admin to that list and pass that list in this API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, PutDataLakeSettingsCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, PutDataLakeSettingsCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new PutDataLakeSettingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutDataLakeSettingsCommandInput} for command's `input` shape.
        * @see {@link PutDataLakeSettingsCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class PutDataLakeSettingsCommand extends $Command<PutDataLakeSettingsCommandInput, PutDataLakeSettingsCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: PutDataLakeSettingsCommandInput;
            constructor(input: PutDataLakeSettingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutDataLakeSettingsCommandInput, PutDataLakeSettingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/RegisterResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { RegisterResourceRequest, RegisterResourceResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface RegisterResourceCommandInput extends RegisterResourceRequest {
    }
    export interface RegisterResourceCommandOutput extends RegisterResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Registers the resource as managed by the Data Catalog.</p>
        *
        *          <p>To add or update data, Lake Formation needs read/write access to the chosen Amazon S3 path. Choose a role that you know has permission to do this, or choose the AWSServiceRoleForLakeFormationDataAccess service-linked role. When you register the first Amazon S3 path, the service-linked role and a new inline policy are created on your behalf. Lake Formation adds the first path to the inline policy and attaches it to the service-linked role. When you register subsequent paths, Lake Formation adds the path to the existing policy.</p>
        *
        *          <p>The following request registers a new location and gives Lake Formation permission to use the service-linked role to access that location.</p>
        *
        *          <p>
        *             <code>ResourceArn = arn:aws:s3:::my-bucket
        * UseServiceLinkedRole = true</code>
        *          </p>
        *
        * 	        <p>If <code>UseServiceLinkedRole</code> is not set to true, you must provide or set the <code>RoleArn</code>:</p>
        *
        *          <p>
        *             <code>arn:aws:iam::12345:role/my-data-access-role</code>
        *          </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, RegisterResourceCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, RegisterResourceCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new RegisterResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RegisterResourceCommandInput} for command's `input` shape.
        * @see {@link RegisterResourceCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class RegisterResourceCommand extends $Command<RegisterResourceCommandInput, RegisterResourceCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: RegisterResourceCommandInput;
            constructor(input: RegisterResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterResourceCommandInput, RegisterResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/RemoveLFTagsFromResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { RemoveLFTagsFromResourceRequest, RemoveLFTagsFromResourceResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface RemoveLFTagsFromResourceCommandInput extends RemoveLFTagsFromResourceRequest {
    }
    export interface RemoveLFTagsFromResourceCommandOutput extends RemoveLFTagsFromResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes an LF-tag from the resource. Only database, table, or tableWithColumns resource are allowed. To tag columns, use the column inclusion list in <code>tableWithColumns</code> to specify column input.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, RemoveLFTagsFromResourceCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, RemoveLFTagsFromResourceCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new RemoveLFTagsFromResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveLFTagsFromResourceCommandInput} for command's `input` shape.
        * @see {@link RemoveLFTagsFromResourceCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class RemoveLFTagsFromResourceCommand extends $Command<RemoveLFTagsFromResourceCommandInput, RemoveLFTagsFromResourceCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: RemoveLFTagsFromResourceCommandInput;
            constructor(input: RemoveLFTagsFromResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveLFTagsFromResourceCommandInput, RemoveLFTagsFromResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/RevokePermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { RevokePermissionsRequest, RevokePermissionsResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface RevokePermissionsCommandInput extends RevokePermissionsRequest {
    }
    export interface RevokePermissionsCommandOutput extends RevokePermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Revokes permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, RevokePermissionsCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, RevokePermissionsCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new RevokePermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RevokePermissionsCommandInput} for command's `input` shape.
        * @see {@link RevokePermissionsCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class RevokePermissionsCommand extends $Command<RevokePermissionsCommandInput, RevokePermissionsCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: RevokePermissionsCommandInput;
            constructor(input: RevokePermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RevokePermissionsCommandInput, RevokePermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/SearchDatabasesByLFTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { SearchDatabasesByLFTagsRequest, SearchDatabasesByLFTagsResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface SearchDatabasesByLFTagsCommandInput extends SearchDatabasesByLFTagsRequest {
    }
    export interface SearchDatabasesByLFTagsCommandOutput extends SearchDatabasesByLFTagsResponse, __MetadataBearer {
    }
    /**
        * <p>This operation allows a search on <code>DATABASE</code> resources by <code>TagCondition</code>. This operation is used by admins who want to grant user permissions on certain <code>TagConditions</code>. Before making a grant, the admin can use <code>SearchDatabasesByTags</code> to find all resources where the given <code>TagConditions</code> are valid to verify whether the returned resources can be shared.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, SearchDatabasesByLFTagsCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, SearchDatabasesByLFTagsCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new SearchDatabasesByLFTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SearchDatabasesByLFTagsCommandInput} for command's `input` shape.
        * @see {@link SearchDatabasesByLFTagsCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class SearchDatabasesByLFTagsCommand extends $Command<SearchDatabasesByLFTagsCommandInput, SearchDatabasesByLFTagsCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: SearchDatabasesByLFTagsCommandInput;
            constructor(input: SearchDatabasesByLFTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SearchDatabasesByLFTagsCommandInput, SearchDatabasesByLFTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/SearchTablesByLFTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { SearchTablesByLFTagsRequest, SearchTablesByLFTagsResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface SearchTablesByLFTagsCommandInput extends SearchTablesByLFTagsRequest {
    }
    export interface SearchTablesByLFTagsCommandOutput extends SearchTablesByLFTagsResponse, __MetadataBearer {
    }
    /**
        * <p>This operation allows a search on <code>TABLE</code> resources by <code>LFTag</code>s. This will be used by admins who want to grant user permissions on certain LF-tags. Before making a grant, the admin can use <code>SearchTablesByLFTags</code> to find all resources where the given <code>LFTag</code>s are valid to verify whether the returned resources can be shared.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, SearchTablesByLFTagsCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, SearchTablesByLFTagsCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new SearchTablesByLFTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SearchTablesByLFTagsCommandInput} for command's `input` shape.
        * @see {@link SearchTablesByLFTagsCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class SearchTablesByLFTagsCommand extends $Command<SearchTablesByLFTagsCommandInput, SearchTablesByLFTagsCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: SearchTablesByLFTagsCommandInput;
            constructor(input: SearchTablesByLFTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SearchTablesByLFTagsCommandInput, SearchTablesByLFTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/StartQueryPlanningCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { StartQueryPlanningRequest, StartQueryPlanningResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface StartQueryPlanningCommandInput extends StartQueryPlanningRequest {
    }
    export interface StartQueryPlanningCommandOutput extends StartQueryPlanningResponse, __MetadataBearer {
    }
    /**
        * <p>Submits a request to process a query statement.</p>
        *
        * 	        <p>This operation generates work units that can be retrieved with the <code>GetWorkUnits</code> operation as soon as the query state is WORKUNITS_AVAILABLE or FINISHED.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, StartQueryPlanningCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, StartQueryPlanningCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new StartQueryPlanningCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartQueryPlanningCommandInput} for command's `input` shape.
        * @see {@link StartQueryPlanningCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class StartQueryPlanningCommand extends $Command<StartQueryPlanningCommandInput, StartQueryPlanningCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: StartQueryPlanningCommandInput;
            constructor(input: StartQueryPlanningCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartQueryPlanningCommandInput, StartQueryPlanningCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/StartTransactionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { StartTransactionRequest, StartTransactionResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface StartTransactionCommandInput extends StartTransactionRequest {
    }
    export interface StartTransactionCommandOutput extends StartTransactionResponse, __MetadataBearer {
    }
    /**
        * <p>Starts a new transaction and returns its transaction ID. Transaction IDs are opaque objects that you can use to identify a transaction.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, StartTransactionCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, StartTransactionCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new StartTransactionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartTransactionCommandInput} for command's `input` shape.
        * @see {@link StartTransactionCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class StartTransactionCommand extends $Command<StartTransactionCommandInput, StartTransactionCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: StartTransactionCommandInput;
            constructor(input: StartTransactionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartTransactionCommandInput, StartTransactionCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/UpdateLFTagCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { UpdateLFTagRequest, UpdateLFTagResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface UpdateLFTagCommandInput extends UpdateLFTagRequest {
    }
    export interface UpdateLFTagCommandOutput extends UpdateLFTagResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the list of possible values for the specified LF-tag key. If the LF-tag does not exist, the operation throws an EntityNotFoundException. The values in the delete key values will be deleted from list of possible values. If any value in the delete key values is attached to a resource, then API errors out with a 400 Exception - "Update not allowed". Untag the attribute before deleting the LF-tag key's value. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, UpdateLFTagCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, UpdateLFTagCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new UpdateLFTagCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateLFTagCommandInput} for command's `input` shape.
        * @see {@link UpdateLFTagCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class UpdateLFTagCommand extends $Command<UpdateLFTagCommandInput, UpdateLFTagCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: UpdateLFTagCommandInput;
            constructor(input: UpdateLFTagCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateLFTagCommandInput, UpdateLFTagCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/UpdateResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { UpdateResourceRequest, UpdateResourceResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface UpdateResourceCommandInput extends UpdateResourceRequest {
    }
    export interface UpdateResourceCommandOutput extends UpdateResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the data access role used for vending access to the given (registered) resource in Lake Formation. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, UpdateResourceCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, UpdateResourceCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new UpdateResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateResourceCommandInput} for command's `input` shape.
        * @see {@link UpdateResourceCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class UpdateResourceCommand extends $Command<UpdateResourceCommandInput, UpdateResourceCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: UpdateResourceCommandInput;
            constructor(input: UpdateResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateResourceCommandInput, UpdateResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/UpdateTableObjectsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { UpdateTableObjectsRequest, UpdateTableObjectsResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface UpdateTableObjectsCommandInput extends UpdateTableObjectsRequest {
    }
    export interface UpdateTableObjectsCommandOutput extends UpdateTableObjectsResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the manifest of Amazon S3 objects that make up the specified governed table.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, UpdateTableObjectsCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, UpdateTableObjectsCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new UpdateTableObjectsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateTableObjectsCommandInput} for command's `input` shape.
        * @see {@link UpdateTableObjectsCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class UpdateTableObjectsCommand extends $Command<UpdateTableObjectsCommandInput, UpdateTableObjectsCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: UpdateTableObjectsCommandInput;
            constructor(input: UpdateTableObjectsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateTableObjectsCommandInput, UpdateTableObjectsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/UpdateTableStorageOptimizerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient";
    import { UpdateTableStorageOptimizerRequest, UpdateTableStorageOptimizerResponse } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0";
    export interface UpdateTableStorageOptimizerCommandInput extends UpdateTableStorageOptimizerRequest {
    }
    export interface UpdateTableStorageOptimizerCommandOutput extends UpdateTableStorageOptimizerResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the configuration of the storage optimizers for a table.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LakeFormationClient, UpdateTableStorageOptimizerCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
        * // const { LakeFormationClient, UpdateTableStorageOptimizerCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
        * const client = new LakeFormationClient(config);
        * const command = new UpdateTableStorageOptimizerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateTableStorageOptimizerCommandInput} for command's `input` shape.
        * @see {@link UpdateTableStorageOptimizerCommandOutput} for command's `response` shape.
        * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
        *
        */
    export class UpdateTableStorageOptimizerCommand extends $Command<UpdateTableStorageOptimizerCommandInput, UpdateTableStorageOptimizerCommandOutput, LakeFormationClientResolvedConfig> {
            readonly input: UpdateTableStorageOptimizerCommandInput;
            constructor(input: UpdateTableStorageOptimizerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LakeFormationClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateTableStorageOptimizerCommandInput, UpdateTableStorageOptimizerCommandOutput>;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/LakeFormationClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AddLFTagsToResourceCommandInput, AddLFTagsToResourceCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/AddLFTagsToResourceCommand";
    import { BatchGrantPermissionsCommandInput, BatchGrantPermissionsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/BatchGrantPermissionsCommand";
    import { BatchRevokePermissionsCommandInput, BatchRevokePermissionsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/BatchRevokePermissionsCommand";
    import { CancelTransactionCommandInput, CancelTransactionCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/CancelTransactionCommand";
    import { CommitTransactionCommandInput, CommitTransactionCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/CommitTransactionCommand";
    import { CreateDataCellsFilterCommandInput, CreateDataCellsFilterCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/CreateDataCellsFilterCommand";
    import { CreateLFTagCommandInput, CreateLFTagCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/CreateLFTagCommand";
    import { DeleteDataCellsFilterCommandInput, DeleteDataCellsFilterCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/DeleteDataCellsFilterCommand";
    import { DeleteLFTagCommandInput, DeleteLFTagCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/DeleteLFTagCommand";
    import { DeleteObjectsOnCancelCommandInput, DeleteObjectsOnCancelCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/DeleteObjectsOnCancelCommand";
    import { DeregisterResourceCommandInput, DeregisterResourceCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/DeregisterResourceCommand";
    import { DescribeResourceCommandInput, DescribeResourceCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/DescribeResourceCommand";
    import { DescribeTransactionCommandInput, DescribeTransactionCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/DescribeTransactionCommand";
    import { ExtendTransactionCommandInput, ExtendTransactionCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/ExtendTransactionCommand";
    import { GetDataLakeSettingsCommandInput, GetDataLakeSettingsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetDataLakeSettingsCommand";
    import { GetEffectivePermissionsForPathCommandInput, GetEffectivePermissionsForPathCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetEffectivePermissionsForPathCommand";
    import { GetLFTagCommandInput, GetLFTagCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetLFTagCommand";
    import { GetQueryStateCommandInput, GetQueryStateCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetQueryStateCommand";
    import { GetQueryStatisticsCommandInput, GetQueryStatisticsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetQueryStatisticsCommand";
    import { GetResourceLFTagsCommandInput, GetResourceLFTagsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetResourceLFTagsCommand";
    import { GetTableObjectsCommandInput, GetTableObjectsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetTableObjectsCommand";
    import { GetTemporaryGluePartitionCredentialsCommandInput, GetTemporaryGluePartitionCredentialsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetTemporaryGluePartitionCredentialsCommand";
    import { GetTemporaryGlueTableCredentialsCommandInput, GetTemporaryGlueTableCredentialsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetTemporaryGlueTableCredentialsCommand";
    import { GetWorkUnitResultsCommandInput, GetWorkUnitResultsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetWorkUnitResultsCommand";
    import { GetWorkUnitsCommandInput, GetWorkUnitsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GetWorkUnitsCommand";
    import { GrantPermissionsCommandInput, GrantPermissionsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/GrantPermissionsCommand";
    import { ListDataCellsFilterCommandInput, ListDataCellsFilterCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/ListDataCellsFilterCommand";
    import { ListLFTagsCommandInput, ListLFTagsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/ListLFTagsCommand";
    import { ListPermissionsCommandInput, ListPermissionsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/ListPermissionsCommand";
    import { ListResourcesCommandInput, ListResourcesCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/ListResourcesCommand";
    import { ListTableStorageOptimizersCommandInput, ListTableStorageOptimizersCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/ListTableStorageOptimizersCommand";
    import { ListTransactionsCommandInput, ListTransactionsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/ListTransactionsCommand";
    import { PutDataLakeSettingsCommandInput, PutDataLakeSettingsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/PutDataLakeSettingsCommand";
    import { RegisterResourceCommandInput, RegisterResourceCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/RegisterResourceCommand";
    import { RemoveLFTagsFromResourceCommandInput, RemoveLFTagsFromResourceCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/RemoveLFTagsFromResourceCommand";
    import { RevokePermissionsCommandInput, RevokePermissionsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/RevokePermissionsCommand";
    import { SearchDatabasesByLFTagsCommandInput, SearchDatabasesByLFTagsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/SearchDatabasesByLFTagsCommand";
    import { SearchTablesByLFTagsCommandInput, SearchTablesByLFTagsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/SearchTablesByLFTagsCommand";
    import { StartQueryPlanningCommandInput, StartQueryPlanningCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/StartQueryPlanningCommand";
    import { StartTransactionCommandInput, StartTransactionCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/StartTransactionCommand";
    import { UpdateLFTagCommandInput, UpdateLFTagCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/UpdateLFTagCommand";
    import { UpdateResourceCommandInput, UpdateResourceCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/UpdateResourceCommand";
    import { UpdateTableObjectsCommandInput, UpdateTableObjectsCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/UpdateTableObjectsCommand";
    import { UpdateTableStorageOptimizerCommandInput, UpdateTableStorageOptimizerCommandOutput } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/commands/UpdateTableStorageOptimizerCommand";
    export type ServiceInputTypes = AddLFTagsToResourceCommandInput | BatchGrantPermissionsCommandInput | BatchRevokePermissionsCommandInput | CancelTransactionCommandInput | CommitTransactionCommandInput | CreateDataCellsFilterCommandInput | CreateLFTagCommandInput | DeleteDataCellsFilterCommandInput | DeleteLFTagCommandInput | DeleteObjectsOnCancelCommandInput | DeregisterResourceCommandInput | DescribeResourceCommandInput | DescribeTransactionCommandInput | ExtendTransactionCommandInput | GetDataLakeSettingsCommandInput | GetEffectivePermissionsForPathCommandInput | GetLFTagCommandInput | GetQueryStateCommandInput | GetQueryStatisticsCommandInput | GetResourceLFTagsCommandInput | GetTableObjectsCommandInput | GetTemporaryGluePartitionCredentialsCommandInput | GetTemporaryGlueTableCredentialsCommandInput | GetWorkUnitResultsCommandInput | GetWorkUnitsCommandInput | GrantPermissionsCommandInput | ListDataCellsFilterCommandInput | ListLFTagsCommandInput | ListPermissionsCommandInput | ListResourcesCommandInput | ListTableStorageOptimizersCommandInput | ListTransactionsCommandInput | PutDataLakeSettingsCommandInput | RegisterResourceCommandInput | RemoveLFTagsFromResourceCommandInput | RevokePermissionsCommandInput | SearchDatabasesByLFTagsCommandInput | SearchTablesByLFTagsCommandInput | StartQueryPlanningCommandInput | StartTransactionCommandInput | UpdateLFTagCommandInput | UpdateResourceCommandInput | UpdateTableObjectsCommandInput | UpdateTableStorageOptimizerCommandInput;
    export type ServiceOutputTypes = AddLFTagsToResourceCommandOutput | BatchGrantPermissionsCommandOutput | BatchRevokePermissionsCommandOutput | CancelTransactionCommandOutput | CommitTransactionCommandOutput | CreateDataCellsFilterCommandOutput | CreateLFTagCommandOutput | DeleteDataCellsFilterCommandOutput | DeleteLFTagCommandOutput | DeleteObjectsOnCancelCommandOutput | DeregisterResourceCommandOutput | DescribeResourceCommandOutput | DescribeTransactionCommandOutput | ExtendTransactionCommandOutput | GetDataLakeSettingsCommandOutput | GetEffectivePermissionsForPathCommandOutput | GetLFTagCommandOutput | GetQueryStateCommandOutput | GetQueryStatisticsCommandOutput | GetResourceLFTagsCommandOutput | GetTableObjectsCommandOutput | GetTemporaryGluePartitionCredentialsCommandOutput | GetTemporaryGlueTableCredentialsCommandOutput | GetWorkUnitResultsCommandOutput | GetWorkUnitsCommandOutput | GrantPermissionsCommandOutput | ListDataCellsFilterCommandOutput | ListLFTagsCommandOutput | ListPermissionsCommandOutput | ListResourcesCommandOutput | ListTableStorageOptimizersCommandOutput | ListTransactionsCommandOutput | PutDataLakeSettingsCommandOutput | RegisterResourceCommandOutput | RemoveLFTagsFromResourceCommandOutput | RevokePermissionsCommandOutput | SearchDatabasesByLFTagsCommandOutput | SearchTablesByLFTagsCommandOutput | StartQueryPlanningCommandOutput | StartTransactionCommandOutput | UpdateLFTagCommandOutput | UpdateResourceCommandOutput | UpdateTableObjectsCommandOutput | UpdateTableStorageOptimizerCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type LakeFormationClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of LakeFormationClient class constructor that set the region, credentials and other options.
        */
    export interface LakeFormationClientConfig extends LakeFormationClientConfigType {
    }
    type LakeFormationClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of LakeFormationClient class. This is resolved and normalized from the {@link LakeFormationClientConfig | constructor configuration interface}.
        */
    export interface LakeFormationClientResolvedConfig extends LakeFormationClientResolvedConfigType {
    }
    /**
        * <fullname>Lake Formation</fullname>
        *          <p>Defines the public endpoint for the Lake Formation service.</p>
        */
    export class LakeFormationClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, LakeFormationClientResolvedConfig> {
            /**
                * The resolved configuration of LakeFormationClient class. This is resolved and normalized from the {@link LakeFormationClientConfig | constructor configuration interface}.
                */
            readonly config: LakeFormationClientResolvedConfig;
            constructor(configuration: LakeFormationClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { Readable } from "stream";
    import { LakeFormationServiceException as __BaseException } from "@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/LakeFormationServiceException";
    /**
        * <p>Access to a resource was denied.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>A structure containing an LF-tag key-value pair.</p>
        */
    export interface LFTagPair {
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            CatalogId?: string;
            /**
                * <p>The key-name for the LF-tag.</p>
                */
            TagKey: string | undefined;
            /**
                * <p>A list of possible values an attribute can take.</p>
                */
            TagValues: string[] | undefined;
    }
    export namespace LFTagPair {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LFTagPair) => any;
    }
    /**
        * <p>A structure for the catalog object.</p>
        */
    export interface CatalogResource {
    }
    export namespace CatalogResource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CatalogResource) => any;
    }
    /**
        * <p>A structure for the database object.</p>
        */
    export interface DatabaseResource {
            /**
                * <p>The identifier for the Data Catalog. By default, it is the account ID of the caller.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the database resource. Unique to the Data Catalog.</p>
                */
            Name: string | undefined;
    }
    export namespace DatabaseResource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatabaseResource) => any;
    }
    /**
        * <p>A structure for a data cells filter resource. </p>
        */
    export interface DataCellsFilterResource {
            /**
                * <p>The ID of the catalog to which the table belongs.</p>
                */
            TableCatalogId?: string;
            /**
                * <p>A database in the Glue Data Catalog.</p>
                */
            DatabaseName?: string;
            /**
                * <p>The name of the table.</p>
                */
            TableName?: string;
            /**
                * <p>The name of the data cells filter. </p>
                */
            Name?: string;
    }
    export namespace DataCellsFilterResource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataCellsFilterResource) => any;
    }
    /**
        * <p>A structure for a data location object where permissions are granted or revoked. </p>
        */
    export interface DataLocationResource {
            /**
                * <p>The identifier for the Data Catalog where the location is registered with Lake Formation. By default, it is the account ID of the caller.</p>
                */
            CatalogId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies the data location resource.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace DataLocationResource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataLocationResource) => any;
    }
    /**
        * <p>A structure containing an LF-tag key and values for a resource.</p>
        */
    export interface LFTagKeyResource {
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            CatalogId?: string;
            /**
                * <p>The key-name for the LF-tag.</p>
                */
            TagKey: string | undefined;
            /**
                * <p>A list of possible values an attribute can take.</p>
                */
            TagValues: string[] | undefined;
    }
    export namespace LFTagKeyResource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LFTagKeyResource) => any;
    }
    /**
        * <p>A structure that allows an admin to grant user permissions on certain conditions. For example, granting a role access to all columns that do not have the LF-tag 'PII' in tables that have the LF-tag 'Prod'.</p>
        */
    export interface LFTag {
            /**
                * <p>The key-name for the LF-tag.</p>
                */
            TagKey: string | undefined;
            /**
                * <p>A list of possible values an attribute can take.</p>
                */
            TagValues: string[] | undefined;
    }
    export namespace LFTag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LFTag) => any;
    }
    export enum ResourceType {
            DATABASE = "DATABASE",
            TABLE = "TABLE"
    }
    /**
        * <p>A structure containing a list of LF-tag conditions that apply to a resource's LF-tag policy.</p>
        */
    export interface LFTagPolicyResource {
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            CatalogId?: string;
            /**
                * <p>The resource type for which the LF-tag policy applies.</p>
                */
            ResourceType: ResourceType | string | undefined;
            /**
                * <p>A list of LF-tag conditions that apply to the resource's LF-tag policy.</p>
                */
            Expression: LFTag[] | undefined;
    }
    export namespace LFTagPolicyResource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LFTagPolicyResource) => any;
    }
    /**
        * <p>A wildcard object representing every table under a database.</p>
        */
    export interface TableWildcard {
    }
    export namespace TableWildcard {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TableWildcard) => any;
    }
    /**
        * <p>A structure for the table object. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal. </p>
        */
    export interface TableResource {
            /**
                * <p>The identifier for the Data Catalog. By default, it is the account ID of the caller.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the database for the table. Unique to a Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database privileges to a principal. </p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the table.</p>
                */
            Name?: string;
            /**
                * <p>A wildcard object representing every table under a database.</p>
                *
                *          <p>At least one of <code>TableResource$Name</code> or <code>TableResource$TableWildcard</code> is required.</p>
                */
            TableWildcard?: TableWildcard;
    }
    export namespace TableResource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TableResource) => any;
    }
    /**
        * <p>A wildcard object, consisting of an optional list of excluded column names or indexes.</p>
        */
    export interface ColumnWildcard {
            /**
                * <p>Excludes column names. Any column with this name will be excluded.</p>
                */
            ExcludedColumnNames?: string[];
    }
    export namespace ColumnWildcard {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ColumnWildcard) => any;
    }
    /**
        * <p>A structure for a table with columns object. This object is only used when granting a SELECT permission.</p>
        * 	        <p>This object must take a value for at least one of <code>ColumnsNames</code>, <code>ColumnsIndexes</code>, or <code>ColumnsWildcard</code>.</p>
        */
    export interface TableWithColumnsResource {
            /**
                * <p>The identifier for the Data Catalog. By default, it is the account ID of the caller.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the database for the table with columns resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database privileges to a principal. </p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the table resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal. </p>
                */
            Name: string | undefined;
            /**
                * <p>The list of column names for the table. At least one of <code>ColumnNames</code> or <code>ColumnWildcard</code> is required.</p>
                */
            ColumnNames?: string[];
            /**
                * <p>A wildcard specified by a <code>ColumnWildcard</code> object. At least one of <code>ColumnNames</code> or <code>ColumnWildcard</code> is required.</p>
                */
            ColumnWildcard?: ColumnWildcard;
    }
    export namespace TableWithColumnsResource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TableWithColumnsResource) => any;
    }
    /**
        * <p>A structure for the resource.</p>
        */
    export interface Resource {
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            Catalog?: CatalogResource;
            /**
                * <p>The database for the resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database permissions to a principal. </p>
                */
            Database?: DatabaseResource;
            /**
                * <p>The table for the resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal. </p>
                */
            Table?: TableResource;
            /**
                * <p>The table with columns for the resource. A principal with permissions to this resource can select metadata from the columns of a table in the Data Catalog and the underlying data in Amazon S3.</p>
                */
            TableWithColumns?: TableWithColumnsResource;
            /**
                * <p>The location of an Amazon S3 path where permissions are granted or revoked. </p>
                */
            DataLocation?: DataLocationResource;
            /**
                * <p>A data cell filter.</p>
                */
            DataCellsFilter?: DataCellsFilterResource;
            /**
                * <p>The LF-tag key and values attached to a resource.</p>
                */
            LFTag?: LFTagKeyResource;
            /**
                * <p>A list of LF-tag conditions that define a resource's LF-tag policy.</p>
                */
            LFTagPolicy?: LFTagPolicyResource;
    }
    export namespace Resource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Resource) => any;
    }
    export interface AddLFTagsToResourceRequest {
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            CatalogId?: string;
            /**
                * <p>The database, table, or column resource to which to attach an LF-tag.</p>
                */
            Resource: Resource | undefined;
            /**
                * <p>The LF-tags to attach to the resource.</p>
                */
            LFTags: LFTagPair[] | undefined;
    }
    export namespace AddLFTagsToResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddLFTagsToResourceRequest) => any;
    }
    /**
        * <p>Contains details about an error.</p>
        */
    export interface ErrorDetail {
            /**
                * <p>The code associated with this error.</p>
                */
            ErrorCode?: string;
            /**
                * <p>A message describing the error.</p>
                */
            ErrorMessage?: string;
    }
    export namespace ErrorDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ErrorDetail) => any;
    }
    /**
        * <p>A structure containing an error related to a <code>TagResource</code> or <code>UnTagResource</code> operation.</p>
        */
    export interface LFTagError {
            /**
                * <p>The key-name of the LF-tag.</p>
                */
            LFTag?: LFTagPair;
            /**
                * <p>An error that occurred with the attachment or detachment of the LF-tag.</p>
                */
            Error?: ErrorDetail;
    }
    export namespace LFTagError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LFTagError) => any;
    }
    export interface AddLFTagsToResourceResponse {
            /**
                * <p>A list of failures to tag the resource.</p>
                */
            Failures?: LFTagError[];
    }
    export namespace AddLFTagsToResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddLFTagsToResourceResponse) => any;
    }
    /**
        * <p>Two processes are trying to modify a resource simultaneously.</p>
        */
    export class ConcurrentModificationException extends __BaseException {
            readonly name: "ConcurrentModificationException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConcurrentModificationException, __BaseException>);
    }
    /**
        * <p>A specified entity does not exist</p>
        */
    export class EntityNotFoundException extends __BaseException {
            readonly name: "EntityNotFoundException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EntityNotFoundException, __BaseException>);
    }
    /**
        * <p>An internal service error occurred.</p>
        */
    export class InternalServiceException extends __BaseException {
            readonly name: "InternalServiceException";
            readonly $fault: "server";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServiceException, __BaseException>);
    }
    /**
        * <p>The input provided was not valid.</p>
        */
    export class InvalidInputException extends __BaseException {
            readonly name: "InvalidInputException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidInputException, __BaseException>);
    }
    /**
        * <p>The operation timed out.</p>
        */
    export class OperationTimeoutException extends __BaseException {
            readonly name: "OperationTimeoutException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OperationTimeoutException, __BaseException>);
    }
    /**
        * <p>A new object to add to the governed table.</p>
        */
    export interface AddObjectInput {
            /**
                * <p>The Amazon S3 location of the object.</p>
                */
            Uri: string | undefined;
            /**
                * <p>The Amazon S3 ETag of the object. Returned by <code>GetTableObjects</code> for validation and used to identify changes to the underlying data.</p>
                */
            ETag: string | undefined;
            /**
                * <p>The size of the Amazon S3 object in bytes.</p>
                */
            Size: number | undefined;
            /**
                * <p>A list of partition values for the object. A value must be specified for each partition key associated with the table.</p>
                * 	        <p>The supported data types are integer, long, date(yyyy-MM-dd), timestamp(yyyy-MM-dd HH:mm:ssXXX or yyyy-MM-dd HH:mm:ss"), string and decimal.</p>
                */
            PartitionValues?: string[];
    }
    export namespace AddObjectInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddObjectInput) => any;
    }
    /**
        * <p>A structure that you pass to indicate you want all rows in a filter. </p>
        */
    export interface AllRowsWildcard {
    }
    export namespace AllRowsWildcard {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AllRowsWildcard) => any;
    }
    /**
        * <p>A resource to be created or added already exists.</p>
        */
    export class AlreadyExistsException extends __BaseException {
            readonly name: "AlreadyExistsException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AlreadyExistsException, __BaseException>);
    }
    /**
        * <p>A structure used to include auditing information on the privileged API. </p>
        */
    export interface AuditContext {
            /**
                * <p>The filter engine can populate the 'AdditionalAuditContext' information with the request ID for you to track. This information will be displayed in CloudTrail log in your account.</p>
                */
            AdditionalAuditContext?: string;
    }
    export namespace AuditContext {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AuditContext) => any;
    }
    export enum Permission {
            ALL = "ALL",
            ALTER = "ALTER",
            ASSOCIATE = "ASSOCIATE",
            CREATE_DATABASE = "CREATE_DATABASE",
            CREATE_TABLE = "CREATE_TABLE",
            CREATE_TAG = "CREATE_TAG",
            DATA_LOCATION_ACCESS = "DATA_LOCATION_ACCESS",
            DELETE = "DELETE",
            DESCRIBE = "DESCRIBE",
            DROP = "DROP",
            INSERT = "INSERT",
            SELECT = "SELECT"
    }
    /**
        * <p>The Lake Formation principal. Supported principals are IAM users
        *       or IAM roles.</p>
        */
    export interface DataLakePrincipal {
            /**
                * <p>An identifier for the Lake Formation principal.</p>
                */
            DataLakePrincipalIdentifier?: string;
    }
    export namespace DataLakePrincipal {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataLakePrincipal) => any;
    }
    /**
        * <p>A permission to a resource granted by batch operation to the principal.</p>
        */
    export interface BatchPermissionsRequestEntry {
            /**
                * <p>A unique identifier for the batch permissions request entry.</p>
                */
            Id: string | undefined;
            /**
                * <p>The principal to be granted a permission.</p>
                */
            Principal?: DataLakePrincipal;
            /**
                * <p>The resource to which the principal is to be granted a permission.</p>
                */
            Resource?: Resource;
            /**
                * <p>The permissions to be granted.</p>
                */
            Permissions?: (Permission | string)[];
            /**
                * <p>Indicates if the option to pass permissions is granted.</p>
                */
            PermissionsWithGrantOption?: (Permission | string)[];
    }
    export namespace BatchPermissionsRequestEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchPermissionsRequestEntry) => any;
    }
    export interface BatchGrantPermissionsRequest {
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            CatalogId?: string;
            /**
                * <p>A list of up to 20 entries for resource permissions to be granted by batch operation to the principal.</p>
                */
            Entries: BatchPermissionsRequestEntry[] | undefined;
    }
    export namespace BatchGrantPermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGrantPermissionsRequest) => any;
    }
    /**
        * <p>A list of failures when performing a batch grant or batch revoke operation.</p>
        */
    export interface BatchPermissionsFailureEntry {
            /**
                * <p>An identifier for an entry of the batch request.</p>
                */
            RequestEntry?: BatchPermissionsRequestEntry;
            /**
                * <p>An error message that applies to the failure of the entry.</p>
                */
            Error?: ErrorDetail;
    }
    export namespace BatchPermissionsFailureEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchPermissionsFailureEntry) => any;
    }
    export interface BatchGrantPermissionsResponse {
            /**
                * <p>A list of failures to grant permissions to the resources.</p>
                */
            Failures?: BatchPermissionsFailureEntry[];
    }
    export namespace BatchGrantPermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGrantPermissionsResponse) => any;
    }
    export interface BatchRevokePermissionsRequest {
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            CatalogId?: string;
            /**
                * <p>A list of up to 20 entries for resource permissions to be revoked by batch operation to the principal.</p>
                */
            Entries: BatchPermissionsRequestEntry[] | undefined;
    }
    export namespace BatchRevokePermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchRevokePermissionsRequest) => any;
    }
    export interface BatchRevokePermissionsResponse {
            /**
                * <p>A list of failures to revoke permissions to the resources.</p>
                */
            Failures?: BatchPermissionsFailureEntry[];
    }
    export namespace BatchRevokePermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchRevokePermissionsResponse) => any;
    }
    export interface CancelTransactionRequest {
            /**
                * <p>The transaction to cancel.</p>
                */
            TransactionId: string | undefined;
    }
    export namespace CancelTransactionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelTransactionRequest) => any;
    }
    export interface CancelTransactionResponse {
    }
    export namespace CancelTransactionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelTransactionResponse) => any;
    }
    /**
        * <p>Contains details about an error related to a transaction commit that was in progress.</p>
        */
    export class TransactionCommitInProgressException extends __BaseException {
            readonly name: "TransactionCommitInProgressException";
            readonly $fault: "client";
            /**
                * <p>A message describing the error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TransactionCommitInProgressException, __BaseException>);
    }
    /**
        * <p>Contains details about an error where the specified transaction has already been committed and cannot be used for <code>UpdateTableObjects</code>.</p>
        */
    export class TransactionCommittedException extends __BaseException {
            readonly name: "TransactionCommittedException";
            readonly $fault: "client";
            /**
                * <p>A message describing the error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TransactionCommittedException, __BaseException>);
    }
    export interface CommitTransactionRequest {
            /**
                * <p>The transaction to commit.</p>
                */
            TransactionId: string | undefined;
    }
    export namespace CommitTransactionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CommitTransactionRequest) => any;
    }
    export enum TransactionStatus {
            ABORTED = "ABORTED",
            ACTIVE = "ACTIVE",
            COMMITTED = "COMMITTED",
            COMMIT_IN_PROGRESS = "COMMIT_IN_PROGRESS"
    }
    export interface CommitTransactionResponse {
            /**
                * <p>The status of the transaction.</p>
                */
            TransactionStatus?: TransactionStatus | string;
    }
    export namespace CommitTransactionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CommitTransactionResponse) => any;
    }
    /**
        * <p>Contains details about an error related to a transaction that was cancelled.</p>
        */
    export class TransactionCanceledException extends __BaseException {
            readonly name: "TransactionCanceledException";
            readonly $fault: "client";
            /**
                * <p>A message describing the error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TransactionCanceledException, __BaseException>);
    }
    /**
        * <p>A PartiQL predicate.</p>
        */
    export interface RowFilter {
            /**
                * <p>A filter expression.</p>
                */
            FilterExpression?: string;
            /**
                * <p>A wildcard for all rows.</p>
                */
            AllRowsWildcard?: AllRowsWildcard;
    }
    export namespace RowFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RowFilter) => any;
    }
    /**
        * <p>A structure that describes certain columns on certain rows.</p>
        */
    export interface DataCellsFilter {
            /**
                * <p>The ID of the catalog to which the table belongs.</p>
                */
            TableCatalogId: string | undefined;
            /**
                * <p>A database in the Glue Data Catalog.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>A table in the database.</p>
                */
            TableName: string | undefined;
            /**
                * <p>The name given by the user to the data filter cell.</p>
                */
            Name: string | undefined;
            /**
                * <p>A PartiQL predicate.</p>
                */
            RowFilter?: RowFilter;
            /**
                * <p>A list of column names.</p>
                */
            ColumnNames?: string[];
            /**
                * <p>A wildcard with exclusions.</p>
                *
                *          <p>You must specify either a <code>ColumnNames</code> list or the
                *       <code>ColumnWildCard</code>. </p>
                */
            ColumnWildcard?: ColumnWildcard;
    }
    export namespace DataCellsFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataCellsFilter) => any;
    }
    export interface CreateDataCellsFilterRequest {
            /**
                * <p>A <code>DataCellsFilter</code> structure containing information about the data cells filter.</p>
                */
            TableData: DataCellsFilter | undefined;
    }
    export namespace CreateDataCellsFilterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDataCellsFilterRequest) => any;
    }
    export interface CreateDataCellsFilterResponse {
    }
    export namespace CreateDataCellsFilterResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDataCellsFilterResponse) => any;
    }
    /**
        * <p>A resource numerical limit was exceeded.</p>
        */
    export class ResourceNumberLimitExceededException extends __BaseException {
            readonly name: "ResourceNumberLimitExceededException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNumberLimitExceededException, __BaseException>);
    }
    export interface CreateLFTagRequest {
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            CatalogId?: string;
            /**
                * <p>The key-name for the LF-tag.</p>
                */
            TagKey: string | undefined;
            /**
                * <p>A list of possible values an attribute can take.</p>
                */
            TagValues: string[] | undefined;
    }
    export namespace CreateLFTagRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLFTagRequest) => any;
    }
    export interface CreateLFTagResponse {
    }
    export namespace CreateLFTagResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLFTagResponse) => any;
    }
    export interface DeleteDataCellsFilterRequest {
            /**
                * <p>The ID of the catalog to which the table belongs.</p>
                */
            TableCatalogId?: string;
            /**
                * <p>A database in the Glue Data Catalog.</p>
                */
            DatabaseName?: string;
            /**
                * <p>A table in the database.</p>
                */
            TableName?: string;
            /**
                * <p>The name given by the user to the data filter cell.</p>
                */
            Name?: string;
    }
    export namespace DeleteDataCellsFilterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDataCellsFilterRequest) => any;
    }
    export interface DeleteDataCellsFilterResponse {
    }
    export namespace DeleteDataCellsFilterResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDataCellsFilterResponse) => any;
    }
    export interface DeleteLFTagRequest {
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            CatalogId?: string;
            /**
                * <p>The key-name for the LF-tag to delete.</p>
                */
            TagKey: string | undefined;
    }
    export namespace DeleteLFTagRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLFTagRequest) => any;
    }
    export interface DeleteLFTagResponse {
    }
    export namespace DeleteLFTagResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLFTagResponse) => any;
    }
    /**
        * <p>An object that defines an Amazon S3 object to be deleted if a transaction cancels, provided that
        *       <code>VirtualPut</code> was called before writing the object.</p>
        */
    export interface VirtualObject {
            /**
                * <p>The path to the Amazon S3 object. Must start with s3://</p>
                */
            Uri: string | undefined;
            /**
                * <p>The ETag of the Amazon S3 object.</p>
                */
            ETag?: string;
    }
    export namespace VirtualObject {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VirtualObject) => any;
    }
    export interface DeleteObjectsOnCancelRequest {
            /**
                * <p>The Glue data catalog that contains the governed table. Defaults to the current account ID.</p>
                */
            CatalogId?: string;
            /**
                * <p>The database that contains the governed table.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the governed table.</p>
                */
            TableName: string | undefined;
            /**
                * <p>ID of the transaction that the writes occur in.</p>
                */
            TransactionId: string | undefined;
            /**
                * <p>A list of VirtualObject structures, which indicates the Amazon S3 objects to be deleted if the transaction cancels.</p>
                */
            Objects: VirtualObject[] | undefined;
    }
    export namespace DeleteObjectsOnCancelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteObjectsOnCancelRequest) => any;
    }
    export interface DeleteObjectsOnCancelResponse {
    }
    export namespace DeleteObjectsOnCancelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteObjectsOnCancelResponse) => any;
    }
    /**
        * <p>Contains details about an error related to a resource which is not ready for a transaction.</p>
        */
    export class ResourceNotReadyException extends __BaseException {
            readonly name: "ResourceNotReadyException";
            readonly $fault: "client";
            /**
                * <p>A message describing the error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotReadyException, __BaseException>);
    }
    export interface DeregisterResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource that you want to deregister.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace DeregisterResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterResourceRequest) => any;
    }
    export interface DeregisterResourceResponse {
    }
    export namespace DeregisterResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterResourceResponse) => any;
    }
    export interface DescribeResourceRequest {
            /**
                * <p>The resource ARN.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace DescribeResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeResourceRequest) => any;
    }
    /**
        * <p>A structure containing information about an Lake Formation resource.</p>
        */
    export interface ResourceInfo {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceArn?: string;
            /**
                * <p>The IAM role that registered a resource.</p>
                */
            RoleArn?: string;
            /**
                * <p>The date and time the resource was last modified.</p>
                */
            LastModified?: Date;
    }
    export namespace ResourceInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceInfo) => any;
    }
    export interface DescribeResourceResponse {
            /**
                * <p>A structure containing information about an Lake Formation resource.</p>
                */
            ResourceInfo?: ResourceInfo;
    }
    export namespace DescribeResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeResourceResponse) => any;
    }
    export interface DescribeTransactionRequest {
            /**
                * <p>The transaction for which to return status.</p>
                */
            TransactionId: string | undefined;
    }
    export namespace DescribeTransactionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTransactionRequest) => any;
    }
    /**
        * <p>A structure that contains information about a transaction.</p>
        */
    export interface TransactionDescription {
            /**
                * <p>The ID of the transaction.</p>
                */
            TransactionId?: string;
            /**
                * <p>A status of ACTIVE, COMMITTED, or ABORTED.</p>
                */
            TransactionStatus?: TransactionStatus | string;
            /**
                * <p>The time when the transaction started.</p>
                */
            TransactionStartTime?: Date;
            /**
                * <p>The time when the transaction committed or aborted, if it is not currently active.</p>
                */
            TransactionEndTime?: Date;
    }
    export namespace TransactionDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransactionDescription) => any;
    }
    export interface DescribeTransactionResponse {
            /**
                * <p>Returns a <code>TransactionDescription</code> object containing information about the transaction.</p>
                */
            TransactionDescription?: TransactionDescription;
    }
    export namespace DescribeTransactionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTransactionResponse) => any;
    }
    export interface ExtendTransactionRequest {
            /**
                * <p>The transaction to extend.</p>
                */
            TransactionId?: string;
    }
    export namespace ExtendTransactionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExtendTransactionRequest) => any;
    }
    export interface ExtendTransactionResponse {
    }
    export namespace ExtendTransactionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExtendTransactionResponse) => any;
    }
    export interface GetDataLakeSettingsRequest {
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            CatalogId?: string;
    }
    export namespace GetDataLakeSettingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDataLakeSettingsRequest) => any;
    }
    /**
        * <p>Permissions granted to a principal.</p>
        */
    export interface PrincipalPermissions {
            /**
                * <p>The principal who is granted permissions.</p>
                */
            Principal?: DataLakePrincipal;
            /**
                * <p>The permissions that are granted to the principal.</p>
                */
            Permissions?: (Permission | string)[];
    }
    export namespace PrincipalPermissions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PrincipalPermissions) => any;
    }
    /**
        * <p>A structure representing a list of Lake Formation principals designated as data lake administrators and lists of principal permission entries for default create database and default create table permissions.</p>
        */
    export interface DataLakeSettings {
            /**
                * <p>A list of Lake Formation principals. Supported principals are IAM users or IAM roles.</p>
                */
            DataLakeAdmins?: DataLakePrincipal[];
            /**
                * <p>Specifies whether access control on newly created database is managed by Lake Formation permissions or exclusively by IAM permissions. You can override this default setting when you create a database.</p>
                *
                *          <p>A null value indicates access control by Lake Formation permissions. A value that assigns ALL to IAM_ALLOWED_PRINCIPALS indicates access control by IAM permissions. This is referred to as the setting "Use only IAM access control," and is for backward compatibility with the Glue permission model implemented by IAM permissions.</p>
                *
                * 	        <p>The only permitted values are an empty array or an array that contains a single JSON object that grants ALL to IAM_ALLOWED_PRINCIPALS.</p>
                *
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/change-settings.html">Changing the Default Security Settings for Your Data Lake</a>.</p>
                */
            CreateDatabaseDefaultPermissions?: PrincipalPermissions[];
            /**
                * <p>Specifies whether access control on newly created table is managed by Lake Formation permissions or exclusively by IAM permissions.</p>
                *
                *          <p>A null value indicates access control by Lake Formation permissions. A value that assigns ALL to IAM_ALLOWED_PRINCIPALS indicates access control by IAM permissions. This is referred to as the setting "Use only IAM access control," and is for backward compatibility with the Glue permission model implemented by IAM permissions.</p>
                *
                * 	        <p>The only permitted values are an empty array or an array that contains a single JSON object that grants ALL to IAM_ALLOWED_PRINCIPALS.</p>
                *
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/change-settings.html">Changing the Default Security Settings for Your Data Lake</a>.</p>
                */
            CreateTableDefaultPermissions?: PrincipalPermissions[];
            /**
                * <p>A list of the resource-owning account IDs that the caller's account can use to share their user access details (user ARNs). The user ARNs can be logged in the resource owner's CloudTrail log.</p>
                *
                * 	        <p>You may want to specify this property when you are in a high-trust boundary, such as the same team or company. </p>
                */
            TrustedResourceOwners?: string[];
            /**
                * <p>Whether to allow Amazon EMR clusters to access data managed by Lake Formation. </p>
                *
                *          <p>If true, you allow Amazon EMR clusters to access data in Amazon S3 locations that are registered with Lake Formation.</p>
                *
                *          <p>If false or null, no Amazon EMR clusters will be able to access data in Amazon S3 locations that are registered with Lake Formation.</p>
                *
                *          <p>For more information, see <a href="https://docs-aws.amazon.com/lake-formation/latest/dg/getting-started-setup.html#emr-switch">(Optional) Allow Data Filtering on Amazon EMR</a>.</p>
                */
            AllowExternalDataFiltering?: boolean;
            /**
                * <p>A list of the account IDs of Amazon Web Services accounts with Amazon EMR clusters that are to perform data filtering.></p>
                */
            ExternalDataFilteringAllowList?: DataLakePrincipal[];
            /**
                * <p>Lake Formation relies on a privileged process secured by Amazon EMR or the third party integrator to tag the user's role while assuming it. Lake Formation will publish the acceptable key-value pair, for example key = "LakeFormationTrustedCaller" and value = "TRUE" and the third party integrator must properly tag the temporary security credentials that will be used to call Lake Formation's administrative APIs.</p>
                */
            AuthorizedSessionTagValueList?: string[];
    }
    export namespace DataLakeSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataLakeSettings) => any;
    }
    export interface GetDataLakeSettingsResponse {
            /**
                * <p>A structure representing a list of Lake Formation principals designated as data lake administrators.</p>
                */
            DataLakeSettings?: DataLakeSettings;
    }
    export namespace GetDataLakeSettingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDataLakeSettingsResponse) => any;
    }
    export interface GetEffectivePermissionsForPathRequest {
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            CatalogId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the resource for which you want to get permissions.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>A continuation token, if this is not the first call to retrieve this list.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
    }
    export namespace GetEffectivePermissionsForPathRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEffectivePermissionsForPathRequest) => any;
    }
    /**
        * <p>A structure containing the additional details to be returned in the <code>AdditionalDetails</code> attribute of <code>PrincipalResourcePermissions</code>.</p>
        *
        *          <p>If a catalog resource is shared through Resource Access Manager (RAM), then there will exist a corresponding RAM resource share ARN.</p>
        */
    export interface DetailsMap {
            /**
                * <p>A resource share ARN for a catalog resource shared through RAM.</p>
                */
            ResourceShare?: string[];
    }
    export namespace DetailsMap {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetailsMap) => any;
    }
    /**
        * <p>The permissions granted or revoked on a resource.</p>
        */
    export interface PrincipalResourcePermissions {
            /**
                * <p>The Data Lake principal to be granted or revoked permissions.</p>
                */
            Principal?: DataLakePrincipal;
            /**
                * <p>The resource where permissions are to be granted or revoked.</p>
                */
            Resource?: Resource;
            /**
                * <p>The permissions to be granted or revoked on the resource.</p>
                */
            Permissions?: (Permission | string)[];
            /**
                * <p>Indicates whether to grant the ability to grant permissions (as a subset of permissions granted).</p>
                */
            PermissionsWithGrantOption?: (Permission | string)[];
            /**
                * <p>This attribute can be used to return any additional details of <code>PrincipalResourcePermissions</code>. Currently returns only as a RAM resource share ARN.</p>
                */
            AdditionalDetails?: DetailsMap;
    }
    export namespace PrincipalResourcePermissions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PrincipalResourcePermissions) => any;
    }
    export interface GetEffectivePermissionsForPathResponse {
            /**
                * <p>A list of the permissions for the specified table or database resource located at the path in Amazon S3.</p>
                */
            Permissions?: PrincipalResourcePermissions[];
            /**
                * <p>A continuation token, if this is not the first call to retrieve this list.</p>
                */
            NextToken?: string;
    }
    export namespace GetEffectivePermissionsForPathResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEffectivePermissionsForPathResponse) => any;
    }
    export interface GetLFTagRequest {
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            CatalogId?: string;
            /**
                * <p>The key-name for the LF-tag.</p>
                */
            TagKey: string | undefined;
    }
    export namespace GetLFTagRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLFTagRequest) => any;
    }
    export interface GetLFTagResponse {
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            CatalogId?: string;
            /**
                * <p>The key-name for the LF-tag.</p>
                */
            TagKey?: string;
            /**
                * <p>A list of possible values an attribute can take.</p>
                */
            TagValues?: string[];
    }
    export namespace GetLFTagResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLFTagResponse) => any;
    }
    export interface GetQueryStateRequest {
            /**
                * <p>The ID of the plan query operation.</p>
                */
            QueryId: string | undefined;
    }
    export namespace GetQueryStateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetQueryStateRequest) => any;
    }
    export enum QueryStateString {
            ERROR = "ERROR",
            EXPIRED = "EXPIRED",
            FINISHED = "FINISHED",
            PENDING = "PENDING",
            WORKUNITS_AVAILABLE = "WORKUNITS_AVAILABLE"
    }
    /**
        * <p>A structure for the output.</p>
        */
    export interface GetQueryStateResponse {
            /**
                * <p>An error message when the operation fails.</p>
                */
            Error?: string;
            /**
                * <p>The state of a query previously submitted. The possible states are:</p>
                *
                * 	        <ul>
                *             <li>
                *                <p>PENDING: the query is pending.</p>
                *             </li>
                *             <li>
                *                <p>WORKUNITS_AVAILABLE: some work units are ready for retrieval and execution.</p>
                *             </li>
                *             <li>
                *                <p>FINISHED: the query planning finished successfully, and all work units are ready for retrieval and execution.</p>
                *             </li>
                *             <li>
                *                <p>ERROR: an error occurred with the query, such as an invalid query ID or a backend error.</p>
                *             </li>
                *          </ul>
                */
            State: QueryStateString | string | undefined;
    }
    export namespace GetQueryStateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetQueryStateResponse) => any;
    }
    /**
        * <p>Contains details about an error where the query request expired.</p>
        */
    export class ExpiredException extends __BaseException {
            readonly name: "ExpiredException";
            readonly $fault: "client";
            /**
                * <p>A message describing the error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ExpiredException, __BaseException>);
    }
    export interface GetQueryStatisticsRequest {
            /**
                * <p>The ID of the plan query operation.</p>
                */
            QueryId: string | undefined;
    }
    export namespace GetQueryStatisticsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetQueryStatisticsRequest) => any;
    }
    /**
        * <p>Statistics related to the processing of a query statement.</p>
        */
    export interface ExecutionStatistics {
            /**
                * <p>The average time the request took to be executed.</p>
                */
            AverageExecutionTimeMillis?: number;
            /**
                * <p>The amount of data that was scanned in bytes.</p>
                */
            DataScannedBytes?: number;
            /**
                * <p>The number of work units executed.</p>
                */
            WorkUnitsExecutedCount?: number;
    }
    export namespace ExecutionStatistics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExecutionStatistics) => any;
    }
    /**
        * <p>Statistics related to the processing of a query statement.</p>
        */
    export interface PlanningStatistics {
            /**
                * <p>An estimate of the data that was scanned in bytes.</p>
                */
            EstimatedDataToScanBytes?: number;
            /**
                * <p>The time that it took to process the request.</p>
                */
            PlanningTimeMillis?: number;
            /**
                * <p>The time the request was in queue to be processed.</p>
                */
            QueueTimeMillis?: number;
            /**
                * <p>The number of work units generated.</p>
                */
            WorkUnitsGeneratedCount?: number;
    }
    export namespace PlanningStatistics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PlanningStatistics) => any;
    }
    export interface GetQueryStatisticsResponse {
            /**
                * <p>An <code>ExecutionStatistics</code> structure containing execution statistics.</p>
                */
            ExecutionStatistics?: ExecutionStatistics;
            /**
                * <p>A <code>PlanningStatistics</code> structure containing query planning statistics.</p>
                */
            PlanningStatistics?: PlanningStatistics;
            /**
                * <p>The time that the query was submitted.</p>
                */
            QuerySubmissionTime?: Date;
    }
    export namespace GetQueryStatisticsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetQueryStatisticsResponse) => any;
    }
    /**
        * <p>Contains details about an error related to statistics not being ready.</p>
        */
    export class StatisticsNotReadyYetException extends __BaseException {
            readonly name: "StatisticsNotReadyYetException";
            readonly $fault: "client";
            /**
                * <p>A message describing the error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<StatisticsNotReadyYetException, __BaseException>);
    }
    /**
        * <p>Contains details about an error where the query request was throttled.</p>
        */
    export class ThrottledException extends __BaseException {
            readonly name: "ThrottledException";
            readonly $fault: "client";
            $retryable: {
                    throttling: boolean;
            };
            /**
                * <p>A message describing the error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottledException, __BaseException>);
    }
    export interface GetResourceLFTagsRequest {
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            CatalogId?: string;
            /**
                * <p>The database, table, or column resource for which you want to return LF-tags.</p>
                */
            Resource: Resource | undefined;
            /**
                * <p>Indicates whether to show the assigned LF-tags.</p>
                */
            ShowAssignedLFTags?: boolean;
    }
    export namespace GetResourceLFTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResourceLFTagsRequest) => any;
    }
    /**
        * <p>A structure containing the name of a column resource and the LF-tags attached to it.</p>
        */
    export interface ColumnLFTag {
            /**
                * <p>The name of a column resource.</p>
                */
            Name?: string;
            /**
                * <p>The LF-tags attached to a column resource.</p>
                */
            LFTags?: LFTagPair[];
    }
    export namespace ColumnLFTag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ColumnLFTag) => any;
    }
    export interface GetResourceLFTagsResponse {
            /**
                * <p>A list of LF-tags applied to a database resource.</p>
                */
            LFTagOnDatabase?: LFTagPair[];
            /**
                * <p>A list of LF-tags applied to a table resource.</p>
                */
            LFTagsOnTable?: LFTagPair[];
            /**
                * <p>A list of LF-tags applied to a column resource.</p>
                */
            LFTagsOnColumns?: ColumnLFTag[];
    }
    export namespace GetResourceLFTagsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResourceLFTagsResponse) => any;
    }
    /**
        * <p>An encryption operation failed.</p>
        */
    export class GlueEncryptionException extends __BaseException {
            readonly name: "GlueEncryptionException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<GlueEncryptionException, __BaseException>);
    }
    export interface GetTableObjectsRequest {
            /**
                * <p>The catalog containing the governed table. Defaults to the caller’s account.</p>
                */
            CatalogId?: string;
            /**
                * <p>The database containing the governed table.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The governed table for which to retrieve objects.</p>
                */
            TableName: string | undefined;
            /**
                * <p>The transaction ID at which to read the governed table contents. If this transaction has aborted, an error is returned. If not set, defaults to the most recent committed transaction. Cannot be specified along with <code>QueryAsOfTime</code>.</p>
                */
            TransactionId?: string;
            /**
                * <p>The time as of when to read the governed table contents. If not set, the most recent transaction commit time is used. Cannot be specified along with <code>TransactionId</code>.</p>
                */
            QueryAsOfTime?: Date;
            /**
                * <p>A predicate to filter the objects returned based on the partition keys defined in the governed table.</p>
                * 	        <ul>
                *             <li>
                *                <p>The comparison operators supported are: =, >, <, >=, <=</p>
                *             </li>
                *             <li>
                *                <p>The logical operators supported are: AND</p>
                *             </li>
                *             <li>
                *                <p>The data types supported are integer, long, date(yyyy-MM-dd), timestamp(yyyy-MM-dd HH:mm:ssXXX or yyyy-MM-dd HH:mm:ss"), string and decimal.</p>
                *             </li>
                *          </ul>
                */
            PartitionPredicate?: string;
            /**
                * <p>Specifies how many values to return in a page.</p>
                */
            MaxResults?: number;
            /**
                * <p>A continuation token if this is not the first call to retrieve these objects.</p>
                */
            NextToken?: string;
    }
    export namespace GetTableObjectsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTableObjectsRequest) => any;
    }
    /**
        * <p>Specifies the details of a governed table.</p>
        */
    export interface TableObject {
            /**
                * <p>The Amazon S3 location of the object.</p>
                */
            Uri?: string;
            /**
                * <p>The Amazon S3 ETag of the object. Returned by <code>GetTableObjects</code> for validation and used to identify changes to the underlying data.</p>
                */
            ETag?: string;
            /**
                * <p>The size of the Amazon S3 object in bytes.</p>
                */
            Size?: number;
    }
    export namespace TableObject {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TableObject) => any;
    }
    /**
        * <p>A structure containing a list of partition values and table objects.</p>
        */
    export interface PartitionObjects {
            /**
                * <p>A list of partition values.</p>
                */
            PartitionValues?: string[];
            /**
                * <p>A list of table objects</p>
                */
            Objects?: TableObject[];
    }
    export namespace PartitionObjects {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PartitionObjects) => any;
    }
    export interface GetTableObjectsResponse {
            /**
                * <p>A list of objects organized by partition keys.</p>
                */
            Objects?: PartitionObjects[];
            /**
                * <p>A continuation token indicating whether additional data is available.</p>
                */
            NextToken?: string;
    }
    export namespace GetTableObjectsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTableObjectsResponse) => any;
    }
    /**
        * <p>Contains a list of values defining partitions.</p>
        */
    export interface PartitionValueList {
            /**
                * <p>The list of partition values.</p>
                */
            Values: string[] | undefined;
    }
    export namespace PartitionValueList {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PartitionValueList) => any;
    }
    export enum PermissionType {
            CELL_FILTER_PERMISSION = "CELL_FILTER_PERMISSION",
            COLUMN_PERMISSION = "COLUMN_PERMISSION"
    }
    export interface GetTemporaryGluePartitionCredentialsRequest {
            /**
                * <p>The ARN of the partitions' table.</p>
                */
            TableArn: string | undefined;
            /**
                * <p>A list of partition values identifying a single partition.</p>
                */
            Partition: PartitionValueList | undefined;
            /**
                * <p>Filters the request based on the user having been granted a list of specified permissions on the requested resource(s).</p>
                */
            Permissions?: (Permission | string)[];
            /**
                * <p>The time period, between 900 and 21,600 seconds, for the timeout of the temporary credentials.</p>
                */
            DurationSeconds?: number;
            /**
                * <p>A structure representing context to access a resource (column names, query ID, etc).</p>
                */
            AuditContext?: AuditContext;
            /**
                * <p>A list of supported permission types for the partition. Valid values are <code>COLUMN_PERMISSION</code> and <code>CELL_FILTER_PERMISSION</code>.</p>
                */
            SupportedPermissionTypes: (PermissionType | string)[] | undefined;
    }
    export namespace GetTemporaryGluePartitionCredentialsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTemporaryGluePartitionCredentialsRequest) => any;
    }
    export interface GetTemporaryGluePartitionCredentialsResponse {
            /**
                * <p>The access key ID for the temporary credentials.</p>
                */
            AccessKeyId?: string;
            /**
                * <p>The secret key for the temporary credentials.</p>
                */
            SecretAccessKey?: string;
            /**
                * <p>The session token for the temporary credentials.</p>
                */
            SessionToken?: string;
            /**
                * <p>The date and time when the temporary credentials expire.</p>
                */
            Expiration?: Date;
    }
    export namespace GetTemporaryGluePartitionCredentialsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTemporaryGluePartitionCredentialsResponse) => any;
    }
    /**
        * <p>The engine does not support filtering data based on the enforced permissions. For example, if you call the <code>GetTemporaryGlueTableCredentials</code> operation with <code>SupportedPermissionType</code> equal to <code>ColumnPermission</code>, but cell-level permissions exist on the table, this exception is thrown.</p>
        */
    export class PermissionTypeMismatchException extends __BaseException {
            readonly name: "PermissionTypeMismatchException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PermissionTypeMismatchException, __BaseException>);
    }
    export interface GetTemporaryGlueTableCredentialsRequest {
            /**
                * <p>The ARN identifying a table in the Data Catalog for the temporary credentials request.</p>
                */
            TableArn: string | undefined;
            /**
                * <p>Filters the request based on the user having been granted a list of specified permissions on the requested resource(s).</p>
                */
            Permissions?: (Permission | string)[];
            /**
                * <p>The time period, between 900 and 21,600 seconds, for the timeout of the temporary credentials.</p>
                */
            DurationSeconds?: number;
            /**
                * <p>A structure representing context to access a resource (column names, query ID, etc).</p>
                */
            AuditContext?: AuditContext;
            /**
                * <p>A list of supported permission types for the table. Valid values are <code>COLUMN_PERMISSION</code> and <code>CELL_FILTER_PERMISSION</code>.</p>
                */
            SupportedPermissionTypes: (PermissionType | string)[] | undefined;
    }
    export namespace GetTemporaryGlueTableCredentialsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTemporaryGlueTableCredentialsRequest) => any;
    }
    export interface GetTemporaryGlueTableCredentialsResponse {
            /**
                * <p>The access key ID for the temporary credentials.</p>
                */
            AccessKeyId?: string;
            /**
                * <p>The secret key for the temporary credentials.</p>
                */
            SecretAccessKey?: string;
            /**
                * <p>The session token for the temporary credentials.</p>
                */
            SessionToken?: string;
            /**
                * <p>The date and time when the temporary credentials expire.</p>
                */
            Expiration?: Date;
    }
    export namespace GetTemporaryGlueTableCredentialsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTemporaryGlueTableCredentialsResponse) => any;
    }
    export interface GetWorkUnitResultsRequest {
            /**
                * <p>The ID of the plan query operation for which to get results.</p>
                */
            QueryId: string | undefined;
            /**
                * <p>The work unit ID for which to get results. Value generated by enumerating <code>WorkUnitIdMin</code> to <code>WorkUnitIdMax</code> (inclusive) from the <code>WorkUnitRange</code> in the output of <code>GetWorkUnits</code>.</p>
                */
            WorkUnitId: number | undefined;
            /**
                * <p>A work token used to query the execution service. Token output from <code>GetWorkUnits</code>.</p>
                */
            WorkUnitToken: string | undefined;
    }
    export namespace GetWorkUnitResultsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWorkUnitResultsRequest) => any;
    }
    /**
        * <p>A structure for the output.</p>
        */
    export interface GetWorkUnitResultsResponse {
            /**
                * <p>Rows returned from the <code>GetWorkUnitResults</code> operation as a stream of Apache Arrow v1.0 messages.</p>
                */
            ResultStream?: Readable | ReadableStream | Blob;
    }
    export namespace GetWorkUnitResultsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWorkUnitResultsResponse) => any;
    }
    export interface GetWorkUnitsRequest {
            /**
                * <p>A continuation token, if this is a continuation call.</p>
                */
            NextToken?: string;
            /**
                * <p>The size of each page to get in the Amazon Web Services service call. This does not affect the number of items returned in the command's output. Setting a smaller page size results in more calls to the Amazon Web Services service, retrieving fewer items in each call. This can help prevent the Amazon Web Services service calls from timing out.</p>
                */
            PageSize?: number;
            /**
                * <p>The ID of the plan query operation.</p>
                */
            QueryId: string | undefined;
    }
    export namespace GetWorkUnitsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWorkUnitsRequest) => any;
    }
    /**
        * <p>Defines the valid range of work unit IDs for querying the execution service.</p>
        */
    export interface WorkUnitRange {
            /**
                * <p>Defines the maximum work unit ID in the range. The maximum value is inclusive.</p>
                */
            WorkUnitIdMax: number | undefined;
            /**
                * <p>Defines the minimum work unit ID in the range.</p>
                */
            WorkUnitIdMin: number | undefined;
            /**
                * <p>A work token used to query the execution service.</p>
                */
            WorkUnitToken: string | undefined;
    }
    export namespace WorkUnitRange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkUnitRange) => any;
    }
    /**
        * <p>A structure for the output.</p>
        */
    export interface GetWorkUnitsResponse {
            /**
                * <p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>
                */
            NextToken?: string;
            /**
                * <p>The ID of the plan query operation.</p>
                */
            QueryId: string | undefined;
            /**
                * <p>A <code>WorkUnitRangeList</code> object that specifies the valid range of work unit IDs for querying the execution service.</p>
                */
            WorkUnitRanges: WorkUnitRange[] | undefined;
    }
    export namespace GetWorkUnitsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWorkUnitsResponse) => any;
    }
    /**
        * <p>Contains details about an error related to work units not being ready.</p>
        */
    export class WorkUnitsNotReadyYetException extends __BaseException {
            readonly name: "WorkUnitsNotReadyYetException";
            readonly $fault: "client";
            /**
                * <p>A message describing the error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<WorkUnitsNotReadyYetException, __BaseException>);
    }
    export interface GrantPermissionsRequest {
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            CatalogId?: string;
            /**
                * <p>The principal to be granted the permissions on the resource. Supported principals are IAM users or IAM roles, and they are defined by their principal type and their ARN.</p>
                * 	        <p>Note that if you define a resource with a particular ARN, then later delete, and recreate a resource with that same ARN, the resource maintains the permissions already granted. </p>
                */
            Principal: DataLakePrincipal | undefined;
            /**
                * <p>The resource to which permissions are to be granted. Resources in Lake Formation are the Data Catalog, databases, and tables.</p>
                */
            Resource: Resource | undefined;
            /**
                * <p>The permissions granted to the principal on the resource. Lake Formation defines privileges to grant and revoke access to metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3. Lake Formation requires that each principal be authorized to perform a specific task on Lake Formation resources. </p>
                */
            Permissions: (Permission | string)[] | undefined;
            /**
                * <p>Indicates a list of the granted permissions that the principal may pass to other users. These permissions may only be a subset of the permissions granted in the <code>Privileges</code>.</p>
                */
            PermissionsWithGrantOption?: (Permission | string)[];
    }
    export namespace GrantPermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GrantPermissionsRequest) => any;
    }
    export interface GrantPermissionsResponse {
    }
    export namespace GrantPermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GrantPermissionsResponse) => any;
    }
    export interface ListDataCellsFilterRequest {
            /**
                * <p>A table in the Glue Data Catalog.</p>
                */
            Table?: TableResource;
            /**
                * <p>A continuation token, if this is a continuation call.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum size of the response.</p>
                */
            MaxResults?: number;
    }
    export namespace ListDataCellsFilterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDataCellsFilterRequest) => any;
    }
    export interface ListDataCellsFilterResponse {
            /**
                * <p>A list of <code>DataCellFilter</code> structures.</p>
                */
            DataCellsFilters?: DataCellsFilter[];
            /**
                * <p>A continuation token, if not all requested data cell filters have been returned.</p>
                */
            NextToken?: string;
    }
    export namespace ListDataCellsFilterResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDataCellsFilterResponse) => any;
    }
    export enum ResourceShareType {
            ALL = "ALL",
            FOREIGN = "FOREIGN"
    }
    export interface ListLFTagsRequest {
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            CatalogId?: string;
            /**
                * <p>If resource share type is <code>ALL</code>, returns both in-account LF-tags and shared LF-tags that the requester has permission to view. If resource share type is <code>FOREIGN</code>, returns all share LF-tags that the requester can view. If no resource share type is passed, lists LF-tags in the given catalog ID that the requester has permission to view.</p>
                */
            ResourceShareType?: ResourceShareType | string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>A continuation token, if this is not the first call to retrieve this list.</p>
                */
            NextToken?: string;
    }
    export namespace ListLFTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLFTagsRequest) => any;
    }
    export interface ListLFTagsResponse {
            /**
                * <p>A list of LF-tags that the requested has permission to view.</p>
                */
            LFTags?: LFTagPair[];
            /**
                * <p>A continuation token, present if the current list segment is not the last.</p>
                */
            NextToken?: string;
    }
    export namespace ListLFTagsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLFTagsResponse) => any;
    }
    export enum DataLakeResourceType {
            CATALOG = "CATALOG",
            DATABASE = "DATABASE",
            DATA_LOCATION = "DATA_LOCATION",
            LF_TAG = "LF_TAG",
            LF_TAG_POLICY = "LF_TAG_POLICY",
            LF_TAG_POLICY_DATABASE = "LF_TAG_POLICY_DATABASE",
            LF_TAG_POLICY_TABLE = "LF_TAG_POLICY_TABLE",
            TABLE = "TABLE"
    }
    export interface ListPermissionsRequest {
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            CatalogId?: string;
            /**
                * <p>Specifies a principal to filter the permissions returned.</p>
                */
            Principal?: DataLakePrincipal;
            /**
                * <p>Specifies a resource type to filter the permissions returned.</p>
                */
            ResourceType?: DataLakeResourceType | string;
            /**
                * <p>A resource where you will get a list of the principal permissions.</p>
                *          <p>This operation does not support getting privileges on a table with columns. Instead, call this operation on the table, and the operation returns the table and the table w columns.</p>
                */
            Resource?: Resource;
            /**
                * <p>A continuation token, if this is not the first call to retrieve this list.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>Indicates that related permissions should be included in the results.</p>
                */
            IncludeRelated?: string;
    }
    export namespace ListPermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPermissionsRequest) => any;
    }
    export interface ListPermissionsResponse {
            /**
                * <p>A list of principals and their permissions on the resource for the specified principal and resource types.</p>
                */
            PrincipalResourcePermissions?: PrincipalResourcePermissions[];
            /**
                * <p>A continuation token, if this is not the first call to retrieve this list.</p>
                */
            NextToken?: string;
    }
    export namespace ListPermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPermissionsResponse) => any;
    }
    export enum ComparisonOperator {
            BEGINS_WITH = "BEGINS_WITH",
            BETWEEN = "BETWEEN",
            CONTAINS = "CONTAINS",
            EQ = "EQ",
            GE = "GE",
            GT = "GT",
            IN = "IN",
            LE = "LE",
            LT = "LT",
            NE = "NE",
            NOT_CONTAINS = "NOT_CONTAINS"
    }
    export enum FieldNameString {
            LAST_MODIFIED = "LAST_MODIFIED",
            RESOURCE_ARN = "RESOURCE_ARN",
            ROLE_ARN = "ROLE_ARN"
    }
    /**
        * <p>This structure describes the filtering of columns in a table based on a filter condition.</p>
        */
    export interface FilterCondition {
            /**
                * <p>The field to filter in the filter condition.</p>
                */
            Field?: FieldNameString | string;
            /**
                * <p>The comparison operator used in the filter condition.</p>
                */
            ComparisonOperator?: ComparisonOperator | string;
            /**
                * <p>A string with values used in evaluating the filter condition.</p>
                */
            StringValueList?: string[];
    }
    export namespace FilterCondition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FilterCondition) => any;
    }
    export interface ListResourcesRequest {
            /**
                * <p>Any applicable row-level and/or column-level filtering conditions for the resources.</p>
                */
            FilterConditionList?: FilterCondition[];
            /**
                * <p>The maximum number of resource results.</p>
                */
            MaxResults?: number;
            /**
                * <p>A continuation token, if this is not the first call to retrieve these resources.</p>
                */
            NextToken?: string;
    }
    export namespace ListResourcesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListResourcesRequest) => any;
    }
    export interface ListResourcesResponse {
            /**
                * <p>A summary of the data lake resources.</p>
                */
            ResourceInfoList?: ResourceInfo[];
            /**
                * <p>A continuation token, if this is not the first call to retrieve these resources.</p>
                */
            NextToken?: string;
    }
    export namespace ListResourcesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListResourcesResponse) => any;
    }
    export enum OptimizerType {
            COMPACTION = "COMPACTION",
            GARBAGE_COLLECTION = "GARBAGE_COLLECTION",
            GENERIC = "ALL"
    }
    export interface ListTableStorageOptimizersRequest {
            /**
                * <p>The Catalog ID of the table.</p>
                */
            CatalogId?: string;
            /**
                * <p>Name of the database where the table is present.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>Name of the table.</p>
                */
            TableName: string | undefined;
            /**
                * <p>The specific type of storage optimizers to list. The supported value is <code>compaction</code>.</p>
                */
            StorageOptimizerType?: OptimizerType | string;
            /**
                * <p>The number of storage optimizers to return on each call.</p>
                */
            MaxResults?: number;
            /**
                * <p>A continuation token, if this is a continuation call.</p>
                */
            NextToken?: string;
    }
    export namespace ListTableStorageOptimizersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTableStorageOptimizersRequest) => any;
    }
    /**
        * <p>A structure describing the configuration and details of a storage optimizer.</p>
        */
    export interface StorageOptimizer {
            /**
                * <p>The specific type of storage optimizer. The supported value is <code>compaction</code>.</p>
                */
            StorageOptimizerType?: OptimizerType | string;
            /**
                * <p>A map of the storage optimizer configuration. Currently contains only one key-value pair: <code>is_enabled</code> indicates true or false for acceleration.</p>
                */
            Config?: Record<string, string>;
            /**
                * <p>A message that contains information about any error (if present).</p>
                *
                * 	        <p>When an acceleration result has an enabled status, the error message is empty.</p>
                * 	        <p>When an acceleration result has a disabled status, the message describes an error or simply indicates "disabled by the user".</p>
                */
            ErrorMessage?: string;
            /**
                * <p>A message that contains information about any warnings (if present).</p>
                */
            Warnings?: string;
            /**
                * <p>When an acceleration result has an enabled status, contains the details of the last job run.</p>
                */
            LastRunDetails?: string;
    }
    export namespace StorageOptimizer {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StorageOptimizer) => any;
    }
    export interface ListTableStorageOptimizersResponse {
            /**
                * <p>A list of the storage optimizers associated with a table.</p>
                */
            StorageOptimizerList?: StorageOptimizer[];
            /**
                * <p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>
                */
            NextToken?: string;
    }
    export namespace ListTableStorageOptimizersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTableStorageOptimizersResponse) => any;
    }
    export enum TransactionStatusFilter {
            ABORTED = "ABORTED",
            ACTIVE = "ACTIVE",
            ALL = "ALL",
            COMMITTED = "COMMITTED",
            COMPLETED = "COMPLETED"
    }
    export interface ListTransactionsRequest {
            /**
                * <p>The catalog for which to list transactions. Defaults to the account ID of the caller.</p>
                */
            CatalogId?: string;
            /**
                * <p> A filter indicating the status of transactions to return. Options are ALL | COMPLETED | COMMITTED | ABORTED | ACTIVE. The default is <code>ALL</code>.</p>
                */
            StatusFilter?: TransactionStatusFilter | string;
            /**
                * <p>The maximum number of transactions to return in a single call.</p>
                */
            MaxResults?: number;
            /**
                * <p>A continuation token if this is not the first call to retrieve transactions.</p>
                */
            NextToken?: string;
    }
    export namespace ListTransactionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTransactionsRequest) => any;
    }
    export interface ListTransactionsResponse {
            /**
                * <p>A list of transactions. The record for each transaction is a <code>TransactionDescription</code> object.</p>
                */
            Transactions?: TransactionDescription[];
            /**
                * <p>A continuation token indicating whether additional data is available.</p>
                */
            NextToken?: string;
    }
    export namespace ListTransactionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTransactionsResponse) => any;
    }
    export interface PutDataLakeSettingsRequest {
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            CatalogId?: string;
            /**
                * <p>A structure representing a list of Lake Formation principals designated as data lake administrators.</p>
                */
            DataLakeSettings: DataLakeSettings | undefined;
    }
    export namespace PutDataLakeSettingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutDataLakeSettingsRequest) => any;
    }
    export interface PutDataLakeSettingsResponse {
    }
    export namespace PutDataLakeSettingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutDataLakeSettingsResponse) => any;
    }
    export interface RegisterResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource that you want to register.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>Designates an Identity and Access Management (IAM) service-linked role by registering this role with the Data Catalog. A service-linked role is a unique type of IAM role that is linked directly to Lake Formation.</p>
                *
                *          <p>For more information, see <a href="https://docs-aws.amazon.com/lake-formation/latest/dg/service-linked-roles.html">Using Service-Linked Roles for Lake Formation</a>.</p>
                */
            UseServiceLinkedRole?: boolean;
            /**
                * <p>The identifier for the role that registers the resource.</p>
                */
            RoleArn?: string;
    }
    export namespace RegisterResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterResourceRequest) => any;
    }
    export interface RegisterResourceResponse {
    }
    export namespace RegisterResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterResourceResponse) => any;
    }
    export interface RemoveLFTagsFromResourceRequest {
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            CatalogId?: string;
            /**
                * <p>The database, table, or column resource where you want to remove an LF-tag.</p>
                */
            Resource: Resource | undefined;
            /**
                * <p>The LF-tags to be removed from the resource.</p>
                */
            LFTags: LFTagPair[] | undefined;
    }
    export namespace RemoveLFTagsFromResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveLFTagsFromResourceRequest) => any;
    }
    export interface RemoveLFTagsFromResourceResponse {
            /**
                * <p>A list of failures to untag a resource.</p>
                */
            Failures?: LFTagError[];
    }
    export namespace RemoveLFTagsFromResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveLFTagsFromResourceResponse) => any;
    }
    export interface RevokePermissionsRequest {
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            CatalogId?: string;
            /**
                * <p>The principal to be revoked permissions on the resource.</p>
                */
            Principal: DataLakePrincipal | undefined;
            /**
                * <p>The resource to which permissions are to be revoked.</p>
                */
            Resource: Resource | undefined;
            /**
                * <p>The permissions revoked to the principal on the resource. For information about permissions, see <a href="https://docs-aws.amazon.com/lake-formation/latest/dg/security-data-access.html">Security
                *       and Access Control to Metadata and Data</a>.</p>
                */
            Permissions: (Permission | string)[] | undefined;
            /**
                * <p>Indicates a list of permissions for which to revoke the grant option allowing the principal to pass permissions to other principals.</p>
                */
            PermissionsWithGrantOption?: (Permission | string)[];
    }
    export namespace RevokePermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RevokePermissionsRequest) => any;
    }
    export interface RevokePermissionsResponse {
    }
    export namespace RevokePermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RevokePermissionsResponse) => any;
    }
    export interface SearchDatabasesByLFTagsRequest {
            /**
                * <p>A continuation token, if this is not the first call to retrieve this list.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            CatalogId?: string;
            /**
                * <p>A list of conditions (<code>LFTag</code> structures) to search for in database resources.</p>
                */
            Expression: LFTag[] | undefined;
    }
    export namespace SearchDatabasesByLFTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchDatabasesByLFTagsRequest) => any;
    }
    /**
        * <p>A structure describing a database resource with LF-tags.</p>
        */
    export interface TaggedDatabase {
            /**
                * <p>A database that has LF-tags attached to it.</p>
                */
            Database?: DatabaseResource;
            /**
                * <p>A list of LF-tags attached to the database.</p>
                */
            LFTags?: LFTagPair[];
    }
    export namespace TaggedDatabase {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TaggedDatabase) => any;
    }
    export interface SearchDatabasesByLFTagsResponse {
            /**
                * <p>A continuation token, present if the current list segment is not the last.</p>
                */
            NextToken?: string;
            /**
                * <p>A list of databases that meet the LF-tag conditions.</p>
                */
            DatabaseList?: TaggedDatabase[];
    }
    export namespace SearchDatabasesByLFTagsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchDatabasesByLFTagsResponse) => any;
    }
    export interface SearchTablesByLFTagsRequest {
            /**
                * <p>A continuation token, if this is not the first call to retrieve this list.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            CatalogId?: string;
            /**
                * <p>A list of conditions (<code>LFTag</code> structures) to search for in table resources.</p>
                */
            Expression: LFTag[] | undefined;
    }
    export namespace SearchTablesByLFTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchTablesByLFTagsRequest) => any;
    }
    /**
        * <p>A structure describing a table resource with LF-tags.</p>
        */
    export interface TaggedTable {
            /**
                * <p>A table that has LF-tags attached to it.</p>
                */
            Table?: TableResource;
            /**
                * <p>A list of LF-tags attached to the database where the table resides.</p>
                */
            LFTagOnDatabase?: LFTagPair[];
            /**
                * <p>A list of LF-tags attached to the table.</p>
                */
            LFTagsOnTable?: LFTagPair[];
            /**
                * <p>A list of LF-tags attached to columns in the table.</p>
                */
            LFTagsOnColumns?: ColumnLFTag[];
    }
    export namespace TaggedTable {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TaggedTable) => any;
    }
    export interface SearchTablesByLFTagsResponse {
            /**
                * <p>A continuation token, present if the current list segment is not the last.</p>
                */
            NextToken?: string;
            /**
                * <p>A list of tables that meet the LF-tag conditions.</p>
                */
            TableList?: TaggedTable[];
    }
    export namespace SearchTablesByLFTagsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchTablesByLFTagsResponse) => any;
    }
    /**
        * <p>A structure containing information about the query plan.</p>
        */
    export interface QueryPlanningContext {
            /**
                * <p>The ID of the Data Catalog where the partition in question resides. If none is provided, the Amazon Web Services account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The database containing the table.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The time as of when to read the table contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with <code>TransactionId</code>.</p>
                */
            QueryAsOfTime?: Date;
            /**
                * <p>A map consisting of key-value pairs.</p>
                */
            QueryParameters?: Record<string, string>;
            /**
                * <p>The transaction ID at which to read the table contents. If this transaction is not committed, the read will be treated as part of that transaction and will see its writes. If this transaction has aborted, an error will be returned. If not set, defaults to the most recent committed transaction. Cannot be specified along with <code>QueryAsOfTime</code>.</p>
                */
            TransactionId?: string;
    }
    export namespace QueryPlanningContext {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryPlanningContext) => any;
    }
    export interface StartQueryPlanningRequest {
            /**
                * <p>A structure containing information about the query plan.</p>
                */
            QueryPlanningContext: QueryPlanningContext | undefined;
            /**
                * <p>A PartiQL query statement used as an input to the planner service.</p>
                */
            QueryString: string | undefined;
    }
    export namespace StartQueryPlanningRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartQueryPlanningRequest) => any;
    }
    /**
        * <p>A structure for the output.</p>
        */
    export interface StartQueryPlanningResponse {
            /**
                * <p>The ID of the plan query operation can be used to fetch the actual work unit descriptors that are produced as the result of the operation. The ID is also used to get the query state and as an input to the <code>Execute</code> operation.</p>
                */
            QueryId: string | undefined;
    }
    export namespace StartQueryPlanningResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartQueryPlanningResponse) => any;
    }
    export enum TransactionType {
            READ_AND_WRITE = "READ_AND_WRITE",
            READ_ONLY = "READ_ONLY"
    }
    export interface StartTransactionRequest {
            /**
                * <p>Indicates whether this transaction should be read only or read and write. Writes made using a read-only transaction ID will be rejected. Read-only transactions do not need to be committed. </p>
                */
            TransactionType?: TransactionType | string;
    }
    export namespace StartTransactionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartTransactionRequest) => any;
    }
    export interface StartTransactionResponse {
            /**
                * <p>An opaque identifier for the transaction.</p>
                */
            TransactionId?: string;
    }
    export namespace StartTransactionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartTransactionResponse) => any;
    }
    export interface UpdateLFTagRequest {
            /**
                * <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
                */
            CatalogId?: string;
            /**
                * <p>The key-name for the LF-tag for which to add or delete values.</p>
                */
            TagKey: string | undefined;
            /**
                * <p>A list of LF-tag values to delete from the LF-tag.</p>
                */
            TagValuesToDelete?: string[];
            /**
                * <p>A list of LF-tag values to add from the LF-tag.</p>
                */
            TagValuesToAdd?: string[];
    }
    export namespace UpdateLFTagRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLFTagRequest) => any;
    }
    export interface UpdateLFTagResponse {
    }
    export namespace UpdateLFTagResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLFTagResponse) => any;
    }
    export interface UpdateResourceRequest {
            /**
                * <p>The new role to use for the given resource registered in Lake Formation.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>The resource ARN.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace UpdateResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateResourceRequest) => any;
    }
    export interface UpdateResourceResponse {
    }
    export namespace UpdateResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateResourceResponse) => any;
    }
    /**
        * <p>An object to delete from the governed table.</p>
        */
    export interface DeleteObjectInput {
            /**
                * <p>The Amazon S3 location of the object to delete.</p>
                */
            Uri: string | undefined;
            /**
                * <p>The Amazon S3 ETag of the object. Returned by <code>GetTableObjects</code> for validation and used to identify changes to the underlying data.</p>
                */
            ETag?: string;
            /**
                * <p>A list of partition values for the object. A value must be specified for each partition key associated with the governed table.</p>
                */
            PartitionValues?: string[];
    }
    export namespace DeleteObjectInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteObjectInput) => any;
    }
    /**
        * <p>Defines an object to add to or delete from a governed table.</p>
        */
    export interface WriteOperation {
            /**
                * <p>A new object to add to the governed table.</p>
                */
            AddObject?: AddObjectInput;
            /**
                * <p>An object to delete from the governed table.</p>
                */
            DeleteObject?: DeleteObjectInput;
    }
    export namespace WriteOperation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WriteOperation) => any;
    }
    export interface UpdateTableObjectsRequest {
            /**
                * <p>The catalog containing the governed table to update. Defaults to the caller’s account ID.</p>
                */
            CatalogId?: string;
            /**
                * <p>The database containing the governed table to update.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The governed table to update.</p>
                */
            TableName: string | undefined;
            /**
                * <p>The transaction at which to do the write.</p>
                */
            TransactionId?: string;
            /**
                * <p>A list of <code>WriteOperation</code> objects that define an object to add to or delete from the manifest for a governed table.</p>
                */
            WriteOperations: WriteOperation[] | undefined;
    }
    export namespace UpdateTableObjectsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTableObjectsRequest) => any;
    }
    export interface UpdateTableObjectsResponse {
    }
    export namespace UpdateTableObjectsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTableObjectsResponse) => any;
    }
    export interface UpdateTableStorageOptimizerRequest {
            /**
                * <p>The Catalog ID of the table.</p>
                */
            CatalogId?: string;
            /**
                * <p>Name of the database where the table is present.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>Name of the table for which to enable the storage optimizer.</p>
                */
            TableName: string | undefined;
            /**
                * <p>Name of the table for which to enable the storage optimizer.</p>
                */
            StorageOptimizerConfig: Record<string, Record<string, string>> | undefined;
    }
    export namespace UpdateTableStorageOptimizerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTableStorageOptimizerRequest) => any;
    }
    export interface UpdateTableStorageOptimizerResponse {
            /**
                * <p>A response indicating the success of failure of the operation.</p>
                */
            Result?: string;
    }
    export namespace UpdateTableStorageOptimizerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTableStorageOptimizerResponse) => any;
    }
}

declare module '@aws-sdk/client-lakeformation/node_modules/@aws-sdk/client-lakeformation/dist-types/models/LakeFormationServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from LakeFormation service.
        */
    export class LakeFormationServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

