// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-comprehend' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { BatchDetectDominantLanguageCommandInput, BatchDetectDominantLanguageCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/BatchDetectDominantLanguageCommand";
    import { BatchDetectEntitiesCommandInput, BatchDetectEntitiesCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/BatchDetectEntitiesCommand";
    import { BatchDetectKeyPhrasesCommandInput, BatchDetectKeyPhrasesCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/BatchDetectKeyPhrasesCommand";
    import { BatchDetectSentimentCommandInput, BatchDetectSentimentCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/BatchDetectSentimentCommand";
    import { BatchDetectSyntaxCommandInput, BatchDetectSyntaxCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/BatchDetectSyntaxCommand";
    import { ClassifyDocumentCommandInput, ClassifyDocumentCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ClassifyDocumentCommand";
    import { ContainsPiiEntitiesCommandInput, ContainsPiiEntitiesCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ContainsPiiEntitiesCommand";
    import { CreateDocumentClassifierCommandInput, CreateDocumentClassifierCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/CreateDocumentClassifierCommand";
    import { CreateEndpointCommandInput, CreateEndpointCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/CreateEndpointCommand";
    import { CreateEntityRecognizerCommandInput, CreateEntityRecognizerCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/CreateEntityRecognizerCommand";
    import { DeleteDocumentClassifierCommandInput, DeleteDocumentClassifierCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DeleteDocumentClassifierCommand";
    import { DeleteEndpointCommandInput, DeleteEndpointCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DeleteEndpointCommand";
    import { DeleteEntityRecognizerCommandInput, DeleteEntityRecognizerCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DeleteEntityRecognizerCommand";
    import { DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DeleteResourcePolicyCommand";
    import { DescribeDocumentClassificationJobCommandInput, DescribeDocumentClassificationJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeDocumentClassificationJobCommand";
    import { DescribeDocumentClassifierCommandInput, DescribeDocumentClassifierCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeDocumentClassifierCommand";
    import { DescribeDominantLanguageDetectionJobCommandInput, DescribeDominantLanguageDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeDominantLanguageDetectionJobCommand";
    import { DescribeEndpointCommandInput, DescribeEndpointCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeEndpointCommand";
    import { DescribeEntitiesDetectionJobCommandInput, DescribeEntitiesDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeEntitiesDetectionJobCommand";
    import { DescribeEntityRecognizerCommandInput, DescribeEntityRecognizerCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeEntityRecognizerCommand";
    import { DescribeEventsDetectionJobCommandInput, DescribeEventsDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeEventsDetectionJobCommand";
    import { DescribeKeyPhrasesDetectionJobCommandInput, DescribeKeyPhrasesDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeKeyPhrasesDetectionJobCommand";
    import { DescribePiiEntitiesDetectionJobCommandInput, DescribePiiEntitiesDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribePiiEntitiesDetectionJobCommand";
    import { DescribeResourcePolicyCommandInput, DescribeResourcePolicyCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeResourcePolicyCommand";
    import { DescribeSentimentDetectionJobCommandInput, DescribeSentimentDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeSentimentDetectionJobCommand";
    import { DescribeTargetedSentimentDetectionJobCommandInput, DescribeTargetedSentimentDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeTargetedSentimentDetectionJobCommand";
    import { DescribeTopicsDetectionJobCommandInput, DescribeTopicsDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeTopicsDetectionJobCommand";
    import { DetectDominantLanguageCommandInput, DetectDominantLanguageCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DetectDominantLanguageCommand";
    import { DetectEntitiesCommandInput, DetectEntitiesCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DetectEntitiesCommand";
    import { DetectKeyPhrasesCommandInput, DetectKeyPhrasesCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DetectKeyPhrasesCommand";
    import { DetectPiiEntitiesCommandInput, DetectPiiEntitiesCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DetectPiiEntitiesCommand";
    import { DetectSentimentCommandInput, DetectSentimentCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DetectSentimentCommand";
    import { DetectSyntaxCommandInput, DetectSyntaxCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DetectSyntaxCommand";
    import { ImportModelCommandInput, ImportModelCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ImportModelCommand";
    import { ListDocumentClassificationJobsCommandInput, ListDocumentClassificationJobsCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListDocumentClassificationJobsCommand";
    import { ListDocumentClassifiersCommandInput, ListDocumentClassifiersCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListDocumentClassifiersCommand";
    import { ListDocumentClassifierSummariesCommandInput, ListDocumentClassifierSummariesCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListDocumentClassifierSummariesCommand";
    import { ListDominantLanguageDetectionJobsCommandInput, ListDominantLanguageDetectionJobsCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListDominantLanguageDetectionJobsCommand";
    import { ListEndpointsCommandInput, ListEndpointsCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListEndpointsCommand";
    import { ListEntitiesDetectionJobsCommandInput, ListEntitiesDetectionJobsCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListEntitiesDetectionJobsCommand";
    import { ListEntityRecognizersCommandInput, ListEntityRecognizersCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListEntityRecognizersCommand";
    import { ListEntityRecognizerSummariesCommandInput, ListEntityRecognizerSummariesCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListEntityRecognizerSummariesCommand";
    import { ListEventsDetectionJobsCommandInput, ListEventsDetectionJobsCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListEventsDetectionJobsCommand";
    import { ListKeyPhrasesDetectionJobsCommandInput, ListKeyPhrasesDetectionJobsCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListKeyPhrasesDetectionJobsCommand";
    import { ListPiiEntitiesDetectionJobsCommandInput, ListPiiEntitiesDetectionJobsCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListPiiEntitiesDetectionJobsCommand";
    import { ListSentimentDetectionJobsCommandInput, ListSentimentDetectionJobsCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListSentimentDetectionJobsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListTagsForResourceCommand";
    import { ListTargetedSentimentDetectionJobsCommandInput, ListTargetedSentimentDetectionJobsCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListTargetedSentimentDetectionJobsCommand";
    import { ListTopicsDetectionJobsCommandInput, ListTopicsDetectionJobsCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListTopicsDetectionJobsCommand";
    import { PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/PutResourcePolicyCommand";
    import { StartDocumentClassificationJobCommandInput, StartDocumentClassificationJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartDocumentClassificationJobCommand";
    import { StartDominantLanguageDetectionJobCommandInput, StartDominantLanguageDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartDominantLanguageDetectionJobCommand";
    import { StartEntitiesDetectionJobCommandInput, StartEntitiesDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartEntitiesDetectionJobCommand";
    import { StartEventsDetectionJobCommandInput, StartEventsDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartEventsDetectionJobCommand";
    import { StartKeyPhrasesDetectionJobCommandInput, StartKeyPhrasesDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartKeyPhrasesDetectionJobCommand";
    import { StartPiiEntitiesDetectionJobCommandInput, StartPiiEntitiesDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartPiiEntitiesDetectionJobCommand";
    import { StartSentimentDetectionJobCommandInput, StartSentimentDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartSentimentDetectionJobCommand";
    import { StartTargetedSentimentDetectionJobCommandInput, StartTargetedSentimentDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartTargetedSentimentDetectionJobCommand";
    import { StartTopicsDetectionJobCommandInput, StartTopicsDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartTopicsDetectionJobCommand";
    import { StopDominantLanguageDetectionJobCommandInput, StopDominantLanguageDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopDominantLanguageDetectionJobCommand";
    import { StopEntitiesDetectionJobCommandInput, StopEntitiesDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopEntitiesDetectionJobCommand";
    import { StopEventsDetectionJobCommandInput, StopEventsDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopEventsDetectionJobCommand";
    import { StopKeyPhrasesDetectionJobCommandInput, StopKeyPhrasesDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopKeyPhrasesDetectionJobCommand";
    import { StopPiiEntitiesDetectionJobCommandInput, StopPiiEntitiesDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopPiiEntitiesDetectionJobCommand";
    import { StopSentimentDetectionJobCommandInput, StopSentimentDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopSentimentDetectionJobCommand";
    import { StopTargetedSentimentDetectionJobCommandInput, StopTargetedSentimentDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopTargetedSentimentDetectionJobCommand";
    import { StopTrainingDocumentClassifierCommandInput, StopTrainingDocumentClassifierCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopTrainingDocumentClassifierCommand";
    import { StopTrainingEntityRecognizerCommandInput, StopTrainingEntityRecognizerCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopTrainingEntityRecognizerCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/UntagResourceCommand";
    import { UpdateEndpointCommandInput, UpdateEndpointCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/UpdateEndpointCommand";
    import { ComprehendClient } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    /**
        * <p>Amazon Comprehend is an AWS service for gaining insight into the content of documents.
        *       Use these actions to determine the topics contained in your documents, the topics they
        *       discuss, the predominant sentiment expressed in them, the predominant language used, and
        *       more.</p>
        */
    export class Comprehend extends ComprehendClient {
            /**
                * <p>Determines the dominant language of the input text for a batch of documents. For a list
                *       of languages that Amazon Comprehend can detect, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html">Amazon Comprehend Supported Languages</a>.
                *     </p>
                */
            batchDetectDominantLanguage(args: BatchDetectDominantLanguageCommandInput, options?: __HttpHandlerOptions): Promise<BatchDetectDominantLanguageCommandOutput>;
            batchDetectDominantLanguage(args: BatchDetectDominantLanguageCommandInput, cb: (err: any, data?: BatchDetectDominantLanguageCommandOutput) => void): void;
            batchDetectDominantLanguage(args: BatchDetectDominantLanguageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDetectDominantLanguageCommandOutput) => void): void;
            /**
                * <p>Inspects the text of a batch of documents for named entities and returns information
                *       about them. For more information about named entities, see <a>how-entities</a>
                *          </p>
                */
            batchDetectEntities(args: BatchDetectEntitiesCommandInput, options?: __HttpHandlerOptions): Promise<BatchDetectEntitiesCommandOutput>;
            batchDetectEntities(args: BatchDetectEntitiesCommandInput, cb: (err: any, data?: BatchDetectEntitiesCommandOutput) => void): void;
            batchDetectEntities(args: BatchDetectEntitiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDetectEntitiesCommandOutput) => void): void;
            /**
                * <p>Detects the key noun phrases found in a batch of documents.</p>
                */
            batchDetectKeyPhrases(args: BatchDetectKeyPhrasesCommandInput, options?: __HttpHandlerOptions): Promise<BatchDetectKeyPhrasesCommandOutput>;
            batchDetectKeyPhrases(args: BatchDetectKeyPhrasesCommandInput, cb: (err: any, data?: BatchDetectKeyPhrasesCommandOutput) => void): void;
            batchDetectKeyPhrases(args: BatchDetectKeyPhrasesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDetectKeyPhrasesCommandOutput) => void): void;
            /**
                * <p>Inspects a batch of documents and returns an inference of the prevailing sentiment,
                *         <code>POSITIVE</code>, <code>NEUTRAL</code>, <code>MIXED</code>, or <code>NEGATIVE</code>,
                *       in each one.</p>
                */
            batchDetectSentiment(args: BatchDetectSentimentCommandInput, options?: __HttpHandlerOptions): Promise<BatchDetectSentimentCommandOutput>;
            batchDetectSentiment(args: BatchDetectSentimentCommandInput, cb: (err: any, data?: BatchDetectSentimentCommandOutput) => void): void;
            batchDetectSentiment(args: BatchDetectSentimentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDetectSentimentCommandOutput) => void): void;
            /**
                * <p>Inspects the text of a batch of documents for the syntax and part of speech of the words
                *       in the document and returns information about them. For more information, see <a>how-syntax</a>.</p>
                */
            batchDetectSyntax(args: BatchDetectSyntaxCommandInput, options?: __HttpHandlerOptions): Promise<BatchDetectSyntaxCommandOutput>;
            batchDetectSyntax(args: BatchDetectSyntaxCommandInput, cb: (err: any, data?: BatchDetectSyntaxCommandOutput) => void): void;
            batchDetectSyntax(args: BatchDetectSyntaxCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDetectSyntaxCommandOutput) => void): void;
            /**
                * <p>Creates a new document classification request to analyze a single document in real-time,
                *       using a previously created and trained custom model and an endpoint.</p>
                */
            classifyDocument(args: ClassifyDocumentCommandInput, options?: __HttpHandlerOptions): Promise<ClassifyDocumentCommandOutput>;
            classifyDocument(args: ClassifyDocumentCommandInput, cb: (err: any, data?: ClassifyDocumentCommandOutput) => void): void;
            classifyDocument(args: ClassifyDocumentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ClassifyDocumentCommandOutput) => void): void;
            /**
                * <p>Analyzes input text for the presence of personally identifiable information (PII) and
                *       returns the labels of identified PII entity types such as name, address, bank account number,
                *       or phone number.</p>
                */
            containsPiiEntities(args: ContainsPiiEntitiesCommandInput, options?: __HttpHandlerOptions): Promise<ContainsPiiEntitiesCommandOutput>;
            containsPiiEntities(args: ContainsPiiEntitiesCommandInput, cb: (err: any, data?: ContainsPiiEntitiesCommandOutput) => void): void;
            containsPiiEntities(args: ContainsPiiEntitiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ContainsPiiEntitiesCommandOutput) => void): void;
            /**
                * <p>Creates a new document classifier that you can use to categorize documents. To create a
                *       classifier, you provide a set of training documents that labeled with the categories that you
                *       want to use. After the classifier is trained you can use it to categorize a set of labeled
                *       documents into the categories. For more information, see <a>how-document-classification</a>.</p>
                */
            createDocumentClassifier(args: CreateDocumentClassifierCommandInput, options?: __HttpHandlerOptions): Promise<CreateDocumentClassifierCommandOutput>;
            createDocumentClassifier(args: CreateDocumentClassifierCommandInput, cb: (err: any, data?: CreateDocumentClassifierCommandOutput) => void): void;
            createDocumentClassifier(args: CreateDocumentClassifierCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDocumentClassifierCommandOutput) => void): void;
            /**
                * <p>Creates a model-specific endpoint for synchronous inference for a previously trained
                *       custom model
                *       For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>.</p>
                */
            createEndpoint(args: CreateEndpointCommandInput, options?: __HttpHandlerOptions): Promise<CreateEndpointCommandOutput>;
            createEndpoint(args: CreateEndpointCommandInput, cb: (err: any, data?: CreateEndpointCommandOutput) => void): void;
            createEndpoint(args: CreateEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEndpointCommandOutput) => void): void;
            /**
                * <p>Creates an entity recognizer using submitted files. After your
                *         <code>CreateEntityRecognizer</code> request is submitted, you can check job status using the
                *          API. </p>
                */
            createEntityRecognizer(args: CreateEntityRecognizerCommandInput, options?: __HttpHandlerOptions): Promise<CreateEntityRecognizerCommandOutput>;
            createEntityRecognizer(args: CreateEntityRecognizerCommandInput, cb: (err: any, data?: CreateEntityRecognizerCommandOutput) => void): void;
            createEntityRecognizer(args: CreateEntityRecognizerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEntityRecognizerCommandOutput) => void): void;
            /**
                * <p>Deletes a previously created document classifier</p>
                *          <p>Only those classifiers that are in terminated states (IN_ERROR, TRAINED) will be deleted.
                *       If an active inference job is using the model, a <code>ResourceInUseException</code> will be
                *       returned.</p>
                *          <p>This is an asynchronous action that puts the classifier into a DELETING state, and it is
                *       then removed by a background job. Once removed, the classifier disappears from your account
                *       and is no longer available for use. </p>
                */
            deleteDocumentClassifier(args: DeleteDocumentClassifierCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDocumentClassifierCommandOutput>;
            deleteDocumentClassifier(args: DeleteDocumentClassifierCommandInput, cb: (err: any, data?: DeleteDocumentClassifierCommandOutput) => void): void;
            deleteDocumentClassifier(args: DeleteDocumentClassifierCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDocumentClassifierCommandOutput) => void): void;
            /**
                * <p>Deletes a model-specific endpoint for a previously-trained custom model. All endpoints
                *       must be deleted in order for the model to be deleted.
                *       For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>.</p>
                */
            deleteEndpoint(args: DeleteEndpointCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEndpointCommandOutput>;
            deleteEndpoint(args: DeleteEndpointCommandInput, cb: (err: any, data?: DeleteEndpointCommandOutput) => void): void;
            deleteEndpoint(args: DeleteEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEndpointCommandOutput) => void): void;
            /**
                * <p>Deletes an entity recognizer.</p>
                *          <p>Only those recognizers that are in terminated states (IN_ERROR, TRAINED) will be deleted.
                *       If an active inference job is using the model, a <code>ResourceInUseException</code> will be
                *       returned.</p>
                *          <p>This is an asynchronous action that puts the recognizer into a DELETING state, and it is
                *       then removed by a background job. Once removed, the recognizer disappears from your account
                *       and is no longer available for use. </p>
                */
            deleteEntityRecognizer(args: DeleteEntityRecognizerCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEntityRecognizerCommandOutput>;
            deleteEntityRecognizer(args: DeleteEntityRecognizerCommandInput, cb: (err: any, data?: DeleteEntityRecognizerCommandOutput) => void): void;
            deleteEntityRecognizer(args: DeleteEntityRecognizerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEntityRecognizerCommandOutput) => void): void;
            /**
                * <p>Deletes a resource-based policy that is attached to a custom model.</p>
                */
            deleteResourcePolicy(args: DeleteResourcePolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteResourcePolicyCommandOutput>;
            deleteResourcePolicy(args: DeleteResourcePolicyCommandInput, cb: (err: any, data?: DeleteResourcePolicyCommandOutput) => void): void;
            deleteResourcePolicy(args: DeleteResourcePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteResourcePolicyCommandOutput) => void): void;
            /**
                * <p>Gets the properties associated with a document classification job. Use this operation to
                *       get the status of a classification job.</p>
                */
            describeDocumentClassificationJob(args: DescribeDocumentClassificationJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDocumentClassificationJobCommandOutput>;
            describeDocumentClassificationJob(args: DescribeDocumentClassificationJobCommandInput, cb: (err: any, data?: DescribeDocumentClassificationJobCommandOutput) => void): void;
            describeDocumentClassificationJob(args: DescribeDocumentClassificationJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDocumentClassificationJobCommandOutput) => void): void;
            /**
                * <p>Gets the properties associated with a document classifier.</p>
                */
            describeDocumentClassifier(args: DescribeDocumentClassifierCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDocumentClassifierCommandOutput>;
            describeDocumentClassifier(args: DescribeDocumentClassifierCommandInput, cb: (err: any, data?: DescribeDocumentClassifierCommandOutput) => void): void;
            describeDocumentClassifier(args: DescribeDocumentClassifierCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDocumentClassifierCommandOutput) => void): void;
            /**
                * <p>Gets the properties associated with a dominant language detection job. Use this operation
                *       to get the status of a detection job.</p>
                */
            describeDominantLanguageDetectionJob(args: DescribeDominantLanguageDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDominantLanguageDetectionJobCommandOutput>;
            describeDominantLanguageDetectionJob(args: DescribeDominantLanguageDetectionJobCommandInput, cb: (err: any, data?: DescribeDominantLanguageDetectionJobCommandOutput) => void): void;
            describeDominantLanguageDetectionJob(args: DescribeDominantLanguageDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDominantLanguageDetectionJobCommandOutput) => void): void;
            /**
                * <p>Gets the properties associated with a specific endpoint. Use this operation to get the
                *       status of an endpoint.
                *       For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>.</p>
                */
            describeEndpoint(args: DescribeEndpointCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEndpointCommandOutput>;
            describeEndpoint(args: DescribeEndpointCommandInput, cb: (err: any, data?: DescribeEndpointCommandOutput) => void): void;
            describeEndpoint(args: DescribeEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEndpointCommandOutput) => void): void;
            /**
                * <p>Gets the properties associated with an entities detection job. Use this operation to get
                *       the status of a detection job.</p>
                */
            describeEntitiesDetectionJob(args: DescribeEntitiesDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEntitiesDetectionJobCommandOutput>;
            describeEntitiesDetectionJob(args: DescribeEntitiesDetectionJobCommandInput, cb: (err: any, data?: DescribeEntitiesDetectionJobCommandOutput) => void): void;
            describeEntitiesDetectionJob(args: DescribeEntitiesDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEntitiesDetectionJobCommandOutput) => void): void;
            /**
                * <p>Provides details about an entity recognizer including status, S3 buckets containing
                *       training data, recognizer metadata, metrics, and so on.</p>
                */
            describeEntityRecognizer(args: DescribeEntityRecognizerCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEntityRecognizerCommandOutput>;
            describeEntityRecognizer(args: DescribeEntityRecognizerCommandInput, cb: (err: any, data?: DescribeEntityRecognizerCommandOutput) => void): void;
            describeEntityRecognizer(args: DescribeEntityRecognizerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEntityRecognizerCommandOutput) => void): void;
            /**
                * <p>Gets the status and details of an events detection job.</p>
                */
            describeEventsDetectionJob(args: DescribeEventsDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEventsDetectionJobCommandOutput>;
            describeEventsDetectionJob(args: DescribeEventsDetectionJobCommandInput, cb: (err: any, data?: DescribeEventsDetectionJobCommandOutput) => void): void;
            describeEventsDetectionJob(args: DescribeEventsDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEventsDetectionJobCommandOutput) => void): void;
            /**
                * <p>Gets the properties associated with a key phrases detection job. Use this operation to get
                *       the status of a detection job.</p>
                */
            describeKeyPhrasesDetectionJob(args: DescribeKeyPhrasesDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeKeyPhrasesDetectionJobCommandOutput>;
            describeKeyPhrasesDetectionJob(args: DescribeKeyPhrasesDetectionJobCommandInput, cb: (err: any, data?: DescribeKeyPhrasesDetectionJobCommandOutput) => void): void;
            describeKeyPhrasesDetectionJob(args: DescribeKeyPhrasesDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeKeyPhrasesDetectionJobCommandOutput) => void): void;
            /**
                * <p>Gets the properties associated with a PII entities detection job. For example, you can use
                *       this operation to get the job status.</p>
                */
            describePiiEntitiesDetectionJob(args: DescribePiiEntitiesDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribePiiEntitiesDetectionJobCommandOutput>;
            describePiiEntitiesDetectionJob(args: DescribePiiEntitiesDetectionJobCommandInput, cb: (err: any, data?: DescribePiiEntitiesDetectionJobCommandOutput) => void): void;
            describePiiEntitiesDetectionJob(args: DescribePiiEntitiesDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePiiEntitiesDetectionJobCommandOutput) => void): void;
            /**
                * <p>Gets the details of a resource-based policy that is attached to a custom model, including
                *       the JSON body of the policy.</p>
                */
            describeResourcePolicy(args: DescribeResourcePolicyCommandInput, options?: __HttpHandlerOptions): Promise<DescribeResourcePolicyCommandOutput>;
            describeResourcePolicy(args: DescribeResourcePolicyCommandInput, cb: (err: any, data?: DescribeResourcePolicyCommandOutput) => void): void;
            describeResourcePolicy(args: DescribeResourcePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeResourcePolicyCommandOutput) => void): void;
            /**
                * <p>Gets the properties associated with a sentiment detection job. Use this operation to get
                *       the status of a detection job.</p>
                */
            describeSentimentDetectionJob(args: DescribeSentimentDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeSentimentDetectionJobCommandOutput>;
            describeSentimentDetectionJob(args: DescribeSentimentDetectionJobCommandInput, cb: (err: any, data?: DescribeSentimentDetectionJobCommandOutput) => void): void;
            describeSentimentDetectionJob(args: DescribeSentimentDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeSentimentDetectionJobCommandOutput) => void): void;
            /**
                * <p>Gets the properties associated with a targeted sentiment detection job. Use this operation
                *       to get the status of the job.</p>
                */
            describeTargetedSentimentDetectionJob(args: DescribeTargetedSentimentDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTargetedSentimentDetectionJobCommandOutput>;
            describeTargetedSentimentDetectionJob(args: DescribeTargetedSentimentDetectionJobCommandInput, cb: (err: any, data?: DescribeTargetedSentimentDetectionJobCommandOutput) => void): void;
            describeTargetedSentimentDetectionJob(args: DescribeTargetedSentimentDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTargetedSentimentDetectionJobCommandOutput) => void): void;
            /**
                * <p>Gets the properties associated with a topic detection job. Use this operation to get
                *       the status of a detection job.</p>
                */
            describeTopicsDetectionJob(args: DescribeTopicsDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTopicsDetectionJobCommandOutput>;
            describeTopicsDetectionJob(args: DescribeTopicsDetectionJobCommandInput, cb: (err: any, data?: DescribeTopicsDetectionJobCommandOutput) => void): void;
            describeTopicsDetectionJob(args: DescribeTopicsDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTopicsDetectionJobCommandOutput) => void): void;
            /**
                * <p>Determines the dominant language of the input text. For a list of languages that Amazon
                *       Comprehend can detect, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html">Amazon Comprehend Supported Languages</a>. </p>
                */
            detectDominantLanguage(args: DetectDominantLanguageCommandInput, options?: __HttpHandlerOptions): Promise<DetectDominantLanguageCommandOutput>;
            detectDominantLanguage(args: DetectDominantLanguageCommandInput, cb: (err: any, data?: DetectDominantLanguageCommandOutput) => void): void;
            detectDominantLanguage(args: DetectDominantLanguageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetectDominantLanguageCommandOutput) => void): void;
            /**
                * <p>Inspects text for named entities, and returns information about them. For more
                *       information, about named entities, see <a>how-entities</a>. </p>
                */
            detectEntities(args: DetectEntitiesCommandInput, options?: __HttpHandlerOptions): Promise<DetectEntitiesCommandOutput>;
            detectEntities(args: DetectEntitiesCommandInput, cb: (err: any, data?: DetectEntitiesCommandOutput) => void): void;
            detectEntities(args: DetectEntitiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetectEntitiesCommandOutput) => void): void;
            /**
                * <p>Detects the key noun phrases found in the text. </p>
                */
            detectKeyPhrases(args: DetectKeyPhrasesCommandInput, options?: __HttpHandlerOptions): Promise<DetectKeyPhrasesCommandOutput>;
            detectKeyPhrases(args: DetectKeyPhrasesCommandInput, cb: (err: any, data?: DetectKeyPhrasesCommandOutput) => void): void;
            detectKeyPhrases(args: DetectKeyPhrasesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetectKeyPhrasesCommandOutput) => void): void;
            /**
                * <p>Inspects the input text for entities that contain personally identifiable information
                *       (PII) and returns information about them.</p>
                */
            detectPiiEntities(args: DetectPiiEntitiesCommandInput, options?: __HttpHandlerOptions): Promise<DetectPiiEntitiesCommandOutput>;
            detectPiiEntities(args: DetectPiiEntitiesCommandInput, cb: (err: any, data?: DetectPiiEntitiesCommandOutput) => void): void;
            detectPiiEntities(args: DetectPiiEntitiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetectPiiEntitiesCommandOutput) => void): void;
            /**
                * <p>Inspects text and returns an inference of the prevailing sentiment
                *         (<code>POSITIVE</code>, <code>NEUTRAL</code>, <code>MIXED</code>, or <code>NEGATIVE</code>). </p>
                */
            detectSentiment(args: DetectSentimentCommandInput, options?: __HttpHandlerOptions): Promise<DetectSentimentCommandOutput>;
            detectSentiment(args: DetectSentimentCommandInput, cb: (err: any, data?: DetectSentimentCommandOutput) => void): void;
            detectSentiment(args: DetectSentimentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetectSentimentCommandOutput) => void): void;
            /**
                * <p>Inspects text for syntax and the part of speech of words in the document. For more
                *       information, <a>how-syntax</a>.</p>
                */
            detectSyntax(args: DetectSyntaxCommandInput, options?: __HttpHandlerOptions): Promise<DetectSyntaxCommandOutput>;
            detectSyntax(args: DetectSyntaxCommandInput, cb: (err: any, data?: DetectSyntaxCommandOutput) => void): void;
            detectSyntax(args: DetectSyntaxCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetectSyntaxCommandOutput) => void): void;
            /**
                * <p>Creates a new custom model that replicates a source custom model that you import. The
                *       source model can be in your AWS account or another one.</p>
                *          <p>If the source model is in another AWS account, then it must have a resource-based policy
                *       that authorizes you to import it.</p>
                *          <p>The source model must be in the same AWS region that you're using when you import. You
                *       can't import a model that's in a different region.</p>
                */
            importModel(args: ImportModelCommandInput, options?: __HttpHandlerOptions): Promise<ImportModelCommandOutput>;
            importModel(args: ImportModelCommandInput, cb: (err: any, data?: ImportModelCommandOutput) => void): void;
            importModel(args: ImportModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ImportModelCommandOutput) => void): void;
            /**
                * <p>Gets a list of the documentation classification jobs that you have submitted.</p>
                */
            listDocumentClassificationJobs(args: ListDocumentClassificationJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListDocumentClassificationJobsCommandOutput>;
            listDocumentClassificationJobs(args: ListDocumentClassificationJobsCommandInput, cb: (err: any, data?: ListDocumentClassificationJobsCommandOutput) => void): void;
            listDocumentClassificationJobs(args: ListDocumentClassificationJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDocumentClassificationJobsCommandOutput) => void): void;
            /**
                * <p>Gets a list of the document classifiers that you have created.</p>
                */
            listDocumentClassifiers(args: ListDocumentClassifiersCommandInput, options?: __HttpHandlerOptions): Promise<ListDocumentClassifiersCommandOutput>;
            listDocumentClassifiers(args: ListDocumentClassifiersCommandInput, cb: (err: any, data?: ListDocumentClassifiersCommandOutput) => void): void;
            listDocumentClassifiers(args: ListDocumentClassifiersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDocumentClassifiersCommandOutput) => void): void;
            /**
                * <p>Gets a list of summaries of the document classifiers that you have created</p>
                */
            listDocumentClassifierSummaries(args: ListDocumentClassifierSummariesCommandInput, options?: __HttpHandlerOptions): Promise<ListDocumentClassifierSummariesCommandOutput>;
            listDocumentClassifierSummaries(args: ListDocumentClassifierSummariesCommandInput, cb: (err: any, data?: ListDocumentClassifierSummariesCommandOutput) => void): void;
            listDocumentClassifierSummaries(args: ListDocumentClassifierSummariesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDocumentClassifierSummariesCommandOutput) => void): void;
            /**
                * <p>Gets a list of the dominant language detection jobs that you have submitted.</p>
                */
            listDominantLanguageDetectionJobs(args: ListDominantLanguageDetectionJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListDominantLanguageDetectionJobsCommandOutput>;
            listDominantLanguageDetectionJobs(args: ListDominantLanguageDetectionJobsCommandInput, cb: (err: any, data?: ListDominantLanguageDetectionJobsCommandOutput) => void): void;
            listDominantLanguageDetectionJobs(args: ListDominantLanguageDetectionJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDominantLanguageDetectionJobsCommandOutput) => void): void;
            /**
                * <p>Gets a list of all existing endpoints that you've created.
                *       For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>.</p>
                */
            listEndpoints(args: ListEndpointsCommandInput, options?: __HttpHandlerOptions): Promise<ListEndpointsCommandOutput>;
            listEndpoints(args: ListEndpointsCommandInput, cb: (err: any, data?: ListEndpointsCommandOutput) => void): void;
            listEndpoints(args: ListEndpointsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEndpointsCommandOutput) => void): void;
            /**
                * <p>Gets a list of the entity detection jobs that you have submitted.</p>
                */
            listEntitiesDetectionJobs(args: ListEntitiesDetectionJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListEntitiesDetectionJobsCommandOutput>;
            listEntitiesDetectionJobs(args: ListEntitiesDetectionJobsCommandInput, cb: (err: any, data?: ListEntitiesDetectionJobsCommandOutput) => void): void;
            listEntitiesDetectionJobs(args: ListEntitiesDetectionJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEntitiesDetectionJobsCommandOutput) => void): void;
            /**
                * <p>Gets a list of the properties of all entity recognizers that you created, including
                *       recognizers currently in training. Allows you to filter the list of recognizers based on
                *       criteria such as status and submission time. This call returns up to 500 entity recognizers in
                *       the list, with a default number of 100 recognizers in the list.</p>
                *          <p>The results of this list are not in any particular order. Please get the list and sort
                *       locally if needed.</p>
                */
            listEntityRecognizers(args: ListEntityRecognizersCommandInput, options?: __HttpHandlerOptions): Promise<ListEntityRecognizersCommandOutput>;
            listEntityRecognizers(args: ListEntityRecognizersCommandInput, cb: (err: any, data?: ListEntityRecognizersCommandOutput) => void): void;
            listEntityRecognizers(args: ListEntityRecognizersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEntityRecognizersCommandOutput) => void): void;
            /**
                * <p>Gets a list of summaries for the entity recognizers that you have created.</p>
                */
            listEntityRecognizerSummaries(args: ListEntityRecognizerSummariesCommandInput, options?: __HttpHandlerOptions): Promise<ListEntityRecognizerSummariesCommandOutput>;
            listEntityRecognizerSummaries(args: ListEntityRecognizerSummariesCommandInput, cb: (err: any, data?: ListEntityRecognizerSummariesCommandOutput) => void): void;
            listEntityRecognizerSummaries(args: ListEntityRecognizerSummariesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEntityRecognizerSummariesCommandOutput) => void): void;
            /**
                * <p>Gets a list of the events detection jobs that you have submitted.</p>
                */
            listEventsDetectionJobs(args: ListEventsDetectionJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListEventsDetectionJobsCommandOutput>;
            listEventsDetectionJobs(args: ListEventsDetectionJobsCommandInput, cb: (err: any, data?: ListEventsDetectionJobsCommandOutput) => void): void;
            listEventsDetectionJobs(args: ListEventsDetectionJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEventsDetectionJobsCommandOutput) => void): void;
            /**
                * <p>Get a list of key phrase detection jobs that you have submitted.</p>
                */
            listKeyPhrasesDetectionJobs(args: ListKeyPhrasesDetectionJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListKeyPhrasesDetectionJobsCommandOutput>;
            listKeyPhrasesDetectionJobs(args: ListKeyPhrasesDetectionJobsCommandInput, cb: (err: any, data?: ListKeyPhrasesDetectionJobsCommandOutput) => void): void;
            listKeyPhrasesDetectionJobs(args: ListKeyPhrasesDetectionJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListKeyPhrasesDetectionJobsCommandOutput) => void): void;
            /**
                * <p>Gets a list of the PII entity detection jobs that you have submitted.</p>
                */
            listPiiEntitiesDetectionJobs(args: ListPiiEntitiesDetectionJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListPiiEntitiesDetectionJobsCommandOutput>;
            listPiiEntitiesDetectionJobs(args: ListPiiEntitiesDetectionJobsCommandInput, cb: (err: any, data?: ListPiiEntitiesDetectionJobsCommandOutput) => void): void;
            listPiiEntitiesDetectionJobs(args: ListPiiEntitiesDetectionJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPiiEntitiesDetectionJobsCommandOutput) => void): void;
            /**
                * <p>Gets a list of sentiment detection jobs that you have submitted.</p>
                */
            listSentimentDetectionJobs(args: ListSentimentDetectionJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListSentimentDetectionJobsCommandOutput>;
            listSentimentDetectionJobs(args: ListSentimentDetectionJobsCommandInput, cb: (err: any, data?: ListSentimentDetectionJobsCommandOutput) => void): void;
            listSentimentDetectionJobs(args: ListSentimentDetectionJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSentimentDetectionJobsCommandOutput) => void): void;
            /**
                * <p>Lists all tags associated with a given Amazon Comprehend resource. </p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Gets a list of targeted sentiment detection jobs that you have submitted.</p>
                */
            listTargetedSentimentDetectionJobs(args: ListTargetedSentimentDetectionJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListTargetedSentimentDetectionJobsCommandOutput>;
            listTargetedSentimentDetectionJobs(args: ListTargetedSentimentDetectionJobsCommandInput, cb: (err: any, data?: ListTargetedSentimentDetectionJobsCommandOutput) => void): void;
            listTargetedSentimentDetectionJobs(args: ListTargetedSentimentDetectionJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTargetedSentimentDetectionJobsCommandOutput) => void): void;
            /**
                * <p>Gets a list of the topic detection jobs that you have submitted.</p>
                */
            listTopicsDetectionJobs(args: ListTopicsDetectionJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListTopicsDetectionJobsCommandOutput>;
            listTopicsDetectionJobs(args: ListTopicsDetectionJobsCommandInput, cb: (err: any, data?: ListTopicsDetectionJobsCommandOutput) => void): void;
            listTopicsDetectionJobs(args: ListTopicsDetectionJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTopicsDetectionJobsCommandOutput) => void): void;
            /**
                * <p>Attaches a resource-based policy to a custom model. You can use this policy to authorize
                *       an entity in another AWS account to import the custom model, which replicates it in Amazon
                *       Comprehend in their account.</p>
                */
            putResourcePolicy(args: PutResourcePolicyCommandInput, options?: __HttpHandlerOptions): Promise<PutResourcePolicyCommandOutput>;
            putResourcePolicy(args: PutResourcePolicyCommandInput, cb: (err: any, data?: PutResourcePolicyCommandOutput) => void): void;
            putResourcePolicy(args: PutResourcePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutResourcePolicyCommandOutput) => void): void;
            /**
                * <p>Starts an asynchronous document classification job. Use the  operation to track the progress of the
                *       job.</p>
                */
            startDocumentClassificationJob(args: StartDocumentClassificationJobCommandInput, options?: __HttpHandlerOptions): Promise<StartDocumentClassificationJobCommandOutput>;
            startDocumentClassificationJob(args: StartDocumentClassificationJobCommandInput, cb: (err: any, data?: StartDocumentClassificationJobCommandOutput) => void): void;
            startDocumentClassificationJob(args: StartDocumentClassificationJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartDocumentClassificationJobCommandOutput) => void): void;
            /**
                * <p>Starts an asynchronous dominant language detection job for a collection of documents. Use
                *       the  operation to track the status
                *       of a job.</p>
                */
            startDominantLanguageDetectionJob(args: StartDominantLanguageDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<StartDominantLanguageDetectionJobCommandOutput>;
            startDominantLanguageDetectionJob(args: StartDominantLanguageDetectionJobCommandInput, cb: (err: any, data?: StartDominantLanguageDetectionJobCommandOutput) => void): void;
            startDominantLanguageDetectionJob(args: StartDominantLanguageDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartDominantLanguageDetectionJobCommandOutput) => void): void;
            /**
                * <p>Starts an asynchronous entity detection job for a collection of documents. Use the  operation to track the status of a job.</p>
                *          <p>This API can be used for either standard entity detection or custom entity recognition. In
                *       order to be used for custom entity recognition, the optional <code>EntityRecognizerArn</code>
                *       must be used in order to provide access to the recognizer being used to detect the custom
                *       entity.</p>
                */
            startEntitiesDetectionJob(args: StartEntitiesDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<StartEntitiesDetectionJobCommandOutput>;
            startEntitiesDetectionJob(args: StartEntitiesDetectionJobCommandInput, cb: (err: any, data?: StartEntitiesDetectionJobCommandOutput) => void): void;
            startEntitiesDetectionJob(args: StartEntitiesDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartEntitiesDetectionJobCommandOutput) => void): void;
            /**
                * <p>Starts an asynchronous event detection job for a collection of documents.</p>
                */
            startEventsDetectionJob(args: StartEventsDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<StartEventsDetectionJobCommandOutput>;
            startEventsDetectionJob(args: StartEventsDetectionJobCommandInput, cb: (err: any, data?: StartEventsDetectionJobCommandOutput) => void): void;
            startEventsDetectionJob(args: StartEventsDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartEventsDetectionJobCommandOutput) => void): void;
            /**
                * <p>Starts an asynchronous key phrase detection job for a collection of documents. Use the
                *          operation to track the status of a
                *       job.</p>
                */
            startKeyPhrasesDetectionJob(args: StartKeyPhrasesDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<StartKeyPhrasesDetectionJobCommandOutput>;
            startKeyPhrasesDetectionJob(args: StartKeyPhrasesDetectionJobCommandInput, cb: (err: any, data?: StartKeyPhrasesDetectionJobCommandOutput) => void): void;
            startKeyPhrasesDetectionJob(args: StartKeyPhrasesDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartKeyPhrasesDetectionJobCommandOutput) => void): void;
            /**
                * <p>Starts an asynchronous PII entity detection job for a collection of documents.</p>
                */
            startPiiEntitiesDetectionJob(args: StartPiiEntitiesDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<StartPiiEntitiesDetectionJobCommandOutput>;
            startPiiEntitiesDetectionJob(args: StartPiiEntitiesDetectionJobCommandInput, cb: (err: any, data?: StartPiiEntitiesDetectionJobCommandOutput) => void): void;
            startPiiEntitiesDetectionJob(args: StartPiiEntitiesDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartPiiEntitiesDetectionJobCommandOutput) => void): void;
            /**
                * <p>Starts an asynchronous sentiment detection job for a collection of documents. Use the
                *          operation to track the status of a
                *       job.</p>
                */
            startSentimentDetectionJob(args: StartSentimentDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<StartSentimentDetectionJobCommandOutput>;
            startSentimentDetectionJob(args: StartSentimentDetectionJobCommandInput, cb: (err: any, data?: StartSentimentDetectionJobCommandOutput) => void): void;
            startSentimentDetectionJob(args: StartSentimentDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartSentimentDetectionJobCommandOutput) => void): void;
            /**
                * <p>Starts an asynchronous targeted sentiment detection job for a collection of documents. Use the
                *        operation to track the status of a
                *       job.</p>
                */
            startTargetedSentimentDetectionJob(args: StartTargetedSentimentDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<StartTargetedSentimentDetectionJobCommandOutput>;
            startTargetedSentimentDetectionJob(args: StartTargetedSentimentDetectionJobCommandInput, cb: (err: any, data?: StartTargetedSentimentDetectionJobCommandOutput) => void): void;
            startTargetedSentimentDetectionJob(args: StartTargetedSentimentDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartTargetedSentimentDetectionJobCommandOutput) => void): void;
            /**
                * <p>Starts an asynchronous topic detection job. Use the
                *         <code>DescribeTopicDetectionJob</code> operation to track the status of a job.</p>
                */
            startTopicsDetectionJob(args: StartTopicsDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<StartTopicsDetectionJobCommandOutput>;
            startTopicsDetectionJob(args: StartTopicsDetectionJobCommandInput, cb: (err: any, data?: StartTopicsDetectionJobCommandOutput) => void): void;
            startTopicsDetectionJob(args: StartTopicsDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartTopicsDetectionJobCommandOutput) => void): void;
            /**
                * <p>Stops a dominant language detection job in progress.</p>
                *          <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put
                *       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it
                *       is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the
                *         <code>STOPPED</code> state.</p>
                *          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the
                *         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400
                *       Internal Request Exception. </p>
                *          <p>When a job is stopped, any documents already processed are written to the output
                *       location.</p>
                */
            stopDominantLanguageDetectionJob(args: StopDominantLanguageDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<StopDominantLanguageDetectionJobCommandOutput>;
            stopDominantLanguageDetectionJob(args: StopDominantLanguageDetectionJobCommandInput, cb: (err: any, data?: StopDominantLanguageDetectionJobCommandOutput) => void): void;
            stopDominantLanguageDetectionJob(args: StopDominantLanguageDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopDominantLanguageDetectionJobCommandOutput) => void): void;
            /**
                * <p>Stops an entities detection job in progress.</p>
                *          <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put
                *       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it
                *       is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the
                *         <code>STOPPED</code> state.</p>
                *          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the
                *         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400
                *       Internal Request Exception. </p>
                *          <p>When a job is stopped, any documents already processed are written to the output
                *       location.</p>
                */
            stopEntitiesDetectionJob(args: StopEntitiesDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<StopEntitiesDetectionJobCommandOutput>;
            stopEntitiesDetectionJob(args: StopEntitiesDetectionJobCommandInput, cb: (err: any, data?: StopEntitiesDetectionJobCommandOutput) => void): void;
            stopEntitiesDetectionJob(args: StopEntitiesDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopEntitiesDetectionJobCommandOutput) => void): void;
            /**
                * <p>Stops an events detection job in progress.</p>
                */
            stopEventsDetectionJob(args: StopEventsDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<StopEventsDetectionJobCommandOutput>;
            stopEventsDetectionJob(args: StopEventsDetectionJobCommandInput, cb: (err: any, data?: StopEventsDetectionJobCommandOutput) => void): void;
            stopEventsDetectionJob(args: StopEventsDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopEventsDetectionJobCommandOutput) => void): void;
            /**
                * <p>Stops a key phrases detection job in progress.</p>
                *          <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put
                *       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it
                *       is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the
                *         <code>STOPPED</code> state.</p>
                *          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the
                *         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400
                *       Internal Request Exception. </p>
                *          <p>When a job is stopped, any documents already processed are written to the output
                *       location.</p>
                */
            stopKeyPhrasesDetectionJob(args: StopKeyPhrasesDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<StopKeyPhrasesDetectionJobCommandOutput>;
            stopKeyPhrasesDetectionJob(args: StopKeyPhrasesDetectionJobCommandInput, cb: (err: any, data?: StopKeyPhrasesDetectionJobCommandOutput) => void): void;
            stopKeyPhrasesDetectionJob(args: StopKeyPhrasesDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopKeyPhrasesDetectionJobCommandOutput) => void): void;
            /**
                * <p>Stops a PII entities detection job in progress.</p>
                */
            stopPiiEntitiesDetectionJob(args: StopPiiEntitiesDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<StopPiiEntitiesDetectionJobCommandOutput>;
            stopPiiEntitiesDetectionJob(args: StopPiiEntitiesDetectionJobCommandInput, cb: (err: any, data?: StopPiiEntitiesDetectionJobCommandOutput) => void): void;
            stopPiiEntitiesDetectionJob(args: StopPiiEntitiesDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopPiiEntitiesDetectionJobCommandOutput) => void): void;
            /**
                * <p>Stops a sentiment detection job in progress.</p>
                *          <p>If the job state is <code>IN_PROGRESS</code>, the job is marked for termination and put
                *       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it
                *       is put into the <code>COMPLETED</code> state; otherwise the job is be stopped and put into the
                *         <code>STOPPED</code> state.</p>
                *          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the
                *         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400
                *       Internal Request Exception. </p>
                *          <p>When a job is stopped, any documents already processed are written to the output
                *       location.</p>
                */
            stopSentimentDetectionJob(args: StopSentimentDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<StopSentimentDetectionJobCommandOutput>;
            stopSentimentDetectionJob(args: StopSentimentDetectionJobCommandInput, cb: (err: any, data?: StopSentimentDetectionJobCommandOutput) => void): void;
            stopSentimentDetectionJob(args: StopSentimentDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopSentimentDetectionJobCommandOutput) => void): void;
            /**
                * <p>Stops a targeted sentiment detection job in progress.</p>
                *          <p>If the job state is <code>IN_PROGRESS</code>, the job is marked for termination and put
                *       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it
                *       is put into the <code>COMPLETED</code> state; otherwise the job is be stopped and put into the
                *       <code>STOPPED</code> state.</p>
                *          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the
                *       <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400
                *       Internal Request Exception. </p>
                *          <p>When a job is stopped, any documents already processed are written to the output
                *       location.</p>
                */
            stopTargetedSentimentDetectionJob(args: StopTargetedSentimentDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<StopTargetedSentimentDetectionJobCommandOutput>;
            stopTargetedSentimentDetectionJob(args: StopTargetedSentimentDetectionJobCommandInput, cb: (err: any, data?: StopTargetedSentimentDetectionJobCommandOutput) => void): void;
            stopTargetedSentimentDetectionJob(args: StopTargetedSentimentDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopTargetedSentimentDetectionJobCommandOutput) => void): void;
            /**
                * <p>Stops a document classifier training job while in progress.</p>
                *          <p>If the training job state is <code>TRAINING</code>, the job is marked for termination and
                *       put into the <code>STOP_REQUESTED</code> state. If the training job completes before it can be
                *       stopped, it is put into the <code>TRAINED</code>; otherwise the training job is stopped and
                *       put into the <code>STOPPED</code> state and the service sends back an HTTP 200 response with
                *       an empty HTTP body. </p>
                */
            stopTrainingDocumentClassifier(args: StopTrainingDocumentClassifierCommandInput, options?: __HttpHandlerOptions): Promise<StopTrainingDocumentClassifierCommandOutput>;
            stopTrainingDocumentClassifier(args: StopTrainingDocumentClassifierCommandInput, cb: (err: any, data?: StopTrainingDocumentClassifierCommandOutput) => void): void;
            stopTrainingDocumentClassifier(args: StopTrainingDocumentClassifierCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopTrainingDocumentClassifierCommandOutput) => void): void;
            /**
                * <p>Stops an entity recognizer training job while in progress.</p>
                *          <p>If the training job state is <code>TRAINING</code>, the job is marked for termination and
                *       put into the <code>STOP_REQUESTED</code> state. If the training job completes before it can be
                *       stopped, it is put into the <code>TRAINED</code>; otherwise the training job is stopped and
                *       putted into the <code>STOPPED</code> state and the service sends back an HTTP 200 response
                *       with an empty HTTP body.</p>
                */
            stopTrainingEntityRecognizer(args: StopTrainingEntityRecognizerCommandInput, options?: __HttpHandlerOptions): Promise<StopTrainingEntityRecognizerCommandOutput>;
            stopTrainingEntityRecognizer(args: StopTrainingEntityRecognizerCommandInput, cb: (err: any, data?: StopTrainingEntityRecognizerCommandOutput) => void): void;
            stopTrainingEntityRecognizer(args: StopTrainingEntityRecognizerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopTrainingEntityRecognizerCommandOutput) => void): void;
            /**
                * <p>Associates a specific tag with an Amazon Comprehend resource. A tag is a key-value pair
                *       that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with
                *       "Sales" as the key might be added to a resource to indicate its use by the sales department.
                *     </p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes a specific tag associated with an Amazon Comprehend resource. </p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates information about the specified endpoint.
                *       For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>.</p>
                */
            updateEndpoint(args: UpdateEndpointCommandInput, options?: __HttpHandlerOptions): Promise<UpdateEndpointCommandOutput>;
            updateEndpoint(args: UpdateEndpointCommandInput, cb: (err: any, data?: UpdateEndpointCommandOutput) => void): void;
            updateEndpoint(args: UpdateEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateEndpointCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/BatchDetectDominantLanguageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { BatchDetectDominantLanguageRequest, BatchDetectDominantLanguageResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface BatchDetectDominantLanguageCommandInput extends BatchDetectDominantLanguageRequest {
    }
    export interface BatchDetectDominantLanguageCommandOutput extends BatchDetectDominantLanguageResponse, __MetadataBearer {
    }
    /**
        * <p>Determines the dominant language of the input text for a batch of documents. For a list
        *       of languages that Amazon Comprehend can detect, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html">Amazon Comprehend Supported Languages</a>.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, BatchDetectDominantLanguageCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, BatchDetectDominantLanguageCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new BatchDetectDominantLanguageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDetectDominantLanguageCommandInput} for command's `input` shape.
        * @see {@link BatchDetectDominantLanguageCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class BatchDetectDominantLanguageCommand extends $Command<BatchDetectDominantLanguageCommandInput, BatchDetectDominantLanguageCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: BatchDetectDominantLanguageCommandInput;
            constructor(input: BatchDetectDominantLanguageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDetectDominantLanguageCommandInput, BatchDetectDominantLanguageCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/BatchDetectEntitiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { BatchDetectEntitiesRequest, BatchDetectEntitiesResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface BatchDetectEntitiesCommandInput extends BatchDetectEntitiesRequest {
    }
    export interface BatchDetectEntitiesCommandOutput extends BatchDetectEntitiesResponse, __MetadataBearer {
    }
    /**
        * <p>Inspects the text of a batch of documents for named entities and returns information
        *       about them. For more information about named entities, see <a>how-entities</a>
        *          </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, BatchDetectEntitiesCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, BatchDetectEntitiesCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new BatchDetectEntitiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDetectEntitiesCommandInput} for command's `input` shape.
        * @see {@link BatchDetectEntitiesCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class BatchDetectEntitiesCommand extends $Command<BatchDetectEntitiesCommandInput, BatchDetectEntitiesCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: BatchDetectEntitiesCommandInput;
            constructor(input: BatchDetectEntitiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDetectEntitiesCommandInput, BatchDetectEntitiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/BatchDetectKeyPhrasesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { BatchDetectKeyPhrasesRequest, BatchDetectKeyPhrasesResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface BatchDetectKeyPhrasesCommandInput extends BatchDetectKeyPhrasesRequest {
    }
    export interface BatchDetectKeyPhrasesCommandOutput extends BatchDetectKeyPhrasesResponse, __MetadataBearer {
    }
    /**
        * <p>Detects the key noun phrases found in a batch of documents.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, BatchDetectKeyPhrasesCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, BatchDetectKeyPhrasesCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new BatchDetectKeyPhrasesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDetectKeyPhrasesCommandInput} for command's `input` shape.
        * @see {@link BatchDetectKeyPhrasesCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class BatchDetectKeyPhrasesCommand extends $Command<BatchDetectKeyPhrasesCommandInput, BatchDetectKeyPhrasesCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: BatchDetectKeyPhrasesCommandInput;
            constructor(input: BatchDetectKeyPhrasesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDetectKeyPhrasesCommandInput, BatchDetectKeyPhrasesCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/BatchDetectSentimentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { BatchDetectSentimentRequest, BatchDetectSentimentResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface BatchDetectSentimentCommandInput extends BatchDetectSentimentRequest {
    }
    export interface BatchDetectSentimentCommandOutput extends BatchDetectSentimentResponse, __MetadataBearer {
    }
    /**
        * <p>Inspects a batch of documents and returns an inference of the prevailing sentiment,
        *         <code>POSITIVE</code>, <code>NEUTRAL</code>, <code>MIXED</code>, or <code>NEGATIVE</code>,
        *       in each one.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, BatchDetectSentimentCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, BatchDetectSentimentCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new BatchDetectSentimentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDetectSentimentCommandInput} for command's `input` shape.
        * @see {@link BatchDetectSentimentCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class BatchDetectSentimentCommand extends $Command<BatchDetectSentimentCommandInput, BatchDetectSentimentCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: BatchDetectSentimentCommandInput;
            constructor(input: BatchDetectSentimentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDetectSentimentCommandInput, BatchDetectSentimentCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/BatchDetectSyntaxCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { BatchDetectSyntaxRequest, BatchDetectSyntaxResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface BatchDetectSyntaxCommandInput extends BatchDetectSyntaxRequest {
    }
    export interface BatchDetectSyntaxCommandOutput extends BatchDetectSyntaxResponse, __MetadataBearer {
    }
    /**
        * <p>Inspects the text of a batch of documents for the syntax and part of speech of the words
        *       in the document and returns information about them. For more information, see <a>how-syntax</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, BatchDetectSyntaxCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, BatchDetectSyntaxCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new BatchDetectSyntaxCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDetectSyntaxCommandInput} for command's `input` shape.
        * @see {@link BatchDetectSyntaxCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class BatchDetectSyntaxCommand extends $Command<BatchDetectSyntaxCommandInput, BatchDetectSyntaxCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: BatchDetectSyntaxCommandInput;
            constructor(input: BatchDetectSyntaxCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDetectSyntaxCommandInput, BatchDetectSyntaxCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ClassifyDocumentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { ClassifyDocumentRequest, ClassifyDocumentResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface ClassifyDocumentCommandInput extends ClassifyDocumentRequest {
    }
    export interface ClassifyDocumentCommandOutput extends ClassifyDocumentResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new document classification request to analyze a single document in real-time,
        *       using a previously created and trained custom model and an endpoint.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, ClassifyDocumentCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, ClassifyDocumentCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new ClassifyDocumentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ClassifyDocumentCommandInput} for command's `input` shape.
        * @see {@link ClassifyDocumentCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class ClassifyDocumentCommand extends $Command<ClassifyDocumentCommandInput, ClassifyDocumentCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: ClassifyDocumentCommandInput;
            constructor(input: ClassifyDocumentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ClassifyDocumentCommandInput, ClassifyDocumentCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ContainsPiiEntitiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { ContainsPiiEntitiesRequest, ContainsPiiEntitiesResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface ContainsPiiEntitiesCommandInput extends ContainsPiiEntitiesRequest {
    }
    export interface ContainsPiiEntitiesCommandOutput extends ContainsPiiEntitiesResponse, __MetadataBearer {
    }
    /**
        * <p>Analyzes input text for the presence of personally identifiable information (PII) and
        *       returns the labels of identified PII entity types such as name, address, bank account number,
        *       or phone number.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, ContainsPiiEntitiesCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, ContainsPiiEntitiesCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new ContainsPiiEntitiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ContainsPiiEntitiesCommandInput} for command's `input` shape.
        * @see {@link ContainsPiiEntitiesCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class ContainsPiiEntitiesCommand extends $Command<ContainsPiiEntitiesCommandInput, ContainsPiiEntitiesCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: ContainsPiiEntitiesCommandInput;
            constructor(input: ContainsPiiEntitiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ContainsPiiEntitiesCommandInput, ContainsPiiEntitiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/CreateDocumentClassifierCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { CreateDocumentClassifierRequest, CreateDocumentClassifierResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface CreateDocumentClassifierCommandInput extends CreateDocumentClassifierRequest {
    }
    export interface CreateDocumentClassifierCommandOutput extends CreateDocumentClassifierResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new document classifier that you can use to categorize documents. To create a
        *       classifier, you provide a set of training documents that labeled with the categories that you
        *       want to use. After the classifier is trained you can use it to categorize a set of labeled
        *       documents into the categories. For more information, see <a>how-document-classification</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, CreateDocumentClassifierCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, CreateDocumentClassifierCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new CreateDocumentClassifierCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDocumentClassifierCommandInput} for command's `input` shape.
        * @see {@link CreateDocumentClassifierCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class CreateDocumentClassifierCommand extends $Command<CreateDocumentClassifierCommandInput, CreateDocumentClassifierCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: CreateDocumentClassifierCommandInput;
            constructor(input: CreateDocumentClassifierCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDocumentClassifierCommandInput, CreateDocumentClassifierCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/CreateEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { CreateEndpointRequest, CreateEndpointResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface CreateEndpointCommandInput extends CreateEndpointRequest {
    }
    export interface CreateEndpointCommandOutput extends CreateEndpointResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a model-specific endpoint for synchronous inference for a previously trained
        *       custom model
        *       For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, CreateEndpointCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, CreateEndpointCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new CreateEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateEndpointCommandInput} for command's `input` shape.
        * @see {@link CreateEndpointCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class CreateEndpointCommand extends $Command<CreateEndpointCommandInput, CreateEndpointCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: CreateEndpointCommandInput;
            constructor(input: CreateEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateEndpointCommandInput, CreateEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/CreateEntityRecognizerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { CreateEntityRecognizerRequest, CreateEntityRecognizerResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface CreateEntityRecognizerCommandInput extends CreateEntityRecognizerRequest {
    }
    export interface CreateEntityRecognizerCommandOutput extends CreateEntityRecognizerResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an entity recognizer using submitted files. After your
        *         <code>CreateEntityRecognizer</code> request is submitted, you can check job status using the
        *          API. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, CreateEntityRecognizerCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, CreateEntityRecognizerCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new CreateEntityRecognizerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateEntityRecognizerCommandInput} for command's `input` shape.
        * @see {@link CreateEntityRecognizerCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class CreateEntityRecognizerCommand extends $Command<CreateEntityRecognizerCommandInput, CreateEntityRecognizerCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: CreateEntityRecognizerCommandInput;
            constructor(input: CreateEntityRecognizerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateEntityRecognizerCommandInput, CreateEntityRecognizerCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DeleteDocumentClassifierCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DeleteDocumentClassifierRequest, DeleteDocumentClassifierResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DeleteDocumentClassifierCommandInput extends DeleteDocumentClassifierRequest {
    }
    export interface DeleteDocumentClassifierCommandOutput extends DeleteDocumentClassifierResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a previously created document classifier</p>
        *          <p>Only those classifiers that are in terminated states (IN_ERROR, TRAINED) will be deleted.
        *       If an active inference job is using the model, a <code>ResourceInUseException</code> will be
        *       returned.</p>
        *          <p>This is an asynchronous action that puts the classifier into a DELETING state, and it is
        *       then removed by a background job. Once removed, the classifier disappears from your account
        *       and is no longer available for use. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DeleteDocumentClassifierCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DeleteDocumentClassifierCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DeleteDocumentClassifierCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDocumentClassifierCommandInput} for command's `input` shape.
        * @see {@link DeleteDocumentClassifierCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DeleteDocumentClassifierCommand extends $Command<DeleteDocumentClassifierCommandInput, DeleteDocumentClassifierCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DeleteDocumentClassifierCommandInput;
            constructor(input: DeleteDocumentClassifierCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDocumentClassifierCommandInput, DeleteDocumentClassifierCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DeleteEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DeleteEndpointRequest, DeleteEndpointResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DeleteEndpointCommandInput extends DeleteEndpointRequest {
    }
    export interface DeleteEndpointCommandOutput extends DeleteEndpointResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a model-specific endpoint for a previously-trained custom model. All endpoints
        *       must be deleted in order for the model to be deleted.
        *       For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DeleteEndpointCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DeleteEndpointCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DeleteEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEndpointCommandInput} for command's `input` shape.
        * @see {@link DeleteEndpointCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DeleteEndpointCommand extends $Command<DeleteEndpointCommandInput, DeleteEndpointCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DeleteEndpointCommandInput;
            constructor(input: DeleteEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEndpointCommandInput, DeleteEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DeleteEntityRecognizerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DeleteEntityRecognizerRequest, DeleteEntityRecognizerResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DeleteEntityRecognizerCommandInput extends DeleteEntityRecognizerRequest {
    }
    export interface DeleteEntityRecognizerCommandOutput extends DeleteEntityRecognizerResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an entity recognizer.</p>
        *          <p>Only those recognizers that are in terminated states (IN_ERROR, TRAINED) will be deleted.
        *       If an active inference job is using the model, a <code>ResourceInUseException</code> will be
        *       returned.</p>
        *          <p>This is an asynchronous action that puts the recognizer into a DELETING state, and it is
        *       then removed by a background job. Once removed, the recognizer disappears from your account
        *       and is no longer available for use. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DeleteEntityRecognizerCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DeleteEntityRecognizerCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DeleteEntityRecognizerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEntityRecognizerCommandInput} for command's `input` shape.
        * @see {@link DeleteEntityRecognizerCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DeleteEntityRecognizerCommand extends $Command<DeleteEntityRecognizerCommandInput, DeleteEntityRecognizerCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DeleteEntityRecognizerCommandInput;
            constructor(input: DeleteEntityRecognizerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEntityRecognizerCommandInput, DeleteEntityRecognizerCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DeleteResourcePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DeleteResourcePolicyRequest, DeleteResourcePolicyResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DeleteResourcePolicyCommandInput extends DeleteResourcePolicyRequest {
    }
    export interface DeleteResourcePolicyCommandOutput extends DeleteResourcePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a resource-based policy that is attached to a custom model.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DeleteResourcePolicyCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DeleteResourcePolicyCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DeleteResourcePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteResourcePolicyCommandInput} for command's `input` shape.
        * @see {@link DeleteResourcePolicyCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DeleteResourcePolicyCommand extends $Command<DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DeleteResourcePolicyCommandInput;
            constructor(input: DeleteResourcePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeDocumentClassificationJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DescribeDocumentClassificationJobRequest, DescribeDocumentClassificationJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DescribeDocumentClassificationJobCommandInput extends DescribeDocumentClassificationJobRequest {
    }
    export interface DescribeDocumentClassificationJobCommandOutput extends DescribeDocumentClassificationJobResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the properties associated with a document classification job. Use this operation to
        *       get the status of a classification job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DescribeDocumentClassificationJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DescribeDocumentClassificationJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DescribeDocumentClassificationJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDocumentClassificationJobCommandInput} for command's `input` shape.
        * @see {@link DescribeDocumentClassificationJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DescribeDocumentClassificationJobCommand extends $Command<DescribeDocumentClassificationJobCommandInput, DescribeDocumentClassificationJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DescribeDocumentClassificationJobCommandInput;
            constructor(input: DescribeDocumentClassificationJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDocumentClassificationJobCommandInput, DescribeDocumentClassificationJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeDocumentClassifierCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DescribeDocumentClassifierRequest, DescribeDocumentClassifierResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DescribeDocumentClassifierCommandInput extends DescribeDocumentClassifierRequest {
    }
    export interface DescribeDocumentClassifierCommandOutput extends DescribeDocumentClassifierResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the properties associated with a document classifier.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DescribeDocumentClassifierCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DescribeDocumentClassifierCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DescribeDocumentClassifierCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDocumentClassifierCommandInput} for command's `input` shape.
        * @see {@link DescribeDocumentClassifierCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DescribeDocumentClassifierCommand extends $Command<DescribeDocumentClassifierCommandInput, DescribeDocumentClassifierCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DescribeDocumentClassifierCommandInput;
            constructor(input: DescribeDocumentClassifierCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDocumentClassifierCommandInput, DescribeDocumentClassifierCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeDominantLanguageDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DescribeDominantLanguageDetectionJobRequest, DescribeDominantLanguageDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DescribeDominantLanguageDetectionJobCommandInput extends DescribeDominantLanguageDetectionJobRequest {
    }
    export interface DescribeDominantLanguageDetectionJobCommandOutput extends DescribeDominantLanguageDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the properties associated with a dominant language detection job. Use this operation
        *       to get the status of a detection job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DescribeDominantLanguageDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DescribeDominantLanguageDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DescribeDominantLanguageDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDominantLanguageDetectionJobCommandInput} for command's `input` shape.
        * @see {@link DescribeDominantLanguageDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DescribeDominantLanguageDetectionJobCommand extends $Command<DescribeDominantLanguageDetectionJobCommandInput, DescribeDominantLanguageDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DescribeDominantLanguageDetectionJobCommandInput;
            constructor(input: DescribeDominantLanguageDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDominantLanguageDetectionJobCommandInput, DescribeDominantLanguageDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DescribeEndpointRequest, DescribeEndpointResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DescribeEndpointCommandInput extends DescribeEndpointRequest {
    }
    export interface DescribeEndpointCommandOutput extends DescribeEndpointResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the properties associated with a specific endpoint. Use this operation to get the
        *       status of an endpoint.
        *       For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DescribeEndpointCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DescribeEndpointCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DescribeEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEndpointCommandInput} for command's `input` shape.
        * @see {@link DescribeEndpointCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DescribeEndpointCommand extends $Command<DescribeEndpointCommandInput, DescribeEndpointCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DescribeEndpointCommandInput;
            constructor(input: DescribeEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEndpointCommandInput, DescribeEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeEntitiesDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DescribeEntitiesDetectionJobRequest, DescribeEntitiesDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DescribeEntitiesDetectionJobCommandInput extends DescribeEntitiesDetectionJobRequest {
    }
    export interface DescribeEntitiesDetectionJobCommandOutput extends DescribeEntitiesDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the properties associated with an entities detection job. Use this operation to get
        *       the status of a detection job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DescribeEntitiesDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DescribeEntitiesDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DescribeEntitiesDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEntitiesDetectionJobCommandInput} for command's `input` shape.
        * @see {@link DescribeEntitiesDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DescribeEntitiesDetectionJobCommand extends $Command<DescribeEntitiesDetectionJobCommandInput, DescribeEntitiesDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DescribeEntitiesDetectionJobCommandInput;
            constructor(input: DescribeEntitiesDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEntitiesDetectionJobCommandInput, DescribeEntitiesDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeEntityRecognizerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DescribeEntityRecognizerRequest, DescribeEntityRecognizerResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DescribeEntityRecognizerCommandInput extends DescribeEntityRecognizerRequest {
    }
    export interface DescribeEntityRecognizerCommandOutput extends DescribeEntityRecognizerResponse, __MetadataBearer {
    }
    /**
        * <p>Provides details about an entity recognizer including status, S3 buckets containing
        *       training data, recognizer metadata, metrics, and so on.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DescribeEntityRecognizerCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DescribeEntityRecognizerCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DescribeEntityRecognizerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEntityRecognizerCommandInput} for command's `input` shape.
        * @see {@link DescribeEntityRecognizerCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DescribeEntityRecognizerCommand extends $Command<DescribeEntityRecognizerCommandInput, DescribeEntityRecognizerCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DescribeEntityRecognizerCommandInput;
            constructor(input: DescribeEntityRecognizerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEntityRecognizerCommandInput, DescribeEntityRecognizerCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeEventsDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DescribeEventsDetectionJobRequest, DescribeEventsDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DescribeEventsDetectionJobCommandInput extends DescribeEventsDetectionJobRequest {
    }
    export interface DescribeEventsDetectionJobCommandOutput extends DescribeEventsDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the status and details of an events detection job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DescribeEventsDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DescribeEventsDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DescribeEventsDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEventsDetectionJobCommandInput} for command's `input` shape.
        * @see {@link DescribeEventsDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DescribeEventsDetectionJobCommand extends $Command<DescribeEventsDetectionJobCommandInput, DescribeEventsDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DescribeEventsDetectionJobCommandInput;
            constructor(input: DescribeEventsDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEventsDetectionJobCommandInput, DescribeEventsDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeKeyPhrasesDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DescribeKeyPhrasesDetectionJobRequest, DescribeKeyPhrasesDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DescribeKeyPhrasesDetectionJobCommandInput extends DescribeKeyPhrasesDetectionJobRequest {
    }
    export interface DescribeKeyPhrasesDetectionJobCommandOutput extends DescribeKeyPhrasesDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the properties associated with a key phrases detection job. Use this operation to get
        *       the status of a detection job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DescribeKeyPhrasesDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DescribeKeyPhrasesDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DescribeKeyPhrasesDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeKeyPhrasesDetectionJobCommandInput} for command's `input` shape.
        * @see {@link DescribeKeyPhrasesDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DescribeKeyPhrasesDetectionJobCommand extends $Command<DescribeKeyPhrasesDetectionJobCommandInput, DescribeKeyPhrasesDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DescribeKeyPhrasesDetectionJobCommandInput;
            constructor(input: DescribeKeyPhrasesDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeKeyPhrasesDetectionJobCommandInput, DescribeKeyPhrasesDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribePiiEntitiesDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DescribePiiEntitiesDetectionJobRequest, DescribePiiEntitiesDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DescribePiiEntitiesDetectionJobCommandInput extends DescribePiiEntitiesDetectionJobRequest {
    }
    export interface DescribePiiEntitiesDetectionJobCommandOutput extends DescribePiiEntitiesDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the properties associated with a PII entities detection job. For example, you can use
        *       this operation to get the job status.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DescribePiiEntitiesDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DescribePiiEntitiesDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DescribePiiEntitiesDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePiiEntitiesDetectionJobCommandInput} for command's `input` shape.
        * @see {@link DescribePiiEntitiesDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DescribePiiEntitiesDetectionJobCommand extends $Command<DescribePiiEntitiesDetectionJobCommandInput, DescribePiiEntitiesDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DescribePiiEntitiesDetectionJobCommandInput;
            constructor(input: DescribePiiEntitiesDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePiiEntitiesDetectionJobCommandInput, DescribePiiEntitiesDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeResourcePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DescribeResourcePolicyRequest, DescribeResourcePolicyResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DescribeResourcePolicyCommandInput extends DescribeResourcePolicyRequest {
    }
    export interface DescribeResourcePolicyCommandOutput extends DescribeResourcePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the details of a resource-based policy that is attached to a custom model, including
        *       the JSON body of the policy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DescribeResourcePolicyCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DescribeResourcePolicyCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DescribeResourcePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeResourcePolicyCommandInput} for command's `input` shape.
        * @see {@link DescribeResourcePolicyCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DescribeResourcePolicyCommand extends $Command<DescribeResourcePolicyCommandInput, DescribeResourcePolicyCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DescribeResourcePolicyCommandInput;
            constructor(input: DescribeResourcePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeResourcePolicyCommandInput, DescribeResourcePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeSentimentDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DescribeSentimentDetectionJobRequest, DescribeSentimentDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DescribeSentimentDetectionJobCommandInput extends DescribeSentimentDetectionJobRequest {
    }
    export interface DescribeSentimentDetectionJobCommandOutput extends DescribeSentimentDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the properties associated with a sentiment detection job. Use this operation to get
        *       the status of a detection job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DescribeSentimentDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DescribeSentimentDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DescribeSentimentDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeSentimentDetectionJobCommandInput} for command's `input` shape.
        * @see {@link DescribeSentimentDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DescribeSentimentDetectionJobCommand extends $Command<DescribeSentimentDetectionJobCommandInput, DescribeSentimentDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DescribeSentimentDetectionJobCommandInput;
            constructor(input: DescribeSentimentDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeSentimentDetectionJobCommandInput, DescribeSentimentDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeTargetedSentimentDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DescribeTargetedSentimentDetectionJobRequest, DescribeTargetedSentimentDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DescribeTargetedSentimentDetectionJobCommandInput extends DescribeTargetedSentimentDetectionJobRequest {
    }
    export interface DescribeTargetedSentimentDetectionJobCommandOutput extends DescribeTargetedSentimentDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the properties associated with a targeted sentiment detection job. Use this operation
        *       to get the status of the job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DescribeTargetedSentimentDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DescribeTargetedSentimentDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DescribeTargetedSentimentDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeTargetedSentimentDetectionJobCommandInput} for command's `input` shape.
        * @see {@link DescribeTargetedSentimentDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DescribeTargetedSentimentDetectionJobCommand extends $Command<DescribeTargetedSentimentDetectionJobCommandInput, DescribeTargetedSentimentDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DescribeTargetedSentimentDetectionJobCommandInput;
            constructor(input: DescribeTargetedSentimentDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeTargetedSentimentDetectionJobCommandInput, DescribeTargetedSentimentDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeTopicsDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DescribeTopicsDetectionJobRequest, DescribeTopicsDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DescribeTopicsDetectionJobCommandInput extends DescribeTopicsDetectionJobRequest {
    }
    export interface DescribeTopicsDetectionJobCommandOutput extends DescribeTopicsDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the properties associated with a topic detection job. Use this operation to get
        *       the status of a detection job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DescribeTopicsDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DescribeTopicsDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DescribeTopicsDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeTopicsDetectionJobCommandInput} for command's `input` shape.
        * @see {@link DescribeTopicsDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DescribeTopicsDetectionJobCommand extends $Command<DescribeTopicsDetectionJobCommandInput, DescribeTopicsDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DescribeTopicsDetectionJobCommandInput;
            constructor(input: DescribeTopicsDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeTopicsDetectionJobCommandInput, DescribeTopicsDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DetectDominantLanguageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DetectDominantLanguageRequest, DetectDominantLanguageResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DetectDominantLanguageCommandInput extends DetectDominantLanguageRequest {
    }
    export interface DetectDominantLanguageCommandOutput extends DetectDominantLanguageResponse, __MetadataBearer {
    }
    /**
        * <p>Determines the dominant language of the input text. For a list of languages that Amazon
        *       Comprehend can detect, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html">Amazon Comprehend Supported Languages</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DetectDominantLanguageCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DetectDominantLanguageCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DetectDominantLanguageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetectDominantLanguageCommandInput} for command's `input` shape.
        * @see {@link DetectDominantLanguageCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DetectDominantLanguageCommand extends $Command<DetectDominantLanguageCommandInput, DetectDominantLanguageCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DetectDominantLanguageCommandInput;
            constructor(input: DetectDominantLanguageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetectDominantLanguageCommandInput, DetectDominantLanguageCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DetectEntitiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DetectEntitiesRequest, DetectEntitiesResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DetectEntitiesCommandInput extends DetectEntitiesRequest {
    }
    export interface DetectEntitiesCommandOutput extends DetectEntitiesResponse, __MetadataBearer {
    }
    /**
        * <p>Inspects text for named entities, and returns information about them. For more
        *       information, about named entities, see <a>how-entities</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DetectEntitiesCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DetectEntitiesCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DetectEntitiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetectEntitiesCommandInput} for command's `input` shape.
        * @see {@link DetectEntitiesCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DetectEntitiesCommand extends $Command<DetectEntitiesCommandInput, DetectEntitiesCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DetectEntitiesCommandInput;
            constructor(input: DetectEntitiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetectEntitiesCommandInput, DetectEntitiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DetectKeyPhrasesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DetectKeyPhrasesRequest, DetectKeyPhrasesResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DetectKeyPhrasesCommandInput extends DetectKeyPhrasesRequest {
    }
    export interface DetectKeyPhrasesCommandOutput extends DetectKeyPhrasesResponse, __MetadataBearer {
    }
    /**
        * <p>Detects the key noun phrases found in the text. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DetectKeyPhrasesCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DetectKeyPhrasesCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DetectKeyPhrasesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetectKeyPhrasesCommandInput} for command's `input` shape.
        * @see {@link DetectKeyPhrasesCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DetectKeyPhrasesCommand extends $Command<DetectKeyPhrasesCommandInput, DetectKeyPhrasesCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DetectKeyPhrasesCommandInput;
            constructor(input: DetectKeyPhrasesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetectKeyPhrasesCommandInput, DetectKeyPhrasesCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DetectPiiEntitiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DetectPiiEntitiesRequest, DetectPiiEntitiesResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DetectPiiEntitiesCommandInput extends DetectPiiEntitiesRequest {
    }
    export interface DetectPiiEntitiesCommandOutput extends DetectPiiEntitiesResponse, __MetadataBearer {
    }
    /**
        * <p>Inspects the input text for entities that contain personally identifiable information
        *       (PII) and returns information about them.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DetectPiiEntitiesCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DetectPiiEntitiesCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DetectPiiEntitiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetectPiiEntitiesCommandInput} for command's `input` shape.
        * @see {@link DetectPiiEntitiesCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DetectPiiEntitiesCommand extends $Command<DetectPiiEntitiesCommandInput, DetectPiiEntitiesCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DetectPiiEntitiesCommandInput;
            constructor(input: DetectPiiEntitiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetectPiiEntitiesCommandInput, DetectPiiEntitiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DetectSentimentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DetectSentimentRequest, DetectSentimentResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DetectSentimentCommandInput extends DetectSentimentRequest {
    }
    export interface DetectSentimentCommandOutput extends DetectSentimentResponse, __MetadataBearer {
    }
    /**
        * <p>Inspects text and returns an inference of the prevailing sentiment
        *         (<code>POSITIVE</code>, <code>NEUTRAL</code>, <code>MIXED</code>, or <code>NEGATIVE</code>). </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DetectSentimentCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DetectSentimentCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DetectSentimentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetectSentimentCommandInput} for command's `input` shape.
        * @see {@link DetectSentimentCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DetectSentimentCommand extends $Command<DetectSentimentCommandInput, DetectSentimentCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DetectSentimentCommandInput;
            constructor(input: DetectSentimentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetectSentimentCommandInput, DetectSentimentCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DetectSyntaxCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { DetectSyntaxRequest, DetectSyntaxResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface DetectSyntaxCommandInput extends DetectSyntaxRequest {
    }
    export interface DetectSyntaxCommandOutput extends DetectSyntaxResponse, __MetadataBearer {
    }
    /**
        * <p>Inspects text for syntax and the part of speech of words in the document. For more
        *       information, <a>how-syntax</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, DetectSyntaxCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, DetectSyntaxCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new DetectSyntaxCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetectSyntaxCommandInput} for command's `input` shape.
        * @see {@link DetectSyntaxCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class DetectSyntaxCommand extends $Command<DetectSyntaxCommandInput, DetectSyntaxCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: DetectSyntaxCommandInput;
            constructor(input: DetectSyntaxCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetectSyntaxCommandInput, DetectSyntaxCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ImportModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { ImportModelRequest, ImportModelResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface ImportModelCommandInput extends ImportModelRequest {
    }
    export interface ImportModelCommandOutput extends ImportModelResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new custom model that replicates a source custom model that you import. The
        *       source model can be in your AWS account or another one.</p>
        *          <p>If the source model is in another AWS account, then it must have a resource-based policy
        *       that authorizes you to import it.</p>
        *          <p>The source model must be in the same AWS region that you're using when you import. You
        *       can't import a model that's in a different region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, ImportModelCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, ImportModelCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new ImportModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ImportModelCommandInput} for command's `input` shape.
        * @see {@link ImportModelCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class ImportModelCommand extends $Command<ImportModelCommandInput, ImportModelCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: ImportModelCommandInput;
            constructor(input: ImportModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ImportModelCommandInput, ImportModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListDocumentClassificationJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { ListDocumentClassificationJobsRequest, ListDocumentClassificationJobsResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface ListDocumentClassificationJobsCommandInput extends ListDocumentClassificationJobsRequest {
    }
    export interface ListDocumentClassificationJobsCommandOutput extends ListDocumentClassificationJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of the documentation classification jobs that you have submitted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, ListDocumentClassificationJobsCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, ListDocumentClassificationJobsCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new ListDocumentClassificationJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDocumentClassificationJobsCommandInput} for command's `input` shape.
        * @see {@link ListDocumentClassificationJobsCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class ListDocumentClassificationJobsCommand extends $Command<ListDocumentClassificationJobsCommandInput, ListDocumentClassificationJobsCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: ListDocumentClassificationJobsCommandInput;
            constructor(input: ListDocumentClassificationJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDocumentClassificationJobsCommandInput, ListDocumentClassificationJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListDocumentClassifiersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { ListDocumentClassifiersRequest, ListDocumentClassifiersResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface ListDocumentClassifiersCommandInput extends ListDocumentClassifiersRequest {
    }
    export interface ListDocumentClassifiersCommandOutput extends ListDocumentClassifiersResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of the document classifiers that you have created.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, ListDocumentClassifiersCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, ListDocumentClassifiersCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new ListDocumentClassifiersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDocumentClassifiersCommandInput} for command's `input` shape.
        * @see {@link ListDocumentClassifiersCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class ListDocumentClassifiersCommand extends $Command<ListDocumentClassifiersCommandInput, ListDocumentClassifiersCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: ListDocumentClassifiersCommandInput;
            constructor(input: ListDocumentClassifiersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDocumentClassifiersCommandInput, ListDocumentClassifiersCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListDocumentClassifierSummariesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { ListDocumentClassifierSummariesRequest, ListDocumentClassifierSummariesResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface ListDocumentClassifierSummariesCommandInput extends ListDocumentClassifierSummariesRequest {
    }
    export interface ListDocumentClassifierSummariesCommandOutput extends ListDocumentClassifierSummariesResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of summaries of the document classifiers that you have created</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, ListDocumentClassifierSummariesCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, ListDocumentClassifierSummariesCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new ListDocumentClassifierSummariesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDocumentClassifierSummariesCommandInput} for command's `input` shape.
        * @see {@link ListDocumentClassifierSummariesCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class ListDocumentClassifierSummariesCommand extends $Command<ListDocumentClassifierSummariesCommandInput, ListDocumentClassifierSummariesCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: ListDocumentClassifierSummariesCommandInput;
            constructor(input: ListDocumentClassifierSummariesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDocumentClassifierSummariesCommandInput, ListDocumentClassifierSummariesCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListDominantLanguageDetectionJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { ListDominantLanguageDetectionJobsRequest, ListDominantLanguageDetectionJobsResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface ListDominantLanguageDetectionJobsCommandInput extends ListDominantLanguageDetectionJobsRequest {
    }
    export interface ListDominantLanguageDetectionJobsCommandOutput extends ListDominantLanguageDetectionJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of the dominant language detection jobs that you have submitted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, ListDominantLanguageDetectionJobsCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, ListDominantLanguageDetectionJobsCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new ListDominantLanguageDetectionJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDominantLanguageDetectionJobsCommandInput} for command's `input` shape.
        * @see {@link ListDominantLanguageDetectionJobsCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class ListDominantLanguageDetectionJobsCommand extends $Command<ListDominantLanguageDetectionJobsCommandInput, ListDominantLanguageDetectionJobsCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: ListDominantLanguageDetectionJobsCommandInput;
            constructor(input: ListDominantLanguageDetectionJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDominantLanguageDetectionJobsCommandInput, ListDominantLanguageDetectionJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListEndpointsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { ListEndpointsRequest, ListEndpointsResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface ListEndpointsCommandInput extends ListEndpointsRequest {
    }
    export interface ListEndpointsCommandOutput extends ListEndpointsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of all existing endpoints that you've created.
        *       For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, ListEndpointsCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, ListEndpointsCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new ListEndpointsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEndpointsCommandInput} for command's `input` shape.
        * @see {@link ListEndpointsCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class ListEndpointsCommand extends $Command<ListEndpointsCommandInput, ListEndpointsCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: ListEndpointsCommandInput;
            constructor(input: ListEndpointsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEndpointsCommandInput, ListEndpointsCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListEntitiesDetectionJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { ListEntitiesDetectionJobsRequest, ListEntitiesDetectionJobsResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface ListEntitiesDetectionJobsCommandInput extends ListEntitiesDetectionJobsRequest {
    }
    export interface ListEntitiesDetectionJobsCommandOutput extends ListEntitiesDetectionJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of the entity detection jobs that you have submitted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, ListEntitiesDetectionJobsCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, ListEntitiesDetectionJobsCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new ListEntitiesDetectionJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEntitiesDetectionJobsCommandInput} for command's `input` shape.
        * @see {@link ListEntitiesDetectionJobsCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class ListEntitiesDetectionJobsCommand extends $Command<ListEntitiesDetectionJobsCommandInput, ListEntitiesDetectionJobsCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: ListEntitiesDetectionJobsCommandInput;
            constructor(input: ListEntitiesDetectionJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEntitiesDetectionJobsCommandInput, ListEntitiesDetectionJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListEntityRecognizersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { ListEntityRecognizersRequest, ListEntityRecognizersResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface ListEntityRecognizersCommandInput extends ListEntityRecognizersRequest {
    }
    export interface ListEntityRecognizersCommandOutput extends ListEntityRecognizersResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of the properties of all entity recognizers that you created, including
        *       recognizers currently in training. Allows you to filter the list of recognizers based on
        *       criteria such as status and submission time. This call returns up to 500 entity recognizers in
        *       the list, with a default number of 100 recognizers in the list.</p>
        *          <p>The results of this list are not in any particular order. Please get the list and sort
        *       locally if needed.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, ListEntityRecognizersCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, ListEntityRecognizersCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new ListEntityRecognizersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEntityRecognizersCommandInput} for command's `input` shape.
        * @see {@link ListEntityRecognizersCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class ListEntityRecognizersCommand extends $Command<ListEntityRecognizersCommandInput, ListEntityRecognizersCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: ListEntityRecognizersCommandInput;
            constructor(input: ListEntityRecognizersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEntityRecognizersCommandInput, ListEntityRecognizersCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListEntityRecognizerSummariesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { ListEntityRecognizerSummariesRequest, ListEntityRecognizerSummariesResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface ListEntityRecognizerSummariesCommandInput extends ListEntityRecognizerSummariesRequest {
    }
    export interface ListEntityRecognizerSummariesCommandOutput extends ListEntityRecognizerSummariesResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of summaries for the entity recognizers that you have created.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, ListEntityRecognizerSummariesCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, ListEntityRecognizerSummariesCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new ListEntityRecognizerSummariesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEntityRecognizerSummariesCommandInput} for command's `input` shape.
        * @see {@link ListEntityRecognizerSummariesCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class ListEntityRecognizerSummariesCommand extends $Command<ListEntityRecognizerSummariesCommandInput, ListEntityRecognizerSummariesCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: ListEntityRecognizerSummariesCommandInput;
            constructor(input: ListEntityRecognizerSummariesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEntityRecognizerSummariesCommandInput, ListEntityRecognizerSummariesCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListEventsDetectionJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { ListEventsDetectionJobsRequest, ListEventsDetectionJobsResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface ListEventsDetectionJobsCommandInput extends ListEventsDetectionJobsRequest {
    }
    export interface ListEventsDetectionJobsCommandOutput extends ListEventsDetectionJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of the events detection jobs that you have submitted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, ListEventsDetectionJobsCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, ListEventsDetectionJobsCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new ListEventsDetectionJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEventsDetectionJobsCommandInput} for command's `input` shape.
        * @see {@link ListEventsDetectionJobsCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class ListEventsDetectionJobsCommand extends $Command<ListEventsDetectionJobsCommandInput, ListEventsDetectionJobsCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: ListEventsDetectionJobsCommandInput;
            constructor(input: ListEventsDetectionJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEventsDetectionJobsCommandInput, ListEventsDetectionJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListKeyPhrasesDetectionJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { ListKeyPhrasesDetectionJobsRequest, ListKeyPhrasesDetectionJobsResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface ListKeyPhrasesDetectionJobsCommandInput extends ListKeyPhrasesDetectionJobsRequest {
    }
    export interface ListKeyPhrasesDetectionJobsCommandOutput extends ListKeyPhrasesDetectionJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Get a list of key phrase detection jobs that you have submitted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, ListKeyPhrasesDetectionJobsCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, ListKeyPhrasesDetectionJobsCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new ListKeyPhrasesDetectionJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListKeyPhrasesDetectionJobsCommandInput} for command's `input` shape.
        * @see {@link ListKeyPhrasesDetectionJobsCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class ListKeyPhrasesDetectionJobsCommand extends $Command<ListKeyPhrasesDetectionJobsCommandInput, ListKeyPhrasesDetectionJobsCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: ListKeyPhrasesDetectionJobsCommandInput;
            constructor(input: ListKeyPhrasesDetectionJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListKeyPhrasesDetectionJobsCommandInput, ListKeyPhrasesDetectionJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListPiiEntitiesDetectionJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { ListPiiEntitiesDetectionJobsRequest, ListPiiEntitiesDetectionJobsResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface ListPiiEntitiesDetectionJobsCommandInput extends ListPiiEntitiesDetectionJobsRequest {
    }
    export interface ListPiiEntitiesDetectionJobsCommandOutput extends ListPiiEntitiesDetectionJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of the PII entity detection jobs that you have submitted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, ListPiiEntitiesDetectionJobsCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, ListPiiEntitiesDetectionJobsCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new ListPiiEntitiesDetectionJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPiiEntitiesDetectionJobsCommandInput} for command's `input` shape.
        * @see {@link ListPiiEntitiesDetectionJobsCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class ListPiiEntitiesDetectionJobsCommand extends $Command<ListPiiEntitiesDetectionJobsCommandInput, ListPiiEntitiesDetectionJobsCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: ListPiiEntitiesDetectionJobsCommandInput;
            constructor(input: ListPiiEntitiesDetectionJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPiiEntitiesDetectionJobsCommandInput, ListPiiEntitiesDetectionJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListSentimentDetectionJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { ListSentimentDetectionJobsRequest, ListSentimentDetectionJobsResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface ListSentimentDetectionJobsCommandInput extends ListSentimentDetectionJobsRequest {
    }
    export interface ListSentimentDetectionJobsCommandOutput extends ListSentimentDetectionJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of sentiment detection jobs that you have submitted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, ListSentimentDetectionJobsCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, ListSentimentDetectionJobsCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new ListSentimentDetectionJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSentimentDetectionJobsCommandInput} for command's `input` shape.
        * @see {@link ListSentimentDetectionJobsCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class ListSentimentDetectionJobsCommand extends $Command<ListSentimentDetectionJobsCommandInput, ListSentimentDetectionJobsCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: ListSentimentDetectionJobsCommandInput;
            constructor(input: ListSentimentDetectionJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSentimentDetectionJobsCommandInput, ListSentimentDetectionJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all tags associated with a given Amazon Comprehend resource. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, ListTagsForResourceCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, ListTagsForResourceCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListTargetedSentimentDetectionJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { ListTargetedSentimentDetectionJobsRequest, ListTargetedSentimentDetectionJobsResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface ListTargetedSentimentDetectionJobsCommandInput extends ListTargetedSentimentDetectionJobsRequest {
    }
    export interface ListTargetedSentimentDetectionJobsCommandOutput extends ListTargetedSentimentDetectionJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of targeted sentiment detection jobs that you have submitted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, ListTargetedSentimentDetectionJobsCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, ListTargetedSentimentDetectionJobsCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new ListTargetedSentimentDetectionJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTargetedSentimentDetectionJobsCommandInput} for command's `input` shape.
        * @see {@link ListTargetedSentimentDetectionJobsCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class ListTargetedSentimentDetectionJobsCommand extends $Command<ListTargetedSentimentDetectionJobsCommandInput, ListTargetedSentimentDetectionJobsCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: ListTargetedSentimentDetectionJobsCommandInput;
            constructor(input: ListTargetedSentimentDetectionJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTargetedSentimentDetectionJobsCommandInput, ListTargetedSentimentDetectionJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListTopicsDetectionJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { ListTopicsDetectionJobsRequest, ListTopicsDetectionJobsResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface ListTopicsDetectionJobsCommandInput extends ListTopicsDetectionJobsRequest {
    }
    export interface ListTopicsDetectionJobsCommandOutput extends ListTopicsDetectionJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of the topic detection jobs that you have submitted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, ListTopicsDetectionJobsCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, ListTopicsDetectionJobsCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new ListTopicsDetectionJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTopicsDetectionJobsCommandInput} for command's `input` shape.
        * @see {@link ListTopicsDetectionJobsCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class ListTopicsDetectionJobsCommand extends $Command<ListTopicsDetectionJobsCommandInput, ListTopicsDetectionJobsCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: ListTopicsDetectionJobsCommandInput;
            constructor(input: ListTopicsDetectionJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTopicsDetectionJobsCommandInput, ListTopicsDetectionJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/PutResourcePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { PutResourcePolicyRequest, PutResourcePolicyResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface PutResourcePolicyCommandInput extends PutResourcePolicyRequest {
    }
    export interface PutResourcePolicyCommandOutput extends PutResourcePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Attaches a resource-based policy to a custom model. You can use this policy to authorize
        *       an entity in another AWS account to import the custom model, which replicates it in Amazon
        *       Comprehend in their account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, PutResourcePolicyCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, PutResourcePolicyCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new PutResourcePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutResourcePolicyCommandInput} for command's `input` shape.
        * @see {@link PutResourcePolicyCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class PutResourcePolicyCommand extends $Command<PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: PutResourcePolicyCommandInput;
            constructor(input: PutResourcePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartDocumentClassificationJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { StartDocumentClassificationJobRequest, StartDocumentClassificationJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface StartDocumentClassificationJobCommandInput extends StartDocumentClassificationJobRequest {
    }
    export interface StartDocumentClassificationJobCommandOutput extends StartDocumentClassificationJobResponse, __MetadataBearer {
    }
    /**
        * <p>Starts an asynchronous document classification job. Use the  operation to track the progress of the
        *       job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, StartDocumentClassificationJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, StartDocumentClassificationJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new StartDocumentClassificationJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartDocumentClassificationJobCommandInput} for command's `input` shape.
        * @see {@link StartDocumentClassificationJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class StartDocumentClassificationJobCommand extends $Command<StartDocumentClassificationJobCommandInput, StartDocumentClassificationJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: StartDocumentClassificationJobCommandInput;
            constructor(input: StartDocumentClassificationJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartDocumentClassificationJobCommandInput, StartDocumentClassificationJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartDominantLanguageDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { StartDominantLanguageDetectionJobRequest, StartDominantLanguageDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface StartDominantLanguageDetectionJobCommandInput extends StartDominantLanguageDetectionJobRequest {
    }
    export interface StartDominantLanguageDetectionJobCommandOutput extends StartDominantLanguageDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Starts an asynchronous dominant language detection job for a collection of documents. Use
        *       the  operation to track the status
        *       of a job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, StartDominantLanguageDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, StartDominantLanguageDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new StartDominantLanguageDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartDominantLanguageDetectionJobCommandInput} for command's `input` shape.
        * @see {@link StartDominantLanguageDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class StartDominantLanguageDetectionJobCommand extends $Command<StartDominantLanguageDetectionJobCommandInput, StartDominantLanguageDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: StartDominantLanguageDetectionJobCommandInput;
            constructor(input: StartDominantLanguageDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartDominantLanguageDetectionJobCommandInput, StartDominantLanguageDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartEntitiesDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { StartEntitiesDetectionJobRequest, StartEntitiesDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface StartEntitiesDetectionJobCommandInput extends StartEntitiesDetectionJobRequest {
    }
    export interface StartEntitiesDetectionJobCommandOutput extends StartEntitiesDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Starts an asynchronous entity detection job for a collection of documents. Use the  operation to track the status of a job.</p>
        *          <p>This API can be used for either standard entity detection or custom entity recognition. In
        *       order to be used for custom entity recognition, the optional <code>EntityRecognizerArn</code>
        *       must be used in order to provide access to the recognizer being used to detect the custom
        *       entity.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, StartEntitiesDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, StartEntitiesDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new StartEntitiesDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartEntitiesDetectionJobCommandInput} for command's `input` shape.
        * @see {@link StartEntitiesDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class StartEntitiesDetectionJobCommand extends $Command<StartEntitiesDetectionJobCommandInput, StartEntitiesDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: StartEntitiesDetectionJobCommandInput;
            constructor(input: StartEntitiesDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartEntitiesDetectionJobCommandInput, StartEntitiesDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartEventsDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { StartEventsDetectionJobRequest, StartEventsDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface StartEventsDetectionJobCommandInput extends StartEventsDetectionJobRequest {
    }
    export interface StartEventsDetectionJobCommandOutput extends StartEventsDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Starts an asynchronous event detection job for a collection of documents.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, StartEventsDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, StartEventsDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new StartEventsDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartEventsDetectionJobCommandInput} for command's `input` shape.
        * @see {@link StartEventsDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class StartEventsDetectionJobCommand extends $Command<StartEventsDetectionJobCommandInput, StartEventsDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: StartEventsDetectionJobCommandInput;
            constructor(input: StartEventsDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartEventsDetectionJobCommandInput, StartEventsDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartKeyPhrasesDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { StartKeyPhrasesDetectionJobRequest, StartKeyPhrasesDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface StartKeyPhrasesDetectionJobCommandInput extends StartKeyPhrasesDetectionJobRequest {
    }
    export interface StartKeyPhrasesDetectionJobCommandOutput extends StartKeyPhrasesDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Starts an asynchronous key phrase detection job for a collection of documents. Use the
        *          operation to track the status of a
        *       job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, StartKeyPhrasesDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, StartKeyPhrasesDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new StartKeyPhrasesDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartKeyPhrasesDetectionJobCommandInput} for command's `input` shape.
        * @see {@link StartKeyPhrasesDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class StartKeyPhrasesDetectionJobCommand extends $Command<StartKeyPhrasesDetectionJobCommandInput, StartKeyPhrasesDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: StartKeyPhrasesDetectionJobCommandInput;
            constructor(input: StartKeyPhrasesDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartKeyPhrasesDetectionJobCommandInput, StartKeyPhrasesDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartPiiEntitiesDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { StartPiiEntitiesDetectionJobRequest, StartPiiEntitiesDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface StartPiiEntitiesDetectionJobCommandInput extends StartPiiEntitiesDetectionJobRequest {
    }
    export interface StartPiiEntitiesDetectionJobCommandOutput extends StartPiiEntitiesDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Starts an asynchronous PII entity detection job for a collection of documents.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, StartPiiEntitiesDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, StartPiiEntitiesDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new StartPiiEntitiesDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartPiiEntitiesDetectionJobCommandInput} for command's `input` shape.
        * @see {@link StartPiiEntitiesDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class StartPiiEntitiesDetectionJobCommand extends $Command<StartPiiEntitiesDetectionJobCommandInput, StartPiiEntitiesDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: StartPiiEntitiesDetectionJobCommandInput;
            constructor(input: StartPiiEntitiesDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartPiiEntitiesDetectionJobCommandInput, StartPiiEntitiesDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartSentimentDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { StartSentimentDetectionJobRequest, StartSentimentDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface StartSentimentDetectionJobCommandInput extends StartSentimentDetectionJobRequest {
    }
    export interface StartSentimentDetectionJobCommandOutput extends StartSentimentDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Starts an asynchronous sentiment detection job for a collection of documents. Use the
        *          operation to track the status of a
        *       job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, StartSentimentDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, StartSentimentDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new StartSentimentDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartSentimentDetectionJobCommandInput} for command's `input` shape.
        * @see {@link StartSentimentDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class StartSentimentDetectionJobCommand extends $Command<StartSentimentDetectionJobCommandInput, StartSentimentDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: StartSentimentDetectionJobCommandInput;
            constructor(input: StartSentimentDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartSentimentDetectionJobCommandInput, StartSentimentDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartTargetedSentimentDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { StartTargetedSentimentDetectionJobRequest, StartTargetedSentimentDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface StartTargetedSentimentDetectionJobCommandInput extends StartTargetedSentimentDetectionJobRequest {
    }
    export interface StartTargetedSentimentDetectionJobCommandOutput extends StartTargetedSentimentDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Starts an asynchronous targeted sentiment detection job for a collection of documents. Use the
        *        operation to track the status of a
        *       job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, StartTargetedSentimentDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, StartTargetedSentimentDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new StartTargetedSentimentDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartTargetedSentimentDetectionJobCommandInput} for command's `input` shape.
        * @see {@link StartTargetedSentimentDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class StartTargetedSentimentDetectionJobCommand extends $Command<StartTargetedSentimentDetectionJobCommandInput, StartTargetedSentimentDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: StartTargetedSentimentDetectionJobCommandInput;
            constructor(input: StartTargetedSentimentDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartTargetedSentimentDetectionJobCommandInput, StartTargetedSentimentDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartTopicsDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { StartTopicsDetectionJobRequest, StartTopicsDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface StartTopicsDetectionJobCommandInput extends StartTopicsDetectionJobRequest {
    }
    export interface StartTopicsDetectionJobCommandOutput extends StartTopicsDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Starts an asynchronous topic detection job. Use the
        *         <code>DescribeTopicDetectionJob</code> operation to track the status of a job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, StartTopicsDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, StartTopicsDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new StartTopicsDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartTopicsDetectionJobCommandInput} for command's `input` shape.
        * @see {@link StartTopicsDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class StartTopicsDetectionJobCommand extends $Command<StartTopicsDetectionJobCommandInput, StartTopicsDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: StartTopicsDetectionJobCommandInput;
            constructor(input: StartTopicsDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartTopicsDetectionJobCommandInput, StartTopicsDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopDominantLanguageDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { StopDominantLanguageDetectionJobRequest, StopDominantLanguageDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface StopDominantLanguageDetectionJobCommandInput extends StopDominantLanguageDetectionJobRequest {
    }
    export interface StopDominantLanguageDetectionJobCommandOutput extends StopDominantLanguageDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Stops a dominant language detection job in progress.</p>
        *          <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put
        *       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it
        *       is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the
        *         <code>STOPPED</code> state.</p>
        *          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the
        *         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400
        *       Internal Request Exception. </p>
        *          <p>When a job is stopped, any documents already processed are written to the output
        *       location.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, StopDominantLanguageDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, StopDominantLanguageDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new StopDominantLanguageDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopDominantLanguageDetectionJobCommandInput} for command's `input` shape.
        * @see {@link StopDominantLanguageDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class StopDominantLanguageDetectionJobCommand extends $Command<StopDominantLanguageDetectionJobCommandInput, StopDominantLanguageDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: StopDominantLanguageDetectionJobCommandInput;
            constructor(input: StopDominantLanguageDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopDominantLanguageDetectionJobCommandInput, StopDominantLanguageDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopEntitiesDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { StopEntitiesDetectionJobRequest, StopEntitiesDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface StopEntitiesDetectionJobCommandInput extends StopEntitiesDetectionJobRequest {
    }
    export interface StopEntitiesDetectionJobCommandOutput extends StopEntitiesDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Stops an entities detection job in progress.</p>
        *          <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put
        *       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it
        *       is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the
        *         <code>STOPPED</code> state.</p>
        *          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the
        *         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400
        *       Internal Request Exception. </p>
        *          <p>When a job is stopped, any documents already processed are written to the output
        *       location.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, StopEntitiesDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, StopEntitiesDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new StopEntitiesDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopEntitiesDetectionJobCommandInput} for command's `input` shape.
        * @see {@link StopEntitiesDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class StopEntitiesDetectionJobCommand extends $Command<StopEntitiesDetectionJobCommandInput, StopEntitiesDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: StopEntitiesDetectionJobCommandInput;
            constructor(input: StopEntitiesDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopEntitiesDetectionJobCommandInput, StopEntitiesDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopEventsDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { StopEventsDetectionJobRequest, StopEventsDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface StopEventsDetectionJobCommandInput extends StopEventsDetectionJobRequest {
    }
    export interface StopEventsDetectionJobCommandOutput extends StopEventsDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Stops an events detection job in progress.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, StopEventsDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, StopEventsDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new StopEventsDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopEventsDetectionJobCommandInput} for command's `input` shape.
        * @see {@link StopEventsDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class StopEventsDetectionJobCommand extends $Command<StopEventsDetectionJobCommandInput, StopEventsDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: StopEventsDetectionJobCommandInput;
            constructor(input: StopEventsDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopEventsDetectionJobCommandInput, StopEventsDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopKeyPhrasesDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { StopKeyPhrasesDetectionJobRequest, StopKeyPhrasesDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface StopKeyPhrasesDetectionJobCommandInput extends StopKeyPhrasesDetectionJobRequest {
    }
    export interface StopKeyPhrasesDetectionJobCommandOutput extends StopKeyPhrasesDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Stops a key phrases detection job in progress.</p>
        *          <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put
        *       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it
        *       is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the
        *         <code>STOPPED</code> state.</p>
        *          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the
        *         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400
        *       Internal Request Exception. </p>
        *          <p>When a job is stopped, any documents already processed are written to the output
        *       location.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, StopKeyPhrasesDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, StopKeyPhrasesDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new StopKeyPhrasesDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopKeyPhrasesDetectionJobCommandInput} for command's `input` shape.
        * @see {@link StopKeyPhrasesDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class StopKeyPhrasesDetectionJobCommand extends $Command<StopKeyPhrasesDetectionJobCommandInput, StopKeyPhrasesDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: StopKeyPhrasesDetectionJobCommandInput;
            constructor(input: StopKeyPhrasesDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopKeyPhrasesDetectionJobCommandInput, StopKeyPhrasesDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopPiiEntitiesDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { StopPiiEntitiesDetectionJobRequest, StopPiiEntitiesDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface StopPiiEntitiesDetectionJobCommandInput extends StopPiiEntitiesDetectionJobRequest {
    }
    export interface StopPiiEntitiesDetectionJobCommandOutput extends StopPiiEntitiesDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Stops a PII entities detection job in progress.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, StopPiiEntitiesDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, StopPiiEntitiesDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new StopPiiEntitiesDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopPiiEntitiesDetectionJobCommandInput} for command's `input` shape.
        * @see {@link StopPiiEntitiesDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class StopPiiEntitiesDetectionJobCommand extends $Command<StopPiiEntitiesDetectionJobCommandInput, StopPiiEntitiesDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: StopPiiEntitiesDetectionJobCommandInput;
            constructor(input: StopPiiEntitiesDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopPiiEntitiesDetectionJobCommandInput, StopPiiEntitiesDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopSentimentDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { StopSentimentDetectionJobRequest, StopSentimentDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface StopSentimentDetectionJobCommandInput extends StopSentimentDetectionJobRequest {
    }
    export interface StopSentimentDetectionJobCommandOutput extends StopSentimentDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Stops a sentiment detection job in progress.</p>
        *          <p>If the job state is <code>IN_PROGRESS</code>, the job is marked for termination and put
        *       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it
        *       is put into the <code>COMPLETED</code> state; otherwise the job is be stopped and put into the
        *         <code>STOPPED</code> state.</p>
        *          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the
        *         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400
        *       Internal Request Exception. </p>
        *          <p>When a job is stopped, any documents already processed are written to the output
        *       location.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, StopSentimentDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, StopSentimentDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new StopSentimentDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopSentimentDetectionJobCommandInput} for command's `input` shape.
        * @see {@link StopSentimentDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class StopSentimentDetectionJobCommand extends $Command<StopSentimentDetectionJobCommandInput, StopSentimentDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: StopSentimentDetectionJobCommandInput;
            constructor(input: StopSentimentDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopSentimentDetectionJobCommandInput, StopSentimentDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopTargetedSentimentDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { StopTargetedSentimentDetectionJobRequest, StopTargetedSentimentDetectionJobResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface StopTargetedSentimentDetectionJobCommandInput extends StopTargetedSentimentDetectionJobRequest {
    }
    export interface StopTargetedSentimentDetectionJobCommandOutput extends StopTargetedSentimentDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Stops a targeted sentiment detection job in progress.</p>
        *          <p>If the job state is <code>IN_PROGRESS</code>, the job is marked for termination and put
        *       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it
        *       is put into the <code>COMPLETED</code> state; otherwise the job is be stopped and put into the
        *       <code>STOPPED</code> state.</p>
        *          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the
        *       <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400
        *       Internal Request Exception. </p>
        *          <p>When a job is stopped, any documents already processed are written to the output
        *       location.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, StopTargetedSentimentDetectionJobCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, StopTargetedSentimentDetectionJobCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new StopTargetedSentimentDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopTargetedSentimentDetectionJobCommandInput} for command's `input` shape.
        * @see {@link StopTargetedSentimentDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class StopTargetedSentimentDetectionJobCommand extends $Command<StopTargetedSentimentDetectionJobCommandInput, StopTargetedSentimentDetectionJobCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: StopTargetedSentimentDetectionJobCommandInput;
            constructor(input: StopTargetedSentimentDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopTargetedSentimentDetectionJobCommandInput, StopTargetedSentimentDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopTrainingDocumentClassifierCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { StopTrainingDocumentClassifierRequest, StopTrainingDocumentClassifierResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface StopTrainingDocumentClassifierCommandInput extends StopTrainingDocumentClassifierRequest {
    }
    export interface StopTrainingDocumentClassifierCommandOutput extends StopTrainingDocumentClassifierResponse, __MetadataBearer {
    }
    /**
        * <p>Stops a document classifier training job while in progress.</p>
        *          <p>If the training job state is <code>TRAINING</code>, the job is marked for termination and
        *       put into the <code>STOP_REQUESTED</code> state. If the training job completes before it can be
        *       stopped, it is put into the <code>TRAINED</code>; otherwise the training job is stopped and
        *       put into the <code>STOPPED</code> state and the service sends back an HTTP 200 response with
        *       an empty HTTP body. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, StopTrainingDocumentClassifierCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, StopTrainingDocumentClassifierCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new StopTrainingDocumentClassifierCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopTrainingDocumentClassifierCommandInput} for command's `input` shape.
        * @see {@link StopTrainingDocumentClassifierCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class StopTrainingDocumentClassifierCommand extends $Command<StopTrainingDocumentClassifierCommandInput, StopTrainingDocumentClassifierCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: StopTrainingDocumentClassifierCommandInput;
            constructor(input: StopTrainingDocumentClassifierCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopTrainingDocumentClassifierCommandInput, StopTrainingDocumentClassifierCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopTrainingEntityRecognizerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { StopTrainingEntityRecognizerRequest, StopTrainingEntityRecognizerResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface StopTrainingEntityRecognizerCommandInput extends StopTrainingEntityRecognizerRequest {
    }
    export interface StopTrainingEntityRecognizerCommandOutput extends StopTrainingEntityRecognizerResponse, __MetadataBearer {
    }
    /**
        * <p>Stops an entity recognizer training job while in progress.</p>
        *          <p>If the training job state is <code>TRAINING</code>, the job is marked for termination and
        *       put into the <code>STOP_REQUESTED</code> state. If the training job completes before it can be
        *       stopped, it is put into the <code>TRAINED</code>; otherwise the training job is stopped and
        *       putted into the <code>STOPPED</code> state and the service sends back an HTTP 200 response
        *       with an empty HTTP body.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, StopTrainingEntityRecognizerCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, StopTrainingEntityRecognizerCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new StopTrainingEntityRecognizerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopTrainingEntityRecognizerCommandInput} for command's `input` shape.
        * @see {@link StopTrainingEntityRecognizerCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class StopTrainingEntityRecognizerCommand extends $Command<StopTrainingEntityRecognizerCommandInput, StopTrainingEntityRecognizerCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: StopTrainingEntityRecognizerCommandInput;
            constructor(input: StopTrainingEntityRecognizerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopTrainingEntityRecognizerCommandInput, StopTrainingEntityRecognizerCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Associates a specific tag with an Amazon Comprehend resource. A tag is a key-value pair
        *       that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with
        *       "Sales" as the key might be added to a resource to indicate its use by the sales department.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, TagResourceCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, TagResourceCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes a specific tag associated with an Amazon Comprehend resource. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, UntagResourceCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, UntagResourceCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/UpdateEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient";
    import { UpdateEndpointRequest, UpdateEndpointResponse } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0";
    export interface UpdateEndpointCommandInput extends UpdateEndpointRequest {
    }
    export interface UpdateEndpointCommandOutput extends UpdateEndpointResponse, __MetadataBearer {
    }
    /**
        * <p>Updates information about the specified endpoint.
        *       For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendClient, UpdateEndpointCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
        * // const { ComprehendClient, UpdateEndpointCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
        * const client = new ComprehendClient(config);
        * const command = new UpdateEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateEndpointCommandInput} for command's `input` shape.
        * @see {@link UpdateEndpointCommandOutput} for command's `response` shape.
        * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
        *
        */
    export class UpdateEndpointCommand extends $Command<UpdateEndpointCommandInput, UpdateEndpointCommandOutput, ComprehendClientResolvedConfig> {
            readonly input: UpdateEndpointCommandInput;
            constructor(input: UpdateEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateEndpointCommandInput, UpdateEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/ComprehendClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { BatchDetectDominantLanguageCommandInput, BatchDetectDominantLanguageCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/BatchDetectDominantLanguageCommand";
    import { BatchDetectEntitiesCommandInput, BatchDetectEntitiesCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/BatchDetectEntitiesCommand";
    import { BatchDetectKeyPhrasesCommandInput, BatchDetectKeyPhrasesCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/BatchDetectKeyPhrasesCommand";
    import { BatchDetectSentimentCommandInput, BatchDetectSentimentCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/BatchDetectSentimentCommand";
    import { BatchDetectSyntaxCommandInput, BatchDetectSyntaxCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/BatchDetectSyntaxCommand";
    import { ClassifyDocumentCommandInput, ClassifyDocumentCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ClassifyDocumentCommand";
    import { ContainsPiiEntitiesCommandInput, ContainsPiiEntitiesCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ContainsPiiEntitiesCommand";
    import { CreateDocumentClassifierCommandInput, CreateDocumentClassifierCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/CreateDocumentClassifierCommand";
    import { CreateEndpointCommandInput, CreateEndpointCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/CreateEndpointCommand";
    import { CreateEntityRecognizerCommandInput, CreateEntityRecognizerCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/CreateEntityRecognizerCommand";
    import { DeleteDocumentClassifierCommandInput, DeleteDocumentClassifierCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DeleteDocumentClassifierCommand";
    import { DeleteEndpointCommandInput, DeleteEndpointCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DeleteEndpointCommand";
    import { DeleteEntityRecognizerCommandInput, DeleteEntityRecognizerCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DeleteEntityRecognizerCommand";
    import { DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DeleteResourcePolicyCommand";
    import { DescribeDocumentClassificationJobCommandInput, DescribeDocumentClassificationJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeDocumentClassificationJobCommand";
    import { DescribeDocumentClassifierCommandInput, DescribeDocumentClassifierCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeDocumentClassifierCommand";
    import { DescribeDominantLanguageDetectionJobCommandInput, DescribeDominantLanguageDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeDominantLanguageDetectionJobCommand";
    import { DescribeEndpointCommandInput, DescribeEndpointCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeEndpointCommand";
    import { DescribeEntitiesDetectionJobCommandInput, DescribeEntitiesDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeEntitiesDetectionJobCommand";
    import { DescribeEntityRecognizerCommandInput, DescribeEntityRecognizerCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeEntityRecognizerCommand";
    import { DescribeEventsDetectionJobCommandInput, DescribeEventsDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeEventsDetectionJobCommand";
    import { DescribeKeyPhrasesDetectionJobCommandInput, DescribeKeyPhrasesDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeKeyPhrasesDetectionJobCommand";
    import { DescribePiiEntitiesDetectionJobCommandInput, DescribePiiEntitiesDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribePiiEntitiesDetectionJobCommand";
    import { DescribeResourcePolicyCommandInput, DescribeResourcePolicyCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeResourcePolicyCommand";
    import { DescribeSentimentDetectionJobCommandInput, DescribeSentimentDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeSentimentDetectionJobCommand";
    import { DescribeTargetedSentimentDetectionJobCommandInput, DescribeTargetedSentimentDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeTargetedSentimentDetectionJobCommand";
    import { DescribeTopicsDetectionJobCommandInput, DescribeTopicsDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DescribeTopicsDetectionJobCommand";
    import { DetectDominantLanguageCommandInput, DetectDominantLanguageCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DetectDominantLanguageCommand";
    import { DetectEntitiesCommandInput, DetectEntitiesCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DetectEntitiesCommand";
    import { DetectKeyPhrasesCommandInput, DetectKeyPhrasesCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DetectKeyPhrasesCommand";
    import { DetectPiiEntitiesCommandInput, DetectPiiEntitiesCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DetectPiiEntitiesCommand";
    import { DetectSentimentCommandInput, DetectSentimentCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DetectSentimentCommand";
    import { DetectSyntaxCommandInput, DetectSyntaxCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/DetectSyntaxCommand";
    import { ImportModelCommandInput, ImportModelCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ImportModelCommand";
    import { ListDocumentClassificationJobsCommandInput, ListDocumentClassificationJobsCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListDocumentClassificationJobsCommand";
    import { ListDocumentClassifiersCommandInput, ListDocumentClassifiersCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListDocumentClassifiersCommand";
    import { ListDocumentClassifierSummariesCommandInput, ListDocumentClassifierSummariesCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListDocumentClassifierSummariesCommand";
    import { ListDominantLanguageDetectionJobsCommandInput, ListDominantLanguageDetectionJobsCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListDominantLanguageDetectionJobsCommand";
    import { ListEndpointsCommandInput, ListEndpointsCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListEndpointsCommand";
    import { ListEntitiesDetectionJobsCommandInput, ListEntitiesDetectionJobsCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListEntitiesDetectionJobsCommand";
    import { ListEntityRecognizersCommandInput, ListEntityRecognizersCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListEntityRecognizersCommand";
    import { ListEntityRecognizerSummariesCommandInput, ListEntityRecognizerSummariesCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListEntityRecognizerSummariesCommand";
    import { ListEventsDetectionJobsCommandInput, ListEventsDetectionJobsCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListEventsDetectionJobsCommand";
    import { ListKeyPhrasesDetectionJobsCommandInput, ListKeyPhrasesDetectionJobsCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListKeyPhrasesDetectionJobsCommand";
    import { ListPiiEntitiesDetectionJobsCommandInput, ListPiiEntitiesDetectionJobsCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListPiiEntitiesDetectionJobsCommand";
    import { ListSentimentDetectionJobsCommandInput, ListSentimentDetectionJobsCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListSentimentDetectionJobsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListTagsForResourceCommand";
    import { ListTargetedSentimentDetectionJobsCommandInput, ListTargetedSentimentDetectionJobsCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListTargetedSentimentDetectionJobsCommand";
    import { ListTopicsDetectionJobsCommandInput, ListTopicsDetectionJobsCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/ListTopicsDetectionJobsCommand";
    import { PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/PutResourcePolicyCommand";
    import { StartDocumentClassificationJobCommandInput, StartDocumentClassificationJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartDocumentClassificationJobCommand";
    import { StartDominantLanguageDetectionJobCommandInput, StartDominantLanguageDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartDominantLanguageDetectionJobCommand";
    import { StartEntitiesDetectionJobCommandInput, StartEntitiesDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartEntitiesDetectionJobCommand";
    import { StartEventsDetectionJobCommandInput, StartEventsDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartEventsDetectionJobCommand";
    import { StartKeyPhrasesDetectionJobCommandInput, StartKeyPhrasesDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartKeyPhrasesDetectionJobCommand";
    import { StartPiiEntitiesDetectionJobCommandInput, StartPiiEntitiesDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartPiiEntitiesDetectionJobCommand";
    import { StartSentimentDetectionJobCommandInput, StartSentimentDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartSentimentDetectionJobCommand";
    import { StartTargetedSentimentDetectionJobCommandInput, StartTargetedSentimentDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartTargetedSentimentDetectionJobCommand";
    import { StartTopicsDetectionJobCommandInput, StartTopicsDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StartTopicsDetectionJobCommand";
    import { StopDominantLanguageDetectionJobCommandInput, StopDominantLanguageDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopDominantLanguageDetectionJobCommand";
    import { StopEntitiesDetectionJobCommandInput, StopEntitiesDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopEntitiesDetectionJobCommand";
    import { StopEventsDetectionJobCommandInput, StopEventsDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopEventsDetectionJobCommand";
    import { StopKeyPhrasesDetectionJobCommandInput, StopKeyPhrasesDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopKeyPhrasesDetectionJobCommand";
    import { StopPiiEntitiesDetectionJobCommandInput, StopPiiEntitiesDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopPiiEntitiesDetectionJobCommand";
    import { StopSentimentDetectionJobCommandInput, StopSentimentDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopSentimentDetectionJobCommand";
    import { StopTargetedSentimentDetectionJobCommandInput, StopTargetedSentimentDetectionJobCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopTargetedSentimentDetectionJobCommand";
    import { StopTrainingDocumentClassifierCommandInput, StopTrainingDocumentClassifierCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopTrainingDocumentClassifierCommand";
    import { StopTrainingEntityRecognizerCommandInput, StopTrainingEntityRecognizerCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/StopTrainingEntityRecognizerCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/UntagResourceCommand";
    import { UpdateEndpointCommandInput, UpdateEndpointCommandOutput } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/commands/UpdateEndpointCommand";
    export type ServiceInputTypes = BatchDetectDominantLanguageCommandInput | BatchDetectEntitiesCommandInput | BatchDetectKeyPhrasesCommandInput | BatchDetectSentimentCommandInput | BatchDetectSyntaxCommandInput | ClassifyDocumentCommandInput | ContainsPiiEntitiesCommandInput | CreateDocumentClassifierCommandInput | CreateEndpointCommandInput | CreateEntityRecognizerCommandInput | DeleteDocumentClassifierCommandInput | DeleteEndpointCommandInput | DeleteEntityRecognizerCommandInput | DeleteResourcePolicyCommandInput | DescribeDocumentClassificationJobCommandInput | DescribeDocumentClassifierCommandInput | DescribeDominantLanguageDetectionJobCommandInput | DescribeEndpointCommandInput | DescribeEntitiesDetectionJobCommandInput | DescribeEntityRecognizerCommandInput | DescribeEventsDetectionJobCommandInput | DescribeKeyPhrasesDetectionJobCommandInput | DescribePiiEntitiesDetectionJobCommandInput | DescribeResourcePolicyCommandInput | DescribeSentimentDetectionJobCommandInput | DescribeTargetedSentimentDetectionJobCommandInput | DescribeTopicsDetectionJobCommandInput | DetectDominantLanguageCommandInput | DetectEntitiesCommandInput | DetectKeyPhrasesCommandInput | DetectPiiEntitiesCommandInput | DetectSentimentCommandInput | DetectSyntaxCommandInput | ImportModelCommandInput | ListDocumentClassificationJobsCommandInput | ListDocumentClassifierSummariesCommandInput | ListDocumentClassifiersCommandInput | ListDominantLanguageDetectionJobsCommandInput | ListEndpointsCommandInput | ListEntitiesDetectionJobsCommandInput | ListEntityRecognizerSummariesCommandInput | ListEntityRecognizersCommandInput | ListEventsDetectionJobsCommandInput | ListKeyPhrasesDetectionJobsCommandInput | ListPiiEntitiesDetectionJobsCommandInput | ListSentimentDetectionJobsCommandInput | ListTagsForResourceCommandInput | ListTargetedSentimentDetectionJobsCommandInput | ListTopicsDetectionJobsCommandInput | PutResourcePolicyCommandInput | StartDocumentClassificationJobCommandInput | StartDominantLanguageDetectionJobCommandInput | StartEntitiesDetectionJobCommandInput | StartEventsDetectionJobCommandInput | StartKeyPhrasesDetectionJobCommandInput | StartPiiEntitiesDetectionJobCommandInput | StartSentimentDetectionJobCommandInput | StartTargetedSentimentDetectionJobCommandInput | StartTopicsDetectionJobCommandInput | StopDominantLanguageDetectionJobCommandInput | StopEntitiesDetectionJobCommandInput | StopEventsDetectionJobCommandInput | StopKeyPhrasesDetectionJobCommandInput | StopPiiEntitiesDetectionJobCommandInput | StopSentimentDetectionJobCommandInput | StopTargetedSentimentDetectionJobCommandInput | StopTrainingDocumentClassifierCommandInput | StopTrainingEntityRecognizerCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateEndpointCommandInput;
    export type ServiceOutputTypes = BatchDetectDominantLanguageCommandOutput | BatchDetectEntitiesCommandOutput | BatchDetectKeyPhrasesCommandOutput | BatchDetectSentimentCommandOutput | BatchDetectSyntaxCommandOutput | ClassifyDocumentCommandOutput | ContainsPiiEntitiesCommandOutput | CreateDocumentClassifierCommandOutput | CreateEndpointCommandOutput | CreateEntityRecognizerCommandOutput | DeleteDocumentClassifierCommandOutput | DeleteEndpointCommandOutput | DeleteEntityRecognizerCommandOutput | DeleteResourcePolicyCommandOutput | DescribeDocumentClassificationJobCommandOutput | DescribeDocumentClassifierCommandOutput | DescribeDominantLanguageDetectionJobCommandOutput | DescribeEndpointCommandOutput | DescribeEntitiesDetectionJobCommandOutput | DescribeEntityRecognizerCommandOutput | DescribeEventsDetectionJobCommandOutput | DescribeKeyPhrasesDetectionJobCommandOutput | DescribePiiEntitiesDetectionJobCommandOutput | DescribeResourcePolicyCommandOutput | DescribeSentimentDetectionJobCommandOutput | DescribeTargetedSentimentDetectionJobCommandOutput | DescribeTopicsDetectionJobCommandOutput | DetectDominantLanguageCommandOutput | DetectEntitiesCommandOutput | DetectKeyPhrasesCommandOutput | DetectPiiEntitiesCommandOutput | DetectSentimentCommandOutput | DetectSyntaxCommandOutput | ImportModelCommandOutput | ListDocumentClassificationJobsCommandOutput | ListDocumentClassifierSummariesCommandOutput | ListDocumentClassifiersCommandOutput | ListDominantLanguageDetectionJobsCommandOutput | ListEndpointsCommandOutput | ListEntitiesDetectionJobsCommandOutput | ListEntityRecognizerSummariesCommandOutput | ListEntityRecognizersCommandOutput | ListEventsDetectionJobsCommandOutput | ListKeyPhrasesDetectionJobsCommandOutput | ListPiiEntitiesDetectionJobsCommandOutput | ListSentimentDetectionJobsCommandOutput | ListTagsForResourceCommandOutput | ListTargetedSentimentDetectionJobsCommandOutput | ListTopicsDetectionJobsCommandOutput | PutResourcePolicyCommandOutput | StartDocumentClassificationJobCommandOutput | StartDominantLanguageDetectionJobCommandOutput | StartEntitiesDetectionJobCommandOutput | StartEventsDetectionJobCommandOutput | StartKeyPhrasesDetectionJobCommandOutput | StartPiiEntitiesDetectionJobCommandOutput | StartSentimentDetectionJobCommandOutput | StartTargetedSentimentDetectionJobCommandOutput | StartTopicsDetectionJobCommandOutput | StopDominantLanguageDetectionJobCommandOutput | StopEntitiesDetectionJobCommandOutput | StopEventsDetectionJobCommandOutput | StopKeyPhrasesDetectionJobCommandOutput | StopPiiEntitiesDetectionJobCommandOutput | StopSentimentDetectionJobCommandOutput | StopTargetedSentimentDetectionJobCommandOutput | StopTrainingDocumentClassifierCommandOutput | StopTrainingEntityRecognizerCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateEndpointCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type ComprehendClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of ComprehendClient class constructor that set the region, credentials and other options.
        */
    export interface ComprehendClientConfig extends ComprehendClientConfigType {
    }
    type ComprehendClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of ComprehendClient class. This is resolved and normalized from the {@link ComprehendClientConfig | constructor configuration interface}.
        */
    export interface ComprehendClientResolvedConfig extends ComprehendClientResolvedConfigType {
    }
    /**
        * <p>Amazon Comprehend is an AWS service for gaining insight into the content of documents.
        *       Use these actions to determine the topics contained in your documents, the topics they
        *       discuss, the predominant sentiment expressed in them, the predominant language used, and
        *       more.</p>
        */
    export class ComprehendClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, ComprehendClientResolvedConfig> {
            /**
                * The resolved configuration of ComprehendClient class. This is resolved and normalized from the {@link ComprehendClientConfig | constructor configuration interface}.
                */
            readonly config: ComprehendClientResolvedConfig;
            constructor(configuration: ComprehendClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { ComprehendServiceException as __BaseException } from "@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/ComprehendServiceException";
    export enum AugmentedManifestsDocumentTypeFormat {
            PLAIN_TEXT_DOCUMENT = "PLAIN_TEXT_DOCUMENT",
            SEMI_STRUCTURED_DOCUMENT = "SEMI_STRUCTURED_DOCUMENT"
    }
    export enum Split {
            TEST = "TEST",
            TRAIN = "TRAIN"
    }
    /**
        * <p>An augmented manifest file that provides training data for your custom model. An augmented
        *       manifest file is a labeled dataset that is produced by Amazon SageMaker Ground Truth.</p>
        */
    export interface AugmentedManifestsListItem {
            /**
                * <p>The Amazon S3 location of the augmented manifest file.</p>
                */
            S3Uri: string | undefined;
            /**
                * <p>The purpose of the data you've provided in the augmented manifest. You can either train or
                *       test this data. If you don't specify, the default is train.</p>
                *          <p>TRAIN - all of the documents in the manifest will be used for training. If no test
                *       documents are provided, Amazon Comprehend will automatically reserve a portion of the training
                *       documents for testing.</p>
                *          <p> TEST - all of the documents in the manifest will be used for testing.</p>
                */
            Split?: Split | string;
            /**
                * <p>The JSON attribute that contains the annotations for your training documents. The number
                *       of attribute names that you specify depends on whether your augmented manifest file is the
                *       output of a single labeling job or a chained labeling job.</p>
                *          <p>If your file is the output of a single labeling job, specify the LabelAttributeName key
                *       that was used when the job was created in Ground Truth.</p>
                *          <p>If your file is the output of a chained labeling job, specify the LabelAttributeName key
                *       for one or more jobs in the chain. Each LabelAttributeName key provides the annotations from
                *       an individual job.</p>
                */
            AttributeNames: string[] | undefined;
            /**
                * <p>The S3 prefix to the annotation files that are referred in the augmented manifest
                *       file.</p>
                */
            AnnotationDataS3Uri?: string;
            /**
                * <p>The S3 prefix to the source files (PDFs) that are referred to in the augmented manifest
                *       file.</p>
                */
            SourceDocumentsS3Uri?: string;
            /**
                * <p>The type of augmented manifest. PlainTextDocument or SemiStructuredDocument. If you don't
                *       specify, the default is PlainTextDocument. </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>PLAIN_TEXT_DOCUMENT</code> A document type that represents any unicode text that
                *           is encoded in UTF-8.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SEMI_STRUCTURED_DOCUMENT</code> A document type with positional and structural
                *           context, like a PDF. For training with Amazon Comprehend, only PDFs are supported. For
                *           inference, Amazon Comprehend support PDFs, DOCX and TXT.</p>
                *             </li>
                *          </ul>
                */
            DocumentType?: AugmentedManifestsDocumentTypeFormat | string;
    }
    export namespace AugmentedManifestsListItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AugmentedManifestsListItem) => any;
    }
    export interface BatchDetectDominantLanguageRequest {
            /**
                * <p>A list containing the text of the input documents. The list can contain a maximum of 25
                *       documents. Each document should contain at least 20 characters and must contain fewer than
                *       5,000 bytes of UTF-8 encoded characters.</p>
                */
            TextList: string[] | undefined;
    }
    export namespace BatchDetectDominantLanguageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetectDominantLanguageRequest) => any;
    }
    /**
        * <p>Describes an error that occurred while processing a document in a batch. The operation
        *       returns on <code>BatchItemError</code> object for each document that contained an
        *       error.</p>
        */
    export interface BatchItemError {
            /**
                * <p>The zero-based index of the document in the input list.</p>
                */
            Index?: number;
            /**
                * <p>The numeric error code of the error.</p>
                */
            ErrorCode?: string;
            /**
                * <p>A text description of the error.</p>
                */
            ErrorMessage?: string;
    }
    export namespace BatchItemError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchItemError) => any;
    }
    /**
        * <p>Returns the code for the dominant language in the input text and the level of
        *       confidence that Amazon Comprehend has in the accuracy of the detection.</p>
        */
    export interface DominantLanguage {
            /**
                * <p>The RFC 5646 language code for the dominant language. For more information about RFC
                *       5646, see <a href="https://tools.ietf.org/html/rfc5646">Tags for Identifying
                *         Languages</a> on the <i>IETF Tools</i> web site.</p>
                */
            LanguageCode?: string;
            /**
                * <p>The level of confidence that Amazon Comprehend has in the accuracy of the
                *       detection.</p>
                */
            Score?: number;
    }
    export namespace DominantLanguage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DominantLanguage) => any;
    }
    /**
        * <p>The result of calling the  operation.
        *       The operation returns one object for each document that is successfully processed by the
        *       operation.</p>
        */
    export interface BatchDetectDominantLanguageItemResult {
            /**
                * <p>The zero-based index of the document in the input list.</p>
                */
            Index?: number;
            /**
                * <p>One or more <a>DominantLanguage</a> objects describing the dominant
                *       languages in the document.</p>
                */
            Languages?: DominantLanguage[];
    }
    export namespace BatchDetectDominantLanguageItemResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetectDominantLanguageItemResult) => any;
    }
    export interface BatchDetectDominantLanguageResponse {
            /**
                * <p>A list of  objects
                *       containing the results of the operation. The results are sorted in ascending order by the
                *         <code>Index</code> field and match the order of the documents in the input list. If all of
                *       the documents contain an error, the <code>ResultList</code> is empty.</p>
                */
            ResultList: BatchDetectDominantLanguageItemResult[] | undefined;
            /**
                * <p>A list containing one  object for each document
                *       that contained an error. The results are sorted in ascending order by the <code>Index</code>
                *       field and match the order of the documents in the input list. If there are no errors in the
                *       batch, the <code>ErrorList</code> is empty.</p>
                */
            ErrorList: BatchItemError[] | undefined;
    }
    export namespace BatchDetectDominantLanguageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetectDominantLanguageResponse) => any;
    }
    /**
        * <p>The number of documents in the request exceeds the limit of 25. Try your request again
        *       with fewer documents.</p>
        */
    export class BatchSizeLimitExceededException extends __BaseException {
            readonly name: "BatchSizeLimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BatchSizeLimitExceededException, __BaseException>);
    }
    /**
        * <p>An internal server error occurred. Retry your request.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>The request is invalid.</p>
        */
    export class InvalidRequestException extends __BaseException {
            readonly name: "InvalidRequestException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRequestException, __BaseException>);
    }
    /**
        * <p>The size of the input text exceeds the limit. Use a smaller document.</p>
        */
    export class TextSizeLimitExceededException extends __BaseException {
            readonly name: "TextSizeLimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TextSizeLimitExceededException, __BaseException>);
    }
    export enum LanguageCode {
            AR = "ar",
            DE = "de",
            EN = "en",
            ES = "es",
            FR = "fr",
            HI = "hi",
            IT = "it",
            JA = "ja",
            KO = "ko",
            PT = "pt",
            ZH = "zh",
            ZH_TW = "zh-TW"
    }
    export interface BatchDetectEntitiesRequest {
            /**
                * <p>A list containing the text of the input documents. The list can contain a maximum of 25
                *       documents. Each document must contain fewer than 5,000 bytes of UTF-8 encoded
                *       characters.</p>
                */
            TextList: string[] | undefined;
            /**
                * <p>The language of the input documents. You can specify any of the primary languages
                *       supported by Amazon Comprehend. All documents must be in the same language.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
    }
    export namespace BatchDetectEntitiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetectEntitiesRequest) => any;
    }
    export enum EntityType {
            COMMERCIAL_ITEM = "COMMERCIAL_ITEM",
            DATE = "DATE",
            EVENT = "EVENT",
            LOCATION = "LOCATION",
            ORGANIZATION = "ORGANIZATION",
            OTHER = "OTHER",
            PERSON = "PERSON",
            QUANTITY = "QUANTITY",
            TITLE = "TITLE"
    }
    /**
        * <p>Provides information about an entity. </p>
        *          <p> </p>
        */
    export interface Entity {
            /**
                * <p>The level of confidence that Amazon Comprehend has in the accuracy of the
                *       detection.</p>
                */
            Score?: number;
            /**
                * <p>The entity's type.</p>
                */
            Type?: EntityType | string;
            /**
                * <p>The text of the entity.</p>
                */
            Text?: string;
            /**
                * <p>A character offset in the input text that shows where the entity begins (the first
                *       character is at position 0). The offset returns the position of each UTF-8 code point in the
                *       string. A <i>code point</i> is the abstract character from a particular
                *       graphical representation. For example, a multi-byte UTF-8 character maps to a single code
                *       point.</p>
                */
            BeginOffset?: number;
            /**
                * <p>A character offset in the input text that shows where the entity ends. The offset
                *       returns the position of each UTF-8 code point in the string. A <i>code point</i>
                *       is the abstract character from a particular graphical representation. For example, a
                *       multi-byte UTF-8 character maps to a single code point. </p>
                */
            EndOffset?: number;
    }
    export namespace Entity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Entity) => any;
    }
    /**
        * <p>The result of calling the  operation. The
        *       operation returns one object for each document that is successfully processed by the
        *       operation.</p>
        */
    export interface BatchDetectEntitiesItemResult {
            /**
                * <p>The zero-based index of the document in the input list.</p>
                */
            Index?: number;
            /**
                * <p>One or more <a>Entity</a> objects, one for each entity detected in the
                *       document.</p>
                */
            Entities?: Entity[];
    }
    export namespace BatchDetectEntitiesItemResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetectEntitiesItemResult) => any;
    }
    export interface BatchDetectEntitiesResponse {
            /**
                * <p>A list of  objects containing the
                *       results of the operation. The results are sorted in ascending order by the <code>Index</code>
                *       field and match the order of the documents in the input list. If all of the documents contain
                *       an error, the <code>ResultList</code> is empty.</p>
                */
            ResultList: BatchDetectEntitiesItemResult[] | undefined;
            /**
                * <p>A list containing one  object for each document
                *       that contained an error. The results are sorted in ascending order by the <code>Index</code>
                *       field and match the order of the documents in the input list. If there are no errors in the
                *       batch, the <code>ErrorList</code> is empty.</p>
                */
            ErrorList: BatchItemError[] | undefined;
    }
    export namespace BatchDetectEntitiesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetectEntitiesResponse) => any;
    }
    /**
        * <p>Amazon Comprehend can't process the language of the input text. For custom entity
        *       recognition APIs, only English, Spanish, French, Italian, German, or Portuguese are accepted.
        *       For a list of supported languages, see <a>supported-languages</a>. </p>
        */
    export class UnsupportedLanguageException extends __BaseException {
            readonly name: "UnsupportedLanguageException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedLanguageException, __BaseException>);
    }
    export interface BatchDetectKeyPhrasesRequest {
            /**
                * <p>A list containing the text of the input documents. The list can contain a maximum of 25
                *       documents. Each document must contain fewer than 5,000 bytes of UTF-8 encoded
                *       characters.</p>
                */
            TextList: string[] | undefined;
            /**
                * <p>The language of the input documents. You can specify any of the primary languages
                *       supported by Amazon Comprehend. All documents must be in the same language.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
    }
    export namespace BatchDetectKeyPhrasesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetectKeyPhrasesRequest) => any;
    }
    /**
        * <p>Describes a key noun phrase.</p>
        */
    export interface KeyPhrase {
            /**
                * <p>The level of confidence that Amazon Comprehend has in the accuracy of the
                *       detection.</p>
                */
            Score?: number;
            /**
                * <p>The text of a key noun phrase.</p>
                */
            Text?: string;
            /**
                * <p>A character offset in the input text that shows where the key phrase begins (the first
                *       character is at position 0). The offset returns the position of each UTF-8 code point in the
                *       string. A <i>code point</i> is the abstract character from a particular
                *       graphical representation. For example, a multi-byte UTF-8 character maps to a single code
                *       point.</p>
                */
            BeginOffset?: number;
            /**
                * <p>A character offset in the input text where the key phrase ends. The offset returns the
                *       position of each UTF-8 code point in the string. A <code>code point</code> is the abstract
                *       character from a particular graphical representation. For example, a multi-byte UTF-8
                *       character maps to a single code point.</p>
                */
            EndOffset?: number;
    }
    export namespace KeyPhrase {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KeyPhrase) => any;
    }
    /**
        * <p>The result of calling the  operation. The
        *       operation returns one object for each document that is successfully processed by the
        *       operation.</p>
        */
    export interface BatchDetectKeyPhrasesItemResult {
            /**
                * <p>The zero-based index of the document in the input list.</p>
                */
            Index?: number;
            /**
                * <p>One or more <a>KeyPhrase</a> objects, one for each key phrase detected in
                *       the document.</p>
                */
            KeyPhrases?: KeyPhrase[];
    }
    export namespace BatchDetectKeyPhrasesItemResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetectKeyPhrasesItemResult) => any;
    }
    export interface BatchDetectKeyPhrasesResponse {
            /**
                * <p>A list of  objects containing the
                *       results of the operation. The results are sorted in ascending order by the <code>Index</code>
                *       field and match the order of the documents in the input list. If all of the documents contain
                *       an error, the <code>ResultList</code> is empty.</p>
                */
            ResultList: BatchDetectKeyPhrasesItemResult[] | undefined;
            /**
                * <p>A list containing one  object for each document
                *       that contained an error. The results are sorted in ascending order by the <code>Index</code>
                *       field and match the order of the documents in the input list. If there are no errors in the
                *       batch, the <code>ErrorList</code> is empty.</p>
                */
            ErrorList: BatchItemError[] | undefined;
    }
    export namespace BatchDetectKeyPhrasesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetectKeyPhrasesResponse) => any;
    }
    export interface BatchDetectSentimentRequest {
            /**
                * <p>A list containing the text of the input documents. The list can contain a maximum of 25
                *       documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded
                *       characters.</p>
                */
            TextList: string[] | undefined;
            /**
                * <p>The language of the input documents. You can specify any of the primary languages
                *       supported by Amazon Comprehend. All documents must be in the same language.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
    }
    export namespace BatchDetectSentimentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetectSentimentRequest) => any;
    }
    export enum SentimentType {
            MIXED = "MIXED",
            NEGATIVE = "NEGATIVE",
            NEUTRAL = "NEUTRAL",
            POSITIVE = "POSITIVE"
    }
    /**
        * <p>Describes the level of confidence that Amazon Comprehend has in the accuracy of its
        *       detection of sentiments.</p>
        */
    export interface SentimentScore {
            /**
                * <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of
                *       the <code>POSITIVE</code> sentiment.</p>
                */
            Positive?: number;
            /**
                * <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of
                *       the <code>NEGATIVE</code> sentiment.</p>
                */
            Negative?: number;
            /**
                * <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of
                *       the <code>NEUTRAL</code> sentiment.</p>
                */
            Neutral?: number;
            /**
                * <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of
                *       the <code>MIXED</code> sentiment.</p>
                */
            Mixed?: number;
    }
    export namespace SentimentScore {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SentimentScore) => any;
    }
    /**
        * <p>The result of calling the  operation. The
        *       operation returns one object for each document that is successfully processed by the
        *       operation.</p>
        */
    export interface BatchDetectSentimentItemResult {
            /**
                * <p>The zero-based index of the document in the input list.</p>
                */
            Index?: number;
            /**
                * <p>The sentiment detected in the document.</p>
                */
            Sentiment?: SentimentType | string;
            /**
                * <p>The level of confidence that Amazon Comprehend has in the accuracy of its sentiment
                *       detection.</p>
                */
            SentimentScore?: SentimentScore;
    }
    export namespace BatchDetectSentimentItemResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetectSentimentItemResult) => any;
    }
    export interface BatchDetectSentimentResponse {
            /**
                * <p>A list of  objects containing the
                *       results of the operation. The results are sorted in ascending order by the <code>Index</code>
                *       field and match the order of the documents in the input list. If all of the documents contain
                *       an error, the <code>ResultList</code> is empty.</p>
                */
            ResultList: BatchDetectSentimentItemResult[] | undefined;
            /**
                * <p>A list containing one  object for each document
                *       that contained an error. The results are sorted in ascending order by the <code>Index</code>
                *       field and match the order of the documents in the input list. If there are no errors in the
                *       batch, the <code>ErrorList</code> is empty.</p>
                */
            ErrorList: BatchItemError[] | undefined;
    }
    export namespace BatchDetectSentimentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetectSentimentResponse) => any;
    }
    export enum SyntaxLanguageCode {
            DE = "de",
            EN = "en",
            ES = "es",
            FR = "fr",
            IT = "it",
            PT = "pt"
    }
    export interface BatchDetectSyntaxRequest {
            /**
                * <p>A list containing the text of the input documents. The list can contain a maximum of 25
                *       documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded
                *       characters.</p>
                */
            TextList: string[] | undefined;
            /**
                * <p>The language of the input documents. You can specify any of the following languages
                *       supported by Amazon Comprehend: German ("de"), English ("en"), Spanish ("es"), French ("fr"),
                *       Italian ("it"), or Portuguese ("pt"). All documents must be in the same language.</p>
                */
            LanguageCode: SyntaxLanguageCode | string | undefined;
    }
    export namespace BatchDetectSyntaxRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetectSyntaxRequest) => any;
    }
    export enum PartOfSpeechTagType {
            ADJ = "ADJ",
            ADP = "ADP",
            ADV = "ADV",
            AUX = "AUX",
            CCONJ = "CCONJ",
            CONJ = "CONJ",
            DET = "DET",
            INTJ = "INTJ",
            NOUN = "NOUN",
            NUM = "NUM",
            O = "O",
            PART = "PART",
            PRON = "PRON",
            PROPN = "PROPN",
            PUNCT = "PUNCT",
            SCONJ = "SCONJ",
            SYM = "SYM",
            VERB = "VERB"
    }
    /**
        * <p>Identifies the part of speech represented by the token and gives the confidence that
        *       Amazon Comprehend has that the part of speech was correctly identified. For more information
        *       about the parts of speech that Amazon Comprehend can identify, see <a>how-syntax</a>.</p>
        */
    export interface PartOfSpeechTag {
            /**
                * <p>Identifies the part of speech that the token represents.</p>
                */
            Tag?: PartOfSpeechTagType | string;
            /**
                * <p>The confidence that Amazon Comprehend has that the part of speech was correctly
                *       identified.</p>
                */
            Score?: number;
    }
    export namespace PartOfSpeechTag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PartOfSpeechTag) => any;
    }
    /**
        * <p>Represents a work in the input text that was recognized and assigned a part of speech.
        *       There is one syntax token record for each word in the source text.</p>
        */
    export interface SyntaxToken {
            /**
                * <p>A unique identifier for a token.</p>
                */
            TokenId?: number;
            /**
                * <p>The word that was recognized in the source text.</p>
                */
            Text?: string;
            /**
                * <p>The zero-based offset from the beginning of the source text to the first character in the
                *       word.</p>
                */
            BeginOffset?: number;
            /**
                * <p>The zero-based offset from the beginning of the source text to the last character in the
                *       word.</p>
                */
            EndOffset?: number;
            /**
                * <p>Provides the part of speech label and the confidence level that Amazon Comprehend has that
                *       the part of speech was correctly identified. For more information, see <a>how-syntax</a>.</p>
                */
            PartOfSpeech?: PartOfSpeechTag;
    }
    export namespace SyntaxToken {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SyntaxToken) => any;
    }
    /**
        * <p>The result of calling the  operation. The
        *       operation returns one object that is successfully processed by the operation.</p>
        */
    export interface BatchDetectSyntaxItemResult {
            /**
                * <p>The zero-based index of the document in the input list.</p>
                */
            Index?: number;
            /**
                * <p>The syntax tokens for the words in the document, one token for each word.</p>
                */
            SyntaxTokens?: SyntaxToken[];
    }
    export namespace BatchDetectSyntaxItemResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetectSyntaxItemResult) => any;
    }
    export interface BatchDetectSyntaxResponse {
            /**
                * <p>A list of  objects containing the
                *       results of the operation. The results are sorted in ascending order by the <code>Index</code>
                *       field and match the order of the documents in the input list. If all of the documents contain
                *       an error, the <code>ResultList</code> is empty.</p>
                */
            ResultList: BatchDetectSyntaxItemResult[] | undefined;
            /**
                * <p>A list containing one  object for each document that
                *       contained an error. The results are sorted in ascending order by the <code>Index</code> field
                *       and match the order of the documents in the input list. If there are no errors in the batch,
                *       the <code>ErrorList</code> is empty.</p>
                */
            ErrorList: BatchItemError[] | undefined;
    }
    export namespace BatchDetectSyntaxResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetectSyntaxResponse) => any;
    }
    /**
        * <p>Describes the result metrics for the test data associated with an documentation
        *       classifier.</p>
        */
    export interface ClassifierEvaluationMetrics {
            /**
                * <p>The fraction of the labels that were correct recognized. It is computed by dividing the
                *       number of labels in the test documents that were correctly recognized by the total number of
                *       labels in the test documents.</p>
                */
            Accuracy?: number;
            /**
                * <p>A measure of the usefulness of the classifier results in the test data. High precision
                *       means that the classifier returned substantially more relevant results than irrelevant
                *       ones.</p>
                */
            Precision?: number;
            /**
                * <p>A measure of how complete the classifier results are for the test data. High recall means
                *       that the classifier returned most of the relevant results. </p>
                */
            Recall?: number;
            /**
                * <p>A measure of how accurate the classifier results are for the test data. It is derived from
                *       the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the
                *       harmonic average of the two scores. The highest score is 1, and the worst score is 0. </p>
                */
            F1Score?: number;
            /**
                * <p>A measure of the usefulness of the recognizer results in the test data. High precision
                *       means that the recognizer returned substantially more relevant results than irrelevant ones.
                *       Unlike the Precision metric which comes from averaging the precision of all available labels,
                *       this is based on the overall score of all precision scores added together.</p>
                */
            MicroPrecision?: number;
            /**
                * <p>A measure of how complete the classifier results are for the test data. High recall means
                *       that the classifier returned most of the relevant results. Specifically, this indicates how
                *       many of the correct categories in the text that the model can predict. It is a percentage of
                *       correct categories in the text that can found. Instead of averaging the recall scores of all
                *       labels (as with Recall), micro Recall is based on the overall score of all recall scores added
                *       together.</p>
                */
            MicroRecall?: number;
            /**
                * <p>A measure of how accurate the classifier results are for the test data. It is a
                *       combination of the <code>Micro Precision</code> and <code>Micro Recall</code> values. The
                *         <code>Micro F1Score</code> is the harmonic mean of the two scores. The highest score is 1,
                *       and the worst score is 0.</p>
                */
            MicroF1Score?: number;
            /**
                * <p>Indicates the fraction of labels that are incorrectly predicted. Also seen as the fraction
                *       of wrong labels compared to the total number of labels. Scores closer to zero are
                *       better.</p>
                */
            HammingLoss?: number;
    }
    export namespace ClassifierEvaluationMetrics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ClassifierEvaluationMetrics) => any;
    }
    /**
        * <p>Provides information about a document classifier.</p>
        */
    export interface ClassifierMetadata {
            /**
                * <p>The number of labels in the input data. </p>
                */
            NumberOfLabels?: number;
            /**
                * <p>The number of documents in the input data that were used to train the classifier.
                *       Typically this is 80 to 90 percent of the input documents.</p>
                */
            NumberOfTrainedDocuments?: number;
            /**
                * <p>The number of documents in the input data that were used to test the classifier. Typically
                *       this is 10 to 20 percent of the input documents, up to 10,000 documents.</p>
                */
            NumberOfTestDocuments?: number;
            /**
                * <p> Describes the result metrics for the test data associated with an documentation
                *       classifier.</p>
                */
            EvaluationMetrics?: ClassifierEvaluationMetrics;
    }
    export namespace ClassifierMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ClassifierMetadata) => any;
    }
    export interface ClassifyDocumentRequest {
            /**
                * <p>The document text to be analyzed.</p>
                */
            Text: string | undefined;
            /**
                * <p>The Amazon Resource Number (ARN) of the endpoint. For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>.</p>
                */
            EndpointArn: string | undefined;
    }
    export namespace ClassifyDocumentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ClassifyDocumentRequest) => any;
    }
    /**
        * <p>Specifies the class that categorizes the document being analyzed</p>
        */
    export interface DocumentClass {
            /**
                * <p>The name of the class.</p>
                */
            Name?: string;
            /**
                * <p>The confidence score that Amazon Comprehend has this class correctly attributed.</p>
                */
            Score?: number;
    }
    export namespace DocumentClass {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentClass) => any;
    }
    /**
        * <p>Specifies one of the label or labels that categorize the document being analyzed.</p>
        */
    export interface DocumentLabel {
            /**
                * <p>The name of the label.</p>
                */
            Name?: string;
            /**
                * <p>The confidence score that Amazon Comprehend has this label correctly attributed.</p>
                */
            Score?: number;
    }
    export namespace DocumentLabel {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentLabel) => any;
    }
    export interface ClassifyDocumentResponse {
            /**
                * <p>The classes used by the document being analyzed. These are used for multi-class trained
                *       models. Individual classes are mutually exclusive and each document is expected to have only a
                *       single class assigned to it. For example, an animal can be a dog or a cat, but not both at the
                *       same time. </p>
                */
            Classes?: DocumentClass[];
            /**
                * <p>The labels used the document being analyzed. These are used for multi-label trained
                *       models. Individual labels represent different categories that are related in some manner and
                *       are not mutually exclusive. For example, a movie can be just an action movie, or it can be an
                *       action movie, a science fiction movie, and a comedy, all at the same time. </p>
                */
            Labels?: DocumentLabel[];
    }
    export namespace ClassifyDocumentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ClassifyDocumentResponse) => any;
    }
    /**
        * <p>The specified resource is not available. Check the resource and try your request
        *       again.</p>
        */
    export class ResourceUnavailableException extends __BaseException {
            readonly name: "ResourceUnavailableException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceUnavailableException, __BaseException>);
    }
    export interface ContainsPiiEntitiesRequest {
            /**
                * <p>Creates a new document classification request to analyze a single document in real-time,
                *       returning personally identifiable information (PII) entity labels.</p>
                */
            Text: string | undefined;
            /**
                * <p>The language of the input documents. Currently, English is the only valid language.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
    }
    export namespace ContainsPiiEntitiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContainsPiiEntitiesRequest) => any;
    }
    export enum PiiEntityType {
            ADDRESS = "ADDRESS",
            AGE = "AGE",
            ALL = "ALL",
            AWS_ACCESS_KEY = "AWS_ACCESS_KEY",
            AWS_SECRET_KEY = "AWS_SECRET_KEY",
            BANK_ACCOUNT_NUMBER = "BANK_ACCOUNT_NUMBER",
            BANK_ROUTING = "BANK_ROUTING",
            CA_HEALTH_NUMBER = "CA_HEALTH_NUMBER",
            CA_SOCIAL_INSURANCE_NUMBER = "CA_SOCIAL_INSURANCE_NUMBER",
            CREDIT_DEBIT_CVV = "CREDIT_DEBIT_CVV",
            CREDIT_DEBIT_EXPIRY = "CREDIT_DEBIT_EXPIRY",
            CREDIT_DEBIT_NUMBER = "CREDIT_DEBIT_NUMBER",
            DATE_TIME = "DATE_TIME",
            DRIVER_ID = "DRIVER_ID",
            EMAIL = "EMAIL",
            INTERNATIONAL_BANK_ACCOUNT_NUMBER = "INTERNATIONAL_BANK_ACCOUNT_NUMBER",
            IN_AADHAAR = "IN_AADHAAR",
            IN_NREGA = "IN_NREGA",
            IN_PERMANENT_ACCOUNT_NUMBER = "IN_PERMANENT_ACCOUNT_NUMBER",
            IN_VOTER_NUMBER = "IN_VOTER_NUMBER",
            IP_ADDRESS = "IP_ADDRESS",
            LICENSE_PLATE = "LICENSE_PLATE",
            MAC_ADDRESS = "MAC_ADDRESS",
            NAME = "NAME",
            PASSPORT_NUMBER = "PASSPORT_NUMBER",
            PASSWORD = "PASSWORD",
            PHONE = "PHONE",
            PIN = "PIN",
            SSN = "SSN",
            SWIFT_CODE = "SWIFT_CODE",
            UK_NATIONAL_HEALTH_SERVICE_NUMBER = "UK_NATIONAL_HEALTH_SERVICE_NUMBER",
            UK_NATIONAL_INSURANCE_NUMBER = "UK_NATIONAL_INSURANCE_NUMBER",
            UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER = "UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER",
            URL = "URL",
            USERNAME = "USERNAME",
            US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER = "US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER",
            VEHICLE_IDENTIFICATION_NUMBER = "VEHICLE_IDENTIFICATION_NUMBER"
    }
    /**
        * <p>Specifies one of the label or labels that categorize the personally identifiable
        *       information (PII) entity being analyzed.</p>
        */
    export interface EntityLabel {
            /**
                * <p>The name of the label.</p>
                */
            Name?: PiiEntityType | string;
            /**
                * <p>The level of confidence that Amazon Comprehend has in the accuracy of the
                *       detection.</p>
                */
            Score?: number;
    }
    export namespace EntityLabel {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntityLabel) => any;
    }
    export interface ContainsPiiEntitiesResponse {
            /**
                * <p>The labels used in the document being analyzed. Individual labels represent personally
                *       identifiable information (PII) entity types.</p>
                */
            Labels?: EntityLabel[];
    }
    export namespace ContainsPiiEntitiesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContainsPiiEntitiesResponse) => any;
    }
    export enum DocumentClassifierDataFormat {
            AUGMENTED_MANIFEST = "AUGMENTED_MANIFEST",
            COMPREHEND_CSV = "COMPREHEND_CSV"
    }
    /**
        * <p>The input properties for training a document classifier. </p>
        *          <p>For more information on how the input file is formatted, see <a>prep-classifier-data</a>. </p>
        */
    export interface DocumentClassifierInputDataConfig {
            /**
                * <p>The format of your training data:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>COMPREHEND_CSV</code>: A two-column CSV file, where labels are provided in the
                *           first column, and documents are provided in the second. If you use this value, you must
                *           provide the <code>S3Uri</code> parameter in your request.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>AUGMENTED_MANIFEST</code>: A labeled dataset that is produced by Amazon
                *           SageMaker Ground Truth. This file is in JSON lines format. Each line is a complete JSON
                *           object that contains a training document and its associated labels. </p>
                *                <p>If you use this value, you must provide the <code>AugmentedManifests</code> parameter
                *           in your request.</p>
                *             </li>
                *          </ul>
                *          <p>If you don't specify a value, Amazon Comprehend uses <code>COMPREHEND_CSV</code> as the
                *       default.</p>
                */
            DataFormat?: DocumentClassifierDataFormat | string;
            /**
                * <p>The Amazon S3 URI for the input data. The S3 bucket must be in the same region as the API
                *       endpoint that you are calling. The URI can point to a single input file or it can provide the
                *       prefix for a collection of input files.</p>
                *          <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a
                *       single file, Amazon Comprehend uses that file as input. If more than one file begins with the
                *       prefix, Amazon Comprehend uses all of them as input.</p>
                *          <p>This parameter is required if you set <code>DataFormat</code> to
                *         <code>COMPREHEND_CSV</code>.</p>
                */
            S3Uri?: string;
            /**
                * <p>The Amazon S3 URI for the input data. The Amazon S3 bucket must be in the same AWS Region
                *       as the API endpoint that you are calling. The URI can point to a single input file or it can
                *       provide the prefix for a collection of input files. </p>
                */
            TestS3Uri?: string;
            /**
                * <p>Indicates the delimiter used to separate each label for training a multi-label classifier.
                *       The default delimiter between labels is a pipe (|). You can use a different character as a
                *       delimiter (if it's an allowed character) by specifying it under Delimiter for labels. If the
                *       training documents use a delimiter other than the default or the delimiter you specify, the
                *       labels on that line will be combined to make a single unique label, such as
                *       LABELLABELLABEL.</p>
                */
            LabelDelimiter?: string;
            /**
                * <p>A list of augmented manifest files that provide training data for your custom model. An
                *       augmented manifest file is a labeled dataset that is produced by Amazon SageMaker Ground
                *       Truth.</p>
                *          <p>This parameter is required if you set <code>DataFormat</code> to
                *         <code>AUGMENTED_MANIFEST</code>.</p>
                */
            AugmentedManifests?: AugmentedManifestsListItem[];
    }
    export namespace DocumentClassifierInputDataConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentClassifierInputDataConfig) => any;
    }
    export enum DocumentClassifierMode {
            MULTI_CLASS = "MULTI_CLASS",
            MULTI_LABEL = "MULTI_LABEL"
    }
    /**
        * <p>Provides output results configuration parameters for custom classifier jobs. </p>
        */
    export interface DocumentClassifierOutputDataConfig {
            /**
                * <p>When you use the <code>OutputDataConfig</code> object while creating a custom
                *       classifier, you specify the Amazon S3 location where you want to write the confusion matrix.
                *       The URI must be in the same region as the API endpoint that you are calling. The location is
                *       used as the prefix for the actual location of this output file.</p>
                *          <p>When the custom classifier job is finished, the service creates the output file in a
                *       directory specific to the job. The <code>S3Uri</code> field contains the location of the
                *       output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the
                *       confusion matrix.</p>
                */
            S3Uri?: string;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt the
                *       output results from an analysis job. The KmsKeyId can be one of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>KMS Key Alias: <code>"alias/ExampleAlias"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>ARN of a KMS Key Alias:
                *             <code>"arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            KmsKeyId?: string;
    }
    export namespace DocumentClassifierOutputDataConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentClassifierOutputDataConfig) => any;
    }
    /**
        * <p>A key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For
        *       example, a tag with the key-value pair ‘Department’:’Sales’ might be added to a resource to
        *       indicate its use by a particular department. </p>
        */
    export interface Tag {
            /**
                * <p>The initial part of a key-value pair that forms a tag associated with a given resource.
                *       For instance, if you want to show which resources are used by which departments, you might use
                *       “Department” as the key portion of the pair, with multiple possible values such as “sales,”
                *       “legal,” and “administration.” </p>
                */
            Key: string | undefined;
            /**
                * <p> The second part of a key-value pair that forms a tag associated with a given resource.
                *       For instance, if you want to show which resources are used by which departments, you might use
                *       “Department” as the initial (key) portion of the pair, with a value of “sales” to indicate the
                *       sales department. </p>
                */
            Value?: string;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    /**
        * <p> Configuration parameters for an optional private Virtual Private Cloud (VPC) containing
        *       the resources you are using for the job. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">Amazon
        *         VPC</a>. </p>
        */
    export interface VpcConfig {
            /**
                * <p>The ID number for a security group on an instance of your private VPC. Security groups on
                *       your VPC function serve as a virtual firewall to control inbound and outbound traffic and
                *       provides security for the resources that you’ll be accessing on the VPC. This ID number is
                *       preceded by "sg-", for instance: "sg-03b388029b0a285ea". For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html">Security
                *         Groups for your VPC</a>. </p>
                */
            SecurityGroupIds: string[] | undefined;
            /**
                * <p>The ID for each subnet being used in your private VPC. This subnet is a subset of the a
                *       range of IPv4 addresses used by the VPC and is specific to a given availability zone in the
                *       VPC’s region. This ID number is preceded by "subnet-", for instance:
                *       "subnet-04ccf456919e69055". For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">VPCs and
                *         Subnets</a>. </p>
                */
            Subnets: string[] | undefined;
    }
    export namespace VpcConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VpcConfig) => any;
    }
    export interface CreateDocumentClassifierRequest {
            /**
                * <p>The name of the document classifier.</p>
                */
            DocumentClassifierName: string | undefined;
            /**
                * <p>The version name given to the newly created classifier. Version names can have a maximum
                *       of 256 characters. Alphanumeric characters, hyphens (-) and underscores (_) are allowed. The
                *       version name must be unique among all models with the same classifier name in the account/AWS
                *       Region.</p>
                */
            VersionName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants
                *       Amazon Comprehend read access to your input data.</p>
                */
            DataAccessRoleArn: string | undefined;
            /**
                * <p>Tags to be associated with the document classifier being created. A tag is a key-value
                *       pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with
                *       "Sales" as the key might be added to a resource to indicate its use by the sales department.
                *     </p>
                */
            Tags?: Tag[];
            /**
                * <p>Specifies the format and location of the input data for the job.</p>
                */
            InputDataConfig: DocumentClassifierInputDataConfig | undefined;
            /**
                * <p>Enables the addition of output results configuration parameters for custom classifier
                *       jobs.</p>
                */
            OutputDataConfig?: DocumentClassifierOutputDataConfig;
            /**
                * <p>A unique identifier for the request. If you don't set the client request token, Amazon
                *       Comprehend generates one.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p>The language of the input documents. You can specify any of the following languages
                *       supported by Amazon Comprehend: German ("de"), English ("en"), Spanish ("es"), French ("fr"),
                *       Italian ("it"), or Portuguese ("pt"). All documents must be in the same language.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt
                *       data on the storage volume attached to the ML compute instance(s) that process the analysis
                *       job. The VolumeKmsKeyId can be either of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            VolumeKmsKeyId?: string;
            /**
                * <p>Configuration parameters for an optional private Virtual Private Cloud (VPC) containing
                *       the resources you are using for your custom classifier. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">Amazon
                *         VPC</a>. </p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>Indicates the mode in which the classifier will be trained. The classifier can be trained
                *       in multi-class mode, which identifies one and only one class for each document, or multi-label
                *       mode, which identifies one or more labels for each document. In multi-label mode, multiple
                *       labels for an individual document are separated by a delimiter. The default delimiter between
                *       labels is a pipe (|).</p>
                */
            Mode?: DocumentClassifierMode | string;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt
                *       trained custom models. The ModelKmsKeyId can be either of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ModelKmsKeyId?: string;
            /**
                * <p>The resource-based policy to attach to your custom document classifier model. You can use
                *       this policy to allow another AWS account to import your custom model.</p>
                *          <p>Provide your policy as a JSON body that you enter as a UTF-8 encoded string without line
                *       breaks. To provide valid JSON, enclose the attribute names and values in double quotes. If the
                *       JSON body is also enclosed in double quotes, then you must escape the double quotes that are
                *       inside the policy:</p>
                *          <p>
                *             <code>"{\"attribute\": \"value\", \"attribute\": [\"value\"]}"</code>
                *          </p>
                *          <p>To avoid escaping quotes, you can use single quotes to enclose the policy and double
                *       quotes to enclose the JSON names and values:</p>
                *          <p>
                *             <code>'{"attribute": "value", "attribute": ["value"]}'</code>
                *          </p>
                */
            ModelPolicy?: string;
    }
    export namespace CreateDocumentClassifierRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDocumentClassifierRequest) => any;
    }
    export interface CreateDocumentClassifierResponse {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the document classifier.</p>
                */
            DocumentClassifierArn?: string;
    }
    export namespace CreateDocumentClassifierResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDocumentClassifierResponse) => any;
    }
    /**
        * <p>The KMS customer managed key (CMK) entered cannot be validated. Verify the key and
        *       re-enter it.</p>
        */
    export class KmsKeyValidationException extends __BaseException {
            readonly name: "KmsKeyValidationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KmsKeyValidationException, __BaseException>);
    }
    /**
        * <p>The specified resource name is already in use. Use a different name and try your request
        *       again.</p>
        */
    export class ResourceInUseException extends __BaseException {
            readonly name: "ResourceInUseException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceInUseException, __BaseException>);
    }
    /**
        * <p>The maximum number of resources per account has been exceeded. Review the resources, and
        *       then try your request again.</p>
        */
    export class ResourceLimitExceededException extends __BaseException {
            readonly name: "ResourceLimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceLimitExceededException, __BaseException>);
    }
    /**
        * <p>The number of requests exceeds the limit. Resubmit your request later.</p>
        */
    export class TooManyRequestsException extends __BaseException {
            readonly name: "TooManyRequestsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
    }
    /**
        * <p>The request contains more tags than can be associated with a resource (50 tags per
        *       resource). The maximum number of tags includes both existing tags and those included in your
        *       current request. </p>
        */
    export class TooManyTagsException extends __BaseException {
            readonly name: "TooManyTagsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyTagsException, __BaseException>);
    }
    export interface CreateEndpointRequest {
            /**
                * <p>This is the descriptive suffix that becomes part of the <code>EndpointArn</code> used for
                *       all subsequent requests to this resource. </p>
                */
            EndpointName: string | undefined;
            /**
                * <p>The Amazon Resource Number (ARN) of the model to which the endpoint will be
                *       attached.</p>
                */
            ModelArn: string | undefined;
            /**
                * <p> The desired number of inference units to be used by the model using this endpoint.
                *
                *       Each inference unit represents of a throughput of 100 characters per second.</p>
                */
            DesiredInferenceUnits: number | undefined;
            /**
                * <p>An idempotency token provided by the customer. If this token matches a previous endpoint
                *       creation request, Amazon Comprehend will not return a <code>ResourceInUseException</code>.
                *     </p>
                */
            ClientRequestToken?: string;
            /**
                * <p>Tags associated with the endpoint being created. A tag is a key-value pair that adds
                *       metadata to the endpoint. For example, a tag with "Sales" as the key might be added to an
                *       endpoint to indicate its use by the sales department. </p>
                */
            Tags?: Tag[];
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS identity and Access Management (IAM) role that
                *       grants Amazon Comprehend read access to trained custom models encrypted with a customer
                *       managed key (ModelKmsKeyId).</p>
                */
            DataAccessRoleArn?: string;
    }
    export namespace CreateEndpointRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEndpointRequest) => any;
    }
    export interface CreateEndpointResponse {
            /**
                * <p>The Amazon Resource Number (ARN) of the endpoint being created.</p>
                */
            EndpointArn?: string;
    }
    export namespace CreateEndpointResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEndpointResponse) => any;
    }
    /**
        * <p>The specified resource ARN was not found. Check the ARN and try your request again.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>Describes the annotations associated with a entity recognizer.</p>
        */
    export interface EntityRecognizerAnnotations {
            /**
                * <p> Specifies the Amazon S3 location where the annotations for an entity recognizer are
                *       located. The URI must be in the same region as the API endpoint that you are calling.</p>
                */
            S3Uri: string | undefined;
            /**
                * <p>This specifies the Amazon S3 location where the test annotations for an entity recognizer
                *       are located. The URI must be in the same AWS Region as the API endpoint that you are
                *       calling.</p>
                */
            TestS3Uri?: string;
    }
    export namespace EntityRecognizerAnnotations {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntityRecognizerAnnotations) => any;
    }
    export enum EntityRecognizerDataFormat {
            AUGMENTED_MANIFEST = "AUGMENTED_MANIFEST",
            COMPREHEND_CSV = "COMPREHEND_CSV"
    }
    export enum InputFormat {
            ONE_DOC_PER_FILE = "ONE_DOC_PER_FILE",
            ONE_DOC_PER_LINE = "ONE_DOC_PER_LINE"
    }
    /**
        * <p>Describes the training documents submitted with an entity recognizer.</p>
        */
    export interface EntityRecognizerDocuments {
            /**
                * <p> Specifies the Amazon S3 location where the training documents for an entity recognizer
                *       are located. The URI must be in the same region as the API endpoint that you are
                *       calling.</p>
                */
            S3Uri: string | undefined;
            /**
                * <p> Specifies the Amazon S3 location where the test documents for an entity recognizer are
                *       located. The URI must be in the same AWS Region as the API endpoint that you are
                *       calling.</p>
                */
            TestS3Uri?: string;
            /**
                * <p> Specifies how the text in an input file should be processed. This is optional, and the
                *       default is ONE_DOC_PER_LINE. ONE_DOC_PER_FILE - Each file is considered a separate document.
                *       Use this option when you are processing large documents, such as newspaper articles or
                *       scientific papers. ONE_DOC_PER_LINE - Each line in a file is considered a separate document.
                *       Use this option when you are processing many short documents, such as text messages.</p>
                */
            InputFormat?: InputFormat | string;
    }
    export namespace EntityRecognizerDocuments {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntityRecognizerDocuments) => any;
    }
    /**
        * <p>Describes the entity recognizer submitted with an entity recognizer.</p>
        */
    export interface EntityRecognizerEntityList {
            /**
                * <p>Specifies the Amazon S3 location where the entity list is located. The URI must be in the
                *       same region as the API endpoint that you are calling.</p>
                */
            S3Uri: string | undefined;
    }
    export namespace EntityRecognizerEntityList {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntityRecognizerEntityList) => any;
    }
    /**
        * <p>An entity type within a labeled training dataset that Amazon Comprehend uses to train a
        *       custom entity recognizer.</p>
        */
    export interface EntityTypesListItem {
            /**
                * <p>An entity type within a labeled training dataset that Amazon Comprehend uses to train a
                *       custom entity recognizer.</p>
                *          <p>Entity types must not contain the following invalid characters: \n (line break), \\n
                *       (escaped line break, \r (carriage return), \\r (escaped carriage return), \t (tab), \\t
                *       (escaped tab), space, and , (comma).</p>
                */
            Type: string | undefined;
    }
    export namespace EntityTypesListItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntityTypesListItem) => any;
    }
    /**
        * <p>Specifies the format and location of the input data.</p>
        */
    export interface EntityRecognizerInputDataConfig {
            /**
                * <p>The format of your training data:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>COMPREHEND_CSV</code>: A CSV file that supplements your training documents. The
                *           CSV file contains information about the custom entities that your trained model will
                *           detect. The required format of the file depends on whether you are providing annotations
                *           or an entity list.</p>
                *                <p>If you use this value, you must provide your CSV file by using either the
                *             <code>Annotations</code> or <code>EntityList</code> parameters. You must provide your
                *           training documents by using the <code>Documents</code> parameter.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>AUGMENTED_MANIFEST</code>: A labeled dataset that is produced by Amazon
                *           SageMaker Ground Truth. This file is in JSON lines format. Each line is a complete JSON
                *           object that contains a training document and its labels. Each label annotates a named
                *           entity in the training document. </p>
                *                <p>If you use this value, you must provide the <code>AugmentedManifests</code> parameter
                *           in your request.</p>
                *             </li>
                *          </ul>
                *          <p>If you don't specify a value, Amazon Comprehend uses <code>COMPREHEND_CSV</code> as the
                *       default.</p>
                */
            DataFormat?: EntityRecognizerDataFormat | string;
            /**
                * <p>The entity types in the labeled training data that Amazon Comprehend uses to train the
                *       custom entity recognizer. Any entity types that you don't specify are ignored.</p>
                *          <p>A maximum of 25 entity types can be used at one time to train an entity recognizer. Entity
                *       types must not contain the following invalid characters: \n (line break), \\n (escaped line
                *       break), \r (carriage return), \\r (escaped carriage return), \t (tab), \\t (escaped tab),
                *       space, and , (comma). </p>
                */
            EntityTypes: EntityTypesListItem[] | undefined;
            /**
                * <p>The S3 location of the folder that contains the training documents for your custom entity
                *       recognizer.</p>
                *          <p>This parameter is required if you set <code>DataFormat</code> to
                *         <code>COMPREHEND_CSV</code>.</p>
                */
            Documents?: EntityRecognizerDocuments;
            /**
                * <p>The S3 location of the CSV file that annotates your training documents.</p>
                */
            Annotations?: EntityRecognizerAnnotations;
            /**
                * <p>The S3 location of the CSV file that has the entity list for your custom entity
                *       recognizer.</p>
                */
            EntityList?: EntityRecognizerEntityList;
            /**
                * <p>A list of augmented manifest files that provide training data for your custom model. An
                *       augmented manifest file is a labeled dataset that is produced by Amazon SageMaker Ground
                *       Truth.</p>
                *          <p>This parameter is required if you set <code>DataFormat</code> to
                *         <code>AUGMENTED_MANIFEST</code>.</p>
                */
            AugmentedManifests?: AugmentedManifestsListItem[];
    }
    export namespace EntityRecognizerInputDataConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntityRecognizerInputDataConfig) => any;
    }
    export interface CreateEntityRecognizerRequest {
            /**
                * <p>The name given to the newly created recognizer. Recognizer names can be a maximum of 256
                *       characters. Alphanumeric characters, hyphens (-) and underscores (_) are allowed. The name
                *       must be unique in the account/region.</p>
                */
            RecognizerName: string | undefined;
            /**
                * <p>The version name given to the newly created recognizer. Version names can be a maximum of
                *       256 characters. Alphanumeric characters, hyphens (-) and underscores (_) are allowed. The
                *       version name must be unique among all models with the same recognizer name in the account/ AWS
                *       Region.</p>
                */
            VersionName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants
                *       Amazon Comprehend read access to your input data.</p>
                */
            DataAccessRoleArn: string | undefined;
            /**
                * <p>Tags to be associated with the entity recognizer being created. A tag is a key-value pair
                *       that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with
                *       "Sales" as the key might be added to a resource to indicate its use by the sales department.
                *     </p>
                */
            Tags?: Tag[];
            /**
                * <p>Specifies the format and location of the input data. The S3 bucket containing the input
                *       data must be located in the same region as the entity recognizer being created. </p>
                */
            InputDataConfig: EntityRecognizerInputDataConfig | undefined;
            /**
                * <p> A unique identifier for the request. If you don't set the client request token, Amazon
                *       Comprehend generates one.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p> You can specify any of the following languages supported by Amazon Comprehend: English
                *       ("en"), Spanish ("es"), French ("fr"), Italian ("it"), German ("de"), or Portuguese ("pt").
                *       All documents must be in the same language.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt
                *       data on the storage volume attached to the ML compute instance(s) that process the analysis
                *       job. The VolumeKmsKeyId can be either of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            VolumeKmsKeyId?: string;
            /**
                * <p>Configuration parameters for an optional private Virtual Private Cloud (VPC) containing
                *       the resources you are using for your custom entity recognizer. For more information, see
                *       <a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">Amazon
                *         VPC</a>. </p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt
                *       trained custom models. The ModelKmsKeyId can be either of the following formats</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ModelKmsKeyId?: string;
            /**
                * <p>The JSON resource-based policy to attach to your custom entity recognizer model. You can
                *       use this policy to allow another AWS account to import your custom model.</p>
                *          <p>Provide your JSON as a UTF-8 encoded string without line breaks. To provide valid JSON for
                *       your policy, enclose the attribute names and values in double quotes. If the JSON body is also
                *       enclosed in double quotes, then you must escape the double quotes that are inside the
                *       policy:</p>
                *          <p>
                *             <code>"{\"attribute\": \"value\", \"attribute\": [\"value\"]}"</code>
                *          </p>
                *          <p>To avoid escaping quotes, you can use single quotes to enclose the policy and double
                *       quotes to enclose the JSON names and values:</p>
                *          <p>
                *             <code>'{"attribute": "value", "attribute": ["value"]}'</code>
                *          </p>
                */
            ModelPolicy?: string;
    }
    export namespace CreateEntityRecognizerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEntityRecognizerRequest) => any;
    }
    export interface CreateEntityRecognizerResponse {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the entity recognizer.</p>
                */
            EntityRecognizerArn?: string;
    }
    export namespace CreateEntityRecognizerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEntityRecognizerResponse) => any;
    }
    export interface DeleteDocumentClassifierRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the document classifier. </p>
                */
            DocumentClassifierArn: string | undefined;
    }
    export namespace DeleteDocumentClassifierRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDocumentClassifierRequest) => any;
    }
    export interface DeleteDocumentClassifierResponse {
    }
    export namespace DeleteDocumentClassifierResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDocumentClassifierResponse) => any;
    }
    export interface DeleteEndpointRequest {
            /**
                * <p>The Amazon Resource Number (ARN) of the endpoint being deleted.</p>
                */
            EndpointArn: string | undefined;
    }
    export namespace DeleteEndpointRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEndpointRequest) => any;
    }
    export interface DeleteEndpointResponse {
    }
    export namespace DeleteEndpointResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEndpointResponse) => any;
    }
    export interface DeleteEntityRecognizerRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the entity recognizer.</p>
                */
            EntityRecognizerArn: string | undefined;
    }
    export namespace DeleteEntityRecognizerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEntityRecognizerRequest) => any;
    }
    export interface DeleteEntityRecognizerResponse {
    }
    export namespace DeleteEntityRecognizerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEntityRecognizerResponse) => any;
    }
    export interface DeleteResourcePolicyRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the custom model version that has the policy to delete.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The revision ID of the policy to delete.</p>
                */
            PolicyRevisionId?: string;
    }
    export namespace DeleteResourcePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteResourcePolicyRequest) => any;
    }
    export interface DeleteResourcePolicyResponse {
    }
    export namespace DeleteResourcePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteResourcePolicyResponse) => any;
    }
    export interface DescribeDocumentClassificationJobRequest {
            /**
                * <p>The identifier that Amazon Comprehend generated for the job. The  operation returns this identifier in its
                *       response.</p>
                */
            JobId: string | undefined;
    }
    export namespace DescribeDocumentClassificationJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDocumentClassificationJobRequest) => any;
    }
    export enum DocumentReadAction {
            TEXTRACT_ANALYZE_DOCUMENT = "TEXTRACT_ANALYZE_DOCUMENT",
            TEXTRACT_DETECT_DOCUMENT_TEXT = "TEXTRACT_DETECT_DOCUMENT_TEXT"
    }
    export enum DocumentReadMode {
            FORCE_DOCUMENT_READ_ACTION = "FORCE_DOCUMENT_READ_ACTION",
            SERVICE_DEFAULT = "SERVICE_DEFAULT"
    }
    export enum DocumentReadFeatureTypes {
            FORMS = "FORMS",
            TABLES = "TABLES"
    }
    /**
        * <p>The input properties for a topic detection job.</p>
        */
    export interface DocumentReaderConfig {
            /**
                * <p>This enum field will start with two values which will apply to PDFs:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>TEXTRACT_DETECT_DOCUMENT_TEXT</code> - The service calls DetectDocumentText
                *           for PDF documents per page.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>TEXTRACT_ANALYZE_DOCUMENT</code> - The service calls AnalyzeDocument for PDF
                *           documents per page.</p>
                *             </li>
                *          </ul>
                */
            DocumentReadAction: DocumentReadAction | string | undefined;
            /**
                * <p>This enum field provides two values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>SERVICE_DEFAULT</code> - use service defaults for Document reading. For
                *           Digital PDF it would mean using an internal parser instead of Textract APIs</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>FORCE_DOCUMENT_READ_ACTION</code> - Always use specified action for
                *           DocumentReadAction, including Digital PDF. </p>
                *             </li>
                *          </ul>
                */
            DocumentReadMode?: DocumentReadMode | string;
            /**
                * <p>Specifies how the text in an input file should be processed:</p>
                */
            FeatureTypes?: (DocumentReadFeatureTypes | string)[];
    }
    export namespace DocumentReaderConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentReaderConfig) => any;
    }
    /**
        * <p>The input properties for an inference job.</p>
        */
    export interface InputDataConfig {
            /**
                * <p>The Amazon S3 URI for the input data. The URI must be in same region as the API
                *       endpoint that you are calling. The URI can point to a single input file or it can provide the
                *       prefix for a collection of data files. </p>
                *          <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a
                *       single file, Amazon Comprehend uses that file as input. If more than one file begins with the
                *       prefix, Amazon Comprehend uses all of them as input.</p>
                */
            S3Uri: string | undefined;
            /**
                * <p>Specifies how the text in an input file should be processed:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use
                *           this option when you are processing large documents, such as newspaper articles or
                *           scientific papers.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate
                *           document. Use this option when you are processing many short documents, such as text
                *           messages.</p>
                *             </li>
                *          </ul>
                */
            InputFormat?: InputFormat | string;
            /**
                * <p>The document reader config field applies only for InputDataConfig of
                *       StartEntitiesDetectionJob. </p>
                *          <p>Use DocumentReaderConfig to provide specifications about how you want your inference
                *       documents read. Currently it applies for PDF documents in StartEntitiesDetectionJob custom
                *       inference.</p>
                */
            DocumentReaderConfig?: DocumentReaderConfig;
    }
    export namespace InputDataConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InputDataConfig) => any;
    }
    export enum JobStatus {
            COMPLETED = "COMPLETED",
            FAILED = "FAILED",
            IN_PROGRESS = "IN_PROGRESS",
            STOPPED = "STOPPED",
            STOP_REQUESTED = "STOP_REQUESTED",
            SUBMITTED = "SUBMITTED"
    }
    /**
        * <p>Provides configuration parameters for the output of inference jobs.</p>
        *          <p></p>
        */
    export interface OutputDataConfig {
            /**
                * <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you
                *       specify the Amazon S3 location where you want to write the output data. The URI must be in the
                *       same region as the API endpoint that you are calling. The location is used as the prefix for
                *       the actual location of the output file.</p>
                *          <p>When the topic detection job is finished, the service creates an output file in a
                *       directory specific to the job. The <code>S3Uri</code> field contains the location of the
                *       output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the
                *       ouput of the operation.</p>
                *          <p>
                *       For a PII entity detection job, the output file is plain text, not a compressed archive.
                *       The output file name is the same as the input file, with <code>.out</code> appended at the end.
                *     </p>
                */
            S3Uri: string | undefined;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt the
                *       output results from an analysis job. The KmsKeyId can be one of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>KMS Key Alias: <code>"alias/ExampleAlias"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>ARN of a KMS Key Alias:
                *             <code>"arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            KmsKeyId?: string;
    }
    export namespace OutputDataConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OutputDataConfig) => any;
    }
    /**
        * <p>Provides information about a document classification job.</p>
        */
    export interface DocumentClassificationJobProperties {
            /**
                * <p>The identifier assigned to the document classification job.</p>
                */
            JobId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the document classification job. It is a unique, fully
                *       qualified identifier for the job. It includes the AWS account, Region, and the job ID. The
                *       format of the ARN is as follows:</p>
                *          <p>
                *             <code>arn:<partition>:comprehend:<region>:<account-id>:document-classification-job/<job-id></code>
                *          </p>
                *          <p>The following is an example job ARN:</p>
                *          <p>
                *             <code>arn:aws:comprehend:us-west-2:111122223333:document-classification-job/1234abcd12ab34cd56ef1234567890ab</code>
                *          </p>
                */
            JobArn?: string;
            /**
                * <p>The name that you assigned to the document classification job.</p>
                */
            JobName?: string;
            /**
                * <p>The current status of the document classification job. If the status is
                *         <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.</p>
                */
            JobStatus?: JobStatus | string;
            /**
                * <p>A description of the status of the job.</p>
                */
            Message?: string;
            /**
                * <p>The time that the document classification job was submitted for processing.</p>
                */
            SubmitTime?: Date;
            /**
                * <p>The time that the document classification job completed.</p>
                */
            EndTime?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the document classifier. </p>
                */
            DocumentClassifierArn?: string;
            /**
                * <p>The input data configuration that you supplied when you created the document
                *       classification job.</p>
                */
            InputDataConfig?: InputDataConfig;
            /**
                * <p>The output data configuration that you supplied when you created the document
                *       classification job.</p>
                */
            OutputDataConfig?: OutputDataConfig;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS identity and Access Management (IAM) role that
                *       grants Amazon Comprehend read access to your input data.</p>
                */
            DataAccessRoleArn?: string;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt
                *       data on the storage volume attached to the ML compute instance(s) that process the analysis
                *       job. The VolumeKmsKeyId can be either of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            VolumeKmsKeyId?: string;
            /**
                * <p> Configuration parameters for a private Virtual Private Cloud (VPC) containing the
                *       resources you are using for your document classification job. For more information, see <a href="https://docs.aws.amazon.com/vppc/latest/userguide/what-is-amazon-vpc.html">Amazon
                *         VPC</a>. </p>
                */
            VpcConfig?: VpcConfig;
    }
    export namespace DocumentClassificationJobProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentClassificationJobProperties) => any;
    }
    export interface DescribeDocumentClassificationJobResponse {
            /**
                * <p>An object that describes the properties associated with the document classification
                *       job.</p>
                */
            DocumentClassificationJobProperties?: DocumentClassificationJobProperties;
    }
    export namespace DescribeDocumentClassificationJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDocumentClassificationJobResponse) => any;
    }
    /**
        * <p>The specified job was not found. Check the job ID and try again.</p>
        */
    export class JobNotFoundException extends __BaseException {
            readonly name: "JobNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<JobNotFoundException, __BaseException>);
    }
    export interface DescribeDocumentClassifierRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the document classifier. The  operation returns this identifier in its
                *       response.</p>
                */
            DocumentClassifierArn: string | undefined;
    }
    export namespace DescribeDocumentClassifierRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDocumentClassifierRequest) => any;
    }
    export enum ModelStatus {
            DELETING = "DELETING",
            IN_ERROR = "IN_ERROR",
            STOPPED = "STOPPED",
            STOP_REQUESTED = "STOP_REQUESTED",
            SUBMITTED = "SUBMITTED",
            TRAINED = "TRAINED",
            TRAINING = "TRAINING"
    }
    /**
        * <p>Provides information about a document classifier.</p>
        */
    export interface DocumentClassifierProperties {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the document classifier.</p>
                */
            DocumentClassifierArn?: string;
            /**
                * <p>The language code for the language of the documents that the classifier was trained
                *       on.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The status of the document classifier. If the status is <code>TRAINED</code> the
                *       classifier is ready to use. If the status is <code>FAILED</code> you can see additional
                *       information about why the classifier wasn't trained in the <code>Message</code> field.</p>
                */
            Status?: ModelStatus | string;
            /**
                * <p>Additional information about the status of the classifier.</p>
                */
            Message?: string;
            /**
                * <p>The time that the document classifier was submitted for training.</p>
                */
            SubmitTime?: Date;
            /**
                * <p>The time that training the document classifier completed.</p>
                */
            EndTime?: Date;
            /**
                * <p>Indicates the time when the training starts on documentation classifiers. You are billed
                *       for the time interval between this time and the value of TrainingEndTime. </p>
                */
            TrainingStartTime?: Date;
            /**
                * <p>The time that training of the document classifier was completed. Indicates the time when
                *       the training completes on documentation classifiers. You are billed for the time interval
                *       between this time and the value of TrainingStartTime.</p>
                */
            TrainingEndTime?: Date;
            /**
                * <p>The input data configuration that you supplied when you created the document classifier
                *       for training.</p>
                */
            InputDataConfig?: DocumentClassifierInputDataConfig;
            /**
                * <p> Provides output results configuration parameters for custom classifier jobs.</p>
                */
            OutputDataConfig?: DocumentClassifierOutputDataConfig;
            /**
                * <p>Information about the document classifier, including the number of documents used for
                *       training the classifier, the number of documents used for test the classifier, and an accuracy
                *       rating.</p>
                */
            ClassifierMetadata?: ClassifierMetadata;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants
                *       Amazon Comprehend read access to your input data.</p>
                */
            DataAccessRoleArn?: string;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt
                *       data on the storage volume attached to the ML compute instance(s) that process the analysis
                *       job. The VolumeKmsKeyId can be either of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            VolumeKmsKeyId?: string;
            /**
                * <p> Configuration parameters for a private Virtual Private Cloud (VPC) containing the
                *       resources you are using for your custom classifier. For more information, see <a href="https://docs.aws.amazon.com/vppc/latest/userguide/what-is-amazon-vpc.html">Amazon
                *         VPC</a>. </p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>Indicates the mode in which the specific classifier was trained. This also indicates the
                *       format of input documents and the format of the confusion matrix. Each classifier can only be
                *       trained in one mode and this cannot be changed once the classifier is trained.</p>
                */
            Mode?: DocumentClassifierMode | string;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt
                *       trained custom models. The ModelKmsKeyId can be either of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ModelKmsKeyId?: string;
            /**
                * <p>The version name that you assigned to the document classifier.</p>
                */
            VersionName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the source model. This model was imported from a
                *       different AWS account to create the document classifier model in your AWS account.</p>
                */
            SourceModelArn?: string;
    }
    export namespace DocumentClassifierProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentClassifierProperties) => any;
    }
    export interface DescribeDocumentClassifierResponse {
            /**
                * <p>An object that contains the properties associated with a document classifier.</p>
                */
            DocumentClassifierProperties?: DocumentClassifierProperties;
    }
    export namespace DescribeDocumentClassifierResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDocumentClassifierResponse) => any;
    }
    export interface DescribeDominantLanguageDetectionJobRequest {
            /**
                * <p>The identifier that Amazon Comprehend generated for the job. The  operation returns this identifier in its
                *       response.</p>
                */
            JobId: string | undefined;
    }
    export namespace DescribeDominantLanguageDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDominantLanguageDetectionJobRequest) => any;
    }
    /**
        * <p>Provides information about a dominant language detection job.</p>
        */
    export interface DominantLanguageDetectionJobProperties {
            /**
                * <p>The identifier assigned to the dominant language detection job.</p>
                */
            JobId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the dominant language detection job. It is a unique,
                *       fully qualified identifier for the job. It includes the AWS account, Region, and the job ID.
                *       The format of the ARN is as follows:</p>
                *          <p>
                *             <code>arn:<partition>:comprehend:<region>:<account-id>:dominant-language-detection-job/<job-id></code>
                *          </p>
                *          <p>The following is an example job ARN:</p>
                *          <p>
                *             <code>arn:aws:comprehend:us-west-2:111122223333:dominant-language-detection-job/1234abcd12ab34cd56ef1234567890ab</code>
                *          </p>
                */
            JobArn?: string;
            /**
                * <p>The name that you assigned to the dominant language detection job.</p>
                */
            JobName?: string;
            /**
                * <p>The current status of the dominant language detection job. If the status is
                *         <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.</p>
                */
            JobStatus?: JobStatus | string;
            /**
                * <p>A description for the status of a job.</p>
                */
            Message?: string;
            /**
                * <p>The time that the dominant language detection job was submitted for processing.</p>
                */
            SubmitTime?: Date;
            /**
                * <p>The time that the dominant language detection job completed.</p>
                */
            EndTime?: Date;
            /**
                * <p>The input data configuration that you supplied when you created the dominant language
                *       detection job.</p>
                */
            InputDataConfig?: InputDataConfig;
            /**
                * <p>The output data configuration that you supplied when you created the dominant language
                *       detection job.</p>
                */
            OutputDataConfig?: OutputDataConfig;
            /**
                * <p>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input
                *       data.</p>
                */
            DataAccessRoleArn?: string;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt
                *       data on the storage volume attached to the ML compute instance(s) that process the analysis
                *       job. The VolumeKmsKeyId can be either of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            VolumeKmsKeyId?: string;
            /**
                * <p> Configuration parameters for a private Virtual Private Cloud (VPC) containing the
                *       resources you are using for your dominant language detection job. For more information, see
                *       <a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">Amazon
                *         VPC</a>. </p>
                */
            VpcConfig?: VpcConfig;
    }
    export namespace DominantLanguageDetectionJobProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DominantLanguageDetectionJobProperties) => any;
    }
    export interface DescribeDominantLanguageDetectionJobResponse {
            /**
                * <p>An object that contains the properties associated with a dominant language detection
                *       job.</p>
                */
            DominantLanguageDetectionJobProperties?: DominantLanguageDetectionJobProperties;
    }
    export namespace DescribeDominantLanguageDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDominantLanguageDetectionJobResponse) => any;
    }
    export interface DescribeEndpointRequest {
            /**
                * <p>The Amazon Resource Number (ARN) of the endpoint being described.</p>
                */
            EndpointArn: string | undefined;
    }
    export namespace DescribeEndpointRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEndpointRequest) => any;
    }
    export enum EndpointStatus {
            CREATING = "CREATING",
            DELETING = "DELETING",
            FAILED = "FAILED",
            IN_SERVICE = "IN_SERVICE",
            UPDATING = "UPDATING"
    }
    /**
        * <p>Specifies information about the specified endpoint.
        *       For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>.</p>
        */
    export interface EndpointProperties {
            /**
                * <p>The Amazon Resource Number (ARN) of the endpoint.</p>
                */
            EndpointArn?: string;
            /**
                * <p>Specifies the status of the endpoint. Because the endpoint updates and creation are
                *       asynchronous, so customers will need to wait for the endpoint to be <code>Ready</code> status
                *       before making inference requests.</p>
                */
            Status?: EndpointStatus | string;
            /**
                * <p>Specifies a reason for failure in cases of <code>Failed</code> status.</p>
                */
            Message?: string;
            /**
                * <p>The Amazon Resource Number (ARN) of the model to which the endpoint is attached.</p>
                */
            ModelArn?: string;
            /**
                * <p>ARN of the new model to use for updating an existing endpoint. This ARN is going to be
                *       different from the model ARN when the update is in progress</p>
                */
            DesiredModelArn?: string;
            /**
                * <p>The desired number of inference units to be used by the model using this endpoint.
                *
                *       Each inference unit represents of a throughput of 100 characters per second.</p>
                */
            DesiredInferenceUnits?: number;
            /**
                * <p>The number of inference units currently used by the model using this endpoint.</p>
                */
            CurrentInferenceUnits?: number;
            /**
                * <p>The creation date and time of the endpoint.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The date and time that the endpoint was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS identity and Access Management (IAM) role that
                *       grants Amazon Comprehend read access to trained custom models encrypted with a customer
                *       managed key (ModelKmsKeyId).</p>
                */
            DataAccessRoleArn?: string;
            /**
                * <p>Data access role ARN to use in case the new model is encrypted with a customer KMS
                *       key.</p>
                */
            DesiredDataAccessRoleArn?: string;
    }
    export namespace EndpointProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EndpointProperties) => any;
    }
    export interface DescribeEndpointResponse {
            /**
                * <p>Describes information associated with the specific endpoint.</p>
                */
            EndpointProperties?: EndpointProperties;
    }
    export namespace DescribeEndpointResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEndpointResponse) => any;
    }
    export interface DescribeEntitiesDetectionJobRequest {
            /**
                * <p>The identifier that Amazon Comprehend generated for the job. The  operation returns this identifier in its
                *       response.</p>
                */
            JobId: string | undefined;
    }
    export namespace DescribeEntitiesDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEntitiesDetectionJobRequest) => any;
    }
    /**
        * <p>Provides information about an entities detection job.</p>
        */
    export interface EntitiesDetectionJobProperties {
            /**
                * <p>The identifier assigned to the entities detection job.</p>
                */
            JobId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the entities detection job. It is a unique, fully
                *       qualified identifier for the job. It includes the AWS account, Region, and the job ID. The
                *       format of the ARN is as follows:</p>
                *          <p>
                *             <code>arn:<partition>:comprehend:<region>:<account-id>:entities-detection-job/<job-id></code>
                *          </p>
                *          <p>The following is an example job ARN:</p>
                *          <p>
                *             <code>arn:aws:comprehend:us-west-2:111122223333:entities-detection-job/1234abcd12ab34cd56ef1234567890ab</code>
                *          </p>
                */
            JobArn?: string;
            /**
                * <p>The name that you assigned the entities detection job.</p>
                */
            JobName?: string;
            /**
                * <p>The current status of the entities detection job. If the status is <code>FAILED</code>,
                *       the <code>Message</code> field shows the reason for the failure.</p>
                */
            JobStatus?: JobStatus | string;
            /**
                * <p>A description of the status of a job.</p>
                */
            Message?: string;
            /**
                * <p>The time that the entities detection job was submitted for processing.</p>
                */
            SubmitTime?: Date;
            /**
                * <p>The time that the entities detection job completed</p>
                */
            EndTime?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the entity recognizer.</p>
                */
            EntityRecognizerArn?: string;
            /**
                * <p>The input data configuration that you supplied when you created the entities detection
                *       job.</p>
                */
            InputDataConfig?: InputDataConfig;
            /**
                * <p>The output data configuration that you supplied when you created the entities detection
                *       job. </p>
                */
            OutputDataConfig?: OutputDataConfig;
            /**
                * <p>The language code of the input documents.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input
                *       data.</p>
                */
            DataAccessRoleArn?: string;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt
                *       data on the storage volume attached to the ML compute instance(s) that process the analysis
                *       job. The VolumeKmsKeyId can be either of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            VolumeKmsKeyId?: string;
            /**
                * <p> Configuration parameters for a private Virtual Private Cloud (VPC) containing the
                *       resources you are using for your entity detection job. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">Amazon
                *         VPC</a>. </p>
                */
            VpcConfig?: VpcConfig;
    }
    export namespace EntitiesDetectionJobProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntitiesDetectionJobProperties) => any;
    }
    export interface DescribeEntitiesDetectionJobResponse {
            /**
                * <p>An object that contains the properties associated with an entities detection job.</p>
                */
            EntitiesDetectionJobProperties?: EntitiesDetectionJobProperties;
    }
    export namespace DescribeEntitiesDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEntitiesDetectionJobResponse) => any;
    }
    export interface DescribeEntityRecognizerRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the entity recognizer.</p>
                */
            EntityRecognizerArn: string | undefined;
    }
    export namespace DescribeEntityRecognizerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEntityRecognizerRequest) => any;
    }
    /**
        * <p>Detailed information about the accuracy of an entity recognizer for a specific entity
        *       type. </p>
        */
    export interface EntityTypesEvaluationMetrics {
            /**
                * <p>A measure of the usefulness of the recognizer results for a specific entity type in the
                *       test data. High precision means that the recognizer returned substantially more relevant
                *       results than irrelevant ones. </p>
                */
            Precision?: number;
            /**
                * <p>A measure of how complete the recognizer results are for a specific entity type in the
                *       test data. High recall means that the recognizer returned most of the relevant results.</p>
                */
            Recall?: number;
            /**
                * <p>A measure of how accurate the recognizer results are for a specific entity type in the
                *       test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The
                *         <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and
                *       the worst score is 0. </p>
                */
            F1Score?: number;
    }
    export namespace EntityTypesEvaluationMetrics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntityTypesEvaluationMetrics) => any;
    }
    /**
        * <p>Individual item from the list of entity types in the metadata of an entity
        *       recognizer.</p>
        */
    export interface EntityRecognizerMetadataEntityTypesListItem {
            /**
                * <p>Type of entity from the list of entity types in the metadata of an entity recognizer.
                *     </p>
                */
            Type?: string;
            /**
                * <p>Detailed information about the accuracy of the entity recognizer for a specific item on
                *       the list of entity types. </p>
                */
            EvaluationMetrics?: EntityTypesEvaluationMetrics;
            /**
                * <p>Indicates the number of times the given entity type was seen in the training data. </p>
                */
            NumberOfTrainMentions?: number;
    }
    export namespace EntityRecognizerMetadataEntityTypesListItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntityRecognizerMetadataEntityTypesListItem) => any;
    }
    /**
        * <p>Detailed information about the accuracy of an entity recognizer. </p>
        */
    export interface EntityRecognizerEvaluationMetrics {
            /**
                * <p>A measure of the usefulness of the recognizer results in the test data. High precision
                *       means that the recognizer returned substantially more relevant results than irrelevant ones.
                *     </p>
                */
            Precision?: number;
            /**
                * <p>A measure of how complete the recognizer results are for the test data. High recall means
                *       that the recognizer returned most of the relevant results.</p>
                */
            Recall?: number;
            /**
                * <p>A measure of how accurate the recognizer results are for the test data. It is derived from
                *       the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the
                *       harmonic average of the two scores. For plain text entity recognizer models, the range is 0 to 100,
                *       where 100 is the best score. For PDF/Word entity recognizer models, the range is 0 to 1,
                *       where 1 is the best score.
                *     </p>
                */
            F1Score?: number;
    }
    export namespace EntityRecognizerEvaluationMetrics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntityRecognizerEvaluationMetrics) => any;
    }
    /**
        * <p>Detailed information about an entity recognizer.</p>
        */
    export interface EntityRecognizerMetadata {
            /**
                * <p> The number of documents in the input data that were used to train the entity recognizer.
                *       Typically this is 80 to 90 percent of the input documents.</p>
                */
            NumberOfTrainedDocuments?: number;
            /**
                * <p> The number of documents in the input data that were used to test the entity recognizer.
                *       Typically this is 10 to 20 percent of the input documents.</p>
                */
            NumberOfTestDocuments?: number;
            /**
                * <p>Detailed information about the accuracy of an entity recognizer.</p>
                */
            EvaluationMetrics?: EntityRecognizerEvaluationMetrics;
            /**
                * <p>Entity types from the metadata of an entity recognizer.</p>
                */
            EntityTypes?: EntityRecognizerMetadataEntityTypesListItem[];
    }
    export namespace EntityRecognizerMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntityRecognizerMetadata) => any;
    }
    /**
        * <p>Describes information about an entity recognizer.</p>
        */
    export interface EntityRecognizerProperties {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the entity recognizer.</p>
                */
            EntityRecognizerArn?: string;
            /**
                * <p> The language of the input documents. All documents must be in the same language. Only
                *       English ("en") is currently supported.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>Provides the status of the entity recognizer.</p>
                */
            Status?: ModelStatus | string;
            /**
                * <p> A description of the status of the recognizer.</p>
                */
            Message?: string;
            /**
                * <p>The time that the recognizer was submitted for processing.</p>
                */
            SubmitTime?: Date;
            /**
                * <p>The time that the recognizer creation completed.</p>
                */
            EndTime?: Date;
            /**
                * <p>The time that training of the entity recognizer started.</p>
                */
            TrainingStartTime?: Date;
            /**
                * <p>The time that training of the entity recognizer was completed.</p>
                */
            TrainingEndTime?: Date;
            /**
                * <p>The input data properties of an entity recognizer.</p>
                */
            InputDataConfig?: EntityRecognizerInputDataConfig;
            /**
                * <p> Provides information about an entity recognizer.</p>
                */
            RecognizerMetadata?: EntityRecognizerMetadata;
            /**
                * <p> The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants
                *       Amazon Comprehend read access to your input data.</p>
                */
            DataAccessRoleArn?: string;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt
                *       data on the storage volume attached to the ML compute instance(s) that process the analysis
                *       job. The VolumeKmsKeyId can be either of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            VolumeKmsKeyId?: string;
            /**
                * <p> Configuration parameters for a private Virtual Private Cloud (VPC) containing the
                *       resources you are using for your custom entity recognizer. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">Amazon
                *         VPC</a>. </p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt
                *       trained custom models. The ModelKmsKeyId can be either of the following formats: </p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ModelKmsKeyId?: string;
            /**
                * <p>The version name you assigned to the entity recognizer.</p>
                */
            VersionName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the source model. This model was imported from a
                *       different AWS account to create the entity recognizer model in your AWS account.</p>
                */
            SourceModelArn?: string;
    }
    export namespace EntityRecognizerProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntityRecognizerProperties) => any;
    }
    export interface DescribeEntityRecognizerResponse {
            /**
                * <p>Describes information associated with an entity recognizer.</p>
                */
            EntityRecognizerProperties?: EntityRecognizerProperties;
    }
    export namespace DescribeEntityRecognizerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEntityRecognizerResponse) => any;
    }
    export interface DescribeEventsDetectionJobRequest {
            /**
                * <p>The identifier of the events detection job.</p>
                */
            JobId: string | undefined;
    }
    export namespace DescribeEventsDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEventsDetectionJobRequest) => any;
    }
    /**
        * <p>Provides information about an events detection job.</p>
        */
    export interface EventsDetectionJobProperties {
            /**
                * <p>The identifier assigned to the events detection job.</p>
                */
            JobId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the events detection job. It is a unique, fully
                *       qualified identifier for the job. It includes the AWS account, Region, and the job ID. The
                *       format of the ARN is as follows:</p>
                *          <p>
                *             <code>arn:<partition>:comprehend:<region>:<account-id>:events-detection-job/<job-id></code>
                *          </p>
                *          <p>The following is an example job ARN:</p>
                *          <p>
                *             <code>arn:aws:comprehend:us-west-2:111122223333:events-detection-job/1234abcd12ab34cd56ef1234567890ab</code>
                *          </p>
                */
            JobArn?: string;
            /**
                * <p>The name you assigned the events detection job.</p>
                */
            JobName?: string;
            /**
                * <p>The current status of the events detection job.</p>
                */
            JobStatus?: JobStatus | string;
            /**
                * <p>A description of the status of the events detection job.</p>
                */
            Message?: string;
            /**
                * <p>The time that the events detection job was submitted for processing.</p>
                */
            SubmitTime?: Date;
            /**
                * <p>The time that the events detection job completed.</p>
                */
            EndTime?: Date;
            /**
                * <p>The input data configuration that you supplied when you created the events detection
                *       job.</p>
                */
            InputDataConfig?: InputDataConfig;
            /**
                * <p>The output data configuration that you supplied when you created the events detection
                *       job.</p>
                */
            OutputDataConfig?: OutputDataConfig;
            /**
                * <p>The language code of the input documents.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Identify and Access Management (IAM) role that
                *       grants Amazon Comprehend read access to your input data.</p>
                */
            DataAccessRoleArn?: string;
            /**
                * <p>The types of events that are detected by the job.</p>
                */
            TargetEventTypes?: string[];
    }
    export namespace EventsDetectionJobProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventsDetectionJobProperties) => any;
    }
    export interface DescribeEventsDetectionJobResponse {
            /**
                * <p>An object that contains the properties associated with an event detection job.</p>
                */
            EventsDetectionJobProperties?: EventsDetectionJobProperties;
    }
    export namespace DescribeEventsDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEventsDetectionJobResponse) => any;
    }
    export interface DescribeKeyPhrasesDetectionJobRequest {
            /**
                * <p>The identifier that Amazon Comprehend generated for the job. The  operation returns this identifier in its
                *       response.</p>
                */
            JobId: string | undefined;
    }
    export namespace DescribeKeyPhrasesDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeKeyPhrasesDetectionJobRequest) => any;
    }
    /**
        * <p>Provides information about a key phrases detection job.</p>
        */
    export interface KeyPhrasesDetectionJobProperties {
            /**
                * <p>The identifier assigned to the key phrases detection job.</p>
                */
            JobId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the key phrases detection job. It is a unique, fully
                *       qualified identifier for the job. It includes the AWS account, Region, and the job ID. The
                *       format of the ARN is as follows:</p>
                *          <p>
                *             <code>arn:<partition>:comprehend:<region>:<account-id>:key-phrases-detection-job/<job-id></code>
                *          </p>
                *          <p>The following is an example job ARN:</p>
                *          <p>
                *             <code>arn:aws:comprehend:us-west-2:111122223333:key-phrases-detection-job/1234abcd12ab34cd56ef1234567890ab</code>
                *          </p>
                */
            JobArn?: string;
            /**
                * <p>The name that you assigned the key phrases detection job.</p>
                */
            JobName?: string;
            /**
                * <p>The current status of the key phrases detection job. If the status is <code>FAILED</code>,
                *       the <code>Message</code> field shows the reason for the failure.</p>
                */
            JobStatus?: JobStatus | string;
            /**
                * <p>A description of the status of a job.</p>
                */
            Message?: string;
            /**
                * <p>The time that the key phrases detection job was submitted for processing.</p>
                */
            SubmitTime?: Date;
            /**
                * <p>The time that the key phrases detection job completed.</p>
                */
            EndTime?: Date;
            /**
                * <p>The input data configuration that you supplied when you created the key phrases detection
                *       job.</p>
                */
            InputDataConfig?: InputDataConfig;
            /**
                * <p>The output data configuration that you supplied when you created the key phrases detection
                *       job.</p>
                */
            OutputDataConfig?: OutputDataConfig;
            /**
                * <p>The language code of the input documents.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input
                *       data.</p>
                */
            DataAccessRoleArn?: string;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt
                *       data on the storage volume attached to the ML compute instance(s) that process the analysis
                *       job. The VolumeKmsKeyId can be either of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            VolumeKmsKeyId?: string;
            /**
                * <p> Configuration parameters for a private Virtual Private Cloud (VPC) containing the
                *       resources you are using for your key phrases detection job. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">Amazon
                *         VPC</a>. </p>
                */
            VpcConfig?: VpcConfig;
    }
    export namespace KeyPhrasesDetectionJobProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KeyPhrasesDetectionJobProperties) => any;
    }
    export interface DescribeKeyPhrasesDetectionJobResponse {
            /**
                * <p>An object that contains the properties associated with a key phrases detection job.
                *     </p>
                */
            KeyPhrasesDetectionJobProperties?: KeyPhrasesDetectionJobProperties;
    }
    export namespace DescribeKeyPhrasesDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeKeyPhrasesDetectionJobResponse) => any;
    }
    export interface DescribePiiEntitiesDetectionJobRequest {
            /**
                * <p>The identifier that Amazon Comprehend generated for the job. The  operation returns this identifier in its
                *       response.</p>
                */
            JobId: string | undefined;
    }
    export namespace DescribePiiEntitiesDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePiiEntitiesDetectionJobRequest) => any;
    }
    export enum PiiEntitiesDetectionMode {
            ONLY_OFFSETS = "ONLY_OFFSETS",
            ONLY_REDACTION = "ONLY_REDACTION"
    }
    /**
        * <p>Provides configuration parameters for the output of PII entity detection jobs.</p>
        */
    export interface PiiOutputDataConfig {
            /**
                * <p>When you use the <code>PiiOutputDataConfig</code> object with asynchronous operations,
                *       you specify the Amazon S3 location where you want to write the output data. </p>
                *          <p>
                *       For a PII entity detection job, the output file is plain text, not a compressed archive.
                *       The output file name is the same as the input file, with <code>.out</code> appended at the end.
                *     </p>
                */
            S3Uri: string | undefined;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt the
                *       output results from an analysis job.</p>
                */
            KmsKeyId?: string;
    }
    export namespace PiiOutputDataConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PiiOutputDataConfig) => any;
    }
    export enum PiiEntitiesDetectionMaskMode {
            MASK = "MASK",
            REPLACE_WITH_PII_ENTITY_TYPE = "REPLACE_WITH_PII_ENTITY_TYPE"
    }
    /**
        * <p>Provides configuration parameters for PII entity redaction.</p>
        */
    export interface RedactionConfig {
            /**
                * <p>An array of the types of PII entities that Amazon Comprehend detects in the input text for
                *       your request.</p>
                */
            PiiEntityTypes?: (PiiEntityType | string)[];
            /**
                * <p>Specifies whether the PII entity is redacted with the mask character or the entity
                *       type.</p>
                */
            MaskMode?: PiiEntitiesDetectionMaskMode | string;
            /**
                * <p>A character that replaces each character in the redacted PII entity.</p>
                */
            MaskCharacter?: string;
    }
    export namespace RedactionConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RedactionConfig) => any;
    }
    /**
        * <p>Provides information about a PII entities detection job.</p>
        */
    export interface PiiEntitiesDetectionJobProperties {
            /**
                * <p>The identifier assigned to the PII entities detection job.</p>
                */
            JobId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the PII entities detection job. It is a unique, fully
                *       qualified identifier for the job. It includes the AWS account, Region, and the job ID. The
                *       format of the ARN is as follows:</p>
                *          <p>
                *             <code>arn:<partition>:comprehend:<region>:<account-id>:pii-entities-detection-job/<job-id></code>
                *          </p>
                *          <p>The following is an example job ARN:</p>
                *          <p>
                *             <code>arn:aws:comprehend:us-west-2:111122223333:pii-entities-detection-job/1234abcd12ab34cd56ef1234567890ab</code>
                *          </p>
                */
            JobArn?: string;
            /**
                * <p>The name that you assigned the PII entities detection job.</p>
                */
            JobName?: string;
            /**
                * <p>The current status of the PII entities detection job. If the status is
                *       <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.</p>
                */
            JobStatus?: JobStatus | string;
            /**
                * <p>A description of the status of a job.</p>
                */
            Message?: string;
            /**
                * <p>The time that the PII entities detection job was submitted for processing.</p>
                */
            SubmitTime?: Date;
            /**
                * <p>The time that the PII entities detection job completed.</p>
                */
            EndTime?: Date;
            /**
                * <p>The input properties for a PII entities detection job.</p>
                */
            InputDataConfig?: InputDataConfig;
            /**
                * <p>The output data configuration that you supplied when you created the PII entities
                *       detection job.</p>
                */
            OutputDataConfig?: PiiOutputDataConfig;
            /**
                * <p>Provides configuration parameters for PII entity redaction.</p>
                *          <p>This parameter is required if you set the <code>Mode</code> parameter to
                *         <code>ONLY_REDACTION</code>. In that case, you must provide a <code>RedactionConfig</code>
                *       definition that includes the <code>PiiEntityTypes</code> parameter.</p>
                */
            RedactionConfig?: RedactionConfig;
            /**
                * <p>The language code of the input documents</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input
                *       data.</p>
                */
            DataAccessRoleArn?: string;
            /**
                * <p>Specifies whether the output provides the locations (offsets) of PII entities or a file in
                *       which PII entities are redacted.</p>
                */
            Mode?: PiiEntitiesDetectionMode | string;
    }
    export namespace PiiEntitiesDetectionJobProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PiiEntitiesDetectionJobProperties) => any;
    }
    export interface DescribePiiEntitiesDetectionJobResponse {
            /**
                * <p>Provides information about a PII entities detection job.</p>
                */
            PiiEntitiesDetectionJobProperties?: PiiEntitiesDetectionJobProperties;
    }
    export namespace DescribePiiEntitiesDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePiiEntitiesDetectionJobResponse) => any;
    }
    export interface DescribeResourcePolicyRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the policy to describe.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace DescribeResourcePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeResourcePolicyRequest) => any;
    }
    export interface DescribeResourcePolicyResponse {
            /**
                * <p>The JSON body of the resource-based policy.</p>
                */
            ResourcePolicy?: string;
            /**
                * <p>The time at which the policy was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The time at which the policy was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The revision ID of the policy. Each time you modify a policy, Amazon Comprehend assigns a
                *       new revision ID, and it deletes the prior version of the policy.</p>
                */
            PolicyRevisionId?: string;
    }
    export namespace DescribeResourcePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeResourcePolicyResponse) => any;
    }
    export interface DescribeSentimentDetectionJobRequest {
            /**
                * <p>The identifier that Amazon Comprehend generated for the job. The  operation returns this identifier in its
                *       response.</p>
                */
            JobId: string | undefined;
    }
    export namespace DescribeSentimentDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSentimentDetectionJobRequest) => any;
    }
    /**
        * <p>Provides information about a sentiment detection job.</p>
        */
    export interface SentimentDetectionJobProperties {
            /**
                * <p>The identifier assigned to the sentiment detection job.</p>
                */
            JobId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the sentiment detection job. It is a unique, fully
                *       qualified identifier for the job. It includes the AWS account, Region, and the job ID. The
                *       format of the ARN is as follows:</p>
                *          <p>
                *             <code>arn:<partition>:comprehend:<region>:<account-id>:sentiment-detection-job/<job-id></code>
                *          </p>
                *          <p>The following is an example job ARN:</p>
                *          <p>
                *             <code>arn:aws:comprehend:us-west-2:111122223333:sentiment-detection-job/1234abcd12ab34cd56ef1234567890ab</code>
                *          </p>
                */
            JobArn?: string;
            /**
                * <p>The name that you assigned to the sentiment detection job</p>
                */
            JobName?: string;
            /**
                * <p>The current status of the sentiment detection job. If the status is <code>FAILED</code>,
                *       the <code>Messages</code> field shows the reason for the failure.</p>
                */
            JobStatus?: JobStatus | string;
            /**
                * <p>A description of the status of a job.</p>
                */
            Message?: string;
            /**
                * <p>The time that the sentiment detection job was submitted for processing.</p>
                */
            SubmitTime?: Date;
            /**
                * <p>The time that the sentiment detection job ended.</p>
                */
            EndTime?: Date;
            /**
                * <p>The input data configuration that you supplied when you created the sentiment detection
                *       job.</p>
                */
            InputDataConfig?: InputDataConfig;
            /**
                * <p>The output data configuration that you supplied when you created the sentiment detection
                *       job.</p>
                */
            OutputDataConfig?: OutputDataConfig;
            /**
                * <p>The language code of the input documents.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input
                *       data.</p>
                */
            DataAccessRoleArn?: string;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt
                *       data on the storage volume attached to the ML compute instance(s) that process the analysis
                *       job. The VolumeKmsKeyId can be either of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            VolumeKmsKeyId?: string;
            /**
                * <p> Configuration parameters for a private Virtual Private Cloud (VPC) containing the
                *       resources you are using for your sentiment detection job. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">Amazon
                *         VPC</a>. </p>
                */
            VpcConfig?: VpcConfig;
    }
    export namespace SentimentDetectionJobProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SentimentDetectionJobProperties) => any;
    }
    export interface DescribeSentimentDetectionJobResponse {
            /**
                * <p>An object that contains the properties associated with a sentiment detection job.</p>
                */
            SentimentDetectionJobProperties?: SentimentDetectionJobProperties;
    }
    export namespace DescribeSentimentDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSentimentDetectionJobResponse) => any;
    }
    export interface DescribeTargetedSentimentDetectionJobRequest {
            /**
                * <p>The identifier that Amazon Comprehend generated for the job. The  operation returns this identifier in its
                *       response.</p>
                */
            JobId: string | undefined;
    }
    export namespace DescribeTargetedSentimentDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTargetedSentimentDetectionJobRequest) => any;
    }
    /**
        * <p>Provides information about a targeted sentiment detection job.</p>
        */
    export interface TargetedSentimentDetectionJobProperties {
            /**
                * <p>The identifier assigned to the targeted sentiment detection job.</p>
                */
            JobId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the targeted sentiment detection job. It is a unique, fully
                *       qualified identifier for the job. It includes the AWS account, Region, and the job ID. The
                *       format of the ARN is as follows:</p>
                *          <p>
                *             <code>arn:<partition>:comprehend:<region>:<account-id>:targeted-sentiment-detection-job/<job-id></code>
                *          </p>
                *          <p>The following is an example job ARN:</p>
                *          <p>
                *             <code>arn:aws:comprehend:us-west-2:111122223333:targeted-sentiment-detection-job/1234abcd12ab34cd56ef1234567890ab</code>
                *          </p>
                */
            JobArn?: string;
            /**
                * <p>The name that you assigned to the targeted sentiment detection job.</p>
                */
            JobName?: string;
            /**
                * <p>The current status of the targeted sentiment detection job. If the status is <code>FAILED</code>,
                *       the <code>Messages</code> field shows the reason for the failure.</p>
                */
            JobStatus?: JobStatus | string;
            /**
                * <p>A description of the status of a job.</p>
                */
            Message?: string;
            /**
                * <p>The time that the targeted sentiment detection job was submitted for processing.</p>
                */
            SubmitTime?: Date;
            /**
                * <p>The time that the targeted sentiment detection job ended.</p>
                */
            EndTime?: Date;
            /**
                * <p>The input properties for an inference job.</p>
                */
            InputDataConfig?: InputDataConfig;
            /**
                * <p>Provides configuration parameters for the output of inference jobs.</p>
                *          <p></p>
                */
            OutputDataConfig?: OutputDataConfig;
            /**
                * <p>The language code of the input documents.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input
                *       data.</p>
                */
            DataAccessRoleArn?: string;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt
                *       data on the storage volume attached to the ML compute instance(s) that process the
                *       targeted sentiment detection job. The VolumeKmsKeyId can be either of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *           <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            VolumeKmsKeyId?: string;
            /**
                * <p> Configuration parameters for an optional private Virtual Private Cloud (VPC) containing
                *       the resources you are using for the job. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">Amazon
                *         VPC</a>. </p>
                */
            VpcConfig?: VpcConfig;
    }
    export namespace TargetedSentimentDetectionJobProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TargetedSentimentDetectionJobProperties) => any;
    }
    export interface DescribeTargetedSentimentDetectionJobResponse {
            /**
                * <p>An object that contains the properties associated with a targeted sentiment detection job.</p>
                */
            TargetedSentimentDetectionJobProperties?: TargetedSentimentDetectionJobProperties;
    }
    export namespace DescribeTargetedSentimentDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTargetedSentimentDetectionJobResponse) => any;
    }
    export interface DescribeTopicsDetectionJobRequest {
            /**
                * <p>The identifier assigned by the user to the detection job.</p>
                */
            JobId: string | undefined;
    }
    export namespace DescribeTopicsDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTopicsDetectionJobRequest) => any;
    }
    /**
        * <p>Provides information about a topic detection job.</p>
        */
    export interface TopicsDetectionJobProperties {
            /**
                * <p>The identifier assigned to the topic detection job.</p>
                */
            JobId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the topics detection job. It is a unique, fully
                *       qualified identifier for the job. It includes the AWS account, Region, and the job ID. The
                *       format of the ARN is as follows:</p>
                *          <p>
                *             <code>arn:<partition>:comprehend:<region>:<account-id>:topics-detection-job/<job-id></code>
                *          </p>
                *          <p>The following is an example job ARN:</p>
                *          <p>
                *             <code>arn:aws:comprehend:us-west-2:111122223333:topics-detection-job/1234abcd12ab34cd56ef1234567890ab</code>
                *          </p>
                */
            JobArn?: string;
            /**
                * <p>The name of the topic detection job.</p>
                */
            JobName?: string;
            /**
                * <p>The current status of the topic detection job. If the status is <code>Failed</code>,
                *       the reason for the failure is shown in the <code>Message</code> field.</p>
                */
            JobStatus?: JobStatus | string;
            /**
                * <p>A description for the status of a job.</p>
                */
            Message?: string;
            /**
                * <p>The time that the topic detection job was submitted for processing.</p>
                */
            SubmitTime?: Date;
            /**
                * <p>The time that the topic detection job was completed.</p>
                */
            EndTime?: Date;
            /**
                * <p>The input data configuration supplied when you created the topic detection
                *       job.</p>
                */
            InputDataConfig?: InputDataConfig;
            /**
                * <p>The output data configuration supplied when you created the topic detection
                *       job.</p>
                */
            OutputDataConfig?: OutputDataConfig;
            /**
                * <p>The number of topics to detect supplied when you created the topic detection job. The
                *       default is 10. </p>
                */
            NumberOfTopics?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants
                *       Amazon Comprehend read access to your job data. </p>
                */
            DataAccessRoleArn?: string;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt
                *       data on the storage volume attached to the ML compute instance(s) that process the analysis
                *       job. The VolumeKmsKeyId can be either of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            VolumeKmsKeyId?: string;
            /**
                * <p>Configuration parameters for a private Virtual Private Cloud (VPC) containing the
                *       resources you are using for your topic detection job. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">Amazon
                *         VPC</a>. </p>
                */
            VpcConfig?: VpcConfig;
    }
    export namespace TopicsDetectionJobProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TopicsDetectionJobProperties) => any;
    }
    export interface DescribeTopicsDetectionJobResponse {
            /**
                * <p>The list of properties for the requested job.</p>
                */
            TopicsDetectionJobProperties?: TopicsDetectionJobProperties;
    }
    export namespace DescribeTopicsDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTopicsDetectionJobResponse) => any;
    }
    export interface DetectDominantLanguageRequest {
            /**
                * <p>A UTF-8 text string. Each string should contain at least 20 characters and must contain
                *       fewer that 5,000 bytes of UTF-8 encoded characters.</p>
                */
            Text: string | undefined;
    }
    export namespace DetectDominantLanguageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectDominantLanguageRequest) => any;
    }
    export interface DetectDominantLanguageResponse {
            /**
                * <p>The languages that Amazon Comprehend detected in the input text. For each language, the
                *       response returns the RFC 5646 language code and the level of confidence that Amazon Comprehend
                *       has in the accuracy of its inference. For more information about RFC 5646, see <a href="https://tools.ietf.org/html/rfc5646">Tags for Identifying Languages</a> on the
                *         <i>IETF Tools</i> web site.</p>
                */
            Languages?: DominantLanguage[];
    }
    export namespace DetectDominantLanguageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectDominantLanguageResponse) => any;
    }
    export interface DetectEntitiesRequest {
            /**
                * <p>A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded
                *       characters.</p>
                */
            Text: string | undefined;
            /**
                * <p>The language of the input documents. You can specify any of the primary languages
                *       supported by Amazon Comprehend. All documents must be in the same language.</p>
                *          <p>If your request includes the endpoint for a custom entity recognition model, Amazon
                *       Comprehend uses the language of your custom model, and it ignores any language code that you
                *       specify here.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The Amazon Resource Name of an endpoint that is associated with a custom entity
                *       recognition model. Provide an endpoint if you want to detect entities by using your own custom
                *       model instead of the default model that is used by Amazon Comprehend.</p>
                *          <p>If you specify an endpoint, Amazon Comprehend uses the language of your custom model, and
                *       it ignores any language code that you provide in your request.</p>
                *          <p>For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>.</p>
                */
            EndpointArn?: string;
    }
    export namespace DetectEntitiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectEntitiesRequest) => any;
    }
    export interface DetectEntitiesResponse {
            /**
                * <p>A collection of entities identified in the input text. For each entity, the response
                *       provides the entity text, entity type, where the entity text begins and ends, and the level of
                *       confidence that Amazon Comprehend has in the detection. </p>
                *          <p>If your request uses a custom entity recognition model, Amazon Comprehend detects the
                *       entities that the model is trained to recognize. Otherwise, it detects the default entity
                *       types. For a list of default entity types, see <a>how-entities</a>.</p>
                */
            Entities?: Entity[];
    }
    export namespace DetectEntitiesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectEntitiesResponse) => any;
    }
    export interface DetectKeyPhrasesRequest {
            /**
                * <p>A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded
                *       characters.</p>
                */
            Text: string | undefined;
            /**
                * <p>The language of the input documents. You can specify any of the primary languages
                *       supported by Amazon Comprehend. All documents must be in the same language.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
    }
    export namespace DetectKeyPhrasesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectKeyPhrasesRequest) => any;
    }
    export interface DetectKeyPhrasesResponse {
            /**
                * <p>A collection of key phrases that Amazon Comprehend identified in the input text. For
                *       each key phrase, the response provides the text of the key phrase, where the key phrase begins
                *       and ends, and the level of confidence that Amazon Comprehend has in the accuracy of the
                *       detection. </p>
                */
            KeyPhrases?: KeyPhrase[];
    }
    export namespace DetectKeyPhrasesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectKeyPhrasesResponse) => any;
    }
    export interface DetectPiiEntitiesRequest {
            /**
                * <p>A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded
                *       characters.</p>
                */
            Text: string | undefined;
            /**
                * <p>The language of the input documents. Currently, English is the only valid language.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
    }
    export namespace DetectPiiEntitiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectPiiEntitiesRequest) => any;
    }
    /**
        * <p>Provides information about a PII entity.</p>
        */
    export interface PiiEntity {
            /**
                * <p>The level of confidence that Amazon Comprehend has in the accuracy of the
                *       detection.</p>
                */
            Score?: number;
            /**
                * <p>The entity's type.</p>
                */
            Type?: PiiEntityType | string;
            /**
                * <p>A character offset in the input text that shows where the PII entity begins (the first
                *       character is at position 0). The offset returns the position of each UTF-8 code point in the
                *       string. A <i>code point</i> is the abstract character from a particular
                *       graphical representation. For example, a multi-byte UTF-8 character maps to a single code
                *       point.</p>
                */
            BeginOffset?: number;
            /**
                * <p>A character offset in the input text that shows where the PII entity ends. The offset
                *       returns the position of each UTF-8 code point in the string. A <i>code point</i>
                *       is the abstract character from a particular graphical representation. For example, a
                *       multi-byte UTF-8 character maps to a single code point.</p>
                */
            EndOffset?: number;
    }
    export namespace PiiEntity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PiiEntity) => any;
    }
    export interface DetectPiiEntitiesResponse {
            /**
                * <p>A collection of PII entities identified in the input text. For each entity, the response
                *       provides the entity type, where the entity text begins and ends, and the level of confidence
                *       that Amazon Comprehend has in the detection.</p>
                */
            Entities?: PiiEntity[];
    }
    export namespace DetectPiiEntitiesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectPiiEntitiesResponse) => any;
    }
    export interface DetectSentimentRequest {
            /**
                * <p>A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded
                *       characters.</p>
                */
            Text: string | undefined;
            /**
                * <p>The language of the input documents. You can specify any of the primary languages
                *       supported by Amazon Comprehend. All documents must be in the same language.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
    }
    export namespace DetectSentimentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectSentimentRequest) => any;
    }
    export interface DetectSentimentResponse {
            /**
                * <p>The inferred sentiment that Amazon Comprehend has the highest level of confidence
                *       in.</p>
                */
            Sentiment?: SentimentType | string;
            /**
                * <p>An object that lists the sentiments, and their corresponding confidence
                *       levels.</p>
                */
            SentimentScore?: SentimentScore;
    }
    export namespace DetectSentimentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectSentimentResponse) => any;
    }
    export interface DetectSyntaxRequest {
            /**
                * <p>A UTF-8 string. Each string must contain fewer that 5,000 bytes of UTF encoded
                *       characters.</p>
                */
            Text: string | undefined;
            /**
                * <p>The language code of the input documents. You can specify any of the following languages
                *       supported by Amazon Comprehend: German ("de"), English ("en"), Spanish ("es"), French ("fr"),
                *       Italian ("it"), or Portuguese ("pt").</p>
                */
            LanguageCode: SyntaxLanguageCode | string | undefined;
    }
    export namespace DetectSyntaxRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectSyntaxRequest) => any;
    }
    export interface DetectSyntaxResponse {
            /**
                * <p>A collection of syntax tokens describing the text. For each token, the response provides
                *       the text, the token type, where the text begins and ends, and the level of confidence that
                *       Amazon Comprehend has that the token is correct. For a list of token types, see <a>how-syntax</a>.</p>
                */
            SyntaxTokens?: SyntaxToken[];
    }
    export namespace DetectSyntaxResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectSyntaxResponse) => any;
    }
    export interface ImportModelRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the custom model to import.</p>
                */
            SourceModelArn: string | undefined;
            /**
                * <p>The name to assign to the custom model that is created in Amazon Comprehend by this
                *       import.</p>
                */
            ModelName?: string;
            /**
                * <p>The version name given to the custom model that is created by this import. Version names
                *       can have a maximum of 256 characters. Alphanumeric characters, hyphens (-) and underscores (_)
                *       are allowed. The version name must be unique among all models with the same classifier name in
                *       the account/AWS Region.</p>
                */
            VersionName?: string;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt
                *       trained custom models. The ModelKmsKeyId can be either of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ModelKmsKeyId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that allows
                *       Amazon Comprehend to use Amazon Key Management Service (KMS) to encrypt or decrypt the custom
                *       model.</p>
                */
            DataAccessRoleArn?: string;
            /**
                * <p>Tags to be associated with the custom model that is created by this import. A tag is a
                *       key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a
                *       tag with "Sales" as the key might be added to a resource to indicate its use by the sales
                *       department.</p>
                */
            Tags?: Tag[];
    }
    export namespace ImportModelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportModelRequest) => any;
    }
    export interface ImportModelResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the custom model being imported.</p>
                */
            ModelArn?: string;
    }
    export namespace ImportModelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportModelResponse) => any;
    }
    /**
        * <p>The filter specified for the operation is invalid. Specify a different
        *       filter.</p>
        */
    export class InvalidFilterException extends __BaseException {
            readonly name: "InvalidFilterException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidFilterException, __BaseException>);
    }
    /**
        * <p>Provides information for filtering a list of document classification jobs. For more
        *       information, see the  operation. You can
        *       provide only one filter parameter in each request.</p>
        */
    export interface DocumentClassificationJobFilter {
            /**
                * <p>Filters on the name of the job.</p>
                */
            JobName?: string;
            /**
                * <p>Filters the list based on job status. Returns only jobs with the specified status.</p>
                */
            JobStatus?: JobStatus | string;
            /**
                * <p>Filters the list of jobs based on the time that the job was submitted for processing.
                *       Returns only jobs submitted before the specified time. Jobs are returned in ascending order,
                *       oldest to newest.</p>
                */
            SubmitTimeBefore?: Date;
            /**
                * <p>Filters the list of jobs based on the time that the job was submitted for processing.
                *       Returns only jobs submitted after the specified time. Jobs are returned in descending order,
                *       newest to oldest.</p>
                */
            SubmitTimeAfter?: Date;
    }
    export namespace DocumentClassificationJobFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentClassificationJobFilter) => any;
    }
    export interface ListDocumentClassificationJobsRequest {
            /**
                * <p>Filters the jobs that are returned. You can filter jobs on their names, status, or the
                *       date and time that they were submitted. You can only set one filter at a time.</p>
                */
            Filter?: DocumentClassificationJobFilter;
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return in each page. The default is 100.</p>
                */
            MaxResults?: number;
    }
    export namespace ListDocumentClassificationJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDocumentClassificationJobsRequest) => any;
    }
    export interface ListDocumentClassificationJobsResponse {
            /**
                * <p>A list containing the properties of each job returned.</p>
                */
            DocumentClassificationJobPropertiesList?: DocumentClassificationJobProperties[];
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
    }
    export namespace ListDocumentClassificationJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDocumentClassificationJobsResponse) => any;
    }
    /**
        * <p>Provides information for filtering a list of document classifiers. You can only specify
        *       one filtering parameter in a request. For more information, see the  operation.</p>
        */
    export interface DocumentClassifierFilter {
            /**
                * <p>Filters the list of classifiers based on status.</p>
                */
            Status?: ModelStatus | string;
            /**
                * <p>The name that you assigned to the document classifier</p>
                */
            DocumentClassifierName?: string;
            /**
                * <p>Filters the list of classifiers based on the time that the classifier was submitted for
                *       processing. Returns only classifiers submitted before the specified time. Classifiers are
                *       returned in ascending order, oldest to newest.</p>
                */
            SubmitTimeBefore?: Date;
            /**
                * <p>Filters the list of classifiers based on the time that the classifier was submitted for
                *       processing. Returns only classifiers submitted after the specified time. Classifiers are
                *       returned in descending order, newest to oldest.</p>
                */
            SubmitTimeAfter?: Date;
    }
    export namespace DocumentClassifierFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentClassifierFilter) => any;
    }
    export interface ListDocumentClassifiersRequest {
            /**
                * <p>Filters the jobs that are returned. You can filter jobs on their name, status, or the date
                *       and time that they were submitted. You can only set one filter at a time.</p>
                */
            Filter?: DocumentClassifierFilter;
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return in each page. The default is 100.</p>
                */
            MaxResults?: number;
    }
    export namespace ListDocumentClassifiersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDocumentClassifiersRequest) => any;
    }
    export interface ListDocumentClassifiersResponse {
            /**
                * <p>A list containing the properties of each job returned.</p>
                */
            DocumentClassifierPropertiesList?: DocumentClassifierProperties[];
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
    }
    export namespace ListDocumentClassifiersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDocumentClassifiersResponse) => any;
    }
    export interface ListDocumentClassifierSummariesRequest {
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return on each page. The default is 100.</p>
                */
            MaxResults?: number;
    }
    export namespace ListDocumentClassifierSummariesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDocumentClassifierSummariesRequest) => any;
    }
    /**
        * <p>Describes information about a document classifier and its versions.</p>
        */
    export interface DocumentClassifierSummary {
            /**
                * <p>The name that you assigned the document classifier.</p>
                */
            DocumentClassifierName?: string;
            /**
                * <p>The number of versions you created.</p>
                */
            NumberOfVersions?: number;
            /**
                * <p>The time that the latest document classifier version was submitted for processing.</p>
                */
            LatestVersionCreatedAt?: Date;
            /**
                * <p>The version name you assigned to the latest document classifier version.</p>
                */
            LatestVersionName?: string;
            /**
                * <p>Provides the status of the latest document classifier version.</p>
                */
            LatestVersionStatus?: ModelStatus | string;
    }
    export namespace DocumentClassifierSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentClassifierSummary) => any;
    }
    export interface ListDocumentClassifierSummariesResponse {
            /**
                * <p>The list of summaries of document classifiers.</p>
                */
            DocumentClassifierSummariesList?: DocumentClassifierSummary[];
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
    }
    export namespace ListDocumentClassifierSummariesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDocumentClassifierSummariesResponse) => any;
    }
    /**
        * <p>Provides information for filtering a list of dominant language detection jobs. For more
        *       information, see the
        *       operation.</p>
        */
    export interface DominantLanguageDetectionJobFilter {
            /**
                * <p>Filters on the name of the job.</p>
                */
            JobName?: string;
            /**
                * <p>Filters the list of jobs based on job status. Returns only jobs with the specified
                *       status.</p>
                */
            JobStatus?: JobStatus | string;
            /**
                * <p>Filters the list of jobs based on the time that the job was submitted for processing.
                *       Returns only jobs submitted before the specified time. Jobs are returned in ascending order,
                *       oldest to newest.</p>
                */
            SubmitTimeBefore?: Date;
            /**
                * <p>Filters the list of jobs based on the time that the job was submitted for processing.
                *       Returns only jobs submitted after the specified time. Jobs are returned in descending order,
                *       newest to oldest.</p>
                */
            SubmitTimeAfter?: Date;
    }
    export namespace DominantLanguageDetectionJobFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DominantLanguageDetectionJobFilter) => any;
    }
    export interface ListDominantLanguageDetectionJobsRequest {
            /**
                * <p>Filters that jobs that are returned. You can filter jobs on their name, status, or the
                *       date and time that they were submitted. You can only set one filter at a time.</p>
                */
            Filter?: DominantLanguageDetectionJobFilter;
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return in each page. The default is 100.</p>
                */
            MaxResults?: number;
    }
    export namespace ListDominantLanguageDetectionJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDominantLanguageDetectionJobsRequest) => any;
    }
    export interface ListDominantLanguageDetectionJobsResponse {
            /**
                * <p>A list containing the properties of each job that is returned.</p>
                */
            DominantLanguageDetectionJobPropertiesList?: DominantLanguageDetectionJobProperties[];
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
    }
    export namespace ListDominantLanguageDetectionJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDominantLanguageDetectionJobsResponse) => any;
    }
    /**
        * <p>The filter used to determine which endpoints are returned. You can filter jobs on their
        *       name, model, status, or the date and time that they were created. You can only set one filter
        *       at a time. </p>
        */
    export interface EndpointFilter {
            /**
                * <p>The Amazon Resource Number (ARN) of the model to which the endpoint is attached.</p>
                */
            ModelArn?: string;
            /**
                * <p>Specifies the status of the endpoint being returned. Possible values are: Creating, Ready,
                *       Updating, Deleting, Failed.</p>
                */
            Status?: EndpointStatus | string;
            /**
                * <p>Specifies a date before which the returned endpoint or endpoints were created.</p>
                */
            CreationTimeBefore?: Date;
            /**
                * <p>Specifies a date after which the returned endpoint or endpoints were created.</p>
                */
            CreationTimeAfter?: Date;
    }
    export namespace EndpointFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EndpointFilter) => any;
    }
    export interface ListEndpointsRequest {
            /**
                * <p>Filters the endpoints that are returned. You can filter endpoints on their name, model,
                *       status, or the date and time that they were created. You can only set one filter at a time.
                *     </p>
                */
            Filter?: EndpointFilter;
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return in each page. The default is 100.</p>
                */
            MaxResults?: number;
    }
    export namespace ListEndpointsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEndpointsRequest) => any;
    }
    export interface ListEndpointsResponse {
            /**
                * <p>Displays a list of endpoint properties being retrieved by the service in response to the
                *       request.</p>
                */
            EndpointPropertiesList?: EndpointProperties[];
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
    }
    export namespace ListEndpointsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEndpointsResponse) => any;
    }
    /**
        * <p>Provides information for filtering a list of dominant language detection jobs. For more
        *       information, see the  operation.</p>
        */
    export interface EntitiesDetectionJobFilter {
            /**
                * <p>Filters on the name of the job.</p>
                */
            JobName?: string;
            /**
                * <p>Filters the list of jobs based on job status. Returns only jobs with the specified
                *       status.</p>
                */
            JobStatus?: JobStatus | string;
            /**
                * <p>Filters the list of jobs based on the time that the job was submitted for processing.
                *       Returns only jobs submitted before the specified time. Jobs are returned in ascending order,
                *       oldest to newest.</p>
                */
            SubmitTimeBefore?: Date;
            /**
                * <p>Filters the list of jobs based on the time that the job was submitted for processing.
                *       Returns only jobs submitted after the specified time. Jobs are returned in descending order,
                *       newest to oldest.</p>
                */
            SubmitTimeAfter?: Date;
    }
    export namespace EntitiesDetectionJobFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntitiesDetectionJobFilter) => any;
    }
    export interface ListEntitiesDetectionJobsRequest {
            /**
                * <p>Filters the jobs that are returned. You can filter jobs on their name, status, or the date
                *       and time that they were submitted. You can only set one filter at a time.</p>
                */
            Filter?: EntitiesDetectionJobFilter;
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return in each page. The default is 100.</p>
                */
            MaxResults?: number;
    }
    export namespace ListEntitiesDetectionJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEntitiesDetectionJobsRequest) => any;
    }
    export interface ListEntitiesDetectionJobsResponse {
            /**
                * <p>A list containing the properties of each job that is returned.</p>
                */
            EntitiesDetectionJobPropertiesList?: EntitiesDetectionJobProperties[];
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
    }
    export namespace ListEntitiesDetectionJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEntitiesDetectionJobsResponse) => any;
    }
    /**
        * <p>Provides information for filtering a list of entity recognizers. You can only specify one
        *       filtering parameter in a request. For more information, see the  operation./></p>
        */
    export interface EntityRecognizerFilter {
            /**
                * <p>The status of an entity recognizer.</p>
                */
            Status?: ModelStatus | string;
            /**
                * <p>The name that you assigned the entity recognizer.</p>
                */
            RecognizerName?: string;
            /**
                * <p>Filters the list of entities based on the time that the list was submitted for processing.
                *       Returns only jobs submitted before the specified time. Jobs are returned in descending order,
                *       newest to oldest.</p>
                */
            SubmitTimeBefore?: Date;
            /**
                * <p>Filters the list of entities based on the time that the list was submitted for processing.
                *       Returns only jobs submitted after the specified time. Jobs are returned in ascending order,
                *       oldest to newest.</p>
                */
            SubmitTimeAfter?: Date;
    }
    export namespace EntityRecognizerFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntityRecognizerFilter) => any;
    }
    export interface ListEntityRecognizersRequest {
            /**
                * <p>Filters the list of entities returned. You can filter on <code>Status</code>,
                *         <code>SubmitTimeBefore</code>, or <code>SubmitTimeAfter</code>. You can only set one filter
                *       at a time.</p>
                */
            Filter?: EntityRecognizerFilter;
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
            /**
                * <p> The maximum number of results to return on each page. The default is 100.</p>
                */
            MaxResults?: number;
    }
    export namespace ListEntityRecognizersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEntityRecognizersRequest) => any;
    }
    export interface ListEntityRecognizersResponse {
            /**
                * <p>The list of properties of an entity recognizer.</p>
                */
            EntityRecognizerPropertiesList?: EntityRecognizerProperties[];
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
    }
    export namespace ListEntityRecognizersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEntityRecognizersResponse) => any;
    }
    export interface ListEntityRecognizerSummariesRequest {
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return on each page. The default is 100.</p>
                */
            MaxResults?: number;
    }
    export namespace ListEntityRecognizerSummariesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEntityRecognizerSummariesRequest) => any;
    }
    /**
        * <p> Describes the information about an entity recognizer and its versions.</p>
        */
    export interface EntityRecognizerSummary {
            /**
                * <p> The name that you assigned the entity recognizer.</p>
                */
            RecognizerName?: string;
            /**
                * <p> The number of versions you created.</p>
                */
            NumberOfVersions?: number;
            /**
                * <p> The time that the latest entity recognizer version was submitted for processing.</p>
                */
            LatestVersionCreatedAt?: Date;
            /**
                * <p> The version name you assigned to the latest entity recognizer version.</p>
                */
            LatestVersionName?: string;
            /**
                * <p> Provides the status of the latest entity recognizer version.</p>
                */
            LatestVersionStatus?: ModelStatus | string;
    }
    export namespace EntityRecognizerSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntityRecognizerSummary) => any;
    }
    export interface ListEntityRecognizerSummariesResponse {
            /**
                * <p>The list entity recognizer summaries.</p>
                */
            EntityRecognizerSummariesList?: EntityRecognizerSummary[];
            /**
                * <p>The list entity recognizer summaries.</p>
                */
            NextToken?: string;
    }
    export namespace ListEntityRecognizerSummariesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEntityRecognizerSummariesResponse) => any;
    }
    /**
        * <p>Provides information for filtering a list of event detection jobs.</p>
        */
    export interface EventsDetectionJobFilter {
            /**
                * <p>Filters on the name of the events detection job.</p>
                */
            JobName?: string;
            /**
                * <p>Filters the list of jobs based on job status. Returns only jobs with the specified
                *       status.</p>
                */
            JobStatus?: JobStatus | string;
            /**
                * <p>Filters the list of jobs based on the time that the job was submitted for processing.
                *       Returns only jobs submitted before the specified time. Jobs are returned in ascending order,
                *       oldest to newest.</p>
                */
            SubmitTimeBefore?: Date;
            /**
                * <p>Filters the list of jobs based on the time that the job was submitted for processing.
                *       Returns only jobs submitted after the specified time. Jobs are returned in descending order,
                *       newest to oldest.</p>
                */
            SubmitTimeAfter?: Date;
    }
    export namespace EventsDetectionJobFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventsDetectionJobFilter) => any;
    }
    export interface ListEventsDetectionJobsRequest {
            /**
                * <p>Filters the jobs that are returned. You can filter jobs on their name, status, or the date
                *       and time that they were submitted. You can only set one filter at a time.</p>
                */
            Filter?: EventsDetectionJobFilter;
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return in each page.</p>
                */
            MaxResults?: number;
    }
    export namespace ListEventsDetectionJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEventsDetectionJobsRequest) => any;
    }
    export interface ListEventsDetectionJobsResponse {
            /**
                * <p>A list containing the properties of each job that is returned.</p>
                */
            EventsDetectionJobPropertiesList?: EventsDetectionJobProperties[];
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
    }
    export namespace ListEventsDetectionJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEventsDetectionJobsResponse) => any;
    }
    /**
        * <p>Provides information for filtering a list of dominant language detection jobs. For more
        *       information, see the  operation.</p>
        */
    export interface KeyPhrasesDetectionJobFilter {
            /**
                * <p>Filters on the name of the job.</p>
                */
            JobName?: string;
            /**
                * <p>Filters the list of jobs based on job status. Returns only jobs with the specified
                *       status.</p>
                */
            JobStatus?: JobStatus | string;
            /**
                * <p>Filters the list of jobs based on the time that the job was submitted for processing.
                *       Returns only jobs submitted before the specified time. Jobs are returned in ascending order,
                *       oldest to newest.</p>
                */
            SubmitTimeBefore?: Date;
            /**
                * <p>Filters the list of jobs based on the time that the job was submitted for processing.
                *       Returns only jobs submitted after the specified time. Jobs are returned in descending order,
                *       newest to oldest.</p>
                */
            SubmitTimeAfter?: Date;
    }
    export namespace KeyPhrasesDetectionJobFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KeyPhrasesDetectionJobFilter) => any;
    }
    export interface ListKeyPhrasesDetectionJobsRequest {
            /**
                * <p>Filters the jobs that are returned. You can filter jobs on their name, status, or the date
                *       and time that they were submitted. You can only set one filter at a time.</p>
                */
            Filter?: KeyPhrasesDetectionJobFilter;
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return in each page. The default is 100.</p>
                */
            MaxResults?: number;
    }
    export namespace ListKeyPhrasesDetectionJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListKeyPhrasesDetectionJobsRequest) => any;
    }
    export interface ListKeyPhrasesDetectionJobsResponse {
            /**
                * <p>A list containing the properties of each job that is returned.</p>
                */
            KeyPhrasesDetectionJobPropertiesList?: KeyPhrasesDetectionJobProperties[];
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
    }
    export namespace ListKeyPhrasesDetectionJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListKeyPhrasesDetectionJobsResponse) => any;
    }
    /**
        * <p>Provides information for filtering a list of PII entity detection jobs.</p>
        */
    export interface PiiEntitiesDetectionJobFilter {
            /**
                * <p>Filters on the name of the job.</p>
                */
            JobName?: string;
            /**
                * <p>Filters the list of jobs based on job status. Returns only jobs with the specified
                *       status.</p>
                */
            JobStatus?: JobStatus | string;
            /**
                * <p>Filters the list of jobs based on the time that the job was submitted for processing.
                *       Returns only jobs submitted before the specified time. Jobs are returned in ascending order,
                *       oldest to newest.</p>
                */
            SubmitTimeBefore?: Date;
            /**
                * <p>Filters the list of jobs based on the time that the job was submitted for processing.
                *       Returns only jobs submitted after the specified time. Jobs are returned in descending order,
                *       newest to oldest.</p>
                */
            SubmitTimeAfter?: Date;
    }
    export namespace PiiEntitiesDetectionJobFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PiiEntitiesDetectionJobFilter) => any;
    }
    export interface ListPiiEntitiesDetectionJobsRequest {
            /**
                * <p>Filters the jobs that are returned. You can filter jobs on their name, status, or the date
                *       and time that they were submitted. You can only set one filter at a time.</p>
                */
            Filter?: PiiEntitiesDetectionJobFilter;
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return in each page.</p>
                */
            MaxResults?: number;
    }
    export namespace ListPiiEntitiesDetectionJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPiiEntitiesDetectionJobsRequest) => any;
    }
    export interface ListPiiEntitiesDetectionJobsResponse {
            /**
                * <p>A list containing the properties of each job that is returned.</p>
                */
            PiiEntitiesDetectionJobPropertiesList?: PiiEntitiesDetectionJobProperties[];
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
    }
    export namespace ListPiiEntitiesDetectionJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPiiEntitiesDetectionJobsResponse) => any;
    }
    /**
        * <p>Provides information for filtering a list of dominant language detection jobs. For more
        *       information, see the  operation.</p>
        */
    export interface SentimentDetectionJobFilter {
            /**
                * <p>Filters on the name of the job.</p>
                */
            JobName?: string;
            /**
                * <p>Filters the list of jobs based on job status. Returns only jobs with the specified
                *       status.</p>
                */
            JobStatus?: JobStatus | string;
            /**
                * <p>Filters the list of jobs based on the time that the job was submitted for processing.
                *       Returns only jobs submitted before the specified time. Jobs are returned in ascending order,
                *       oldest to newest.</p>
                */
            SubmitTimeBefore?: Date;
            /**
                * <p>Filters the list of jobs based on the time that the job was submitted for processing.
                *       Returns only jobs submitted after the specified time. Jobs are returned in descending order,
                *       newest to oldest.</p>
                */
            SubmitTimeAfter?: Date;
    }
    export namespace SentimentDetectionJobFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SentimentDetectionJobFilter) => any;
    }
    export interface ListSentimentDetectionJobsRequest {
            /**
                * <p>Filters the jobs that are returned. You can filter jobs on their name, status, or the date
                *       and time that they were submitted. You can only set one filter at a time.</p>
                */
            Filter?: SentimentDetectionJobFilter;
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return in each page. The default is 100.</p>
                */
            MaxResults?: number;
    }
    export namespace ListSentimentDetectionJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSentimentDetectionJobsRequest) => any;
    }
    export interface ListSentimentDetectionJobsResponse {
            /**
                * <p>A list containing the properties of each job that is returned.</p>
                */
            SentimentDetectionJobPropertiesList?: SentimentDetectionJobProperties[];
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
    }
    export namespace ListSentimentDetectionJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSentimentDetectionJobsResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the given Amazon Comprehend resource you are querying.
                *     </p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the given Amazon Comprehend resource you are
                *       querying.</p>
                */
            ResourceArn?: string;
            /**
                * <p>Tags associated with the Amazon Comprehend resource being queried. A tag is a key-value
                *       pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with
                *       "Sales" as the key might be added to a resource to indicate its use by the sales department.
                *     </p>
                */
            Tags?: Tag[];
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    /**
        * <p>Provides information for filtering a list of dominant language detection jobs. For more
        *       information, see the  operation.</p>
        */
    export interface TargetedSentimentDetectionJobFilter {
            /**
                * <p>Filters on the name of the job.</p>
                */
            JobName?: string;
            /**
                * <p>Filters the list of jobs based on job status. Returns only jobs with the specified
                *       status.</p>
                */
            JobStatus?: JobStatus | string;
            /**
                * <p>Filters the list of jobs based on the time that the job was submitted for processing.
                *       Returns only jobs submitted before the specified time. Jobs are returned in ascending order,
                *       oldest to newest.</p>
                */
            SubmitTimeBefore?: Date;
            /**
                * <p>Filters the list of jobs based on the time that the job was submitted for processing.
                *       Returns only jobs submitted after the specified time. Jobs are returned in descending order,
                *       newest to oldest.</p>
                */
            SubmitTimeAfter?: Date;
    }
    export namespace TargetedSentimentDetectionJobFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TargetedSentimentDetectionJobFilter) => any;
    }
    export interface ListTargetedSentimentDetectionJobsRequest {
            /**
                * <p>Filters the jobs that are returned. You can filter jobs on their name, status, or the date
                *       and time that they were submitted. You can only set one filter at a time.</p>
                */
            Filter?: TargetedSentimentDetectionJobFilter;
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return in each page. The default is 100.</p>
                */
            MaxResults?: number;
    }
    export namespace ListTargetedSentimentDetectionJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTargetedSentimentDetectionJobsRequest) => any;
    }
    export interface ListTargetedSentimentDetectionJobsResponse {
            /**
                * <p>A list containing the properties of each job that is returned.</p>
                */
            TargetedSentimentDetectionJobPropertiesList?: TargetedSentimentDetectionJobProperties[];
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
    }
    export namespace ListTargetedSentimentDetectionJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTargetedSentimentDetectionJobsResponse) => any;
    }
    /**
        * <p>Provides information for filtering topic detection jobs. For more information, see
        *         .</p>
        */
    export interface TopicsDetectionJobFilter {
            /**
                * <p></p>
                */
            JobName?: string;
            /**
                * <p>Filters the list of topic detection jobs based on job status. Returns only jobs with
                *       the specified status.</p>
                */
            JobStatus?: JobStatus | string;
            /**
                * <p>Filters the list of jobs based on the time that the job was submitted for processing.
                *       Only returns jobs submitted before the specified time. Jobs are returned in descending order,
                *       newest to oldest.</p>
                */
            SubmitTimeBefore?: Date;
            /**
                * <p>Filters the list of jobs based on the time that the job was submitted for processing.
                *       Only returns jobs submitted after the specified time. Jobs are returned in ascending order,
                *       oldest to newest.</p>
                */
            SubmitTimeAfter?: Date;
    }
    export namespace TopicsDetectionJobFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TopicsDetectionJobFilter) => any;
    }
    export interface ListTopicsDetectionJobsRequest {
            /**
                * <p>Filters the jobs that are returned. Jobs can be filtered on their name, status, or the
                *       date and time that they were submitted. You can set only one filter at a time.</p>
                */
            Filter?: TopicsDetectionJobFilter;
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return in each page. The default is 100.</p>
                */
            MaxResults?: number;
    }
    export namespace ListTopicsDetectionJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTopicsDetectionJobsRequest) => any;
    }
    export interface ListTopicsDetectionJobsResponse {
            /**
                * <p>A list containing the properties of each job that is returned.</p>
                */
            TopicsDetectionJobPropertiesList?: TopicsDetectionJobProperties[];
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
    }
    export namespace ListTopicsDetectionJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTopicsDetectionJobsResponse) => any;
    }
    export interface PutResourcePolicyRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the custom model to attach the policy to.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The JSON resource-based policy to attach to your custom model. Provide your JSON as a
                *       UTF-8 encoded string without line breaks. To provide valid JSON for your policy, enclose the
                *       attribute names and values in double quotes. If the JSON body is also enclosed in double
                *       quotes, then you must escape the double quotes that are inside the policy:</p>
                *          <p>
                *             <code>"{\"attribute\": \"value\", \"attribute\": [\"value\"]}"</code>
                *          </p>
                *          <p>To avoid escaping quotes, you can use single quotes to enclose the policy and double
                *       quotes to enclose the JSON names and values:</p>
                *          <p>
                *             <code>'{"attribute": "value", "attribute": ["value"]}'</code>
                *          </p>
                */
            ResourcePolicy: string | undefined;
            /**
                * <p>The revision ID that Amazon Comprehend assigned to the policy that you are updating. If
                *       you are creating a new policy that has no prior version, don't use this parameter. Amazon
                *       Comprehend creates the revision ID for you.</p>
                */
            PolicyRevisionId?: string;
    }
    export namespace PutResourcePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutResourcePolicyRequest) => any;
    }
    export interface PutResourcePolicyResponse {
            /**
                * <p>The revision ID of the policy. Each time you modify a policy, Amazon Comprehend assigns a
                *       new revision ID, and it deletes the prior version of the policy.</p>
                */
            PolicyRevisionId?: string;
    }
    export namespace PutResourcePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutResourcePolicyResponse) => any;
    }
    export interface StartDocumentClassificationJobRequest {
            /**
                * <p>The identifier of the job.</p>
                */
            JobName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the document classifier to use to process the
                *       job.</p>
                */
            DocumentClassifierArn: string | undefined;
            /**
                * <p>Specifies the format and location of the input data for the job.</p>
                */
            InputDataConfig: InputDataConfig | undefined;
            /**
                * <p>Specifies where to send the output files.</p>
                */
            OutputDataConfig: OutputDataConfig | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that
                *       grants Amazon Comprehend read access to your input data.</p>
                */
            DataAccessRoleArn: string | undefined;
            /**
                * <p>A unique identifier for the request. If you do not set the client request token, Amazon
                *       Comprehend generates one.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt
                *       data on the storage volume attached to the ML compute instance(s) that process the analysis
                *       job. The VolumeKmsKeyId can be either of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            VolumeKmsKeyId?: string;
            /**
                * <p>Configuration parameters for an optional private Virtual Private Cloud (VPC) containing
                *       the resources you are using for your document classification job. For more information, see
                *       <a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">Amazon
                *         VPC</a>. </p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>Tags to be associated with the document classification job. A tag is a key-value pair that
                *       adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the
                *       key might be added to a resource to indicate its use by the sales department.</p>
                */
            Tags?: Tag[];
    }
    export namespace StartDocumentClassificationJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartDocumentClassificationJobRequest) => any;
    }
    export interface StartDocumentClassificationJobResponse {
            /**
                * <p>The identifier generated for the job. To get the status of the job, use this identifier
                *       with the  operation.</p>
                */
            JobId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the document classification job. It is a unique, fully
                *       qualified identifier for the job. It includes the AWS account, Region, and the job ID. The
                *       format of the ARN is as follows:</p>
                *          <p>
                *             <code>arn:<partition>:comprehend:<region>:<account-id>:document-classification-job/<job-id></code>
                *          </p>
                *          <p>The following is an example job ARN:</p>
                *          <p>
                *             <code>arn:aws:comprehend:us-west-2:111122223333:document-classification-job/1234abcd12ab34cd56ef1234567890ab</code>
                *          </p>
                */
            JobArn?: string;
            /**
                * <p>The status of the job:</p>
                *          <ul>
                *             <li>
                *                <p>SUBMITTED - The job has been received and queued for processing.</p>
                *             </li>
                *             <li>
                *                <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p>
                *             </li>
                *             <li>
                *                <p>COMPLETED - The job was successfully completed and the output is available.</p>
                *             </li>
                *             <li>
                *                <p>FAILED - The job did not complete. For details, use the  operation.</p>
                *             </li>
                *             <li>
                *                <p>STOP_REQUESTED - Amazon Comprehend has received a stop request for the job and is
                *           processing the request.</p>
                *             </li>
                *             <li>
                *                <p>STOPPED - The job was successfully stopped without completing.</p>
                *             </li>
                *          </ul>
                */
            JobStatus?: JobStatus | string;
    }
    export namespace StartDocumentClassificationJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartDocumentClassificationJobResponse) => any;
    }
    export interface StartDominantLanguageDetectionJobRequest {
            /**
                * <p>Specifies the format and location of the input data for the job.</p>
                */
            InputDataConfig: InputDataConfig | undefined;
            /**
                * <p>Specifies where to send the output files.</p>
                */
            OutputDataConfig: OutputDataConfig | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that
                *       grants Amazon Comprehend read access to your input data. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.</p>
                */
            DataAccessRoleArn: string | undefined;
            /**
                * <p>An identifier for the job.</p>
                */
            JobName?: string;
            /**
                * <p>A unique identifier for the request. If you do not set the client request token, Amazon
                *       Comprehend generates one.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt
                *       data on the storage volume attached to the ML compute instance(s) that process the analysis
                *       job. The VolumeKmsKeyId can be either of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            VolumeKmsKeyId?: string;
            /**
                * <p>Configuration parameters for an optional private Virtual Private Cloud (VPC) containing
                *       the resources you are using for your dominant language detection job. For more information,
                *       see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">Amazon VPC</a>. </p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>Tags to be associated with the dominant language detection job. A tag is a key-value pair
                *       that adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as
                *       the key might be added to a resource to indicate its use by the sales department.</p>
                */
            Tags?: Tag[];
    }
    export namespace StartDominantLanguageDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartDominantLanguageDetectionJobRequest) => any;
    }
    export interface StartDominantLanguageDetectionJobResponse {
            /**
                * <p>The identifier generated for the job. To get the status of a job, use this identifier with
                *       the  operation.</p>
                */
            JobId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the dominant language detection job. It is a unique,
                *       fully qualified identifier for the job. It includes the AWS account, Region, and the job ID.
                *       The format of the ARN is as follows:</p>
                *          <p>
                *             <code>arn:<partition>:comprehend:<region>:<account-id>:dominant-language-detection-job/<job-id></code>
                *          </p>
                *          <p>The following is an example job ARN:</p>
                *          <p>
                *             <code>arn:aws:comprehend:us-west-2:111122223333:dominant-language-detection-job/1234abcd12ab34cd56ef1234567890ab</code>
                *          </p>
                */
            JobArn?: string;
            /**
                * <p>The status of the job. </p>
                *          <ul>
                *             <li>
                *                <p>SUBMITTED - The job has been received and is queued for processing.</p>
                *             </li>
                *             <li>
                *                <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p>
                *             </li>
                *             <li>
                *                <p>COMPLETED - The job was successfully completed and the output is available.</p>
                *             </li>
                *             <li>
                *                <p>FAILED - The job did not complete. To get details, use the  operation.</p>
                *             </li>
                *          </ul>
                */
            JobStatus?: JobStatus | string;
    }
    export namespace StartDominantLanguageDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartDominantLanguageDetectionJobResponse) => any;
    }
    export interface StartEntitiesDetectionJobRequest {
            /**
                * <p>Specifies the format and location of the input data for the job.</p>
                */
            InputDataConfig: InputDataConfig | undefined;
            /**
                * <p>Specifies where to send the output files.</p>
                */
            OutputDataConfig: OutputDataConfig | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that
                *       grants Amazon Comprehend read access to your input data. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.</p>
                */
            DataAccessRoleArn: string | undefined;
            /**
                * <p>The identifier of the job.</p>
                */
            JobName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the specific entity recognizer to be used
                *       by the <code>StartEntitiesDetectionJob</code>. This ARN is optional and is only used for a
                *       custom entity recognition job.</p>
                */
            EntityRecognizerArn?: string;
            /**
                * <p>The language of the input documents. All documents must be in the same language. You can
                *       specify any of the languages supported by Amazon Comprehend. If custom entities recognition is
                *       used, this parameter is ignored and the language used for training the model is used
                *       instead.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
            /**
                * <p>A unique identifier for the request. If you don't set the client request token, Amazon
                *       Comprehend generates one.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt
                *       data on the storage volume attached to the ML compute instance(s) that process the analysis
                *       job. The VolumeKmsKeyId can be either of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            VolumeKmsKeyId?: string;
            /**
                * <p>Configuration parameters for an optional private Virtual Private Cloud (VPC) containing
                *       the resources you are using for your entity detection job. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">Amazon
                *         VPC</a>. </p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>Tags to be associated with the entities detection job. A tag is a key-value pair that adds
                *       metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key
                *       might be added to a resource to indicate its use by the sales department.</p>
                */
            Tags?: Tag[];
    }
    export namespace StartEntitiesDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartEntitiesDetectionJobRequest) => any;
    }
    export interface StartEntitiesDetectionJobResponse {
            /**
                * <p>The identifier generated for the job. To get the status of job, use this identifier with
                *       the  operation.</p>
                */
            JobId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the entities detection job. It is a unique, fully
                *       qualified identifier for the job. It includes the AWS account, Region, and the job ID. The
                *       format of the ARN is as follows:</p>
                *          <p>
                *             <code>arn:<partition>:comprehend:<region>:<account-id>:entities-detection-job/<job-id></code>
                *          </p>
                *          <p>The following is an example job ARN:</p>
                *          <p>
                *             <code>arn:aws:comprehend:us-west-2:111122223333:entities-detection-job/1234abcd12ab34cd56ef1234567890ab</code>
                *          </p>
                */
            JobArn?: string;
            /**
                * <p>The status of the job. </p>
                *          <ul>
                *             <li>
                *                <p>SUBMITTED - The job has been received and is queued for processing.</p>
                *             </li>
                *             <li>
                *                <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p>
                *             </li>
                *             <li>
                *                <p>COMPLETED - The job was successfully completed and the output is available.</p>
                *             </li>
                *             <li>
                *                <p>FAILED - The job did not complete. To get details, use the  operation.</p>
                *             </li>
                *             <li>
                *                <p>STOP_REQUESTED - Amazon Comprehend has received a stop request for the job and is
                *           processing the request.</p>
                *             </li>
                *             <li>
                *                <p>STOPPED - The job was successfully stopped without completing.</p>
                *             </li>
                *          </ul>
                */
            JobStatus?: JobStatus | string;
    }
    export namespace StartEntitiesDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartEntitiesDetectionJobResponse) => any;
    }
    export interface StartEventsDetectionJobRequest {
            /**
                * <p>Specifies the format and location of the input data for the job.</p>
                */
            InputDataConfig: InputDataConfig | undefined;
            /**
                * <p>Specifies where to send the output files.</p>
                */
            OutputDataConfig: OutputDataConfig | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that
                *       grants Amazon Comprehend read access to your input data.</p>
                */
            DataAccessRoleArn: string | undefined;
            /**
                * <p>The identifier of the events detection job.</p>
                */
            JobName?: string;
            /**
                * <p>The language code of the input documents.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
            /**
                * <p>An unique identifier for the request. If you don't set the client request token, Amazon
                *       Comprehend generates one.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p>The types of events to detect in the input documents.</p>
                */
            TargetEventTypes: string[] | undefined;
            /**
                * <p>Tags to be associated with the events detection job. A tag is a key-value pair that adds
                *       metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key
                *       might be added to a resource to indicate its use by the sales department.</p>
                */
            Tags?: Tag[];
    }
    export namespace StartEventsDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartEventsDetectionJobRequest) => any;
    }
    export interface StartEventsDetectionJobResponse {
            /**
                * <p>An unique identifier for the request. If you don't set the client request token, Amazon
                *       Comprehend generates one.</p>
                */
            JobId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the events detection job. It is a unique, fully
                *       qualified identifier for the job. It includes the AWS account, Region, and the job ID. The
                *       format of the ARN is as follows:</p>
                *          <p>
                *             <code>arn:<partition>:comprehend:<region>:<account-id>:events-detection-job/<job-id></code>
                *          </p>
                *          <p>The following is an example job ARN:</p>
                *          <p>
                *             <code>arn:aws:comprehend:us-west-2:111122223333:events-detection-job/1234abcd12ab34cd56ef1234567890ab</code>
                *          </p>
                */
            JobArn?: string;
            /**
                * <p>The status of the events detection job.</p>
                */
            JobStatus?: JobStatus | string;
    }
    export namespace StartEventsDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartEventsDetectionJobResponse) => any;
    }
    export interface StartKeyPhrasesDetectionJobRequest {
            /**
                * <p>Specifies the format and location of the input data for the job.</p>
                */
            InputDataConfig: InputDataConfig | undefined;
            /**
                * <p>Specifies where to send the output files.</p>
                */
            OutputDataConfig: OutputDataConfig | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that
                *       grants Amazon Comprehend read access to your input data. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.</p>
                */
            DataAccessRoleArn: string | undefined;
            /**
                * <p>The identifier of the job.</p>
                */
            JobName?: string;
            /**
                * <p>The language of the input documents. You can specify any of the primary languages
                *       supported by Amazon Comprehend. All documents must be in the same language.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
            /**
                * <p>A unique identifier for the request. If you don't set the client request token, Amazon
                *       Comprehend generates one.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt
                *       data on the storage volume attached to the ML compute instance(s) that process the analysis
                *       job. The VolumeKmsKeyId can be either of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            VolumeKmsKeyId?: string;
            /**
                * <p> Configuration parameters for an optional private Virtual Private Cloud (VPC) containing
                *       the resources you are using for your key phrases detection job. For more information, see
                *       <a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">Amazon
                *         VPC</a>. </p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>Tags to be associated with the key phrases detection job. A tag is a key-value pair that
                *       adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the
                *       key might be added to a resource to indicate its use by the sales department.</p>
                */
            Tags?: Tag[];
    }
    export namespace StartKeyPhrasesDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartKeyPhrasesDetectionJobRequest) => any;
    }
    export interface StartKeyPhrasesDetectionJobResponse {
            /**
                * <p>The identifier generated for the job. To get the status of a job, use this identifier with
                *       the  operation.</p>
                */
            JobId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the key phrase detection job. It is a unique, fully
                *       qualified identifier for the job. It includes the AWS account, Region, and the job ID. The
                *       format of the ARN is as follows:</p>
                *          <p>
                *             <code>arn:<partition>:comprehend:<region>:<account-id>:key-phrases-detection-job/<job-id></code>
                *          </p>
                *          <p>The following is an example job ARN:</p>
                *          <p>
                *             <code>arn:aws:comprehend:us-west-2:111122223333:key-phrases-detection-job/1234abcd12ab34cd56ef1234567890ab</code>
                *          </p>
                */
            JobArn?: string;
            /**
                * <p>The status of the job. </p>
                *          <ul>
                *             <li>
                *                <p>SUBMITTED - The job has been received and is queued for processing.</p>
                *             </li>
                *             <li>
                *                <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p>
                *             </li>
                *             <li>
                *                <p>COMPLETED - The job was successfully completed and the output is available.</p>
                *             </li>
                *             <li>
                *                <p>FAILED - The job did not complete. To get details, use the  operation.</p>
                *             </li>
                *          </ul>
                */
            JobStatus?: JobStatus | string;
    }
    export namespace StartKeyPhrasesDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartKeyPhrasesDetectionJobResponse) => any;
    }
    export interface StartPiiEntitiesDetectionJobRequest {
            /**
                * <p>The input properties for a PII entities detection job.</p>
                */
            InputDataConfig: InputDataConfig | undefined;
            /**
                * <p>Provides conﬁguration parameters for the output of PII entity detection jobs.</p>
                */
            OutputDataConfig: OutputDataConfig | undefined;
            /**
                * <p>Specifies whether the output provides the locations (offsets) of PII entities or a file in
                *       which PII entities are redacted.</p>
                */
            Mode: PiiEntitiesDetectionMode | string | undefined;
            /**
                * <p>Provides configuration parameters for PII entity redaction.</p>
                *          <p>This parameter is required if you set the <code>Mode</code> parameter to
                *         <code>ONLY_REDACTION</code>. In that case, you must provide a <code>RedactionConfig</code>
                *       definition that includes the <code>PiiEntityTypes</code> parameter.</p>
                */
            RedactionConfig?: RedactionConfig;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that
                *       grants Amazon Comprehend read access to your input data.</p>
                */
            DataAccessRoleArn: string | undefined;
            /**
                * <p>The identifier of the job.</p>
                */
            JobName?: string;
            /**
                * <p>The language of the input documents. Currently, English is the only valid language.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
            /**
                * <p>A unique identifier for the request. If you don't set the client request token, Amazon
                *       Comprehend generates one.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p>Tags to be associated with the PII entities detection job. A tag is a key-value pair that
                *       adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the
                *       key might be added to a resource to indicate its use by the sales department.</p>
                */
            Tags?: Tag[];
    }
    export namespace StartPiiEntitiesDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartPiiEntitiesDetectionJobRequest) => any;
    }
    export interface StartPiiEntitiesDetectionJobResponse {
            /**
                * <p>The identifier generated for the job.</p>
                */
            JobId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the PII entity detection job. It is a unique, fully
                *       qualified identifier for the job. It includes the AWS account, Region, and the job ID. The
                *       format of the ARN is as follows:</p>
                *          <p>
                *             <code>arn:<partition>:comprehend:<region>:<account-id>:pii-entities-detection-job/<job-id></code>
                *          </p>
                *          <p>The following is an example job ARN:</p>
                *          <p>
                *             <code>arn:aws:comprehend:us-west-2:111122223333:pii-entities-detection-job/1234abcd12ab34cd56ef1234567890ab</code>
                *          </p>
                */
            JobArn?: string;
            /**
                * <p>The status of the job.</p>
                */
            JobStatus?: JobStatus | string;
    }
    export namespace StartPiiEntitiesDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartPiiEntitiesDetectionJobResponse) => any;
    }
    export interface StartSentimentDetectionJobRequest {
            /**
                * <p>Specifies the format and location of the input data for the job.</p>
                */
            InputDataConfig: InputDataConfig | undefined;
            /**
                * <p>Specifies where to send the output files. </p>
                */
            OutputDataConfig: OutputDataConfig | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that
                *       grants Amazon Comprehend read access to your input data. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.</p>
                */
            DataAccessRoleArn: string | undefined;
            /**
                * <p>The identifier of the job.</p>
                */
            JobName?: string;
            /**
                * <p>The language of the input documents. You can specify any of the primary languages
                *       supported by Amazon Comprehend. All documents must be in the same language.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
            /**
                * <p>A unique identifier for the request. If you don't set the client request token, Amazon
                *       Comprehend generates one.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt
                *       data on the storage volume attached to the ML compute instance(s) that process the analysis
                *       job. The VolumeKmsKeyId can be either of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            VolumeKmsKeyId?: string;
            /**
                * <p>Configuration parameters for an optional private Virtual Private Cloud (VPC) containing
                *       the resources you are using for your sentiment detection job. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">Amazon
                *         VPC</a>. </p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>Tags to be associated with the sentiment detection job. A tag is a key-value pair that
                *       adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the
                *       key might be added to a resource to indicate its use by the sales department.</p>
                */
            Tags?: Tag[];
    }
    export namespace StartSentimentDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartSentimentDetectionJobRequest) => any;
    }
    export interface StartSentimentDetectionJobResponse {
            /**
                * <p>The identifier generated for the job. To get the status of a job, use this identifier with
                *       the  operation.</p>
                */
            JobId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the sentiment detection job. It is a unique, fully
                *       qualified identifier for the job. It includes the AWS account, Region, and the job ID. The
                *       format of the ARN is as follows:</p>
                *          <p>
                *             <code>arn:<partition>:comprehend:<region>:<account-id>:sentiment-detection-job/<job-id></code>
                *          </p>
                *          <p>The following is an example job ARN:</p>
                *          <p>
                *             <code>arn:aws:comprehend:us-west-2:111122223333:sentiment-detection-job/1234abcd12ab34cd56ef1234567890ab</code>
                *          </p>
                */
            JobArn?: string;
            /**
                * <p>The status of the job. </p>
                *          <ul>
                *             <li>
                *                <p>SUBMITTED - The job has been received and is queued for processing.</p>
                *             </li>
                *             <li>
                *                <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p>
                *             </li>
                *             <li>
                *                <p>COMPLETED - The job was successfully completed and the output is available.</p>
                *             </li>
                *             <li>
                *                <p>FAILED - The job did not complete. To get details, use the  operation.</p>
                *             </li>
                *          </ul>
                */
            JobStatus?: JobStatus | string;
    }
    export namespace StartSentimentDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartSentimentDetectionJobResponse) => any;
    }
    export interface StartTargetedSentimentDetectionJobRequest {
            /**
                * <p>The input properties for an inference job.</p>
                */
            InputDataConfig: InputDataConfig | undefined;
            /**
                * <p>Specifies where to send the output files. </p>
                */
            OutputDataConfig: OutputDataConfig | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that
                *       grants Amazon Comprehend read access to your input data. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions">Role-based permissions</a>.</p>
                */
            DataAccessRoleArn: string | undefined;
            /**
                * <p>The identifier of the job.</p>
                */
            JobName?: string;
            /**
                * <p>The language of the input documents. Currently, English is the only valid language.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
            /**
                * <p>A unique identifier for the request. If you don't set the client request token, Amazon
                *       Comprehend generates one.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p>ID for the KMS key that Amazon Comprehend uses to encrypt
                *       data on the storage volume attached to the ML compute instance(s) that process the analysis
                *       job. The VolumeKmsKeyId can be either of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *           <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            VolumeKmsKeyId?: string;
            /**
                * <p> Configuration parameters for an optional private Virtual Private Cloud (VPC) containing
                *       the resources you are using for the job. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">Amazon
                *         VPC</a>. </p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>Tags to be associated with the targeted sentiment detection job. A tag is a key-value pair that
                *       adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the
                *       key might be added to a resource to indicate its use by the sales department.</p>
                */
            Tags?: Tag[];
    }
    export namespace StartTargetedSentimentDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartTargetedSentimentDetectionJobRequest) => any;
    }
    export interface StartTargetedSentimentDetectionJobResponse {
            /**
                * <p>The identifier generated for the job. To get the status of a job, use this identifier with
                *       the  operation.</p>
                */
            JobId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the targeted sentiment detection job. It is a unique, fully
                *       qualified identifier for the job. It includes the AWS account, Region, and the job ID. The
                *       format of the ARN is as follows:</p>
                *          <p>
                *             <code>arn:<partition>:comprehend:<region>:<account-id>:targeted-sentiment-detection-job/<job-id></code>
                *          </p>
                *          <p>The following is an example job ARN:</p>
                *          <p>
                *             <code>arn:aws:comprehend:us-west-2:111122223333:targeted-sentiment-detection-job/1234abcd12ab34cd56ef1234567890ab</code>
                *          </p>
                */
            JobArn?: string;
            /**
                * <p>The status of the job. </p>
                *          <ul>
                *             <li>
                *                <p>SUBMITTED - The job has been received and is queued for processing.</p>
                *             </li>
                *             <li>
                *                <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p>
                *             </li>
                *             <li>
                *                <p>COMPLETED - The job was successfully completed and the output is available.</p>
                *             </li>
                *             <li>
                *                <p>FAILED - The job did not complete. To get details, use the  operation.</p>
                *             </li>
                *          </ul>
                */
            JobStatus?: JobStatus | string;
    }
    export namespace StartTargetedSentimentDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartTargetedSentimentDetectionJobResponse) => any;
    }
    export interface StartTopicsDetectionJobRequest {
            /**
                * <p>Specifies the format and location of the input data for the job.</p>
                */
            InputDataConfig: InputDataConfig | undefined;
            /**
                * <p>Specifies where to send the output files. The output is a compressed archive with two
                *       files, <code>topic-terms.csv</code> that lists the terms associated with each topic, and
                *         <code>doc-topics.csv</code> that lists the documents associated with each topic</p>
                */
            OutputDataConfig: OutputDataConfig | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role
                *       that grants Amazon Comprehend read access to your input data. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.</p>
                */
            DataAccessRoleArn: string | undefined;
            /**
                * <p>The identifier of the job.</p>
                */
            JobName?: string;
            /**
                * <p>The number of topics to detect.</p>
                */
            NumberOfTopics?: number;
            /**
                * <p>A unique identifier for the request. If you do not set the client request token, Amazon
                *       Comprehend generates one.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt
                *       data on the storage volume attached to the ML compute instance(s) that process the analysis
                *       job. The VolumeKmsKeyId can be either of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>KMS Key ID: <code>"1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon Resource Name (ARN) of a KMS Key:
                *             <code>"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            VolumeKmsKeyId?: string;
            /**
                * <p>Configuration parameters for an optional private Virtual Private Cloud (VPC) containing
                *       the resources you are using for your topic detection job. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">Amazon
                *         VPC</a>. </p>
                */
            VpcConfig?: VpcConfig;
            /**
                * <p>Tags to be associated with the topics detection job. A tag is a key-value pair that adds
                *       metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key
                *       might be added to a resource to indicate its use by the sales department.</p>
                */
            Tags?: Tag[];
    }
    export namespace StartTopicsDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartTopicsDetectionJobRequest) => any;
    }
    export interface StartTopicsDetectionJobResponse {
            /**
                * <p>The identifier generated for the job. To get the status of the job, use this identifier
                *       with the <code>DescribeTopicDetectionJob</code> operation.</p>
                */
            JobId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the topics detection job. It is a unique, fully
                *       qualified identifier for the job. It includes the AWS account, Region, and the job ID. The
                *       format of the ARN is as follows:</p>
                *          <p>
                *             <code>arn:<partition>:comprehend:<region>:<account-id>:topics-detection-job/<job-id></code>
                *          </p>
                *          <p>The following is an example job ARN:</p>
                *          <p>
                *             <code>arn:aws:comprehend:us-west-2:111122223333:document-classification-job/1234abcd12ab34cd56ef1234567890ab</code>
                *          </p>
                */
            JobArn?: string;
            /**
                * <p>The status of the job: </p>
                *          <ul>
                *             <li>
                *                <p>SUBMITTED - The job has been received and is queued for processing.</p>
                *             </li>
                *             <li>
                *                <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p>
                *             </li>
                *             <li>
                *                <p>COMPLETED - The job was successfully completed and the output is
                *           available.</p>
                *             </li>
                *             <li>
                *                <p>FAILED - The job did not complete. To get details, use the
                *             <code>DescribeTopicDetectionJob</code> operation.</p>
                *             </li>
                *          </ul>
                */
            JobStatus?: JobStatus | string;
    }
    export namespace StartTopicsDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartTopicsDetectionJobResponse) => any;
    }
    export interface StopDominantLanguageDetectionJobRequest {
            /**
                * <p>The identifier of the dominant language detection job to stop.</p>
                */
            JobId: string | undefined;
    }
    export namespace StopDominantLanguageDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopDominantLanguageDetectionJobRequest) => any;
    }
    export interface StopDominantLanguageDetectionJobResponse {
            /**
                * <p>The identifier of the dominant language detection job to stop.</p>
                */
            JobId?: string;
            /**
                * <p>Either <code>STOP_REQUESTED</code> if the job is currently running, or
                *         <code>STOPPED</code> if the job was previously stopped with the
                *         <code>StopDominantLanguageDetectionJob</code> operation.</p>
                */
            JobStatus?: JobStatus | string;
    }
    export namespace StopDominantLanguageDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopDominantLanguageDetectionJobResponse) => any;
    }
    export interface StopEntitiesDetectionJobRequest {
            /**
                * <p>The identifier of the entities detection job to stop.</p>
                */
            JobId: string | undefined;
    }
    export namespace StopEntitiesDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopEntitiesDetectionJobRequest) => any;
    }
    export interface StopEntitiesDetectionJobResponse {
            /**
                * <p>The identifier of the entities detection job to stop.</p>
                */
            JobId?: string;
            /**
                * <p>Either <code>STOP_REQUESTED</code> if the job is currently running, or
                *         <code>STOPPED</code> if the job was previously stopped with the
                *         <code>StopEntitiesDetectionJob</code> operation.</p>
                */
            JobStatus?: JobStatus | string;
    }
    export namespace StopEntitiesDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopEntitiesDetectionJobResponse) => any;
    }
    export interface StopEventsDetectionJobRequest {
            /**
                * <p>The identifier of the events detection job to stop.</p>
                */
            JobId: string | undefined;
    }
    export namespace StopEventsDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopEventsDetectionJobRequest) => any;
    }
    export interface StopEventsDetectionJobResponse {
            /**
                * <p>The identifier of the events detection job to stop.</p>
                */
            JobId?: string;
            /**
                * <p>The status of the events detection job.</p>
                */
            JobStatus?: JobStatus | string;
    }
    export namespace StopEventsDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopEventsDetectionJobResponse) => any;
    }
    export interface StopKeyPhrasesDetectionJobRequest {
            /**
                * <p>The identifier of the key phrases detection job to stop.</p>
                */
            JobId: string | undefined;
    }
    export namespace StopKeyPhrasesDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopKeyPhrasesDetectionJobRequest) => any;
    }
    export interface StopKeyPhrasesDetectionJobResponse {
            /**
                * <p>The identifier of the key phrases detection job to stop.</p>
                */
            JobId?: string;
            /**
                * <p>Either <code>STOP_REQUESTED</code> if the job is currently running, or
                *         <code>STOPPED</code> if the job was previously stopped with the
                *         <code>StopKeyPhrasesDetectionJob</code> operation.</p>
                */
            JobStatus?: JobStatus | string;
    }
    export namespace StopKeyPhrasesDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopKeyPhrasesDetectionJobResponse) => any;
    }
    export interface StopPiiEntitiesDetectionJobRequest {
            /**
                * <p>The identifier of the PII entities detection job to stop.</p>
                */
            JobId: string | undefined;
    }
    export namespace StopPiiEntitiesDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopPiiEntitiesDetectionJobRequest) => any;
    }
    export interface StopPiiEntitiesDetectionJobResponse {
            /**
                * <p>The identifier of the PII entities detection job to stop.</p>
                */
            JobId?: string;
            /**
                * <p>The status of the PII entities detection job.</p>
                */
            JobStatus?: JobStatus | string;
    }
    export namespace StopPiiEntitiesDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopPiiEntitiesDetectionJobResponse) => any;
    }
    export interface StopSentimentDetectionJobRequest {
            /**
                * <p>The identifier of the sentiment detection job to stop.</p>
                */
            JobId: string | undefined;
    }
    export namespace StopSentimentDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopSentimentDetectionJobRequest) => any;
    }
    export interface StopSentimentDetectionJobResponse {
            /**
                * <p>The identifier of the sentiment detection job to stop.</p>
                */
            JobId?: string;
            /**
                * <p>Either <code>STOP_REQUESTED</code> if the job is currently running, or
                *         <code>STOPPED</code> if the job was previously stopped with the
                *         <code>StopSentimentDetectionJob</code> operation.</p>
                */
            JobStatus?: JobStatus | string;
    }
    export namespace StopSentimentDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopSentimentDetectionJobResponse) => any;
    }
    export interface StopTargetedSentimentDetectionJobRequest {
            /**
                * <p>The identifier of the targeted sentiment detection job to stop.</p>
                */
            JobId: string | undefined;
    }
    export namespace StopTargetedSentimentDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopTargetedSentimentDetectionJobRequest) => any;
    }
    export interface StopTargetedSentimentDetectionJobResponse {
            /**
                * <p>The identifier of the targeted sentiment detection job to stop.</p>
                */
            JobId?: string;
            /**
                * <p>Either <code>STOP_REQUESTED</code> if the job is currently running, or
                *       <code>STOPPED</code> if the job was previously stopped with the
                *       <code>StopSentimentDetectionJob</code> operation.</p>
                */
            JobStatus?: JobStatus | string;
    }
    export namespace StopTargetedSentimentDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopTargetedSentimentDetectionJobResponse) => any;
    }
    export interface StopTrainingDocumentClassifierRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the document classifier currently being
                *       trained.</p>
                */
            DocumentClassifierArn: string | undefined;
    }
    export namespace StopTrainingDocumentClassifierRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopTrainingDocumentClassifierRequest) => any;
    }
    export interface StopTrainingDocumentClassifierResponse {
    }
    export namespace StopTrainingDocumentClassifierResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopTrainingDocumentClassifierResponse) => any;
    }
    export interface StopTrainingEntityRecognizerRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the entity recognizer currently being
                *       trained.</p>
                */
            EntityRecognizerArn: string | undefined;
    }
    export namespace StopTrainingEntityRecognizerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopTrainingEntityRecognizerRequest) => any;
    }
    export interface StopTrainingEntityRecognizerResponse {
    }
    export namespace StopTrainingEntityRecognizerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopTrainingEntityRecognizerResponse) => any;
    }
    /**
        * <p>Concurrent modification of the tags associated with an Amazon Comprehend resource is not
        *       supported. </p>
        */
    export class ConcurrentModificationException extends __BaseException {
            readonly name: "ConcurrentModificationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConcurrentModificationException, __BaseException>);
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the given Amazon Comprehend resource to which you want
                *       to associate the tags. </p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>Tags being associated with a specific Amazon Comprehend resource. There can be a maximum
                *       of 50 tags (both existing and pending) associated with a specific resource. </p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    /**
        * <p>The request contains more tag keys than can be associated with a resource (50 tag keys per
        *       resource).</p>
        */
    export class TooManyTagKeysException extends __BaseException {
            readonly name: "TooManyTagKeysException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyTagKeysException, __BaseException>);
    }
    export interface UntagResourceRequest {
            /**
                * <p> The Amazon Resource Name (ARN) of the given Amazon Comprehend resource from which you
                *       want to remove the tags. </p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The initial part of a key-value pair that forms a tag being removed from a given resource.
                *       For example, a tag with "Sales" as the key might be added to a resource to indicate its use by
                *       the sales department. Keys must be unique and cannot be duplicated for a particular resource.
                *     </p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateEndpointRequest {
            /**
                * <p>The Amazon Resource Number (ARN) of the endpoint being updated.</p>
                */
            EndpointArn: string | undefined;
            /**
                * <p>The ARN of the new model to use when updating an existing endpoint.</p>
                */
            DesiredModelArn?: string;
            /**
                * <p> The desired number of inference units to be used by the model using this endpoint.
                *
                *       Each inference unit represents of a throughput of 100 characters per second.</p>
                */
            DesiredInferenceUnits?: number;
            /**
                * <p>Data access role ARN to use in case the new model is encrypted with a customer CMK.</p>
                */
            DesiredDataAccessRoleArn?: string;
    }
    export namespace UpdateEndpointRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateEndpointRequest) => any;
    }
    export interface UpdateEndpointResponse {
    }
    export namespace UpdateEndpointResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateEndpointResponse) => any;
    }
}

declare module '@aws-sdk/client-comprehend/node_modules/@aws-sdk/client-comprehend/dist-types/models/ComprehendServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Comprehend service.
        */
    export class ComprehendServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

