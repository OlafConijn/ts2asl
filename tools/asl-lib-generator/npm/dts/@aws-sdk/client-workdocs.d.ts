// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-workdocs' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AbortDocumentVersionUploadCommandInput, AbortDocumentVersionUploadCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/AbortDocumentVersionUploadCommand";
    import { ActivateUserCommandInput, ActivateUserCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/ActivateUserCommand";
    import { AddResourcePermissionsCommandInput, AddResourcePermissionsCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/AddResourcePermissionsCommand";
    import { CreateCommentCommandInput, CreateCommentCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/CreateCommentCommand";
    import { CreateCustomMetadataCommandInput, CreateCustomMetadataCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/CreateCustomMetadataCommand";
    import { CreateFolderCommandInput, CreateFolderCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/CreateFolderCommand";
    import { CreateLabelsCommandInput, CreateLabelsCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/CreateLabelsCommand";
    import { CreateNotificationSubscriptionCommandInput, CreateNotificationSubscriptionCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/CreateNotificationSubscriptionCommand";
    import { CreateUserCommandInput, CreateUserCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/CreateUserCommand";
    import { DeactivateUserCommandInput, DeactivateUserCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeactivateUserCommand";
    import { DeleteCommentCommandInput, DeleteCommentCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteCommentCommand";
    import { DeleteCustomMetadataCommandInput, DeleteCustomMetadataCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteCustomMetadataCommand";
    import { DeleteDocumentCommandInput, DeleteDocumentCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteDocumentCommand";
    import { DeleteFolderCommandInput, DeleteFolderCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteFolderCommand";
    import { DeleteFolderContentsCommandInput, DeleteFolderContentsCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteFolderContentsCommand";
    import { DeleteLabelsCommandInput, DeleteLabelsCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteLabelsCommand";
    import { DeleteNotificationSubscriptionCommandInput, DeleteNotificationSubscriptionCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteNotificationSubscriptionCommand";
    import { DeleteUserCommandInput, DeleteUserCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteUserCommand";
    import { DescribeActivitiesCommandInput, DescribeActivitiesCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeActivitiesCommand";
    import { DescribeCommentsCommandInput, DescribeCommentsCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeCommentsCommand";
    import { DescribeDocumentVersionsCommandInput, DescribeDocumentVersionsCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeDocumentVersionsCommand";
    import { DescribeFolderContentsCommandInput, DescribeFolderContentsCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeFolderContentsCommand";
    import { DescribeGroupsCommandInput, DescribeGroupsCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeGroupsCommand";
    import { DescribeNotificationSubscriptionsCommandInput, DescribeNotificationSubscriptionsCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeNotificationSubscriptionsCommand";
    import { DescribeResourcePermissionsCommandInput, DescribeResourcePermissionsCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeResourcePermissionsCommand";
    import { DescribeRootFoldersCommandInput, DescribeRootFoldersCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeRootFoldersCommand";
    import { DescribeUsersCommandInput, DescribeUsersCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeUsersCommand";
    import { GetCurrentUserCommandInput, GetCurrentUserCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/GetCurrentUserCommand";
    import { GetDocumentCommandInput, GetDocumentCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/GetDocumentCommand";
    import { GetDocumentPathCommandInput, GetDocumentPathCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/GetDocumentPathCommand";
    import { GetDocumentVersionCommandInput, GetDocumentVersionCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/GetDocumentVersionCommand";
    import { GetFolderCommandInput, GetFolderCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/GetFolderCommand";
    import { GetFolderPathCommandInput, GetFolderPathCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/GetFolderPathCommand";
    import { GetResourcesCommandInput, GetResourcesCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/GetResourcesCommand";
    import { InitiateDocumentVersionUploadCommandInput, InitiateDocumentVersionUploadCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/InitiateDocumentVersionUploadCommand";
    import { RemoveAllResourcePermissionsCommandInput, RemoveAllResourcePermissionsCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/RemoveAllResourcePermissionsCommand";
    import { RemoveResourcePermissionCommandInput, RemoveResourcePermissionCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/RemoveResourcePermissionCommand";
    import { UpdateDocumentCommandInput, UpdateDocumentCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/UpdateDocumentCommand";
    import { UpdateDocumentVersionCommandInput, UpdateDocumentVersionCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/UpdateDocumentVersionCommand";
    import { UpdateFolderCommandInput, UpdateFolderCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/UpdateFolderCommand";
    import { UpdateUserCommandInput, UpdateUserCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/UpdateUserCommand";
    import { WorkDocsClient } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    /**
        * <p>The WorkDocs API is designed for the following use cases:</p>
        *         <ul>
        *             <li>
        *                 <p>File Migration: File migration applications are supported for users who
        *                     want to migrate their files from an on-premises or off-premises file system or
        *                     service. Users can insert files into a user directory structure, as well as
        *                     allow for basic metadata changes, such as modifications to the permissions of
        *                     files.</p>
        *             </li>
        *             <li>
        *                 <p>Security: Support security applications are supported for users who have
        *                     additional security needs, such as antivirus or data loss prevention. The API
        *                     actions, along with AWS CloudTrail, allow these applications to detect when
        *                     changes occur in Amazon WorkDocs. Then, the application can take the necessary
        *                     actions and replace the target file. If the target file violates the policy, the
        *                     application can also choose to email the user.</p>
        *             </li>
        *             <li>
        *                 <p>eDiscovery/Analytics: General administrative applications are supported,
        *                     such as eDiscovery and analytics. These applications can choose to mimic or
        *                     record the actions in an Amazon WorkDocs site, along with AWS CloudTrail, to
        *                     replicate data for eDiscovery, backup, or analytical applications.</p>
        *             </li>
        *          </ul>
        *         <p>All Amazon WorkDocs API actions are Amazon authenticated and certificate-signed.
        *             They not only require the use of the AWS SDK, but also allow for the exclusive use of
        *             IAM users and roles to help facilitate access, trust, and permission policies. By
        *             creating a role and allowing an IAM user to access the Amazon WorkDocs site, the IAM
        *             user gains full administrative visibility into the entire Amazon WorkDocs site (or as
        *             set in the IAM policy). This includes, but is not limited to, the ability to modify file
        *             permissions and upload any file to any user. This allows developers to perform the three
        *             use cases above, as well as give users the ability to grant access on a selective basis
        *             using the IAM model.</p>
        */
    export class WorkDocs extends WorkDocsClient {
            /**
                * <p>Aborts the upload of the specified document version that was previously initiated
                *             by <a>InitiateDocumentVersionUpload</a>. The client should make this call
                *             only when it no longer intends to upload the document version, or fails to do
                *             so.</p>
                */
            abortDocumentVersionUpload(args: AbortDocumentVersionUploadCommandInput, options?: __HttpHandlerOptions): Promise<AbortDocumentVersionUploadCommandOutput>;
            abortDocumentVersionUpload(args: AbortDocumentVersionUploadCommandInput, cb: (err: any, data?: AbortDocumentVersionUploadCommandOutput) => void): void;
            abortDocumentVersionUpload(args: AbortDocumentVersionUploadCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AbortDocumentVersionUploadCommandOutput) => void): void;
            /**
                * <p>Activates the specified user. Only active users can access Amazon
                *             WorkDocs.</p>
                */
            activateUser(args: ActivateUserCommandInput, options?: __HttpHandlerOptions): Promise<ActivateUserCommandOutput>;
            activateUser(args: ActivateUserCommandInput, cb: (err: any, data?: ActivateUserCommandOutput) => void): void;
            activateUser(args: ActivateUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ActivateUserCommandOutput) => void): void;
            /**
                * <p>Creates a set of permissions for the specified folder or document. The resource
                *             permissions are overwritten if the principals already have different
                *             permissions.</p>
                */
            addResourcePermissions(args: AddResourcePermissionsCommandInput, options?: __HttpHandlerOptions): Promise<AddResourcePermissionsCommandOutput>;
            addResourcePermissions(args: AddResourcePermissionsCommandInput, cb: (err: any, data?: AddResourcePermissionsCommandOutput) => void): void;
            addResourcePermissions(args: AddResourcePermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddResourcePermissionsCommandOutput) => void): void;
            /**
                * <p>Adds a new comment to the specified document version.</p>
                */
            createComment(args: CreateCommentCommandInput, options?: __HttpHandlerOptions): Promise<CreateCommentCommandOutput>;
            createComment(args: CreateCommentCommandInput, cb: (err: any, data?: CreateCommentCommandOutput) => void): void;
            createComment(args: CreateCommentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateCommentCommandOutput) => void): void;
            /**
                * <p>Adds one or more custom properties to the specified resource (a folder, document,
                *             or version).</p>
                */
            createCustomMetadata(args: CreateCustomMetadataCommandInput, options?: __HttpHandlerOptions): Promise<CreateCustomMetadataCommandOutput>;
            createCustomMetadata(args: CreateCustomMetadataCommandInput, cb: (err: any, data?: CreateCustomMetadataCommandOutput) => void): void;
            createCustomMetadata(args: CreateCustomMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateCustomMetadataCommandOutput) => void): void;
            /**
                * <p>Creates a folder with the specified name and parent folder.</p>
                */
            createFolder(args: CreateFolderCommandInput, options?: __HttpHandlerOptions): Promise<CreateFolderCommandOutput>;
            createFolder(args: CreateFolderCommandInput, cb: (err: any, data?: CreateFolderCommandOutput) => void): void;
            createFolder(args: CreateFolderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateFolderCommandOutput) => void): void;
            /**
                * <p>Adds the specified list of labels to the given resource (a document or
                *             folder)</p>
                */
            createLabels(args: CreateLabelsCommandInput, options?: __HttpHandlerOptions): Promise<CreateLabelsCommandOutput>;
            createLabels(args: CreateLabelsCommandInput, cb: (err: any, data?: CreateLabelsCommandOutput) => void): void;
            createLabels(args: CreateLabelsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLabelsCommandOutput) => void): void;
            /**
                * <p>Configure Amazon WorkDocs to use Amazon SNS notifications. The endpoint receives a
                *             confirmation message, and must confirm the subscription.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/workdocs/latest/developerguide/subscribe-notifications.html">Subscribe to
                *                 Notifications</a> in the <i>Amazon WorkDocs Developer
                *             Guide</i>.</p>
                */
            createNotificationSubscription(args: CreateNotificationSubscriptionCommandInput, options?: __HttpHandlerOptions): Promise<CreateNotificationSubscriptionCommandOutput>;
            createNotificationSubscription(args: CreateNotificationSubscriptionCommandInput, cb: (err: any, data?: CreateNotificationSubscriptionCommandOutput) => void): void;
            createNotificationSubscription(args: CreateNotificationSubscriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateNotificationSubscriptionCommandOutput) => void): void;
            /**
                * <p>Creates a user in a Simple AD or Microsoft AD directory. The status of a newly
                *             created user is "ACTIVE". New users can access Amazon WorkDocs.</p>
                */
            createUser(args: CreateUserCommandInput, options?: __HttpHandlerOptions): Promise<CreateUserCommandOutput>;
            createUser(args: CreateUserCommandInput, cb: (err: any, data?: CreateUserCommandOutput) => void): void;
            createUser(args: CreateUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateUserCommandOutput) => void): void;
            /**
                * <p>Deactivates the specified user, which revokes the user's access to Amazon
                *             WorkDocs.</p>
                */
            deactivateUser(args: DeactivateUserCommandInput, options?: __HttpHandlerOptions): Promise<DeactivateUserCommandOutput>;
            deactivateUser(args: DeactivateUserCommandInput, cb: (err: any, data?: DeactivateUserCommandOutput) => void): void;
            deactivateUser(args: DeactivateUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeactivateUserCommandOutput) => void): void;
            /**
                * <p>Deletes the specified comment from the document version.</p>
                */
            deleteComment(args: DeleteCommentCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCommentCommandOutput>;
            deleteComment(args: DeleteCommentCommandInput, cb: (err: any, data?: DeleteCommentCommandOutput) => void): void;
            deleteComment(args: DeleteCommentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCommentCommandOutput) => void): void;
            /**
                * <p>Deletes custom metadata from the specified resource.</p>
                */
            deleteCustomMetadata(args: DeleteCustomMetadataCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCustomMetadataCommandOutput>;
            deleteCustomMetadata(args: DeleteCustomMetadataCommandInput, cb: (err: any, data?: DeleteCustomMetadataCommandOutput) => void): void;
            deleteCustomMetadata(args: DeleteCustomMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCustomMetadataCommandOutput) => void): void;
            /**
                * <p>Permanently deletes the specified document and its associated metadata.</p>
                */
            deleteDocument(args: DeleteDocumentCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDocumentCommandOutput>;
            deleteDocument(args: DeleteDocumentCommandInput, cb: (err: any, data?: DeleteDocumentCommandOutput) => void): void;
            deleteDocument(args: DeleteDocumentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDocumentCommandOutput) => void): void;
            /**
                * <p>Permanently deletes the specified folder and its contents.</p>
                */
            deleteFolder(args: DeleteFolderCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFolderCommandOutput>;
            deleteFolder(args: DeleteFolderCommandInput, cb: (err: any, data?: DeleteFolderCommandOutput) => void): void;
            deleteFolder(args: DeleteFolderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFolderCommandOutput) => void): void;
            /**
                * <p>Deletes the contents of the specified folder.</p>
                */
            deleteFolderContents(args: DeleteFolderContentsCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFolderContentsCommandOutput>;
            deleteFolderContents(args: DeleteFolderContentsCommandInput, cb: (err: any, data?: DeleteFolderContentsCommandOutput) => void): void;
            deleteFolderContents(args: DeleteFolderContentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFolderContentsCommandOutput) => void): void;
            /**
                * <p>Deletes the specified list of labels from a resource.</p>
                */
            deleteLabels(args: DeleteLabelsCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLabelsCommandOutput>;
            deleteLabels(args: DeleteLabelsCommandInput, cb: (err: any, data?: DeleteLabelsCommandOutput) => void): void;
            deleteLabels(args: DeleteLabelsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLabelsCommandOutput) => void): void;
            /**
                * <p>Deletes the specified subscription from the specified organization.</p>
                */
            deleteNotificationSubscription(args: DeleteNotificationSubscriptionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteNotificationSubscriptionCommandOutput>;
            deleteNotificationSubscription(args: DeleteNotificationSubscriptionCommandInput, cb: (err: any, data?: DeleteNotificationSubscriptionCommandOutput) => void): void;
            deleteNotificationSubscription(args: DeleteNotificationSubscriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteNotificationSubscriptionCommandOutput) => void): void;
            /**
                * <p>Deletes the specified user from a Simple AD or Microsoft AD directory.</p>
                */
            deleteUser(args: DeleteUserCommandInput, options?: __HttpHandlerOptions): Promise<DeleteUserCommandOutput>;
            deleteUser(args: DeleteUserCommandInput, cb: (err: any, data?: DeleteUserCommandOutput) => void): void;
            deleteUser(args: DeleteUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteUserCommandOutput) => void): void;
            /**
                * <p>Describes the user activities in a specified time period.</p>
                */
            describeActivities(args: DescribeActivitiesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeActivitiesCommandOutput>;
            describeActivities(args: DescribeActivitiesCommandInput, cb: (err: any, data?: DescribeActivitiesCommandOutput) => void): void;
            describeActivities(args: DescribeActivitiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeActivitiesCommandOutput) => void): void;
            /**
                * <p>List all the comments for the specified document version.</p>
                */
            describeComments(args: DescribeCommentsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeCommentsCommandOutput>;
            describeComments(args: DescribeCommentsCommandInput, cb: (err: any, data?: DescribeCommentsCommandOutput) => void): void;
            describeComments(args: DescribeCommentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeCommentsCommandOutput) => void): void;
            /**
                * <p>Retrieves the document versions for the specified document.</p>
                *         <p>By default, only active versions are returned.</p>
                */
            describeDocumentVersions(args: DescribeDocumentVersionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDocumentVersionsCommandOutput>;
            describeDocumentVersions(args: DescribeDocumentVersionsCommandInput, cb: (err: any, data?: DescribeDocumentVersionsCommandOutput) => void): void;
            describeDocumentVersions(args: DescribeDocumentVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDocumentVersionsCommandOutput) => void): void;
            /**
                * <p>Describes the contents of the specified folder, including its documents and
                *             subfolders.</p>
                *         <p>By default, Amazon WorkDocs returns the first 100 active document and folder
                *             metadata items. If there are more results, the response includes a marker that you can
                *             use to request the next set of results. You can also request initialized
                *             documents.</p>
                */
            describeFolderContents(args: DescribeFolderContentsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeFolderContentsCommandOutput>;
            describeFolderContents(args: DescribeFolderContentsCommandInput, cb: (err: any, data?: DescribeFolderContentsCommandOutput) => void): void;
            describeFolderContents(args: DescribeFolderContentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeFolderContentsCommandOutput) => void): void;
            /**
                * <p>Describes the groups specified by the query. Groups are defined by the underlying
                *             Active Directory.</p>
                */
            describeGroups(args: DescribeGroupsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeGroupsCommandOutput>;
            describeGroups(args: DescribeGroupsCommandInput, cb: (err: any, data?: DescribeGroupsCommandOutput) => void): void;
            describeGroups(args: DescribeGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeGroupsCommandOutput) => void): void;
            /**
                * <p>Lists the specified notification subscriptions.</p>
                */
            describeNotificationSubscriptions(args: DescribeNotificationSubscriptionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeNotificationSubscriptionsCommandOutput>;
            describeNotificationSubscriptions(args: DescribeNotificationSubscriptionsCommandInput, cb: (err: any, data?: DescribeNotificationSubscriptionsCommandOutput) => void): void;
            describeNotificationSubscriptions(args: DescribeNotificationSubscriptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeNotificationSubscriptionsCommandOutput) => void): void;
            /**
                * <p>Describes the permissions of a specified resource.</p>
                */
            describeResourcePermissions(args: DescribeResourcePermissionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeResourcePermissionsCommandOutput>;
            describeResourcePermissions(args: DescribeResourcePermissionsCommandInput, cb: (err: any, data?: DescribeResourcePermissionsCommandOutput) => void): void;
            describeResourcePermissions(args: DescribeResourcePermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeResourcePermissionsCommandOutput) => void): void;
            /**
                * <p>Describes the current user's special folders; the <code>RootFolder</code> and the
                *                 <code>RecycleBin</code>. <code>RootFolder</code> is the root of user's files and
                *             folders and <code>RecycleBin</code> is the root of recycled items. This is not a valid
                *             action for SigV4 (administrative API) clients.</p>
                *         <p>This action requires an authentication token. To get an authentication token,
                *             register an application with Amazon WorkDocs. For more information, see <a href="https://docs.aws.amazon.com/workdocs/latest/developerguide/wd-auth-user.html">Authentication and Access
                *                 Control for User Applications</a> in the
                *             <i>Amazon
                *             WorkDocs Developer Guide</i>.</p>
                */
            describeRootFolders(args: DescribeRootFoldersCommandInput, options?: __HttpHandlerOptions): Promise<DescribeRootFoldersCommandOutput>;
            describeRootFolders(args: DescribeRootFoldersCommandInput, cb: (err: any, data?: DescribeRootFoldersCommandOutput) => void): void;
            describeRootFolders(args: DescribeRootFoldersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeRootFoldersCommandOutput) => void): void;
            /**
                * <p>Describes the specified users. You can describe all users or filter the results
                *             (for example, by status or organization).</p>
                *         <p>By default, Amazon WorkDocs returns the first 24 active or pending users. If there
                *             are more results, the response includes a marker that you can use to request the next
                *             set of results.</p>
                */
            describeUsers(args: DescribeUsersCommandInput, options?: __HttpHandlerOptions): Promise<DescribeUsersCommandOutput>;
            describeUsers(args: DescribeUsersCommandInput, cb: (err: any, data?: DescribeUsersCommandOutput) => void): void;
            describeUsers(args: DescribeUsersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeUsersCommandOutput) => void): void;
            /**
                * <p>Retrieves details of the current user for whom the authentication token was
                *             generated. This is not a valid action for SigV4 (administrative API) clients.</p>
                *         <p>This action requires an authentication token. To get an authentication token,
                *             register an application with Amazon WorkDocs. For more information, see <a href="https://docs.aws.amazon.com/workdocs/latest/developerguide/wd-auth-user.html">Authentication and Access
                *                 Control for User Applications</a> in the
                *             <i>Amazon
                *                 WorkDocs Developer Guide</i>.</p>
                */
            getCurrentUser(args: GetCurrentUserCommandInput, options?: __HttpHandlerOptions): Promise<GetCurrentUserCommandOutput>;
            getCurrentUser(args: GetCurrentUserCommandInput, cb: (err: any, data?: GetCurrentUserCommandOutput) => void): void;
            getCurrentUser(args: GetCurrentUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCurrentUserCommandOutput) => void): void;
            /**
                * <p>Retrieves details of a document.</p>
                */
            getDocument(args: GetDocumentCommandInput, options?: __HttpHandlerOptions): Promise<GetDocumentCommandOutput>;
            getDocument(args: GetDocumentCommandInput, cb: (err: any, data?: GetDocumentCommandOutput) => void): void;
            getDocument(args: GetDocumentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDocumentCommandOutput) => void): void;
            /**
                * <p>Retrieves the path information (the hierarchy from the root folder) for the
                *             requested document.</p>
                *         <p>By default, Amazon WorkDocs returns a maximum of 100 levels upwards from the
                *             requested document and only includes the IDs of the parent folders in the path. You can
                *             limit the maximum number of levels. You can also request the names of the parent
                *             folders.</p>
                */
            getDocumentPath(args: GetDocumentPathCommandInput, options?: __HttpHandlerOptions): Promise<GetDocumentPathCommandOutput>;
            getDocumentPath(args: GetDocumentPathCommandInput, cb: (err: any, data?: GetDocumentPathCommandOutput) => void): void;
            getDocumentPath(args: GetDocumentPathCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDocumentPathCommandOutput) => void): void;
            /**
                * <p>Retrieves version metadata for the specified document.</p>
                */
            getDocumentVersion(args: GetDocumentVersionCommandInput, options?: __HttpHandlerOptions): Promise<GetDocumentVersionCommandOutput>;
            getDocumentVersion(args: GetDocumentVersionCommandInput, cb: (err: any, data?: GetDocumentVersionCommandOutput) => void): void;
            getDocumentVersion(args: GetDocumentVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDocumentVersionCommandOutput) => void): void;
            /**
                * <p>Retrieves the metadata of the specified folder.</p>
                */
            getFolder(args: GetFolderCommandInput, options?: __HttpHandlerOptions): Promise<GetFolderCommandOutput>;
            getFolder(args: GetFolderCommandInput, cb: (err: any, data?: GetFolderCommandOutput) => void): void;
            getFolder(args: GetFolderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetFolderCommandOutput) => void): void;
            /**
                * <p>Retrieves the path information (the hierarchy from the root folder) for the
                *             specified folder.</p>
                *         <p>By default, Amazon WorkDocs returns a maximum of 100 levels upwards from the
                *             requested folder and only includes the IDs of the parent folders in the path. You can
                *             limit the maximum number of levels. You can also request the parent folder
                *             names.</p>
                */
            getFolderPath(args: GetFolderPathCommandInput, options?: __HttpHandlerOptions): Promise<GetFolderPathCommandOutput>;
            getFolderPath(args: GetFolderPathCommandInput, cb: (err: any, data?: GetFolderPathCommandOutput) => void): void;
            getFolderPath(args: GetFolderPathCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetFolderPathCommandOutput) => void): void;
            /**
                * <p>Retrieves a collection of resources, including folders and documents. The only
                *             <code>CollectionType</code> supported is <code>SHARED_WITH_ME</code>.</p>
                */
            getResources(args: GetResourcesCommandInput, options?: __HttpHandlerOptions): Promise<GetResourcesCommandOutput>;
            getResources(args: GetResourcesCommandInput, cb: (err: any, data?: GetResourcesCommandOutput) => void): void;
            getResources(args: GetResourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetResourcesCommandOutput) => void): void;
            /**
                * <p>Creates a new document object and version object.</p>
                *         <p>The client specifies the parent folder ID and name of the document to upload. The
                *             ID is optionally specified when creating a new version of an existing document. This is
                *             the first step to upload a document. Next, upload the document to the URL returned from
                *             the call, and then call <a>UpdateDocumentVersion</a>.</p>
                *         <p>To cancel the document upload, call <a>AbortDocumentVersionUpload</a>.</p>
                */
            initiateDocumentVersionUpload(args: InitiateDocumentVersionUploadCommandInput, options?: __HttpHandlerOptions): Promise<InitiateDocumentVersionUploadCommandOutput>;
            initiateDocumentVersionUpload(args: InitiateDocumentVersionUploadCommandInput, cb: (err: any, data?: InitiateDocumentVersionUploadCommandOutput) => void): void;
            initiateDocumentVersionUpload(args: InitiateDocumentVersionUploadCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: InitiateDocumentVersionUploadCommandOutput) => void): void;
            /**
                * <p>Removes all the permissions from the specified resource.</p>
                */
            removeAllResourcePermissions(args: RemoveAllResourcePermissionsCommandInput, options?: __HttpHandlerOptions): Promise<RemoveAllResourcePermissionsCommandOutput>;
            removeAllResourcePermissions(args: RemoveAllResourcePermissionsCommandInput, cb: (err: any, data?: RemoveAllResourcePermissionsCommandOutput) => void): void;
            removeAllResourcePermissions(args: RemoveAllResourcePermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveAllResourcePermissionsCommandOutput) => void): void;
            /**
                * <p>Removes the permission for the specified principal from the specified
                *             resource.</p>
                */
            removeResourcePermission(args: RemoveResourcePermissionCommandInput, options?: __HttpHandlerOptions): Promise<RemoveResourcePermissionCommandOutput>;
            removeResourcePermission(args: RemoveResourcePermissionCommandInput, cb: (err: any, data?: RemoveResourcePermissionCommandOutput) => void): void;
            removeResourcePermission(args: RemoveResourcePermissionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveResourcePermissionCommandOutput) => void): void;
            /**
                * <p>Updates the specified attributes of a document. The user must have access to both
                *             the document and its parent folder, if applicable.</p>
                */
            updateDocument(args: UpdateDocumentCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDocumentCommandOutput>;
            updateDocument(args: UpdateDocumentCommandInput, cb: (err: any, data?: UpdateDocumentCommandOutput) => void): void;
            updateDocument(args: UpdateDocumentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDocumentCommandOutput) => void): void;
            /**
                * <p>Changes the status of the document version to ACTIVE. </p>
                *         <p>Amazon WorkDocs also sets its document container to ACTIVE. This is the last step
                *             in a document upload, after the client uploads the document to an S3-presigned URL
                *             returned by <a>InitiateDocumentVersionUpload</a>. </p>
                */
            updateDocumentVersion(args: UpdateDocumentVersionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDocumentVersionCommandOutput>;
            updateDocumentVersion(args: UpdateDocumentVersionCommandInput, cb: (err: any, data?: UpdateDocumentVersionCommandOutput) => void): void;
            updateDocumentVersion(args: UpdateDocumentVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDocumentVersionCommandOutput) => void): void;
            /**
                * <p>Updates the specified attributes of the specified folder. The user must have access
                *             to both the folder and its parent folder, if applicable.</p>
                */
            updateFolder(args: UpdateFolderCommandInput, options?: __HttpHandlerOptions): Promise<UpdateFolderCommandOutput>;
            updateFolder(args: UpdateFolderCommandInput, cb: (err: any, data?: UpdateFolderCommandOutput) => void): void;
            updateFolder(args: UpdateFolderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateFolderCommandOutput) => void): void;
            /**
                * <p>Updates the specified attributes of the specified user, and grants or revokes
                *             administrative privileges to the Amazon WorkDocs site.</p>
                */
            updateUser(args: UpdateUserCommandInput, options?: __HttpHandlerOptions): Promise<UpdateUserCommandOutput>;
            updateUser(args: UpdateUserCommandInput, cb: (err: any, data?: UpdateUserCommandOutput) => void): void;
            updateUser(args: UpdateUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateUserCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/AbortDocumentVersionUploadCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AbortDocumentVersionUploadRequest } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface AbortDocumentVersionUploadCommandInput extends AbortDocumentVersionUploadRequest {
    }
    export interface AbortDocumentVersionUploadCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Aborts the upload of the specified document version that was previously initiated
        *             by <a>InitiateDocumentVersionUpload</a>. The client should make this call
        *             only when it no longer intends to upload the document version, or fails to do
        *             so.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, AbortDocumentVersionUploadCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, AbortDocumentVersionUploadCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new AbortDocumentVersionUploadCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AbortDocumentVersionUploadCommandInput} for command's `input` shape.
        * @see {@link AbortDocumentVersionUploadCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class AbortDocumentVersionUploadCommand extends $Command<AbortDocumentVersionUploadCommandInput, AbortDocumentVersionUploadCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: AbortDocumentVersionUploadCommandInput;
            constructor(input: AbortDocumentVersionUploadCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AbortDocumentVersionUploadCommandInput, AbortDocumentVersionUploadCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/ActivateUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ActivateUserRequest, ActivateUserResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface ActivateUserCommandInput extends ActivateUserRequest {
    }
    export interface ActivateUserCommandOutput extends ActivateUserResponse, __MetadataBearer {
    }
    /**
        * <p>Activates the specified user. Only active users can access Amazon
        *             WorkDocs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, ActivateUserCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, ActivateUserCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new ActivateUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ActivateUserCommandInput} for command's `input` shape.
        * @see {@link ActivateUserCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class ActivateUserCommand extends $Command<ActivateUserCommandInput, ActivateUserCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: ActivateUserCommandInput;
            constructor(input: ActivateUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ActivateUserCommandInput, ActivateUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/AddResourcePermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AddResourcePermissionsRequest, AddResourcePermissionsResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface AddResourcePermissionsCommandInput extends AddResourcePermissionsRequest {
    }
    export interface AddResourcePermissionsCommandOutput extends AddResourcePermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a set of permissions for the specified folder or document. The resource
        *             permissions are overwritten if the principals already have different
        *             permissions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, AddResourcePermissionsCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, AddResourcePermissionsCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new AddResourcePermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddResourcePermissionsCommandInput} for command's `input` shape.
        * @see {@link AddResourcePermissionsCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class AddResourcePermissionsCommand extends $Command<AddResourcePermissionsCommandInput, AddResourcePermissionsCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: AddResourcePermissionsCommandInput;
            constructor(input: AddResourcePermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddResourcePermissionsCommandInput, AddResourcePermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/CreateCommentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateCommentRequest, CreateCommentResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface CreateCommentCommandInput extends CreateCommentRequest {
    }
    export interface CreateCommentCommandOutput extends CreateCommentResponse, __MetadataBearer {
    }
    /**
        * <p>Adds a new comment to the specified document version.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, CreateCommentCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, CreateCommentCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new CreateCommentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateCommentCommandInput} for command's `input` shape.
        * @see {@link CreateCommentCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class CreateCommentCommand extends $Command<CreateCommentCommandInput, CreateCommentCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: CreateCommentCommandInput;
            constructor(input: CreateCommentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateCommentCommandInput, CreateCommentCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/CreateCustomMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateCustomMetadataRequest, CreateCustomMetadataResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface CreateCustomMetadataCommandInput extends CreateCustomMetadataRequest {
    }
    export interface CreateCustomMetadataCommandOutput extends CreateCustomMetadataResponse, __MetadataBearer {
    }
    /**
        * <p>Adds one or more custom properties to the specified resource (a folder, document,
        *             or version).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, CreateCustomMetadataCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, CreateCustomMetadataCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new CreateCustomMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateCustomMetadataCommandInput} for command's `input` shape.
        * @see {@link CreateCustomMetadataCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class CreateCustomMetadataCommand extends $Command<CreateCustomMetadataCommandInput, CreateCustomMetadataCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: CreateCustomMetadataCommandInput;
            constructor(input: CreateCustomMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateCustomMetadataCommandInput, CreateCustomMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/CreateFolderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateFolderRequest, CreateFolderResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface CreateFolderCommandInput extends CreateFolderRequest {
    }
    export interface CreateFolderCommandOutput extends CreateFolderResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a folder with the specified name and parent folder.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, CreateFolderCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, CreateFolderCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new CreateFolderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateFolderCommandInput} for command's `input` shape.
        * @see {@link CreateFolderCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class CreateFolderCommand extends $Command<CreateFolderCommandInput, CreateFolderCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: CreateFolderCommandInput;
            constructor(input: CreateFolderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateFolderCommandInput, CreateFolderCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/CreateLabelsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateLabelsRequest, CreateLabelsResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface CreateLabelsCommandInput extends CreateLabelsRequest {
    }
    export interface CreateLabelsCommandOutput extends CreateLabelsResponse, __MetadataBearer {
    }
    /**
        * <p>Adds the specified list of labels to the given resource (a document or
        *             folder)</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, CreateLabelsCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, CreateLabelsCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new CreateLabelsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLabelsCommandInput} for command's `input` shape.
        * @see {@link CreateLabelsCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class CreateLabelsCommand extends $Command<CreateLabelsCommandInput, CreateLabelsCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: CreateLabelsCommandInput;
            constructor(input: CreateLabelsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLabelsCommandInput, CreateLabelsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/CreateNotificationSubscriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateNotificationSubscriptionRequest, CreateNotificationSubscriptionResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface CreateNotificationSubscriptionCommandInput extends CreateNotificationSubscriptionRequest {
    }
    export interface CreateNotificationSubscriptionCommandOutput extends CreateNotificationSubscriptionResponse, __MetadataBearer {
    }
    /**
        * <p>Configure Amazon WorkDocs to use Amazon SNS notifications. The endpoint receives a
        *             confirmation message, and must confirm the subscription.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/workdocs/latest/developerguide/subscribe-notifications.html">Subscribe to
        *                 Notifications</a> in the <i>Amazon WorkDocs Developer
        *             Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, CreateNotificationSubscriptionCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, CreateNotificationSubscriptionCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new CreateNotificationSubscriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateNotificationSubscriptionCommandInput} for command's `input` shape.
        * @see {@link CreateNotificationSubscriptionCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class CreateNotificationSubscriptionCommand extends $Command<CreateNotificationSubscriptionCommandInput, CreateNotificationSubscriptionCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: CreateNotificationSubscriptionCommandInput;
            constructor(input: CreateNotificationSubscriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateNotificationSubscriptionCommandInput, CreateNotificationSubscriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/CreateUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateUserRequest, CreateUserResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface CreateUserCommandInput extends CreateUserRequest {
    }
    export interface CreateUserCommandOutput extends CreateUserResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a user in a Simple AD or Microsoft AD directory. The status of a newly
        *             created user is "ACTIVE". New users can access Amazon WorkDocs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, CreateUserCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, CreateUserCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new CreateUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateUserCommandInput} for command's `input` shape.
        * @see {@link CreateUserCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class CreateUserCommand extends $Command<CreateUserCommandInput, CreateUserCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: CreateUserCommandInput;
            constructor(input: CreateUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateUserCommandInput, CreateUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeactivateUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeactivateUserRequest } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface DeactivateUserCommandInput extends DeactivateUserRequest {
    }
    export interface DeactivateUserCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deactivates the specified user, which revokes the user's access to Amazon
        *             WorkDocs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, DeactivateUserCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, DeactivateUserCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new DeactivateUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeactivateUserCommandInput} for command's `input` shape.
        * @see {@link DeactivateUserCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class DeactivateUserCommand extends $Command<DeactivateUserCommandInput, DeactivateUserCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: DeactivateUserCommandInput;
            constructor(input: DeactivateUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeactivateUserCommandInput, DeactivateUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteCommentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteCommentRequest } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface DeleteCommentCommandInput extends DeleteCommentRequest {
    }
    export interface DeleteCommentCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified comment from the document version.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, DeleteCommentCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, DeleteCommentCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new DeleteCommentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteCommentCommandInput} for command's `input` shape.
        * @see {@link DeleteCommentCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class DeleteCommentCommand extends $Command<DeleteCommentCommandInput, DeleteCommentCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: DeleteCommentCommandInput;
            constructor(input: DeleteCommentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteCommentCommandInput, DeleteCommentCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteCustomMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteCustomMetadataRequest, DeleteCustomMetadataResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface DeleteCustomMetadataCommandInput extends DeleteCustomMetadataRequest {
    }
    export interface DeleteCustomMetadataCommandOutput extends DeleteCustomMetadataResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes custom metadata from the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, DeleteCustomMetadataCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, DeleteCustomMetadataCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new DeleteCustomMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteCustomMetadataCommandInput} for command's `input` shape.
        * @see {@link DeleteCustomMetadataCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class DeleteCustomMetadataCommand extends $Command<DeleteCustomMetadataCommandInput, DeleteCustomMetadataCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: DeleteCustomMetadataCommandInput;
            constructor(input: DeleteCustomMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteCustomMetadataCommandInput, DeleteCustomMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteDocumentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDocumentRequest } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface DeleteDocumentCommandInput extends DeleteDocumentRequest {
    }
    export interface DeleteDocumentCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Permanently deletes the specified document and its associated metadata.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, DeleteDocumentCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, DeleteDocumentCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new DeleteDocumentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDocumentCommandInput} for command's `input` shape.
        * @see {@link DeleteDocumentCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class DeleteDocumentCommand extends $Command<DeleteDocumentCommandInput, DeleteDocumentCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: DeleteDocumentCommandInput;
            constructor(input: DeleteDocumentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDocumentCommandInput, DeleteDocumentCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteFolderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteFolderRequest } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface DeleteFolderCommandInput extends DeleteFolderRequest {
    }
    export interface DeleteFolderCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Permanently deletes the specified folder and its contents.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, DeleteFolderCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, DeleteFolderCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new DeleteFolderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFolderCommandInput} for command's `input` shape.
        * @see {@link DeleteFolderCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class DeleteFolderCommand extends $Command<DeleteFolderCommandInput, DeleteFolderCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: DeleteFolderCommandInput;
            constructor(input: DeleteFolderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFolderCommandInput, DeleteFolderCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteFolderContentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteFolderContentsRequest } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface DeleteFolderContentsCommandInput extends DeleteFolderContentsRequest {
    }
    export interface DeleteFolderContentsCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the contents of the specified folder.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, DeleteFolderContentsCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, DeleteFolderContentsCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new DeleteFolderContentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFolderContentsCommandInput} for command's `input` shape.
        * @see {@link DeleteFolderContentsCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class DeleteFolderContentsCommand extends $Command<DeleteFolderContentsCommandInput, DeleteFolderContentsCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: DeleteFolderContentsCommandInput;
            constructor(input: DeleteFolderContentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFolderContentsCommandInput, DeleteFolderContentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteLabelsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteLabelsRequest, DeleteLabelsResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface DeleteLabelsCommandInput extends DeleteLabelsRequest {
    }
    export interface DeleteLabelsCommandOutput extends DeleteLabelsResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified list of labels from a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, DeleteLabelsCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, DeleteLabelsCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new DeleteLabelsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLabelsCommandInput} for command's `input` shape.
        * @see {@link DeleteLabelsCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class DeleteLabelsCommand extends $Command<DeleteLabelsCommandInput, DeleteLabelsCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: DeleteLabelsCommandInput;
            constructor(input: DeleteLabelsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLabelsCommandInput, DeleteLabelsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteNotificationSubscriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteNotificationSubscriptionRequest } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface DeleteNotificationSubscriptionCommandInput extends DeleteNotificationSubscriptionRequest {
    }
    export interface DeleteNotificationSubscriptionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified subscription from the specified organization.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, DeleteNotificationSubscriptionCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, DeleteNotificationSubscriptionCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new DeleteNotificationSubscriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteNotificationSubscriptionCommandInput} for command's `input` shape.
        * @see {@link DeleteNotificationSubscriptionCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class DeleteNotificationSubscriptionCommand extends $Command<DeleteNotificationSubscriptionCommandInput, DeleteNotificationSubscriptionCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: DeleteNotificationSubscriptionCommandInput;
            constructor(input: DeleteNotificationSubscriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteNotificationSubscriptionCommandInput, DeleteNotificationSubscriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteUserRequest } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface DeleteUserCommandInput extends DeleteUserRequest {
    }
    export interface DeleteUserCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified user from a Simple AD or Microsoft AD directory.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, DeleteUserCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, DeleteUserCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new DeleteUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteUserCommandInput} for command's `input` shape.
        * @see {@link DeleteUserCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class DeleteUserCommand extends $Command<DeleteUserCommandInput, DeleteUserCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: DeleteUserCommandInput;
            constructor(input: DeleteUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteUserCommandInput, DeleteUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeActivitiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeActivitiesRequest, DescribeActivitiesResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface DescribeActivitiesCommandInput extends DescribeActivitiesRequest {
    }
    export interface DescribeActivitiesCommandOutput extends DescribeActivitiesResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the user activities in a specified time period.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, DescribeActivitiesCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, DescribeActivitiesCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new DescribeActivitiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeActivitiesCommandInput} for command's `input` shape.
        * @see {@link DescribeActivitiesCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class DescribeActivitiesCommand extends $Command<DescribeActivitiesCommandInput, DescribeActivitiesCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: DescribeActivitiesCommandInput;
            constructor(input: DescribeActivitiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeActivitiesCommandInput, DescribeActivitiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeCommentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeCommentsRequest, DescribeCommentsResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface DescribeCommentsCommandInput extends DescribeCommentsRequest {
    }
    export interface DescribeCommentsCommandOutput extends DescribeCommentsResponse, __MetadataBearer {
    }
    /**
        * <p>List all the comments for the specified document version.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, DescribeCommentsCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, DescribeCommentsCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new DescribeCommentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeCommentsCommandInput} for command's `input` shape.
        * @see {@link DescribeCommentsCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class DescribeCommentsCommand extends $Command<DescribeCommentsCommandInput, DescribeCommentsCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: DescribeCommentsCommandInput;
            constructor(input: DescribeCommentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeCommentsCommandInput, DescribeCommentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeDocumentVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDocumentVersionsRequest, DescribeDocumentVersionsResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface DescribeDocumentVersionsCommandInput extends DescribeDocumentVersionsRequest {
    }
    export interface DescribeDocumentVersionsCommandOutput extends DescribeDocumentVersionsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the document versions for the specified document.</p>
        *         <p>By default, only active versions are returned.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, DescribeDocumentVersionsCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, DescribeDocumentVersionsCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new DescribeDocumentVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDocumentVersionsCommandInput} for command's `input` shape.
        * @see {@link DescribeDocumentVersionsCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class DescribeDocumentVersionsCommand extends $Command<DescribeDocumentVersionsCommandInput, DescribeDocumentVersionsCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: DescribeDocumentVersionsCommandInput;
            constructor(input: DescribeDocumentVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDocumentVersionsCommandInput, DescribeDocumentVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeFolderContentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeFolderContentsRequest, DescribeFolderContentsResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface DescribeFolderContentsCommandInput extends DescribeFolderContentsRequest {
    }
    export interface DescribeFolderContentsCommandOutput extends DescribeFolderContentsResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the contents of the specified folder, including its documents and
        *             subfolders.</p>
        *         <p>By default, Amazon WorkDocs returns the first 100 active document and folder
        *             metadata items. If there are more results, the response includes a marker that you can
        *             use to request the next set of results. You can also request initialized
        *             documents.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, DescribeFolderContentsCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, DescribeFolderContentsCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new DescribeFolderContentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeFolderContentsCommandInput} for command's `input` shape.
        * @see {@link DescribeFolderContentsCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class DescribeFolderContentsCommand extends $Command<DescribeFolderContentsCommandInput, DescribeFolderContentsCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: DescribeFolderContentsCommandInput;
            constructor(input: DescribeFolderContentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeFolderContentsCommandInput, DescribeFolderContentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeGroupsRequest, DescribeGroupsResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface DescribeGroupsCommandInput extends DescribeGroupsRequest {
    }
    export interface DescribeGroupsCommandOutput extends DescribeGroupsResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the groups specified by the query. Groups are defined by the underlying
        *             Active Directory.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, DescribeGroupsCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, DescribeGroupsCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new DescribeGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeGroupsCommandInput} for command's `input` shape.
        * @see {@link DescribeGroupsCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class DescribeGroupsCommand extends $Command<DescribeGroupsCommandInput, DescribeGroupsCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: DescribeGroupsCommandInput;
            constructor(input: DescribeGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeGroupsCommandInput, DescribeGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeNotificationSubscriptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeNotificationSubscriptionsRequest, DescribeNotificationSubscriptionsResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface DescribeNotificationSubscriptionsCommandInput extends DescribeNotificationSubscriptionsRequest {
    }
    export interface DescribeNotificationSubscriptionsCommandOutput extends DescribeNotificationSubscriptionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the specified notification subscriptions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, DescribeNotificationSubscriptionsCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, DescribeNotificationSubscriptionsCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new DescribeNotificationSubscriptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeNotificationSubscriptionsCommandInput} for command's `input` shape.
        * @see {@link DescribeNotificationSubscriptionsCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class DescribeNotificationSubscriptionsCommand extends $Command<DescribeNotificationSubscriptionsCommandInput, DescribeNotificationSubscriptionsCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: DescribeNotificationSubscriptionsCommandInput;
            constructor(input: DescribeNotificationSubscriptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeNotificationSubscriptionsCommandInput, DescribeNotificationSubscriptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeResourcePermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeResourcePermissionsRequest, DescribeResourcePermissionsResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface DescribeResourcePermissionsCommandInput extends DescribeResourcePermissionsRequest {
    }
    export interface DescribeResourcePermissionsCommandOutput extends DescribeResourcePermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the permissions of a specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, DescribeResourcePermissionsCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, DescribeResourcePermissionsCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new DescribeResourcePermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeResourcePermissionsCommandInput} for command's `input` shape.
        * @see {@link DescribeResourcePermissionsCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class DescribeResourcePermissionsCommand extends $Command<DescribeResourcePermissionsCommandInput, DescribeResourcePermissionsCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: DescribeResourcePermissionsCommandInput;
            constructor(input: DescribeResourcePermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeResourcePermissionsCommandInput, DescribeResourcePermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeRootFoldersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeRootFoldersRequest, DescribeRootFoldersResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface DescribeRootFoldersCommandInput extends DescribeRootFoldersRequest {
    }
    export interface DescribeRootFoldersCommandOutput extends DescribeRootFoldersResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the current user's special folders; the <code>RootFolder</code> and the
        *                 <code>RecycleBin</code>. <code>RootFolder</code> is the root of user's files and
        *             folders and <code>RecycleBin</code> is the root of recycled items. This is not a valid
        *             action for SigV4 (administrative API) clients.</p>
        *         <p>This action requires an authentication token. To get an authentication token,
        *             register an application with Amazon WorkDocs. For more information, see <a href="https://docs.aws.amazon.com/workdocs/latest/developerguide/wd-auth-user.html">Authentication and Access
        *                 Control for User Applications</a> in the
        *             <i>Amazon
        *             WorkDocs Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, DescribeRootFoldersCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, DescribeRootFoldersCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new DescribeRootFoldersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeRootFoldersCommandInput} for command's `input` shape.
        * @see {@link DescribeRootFoldersCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class DescribeRootFoldersCommand extends $Command<DescribeRootFoldersCommandInput, DescribeRootFoldersCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: DescribeRootFoldersCommandInput;
            constructor(input: DescribeRootFoldersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeRootFoldersCommandInput, DescribeRootFoldersCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeUsersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeUsersRequest, DescribeUsersResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface DescribeUsersCommandInput extends DescribeUsersRequest {
    }
    export interface DescribeUsersCommandOutput extends DescribeUsersResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the specified users. You can describe all users or filter the results
        *             (for example, by status or organization).</p>
        *         <p>By default, Amazon WorkDocs returns the first 24 active or pending users. If there
        *             are more results, the response includes a marker that you can use to request the next
        *             set of results.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, DescribeUsersCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, DescribeUsersCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new DescribeUsersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeUsersCommandInput} for command's `input` shape.
        * @see {@link DescribeUsersCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class DescribeUsersCommand extends $Command<DescribeUsersCommandInput, DescribeUsersCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: DescribeUsersCommandInput;
            constructor(input: DescribeUsersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeUsersCommandInput, DescribeUsersCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/GetCurrentUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetCurrentUserRequest, GetCurrentUserResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface GetCurrentUserCommandInput extends GetCurrentUserRequest {
    }
    export interface GetCurrentUserCommandOutput extends GetCurrentUserResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves details of the current user for whom the authentication token was
        *             generated. This is not a valid action for SigV4 (administrative API) clients.</p>
        *         <p>This action requires an authentication token. To get an authentication token,
        *             register an application with Amazon WorkDocs. For more information, see <a href="https://docs.aws.amazon.com/workdocs/latest/developerguide/wd-auth-user.html">Authentication and Access
        *                 Control for User Applications</a> in the
        *             <i>Amazon
        *                 WorkDocs Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, GetCurrentUserCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, GetCurrentUserCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new GetCurrentUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCurrentUserCommandInput} for command's `input` shape.
        * @see {@link GetCurrentUserCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class GetCurrentUserCommand extends $Command<GetCurrentUserCommandInput, GetCurrentUserCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: GetCurrentUserCommandInput;
            constructor(input: GetCurrentUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCurrentUserCommandInput, GetCurrentUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/GetDocumentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetDocumentRequest, GetDocumentResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface GetDocumentCommandInput extends GetDocumentRequest {
    }
    export interface GetDocumentCommandOutput extends GetDocumentResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves details of a document.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, GetDocumentCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, GetDocumentCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new GetDocumentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDocumentCommandInput} for command's `input` shape.
        * @see {@link GetDocumentCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class GetDocumentCommand extends $Command<GetDocumentCommandInput, GetDocumentCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: GetDocumentCommandInput;
            constructor(input: GetDocumentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDocumentCommandInput, GetDocumentCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/GetDocumentPathCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetDocumentPathRequest, GetDocumentPathResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface GetDocumentPathCommandInput extends GetDocumentPathRequest {
    }
    export interface GetDocumentPathCommandOutput extends GetDocumentPathResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the path information (the hierarchy from the root folder) for the
        *             requested document.</p>
        *         <p>By default, Amazon WorkDocs returns a maximum of 100 levels upwards from the
        *             requested document and only includes the IDs of the parent folders in the path. You can
        *             limit the maximum number of levels. You can also request the names of the parent
        *             folders.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, GetDocumentPathCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, GetDocumentPathCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new GetDocumentPathCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDocumentPathCommandInput} for command's `input` shape.
        * @see {@link GetDocumentPathCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class GetDocumentPathCommand extends $Command<GetDocumentPathCommandInput, GetDocumentPathCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: GetDocumentPathCommandInput;
            constructor(input: GetDocumentPathCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDocumentPathCommandInput, GetDocumentPathCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/GetDocumentVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetDocumentVersionRequest, GetDocumentVersionResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface GetDocumentVersionCommandInput extends GetDocumentVersionRequest {
    }
    export interface GetDocumentVersionCommandOutput extends GetDocumentVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves version metadata for the specified document.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, GetDocumentVersionCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, GetDocumentVersionCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new GetDocumentVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDocumentVersionCommandInput} for command's `input` shape.
        * @see {@link GetDocumentVersionCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class GetDocumentVersionCommand extends $Command<GetDocumentVersionCommandInput, GetDocumentVersionCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: GetDocumentVersionCommandInput;
            constructor(input: GetDocumentVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDocumentVersionCommandInput, GetDocumentVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/GetFolderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetFolderRequest, GetFolderResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface GetFolderCommandInput extends GetFolderRequest {
    }
    export interface GetFolderCommandOutput extends GetFolderResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the metadata of the specified folder.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, GetFolderCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, GetFolderCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new GetFolderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetFolderCommandInput} for command's `input` shape.
        * @see {@link GetFolderCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class GetFolderCommand extends $Command<GetFolderCommandInput, GetFolderCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: GetFolderCommandInput;
            constructor(input: GetFolderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetFolderCommandInput, GetFolderCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/GetFolderPathCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetFolderPathRequest, GetFolderPathResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface GetFolderPathCommandInput extends GetFolderPathRequest {
    }
    export interface GetFolderPathCommandOutput extends GetFolderPathResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the path information (the hierarchy from the root folder) for the
        *             specified folder.</p>
        *         <p>By default, Amazon WorkDocs returns a maximum of 100 levels upwards from the
        *             requested folder and only includes the IDs of the parent folders in the path. You can
        *             limit the maximum number of levels. You can also request the parent folder
        *             names.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, GetFolderPathCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, GetFolderPathCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new GetFolderPathCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetFolderPathCommandInput} for command's `input` shape.
        * @see {@link GetFolderPathCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class GetFolderPathCommand extends $Command<GetFolderPathCommandInput, GetFolderPathCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: GetFolderPathCommandInput;
            constructor(input: GetFolderPathCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetFolderPathCommandInput, GetFolderPathCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/GetResourcesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetResourcesRequest, GetResourcesResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface GetResourcesCommandInput extends GetResourcesRequest {
    }
    export interface GetResourcesCommandOutput extends GetResourcesResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a collection of resources, including folders and documents. The only
        *             <code>CollectionType</code> supported is <code>SHARED_WITH_ME</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, GetResourcesCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, GetResourcesCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new GetResourcesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetResourcesCommandInput} for command's `input` shape.
        * @see {@link GetResourcesCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class GetResourcesCommand extends $Command<GetResourcesCommandInput, GetResourcesCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: GetResourcesCommandInput;
            constructor(input: GetResourcesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetResourcesCommandInput, GetResourcesCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/InitiateDocumentVersionUploadCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { InitiateDocumentVersionUploadRequest, InitiateDocumentVersionUploadResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface InitiateDocumentVersionUploadCommandInput extends InitiateDocumentVersionUploadRequest {
    }
    export interface InitiateDocumentVersionUploadCommandOutput extends InitiateDocumentVersionUploadResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new document object and version object.</p>
        *         <p>The client specifies the parent folder ID and name of the document to upload. The
        *             ID is optionally specified when creating a new version of an existing document. This is
        *             the first step to upload a document. Next, upload the document to the URL returned from
        *             the call, and then call <a>UpdateDocumentVersion</a>.</p>
        *         <p>To cancel the document upload, call <a>AbortDocumentVersionUpload</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, InitiateDocumentVersionUploadCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, InitiateDocumentVersionUploadCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new InitiateDocumentVersionUploadCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link InitiateDocumentVersionUploadCommandInput} for command's `input` shape.
        * @see {@link InitiateDocumentVersionUploadCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class InitiateDocumentVersionUploadCommand extends $Command<InitiateDocumentVersionUploadCommandInput, InitiateDocumentVersionUploadCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: InitiateDocumentVersionUploadCommandInput;
            constructor(input: InitiateDocumentVersionUploadCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<InitiateDocumentVersionUploadCommandInput, InitiateDocumentVersionUploadCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/RemoveAllResourcePermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RemoveAllResourcePermissionsRequest } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface RemoveAllResourcePermissionsCommandInput extends RemoveAllResourcePermissionsRequest {
    }
    export interface RemoveAllResourcePermissionsCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes all the permissions from the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, RemoveAllResourcePermissionsCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, RemoveAllResourcePermissionsCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new RemoveAllResourcePermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveAllResourcePermissionsCommandInput} for command's `input` shape.
        * @see {@link RemoveAllResourcePermissionsCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class RemoveAllResourcePermissionsCommand extends $Command<RemoveAllResourcePermissionsCommandInput, RemoveAllResourcePermissionsCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: RemoveAllResourcePermissionsCommandInput;
            constructor(input: RemoveAllResourcePermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveAllResourcePermissionsCommandInput, RemoveAllResourcePermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/RemoveResourcePermissionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RemoveResourcePermissionRequest } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface RemoveResourcePermissionCommandInput extends RemoveResourcePermissionRequest {
    }
    export interface RemoveResourcePermissionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the permission for the specified principal from the specified
        *             resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, RemoveResourcePermissionCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, RemoveResourcePermissionCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new RemoveResourcePermissionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveResourcePermissionCommandInput} for command's `input` shape.
        * @see {@link RemoveResourcePermissionCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class RemoveResourcePermissionCommand extends $Command<RemoveResourcePermissionCommandInput, RemoveResourcePermissionCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: RemoveResourcePermissionCommandInput;
            constructor(input: RemoveResourcePermissionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveResourcePermissionCommandInput, RemoveResourcePermissionCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/UpdateDocumentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateDocumentRequest } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface UpdateDocumentCommandInput extends UpdateDocumentRequest {
    }
    export interface UpdateDocumentCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Updates the specified attributes of a document. The user must have access to both
        *             the document and its parent folder, if applicable.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, UpdateDocumentCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, UpdateDocumentCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new UpdateDocumentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDocumentCommandInput} for command's `input` shape.
        * @see {@link UpdateDocumentCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class UpdateDocumentCommand extends $Command<UpdateDocumentCommandInput, UpdateDocumentCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: UpdateDocumentCommandInput;
            constructor(input: UpdateDocumentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDocumentCommandInput, UpdateDocumentCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/UpdateDocumentVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateDocumentVersionRequest } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface UpdateDocumentVersionCommandInput extends UpdateDocumentVersionRequest {
    }
    export interface UpdateDocumentVersionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Changes the status of the document version to ACTIVE. </p>
        *         <p>Amazon WorkDocs also sets its document container to ACTIVE. This is the last step
        *             in a document upload, after the client uploads the document to an S3-presigned URL
        *             returned by <a>InitiateDocumentVersionUpload</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, UpdateDocumentVersionCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, UpdateDocumentVersionCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new UpdateDocumentVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDocumentVersionCommandInput} for command's `input` shape.
        * @see {@link UpdateDocumentVersionCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class UpdateDocumentVersionCommand extends $Command<UpdateDocumentVersionCommandInput, UpdateDocumentVersionCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: UpdateDocumentVersionCommandInput;
            constructor(input: UpdateDocumentVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDocumentVersionCommandInput, UpdateDocumentVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/UpdateFolderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateFolderRequest } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface UpdateFolderCommandInput extends UpdateFolderRequest {
    }
    export interface UpdateFolderCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Updates the specified attributes of the specified folder. The user must have access
        *             to both the folder and its parent folder, if applicable.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, UpdateFolderCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, UpdateFolderCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new UpdateFolderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateFolderCommandInput} for command's `input` shape.
        * @see {@link UpdateFolderCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class UpdateFolderCommand extends $Command<UpdateFolderCommandInput, UpdateFolderCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: UpdateFolderCommandInput;
            constructor(input: UpdateFolderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateFolderCommandInput, UpdateFolderCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/UpdateUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateUserRequest, UpdateUserResponse } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient";
    export interface UpdateUserCommandInput extends UpdateUserRequest {
    }
    export interface UpdateUserCommandOutput extends UpdateUserResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the specified attributes of the specified user, and grants or revokes
        *             administrative privileges to the Amazon WorkDocs site.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkDocsClient, UpdateUserCommand } from "@aws-sdk/client-workdocs"; // ES Modules import
        * // const { WorkDocsClient, UpdateUserCommand } = require("@aws-sdk/client-workdocs"); // CommonJS import
        * const client = new WorkDocsClient(config);
        * const command = new UpdateUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateUserCommandInput} for command's `input` shape.
        * @see {@link UpdateUserCommandOutput} for command's `response` shape.
        * @see {@link WorkDocsClientResolvedConfig | config} for WorkDocsClient's `config` shape.
        *
        */
    export class UpdateUserCommand extends $Command<UpdateUserCommandInput, UpdateUserCommandOutput, WorkDocsClientResolvedConfig> {
            readonly input: UpdateUserCommandInput;
            constructor(input: UpdateUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkDocsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateUserCommandInput, UpdateUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/WorkDocsClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AbortDocumentVersionUploadCommandInput, AbortDocumentVersionUploadCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/AbortDocumentVersionUploadCommand";
    import { ActivateUserCommandInput, ActivateUserCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/ActivateUserCommand";
    import { AddResourcePermissionsCommandInput, AddResourcePermissionsCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/AddResourcePermissionsCommand";
    import { CreateCommentCommandInput, CreateCommentCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/CreateCommentCommand";
    import { CreateCustomMetadataCommandInput, CreateCustomMetadataCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/CreateCustomMetadataCommand";
    import { CreateFolderCommandInput, CreateFolderCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/CreateFolderCommand";
    import { CreateLabelsCommandInput, CreateLabelsCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/CreateLabelsCommand";
    import { CreateNotificationSubscriptionCommandInput, CreateNotificationSubscriptionCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/CreateNotificationSubscriptionCommand";
    import { CreateUserCommandInput, CreateUserCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/CreateUserCommand";
    import { DeactivateUserCommandInput, DeactivateUserCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeactivateUserCommand";
    import { DeleteCommentCommandInput, DeleteCommentCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteCommentCommand";
    import { DeleteCustomMetadataCommandInput, DeleteCustomMetadataCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteCustomMetadataCommand";
    import { DeleteDocumentCommandInput, DeleteDocumentCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteDocumentCommand";
    import { DeleteFolderCommandInput, DeleteFolderCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteFolderCommand";
    import { DeleteFolderContentsCommandInput, DeleteFolderContentsCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteFolderContentsCommand";
    import { DeleteLabelsCommandInput, DeleteLabelsCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteLabelsCommand";
    import { DeleteNotificationSubscriptionCommandInput, DeleteNotificationSubscriptionCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteNotificationSubscriptionCommand";
    import { DeleteUserCommandInput, DeleteUserCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DeleteUserCommand";
    import { DescribeActivitiesCommandInput, DescribeActivitiesCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeActivitiesCommand";
    import { DescribeCommentsCommandInput, DescribeCommentsCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeCommentsCommand";
    import { DescribeDocumentVersionsCommandInput, DescribeDocumentVersionsCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeDocumentVersionsCommand";
    import { DescribeFolderContentsCommandInput, DescribeFolderContentsCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeFolderContentsCommand";
    import { DescribeGroupsCommandInput, DescribeGroupsCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeGroupsCommand";
    import { DescribeNotificationSubscriptionsCommandInput, DescribeNotificationSubscriptionsCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeNotificationSubscriptionsCommand";
    import { DescribeResourcePermissionsCommandInput, DescribeResourcePermissionsCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeResourcePermissionsCommand";
    import { DescribeRootFoldersCommandInput, DescribeRootFoldersCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeRootFoldersCommand";
    import { DescribeUsersCommandInput, DescribeUsersCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/DescribeUsersCommand";
    import { GetCurrentUserCommandInput, GetCurrentUserCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/GetCurrentUserCommand";
    import { GetDocumentCommandInput, GetDocumentCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/GetDocumentCommand";
    import { GetDocumentPathCommandInput, GetDocumentPathCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/GetDocumentPathCommand";
    import { GetDocumentVersionCommandInput, GetDocumentVersionCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/GetDocumentVersionCommand";
    import { GetFolderCommandInput, GetFolderCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/GetFolderCommand";
    import { GetFolderPathCommandInput, GetFolderPathCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/GetFolderPathCommand";
    import { GetResourcesCommandInput, GetResourcesCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/GetResourcesCommand";
    import { InitiateDocumentVersionUploadCommandInput, InitiateDocumentVersionUploadCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/InitiateDocumentVersionUploadCommand";
    import { RemoveAllResourcePermissionsCommandInput, RemoveAllResourcePermissionsCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/RemoveAllResourcePermissionsCommand";
    import { RemoveResourcePermissionCommandInput, RemoveResourcePermissionCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/RemoveResourcePermissionCommand";
    import { UpdateDocumentCommandInput, UpdateDocumentCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/UpdateDocumentCommand";
    import { UpdateDocumentVersionCommandInput, UpdateDocumentVersionCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/UpdateDocumentVersionCommand";
    import { UpdateFolderCommandInput, UpdateFolderCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/UpdateFolderCommand";
    import { UpdateUserCommandInput, UpdateUserCommandOutput } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/commands/UpdateUserCommand";
    export type ServiceInputTypes = AbortDocumentVersionUploadCommandInput | ActivateUserCommandInput | AddResourcePermissionsCommandInput | CreateCommentCommandInput | CreateCustomMetadataCommandInput | CreateFolderCommandInput | CreateLabelsCommandInput | CreateNotificationSubscriptionCommandInput | CreateUserCommandInput | DeactivateUserCommandInput | DeleteCommentCommandInput | DeleteCustomMetadataCommandInput | DeleteDocumentCommandInput | DeleteFolderCommandInput | DeleteFolderContentsCommandInput | DeleteLabelsCommandInput | DeleteNotificationSubscriptionCommandInput | DeleteUserCommandInput | DescribeActivitiesCommandInput | DescribeCommentsCommandInput | DescribeDocumentVersionsCommandInput | DescribeFolderContentsCommandInput | DescribeGroupsCommandInput | DescribeNotificationSubscriptionsCommandInput | DescribeResourcePermissionsCommandInput | DescribeRootFoldersCommandInput | DescribeUsersCommandInput | GetCurrentUserCommandInput | GetDocumentCommandInput | GetDocumentPathCommandInput | GetDocumentVersionCommandInput | GetFolderCommandInput | GetFolderPathCommandInput | GetResourcesCommandInput | InitiateDocumentVersionUploadCommandInput | RemoveAllResourcePermissionsCommandInput | RemoveResourcePermissionCommandInput | UpdateDocumentCommandInput | UpdateDocumentVersionCommandInput | UpdateFolderCommandInput | UpdateUserCommandInput;
    export type ServiceOutputTypes = AbortDocumentVersionUploadCommandOutput | ActivateUserCommandOutput | AddResourcePermissionsCommandOutput | CreateCommentCommandOutput | CreateCustomMetadataCommandOutput | CreateFolderCommandOutput | CreateLabelsCommandOutput | CreateNotificationSubscriptionCommandOutput | CreateUserCommandOutput | DeactivateUserCommandOutput | DeleteCommentCommandOutput | DeleteCustomMetadataCommandOutput | DeleteDocumentCommandOutput | DeleteFolderCommandOutput | DeleteFolderContentsCommandOutput | DeleteLabelsCommandOutput | DeleteNotificationSubscriptionCommandOutput | DeleteUserCommandOutput | DescribeActivitiesCommandOutput | DescribeCommentsCommandOutput | DescribeDocumentVersionsCommandOutput | DescribeFolderContentsCommandOutput | DescribeGroupsCommandOutput | DescribeNotificationSubscriptionsCommandOutput | DescribeResourcePermissionsCommandOutput | DescribeRootFoldersCommandOutput | DescribeUsersCommandOutput | GetCurrentUserCommandOutput | GetDocumentCommandOutput | GetDocumentPathCommandOutput | GetDocumentVersionCommandOutput | GetFolderCommandOutput | GetFolderPathCommandOutput | GetResourcesCommandOutput | InitiateDocumentVersionUploadCommandOutput | RemoveAllResourcePermissionsCommandOutput | RemoveResourcePermissionCommandOutput | UpdateDocumentCommandOutput | UpdateDocumentVersionCommandOutput | UpdateFolderCommandOutput | UpdateUserCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type WorkDocsClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of WorkDocsClient class constructor that set the region, credentials and other options.
        */
    export interface WorkDocsClientConfig extends WorkDocsClientConfigType {
    }
    type WorkDocsClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of WorkDocsClient class. This is resolved and normalized from the {@link WorkDocsClientConfig | constructor configuration interface}.
        */
    export interface WorkDocsClientResolvedConfig extends WorkDocsClientResolvedConfigType {
    }
    /**
        * <p>The WorkDocs API is designed for the following use cases:</p>
        *         <ul>
        *             <li>
        *                 <p>File Migration: File migration applications are supported for users who
        *                     want to migrate their files from an on-premises or off-premises file system or
        *                     service. Users can insert files into a user directory structure, as well as
        *                     allow for basic metadata changes, such as modifications to the permissions of
        *                     files.</p>
        *             </li>
        *             <li>
        *                 <p>Security: Support security applications are supported for users who have
        *                     additional security needs, such as antivirus or data loss prevention. The API
        *                     actions, along with AWS CloudTrail, allow these applications to detect when
        *                     changes occur in Amazon WorkDocs. Then, the application can take the necessary
        *                     actions and replace the target file. If the target file violates the policy, the
        *                     application can also choose to email the user.</p>
        *             </li>
        *             <li>
        *                 <p>eDiscovery/Analytics: General administrative applications are supported,
        *                     such as eDiscovery and analytics. These applications can choose to mimic or
        *                     record the actions in an Amazon WorkDocs site, along with AWS CloudTrail, to
        *                     replicate data for eDiscovery, backup, or analytical applications.</p>
        *             </li>
        *          </ul>
        *         <p>All Amazon WorkDocs API actions are Amazon authenticated and certificate-signed.
        *             They not only require the use of the AWS SDK, but also allow for the exclusive use of
        *             IAM users and roles to help facilitate access, trust, and permission policies. By
        *             creating a role and allowing an IAM user to access the Amazon WorkDocs site, the IAM
        *             user gains full administrative visibility into the entire Amazon WorkDocs site (or as
        *             set in the IAM policy). This includes, but is not limited to, the ability to modify file
        *             permissions and upload any file to any user. This allows developers to perform the three
        *             use cases above, as well as give users the ability to grant access on a selective basis
        *             using the IAM model.</p>
        */
    export class WorkDocsClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, WorkDocsClientResolvedConfig> {
            /**
                * The resolved configuration of WorkDocsClient class. This is resolved and normalized from the {@link WorkDocsClientConfig | constructor configuration interface}.
                */
            readonly config: WorkDocsClientResolvedConfig;
            constructor(configuration: WorkDocsClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { WorkDocsServiceException as __BaseException } from "@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/WorkDocsServiceException";
    export interface AbortDocumentVersionUploadRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the document.</p>
                */
            DocumentId: string | undefined;
            /**
                * <p>The ID of the version.</p>
                */
            VersionId: string | undefined;
    }
    export namespace AbortDocumentVersionUploadRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AbortDocumentVersionUploadRequest) => any;
    }
    /**
        * <p>The resource does not exist.</p>
        */
    export class EntityNotExistsException extends __BaseException {
            readonly name: "EntityNotExistsException";
            readonly $fault: "client";
            Message?: string;
            EntityIds?: string[];
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EntityNotExistsException, __BaseException>);
    }
    /**
        * <p>The AWS Directory Service cannot reach an on-premises instance. Or a dependency
        *             under the control of the organization is failing, such as a connected Active
        *             Directory.</p>
        */
    export class FailedDependencyException extends __BaseException {
            readonly name: "FailedDependencyException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<FailedDependencyException, __BaseException>);
    }
    /**
        * <p>The specified document version is not in the INITIALIZED state.</p>
        */
    export class ProhibitedStateException extends __BaseException {
            readonly name: "ProhibitedStateException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ProhibitedStateException, __BaseException>);
    }
    /**
        * <p>One or more of the dependencies is unavailable.</p>
        */
    export class ServiceUnavailableException extends __BaseException {
            readonly name: "ServiceUnavailableException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>);
    }
    /**
        * <p>The operation is not permitted.</p>
        */
    export class UnauthorizedOperationException extends __BaseException {
            readonly name: "UnauthorizedOperationException";
            readonly $fault: "client";
            Message?: string;
            Code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnauthorizedOperationException, __BaseException>);
    }
    /**
        * <p>The caller does not have access to perform the action on the resource.</p>
        */
    export class UnauthorizedResourceAccessException extends __BaseException {
            readonly name: "UnauthorizedResourceAccessException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnauthorizedResourceAccessException, __BaseException>);
    }
    export interface ActivateUserRequest {
            /**
                * <p>The ID of the user.</p>
                */
            UserId: string | undefined;
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
    }
    export namespace ActivateUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActivateUserRequest) => any;
    }
    export enum LocaleType {
            DE = "de",
            DEFAULT = "default",
            EN = "en",
            ES = "es",
            FR = "fr",
            JA = "ja",
            KO = "ko",
            PT_BR = "pt_BR",
            RU = "ru",
            ZH_CN = "zh_CN",
            ZH_TW = "zh_TW"
    }
    export enum UserStatusType {
            ACTIVE = "ACTIVE",
            INACTIVE = "INACTIVE",
            PENDING = "PENDING"
    }
    export enum StorageType {
            QUOTA = "QUOTA",
            UNLIMITED = "UNLIMITED"
    }
    /**
        * <p>Describes the storage for a user.</p>
        */
    export interface StorageRuleType {
            /**
                * <p>The amount of storage allocated, in bytes.</p>
                */
            StorageAllocatedInBytes?: number;
            /**
                * <p>The type of storage.</p>
                */
            StorageType?: StorageType | string;
    }
    export namespace StorageRuleType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StorageRuleType) => any;
    }
    /**
        * <p>Describes the storage for a user.</p>
        */
    export interface UserStorageMetadata {
            /**
                * <p>The amount of storage used, in bytes.</p>
                */
            StorageUtilizedInBytes?: number;
            /**
                * <p>The storage for a user.</p>
                */
            StorageRule?: StorageRuleType;
    }
    export namespace UserStorageMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserStorageMetadata) => any;
    }
    export enum UserType {
            ADMIN = "ADMIN",
            MINIMALUSER = "MINIMALUSER",
            POWERUSER = "POWERUSER",
            USER = "USER",
            WORKSPACESUSER = "WORKSPACESUSER"
    }
    /**
        * <p>Describes a user.</p>
        */
    export interface User {
            /**
                * <p>The ID of the user.</p>
                */
            Id?: string;
            /**
                * <p>The login name of the user.</p>
                */
            Username?: string;
            /**
                * <p>The email address of the user.</p>
                */
            EmailAddress?: string;
            /**
                * <p>The given name of the user.</p>
                */
            GivenName?: string;
            /**
                * <p>The surname of the user.</p>
                */
            Surname?: string;
            /**
                * <p>The ID of the organization.</p>
                */
            OrganizationId?: string;
            /**
                * <p>The ID of the root folder.</p>
                */
            RootFolderId?: string;
            /**
                * <p>The ID of the recycle bin folder.</p>
                */
            RecycleBinFolderId?: string;
            /**
                * <p>The status of the user.</p>
                */
            Status?: UserStatusType | string;
            /**
                * <p>The type of user.</p>
                */
            Type?: UserType | string;
            /**
                * <p>The time when the user was created.</p>
                */
            CreatedTimestamp?: Date;
            /**
                * <p>The time when the user was modified.</p>
                */
            ModifiedTimestamp?: Date;
            /**
                * <p>The time zone ID of the user.</p>
                */
            TimeZoneId?: string;
            /**
                * <p>The locale of the user.</p>
                */
            Locale?: LocaleType | string;
            /**
                * <p>The storage for the user.</p>
                */
            Storage?: UserStorageMetadata;
    }
    export namespace User {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: User) => any;
    }
    export interface ActivateUserResponse {
            /**
                * <p>The user information.</p>
                */
            User?: User;
    }
    export namespace ActivateUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActivateUserResponse) => any;
    }
    export enum CommentStatusType {
            DELETED = "DELETED",
            DRAFT = "DRAFT",
            PUBLISHED = "PUBLISHED"
    }
    /**
        * <p>Describes the metadata of a comment.</p>
        */
    export interface CommentMetadata {
            /**
                * <p>The ID of the comment.</p>
                */
            CommentId?: string;
            /**
                * <p>The user who made the comment.</p>
                */
            Contributor?: User;
            /**
                * <p>The timestamp that the comment was created.</p>
                */
            CreatedTimestamp?: Date;
            /**
                * <p>The status of the comment.</p>
                */
            CommentStatus?: CommentStatusType | string;
            /**
                * <p>The ID of the user being replied to.</p>
                */
            RecipientId?: string;
    }
    export namespace CommentMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CommentMetadata) => any;
    }
    /**
        * <p>Describes the metadata of the user.</p>
        */
    export interface UserMetadata {
            /**
                * <p>The ID of the user.</p>
                */
            Id?: string;
            /**
                * <p>The name of the user.</p>
                */
            Username?: string;
            /**
                * <p>The given name of the user before a rename operation.</p>
                */
            GivenName?: string;
            /**
                * <p>The surname of the user.</p>
                */
            Surname?: string;
            /**
                * <p>The email address of the user.</p>
                */
            EmailAddress?: string;
    }
    export namespace UserMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserMetadata) => any;
    }
    export enum ResourceType {
            DOCUMENT = "DOCUMENT",
            FOLDER = "FOLDER"
    }
    /**
        * <p>Describes the metadata of a resource.</p>
        */
    export interface ResourceMetadata {
            /**
                * <p>The type of resource.</p>
                */
            Type?: ResourceType | string;
            /**
                * <p>The name of the resource.</p>
                */
            Name?: string;
            /**
                * <p>The original name of the resource before a rename operation.</p>
                */
            OriginalName?: string;
            /**
                * <p>The ID of the resource.</p>
                */
            Id?: string;
            /**
                * <p>The version ID of the resource. This is an optional field and is filled for action
                *             on document version.</p>
                */
            VersionId?: string;
            /**
                * <p>The owner of the resource.</p>
                */
            Owner?: UserMetadata;
            /**
                * <p>The parent ID of the resource before a rename operation.</p>
                */
            ParentId?: string;
    }
    export namespace ResourceMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceMetadata) => any;
    }
    /**
        * <p>Describes the metadata of a user group.</p>
        */
    export interface GroupMetadata {
            /**
                * <p>The ID of the user group.</p>
                */
            Id?: string;
            /**
                * <p>The name of the group.</p>
                */
            Name?: string;
    }
    export namespace GroupMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupMetadata) => any;
    }
    /**
        * <p>Describes the users or user groups.</p>
        */
    export interface Participants {
            /**
                * <p>The list of users.</p>
                */
            Users?: UserMetadata[];
            /**
                * <p>The list of user groups.</p>
                */
            Groups?: GroupMetadata[];
    }
    export namespace Participants {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Participants) => any;
    }
    export enum ActivityType {
            DOCUMENT_ANNOTATION_ADDED = "DOCUMENT_ANNOTATION_ADDED",
            DOCUMENT_ANNOTATION_DELETED = "DOCUMENT_ANNOTATION_DELETED",
            DOCUMENT_CHECKED_IN = "DOCUMENT_CHECKED_IN",
            DOCUMENT_CHECKED_OUT = "DOCUMENT_CHECKED_OUT",
            DOCUMENT_COMMENT_ADDED = "DOCUMENT_COMMENT_ADDED",
            DOCUMENT_COMMENT_DELETED = "DOCUMENT_COMMENT_DELETED",
            DOCUMENT_MOVED = "DOCUMENT_MOVED",
            DOCUMENT_RECYCLED = "DOCUMENT_RECYCLED",
            DOCUMENT_RENAMED = "DOCUMENT_RENAMED",
            DOCUMENT_RESTORED = "DOCUMENT_RESTORED",
            DOCUMENT_REVERTED = "DOCUMENT_REVERTED",
            DOCUMENT_SHAREABLE_LINK_CREATED = "DOCUMENT_SHAREABLE_LINK_CREATED",
            DOCUMENT_SHAREABLE_LINK_PERMISSION_CHANGED = "DOCUMENT_SHAREABLE_LINK_PERMISSION_CHANGED",
            DOCUMENT_SHAREABLE_LINK_REMOVED = "DOCUMENT_SHAREABLE_LINK_REMOVED",
            DOCUMENT_SHARED = "DOCUMENT_SHARED",
            DOCUMENT_SHARE_PERMISSION_CHANGED = "DOCUMENT_SHARE_PERMISSION_CHANGED",
            DOCUMENT_UNSHARED = "DOCUMENT_UNSHARED",
            DOCUMENT_VERSION_DELETED = "DOCUMENT_VERSION_DELETED",
            DOCUMENT_VERSION_DOWNLOADED = "DOCUMENT_VERSION_DOWNLOADED",
            DOCUMENT_VERSION_UPLOADED = "DOCUMENT_VERSION_UPLOADED",
            DOCUMENT_VERSION_VIEWED = "DOCUMENT_VERSION_VIEWED",
            FOLDER_CREATED = "FOLDER_CREATED",
            FOLDER_DELETED = "FOLDER_DELETED",
            FOLDER_MOVED = "FOLDER_MOVED",
            FOLDER_RECYCLED = "FOLDER_RECYCLED",
            FOLDER_RENAMED = "FOLDER_RENAMED",
            FOLDER_RESTORED = "FOLDER_RESTORED",
            FOLDER_SHAREABLE_LINK_CREATED = "FOLDER_SHAREABLE_LINK_CREATED",
            FOLDER_SHAREABLE_LINK_PERMISSION_CHANGED = "FOLDER_SHAREABLE_LINK_PERMISSION_CHANGED",
            FOLDER_SHAREABLE_LINK_REMOVED = "FOLDER_SHAREABLE_LINK_REMOVED",
            FOLDER_SHARED = "FOLDER_SHARED",
            FOLDER_SHARE_PERMISSION_CHANGED = "FOLDER_SHARE_PERMISSION_CHANGED",
            FOLDER_UNSHARED = "FOLDER_UNSHARED"
    }
    /**
        * <p>Describes the activity information.</p>
        */
    export interface Activity {
            /**
                * <p>The activity type.</p>
                */
            Type?: ActivityType | string;
            /**
                * <p>The timestamp when the action was performed.</p>
                */
            TimeStamp?: Date;
            /**
                * <p>Indicates whether an activity is indirect or direct. An indirect activity results
                *             from a direct activity performed on a parent resource. For example, sharing a parent
                *             folder (the direct activity) shares all of the subfolders and documents within the
                *             parent folder (the indirect activity).</p>
                */
            IsIndirectActivity?: boolean;
            /**
                * <p>The ID of the organization.</p>
                */
            OrganizationId?: string;
            /**
                * <p>The user who performed the action.</p>
                */
            Initiator?: UserMetadata;
            /**
                * <p>The list of users or groups impacted by this action. This is an optional field and
                *             is filled for the following sharing activities: DOCUMENT_SHARED, DOCUMENT_SHARED,
                *             DOCUMENT_UNSHARED, FOLDER_SHARED, FOLDER_UNSHARED.</p>
                */
            Participants?: Participants;
            /**
                * <p>The metadata of the resource involved in the user action.</p>
                */
            ResourceMetadata?: ResourceMetadata;
            /**
                * <p>The original parent of the resource. This is an optional field and is filled for
                *             move activities.</p>
                */
            OriginalParent?: ResourceMetadata;
            /**
                * <p>Metadata of the commenting activity. This is an optional field and is filled for
                *             commenting activities.</p>
                */
            CommentMetadata?: CommentMetadata;
    }
    export namespace Activity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Activity) => any;
    }
    /**
        * <p>Set of options which defines notification preferences of given action.</p>
        */
    export interface NotificationOptions {
            /**
                * <p>Boolean value to indicate an email notification should be sent to the
                *             receipients.</p>
                */
            SendEmail?: boolean;
            /**
                * <p>Text value to be included in the email body.</p>
                */
            EmailMessage?: string;
    }
    export namespace NotificationOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotificationOptions) => any;
    }
    export enum RoleType {
            CONTRIBUTOR = "CONTRIBUTOR",
            COOWNER = "COOWNER",
            OWNER = "OWNER",
            VIEWER = "VIEWER"
    }
    export enum PrincipalType {
            ANONYMOUS = "ANONYMOUS",
            GROUP = "GROUP",
            INVITE = "INVITE",
            ORGANIZATION = "ORGANIZATION",
            USER = "USER"
    }
    /**
        * <p>Describes the recipient type and ID, if available.</p>
        */
    export interface SharePrincipal {
            /**
                * <p>The ID of the recipient.</p>
                */
            Id: string | undefined;
            /**
                * <p>The type of the recipient.</p>
                */
            Type: PrincipalType | string | undefined;
            /**
                * <p>The role of the recipient.</p>
                */
            Role: RoleType | string | undefined;
    }
    export namespace SharePrincipal {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SharePrincipal) => any;
    }
    export interface AddResourcePermissionsRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the resource.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The users, groups, or organization being granted permission.</p>
                */
            Principals: SharePrincipal[] | undefined;
            /**
                * <p>The notification options.</p>
                */
            NotificationOptions?: NotificationOptions;
    }
    export namespace AddResourcePermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddResourcePermissionsRequest) => any;
    }
    export enum ShareStatusType {
            FAILURE = "FAILURE",
            SUCCESS = "SUCCESS"
    }
    /**
        * <p>Describes the share results of a resource.</p>
        */
    export interface ShareResult {
            /**
                * <p>The ID of the principal.</p>
                */
            PrincipalId?: string;
            /**
                * <p>The ID of the invited user.</p>
                */
            InviteePrincipalId?: string;
            /**
                * <p>The role.</p>
                */
            Role?: RoleType | string;
            /**
                * <p>The status.</p>
                */
            Status?: ShareStatusType | string;
            /**
                * <p>The ID of the resource that was shared.</p>
                */
            ShareId?: string;
            /**
                * <p>The status message.</p>
                */
            StatusMessage?: string;
    }
    export namespace ShareResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ShareResult) => any;
    }
    export interface AddResourcePermissionsResponse {
            /**
                * <p>The share results.</p>
                */
            ShareResults?: ShareResult[];
    }
    export namespace AddResourcePermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddResourcePermissionsResponse) => any;
    }
    export enum CommentVisibilityType {
            PRIVATE = "PRIVATE",
            PUBLIC = "PUBLIC"
    }
    export interface CreateCommentRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the document.</p>
                */
            DocumentId: string | undefined;
            /**
                * <p>The ID of the document version.</p>
                */
            VersionId: string | undefined;
            /**
                * <p>The ID of the parent comment.</p>
                */
            ParentId?: string;
            /**
                * <p>The ID of the root comment in the thread.</p>
                */
            ThreadId?: string;
            /**
                * <p>The text of the comment.</p>
                */
            Text: string | undefined;
            /**
                * <p>The visibility of the comment. Options are either PRIVATE, where the comment is
                *             visible only to the comment author and document owner and co-owners, or PUBLIC, where
                *             the comment is visible to document owners, co-owners, and contributors.</p>
                */
            Visibility?: CommentVisibilityType | string;
            /**
                * <p>Set this parameter to TRUE to send an email out to the document collaborators after
                *             the comment is created.</p>
                */
            NotifyCollaborators?: boolean;
    }
    export namespace CreateCommentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCommentRequest) => any;
    }
    /**
        * <p>Describes a comment.</p>
        */
    export interface Comment {
            /**
                * <p>The ID of the comment.</p>
                */
            CommentId: string | undefined;
            /**
                * <p>The ID of the parent comment.</p>
                */
            ParentId?: string;
            /**
                * <p>The ID of the root comment in the thread.</p>
                */
            ThreadId?: string;
            /**
                * <p>The text of the comment.</p>
                */
            Text?: string;
            /**
                * <p>The details of the user who made the comment.</p>
                */
            Contributor?: User;
            /**
                * <p>The time that the comment was created.</p>
                */
            CreatedTimestamp?: Date;
            /**
                * <p>The status of the comment.</p>
                */
            Status?: CommentStatusType | string;
            /**
                * <p>The visibility of the comment. Options are either PRIVATE, where the comment is
                *             visible only to the comment author and document owner and co-owners, or PUBLIC, where
                *             the comment is visible to document owners, co-owners, and contributors.</p>
                */
            Visibility?: CommentVisibilityType | string;
            /**
                * <p>If the comment is a reply to another user's comment, this field contains the user
                *             ID of the user being replied to.</p>
                */
            RecipientId?: string;
    }
    export namespace Comment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Comment) => any;
    }
    export interface CreateCommentResponse {
            /**
                * <p>The comment that has been created.</p>
                */
            Comment?: Comment;
    }
    export namespace CreateCommentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCommentResponse) => any;
    }
    /**
        * <p>This exception is thrown when the document is locked for comments and user tries to
        *             create or delete a comment on that document.</p>
        */
    export class DocumentLockedForCommentsException extends __BaseException {
            readonly name: "DocumentLockedForCommentsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DocumentLockedForCommentsException, __BaseException>);
    }
    /**
        * <p>The requested operation is not allowed on the specified comment object.</p>
        */
    export class InvalidCommentOperationException extends __BaseException {
            readonly name: "InvalidCommentOperationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidCommentOperationException, __BaseException>);
    }
    export interface CreateCustomMetadataRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the resource.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The ID of the version, if the custom metadata is being added to a document
                *             version.</p>
                */
            VersionId?: string;
            /**
                * <p>Custom metadata in the form of name-value pairs.</p>
                */
            CustomMetadata: Record<string, string> | undefined;
    }
    export namespace CreateCustomMetadataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCustomMetadataRequest) => any;
    }
    export interface CreateCustomMetadataResponse {
    }
    export namespace CreateCustomMetadataResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCustomMetadataResponse) => any;
    }
    /**
        * <p>The limit has been reached on the number of custom properties for the specified
        *             resource.</p>
        */
    export class CustomMetadataLimitExceededException extends __BaseException {
            readonly name: "CustomMetadataLimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CustomMetadataLimitExceededException, __BaseException>);
    }
    /**
        * <p>Another operation is in progress on the resource that conflicts with the current operation.</p>
        */
    export class ConflictingOperationException extends __BaseException {
            readonly name: "ConflictingOperationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictingOperationException, __BaseException>);
    }
    export interface CreateFolderRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The name of the new folder.</p>
                */
            Name?: string;
            /**
                * <p>The ID of the parent folder.</p>
                */
            ParentFolderId: string | undefined;
    }
    export namespace CreateFolderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFolderRequest) => any;
    }
    export enum ResourceStateType {
            ACTIVE = "ACTIVE",
            RECYCLED = "RECYCLED",
            RECYCLING = "RECYCLING",
            RESTORING = "RESTORING"
    }
    /**
        * <p>Describes a folder.</p>
        */
    export interface FolderMetadata {
            /**
                * <p>The ID of the folder.</p>
                */
            Id?: string;
            /**
                * <p>The name of the folder.</p>
                */
            Name?: string;
            /**
                * <p>The ID of the creator.</p>
                */
            CreatorId?: string;
            /**
                * <p>The ID of the parent folder.</p>
                */
            ParentFolderId?: string;
            /**
                * <p>The time when the folder was created.</p>
                */
            CreatedTimestamp?: Date;
            /**
                * <p>The time when the folder was updated.</p>
                */
            ModifiedTimestamp?: Date;
            /**
                * <p>The resource state of the folder.</p>
                */
            ResourceState?: ResourceStateType | string;
            /**
                * <p>The unique identifier created from the subfolders and documents of the
                *             folder.</p>
                */
            Signature?: string;
            /**
                * <p>List of labels on the folder.</p>
                */
            Labels?: string[];
            /**
                * <p>The size of the folder metadata.</p>
                */
            Size?: number;
            /**
                * <p>The size of the latest version of the folder metadata.</p>
                */
            LatestVersionSize?: number;
    }
    export namespace FolderMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FolderMetadata) => any;
    }
    export interface CreateFolderResponse {
            /**
                * <p>The metadata of the folder.</p>
                */
            Metadata?: FolderMetadata;
    }
    export namespace CreateFolderResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFolderResponse) => any;
    }
    /**
        * <p>The resource already exists.</p>
        */
    export class EntityAlreadyExistsException extends __BaseException {
            readonly name: "EntityAlreadyExistsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EntityAlreadyExistsException, __BaseException>);
    }
    /**
        * <p>The maximum of 100,000 folders under the parent folder has been exceeded.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    export interface CreateLabelsRequest {
            /**
                * <p>The ID of the resource.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>List of labels to add to the resource.</p>
                */
            Labels: string[] | undefined;
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
    }
    export namespace CreateLabelsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLabelsRequest) => any;
    }
    export interface CreateLabelsResponse {
    }
    export namespace CreateLabelsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLabelsResponse) => any;
    }
    /**
        * <p>The limit has been reached on the number of labels for the specified
        *             resource.</p>
        */
    export class TooManyLabelsException extends __BaseException {
            readonly name: "TooManyLabelsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyLabelsException, __BaseException>);
    }
    export enum SubscriptionProtocolType {
            HTTPS = "HTTPS"
    }
    export enum SubscriptionType {
            ALL = "ALL"
    }
    export interface CreateNotificationSubscriptionRequest {
            /**
                * <p>The ID of the organization.</p>
                */
            OrganizationId: string | undefined;
            /**
                * <p>The endpoint to receive the notifications. If the protocol is HTTPS, the endpoint
                *             is a URL that begins with <code>https</code>.</p>
                */
            Endpoint: string | undefined;
            /**
                * <p>The protocol to use. The supported value is https, which delivers JSON-encoded
                *             messages using HTTPS POST.</p>
                */
            Protocol: SubscriptionProtocolType | string | undefined;
            /**
                * <p>The notification type.</p>
                */
            SubscriptionType: SubscriptionType | string | undefined;
    }
    export namespace CreateNotificationSubscriptionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateNotificationSubscriptionRequest) => any;
    }
    /**
        * <p>Describes a subscription.</p>
        */
    export interface Subscription {
            /**
                * <p>The ID of the subscription.</p>
                */
            SubscriptionId?: string;
            /**
                * <p>The endpoint of the subscription.</p>
                */
            EndPoint?: string;
            /**
                * <p>The protocol of the subscription.</p>
                */
            Protocol?: SubscriptionProtocolType | string;
    }
    export namespace Subscription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Subscription) => any;
    }
    export interface CreateNotificationSubscriptionResponse {
            /**
                * <p>The subscription.</p>
                */
            Subscription?: Subscription;
    }
    export namespace CreateNotificationSubscriptionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateNotificationSubscriptionResponse) => any;
    }
    /**
        * <p>You've reached the limit on the number of subscriptions for the WorkDocs
        *             instance.</p>
        */
    export class TooManySubscriptionsException extends __BaseException {
            readonly name: "TooManySubscriptionsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManySubscriptionsException, __BaseException>);
    }
    export interface CreateUserRequest {
            /**
                * <p>The ID of the organization.</p>
                */
            OrganizationId?: string;
            /**
                * <p>The login name of the user.</p>
                */
            Username: string | undefined;
            /**
                * <p>The email address of the user.</p>
                */
            EmailAddress?: string;
            /**
                * <p>The given name of the user.</p>
                */
            GivenName: string | undefined;
            /**
                * <p>The surname of the user.</p>
                */
            Surname: string | undefined;
            /**
                * <p>The password of the user.</p>
                */
            Password: string | undefined;
            /**
                * <p>The time zone ID of the user.</p>
                */
            TimeZoneId?: string;
            /**
                * <p>The amount of storage for the user.</p>
                */
            StorageRule?: StorageRuleType;
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
    }
    export namespace CreateUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUserRequest) => any;
    }
    export interface CreateUserResponse {
            /**
                * <p>The user information.</p>
                */
            User?: User;
    }
    export namespace CreateUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUserResponse) => any;
    }
    export interface DeactivateUserRequest {
            /**
                * <p>The ID of the user.</p>
                */
            UserId: string | undefined;
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
    }
    export namespace DeactivateUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeactivateUserRequest) => any;
    }
    export interface DeleteCommentRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the document.</p>
                */
            DocumentId: string | undefined;
            /**
                * <p>The ID of the document version.</p>
                */
            VersionId: string | undefined;
            /**
                * <p>The ID of the comment.</p>
                */
            CommentId: string | undefined;
    }
    export namespace DeleteCommentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCommentRequest) => any;
    }
    export interface DeleteCustomMetadataRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the resource, either a document or folder.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The ID of the version, if the custom metadata is being deleted from a document
                *             version.</p>
                */
            VersionId?: string;
            /**
                * <p>List of properties to remove.</p>
                */
            Keys?: string[];
            /**
                * <p>Flag to indicate removal of all custom metadata properties from the specified
                *             resource.</p>
                */
            DeleteAll?: boolean;
    }
    export namespace DeleteCustomMetadataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCustomMetadataRequest) => any;
    }
    export interface DeleteCustomMetadataResponse {
    }
    export namespace DeleteCustomMetadataResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCustomMetadataResponse) => any;
    }
    /**
        * <p>The resource hierarchy is changing.</p>
        */
    export class ConcurrentModificationException extends __BaseException {
            readonly name: "ConcurrentModificationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConcurrentModificationException, __BaseException>);
    }
    export interface DeleteDocumentRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the document.</p>
                */
            DocumentId: string | undefined;
    }
    export namespace DeleteDocumentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDocumentRequest) => any;
    }
    export interface DeleteFolderRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the folder.</p>
                */
            FolderId: string | undefined;
    }
    export namespace DeleteFolderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFolderRequest) => any;
    }
    export interface DeleteFolderContentsRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the folder.</p>
                */
            FolderId: string | undefined;
    }
    export namespace DeleteFolderContentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFolderContentsRequest) => any;
    }
    export interface DeleteLabelsRequest {
            /**
                * <p>The ID of the resource.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>List of labels to delete from the resource.</p>
                */
            Labels?: string[];
            /**
                * <p>Flag to request removal of all labels from the specified resource.</p>
                */
            DeleteAll?: boolean;
    }
    export namespace DeleteLabelsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLabelsRequest) => any;
    }
    export interface DeleteLabelsResponse {
    }
    export namespace DeleteLabelsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLabelsResponse) => any;
    }
    export interface DeleteNotificationSubscriptionRequest {
            /**
                * <p>The ID of the subscription.</p>
                */
            SubscriptionId: string | undefined;
            /**
                * <p>The ID of the organization.</p>
                */
            OrganizationId: string | undefined;
    }
    export namespace DeleteNotificationSubscriptionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteNotificationSubscriptionRequest) => any;
    }
    export interface DeleteUserRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Do not set this field when using
                *             administrative API actions, as in accessing the API using AWS credentials.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the user.</p>
                */
            UserId: string | undefined;
    }
    export namespace DeleteUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserRequest) => any;
    }
    export interface DescribeActivitiesRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The timestamp that determines the starting time of the activities. The response
                *             includes the activities performed after the specified timestamp.</p>
                */
            StartTime?: Date;
            /**
                * <p>The timestamp that determines the end time of the activities. The response includes
                *             the activities performed before the specified timestamp.</p>
                */
            EndTime?: Date;
            /**
                * <p>The ID of the organization. This is a mandatory parameter when using administrative
                *             API (SigV4) requests.</p>
                */
            OrganizationId?: string;
            /**
                * <p>Specifies which activity types to include in the response. If this field is left
                *             empty, all activity types are returned.</p>
                */
            ActivityTypes?: string;
            /**
                * <p>The document or folder ID for which to describe activity types.</p>
                */
            ResourceId?: string;
            /**
                * <p>The ID of the user who performed the action. The response includes activities
                *             pertaining to this user. This is an optional parameter and is only applicable for
                *             administrative API (SigV4) requests.</p>
                */
            UserId?: string;
            /**
                * <p>Includes indirect activities. An indirect activity results from a direct activity
                *             performed on a parent resource. For example, sharing a parent folder (the direct
                *             activity) shares all of the subfolders and documents within the parent folder (the
                *             indirect activity).</p>
                */
            IncludeIndirectActivities?: boolean;
            /**
                * <p>The maximum number of items to return.</p>
                */
            Limit?: number;
            /**
                * <p>The marker for the next set of results.</p>
                */
            Marker?: string;
    }
    export namespace DescribeActivitiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeActivitiesRequest) => any;
    }
    export interface DescribeActivitiesResponse {
            /**
                * <p>The list of activities for the specified user and time period.</p>
                */
            UserActivities?: Activity[];
            /**
                * <p>The marker for the next set of results.</p>
                */
            Marker?: string;
    }
    export namespace DescribeActivitiesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeActivitiesResponse) => any;
    }
    /**
        * <p>The pagination marker or limit fields are not valid.</p>
        */
    export class InvalidArgumentException extends __BaseException {
            readonly name: "InvalidArgumentException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidArgumentException, __BaseException>);
    }
    export interface DescribeCommentsRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the document.</p>
                */
            DocumentId: string | undefined;
            /**
                * <p>The ID of the document version.</p>
                */
            VersionId: string | undefined;
            /**
                * <p>The maximum number of items to return.</p>
                */
            Limit?: number;
            /**
                * <p>The marker for the next set of results. This marker was received from a previous
                *             call.</p>
                */
            Marker?: string;
    }
    export namespace DescribeCommentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeCommentsRequest) => any;
    }
    export interface DescribeCommentsResponse {
            /**
                * <p>The list of comments for the specified document version.</p>
                */
            Comments?: Comment[];
            /**
                * <p>The marker for the next set of results. This marker was received from a previous
                *             call.</p>
                */
            Marker?: string;
    }
    export namespace DescribeCommentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeCommentsResponse) => any;
    }
    export interface DescribeDocumentVersionsRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the document.</p>
                */
            DocumentId: string | undefined;
            /**
                * <p>The marker for the next set of results. (You received this marker from a previous
                *             call.)</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of versions to return with this call.</p>
                */
            Limit?: number;
            /**
                * <p>A comma-separated list of values. Specify "INITIALIZED" to include incomplete
                *             versions.</p>
                */
            Include?: string;
            /**
                * <p>Specify "SOURCE" to include initialized versions and a URL for the source
                *             document.</p>
                */
            Fields?: string;
    }
    export namespace DescribeDocumentVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDocumentVersionsRequest) => any;
    }
    export enum DocumentSourceType {
            ORIGINAL = "ORIGINAL",
            WITH_COMMENTS = "WITH_COMMENTS"
    }
    export enum DocumentStatusType {
            ACTIVE = "ACTIVE",
            INITIALIZED = "INITIALIZED"
    }
    export enum DocumentThumbnailType {
            LARGE = "LARGE",
            SMALL = "SMALL",
            SMALL_HQ = "SMALL_HQ"
    }
    /**
        * <p>Describes a version of a document.</p>
        */
    export interface DocumentVersionMetadata {
            /**
                * <p>The ID of the version.</p>
                */
            Id?: string;
            /**
                * <p>The name of the version.</p>
                */
            Name?: string;
            /**
                * <p>The content type of the document.</p>
                */
            ContentType?: string;
            /**
                * <p>The size of the document, in bytes.</p>
                */
            Size?: number;
            /**
                * <p>The signature of the document.</p>
                */
            Signature?: string;
            /**
                * <p>The status of the document.</p>
                */
            Status?: DocumentStatusType | string;
            /**
                * <p>The timestamp when the document was first uploaded.</p>
                */
            CreatedTimestamp?: Date;
            /**
                * <p>The timestamp when the document was last uploaded.</p>
                */
            ModifiedTimestamp?: Date;
            /**
                * <p>The timestamp when the content of the document was originally created.</p>
                */
            ContentCreatedTimestamp?: Date;
            /**
                * <p>The timestamp when the content of the document was modified.</p>
                */
            ContentModifiedTimestamp?: Date;
            /**
                * <p>The ID of the creator.</p>
                */
            CreatorId?: string;
            /**
                * <p>The thumbnail of the document.</p>
                */
            Thumbnail?: Record<string, string>;
            /**
                * <p>The source of the document.</p>
                */
            Source?: Record<string, string>;
    }
    export namespace DocumentVersionMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentVersionMetadata) => any;
    }
    export interface DescribeDocumentVersionsResponse {
            /**
                * <p>The document versions.</p>
                */
            DocumentVersions?: DocumentVersionMetadata[];
            /**
                * <p>The marker to use when requesting the next set of results. If there are no
                *             additional results, the string is empty.</p>
                */
            Marker?: string;
    }
    export namespace DescribeDocumentVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDocumentVersionsResponse) => any;
    }
    export enum OrderType {
            ASCENDING = "ASCENDING",
            DESCENDING = "DESCENDING"
    }
    export enum ResourceSortType {
            DATE = "DATE",
            NAME = "NAME"
    }
    export enum FolderContentType {
            ALL = "ALL",
            DOCUMENT = "DOCUMENT",
            FOLDER = "FOLDER"
    }
    export interface DescribeFolderContentsRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the folder.</p>
                */
            FolderId: string | undefined;
            /**
                * <p>The sorting criteria.</p>
                */
            Sort?: ResourceSortType | string;
            /**
                * <p>The order for the contents of the folder.</p>
                */
            Order?: OrderType | string;
            /**
                * <p>The maximum number of items to return with this call.</p>
                */
            Limit?: number;
            /**
                * <p>The marker for the next set of results. This marker was received from a previous
                *             call.</p>
                */
            Marker?: string;
            /**
                * <p>The type of items.</p>
                */
            Type?: FolderContentType | string;
            /**
                * <p>The contents to include. Specify "INITIALIZED" to include initialized
                *             documents.</p>
                */
            Include?: string;
    }
    export namespace DescribeFolderContentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFolderContentsRequest) => any;
    }
    /**
        * <p>Describes the document.</p>
        */
    export interface DocumentMetadata {
            /**
                * <p>The ID of the document.</p>
                */
            Id?: string;
            /**
                * <p>The ID of the creator.</p>
                */
            CreatorId?: string;
            /**
                * <p>The ID of the parent folder.</p>
                */
            ParentFolderId?: string;
            /**
                * <p>The time when the document was created.</p>
                */
            CreatedTimestamp?: Date;
            /**
                * <p>The time when the document was updated.</p>
                */
            ModifiedTimestamp?: Date;
            /**
                * <p>The latest version of the document.</p>
                */
            LatestVersionMetadata?: DocumentVersionMetadata;
            /**
                * <p>The resource state.</p>
                */
            ResourceState?: ResourceStateType | string;
            /**
                * <p>List of labels on the document.</p>
                */
            Labels?: string[];
    }
    export namespace DocumentMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentMetadata) => any;
    }
    export interface DescribeFolderContentsResponse {
            /**
                * <p>The subfolders in the specified folder.</p>
                */
            Folders?: FolderMetadata[];
            /**
                * <p>The documents in the specified folder.</p>
                */
            Documents?: DocumentMetadata[];
            /**
                * <p>The marker to use when requesting the next set of results. If there are no
                *             additional results, the string is empty.</p>
                */
            Marker?: string;
    }
    export namespace DescribeFolderContentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFolderContentsResponse) => any;
    }
    export interface DescribeGroupsRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>A query to describe groups by group name.</p>
                */
            SearchQuery: string | undefined;
            /**
                * <p>The ID of the organization.</p>
                */
            OrganizationId?: string;
            /**
                * <p>The marker for the next set of results. (You received this marker from a previous
                *             call.)</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of items to return with this call.</p>
                */
            Limit?: number;
    }
    export namespace DescribeGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeGroupsRequest) => any;
    }
    export interface DescribeGroupsResponse {
            /**
                * <p>The list of groups.</p>
                */
            Groups?: GroupMetadata[];
            /**
                * <p>The marker to use when requesting the next set of results. If there are no additional
                *             results, the string is empty.</p>
                */
            Marker?: string;
    }
    export namespace DescribeGroupsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeGroupsResponse) => any;
    }
    export interface DescribeNotificationSubscriptionsRequest {
            /**
                * <p>The ID of the organization.</p>
                */
            OrganizationId: string | undefined;
            /**
                * <p>The marker for the next set of results. (You received this marker from a previous
                *             call.)</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of items to return with this call.</p>
                */
            Limit?: number;
    }
    export namespace DescribeNotificationSubscriptionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeNotificationSubscriptionsRequest) => any;
    }
    export interface DescribeNotificationSubscriptionsResponse {
            /**
                * <p>The subscriptions.</p>
                */
            Subscriptions?: Subscription[];
            /**
                * <p>The marker to use when requesting the next set of results. If there are no
                *             additional results, the string is empty.</p>
                */
            Marker?: string;
    }
    export namespace DescribeNotificationSubscriptionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeNotificationSubscriptionsResponse) => any;
    }
    export interface DescribeResourcePermissionsRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the resource.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The ID of the principal to filter permissions by.</p>
                */
            PrincipalId?: string;
            /**
                * <p>The maximum number of items to return with this call.</p>
                */
            Limit?: number;
            /**
                * <p>The marker for the next set of results. (You received this marker from a previous
                *             call)</p>
                */
            Marker?: string;
    }
    export namespace DescribeResourcePermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeResourcePermissionsRequest) => any;
    }
    export enum RolePermissionType {
            DIRECT = "DIRECT",
            INHERITED = "INHERITED"
    }
    /**
        * <p>Describes the permissions.</p>
        */
    export interface PermissionInfo {
            /**
                * <p>The role of the user.</p>
                */
            Role?: RoleType | string;
            /**
                * <p>The type of permissions.</p>
                */
            Type?: RolePermissionType | string;
    }
    export namespace PermissionInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PermissionInfo) => any;
    }
    /**
        * <p>Describes a resource.</p>
        */
    export interface Principal {
            /**
                * <p>The ID of the resource.</p>
                */
            Id?: string;
            /**
                * <p>The type of resource.</p>
                */
            Type?: PrincipalType | string;
            /**
                * <p>The permission information for the resource.</p>
                */
            Roles?: PermissionInfo[];
    }
    export namespace Principal {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Principal) => any;
    }
    export interface DescribeResourcePermissionsResponse {
            /**
                * <p>The principals.</p>
                */
            Principals?: Principal[];
            /**
                * <p>The marker to use when requesting the next set of results. If there are no
                *             additional results, the string is empty.</p>
                */
            Marker?: string;
    }
    export namespace DescribeResourcePermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeResourcePermissionsResponse) => any;
    }
    export interface DescribeRootFoldersRequest {
            /**
                * <p>Amazon WorkDocs authentication token.</p>
                */
            AuthenticationToken: string | undefined;
            /**
                * <p>The maximum number of items to return.</p>
                */
            Limit?: number;
            /**
                * <p>The marker for the next set of results. (You received this marker from a previous
                *             call.)</p>
                */
            Marker?: string;
    }
    export namespace DescribeRootFoldersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRootFoldersRequest) => any;
    }
    export interface DescribeRootFoldersResponse {
            /**
                * <p>The user's special folders.</p>
                */
            Folders?: FolderMetadata[];
            /**
                * <p>The marker for the next set of results.</p>
                */
            Marker?: string;
    }
    export namespace DescribeRootFoldersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRootFoldersResponse) => any;
    }
    export enum UserFilterType {
            ACTIVE_PENDING = "ACTIVE_PENDING",
            ALL = "ALL"
    }
    export enum UserSortType {
            FULL_NAME = "FULL_NAME",
            STORAGE_LIMIT = "STORAGE_LIMIT",
            STORAGE_USED = "STORAGE_USED",
            USER_NAME = "USER_NAME",
            USER_STATUS = "USER_STATUS"
    }
    export interface DescribeUsersRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the organization.</p>
                */
            OrganizationId?: string;
            /**
                * <p>The IDs of the users.</p>
                */
            UserIds?: string;
            /**
                * <p>A query to filter users by user name.</p>
                */
            Query?: string;
            /**
                * <p>The state of the users. Specify "ALL" to include inactive users.</p>
                */
            Include?: UserFilterType | string;
            /**
                * <p>The order for the results.</p>
                */
            Order?: OrderType | string;
            /**
                * <p>The sorting criteria.</p>
                */
            Sort?: UserSortType | string;
            /**
                * <p>The marker for the next set of results. (You received this marker from a previous
                *             call.)</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of items to return.</p>
                */
            Limit?: number;
            /**
                * <p>A comma-separated list of values. Specify "STORAGE_METADATA" to include the user
                *             storage quota and utilization information.</p>
                */
            Fields?: string;
    }
    export namespace DescribeUsersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUsersRequest) => any;
    }
    export interface DescribeUsersResponse {
            /**
                * <p>The users.</p>
                */
            Users?: User[];
            /**
                * @deprecated
                *
                * <p>The total number of users included in the results.</p>
                */
            TotalNumberOfUsers?: number;
            /**
                * <p>The marker to use when requesting the next set of results. If there are no
                *             additional results, the string is empty.</p>
                */
            Marker?: string;
    }
    export namespace DescribeUsersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUsersResponse) => any;
    }
    /**
        * <p>The response is too large to return. The request must include a filter to reduce the size of the response.</p>
        */
    export class RequestedEntityTooLargeException extends __BaseException {
            readonly name: "RequestedEntityTooLargeException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RequestedEntityTooLargeException, __BaseException>);
    }
    export interface GetCurrentUserRequest {
            /**
                * <p>Amazon WorkDocs authentication token.</p>
                */
            AuthenticationToken: string | undefined;
    }
    export namespace GetCurrentUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCurrentUserRequest) => any;
    }
    export interface GetCurrentUserResponse {
            /**
                * <p>Metadata of the user.</p>
                */
            User?: User;
    }
    export namespace GetCurrentUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCurrentUserResponse) => any;
    }
    export interface GetDocumentRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the document.</p>
                */
            DocumentId: string | undefined;
            /**
                * <p>Set this to <code>TRUE</code> to include custom metadata in the response.</p>
                */
            IncludeCustomMetadata?: boolean;
    }
    export namespace GetDocumentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDocumentRequest) => any;
    }
    export interface GetDocumentResponse {
            /**
                * <p>The metadata details of the document.</p>
                */
            Metadata?: DocumentMetadata;
            /**
                * <p>The custom metadata on the document.</p>
                */
            CustomMetadata?: Record<string, string>;
    }
    export namespace GetDocumentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDocumentResponse) => any;
    }
    /**
        * <p>The password is invalid.</p>
        */
    export class InvalidPasswordException extends __BaseException {
            readonly name: "InvalidPasswordException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidPasswordException, __BaseException>);
    }
    export interface GetDocumentPathRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the document.</p>
                */
            DocumentId: string | undefined;
            /**
                * <p>The maximum number of levels in the hierarchy to return.</p>
                */
            Limit?: number;
            /**
                * <p>A comma-separated list of values. Specify <code>NAME</code> to include the names of
                *             the parent folders.</p>
                */
            Fields?: string;
            /**
                * <p>This value is not supported.</p>
                */
            Marker?: string;
    }
    export namespace GetDocumentPathRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDocumentPathRequest) => any;
    }
    /**
        * <p>Describes the resource path.</p>
        */
    export interface ResourcePathComponent {
            /**
                * <p>The ID of the resource path.</p>
                */
            Id?: string;
            /**
                * <p>The name of the resource path.</p>
                */
            Name?: string;
    }
    export namespace ResourcePathComponent {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourcePathComponent) => any;
    }
    /**
        * <p>Describes the path information of a resource.</p>
        */
    export interface ResourcePath {
            /**
                * <p>The components of the resource path.</p>
                */
            Components?: ResourcePathComponent[];
    }
    export namespace ResourcePath {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourcePath) => any;
    }
    export interface GetDocumentPathResponse {
            /**
                * <p>The path information.</p>
                */
            Path?: ResourcePath;
    }
    export namespace GetDocumentPathResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDocumentPathResponse) => any;
    }
    export interface GetDocumentVersionRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the document.</p>
                */
            DocumentId: string | undefined;
            /**
                * <p>The version ID of the document.</p>
                */
            VersionId: string | undefined;
            /**
                * <p>A comma-separated list of values. Specify "SOURCE" to include a URL for the source
                *             document.</p>
                */
            Fields?: string;
            /**
                * <p>Set this to TRUE to include custom metadata in the response.</p>
                */
            IncludeCustomMetadata?: boolean;
    }
    export namespace GetDocumentVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDocumentVersionRequest) => any;
    }
    export interface GetDocumentVersionResponse {
            /**
                * <p>The version metadata.</p>
                */
            Metadata?: DocumentVersionMetadata;
            /**
                * <p>The custom metadata on the document version.</p>
                */
            CustomMetadata?: Record<string, string>;
    }
    export namespace GetDocumentVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDocumentVersionResponse) => any;
    }
    export interface GetFolderRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the folder.</p>
                */
            FolderId: string | undefined;
            /**
                * <p>Set to TRUE to include custom metadata in the response.</p>
                */
            IncludeCustomMetadata?: boolean;
    }
    export namespace GetFolderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFolderRequest) => any;
    }
    export interface GetFolderResponse {
            /**
                * <p>The metadata of the folder.</p>
                */
            Metadata?: FolderMetadata;
            /**
                * <p>The custom metadata on the folder.</p>
                */
            CustomMetadata?: Record<string, string>;
    }
    export namespace GetFolderResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFolderResponse) => any;
    }
    export interface GetFolderPathRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the folder.</p>
                */
            FolderId: string | undefined;
            /**
                * <p>The maximum number of levels in the hierarchy to return.</p>
                */
            Limit?: number;
            /**
                * <p>A comma-separated list of values. Specify "NAME" to include the names of the parent
                *             folders.</p>
                */
            Fields?: string;
            /**
                * <p>This value is not supported.</p>
                */
            Marker?: string;
    }
    export namespace GetFolderPathRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFolderPathRequest) => any;
    }
    export interface GetFolderPathResponse {
            /**
                * <p>The path information.</p>
                */
            Path?: ResourcePath;
    }
    export namespace GetFolderPathResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFolderPathResponse) => any;
    }
    export enum ResourceCollectionType {
            SHARED_WITH_ME = "SHARED_WITH_ME"
    }
    export interface GetResourcesRequest {
            /**
                * <p>The Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The user ID for the resource collection. This is a required field for accessing the
                *             API operation using IAM credentials.</p>
                */
            UserId?: string;
            /**
                * <p>The collection type.</p>
                */
            CollectionType?: ResourceCollectionType | string;
            /**
                * <p>The maximum number of resources to return.</p>
                */
            Limit?: number;
            /**
                * <p>The marker for the next set of results. This marker was received from a previous call.</p>
                */
            Marker?: string;
    }
    export namespace GetResourcesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResourcesRequest) => any;
    }
    export interface GetResourcesResponse {
            /**
                * <p>The folders in the specified folder.</p>
                */
            Folders?: FolderMetadata[];
            /**
                * <p>The documents in the specified collection.</p>
                */
            Documents?: DocumentMetadata[];
            /**
                * <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
                */
            Marker?: string;
    }
    export namespace GetResourcesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResourcesResponse) => any;
    }
    /**
        * <p>This exception is thrown when a valid checkout ID is not presented on document
        *             version upload calls for a document that has been checked out from Web client.</p>
        */
    export class DraftUploadOutOfSyncException extends __BaseException {
            readonly name: "DraftUploadOutOfSyncException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DraftUploadOutOfSyncException, __BaseException>);
    }
    export interface InitiateDocumentVersionUploadRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the document.</p>
                */
            Id?: string;
            /**
                * <p>The name of the document.</p>
                */
            Name?: string;
            /**
                * <p>The timestamp when the content of the document was originally created.</p>
                */
            ContentCreatedTimestamp?: Date;
            /**
                * <p>The timestamp when the content of the document was modified.</p>
                */
            ContentModifiedTimestamp?: Date;
            /**
                * <p>The content type of the document.</p>
                */
            ContentType?: string;
            /**
                * <p>The size of the document, in bytes.</p>
                */
            DocumentSizeInBytes?: number;
            /**
                * <p>The ID of the parent folder.</p>
                */
            ParentFolderId: string | undefined;
    }
    export namespace InitiateDocumentVersionUploadRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InitiateDocumentVersionUploadRequest) => any;
    }
    /**
        * <p>Describes the upload.</p>
        */
    export interface UploadMetadata {
            /**
                * <p>The URL of the upload.</p>
                */
            UploadUrl?: string;
            /**
                * <p>The signed headers.</p>
                */
            SignedHeaders?: Record<string, string>;
    }
    export namespace UploadMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UploadMetadata) => any;
    }
    export interface InitiateDocumentVersionUploadResponse {
            /**
                * <p>The document metadata.</p>
                */
            Metadata?: DocumentMetadata;
            /**
                * <p>The upload metadata.</p>
                */
            UploadMetadata?: UploadMetadata;
    }
    export namespace InitiateDocumentVersionUploadResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InitiateDocumentVersionUploadResponse) => any;
    }
    /**
        * <p>The resource is already checked out.</p>
        */
    export class ResourceAlreadyCheckedOutException extends __BaseException {
            readonly name: "ResourceAlreadyCheckedOutException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceAlreadyCheckedOutException, __BaseException>);
    }
    /**
        * <p>The storage limit has been exceeded.</p>
        */
    export class StorageLimitExceededException extends __BaseException {
            readonly name: "StorageLimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<StorageLimitExceededException, __BaseException>);
    }
    /**
        * <p>The storage limit will be exceeded.</p>
        */
    export class StorageLimitWillExceedException extends __BaseException {
            readonly name: "StorageLimitWillExceedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<StorageLimitWillExceedException, __BaseException>);
    }
    export interface RemoveAllResourcePermissionsRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the resource.</p>
                */
            ResourceId: string | undefined;
    }
    export namespace RemoveAllResourcePermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveAllResourcePermissionsRequest) => any;
    }
    export interface RemoveResourcePermissionRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the resource.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The principal ID of the resource.</p>
                */
            PrincipalId: string | undefined;
            /**
                * <p>The principal type of the resource.</p>
                */
            PrincipalType?: PrincipalType | string;
    }
    export namespace RemoveResourcePermissionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveResourcePermissionRequest) => any;
    }
    export interface UpdateDocumentRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the document.</p>
                */
            DocumentId: string | undefined;
            /**
                * <p>The name of the document.</p>
                */
            Name?: string;
            /**
                * <p>The ID of the parent folder.</p>
                */
            ParentFolderId?: string;
            /**
                * <p>The resource state of the document. Only ACTIVE and RECYCLED are
                *             supported.</p>
                */
            ResourceState?: ResourceStateType | string;
    }
    export namespace UpdateDocumentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDocumentRequest) => any;
    }
    /**
        * <p>The operation is invalid.</p>
        */
    export class InvalidOperationException extends __BaseException {
            readonly name: "InvalidOperationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidOperationException, __BaseException>);
    }
    export enum DocumentVersionStatus {
            ACTIVE = "ACTIVE"
    }
    export interface UpdateDocumentVersionRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the document.</p>
                */
            DocumentId: string | undefined;
            /**
                * <p>The version ID of the document.</p>
                */
            VersionId: string | undefined;
            /**
                * <p>The status of the version.</p>
                */
            VersionStatus?: DocumentVersionStatus | string;
    }
    export namespace UpdateDocumentVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDocumentVersionRequest) => any;
    }
    export interface UpdateFolderRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the folder.</p>
                */
            FolderId: string | undefined;
            /**
                * <p>The name of the folder.</p>
                */
            Name?: string;
            /**
                * <p>The ID of the parent folder.</p>
                */
            ParentFolderId?: string;
            /**
                * <p>The resource state of the folder. Only ACTIVE and RECYCLED are accepted values from
                *             the API.</p>
                */
            ResourceState?: ResourceStateType | string;
    }
    export namespace UpdateFolderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFolderRequest) => any;
    }
    /**
        * <p>The last user in the organization is being deactivated.</p>
        */
    export class DeactivatingLastSystemUserException extends __BaseException {
            readonly name: "DeactivatingLastSystemUserException";
            readonly $fault: "client";
            Message?: string;
            Code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DeactivatingLastSystemUserException, __BaseException>);
    }
    /**
        * <p>The user is undergoing transfer of ownership.</p>
        */
    export class IllegalUserStateException extends __BaseException {
            readonly name: "IllegalUserStateException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<IllegalUserStateException, __BaseException>);
    }
    export enum BooleanEnumType {
            FALSE = "FALSE",
            TRUE = "TRUE"
    }
    export interface UpdateUserRequest {
            /**
                * <p>Amazon WorkDocs authentication token. Not required when using AWS administrator credentials to access the API.</p>
                */
            AuthenticationToken?: string;
            /**
                * <p>The ID of the user.</p>
                */
            UserId: string | undefined;
            /**
                * <p>The given name of the user.</p>
                */
            GivenName?: string;
            /**
                * <p>The surname of the user.</p>
                */
            Surname?: string;
            /**
                * <p>The type of the user.</p>
                */
            Type?: UserType | string;
            /**
                * <p>The amount of storage for the user.</p>
                */
            StorageRule?: StorageRuleType;
            /**
                * <p>The time zone ID of the user.</p>
                */
            TimeZoneId?: string;
            /**
                * <p>The locale of the user.</p>
                */
            Locale?: LocaleType | string;
            /**
                * <p>Boolean value to determine whether the user is granted Poweruser privileges.</p>
                */
            GrantPoweruserPrivileges?: BooleanEnumType | string;
    }
    export namespace UpdateUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUserRequest) => any;
    }
    export interface UpdateUserResponse {
            /**
                * <p>The user information.</p>
                */
            User?: User;
    }
    export namespace UpdateUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUserResponse) => any;
    }
}

declare module '@aws-sdk/client-workdocs/node_modules/@aws-sdk/client-workdocs/dist-types/models/WorkDocsServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from WorkDocs service.
        */
    export class WorkDocsServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

