// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client

declare module '@aws-sdk/client-clouddirectory' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CloudDirectoryClient } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { AddFacetToObjectCommandInput, AddFacetToObjectCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/AddFacetToObjectCommand";
    import { ApplySchemaCommandInput, ApplySchemaCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ApplySchemaCommand";
    import { AttachObjectCommandInput, AttachObjectCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/AttachObjectCommand";
    import { AttachPolicyCommandInput, AttachPolicyCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/AttachPolicyCommand";
    import { AttachToIndexCommandInput, AttachToIndexCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/AttachToIndexCommand";
    import { AttachTypedLinkCommandInput, AttachTypedLinkCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/AttachTypedLinkCommand";
    import { BatchReadCommandInput, BatchReadCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/BatchReadCommand";
    import { BatchWriteCommandInput, BatchWriteCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/BatchWriteCommand";
    import { CreateDirectoryCommandInput, CreateDirectoryCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/CreateDirectoryCommand";
    import { CreateFacetCommandInput, CreateFacetCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/CreateFacetCommand";
    import { CreateIndexCommandInput, CreateIndexCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/CreateIndexCommand";
    import { CreateObjectCommandInput, CreateObjectCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/CreateObjectCommand";
    import { CreateSchemaCommandInput, CreateSchemaCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/CreateSchemaCommand";
    import { CreateTypedLinkFacetCommandInput, CreateTypedLinkFacetCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/CreateTypedLinkFacetCommand";
    import { DeleteDirectoryCommandInput, DeleteDirectoryCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DeleteDirectoryCommand";
    import { DeleteFacetCommandInput, DeleteFacetCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DeleteFacetCommand";
    import { DeleteObjectCommandInput, DeleteObjectCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DeleteObjectCommand";
    import { DeleteSchemaCommandInput, DeleteSchemaCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DeleteSchemaCommand";
    import { DeleteTypedLinkFacetCommandInput, DeleteTypedLinkFacetCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DeleteTypedLinkFacetCommand";
    import { DetachFromIndexCommandInput, DetachFromIndexCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DetachFromIndexCommand";
    import { DetachObjectCommandInput, DetachObjectCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DetachObjectCommand";
    import { DetachPolicyCommandInput, DetachPolicyCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DetachPolicyCommand";
    import { DetachTypedLinkCommandInput, DetachTypedLinkCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DetachTypedLinkCommand";
    import { DisableDirectoryCommandInput, DisableDirectoryCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DisableDirectoryCommand";
    import { EnableDirectoryCommandInput, EnableDirectoryCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/EnableDirectoryCommand";
    import { GetAppliedSchemaVersionCommandInput, GetAppliedSchemaVersionCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetAppliedSchemaVersionCommand";
    import { GetDirectoryCommandInput, GetDirectoryCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetDirectoryCommand";
    import { GetFacetCommandInput, GetFacetCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetFacetCommand";
    import { GetLinkAttributesCommandInput, GetLinkAttributesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetLinkAttributesCommand";
    import { GetObjectAttributesCommandInput, GetObjectAttributesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetObjectAttributesCommand";
    import { GetObjectInformationCommandInput, GetObjectInformationCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetObjectInformationCommand";
    import { GetSchemaAsJsonCommandInput, GetSchemaAsJsonCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetSchemaAsJsonCommand";
    import { GetTypedLinkFacetInformationCommandInput, GetTypedLinkFacetInformationCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetTypedLinkFacetInformationCommand";
    import { ListAppliedSchemaArnsCommandInput, ListAppliedSchemaArnsCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListAppliedSchemaArnsCommand";
    import { ListAttachedIndicesCommandInput, ListAttachedIndicesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListAttachedIndicesCommand";
    import { ListDevelopmentSchemaArnsCommandInput, ListDevelopmentSchemaArnsCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListDevelopmentSchemaArnsCommand";
    import { ListDirectoriesCommandInput, ListDirectoriesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListDirectoriesCommand";
    import { ListFacetAttributesCommandInput, ListFacetAttributesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListFacetAttributesCommand";
    import { ListFacetNamesCommandInput, ListFacetNamesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListFacetNamesCommand";
    import { ListIncomingTypedLinksCommandInput, ListIncomingTypedLinksCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListIncomingTypedLinksCommand";
    import { ListIndexCommandInput, ListIndexCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListIndexCommand";
    import { ListManagedSchemaArnsCommandInput, ListManagedSchemaArnsCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListManagedSchemaArnsCommand";
    import { ListObjectAttributesCommandInput, ListObjectAttributesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListObjectAttributesCommand";
    import { ListObjectChildrenCommandInput, ListObjectChildrenCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListObjectChildrenCommand";
    import { ListObjectParentPathsCommandInput, ListObjectParentPathsCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListObjectParentPathsCommand";
    import { ListObjectParentsCommandInput, ListObjectParentsCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListObjectParentsCommand";
    import { ListObjectPoliciesCommandInput, ListObjectPoliciesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListObjectPoliciesCommand";
    import { ListOutgoingTypedLinksCommandInput, ListOutgoingTypedLinksCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListOutgoingTypedLinksCommand";
    import { ListPolicyAttachmentsCommandInput, ListPolicyAttachmentsCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListPolicyAttachmentsCommand";
    import { ListPublishedSchemaArnsCommandInput, ListPublishedSchemaArnsCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListPublishedSchemaArnsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListTagsForResourceCommand";
    import { ListTypedLinkFacetAttributesCommandInput, ListTypedLinkFacetAttributesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListTypedLinkFacetAttributesCommand";
    import { ListTypedLinkFacetNamesCommandInput, ListTypedLinkFacetNamesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListTypedLinkFacetNamesCommand";
    import { LookupPolicyCommandInput, LookupPolicyCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/LookupPolicyCommand";
    import { PublishSchemaCommandInput, PublishSchemaCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/PublishSchemaCommand";
    import { PutSchemaFromJsonCommandInput, PutSchemaFromJsonCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/PutSchemaFromJsonCommand";
    import { RemoveFacetFromObjectCommandInput, RemoveFacetFromObjectCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/RemoveFacetFromObjectCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UntagResourceCommand";
    import { UpdateFacetCommandInput, UpdateFacetCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UpdateFacetCommand";
    import { UpdateLinkAttributesCommandInput, UpdateLinkAttributesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UpdateLinkAttributesCommand";
    import { UpdateObjectAttributesCommandInput, UpdateObjectAttributesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UpdateObjectAttributesCommand";
    import { UpdateSchemaCommandInput, UpdateSchemaCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UpdateSchemaCommand";
    import { UpdateTypedLinkFacetCommandInput, UpdateTypedLinkFacetCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UpdateTypedLinkFacetCommand";
    import { UpgradeAppliedSchemaCommandInput, UpgradeAppliedSchemaCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UpgradeAppliedSchemaCommand";
    import { UpgradePublishedSchemaCommandInput, UpgradePublishedSchemaCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UpgradePublishedSchemaCommand";
    /**
        * <fullname>Amazon Cloud Directory</fullname>
        *          <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the
        *       development and management of cloud-scale web, mobile, and IoT applications. This guide
        *       describes the Cloud Directory operations that you can call programmatically and includes
        *       detailed information on data types and errors. For information about Cloud Directory features, see <a href="https://aws.amazon.com/directoryservice/">AWS Directory
        *         Service</a> and the <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html">Amazon Cloud Directory Developer Guide</a>.</p>
        */
    export class CloudDirectory extends CloudDirectoryClient {
            /**
                * <p>Adds a new <a>Facet</a> to an object. An object can have more than one facet applied on it.</p>
                */
            addFacetToObject(args: AddFacetToObjectCommandInput, options?: __HttpHandlerOptions): Promise<AddFacetToObjectCommandOutput>;
            addFacetToObject(args: AddFacetToObjectCommandInput, cb: (err: any, data?: AddFacetToObjectCommandOutput) => void): void;
            addFacetToObject(args: AddFacetToObjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddFacetToObjectCommandOutput) => void): void;
            /**
                * <p>Copies the input published schema, at the specified version, into the <a>Directory</a> with the same
                *       name and version as that of the published schema.</p>
                */
            applySchema(args: ApplySchemaCommandInput, options?: __HttpHandlerOptions): Promise<ApplySchemaCommandOutput>;
            applySchema(args: ApplySchemaCommandInput, cb: (err: any, data?: ApplySchemaCommandOutput) => void): void;
            applySchema(args: ApplySchemaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ApplySchemaCommandOutput) => void): void;
            /**
                * <p>Attaches an existing object to another object. An object can be accessed in two
                *       ways:</p>
                *          <ol>
                *             <li>
                *                <p>Using the path</p>
                *             </li>
                *             <li>
                *                <p>Using <code>ObjectIdentifier</code>
                *                </p>
                *             </li>
                *          </ol>
                */
            attachObject(args: AttachObjectCommandInput, options?: __HttpHandlerOptions): Promise<AttachObjectCommandOutput>;
            attachObject(args: AttachObjectCommandInput, cb: (err: any, data?: AttachObjectCommandOutput) => void): void;
            attachObject(args: AttachObjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AttachObjectCommandOutput) => void): void;
            /**
                * <p>Attaches a policy object to a regular object. An object can have a limited number of attached
                *       policies.</p>
                */
            attachPolicy(args: AttachPolicyCommandInput, options?: __HttpHandlerOptions): Promise<AttachPolicyCommandOutput>;
            attachPolicy(args: AttachPolicyCommandInput, cb: (err: any, data?: AttachPolicyCommandOutput) => void): void;
            attachPolicy(args: AttachPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AttachPolicyCommandOutput) => void): void;
            /**
                * <p>Attaches the specified object to the specified index.</p>
                */
            attachToIndex(args: AttachToIndexCommandInput, options?: __HttpHandlerOptions): Promise<AttachToIndexCommandOutput>;
            attachToIndex(args: AttachToIndexCommandInput, cb: (err: any, data?: AttachToIndexCommandOutput) => void): void;
            attachToIndex(args: AttachToIndexCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AttachToIndexCommandOutput) => void): void;
            /**
                * <p>Attaches a typed link to a specified source and target object. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
                */
            attachTypedLink(args: AttachTypedLinkCommandInput, options?: __HttpHandlerOptions): Promise<AttachTypedLinkCommandOutput>;
            attachTypedLink(args: AttachTypedLinkCommandInput, cb: (err: any, data?: AttachTypedLinkCommandOutput) => void): void;
            attachTypedLink(args: AttachTypedLinkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AttachTypedLinkCommandOutput) => void): void;
            /**
                * <p>Performs all the read operations in a batch. </p>
                */
            batchRead(args: BatchReadCommandInput, options?: __HttpHandlerOptions): Promise<BatchReadCommandOutput>;
            batchRead(args: BatchReadCommandInput, cb: (err: any, data?: BatchReadCommandOutput) => void): void;
            batchRead(args: BatchReadCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchReadCommandOutput) => void): void;
            /**
                * <p>Performs all the write operations in a batch. Either all the operations succeed or
                *       none.</p>
                */
            batchWrite(args: BatchWriteCommandInput, options?: __HttpHandlerOptions): Promise<BatchWriteCommandOutput>;
            batchWrite(args: BatchWriteCommandInput, cb: (err: any, data?: BatchWriteCommandOutput) => void): void;
            batchWrite(args: BatchWriteCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchWriteCommandOutput) => void): void;
            /**
                * <p>Creates a <a>Directory</a> by copying the published schema into the
                *       directory. A directory cannot be created without a schema.</p>
                *          <p>You can also quickly create a directory using a managed schema, called the
                *         <code>QuickStartSchema</code>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_managed.html">Managed Schema</a> in the <i>Amazon Cloud Directory Developer Guide</i>.</p>
                */
            createDirectory(args: CreateDirectoryCommandInput, options?: __HttpHandlerOptions): Promise<CreateDirectoryCommandOutput>;
            createDirectory(args: CreateDirectoryCommandInput, cb: (err: any, data?: CreateDirectoryCommandOutput) => void): void;
            createDirectory(args: CreateDirectoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDirectoryCommandOutput) => void): void;
            /**
                * <p>Creates a new <a>Facet</a> in a schema. Facet creation is allowed only
                *       in development or applied schemas.</p>
                */
            createFacet(args: CreateFacetCommandInput, options?: __HttpHandlerOptions): Promise<CreateFacetCommandOutput>;
            createFacet(args: CreateFacetCommandInput, cb: (err: any, data?: CreateFacetCommandOutput) => void): void;
            createFacet(args: CreateFacetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateFacetCommandOutput) => void): void;
            /**
                * <p>Creates an index object. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/indexing_search.html">Indexing and search</a> for more information.</p>
                */
            createIndex(args: CreateIndexCommandInput, options?: __HttpHandlerOptions): Promise<CreateIndexCommandOutput>;
            createIndex(args: CreateIndexCommandInput, cb: (err: any, data?: CreateIndexCommandOutput) => void): void;
            createIndex(args: CreateIndexCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateIndexCommandOutput) => void): void;
            /**
                * <p>Creates an object in a <a>Directory</a>. Additionally attaches the object to
                *       a parent, if a parent reference and <code>LinkName</code> is specified. An object is simply a
                *       collection of <a>Facet</a> attributes. You can also use this API call to create a
                *       policy object, if the facet from which you create the object is a policy facet. </p>
                */
            createObject(args: CreateObjectCommandInput, options?: __HttpHandlerOptions): Promise<CreateObjectCommandOutput>;
            createObject(args: CreateObjectCommandInput, cb: (err: any, data?: CreateObjectCommandOutput) => void): void;
            createObject(args: CreateObjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateObjectCommandOutput) => void): void;
            /**
                * <p>Creates a new schema in a development state. A schema can exist in three
                *       phases:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <i>Development:</i> This is a mutable phase of the schema. All new
                *           schemas are in the development phase. Once the schema is finalized, it can be
                *           published.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <i>Published:</i> Published schemas are immutable and have a version
                *           associated with them.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <i>Applied:</i> Applied schemas are mutable in a way that allows you
                *           to add new schema facets. You can also add new, nonrequired attributes to existing schema
                *           facets. You can apply only published schemas to directories. </p>
                *             </li>
                *          </ul>
                */
            createSchema(args: CreateSchemaCommandInput, options?: __HttpHandlerOptions): Promise<CreateSchemaCommandOutput>;
            createSchema(args: CreateSchemaCommandInput, cb: (err: any, data?: CreateSchemaCommandOutput) => void): void;
            createSchema(args: CreateSchemaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSchemaCommandOutput) => void): void;
            /**
                * <p>Creates a <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
                */
            createTypedLinkFacet(args: CreateTypedLinkFacetCommandInput, options?: __HttpHandlerOptions): Promise<CreateTypedLinkFacetCommandOutput>;
            createTypedLinkFacet(args: CreateTypedLinkFacetCommandInput, cb: (err: any, data?: CreateTypedLinkFacetCommandOutput) => void): void;
            createTypedLinkFacet(args: CreateTypedLinkFacetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTypedLinkFacetCommandOutput) => void): void;
            /**
                * <p>Deletes a directory. Only disabled directories can be deleted. A deleted directory cannot be undone. Exercise extreme
                *         caution
                *         when deleting directories.</p>
                */
            deleteDirectory(args: DeleteDirectoryCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDirectoryCommandOutput>;
            deleteDirectory(args: DeleteDirectoryCommandInput, cb: (err: any, data?: DeleteDirectoryCommandOutput) => void): void;
            deleteDirectory(args: DeleteDirectoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDirectoryCommandOutput) => void): void;
            /**
                * <p>Deletes a given <a>Facet</a>. All attributes and <a>Rule</a>s
                *       that are associated with the facet will be deleted. Only development schema facets are allowed
                *       deletion.</p>
                */
            deleteFacet(args: DeleteFacetCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFacetCommandOutput>;
            deleteFacet(args: DeleteFacetCommandInput, cb: (err: any, data?: DeleteFacetCommandOutput) => void): void;
            deleteFacet(args: DeleteFacetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFacetCommandOutput) => void): void;
            /**
                * <p>Deletes an object and its associated attributes. Only objects with no children and no
                *       parents can be deleted. The maximum number of attributes that can be deleted during an object deletion is 30. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/limits.html">Amazon Cloud Directory Limits</a>.</p>
                */
            deleteObject(args: DeleteObjectCommandInput, options?: __HttpHandlerOptions): Promise<DeleteObjectCommandOutput>;
            deleteObject(args: DeleteObjectCommandInput, cb: (err: any, data?: DeleteObjectCommandOutput) => void): void;
            deleteObject(args: DeleteObjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteObjectCommandOutput) => void): void;
            /**
                * <p>Deletes a given schema. Schemas in a development and published state can only be deleted. </p>
                */
            deleteSchema(args: DeleteSchemaCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSchemaCommandOutput>;
            deleteSchema(args: DeleteSchemaCommandInput, cb: (err: any, data?: DeleteSchemaCommandOutput) => void): void;
            deleteSchema(args: DeleteSchemaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSchemaCommandOutput) => void): void;
            /**
                * <p>Deletes a <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
                */
            deleteTypedLinkFacet(args: DeleteTypedLinkFacetCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTypedLinkFacetCommandOutput>;
            deleteTypedLinkFacet(args: DeleteTypedLinkFacetCommandInput, cb: (err: any, data?: DeleteTypedLinkFacetCommandOutput) => void): void;
            deleteTypedLinkFacet(args: DeleteTypedLinkFacetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTypedLinkFacetCommandOutput) => void): void;
            /**
                * <p>Detaches the specified object from the specified index.</p>
                */
            detachFromIndex(args: DetachFromIndexCommandInput, options?: __HttpHandlerOptions): Promise<DetachFromIndexCommandOutput>;
            detachFromIndex(args: DetachFromIndexCommandInput, cb: (err: any, data?: DetachFromIndexCommandOutput) => void): void;
            detachFromIndex(args: DetachFromIndexCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetachFromIndexCommandOutput) => void): void;
            /**
                * <p>Detaches a given object from the parent object. The object that is to be detached from the
                *       parent is specified by the link name.</p>
                */
            detachObject(args: DetachObjectCommandInput, options?: __HttpHandlerOptions): Promise<DetachObjectCommandOutput>;
            detachObject(args: DetachObjectCommandInput, cb: (err: any, data?: DetachObjectCommandOutput) => void): void;
            detachObject(args: DetachObjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetachObjectCommandOutput) => void): void;
            /**
                * <p>Detaches a policy from an object.</p>
                */
            detachPolicy(args: DetachPolicyCommandInput, options?: __HttpHandlerOptions): Promise<DetachPolicyCommandOutput>;
            detachPolicy(args: DetachPolicyCommandInput, cb: (err: any, data?: DetachPolicyCommandOutput) => void): void;
            detachPolicy(args: DetachPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetachPolicyCommandOutput) => void): void;
            /**
                * <p>Detaches a typed link from a specified source and target object. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
                */
            detachTypedLink(args: DetachTypedLinkCommandInput, options?: __HttpHandlerOptions): Promise<DetachTypedLinkCommandOutput>;
            detachTypedLink(args: DetachTypedLinkCommandInput, cb: (err: any, data?: DetachTypedLinkCommandOutput) => void): void;
            detachTypedLink(args: DetachTypedLinkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetachTypedLinkCommandOutput) => void): void;
            /**
                * <p>Disables the specified directory. Disabled directories cannot be read or written to.
                *       Only enabled directories can be disabled. Disabled directories may be reenabled.</p>
                */
            disableDirectory(args: DisableDirectoryCommandInput, options?: __HttpHandlerOptions): Promise<DisableDirectoryCommandOutput>;
            disableDirectory(args: DisableDirectoryCommandInput, cb: (err: any, data?: DisableDirectoryCommandOutput) => void): void;
            disableDirectory(args: DisableDirectoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisableDirectoryCommandOutput) => void): void;
            /**
                * <p>Enables the specified directory. Only disabled directories can be enabled. Once
                *       enabled, the directory can then be read and written to.</p>
                */
            enableDirectory(args: EnableDirectoryCommandInput, options?: __HttpHandlerOptions): Promise<EnableDirectoryCommandOutput>;
            enableDirectory(args: EnableDirectoryCommandInput, cb: (err: any, data?: EnableDirectoryCommandOutput) => void): void;
            enableDirectory(args: EnableDirectoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: EnableDirectoryCommandOutput) => void): void;
            /**
                * <p>Returns current applied schema version ARN, including the minor version in use.</p>
                */
            getAppliedSchemaVersion(args: GetAppliedSchemaVersionCommandInput, options?: __HttpHandlerOptions): Promise<GetAppliedSchemaVersionCommandOutput>;
            getAppliedSchemaVersion(args: GetAppliedSchemaVersionCommandInput, cb: (err: any, data?: GetAppliedSchemaVersionCommandOutput) => void): void;
            getAppliedSchemaVersion(args: GetAppliedSchemaVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAppliedSchemaVersionCommandOutput) => void): void;
            /**
                * <p>Retrieves metadata about a directory.</p>
                */
            getDirectory(args: GetDirectoryCommandInput, options?: __HttpHandlerOptions): Promise<GetDirectoryCommandOutput>;
            getDirectory(args: GetDirectoryCommandInput, cb: (err: any, data?: GetDirectoryCommandOutput) => void): void;
            getDirectory(args: GetDirectoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDirectoryCommandOutput) => void): void;
            /**
                * <p>Gets details of the <a>Facet</a>, such as facet name, attributes, <a>Rule</a>s, or <code>ObjectType</code>. You can call this on all kinds of schema
                *       facets -- published, development, or applied.</p>
                */
            getFacet(args: GetFacetCommandInput, options?: __HttpHandlerOptions): Promise<GetFacetCommandOutput>;
            getFacet(args: GetFacetCommandInput, cb: (err: any, data?: GetFacetCommandOutput) => void): void;
            getFacet(args: GetFacetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetFacetCommandOutput) => void): void;
            /**
                * <p>Retrieves attributes that are associated with a typed link.</p>
                */
            getLinkAttributes(args: GetLinkAttributesCommandInput, options?: __HttpHandlerOptions): Promise<GetLinkAttributesCommandOutput>;
            getLinkAttributes(args: GetLinkAttributesCommandInput, cb: (err: any, data?: GetLinkAttributesCommandOutput) => void): void;
            getLinkAttributes(args: GetLinkAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLinkAttributesCommandOutput) => void): void;
            /**
                * <p>Retrieves attributes within a facet that are associated with an object.</p>
                */
            getObjectAttributes(args: GetObjectAttributesCommandInput, options?: __HttpHandlerOptions): Promise<GetObjectAttributesCommandOutput>;
            getObjectAttributes(args: GetObjectAttributesCommandInput, cb: (err: any, data?: GetObjectAttributesCommandOutput) => void): void;
            getObjectAttributes(args: GetObjectAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetObjectAttributesCommandOutput) => void): void;
            /**
                * <p>Retrieves metadata about an object.</p>
                */
            getObjectInformation(args: GetObjectInformationCommandInput, options?: __HttpHandlerOptions): Promise<GetObjectInformationCommandOutput>;
            getObjectInformation(args: GetObjectInformationCommandInput, cb: (err: any, data?: GetObjectInformationCommandOutput) => void): void;
            getObjectInformation(args: GetObjectInformationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetObjectInformationCommandOutput) => void): void;
            /**
                * <p>Retrieves a JSON representation of the schema. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_jsonformat.html#schemas_json">JSON Schema Format</a> for more information.</p>
                */
            getSchemaAsJson(args: GetSchemaAsJsonCommandInput, options?: __HttpHandlerOptions): Promise<GetSchemaAsJsonCommandOutput>;
            getSchemaAsJson(args: GetSchemaAsJsonCommandInput, cb: (err: any, data?: GetSchemaAsJsonCommandOutput) => void): void;
            getSchemaAsJson(args: GetSchemaAsJsonCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSchemaAsJsonCommandOutput) => void): void;
            /**
                * <p>Returns the identity attribute order for a specific <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
                */
            getTypedLinkFacetInformation(args: GetTypedLinkFacetInformationCommandInput, options?: __HttpHandlerOptions): Promise<GetTypedLinkFacetInformationCommandOutput>;
            getTypedLinkFacetInformation(args: GetTypedLinkFacetInformationCommandInput, cb: (err: any, data?: GetTypedLinkFacetInformationCommandOutput) => void): void;
            getTypedLinkFacetInformation(args: GetTypedLinkFacetInformationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTypedLinkFacetInformationCommandOutput) => void): void;
            /**
                * <p>Lists schema major versions applied to a directory. If <code>SchemaArn</code> is provided, lists the minor version.</p>
                */
            listAppliedSchemaArns(args: ListAppliedSchemaArnsCommandInput, options?: __HttpHandlerOptions): Promise<ListAppliedSchemaArnsCommandOutput>;
            listAppliedSchemaArns(args: ListAppliedSchemaArnsCommandInput, cb: (err: any, data?: ListAppliedSchemaArnsCommandOutput) => void): void;
            listAppliedSchemaArns(args: ListAppliedSchemaArnsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAppliedSchemaArnsCommandOutput) => void): void;
            /**
                * <p>Lists indices attached to the specified object.</p>
                */
            listAttachedIndices(args: ListAttachedIndicesCommandInput, options?: __HttpHandlerOptions): Promise<ListAttachedIndicesCommandOutput>;
            listAttachedIndices(args: ListAttachedIndicesCommandInput, cb: (err: any, data?: ListAttachedIndicesCommandOutput) => void): void;
            listAttachedIndices(args: ListAttachedIndicesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAttachedIndicesCommandOutput) => void): void;
            /**
                * <p>Retrieves each Amazon Resource Name (ARN) of schemas in the development
                *       state.</p>
                */
            listDevelopmentSchemaArns(args: ListDevelopmentSchemaArnsCommandInput, options?: __HttpHandlerOptions): Promise<ListDevelopmentSchemaArnsCommandOutput>;
            listDevelopmentSchemaArns(args: ListDevelopmentSchemaArnsCommandInput, cb: (err: any, data?: ListDevelopmentSchemaArnsCommandOutput) => void): void;
            listDevelopmentSchemaArns(args: ListDevelopmentSchemaArnsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDevelopmentSchemaArnsCommandOutput) => void): void;
            /**
                * <p>Lists directories created within an account.</p>
                */
            listDirectories(args: ListDirectoriesCommandInput, options?: __HttpHandlerOptions): Promise<ListDirectoriesCommandOutput>;
            listDirectories(args: ListDirectoriesCommandInput, cb: (err: any, data?: ListDirectoriesCommandOutput) => void): void;
            listDirectories(args: ListDirectoriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDirectoriesCommandOutput) => void): void;
            /**
                * <p>Retrieves attributes attached to the facet.</p>
                */
            listFacetAttributes(args: ListFacetAttributesCommandInput, options?: __HttpHandlerOptions): Promise<ListFacetAttributesCommandOutput>;
            listFacetAttributes(args: ListFacetAttributesCommandInput, cb: (err: any, data?: ListFacetAttributesCommandOutput) => void): void;
            listFacetAttributes(args: ListFacetAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFacetAttributesCommandOutput) => void): void;
            /**
                * <p>Retrieves the names of facets that exist in a schema.</p>
                */
            listFacetNames(args: ListFacetNamesCommandInput, options?: __HttpHandlerOptions): Promise<ListFacetNamesCommandOutput>;
            listFacetNames(args: ListFacetNamesCommandInput, cb: (err: any, data?: ListFacetNamesCommandOutput) => void): void;
            listFacetNames(args: ListFacetNamesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFacetNamesCommandOutput) => void): void;
            /**
                * <p>Returns a paginated list of all the incoming <a>TypedLinkSpecifier</a>
                *       information for an object. It also supports filtering by typed link facet and identity
                *       attributes. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
                */
            listIncomingTypedLinks(args: ListIncomingTypedLinksCommandInput, options?: __HttpHandlerOptions): Promise<ListIncomingTypedLinksCommandOutput>;
            listIncomingTypedLinks(args: ListIncomingTypedLinksCommandInput, cb: (err: any, data?: ListIncomingTypedLinksCommandOutput) => void): void;
            listIncomingTypedLinks(args: ListIncomingTypedLinksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListIncomingTypedLinksCommandOutput) => void): void;
            /**
                * <p>Lists objects attached to the specified index.</p>
                */
            listIndex(args: ListIndexCommandInput, options?: __HttpHandlerOptions): Promise<ListIndexCommandOutput>;
            listIndex(args: ListIndexCommandInput, cb: (err: any, data?: ListIndexCommandOutput) => void): void;
            listIndex(args: ListIndexCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListIndexCommandOutput) => void): void;
            /**
                * <p>Lists the major version families of each managed schema. If a major version ARN is provided as SchemaArn, the minor version revisions in that family are listed instead.</p>
                */
            listManagedSchemaArns(args: ListManagedSchemaArnsCommandInput, options?: __HttpHandlerOptions): Promise<ListManagedSchemaArnsCommandOutput>;
            listManagedSchemaArns(args: ListManagedSchemaArnsCommandInput, cb: (err: any, data?: ListManagedSchemaArnsCommandOutput) => void): void;
            listManagedSchemaArns(args: ListManagedSchemaArnsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListManagedSchemaArnsCommandOutput) => void): void;
            /**
                * <p>Lists all attributes that are associated with an object.
                *       </p>
                */
            listObjectAttributes(args: ListObjectAttributesCommandInput, options?: __HttpHandlerOptions): Promise<ListObjectAttributesCommandOutput>;
            listObjectAttributes(args: ListObjectAttributesCommandInput, cb: (err: any, data?: ListObjectAttributesCommandOutput) => void): void;
            listObjectAttributes(args: ListObjectAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListObjectAttributesCommandOutput) => void): void;
            /**
                * <p>Returns a paginated list of child objects that are associated with a given
                *       object.</p>
                */
            listObjectChildren(args: ListObjectChildrenCommandInput, options?: __HttpHandlerOptions): Promise<ListObjectChildrenCommandOutput>;
            listObjectChildren(args: ListObjectChildrenCommandInput, cb: (err: any, data?: ListObjectChildrenCommandOutput) => void): void;
            listObjectChildren(args: ListObjectChildrenCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListObjectChildrenCommandOutput) => void): void;
            /**
                * <p>Retrieves all available parent paths for any object type such as node, leaf node,
                *       policy node, and index node objects. For more information about objects, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directorystructure.html">Directory Structure</a>.</p>
                *          <p>Use this API to evaluate all parents for an object. The call returns all objects from
                *       the root of the directory up to the requested object. The API returns the number of paths
                *       based on user-defined <code>MaxResults</code>, in case there are multiple paths to the parent.
                *       The order of the paths and nodes returned is consistent among multiple API calls unless the
                *       objects are deleted or moved. Paths not leading to the directory root are ignored from the
                *       target object.</p>
                */
            listObjectParentPaths(args: ListObjectParentPathsCommandInput, options?: __HttpHandlerOptions): Promise<ListObjectParentPathsCommandOutput>;
            listObjectParentPaths(args: ListObjectParentPathsCommandInput, cb: (err: any, data?: ListObjectParentPathsCommandOutput) => void): void;
            listObjectParentPaths(args: ListObjectParentPathsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListObjectParentPathsCommandOutput) => void): void;
            /**
                * <p>Lists parent objects that are associated with a given object in pagination
                *       fashion.</p>
                */
            listObjectParents(args: ListObjectParentsCommandInput, options?: __HttpHandlerOptions): Promise<ListObjectParentsCommandOutput>;
            listObjectParents(args: ListObjectParentsCommandInput, cb: (err: any, data?: ListObjectParentsCommandOutput) => void): void;
            listObjectParents(args: ListObjectParentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListObjectParentsCommandOutput) => void): void;
            /**
                * <p>Returns policies attached to an object in pagination fashion.</p>
                */
            listObjectPolicies(args: ListObjectPoliciesCommandInput, options?: __HttpHandlerOptions): Promise<ListObjectPoliciesCommandOutput>;
            listObjectPolicies(args: ListObjectPoliciesCommandInput, cb: (err: any, data?: ListObjectPoliciesCommandOutput) => void): void;
            listObjectPolicies(args: ListObjectPoliciesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListObjectPoliciesCommandOutput) => void): void;
            /**
                * <p>Returns a paginated list of all the outgoing <a>TypedLinkSpecifier</a>
                *       information for an object. It also supports filtering by typed link facet and identity
                *       attributes. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
                */
            listOutgoingTypedLinks(args: ListOutgoingTypedLinksCommandInput, options?: __HttpHandlerOptions): Promise<ListOutgoingTypedLinksCommandOutput>;
            listOutgoingTypedLinks(args: ListOutgoingTypedLinksCommandInput, cb: (err: any, data?: ListOutgoingTypedLinksCommandOutput) => void): void;
            listOutgoingTypedLinks(args: ListOutgoingTypedLinksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListOutgoingTypedLinksCommandOutput) => void): void;
            /**
                * <p>Returns all of the <code>ObjectIdentifiers</code> to which a given policy is attached.</p>
                */
            listPolicyAttachments(args: ListPolicyAttachmentsCommandInput, options?: __HttpHandlerOptions): Promise<ListPolicyAttachmentsCommandOutput>;
            listPolicyAttachments(args: ListPolicyAttachmentsCommandInput, cb: (err: any, data?: ListPolicyAttachmentsCommandOutput) => void): void;
            listPolicyAttachments(args: ListPolicyAttachmentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPolicyAttachmentsCommandOutput) => void): void;
            /**
                * <p>Lists the major version families of each published schema. If a major version ARN is provided as <code>SchemaArn</code>, the minor version revisions in that family are listed instead.</p>
                */
            listPublishedSchemaArns(args: ListPublishedSchemaArnsCommandInput, options?: __HttpHandlerOptions): Promise<ListPublishedSchemaArnsCommandOutput>;
            listPublishedSchemaArns(args: ListPublishedSchemaArnsCommandInput, cb: (err: any, data?: ListPublishedSchemaArnsCommandOutput) => void): void;
            listPublishedSchemaArns(args: ListPublishedSchemaArnsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPublishedSchemaArnsCommandOutput) => void): void;
            /**
                * <p>Returns tags for a resource. Tagging is currently supported only for directories with a
                *       limit of 50 tags per directory. All 50 tags are returned for a given directory with this API
                *       call.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Returns a paginated list of all attribute definitions for a particular <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
                */
            listTypedLinkFacetAttributes(args: ListTypedLinkFacetAttributesCommandInput, options?: __HttpHandlerOptions): Promise<ListTypedLinkFacetAttributesCommandOutput>;
            listTypedLinkFacetAttributes(args: ListTypedLinkFacetAttributesCommandInput, cb: (err: any, data?: ListTypedLinkFacetAttributesCommandOutput) => void): void;
            listTypedLinkFacetAttributes(args: ListTypedLinkFacetAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTypedLinkFacetAttributesCommandOutput) => void): void;
            /**
                * <p>Returns a paginated list of <code>TypedLink</code> facet names for a particular schema.
                *       For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
                */
            listTypedLinkFacetNames(args: ListTypedLinkFacetNamesCommandInput, options?: __HttpHandlerOptions): Promise<ListTypedLinkFacetNamesCommandOutput>;
            listTypedLinkFacetNames(args: ListTypedLinkFacetNamesCommandInput, cb: (err: any, data?: ListTypedLinkFacetNamesCommandOutput) => void): void;
            listTypedLinkFacetNames(args: ListTypedLinkFacetNamesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTypedLinkFacetNamesCommandOutput) => void): void;
            /**
                * <p>Lists all policies from the root of the <a>Directory</a> to the object
                *       specified. If there are no policies present, an empty list is returned. If policies are
                *       present, and if some objects don't have the policies attached, it returns the <code>ObjectIdentifier</code>
                *       for such objects. If policies are present, it returns <code>ObjectIdentifier</code>, <code>policyId</code>, and
                *       <code>policyType</code>. Paths that don't lead to the root from the target object are ignored. For more
                *       information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies">Policies</a>.</p>
                */
            lookupPolicy(args: LookupPolicyCommandInput, options?: __HttpHandlerOptions): Promise<LookupPolicyCommandOutput>;
            lookupPolicy(args: LookupPolicyCommandInput, cb: (err: any, data?: LookupPolicyCommandOutput) => void): void;
            lookupPolicy(args: LookupPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: LookupPolicyCommandOutput) => void): void;
            /**
                * <p>Publishes a development schema with a major version and a recommended minor version.</p>
                */
            publishSchema(args: PublishSchemaCommandInput, options?: __HttpHandlerOptions): Promise<PublishSchemaCommandOutput>;
            publishSchema(args: PublishSchemaCommandInput, cb: (err: any, data?: PublishSchemaCommandOutput) => void): void;
            publishSchema(args: PublishSchemaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PublishSchemaCommandOutput) => void): void;
            /**
                * <p>Allows a schema to be updated using JSON upload. Only available for development schemas. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_jsonformat.html#schemas_json">JSON Schema Format</a> for more information.</p>
                */
            putSchemaFromJson(args: PutSchemaFromJsonCommandInput, options?: __HttpHandlerOptions): Promise<PutSchemaFromJsonCommandOutput>;
            putSchemaFromJson(args: PutSchemaFromJsonCommandInput, cb: (err: any, data?: PutSchemaFromJsonCommandOutput) => void): void;
            putSchemaFromJson(args: PutSchemaFromJsonCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutSchemaFromJsonCommandOutput) => void): void;
            /**
                * <p>Removes the specified facet from the specified object.</p>
                */
            removeFacetFromObject(args: RemoveFacetFromObjectCommandInput, options?: __HttpHandlerOptions): Promise<RemoveFacetFromObjectCommandOutput>;
            removeFacetFromObject(args: RemoveFacetFromObjectCommandInput, cb: (err: any, data?: RemoveFacetFromObjectCommandOutput) => void): void;
            removeFacetFromObject(args: RemoveFacetFromObjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveFacetFromObjectCommandOutput) => void): void;
            /**
                * <p>An API operation for adding tags to a resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>An API operation for removing tags from a resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Does the following:</p>
                *          <ol>
                *             <li>
                *                <p>Adds new <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p>
                *             </li>
                *             <li>
                *                <p>Updates existing <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p>
                *             </li>
                *             <li>
                *                <p>Deletes existing <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p>
                *             </li>
                *          </ol>
                */
            updateFacet(args: UpdateFacetCommandInput, options?: __HttpHandlerOptions): Promise<UpdateFacetCommandOutput>;
            updateFacet(args: UpdateFacetCommandInput, cb: (err: any, data?: UpdateFacetCommandOutput) => void): void;
            updateFacet(args: UpdateFacetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateFacetCommandOutput) => void): void;
            /**
                * <p>Updates a given typed link’s attributes. Attributes to be updated must not contribute to the typed link’s identity, as defined by its <code>IdentityAttributeOrder</code>.</p>
                */
            updateLinkAttributes(args: UpdateLinkAttributesCommandInput, options?: __HttpHandlerOptions): Promise<UpdateLinkAttributesCommandOutput>;
            updateLinkAttributes(args: UpdateLinkAttributesCommandInput, cb: (err: any, data?: UpdateLinkAttributesCommandOutput) => void): void;
            updateLinkAttributes(args: UpdateLinkAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateLinkAttributesCommandOutput) => void): void;
            /**
                * <p>Updates a given object's attributes.</p>
                */
            updateObjectAttributes(args: UpdateObjectAttributesCommandInput, options?: __HttpHandlerOptions): Promise<UpdateObjectAttributesCommandOutput>;
            updateObjectAttributes(args: UpdateObjectAttributesCommandInput, cb: (err: any, data?: UpdateObjectAttributesCommandOutput) => void): void;
            updateObjectAttributes(args: UpdateObjectAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateObjectAttributesCommandOutput) => void): void;
            /**
                * <p>Updates the schema name with a new name. Only development schema names can be
                *       updated.</p>
                */
            updateSchema(args: UpdateSchemaCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSchemaCommandOutput>;
            updateSchema(args: UpdateSchemaCommandInput, cb: (err: any, data?: UpdateSchemaCommandOutput) => void): void;
            updateSchema(args: UpdateSchemaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSchemaCommandOutput) => void): void;
            /**
                * <p>Updates a <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
                */
            updateTypedLinkFacet(args: UpdateTypedLinkFacetCommandInput, options?: __HttpHandlerOptions): Promise<UpdateTypedLinkFacetCommandOutput>;
            updateTypedLinkFacet(args: UpdateTypedLinkFacetCommandInput, cb: (err: any, data?: UpdateTypedLinkFacetCommandOutput) => void): void;
            updateTypedLinkFacet(args: UpdateTypedLinkFacetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateTypedLinkFacetCommandOutput) => void): void;
            /**
                * <p>Upgrades a single directory in-place using the <code>PublishedSchemaArn</code> with schema updates found in <code>MinorVersion</code>. Backwards-compatible minor version upgrades are instantaneously available for readers on all objects in the directory. Note: This is a synchronous API call and upgrades only one schema on a given directory per call. To upgrade multiple directories from one schema, you would need to call this API on each directory.</p>
                */
            upgradeAppliedSchema(args: UpgradeAppliedSchemaCommandInput, options?: __HttpHandlerOptions): Promise<UpgradeAppliedSchemaCommandOutput>;
            upgradeAppliedSchema(args: UpgradeAppliedSchemaCommandInput, cb: (err: any, data?: UpgradeAppliedSchemaCommandOutput) => void): void;
            upgradeAppliedSchema(args: UpgradeAppliedSchemaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpgradeAppliedSchemaCommandOutput) => void): void;
            /**
                * <p>Upgrades a published schema under a new minor version revision using the current contents of <code>DevelopmentSchemaArn</code>.</p>
                */
            upgradePublishedSchema(args: UpgradePublishedSchemaCommandInput, options?: __HttpHandlerOptions): Promise<UpgradePublishedSchemaCommandOutput>;
            upgradePublishedSchema(args: UpgradePublishedSchemaCommandInput, cb: (err: any, data?: UpgradePublishedSchemaCommandOutput) => void): void;
            upgradePublishedSchema(args: UpgradePublishedSchemaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpgradePublishedSchemaCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AddFacetToObjectCommandInput, AddFacetToObjectCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/AddFacetToObjectCommand";
    import { ApplySchemaCommandInput, ApplySchemaCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ApplySchemaCommand";
    import { AttachObjectCommandInput, AttachObjectCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/AttachObjectCommand";
    import { AttachPolicyCommandInput, AttachPolicyCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/AttachPolicyCommand";
    import { AttachToIndexCommandInput, AttachToIndexCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/AttachToIndexCommand";
    import { AttachTypedLinkCommandInput, AttachTypedLinkCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/AttachTypedLinkCommand";
    import { BatchReadCommandInput, BatchReadCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/BatchReadCommand";
    import { BatchWriteCommandInput, BatchWriteCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/BatchWriteCommand";
    import { CreateDirectoryCommandInput, CreateDirectoryCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/CreateDirectoryCommand";
    import { CreateFacetCommandInput, CreateFacetCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/CreateFacetCommand";
    import { CreateIndexCommandInput, CreateIndexCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/CreateIndexCommand";
    import { CreateObjectCommandInput, CreateObjectCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/CreateObjectCommand";
    import { CreateSchemaCommandInput, CreateSchemaCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/CreateSchemaCommand";
    import { CreateTypedLinkFacetCommandInput, CreateTypedLinkFacetCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/CreateTypedLinkFacetCommand";
    import { DeleteDirectoryCommandInput, DeleteDirectoryCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DeleteDirectoryCommand";
    import { DeleteFacetCommandInput, DeleteFacetCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DeleteFacetCommand";
    import { DeleteObjectCommandInput, DeleteObjectCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DeleteObjectCommand";
    import { DeleteSchemaCommandInput, DeleteSchemaCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DeleteSchemaCommand";
    import { DeleteTypedLinkFacetCommandInput, DeleteTypedLinkFacetCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DeleteTypedLinkFacetCommand";
    import { DetachFromIndexCommandInput, DetachFromIndexCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DetachFromIndexCommand";
    import { DetachObjectCommandInput, DetachObjectCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DetachObjectCommand";
    import { DetachPolicyCommandInput, DetachPolicyCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DetachPolicyCommand";
    import { DetachTypedLinkCommandInput, DetachTypedLinkCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DetachTypedLinkCommand";
    import { DisableDirectoryCommandInput, DisableDirectoryCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DisableDirectoryCommand";
    import { EnableDirectoryCommandInput, EnableDirectoryCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/EnableDirectoryCommand";
    import { GetAppliedSchemaVersionCommandInput, GetAppliedSchemaVersionCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetAppliedSchemaVersionCommand";
    import { GetDirectoryCommandInput, GetDirectoryCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetDirectoryCommand";
    import { GetFacetCommandInput, GetFacetCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetFacetCommand";
    import { GetLinkAttributesCommandInput, GetLinkAttributesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetLinkAttributesCommand";
    import { GetObjectAttributesCommandInput, GetObjectAttributesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetObjectAttributesCommand";
    import { GetObjectInformationCommandInput, GetObjectInformationCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetObjectInformationCommand";
    import { GetSchemaAsJsonCommandInput, GetSchemaAsJsonCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetSchemaAsJsonCommand";
    import { GetTypedLinkFacetInformationCommandInput, GetTypedLinkFacetInformationCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetTypedLinkFacetInformationCommand";
    import { ListAppliedSchemaArnsCommandInput, ListAppliedSchemaArnsCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListAppliedSchemaArnsCommand";
    import { ListAttachedIndicesCommandInput, ListAttachedIndicesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListAttachedIndicesCommand";
    import { ListDevelopmentSchemaArnsCommandInput, ListDevelopmentSchemaArnsCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListDevelopmentSchemaArnsCommand";
    import { ListDirectoriesCommandInput, ListDirectoriesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListDirectoriesCommand";
    import { ListFacetAttributesCommandInput, ListFacetAttributesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListFacetAttributesCommand";
    import { ListFacetNamesCommandInput, ListFacetNamesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListFacetNamesCommand";
    import { ListIncomingTypedLinksCommandInput, ListIncomingTypedLinksCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListIncomingTypedLinksCommand";
    import { ListIndexCommandInput, ListIndexCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListIndexCommand";
    import { ListManagedSchemaArnsCommandInput, ListManagedSchemaArnsCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListManagedSchemaArnsCommand";
    import { ListObjectAttributesCommandInput, ListObjectAttributesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListObjectAttributesCommand";
    import { ListObjectChildrenCommandInput, ListObjectChildrenCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListObjectChildrenCommand";
    import { ListObjectParentPathsCommandInput, ListObjectParentPathsCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListObjectParentPathsCommand";
    import { ListObjectParentsCommandInput, ListObjectParentsCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListObjectParentsCommand";
    import { ListObjectPoliciesCommandInput, ListObjectPoliciesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListObjectPoliciesCommand";
    import { ListOutgoingTypedLinksCommandInput, ListOutgoingTypedLinksCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListOutgoingTypedLinksCommand";
    import { ListPolicyAttachmentsCommandInput, ListPolicyAttachmentsCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListPolicyAttachmentsCommand";
    import { ListPublishedSchemaArnsCommandInput, ListPublishedSchemaArnsCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListPublishedSchemaArnsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListTagsForResourceCommand";
    import { ListTypedLinkFacetAttributesCommandInput, ListTypedLinkFacetAttributesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListTypedLinkFacetAttributesCommand";
    import { ListTypedLinkFacetNamesCommandInput, ListTypedLinkFacetNamesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListTypedLinkFacetNamesCommand";
    import { LookupPolicyCommandInput, LookupPolicyCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/LookupPolicyCommand";
    import { PublishSchemaCommandInput, PublishSchemaCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/PublishSchemaCommand";
    import { PutSchemaFromJsonCommandInput, PutSchemaFromJsonCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/PutSchemaFromJsonCommand";
    import { RemoveFacetFromObjectCommandInput, RemoveFacetFromObjectCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/RemoveFacetFromObjectCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UntagResourceCommand";
    import { UpdateFacetCommandInput, UpdateFacetCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UpdateFacetCommand";
    import { UpdateLinkAttributesCommandInput, UpdateLinkAttributesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UpdateLinkAttributesCommand";
    import { UpdateObjectAttributesCommandInput, UpdateObjectAttributesCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UpdateObjectAttributesCommand";
    import { UpdateSchemaCommandInput, UpdateSchemaCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UpdateSchemaCommand";
    import { UpdateTypedLinkFacetCommandInput, UpdateTypedLinkFacetCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UpdateTypedLinkFacetCommand";
    import { UpgradeAppliedSchemaCommandInput, UpgradeAppliedSchemaCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UpgradeAppliedSchemaCommand";
    import { UpgradePublishedSchemaCommandInput, UpgradePublishedSchemaCommandOutput } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UpgradePublishedSchemaCommand";
    export type ServiceInputTypes = AddFacetToObjectCommandInput | ApplySchemaCommandInput | AttachObjectCommandInput | AttachPolicyCommandInput | AttachToIndexCommandInput | AttachTypedLinkCommandInput | BatchReadCommandInput | BatchWriteCommandInput | CreateDirectoryCommandInput | CreateFacetCommandInput | CreateIndexCommandInput | CreateObjectCommandInput | CreateSchemaCommandInput | CreateTypedLinkFacetCommandInput | DeleteDirectoryCommandInput | DeleteFacetCommandInput | DeleteObjectCommandInput | DeleteSchemaCommandInput | DeleteTypedLinkFacetCommandInput | DetachFromIndexCommandInput | DetachObjectCommandInput | DetachPolicyCommandInput | DetachTypedLinkCommandInput | DisableDirectoryCommandInput | EnableDirectoryCommandInput | GetAppliedSchemaVersionCommandInput | GetDirectoryCommandInput | GetFacetCommandInput | GetLinkAttributesCommandInput | GetObjectAttributesCommandInput | GetObjectInformationCommandInput | GetSchemaAsJsonCommandInput | GetTypedLinkFacetInformationCommandInput | ListAppliedSchemaArnsCommandInput | ListAttachedIndicesCommandInput | ListDevelopmentSchemaArnsCommandInput | ListDirectoriesCommandInput | ListFacetAttributesCommandInput | ListFacetNamesCommandInput | ListIncomingTypedLinksCommandInput | ListIndexCommandInput | ListManagedSchemaArnsCommandInput | ListObjectAttributesCommandInput | ListObjectChildrenCommandInput | ListObjectParentPathsCommandInput | ListObjectParentsCommandInput | ListObjectPoliciesCommandInput | ListOutgoingTypedLinksCommandInput | ListPolicyAttachmentsCommandInput | ListPublishedSchemaArnsCommandInput | ListTagsForResourceCommandInput | ListTypedLinkFacetAttributesCommandInput | ListTypedLinkFacetNamesCommandInput | LookupPolicyCommandInput | PublishSchemaCommandInput | PutSchemaFromJsonCommandInput | RemoveFacetFromObjectCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateFacetCommandInput | UpdateLinkAttributesCommandInput | UpdateObjectAttributesCommandInput | UpdateSchemaCommandInput | UpdateTypedLinkFacetCommandInput | UpgradeAppliedSchemaCommandInput | UpgradePublishedSchemaCommandInput;
    export type ServiceOutputTypes = AddFacetToObjectCommandOutput | ApplySchemaCommandOutput | AttachObjectCommandOutput | AttachPolicyCommandOutput | AttachToIndexCommandOutput | AttachTypedLinkCommandOutput | BatchReadCommandOutput | BatchWriteCommandOutput | CreateDirectoryCommandOutput | CreateFacetCommandOutput | CreateIndexCommandOutput | CreateObjectCommandOutput | CreateSchemaCommandOutput | CreateTypedLinkFacetCommandOutput | DeleteDirectoryCommandOutput | DeleteFacetCommandOutput | DeleteObjectCommandOutput | DeleteSchemaCommandOutput | DeleteTypedLinkFacetCommandOutput | DetachFromIndexCommandOutput | DetachObjectCommandOutput | DetachPolicyCommandOutput | DetachTypedLinkCommandOutput | DisableDirectoryCommandOutput | EnableDirectoryCommandOutput | GetAppliedSchemaVersionCommandOutput | GetDirectoryCommandOutput | GetFacetCommandOutput | GetLinkAttributesCommandOutput | GetObjectAttributesCommandOutput | GetObjectInformationCommandOutput | GetSchemaAsJsonCommandOutput | GetTypedLinkFacetInformationCommandOutput | ListAppliedSchemaArnsCommandOutput | ListAttachedIndicesCommandOutput | ListDevelopmentSchemaArnsCommandOutput | ListDirectoriesCommandOutput | ListFacetAttributesCommandOutput | ListFacetNamesCommandOutput | ListIncomingTypedLinksCommandOutput | ListIndexCommandOutput | ListManagedSchemaArnsCommandOutput | ListObjectAttributesCommandOutput | ListObjectChildrenCommandOutput | ListObjectParentPathsCommandOutput | ListObjectParentsCommandOutput | ListObjectPoliciesCommandOutput | ListOutgoingTypedLinksCommandOutput | ListPolicyAttachmentsCommandOutput | ListPublishedSchemaArnsCommandOutput | ListTagsForResourceCommandOutput | ListTypedLinkFacetAttributesCommandOutput | ListTypedLinkFacetNamesCommandOutput | LookupPolicyCommandOutput | PublishSchemaCommandOutput | PutSchemaFromJsonCommandOutput | RemoveFacetFromObjectCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateFacetCommandOutput | UpdateLinkAttributesCommandOutput | UpdateObjectAttributesCommandOutput | UpdateSchemaCommandOutput | UpdateTypedLinkFacetCommandOutput | UpgradeAppliedSchemaCommandOutput | UpgradePublishedSchemaCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type CloudDirectoryClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of CloudDirectoryClient class constructor that set the region, credentials and other options.
        */
    export interface CloudDirectoryClientConfig extends CloudDirectoryClientConfigType {
    }
    type CloudDirectoryClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of CloudDirectoryClient class. This is resolved and normalized from the {@link CloudDirectoryClientConfig | constructor configuration interface}.
        */
    export interface CloudDirectoryClientResolvedConfig extends CloudDirectoryClientResolvedConfigType {
    }
    /**
        * <fullname>Amazon Cloud Directory</fullname>
        *          <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the
        *       development and management of cloud-scale web, mobile, and IoT applications. This guide
        *       describes the Cloud Directory operations that you can call programmatically and includes
        *       detailed information on data types and errors. For information about Cloud Directory features, see <a href="https://aws.amazon.com/directoryservice/">AWS Directory
        *         Service</a> and the <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html">Amazon Cloud Directory Developer Guide</a>.</p>
        */
    export class CloudDirectoryClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, CloudDirectoryClientResolvedConfig> {
            /**
                * The resolved configuration of CloudDirectoryClient class. This is resolved and normalized from the {@link CloudDirectoryClientConfig | constructor configuration interface}.
                */
            readonly config: CloudDirectoryClientResolvedConfig;
            constructor(configuration: CloudDirectoryClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/AddFacetToObjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { AddFacetToObjectRequest, AddFacetToObjectResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface AddFacetToObjectCommandInput extends AddFacetToObjectRequest {
    }
    export interface AddFacetToObjectCommandOutput extends AddFacetToObjectResponse, __MetadataBearer {
    }
    /**
        * <p>Adds a new <a>Facet</a> to an object. An object can have more than one facet applied on it.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, AddFacetToObjectCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, AddFacetToObjectCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new AddFacetToObjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddFacetToObjectCommandInput} for command's `input` shape.
        * @see {@link AddFacetToObjectCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class AddFacetToObjectCommand extends $Command<AddFacetToObjectCommandInput, AddFacetToObjectCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: AddFacetToObjectCommandInput;
            constructor(input: AddFacetToObjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddFacetToObjectCommandInput, AddFacetToObjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ApplySchemaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { ApplySchemaRequest, ApplySchemaResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface ApplySchemaCommandInput extends ApplySchemaRequest {
    }
    export interface ApplySchemaCommandOutput extends ApplySchemaResponse, __MetadataBearer {
    }
    /**
        * <p>Copies the input published schema, at the specified version, into the <a>Directory</a> with the same
        *       name and version as that of the published schema.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, ApplySchemaCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, ApplySchemaCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new ApplySchemaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ApplySchemaCommandInput} for command's `input` shape.
        * @see {@link ApplySchemaCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class ApplySchemaCommand extends $Command<ApplySchemaCommandInput, ApplySchemaCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: ApplySchemaCommandInput;
            constructor(input: ApplySchemaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ApplySchemaCommandInput, ApplySchemaCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/AttachObjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { AttachObjectRequest, AttachObjectResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface AttachObjectCommandInput extends AttachObjectRequest {
    }
    export interface AttachObjectCommandOutput extends AttachObjectResponse, __MetadataBearer {
    }
    /**
        * <p>Attaches an existing object to another object. An object can be accessed in two
        *       ways:</p>
        *          <ol>
        *             <li>
        *                <p>Using the path</p>
        *             </li>
        *             <li>
        *                <p>Using <code>ObjectIdentifier</code>
        *                </p>
        *             </li>
        *          </ol>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, AttachObjectCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, AttachObjectCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new AttachObjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AttachObjectCommandInput} for command's `input` shape.
        * @see {@link AttachObjectCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class AttachObjectCommand extends $Command<AttachObjectCommandInput, AttachObjectCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: AttachObjectCommandInput;
            constructor(input: AttachObjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AttachObjectCommandInput, AttachObjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/AttachPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { AttachPolicyRequest, AttachPolicyResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface AttachPolicyCommandInput extends AttachPolicyRequest {
    }
    export interface AttachPolicyCommandOutput extends AttachPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Attaches a policy object to a regular object. An object can have a limited number of attached
        *       policies.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, AttachPolicyCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, AttachPolicyCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new AttachPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AttachPolicyCommandInput} for command's `input` shape.
        * @see {@link AttachPolicyCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class AttachPolicyCommand extends $Command<AttachPolicyCommandInput, AttachPolicyCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: AttachPolicyCommandInput;
            constructor(input: AttachPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AttachPolicyCommandInput, AttachPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/AttachToIndexCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { AttachToIndexRequest, AttachToIndexResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface AttachToIndexCommandInput extends AttachToIndexRequest {
    }
    export interface AttachToIndexCommandOutput extends AttachToIndexResponse, __MetadataBearer {
    }
    /**
        * <p>Attaches the specified object to the specified index.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, AttachToIndexCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, AttachToIndexCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new AttachToIndexCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AttachToIndexCommandInput} for command's `input` shape.
        * @see {@link AttachToIndexCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class AttachToIndexCommand extends $Command<AttachToIndexCommandInput, AttachToIndexCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: AttachToIndexCommandInput;
            constructor(input: AttachToIndexCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AttachToIndexCommandInput, AttachToIndexCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/AttachTypedLinkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { AttachTypedLinkRequest, AttachTypedLinkResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface AttachTypedLinkCommandInput extends AttachTypedLinkRequest {
    }
    export interface AttachTypedLinkCommandOutput extends AttachTypedLinkResponse, __MetadataBearer {
    }
    /**
        * <p>Attaches a typed link to a specified source and target object. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, AttachTypedLinkCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, AttachTypedLinkCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new AttachTypedLinkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AttachTypedLinkCommandInput} for command's `input` shape.
        * @see {@link AttachTypedLinkCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class AttachTypedLinkCommand extends $Command<AttachTypedLinkCommandInput, AttachTypedLinkCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: AttachTypedLinkCommandInput;
            constructor(input: AttachTypedLinkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AttachTypedLinkCommandInput, AttachTypedLinkCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/BatchReadCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { BatchReadRequest, BatchReadResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface BatchReadCommandInput extends BatchReadRequest {
    }
    export interface BatchReadCommandOutput extends BatchReadResponse, __MetadataBearer {
    }
    /**
        * <p>Performs all the read operations in a batch. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, BatchReadCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, BatchReadCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new BatchReadCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchReadCommandInput} for command's `input` shape.
        * @see {@link BatchReadCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class BatchReadCommand extends $Command<BatchReadCommandInput, BatchReadCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: BatchReadCommandInput;
            constructor(input: BatchReadCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchReadCommandInput, BatchReadCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/BatchWriteCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { BatchWriteRequest, BatchWriteResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface BatchWriteCommandInput extends BatchWriteRequest {
    }
    export interface BatchWriteCommandOutput extends BatchWriteResponse, __MetadataBearer {
    }
    /**
        * <p>Performs all the write operations in a batch. Either all the operations succeed or
        *       none.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, BatchWriteCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, BatchWriteCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new BatchWriteCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchWriteCommandInput} for command's `input` shape.
        * @see {@link BatchWriteCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class BatchWriteCommand extends $Command<BatchWriteCommandInput, BatchWriteCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: BatchWriteCommandInput;
            constructor(input: BatchWriteCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchWriteCommandInput, BatchWriteCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/CreateDirectoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { CreateDirectoryRequest, CreateDirectoryResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface CreateDirectoryCommandInput extends CreateDirectoryRequest {
    }
    export interface CreateDirectoryCommandOutput extends CreateDirectoryResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a <a>Directory</a> by copying the published schema into the
        *       directory. A directory cannot be created without a schema.</p>
        *          <p>You can also quickly create a directory using a managed schema, called the
        *         <code>QuickStartSchema</code>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_managed.html">Managed Schema</a> in the <i>Amazon Cloud Directory Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, CreateDirectoryCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, CreateDirectoryCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new CreateDirectoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDirectoryCommandInput} for command's `input` shape.
        * @see {@link CreateDirectoryCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class CreateDirectoryCommand extends $Command<CreateDirectoryCommandInput, CreateDirectoryCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: CreateDirectoryCommandInput;
            constructor(input: CreateDirectoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDirectoryCommandInput, CreateDirectoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/CreateFacetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { CreateFacetRequest, CreateFacetResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface CreateFacetCommandInput extends CreateFacetRequest {
    }
    export interface CreateFacetCommandOutput extends CreateFacetResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new <a>Facet</a> in a schema. Facet creation is allowed only
        *       in development or applied schemas.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, CreateFacetCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, CreateFacetCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new CreateFacetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateFacetCommandInput} for command's `input` shape.
        * @see {@link CreateFacetCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class CreateFacetCommand extends $Command<CreateFacetCommandInput, CreateFacetCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: CreateFacetCommandInput;
            constructor(input: CreateFacetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateFacetCommandInput, CreateFacetCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/CreateIndexCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { CreateIndexRequest, CreateIndexResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface CreateIndexCommandInput extends CreateIndexRequest {
    }
    export interface CreateIndexCommandOutput extends CreateIndexResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an index object. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/indexing_search.html">Indexing and search</a> for more information.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, CreateIndexCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, CreateIndexCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new CreateIndexCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateIndexCommandInput} for command's `input` shape.
        * @see {@link CreateIndexCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class CreateIndexCommand extends $Command<CreateIndexCommandInput, CreateIndexCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: CreateIndexCommandInput;
            constructor(input: CreateIndexCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateIndexCommandInput, CreateIndexCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/CreateObjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { CreateObjectRequest, CreateObjectResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface CreateObjectCommandInput extends CreateObjectRequest {
    }
    export interface CreateObjectCommandOutput extends CreateObjectResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an object in a <a>Directory</a>. Additionally attaches the object to
        *       a parent, if a parent reference and <code>LinkName</code> is specified. An object is simply a
        *       collection of <a>Facet</a> attributes. You can also use this API call to create a
        *       policy object, if the facet from which you create the object is a policy facet. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, CreateObjectCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, CreateObjectCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new CreateObjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateObjectCommandInput} for command's `input` shape.
        * @see {@link CreateObjectCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class CreateObjectCommand extends $Command<CreateObjectCommandInput, CreateObjectCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: CreateObjectCommandInput;
            constructor(input: CreateObjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateObjectCommandInput, CreateObjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/CreateSchemaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { CreateSchemaRequest, CreateSchemaResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface CreateSchemaCommandInput extends CreateSchemaRequest {
    }
    export interface CreateSchemaCommandOutput extends CreateSchemaResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new schema in a development state. A schema can exist in three
        *       phases:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <i>Development:</i> This is a mutable phase of the schema. All new
        *           schemas are in the development phase. Once the schema is finalized, it can be
        *           published.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <i>Published:</i> Published schemas are immutable and have a version
        *           associated with them.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <i>Applied:</i> Applied schemas are mutable in a way that allows you
        *           to add new schema facets. You can also add new, nonrequired attributes to existing schema
        *           facets. You can apply only published schemas to directories. </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, CreateSchemaCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, CreateSchemaCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new CreateSchemaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSchemaCommandInput} for command's `input` shape.
        * @see {@link CreateSchemaCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class CreateSchemaCommand extends $Command<CreateSchemaCommandInput, CreateSchemaCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: CreateSchemaCommandInput;
            constructor(input: CreateSchemaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSchemaCommandInput, CreateSchemaCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/CreateTypedLinkFacetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { CreateTypedLinkFacetRequest, CreateTypedLinkFacetResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface CreateTypedLinkFacetCommandInput extends CreateTypedLinkFacetRequest {
    }
    export interface CreateTypedLinkFacetCommandOutput extends CreateTypedLinkFacetResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, CreateTypedLinkFacetCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, CreateTypedLinkFacetCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new CreateTypedLinkFacetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateTypedLinkFacetCommandInput} for command's `input` shape.
        * @see {@link CreateTypedLinkFacetCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class CreateTypedLinkFacetCommand extends $Command<CreateTypedLinkFacetCommandInput, CreateTypedLinkFacetCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: CreateTypedLinkFacetCommandInput;
            constructor(input: CreateTypedLinkFacetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateTypedLinkFacetCommandInput, CreateTypedLinkFacetCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DeleteDirectoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { DeleteDirectoryRequest, DeleteDirectoryResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface DeleteDirectoryCommandInput extends DeleteDirectoryRequest {
    }
    export interface DeleteDirectoryCommandOutput extends DeleteDirectoryResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a directory. Only disabled directories can be deleted. A deleted directory cannot be undone. Exercise extreme
        *         caution
        *         when deleting directories.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, DeleteDirectoryCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, DeleteDirectoryCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new DeleteDirectoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDirectoryCommandInput} for command's `input` shape.
        * @see {@link DeleteDirectoryCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class DeleteDirectoryCommand extends $Command<DeleteDirectoryCommandInput, DeleteDirectoryCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: DeleteDirectoryCommandInput;
            constructor(input: DeleteDirectoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDirectoryCommandInput, DeleteDirectoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DeleteFacetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { DeleteFacetRequest, DeleteFacetResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface DeleteFacetCommandInput extends DeleteFacetRequest {
    }
    export interface DeleteFacetCommandOutput extends DeleteFacetResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a given <a>Facet</a>. All attributes and <a>Rule</a>s
        *       that are associated with the facet will be deleted. Only development schema facets are allowed
        *       deletion.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, DeleteFacetCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, DeleteFacetCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new DeleteFacetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFacetCommandInput} for command's `input` shape.
        * @see {@link DeleteFacetCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class DeleteFacetCommand extends $Command<DeleteFacetCommandInput, DeleteFacetCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: DeleteFacetCommandInput;
            constructor(input: DeleteFacetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFacetCommandInput, DeleteFacetCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DeleteObjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { DeleteObjectRequest, DeleteObjectResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface DeleteObjectCommandInput extends DeleteObjectRequest {
    }
    export interface DeleteObjectCommandOutput extends DeleteObjectResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an object and its associated attributes. Only objects with no children and no
        *       parents can be deleted. The maximum number of attributes that can be deleted during an object deletion is 30. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/limits.html">Amazon Cloud Directory Limits</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, DeleteObjectCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, DeleteObjectCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new DeleteObjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteObjectCommandInput} for command's `input` shape.
        * @see {@link DeleteObjectCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class DeleteObjectCommand extends $Command<DeleteObjectCommandInput, DeleteObjectCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: DeleteObjectCommandInput;
            constructor(input: DeleteObjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteObjectCommandInput, DeleteObjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DeleteSchemaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { DeleteSchemaRequest, DeleteSchemaResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface DeleteSchemaCommandInput extends DeleteSchemaRequest {
    }
    export interface DeleteSchemaCommandOutput extends DeleteSchemaResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a given schema. Schemas in a development and published state can only be deleted. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, DeleteSchemaCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, DeleteSchemaCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new DeleteSchemaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteSchemaCommandInput} for command's `input` shape.
        * @see {@link DeleteSchemaCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class DeleteSchemaCommand extends $Command<DeleteSchemaCommandInput, DeleteSchemaCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: DeleteSchemaCommandInput;
            constructor(input: DeleteSchemaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteSchemaCommandInput, DeleteSchemaCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DeleteTypedLinkFacetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { DeleteTypedLinkFacetRequest, DeleteTypedLinkFacetResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface DeleteTypedLinkFacetCommandInput extends DeleteTypedLinkFacetRequest {
    }
    export interface DeleteTypedLinkFacetCommandOutput extends DeleteTypedLinkFacetResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, DeleteTypedLinkFacetCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, DeleteTypedLinkFacetCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new DeleteTypedLinkFacetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteTypedLinkFacetCommandInput} for command's `input` shape.
        * @see {@link DeleteTypedLinkFacetCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class DeleteTypedLinkFacetCommand extends $Command<DeleteTypedLinkFacetCommandInput, DeleteTypedLinkFacetCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: DeleteTypedLinkFacetCommandInput;
            constructor(input: DeleteTypedLinkFacetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteTypedLinkFacetCommandInput, DeleteTypedLinkFacetCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DetachFromIndexCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { DetachFromIndexRequest, DetachFromIndexResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface DetachFromIndexCommandInput extends DetachFromIndexRequest {
    }
    export interface DetachFromIndexCommandOutput extends DetachFromIndexResponse, __MetadataBearer {
    }
    /**
        * <p>Detaches the specified object from the specified index.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, DetachFromIndexCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, DetachFromIndexCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new DetachFromIndexCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetachFromIndexCommandInput} for command's `input` shape.
        * @see {@link DetachFromIndexCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class DetachFromIndexCommand extends $Command<DetachFromIndexCommandInput, DetachFromIndexCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: DetachFromIndexCommandInput;
            constructor(input: DetachFromIndexCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetachFromIndexCommandInput, DetachFromIndexCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DetachObjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { DetachObjectRequest, DetachObjectResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface DetachObjectCommandInput extends DetachObjectRequest {
    }
    export interface DetachObjectCommandOutput extends DetachObjectResponse, __MetadataBearer {
    }
    /**
        * <p>Detaches a given object from the parent object. The object that is to be detached from the
        *       parent is specified by the link name.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, DetachObjectCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, DetachObjectCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new DetachObjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetachObjectCommandInput} for command's `input` shape.
        * @see {@link DetachObjectCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class DetachObjectCommand extends $Command<DetachObjectCommandInput, DetachObjectCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: DetachObjectCommandInput;
            constructor(input: DetachObjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetachObjectCommandInput, DetachObjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DetachPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { DetachPolicyRequest, DetachPolicyResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface DetachPolicyCommandInput extends DetachPolicyRequest {
    }
    export interface DetachPolicyCommandOutput extends DetachPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Detaches a policy from an object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, DetachPolicyCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, DetachPolicyCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new DetachPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetachPolicyCommandInput} for command's `input` shape.
        * @see {@link DetachPolicyCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class DetachPolicyCommand extends $Command<DetachPolicyCommandInput, DetachPolicyCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: DetachPolicyCommandInput;
            constructor(input: DetachPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetachPolicyCommandInput, DetachPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DetachTypedLinkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { DetachTypedLinkRequest } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface DetachTypedLinkCommandInput extends DetachTypedLinkRequest {
    }
    export interface DetachTypedLinkCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Detaches a typed link from a specified source and target object. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, DetachTypedLinkCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, DetachTypedLinkCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new DetachTypedLinkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetachTypedLinkCommandInput} for command's `input` shape.
        * @see {@link DetachTypedLinkCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class DetachTypedLinkCommand extends $Command<DetachTypedLinkCommandInput, DetachTypedLinkCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: DetachTypedLinkCommandInput;
            constructor(input: DetachTypedLinkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetachTypedLinkCommandInput, DetachTypedLinkCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/DisableDirectoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { DisableDirectoryRequest, DisableDirectoryResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface DisableDirectoryCommandInput extends DisableDirectoryRequest {
    }
    export interface DisableDirectoryCommandOutput extends DisableDirectoryResponse, __MetadataBearer {
    }
    /**
        * <p>Disables the specified directory. Disabled directories cannot be read or written to.
        *       Only enabled directories can be disabled. Disabled directories may be reenabled.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, DisableDirectoryCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, DisableDirectoryCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new DisableDirectoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisableDirectoryCommandInput} for command's `input` shape.
        * @see {@link DisableDirectoryCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class DisableDirectoryCommand extends $Command<DisableDirectoryCommandInput, DisableDirectoryCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: DisableDirectoryCommandInput;
            constructor(input: DisableDirectoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisableDirectoryCommandInput, DisableDirectoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/EnableDirectoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { EnableDirectoryRequest, EnableDirectoryResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface EnableDirectoryCommandInput extends EnableDirectoryRequest {
    }
    export interface EnableDirectoryCommandOutput extends EnableDirectoryResponse, __MetadataBearer {
    }
    /**
        * <p>Enables the specified directory. Only disabled directories can be enabled. Once
        *       enabled, the directory can then be read and written to.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, EnableDirectoryCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, EnableDirectoryCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new EnableDirectoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link EnableDirectoryCommandInput} for command's `input` shape.
        * @see {@link EnableDirectoryCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class EnableDirectoryCommand extends $Command<EnableDirectoryCommandInput, EnableDirectoryCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: EnableDirectoryCommandInput;
            constructor(input: EnableDirectoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<EnableDirectoryCommandInput, EnableDirectoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetAppliedSchemaVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { GetAppliedSchemaVersionRequest, GetAppliedSchemaVersionResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface GetAppliedSchemaVersionCommandInput extends GetAppliedSchemaVersionRequest {
    }
    export interface GetAppliedSchemaVersionCommandOutput extends GetAppliedSchemaVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Returns current applied schema version ARN, including the minor version in use.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, GetAppliedSchemaVersionCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, GetAppliedSchemaVersionCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new GetAppliedSchemaVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAppliedSchemaVersionCommandInput} for command's `input` shape.
        * @see {@link GetAppliedSchemaVersionCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class GetAppliedSchemaVersionCommand extends $Command<GetAppliedSchemaVersionCommandInput, GetAppliedSchemaVersionCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: GetAppliedSchemaVersionCommandInput;
            constructor(input: GetAppliedSchemaVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAppliedSchemaVersionCommandInput, GetAppliedSchemaVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetDirectoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { GetDirectoryRequest, GetDirectoryResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface GetDirectoryCommandInput extends GetDirectoryRequest {
    }
    export interface GetDirectoryCommandOutput extends GetDirectoryResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves metadata about a directory.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, GetDirectoryCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, GetDirectoryCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new GetDirectoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDirectoryCommandInput} for command's `input` shape.
        * @see {@link GetDirectoryCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class GetDirectoryCommand extends $Command<GetDirectoryCommandInput, GetDirectoryCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: GetDirectoryCommandInput;
            constructor(input: GetDirectoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDirectoryCommandInput, GetDirectoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetFacetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { GetFacetRequest, GetFacetResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface GetFacetCommandInput extends GetFacetRequest {
    }
    export interface GetFacetCommandOutput extends GetFacetResponse, __MetadataBearer {
    }
    /**
        * <p>Gets details of the <a>Facet</a>, such as facet name, attributes, <a>Rule</a>s, or <code>ObjectType</code>. You can call this on all kinds of schema
        *       facets -- published, development, or applied.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, GetFacetCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, GetFacetCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new GetFacetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetFacetCommandInput} for command's `input` shape.
        * @see {@link GetFacetCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class GetFacetCommand extends $Command<GetFacetCommandInput, GetFacetCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: GetFacetCommandInput;
            constructor(input: GetFacetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetFacetCommandInput, GetFacetCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetLinkAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { GetLinkAttributesRequest, GetLinkAttributesResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface GetLinkAttributesCommandInput extends GetLinkAttributesRequest {
    }
    export interface GetLinkAttributesCommandOutput extends GetLinkAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves attributes that are associated with a typed link.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, GetLinkAttributesCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, GetLinkAttributesCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new GetLinkAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLinkAttributesCommandInput} for command's `input` shape.
        * @see {@link GetLinkAttributesCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class GetLinkAttributesCommand extends $Command<GetLinkAttributesCommandInput, GetLinkAttributesCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: GetLinkAttributesCommandInput;
            constructor(input: GetLinkAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLinkAttributesCommandInput, GetLinkAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetObjectAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { GetObjectAttributesRequest, GetObjectAttributesResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface GetObjectAttributesCommandInput extends GetObjectAttributesRequest {
    }
    export interface GetObjectAttributesCommandOutput extends GetObjectAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves attributes within a facet that are associated with an object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, GetObjectAttributesCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, GetObjectAttributesCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new GetObjectAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetObjectAttributesCommandInput} for command's `input` shape.
        * @see {@link GetObjectAttributesCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class GetObjectAttributesCommand extends $Command<GetObjectAttributesCommandInput, GetObjectAttributesCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: GetObjectAttributesCommandInput;
            constructor(input: GetObjectAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetObjectAttributesCommandInput, GetObjectAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetObjectInformationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { GetObjectInformationRequest, GetObjectInformationResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface GetObjectInformationCommandInput extends GetObjectInformationRequest {
    }
    export interface GetObjectInformationCommandOutput extends GetObjectInformationResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves metadata about an object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, GetObjectInformationCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, GetObjectInformationCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new GetObjectInformationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetObjectInformationCommandInput} for command's `input` shape.
        * @see {@link GetObjectInformationCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class GetObjectInformationCommand extends $Command<GetObjectInformationCommandInput, GetObjectInformationCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: GetObjectInformationCommandInput;
            constructor(input: GetObjectInformationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetObjectInformationCommandInput, GetObjectInformationCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetSchemaAsJsonCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { GetSchemaAsJsonRequest, GetSchemaAsJsonResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface GetSchemaAsJsonCommandInput extends GetSchemaAsJsonRequest {
    }
    export interface GetSchemaAsJsonCommandOutput extends GetSchemaAsJsonResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a JSON representation of the schema. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_jsonformat.html#schemas_json">JSON Schema Format</a> for more information.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, GetSchemaAsJsonCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, GetSchemaAsJsonCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new GetSchemaAsJsonCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSchemaAsJsonCommandInput} for command's `input` shape.
        * @see {@link GetSchemaAsJsonCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class GetSchemaAsJsonCommand extends $Command<GetSchemaAsJsonCommandInput, GetSchemaAsJsonCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: GetSchemaAsJsonCommandInput;
            constructor(input: GetSchemaAsJsonCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSchemaAsJsonCommandInput, GetSchemaAsJsonCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/GetTypedLinkFacetInformationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { GetTypedLinkFacetInformationRequest, GetTypedLinkFacetInformationResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface GetTypedLinkFacetInformationCommandInput extends GetTypedLinkFacetInformationRequest {
    }
    export interface GetTypedLinkFacetInformationCommandOutput extends GetTypedLinkFacetInformationResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the identity attribute order for a specific <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, GetTypedLinkFacetInformationCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, GetTypedLinkFacetInformationCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new GetTypedLinkFacetInformationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTypedLinkFacetInformationCommandInput} for command's `input` shape.
        * @see {@link GetTypedLinkFacetInformationCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class GetTypedLinkFacetInformationCommand extends $Command<GetTypedLinkFacetInformationCommandInput, GetTypedLinkFacetInformationCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: GetTypedLinkFacetInformationCommandInput;
            constructor(input: GetTypedLinkFacetInformationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTypedLinkFacetInformationCommandInput, GetTypedLinkFacetInformationCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListAppliedSchemaArnsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { ListAppliedSchemaArnsRequest, ListAppliedSchemaArnsResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface ListAppliedSchemaArnsCommandInput extends ListAppliedSchemaArnsRequest {
    }
    export interface ListAppliedSchemaArnsCommandOutput extends ListAppliedSchemaArnsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists schema major versions applied to a directory. If <code>SchemaArn</code> is provided, lists the minor version.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, ListAppliedSchemaArnsCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, ListAppliedSchemaArnsCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new ListAppliedSchemaArnsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAppliedSchemaArnsCommandInput} for command's `input` shape.
        * @see {@link ListAppliedSchemaArnsCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class ListAppliedSchemaArnsCommand extends $Command<ListAppliedSchemaArnsCommandInput, ListAppliedSchemaArnsCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: ListAppliedSchemaArnsCommandInput;
            constructor(input: ListAppliedSchemaArnsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAppliedSchemaArnsCommandInput, ListAppliedSchemaArnsCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListAttachedIndicesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { ListAttachedIndicesRequest, ListAttachedIndicesResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface ListAttachedIndicesCommandInput extends ListAttachedIndicesRequest {
    }
    export interface ListAttachedIndicesCommandOutput extends ListAttachedIndicesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists indices attached to the specified object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, ListAttachedIndicesCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, ListAttachedIndicesCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new ListAttachedIndicesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAttachedIndicesCommandInput} for command's `input` shape.
        * @see {@link ListAttachedIndicesCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class ListAttachedIndicesCommand extends $Command<ListAttachedIndicesCommandInput, ListAttachedIndicesCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: ListAttachedIndicesCommandInput;
            constructor(input: ListAttachedIndicesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAttachedIndicesCommandInput, ListAttachedIndicesCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListDevelopmentSchemaArnsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { ListDevelopmentSchemaArnsRequest, ListDevelopmentSchemaArnsResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface ListDevelopmentSchemaArnsCommandInput extends ListDevelopmentSchemaArnsRequest {
    }
    export interface ListDevelopmentSchemaArnsCommandOutput extends ListDevelopmentSchemaArnsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves each Amazon Resource Name (ARN) of schemas in the development
        *       state.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, ListDevelopmentSchemaArnsCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, ListDevelopmentSchemaArnsCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new ListDevelopmentSchemaArnsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDevelopmentSchemaArnsCommandInput} for command's `input` shape.
        * @see {@link ListDevelopmentSchemaArnsCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class ListDevelopmentSchemaArnsCommand extends $Command<ListDevelopmentSchemaArnsCommandInput, ListDevelopmentSchemaArnsCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: ListDevelopmentSchemaArnsCommandInput;
            constructor(input: ListDevelopmentSchemaArnsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDevelopmentSchemaArnsCommandInput, ListDevelopmentSchemaArnsCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListDirectoriesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { ListDirectoriesRequest, ListDirectoriesResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface ListDirectoriesCommandInput extends ListDirectoriesRequest {
    }
    export interface ListDirectoriesCommandOutput extends ListDirectoriesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists directories created within an account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, ListDirectoriesCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, ListDirectoriesCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new ListDirectoriesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDirectoriesCommandInput} for command's `input` shape.
        * @see {@link ListDirectoriesCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class ListDirectoriesCommand extends $Command<ListDirectoriesCommandInput, ListDirectoriesCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: ListDirectoriesCommandInput;
            constructor(input: ListDirectoriesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDirectoriesCommandInput, ListDirectoriesCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListFacetAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { ListFacetAttributesRequest, ListFacetAttributesResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface ListFacetAttributesCommandInput extends ListFacetAttributesRequest {
    }
    export interface ListFacetAttributesCommandOutput extends ListFacetAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves attributes attached to the facet.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, ListFacetAttributesCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, ListFacetAttributesCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new ListFacetAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFacetAttributesCommandInput} for command's `input` shape.
        * @see {@link ListFacetAttributesCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class ListFacetAttributesCommand extends $Command<ListFacetAttributesCommandInput, ListFacetAttributesCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: ListFacetAttributesCommandInput;
            constructor(input: ListFacetAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFacetAttributesCommandInput, ListFacetAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListFacetNamesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { ListFacetNamesRequest, ListFacetNamesResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface ListFacetNamesCommandInput extends ListFacetNamesRequest {
    }
    export interface ListFacetNamesCommandOutput extends ListFacetNamesResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the names of facets that exist in a schema.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, ListFacetNamesCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, ListFacetNamesCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new ListFacetNamesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFacetNamesCommandInput} for command's `input` shape.
        * @see {@link ListFacetNamesCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class ListFacetNamesCommand extends $Command<ListFacetNamesCommandInput, ListFacetNamesCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: ListFacetNamesCommandInput;
            constructor(input: ListFacetNamesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFacetNamesCommandInput, ListFacetNamesCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListIncomingTypedLinksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { ListIncomingTypedLinksRequest, ListIncomingTypedLinksResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface ListIncomingTypedLinksCommandInput extends ListIncomingTypedLinksRequest {
    }
    export interface ListIncomingTypedLinksCommandOutput extends ListIncomingTypedLinksResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a paginated list of all the incoming <a>TypedLinkSpecifier</a>
        *       information for an object. It also supports filtering by typed link facet and identity
        *       attributes. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, ListIncomingTypedLinksCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, ListIncomingTypedLinksCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new ListIncomingTypedLinksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListIncomingTypedLinksCommandInput} for command's `input` shape.
        * @see {@link ListIncomingTypedLinksCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class ListIncomingTypedLinksCommand extends $Command<ListIncomingTypedLinksCommandInput, ListIncomingTypedLinksCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: ListIncomingTypedLinksCommandInput;
            constructor(input: ListIncomingTypedLinksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListIncomingTypedLinksCommandInput, ListIncomingTypedLinksCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListIndexCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { ListIndexRequest, ListIndexResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface ListIndexCommandInput extends ListIndexRequest {
    }
    export interface ListIndexCommandOutput extends ListIndexResponse, __MetadataBearer {
    }
    /**
        * <p>Lists objects attached to the specified index.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, ListIndexCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, ListIndexCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new ListIndexCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListIndexCommandInput} for command's `input` shape.
        * @see {@link ListIndexCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class ListIndexCommand extends $Command<ListIndexCommandInput, ListIndexCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: ListIndexCommandInput;
            constructor(input: ListIndexCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListIndexCommandInput, ListIndexCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListManagedSchemaArnsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { ListManagedSchemaArnsRequest, ListManagedSchemaArnsResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface ListManagedSchemaArnsCommandInput extends ListManagedSchemaArnsRequest {
    }
    export interface ListManagedSchemaArnsCommandOutput extends ListManagedSchemaArnsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the major version families of each managed schema. If a major version ARN is provided as SchemaArn, the minor version revisions in that family are listed instead.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, ListManagedSchemaArnsCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, ListManagedSchemaArnsCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new ListManagedSchemaArnsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListManagedSchemaArnsCommandInput} for command's `input` shape.
        * @see {@link ListManagedSchemaArnsCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class ListManagedSchemaArnsCommand extends $Command<ListManagedSchemaArnsCommandInput, ListManagedSchemaArnsCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: ListManagedSchemaArnsCommandInput;
            constructor(input: ListManagedSchemaArnsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListManagedSchemaArnsCommandInput, ListManagedSchemaArnsCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListObjectAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { ListObjectAttributesRequest, ListObjectAttributesResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface ListObjectAttributesCommandInput extends ListObjectAttributesRequest {
    }
    export interface ListObjectAttributesCommandOutput extends ListObjectAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all attributes that are associated with an object.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, ListObjectAttributesCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, ListObjectAttributesCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new ListObjectAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListObjectAttributesCommandInput} for command's `input` shape.
        * @see {@link ListObjectAttributesCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class ListObjectAttributesCommand extends $Command<ListObjectAttributesCommandInput, ListObjectAttributesCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: ListObjectAttributesCommandInput;
            constructor(input: ListObjectAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListObjectAttributesCommandInput, ListObjectAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListObjectChildrenCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { ListObjectChildrenRequest, ListObjectChildrenResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface ListObjectChildrenCommandInput extends ListObjectChildrenRequest {
    }
    export interface ListObjectChildrenCommandOutput extends ListObjectChildrenResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a paginated list of child objects that are associated with a given
        *       object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, ListObjectChildrenCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, ListObjectChildrenCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new ListObjectChildrenCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListObjectChildrenCommandInput} for command's `input` shape.
        * @see {@link ListObjectChildrenCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class ListObjectChildrenCommand extends $Command<ListObjectChildrenCommandInput, ListObjectChildrenCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: ListObjectChildrenCommandInput;
            constructor(input: ListObjectChildrenCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListObjectChildrenCommandInput, ListObjectChildrenCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListObjectParentPathsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { ListObjectParentPathsRequest, ListObjectParentPathsResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface ListObjectParentPathsCommandInput extends ListObjectParentPathsRequest {
    }
    export interface ListObjectParentPathsCommandOutput extends ListObjectParentPathsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves all available parent paths for any object type such as node, leaf node,
        *       policy node, and index node objects. For more information about objects, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directorystructure.html">Directory Structure</a>.</p>
        *          <p>Use this API to evaluate all parents for an object. The call returns all objects from
        *       the root of the directory up to the requested object. The API returns the number of paths
        *       based on user-defined <code>MaxResults</code>, in case there are multiple paths to the parent.
        *       The order of the paths and nodes returned is consistent among multiple API calls unless the
        *       objects are deleted or moved. Paths not leading to the directory root are ignored from the
        *       target object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, ListObjectParentPathsCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, ListObjectParentPathsCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new ListObjectParentPathsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListObjectParentPathsCommandInput} for command's `input` shape.
        * @see {@link ListObjectParentPathsCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class ListObjectParentPathsCommand extends $Command<ListObjectParentPathsCommandInput, ListObjectParentPathsCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: ListObjectParentPathsCommandInput;
            constructor(input: ListObjectParentPathsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListObjectParentPathsCommandInput, ListObjectParentPathsCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListObjectParentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { ListObjectParentsRequest, ListObjectParentsResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface ListObjectParentsCommandInput extends ListObjectParentsRequest {
    }
    export interface ListObjectParentsCommandOutput extends ListObjectParentsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists parent objects that are associated with a given object in pagination
        *       fashion.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, ListObjectParentsCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, ListObjectParentsCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new ListObjectParentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListObjectParentsCommandInput} for command's `input` shape.
        * @see {@link ListObjectParentsCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class ListObjectParentsCommand extends $Command<ListObjectParentsCommandInput, ListObjectParentsCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: ListObjectParentsCommandInput;
            constructor(input: ListObjectParentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListObjectParentsCommandInput, ListObjectParentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListObjectPoliciesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { ListObjectPoliciesRequest, ListObjectPoliciesResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface ListObjectPoliciesCommandInput extends ListObjectPoliciesRequest {
    }
    export interface ListObjectPoliciesCommandOutput extends ListObjectPoliciesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns policies attached to an object in pagination fashion.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, ListObjectPoliciesCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, ListObjectPoliciesCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new ListObjectPoliciesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListObjectPoliciesCommandInput} for command's `input` shape.
        * @see {@link ListObjectPoliciesCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class ListObjectPoliciesCommand extends $Command<ListObjectPoliciesCommandInput, ListObjectPoliciesCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: ListObjectPoliciesCommandInput;
            constructor(input: ListObjectPoliciesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListObjectPoliciesCommandInput, ListObjectPoliciesCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListOutgoingTypedLinksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { ListOutgoingTypedLinksRequest, ListOutgoingTypedLinksResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface ListOutgoingTypedLinksCommandInput extends ListOutgoingTypedLinksRequest {
    }
    export interface ListOutgoingTypedLinksCommandOutput extends ListOutgoingTypedLinksResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a paginated list of all the outgoing <a>TypedLinkSpecifier</a>
        *       information for an object. It also supports filtering by typed link facet and identity
        *       attributes. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, ListOutgoingTypedLinksCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, ListOutgoingTypedLinksCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new ListOutgoingTypedLinksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListOutgoingTypedLinksCommandInput} for command's `input` shape.
        * @see {@link ListOutgoingTypedLinksCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class ListOutgoingTypedLinksCommand extends $Command<ListOutgoingTypedLinksCommandInput, ListOutgoingTypedLinksCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: ListOutgoingTypedLinksCommandInput;
            constructor(input: ListOutgoingTypedLinksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListOutgoingTypedLinksCommandInput, ListOutgoingTypedLinksCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListPolicyAttachmentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { ListPolicyAttachmentsRequest, ListPolicyAttachmentsResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface ListPolicyAttachmentsCommandInput extends ListPolicyAttachmentsRequest {
    }
    export interface ListPolicyAttachmentsCommandOutput extends ListPolicyAttachmentsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns all of the <code>ObjectIdentifiers</code> to which a given policy is attached.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, ListPolicyAttachmentsCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, ListPolicyAttachmentsCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new ListPolicyAttachmentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPolicyAttachmentsCommandInput} for command's `input` shape.
        * @see {@link ListPolicyAttachmentsCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class ListPolicyAttachmentsCommand extends $Command<ListPolicyAttachmentsCommandInput, ListPolicyAttachmentsCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: ListPolicyAttachmentsCommandInput;
            constructor(input: ListPolicyAttachmentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPolicyAttachmentsCommandInput, ListPolicyAttachmentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListPublishedSchemaArnsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { ListPublishedSchemaArnsRequest, ListPublishedSchemaArnsResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface ListPublishedSchemaArnsCommandInput extends ListPublishedSchemaArnsRequest {
    }
    export interface ListPublishedSchemaArnsCommandOutput extends ListPublishedSchemaArnsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the major version families of each published schema. If a major version ARN is provided as <code>SchemaArn</code>, the minor version revisions in that family are listed instead.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, ListPublishedSchemaArnsCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, ListPublishedSchemaArnsCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new ListPublishedSchemaArnsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPublishedSchemaArnsCommandInput} for command's `input` shape.
        * @see {@link ListPublishedSchemaArnsCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class ListPublishedSchemaArnsCommand extends $Command<ListPublishedSchemaArnsCommandInput, ListPublishedSchemaArnsCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: ListPublishedSchemaArnsCommandInput;
            constructor(input: ListPublishedSchemaArnsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPublishedSchemaArnsCommandInput, ListPublishedSchemaArnsCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Returns tags for a resource. Tagging is currently supported only for directories with a
        *       limit of 50 tags per directory. All 50 tags are returned for a given directory with this API
        *       call.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, ListTagsForResourceCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, ListTagsForResourceCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListTypedLinkFacetAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { ListTypedLinkFacetAttributesRequest, ListTypedLinkFacetAttributesResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface ListTypedLinkFacetAttributesCommandInput extends ListTypedLinkFacetAttributesRequest {
    }
    export interface ListTypedLinkFacetAttributesCommandOutput extends ListTypedLinkFacetAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a paginated list of all attribute definitions for a particular <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, ListTypedLinkFacetAttributesCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, ListTypedLinkFacetAttributesCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new ListTypedLinkFacetAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTypedLinkFacetAttributesCommandInput} for command's `input` shape.
        * @see {@link ListTypedLinkFacetAttributesCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class ListTypedLinkFacetAttributesCommand extends $Command<ListTypedLinkFacetAttributesCommandInput, ListTypedLinkFacetAttributesCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: ListTypedLinkFacetAttributesCommandInput;
            constructor(input: ListTypedLinkFacetAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTypedLinkFacetAttributesCommandInput, ListTypedLinkFacetAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/ListTypedLinkFacetNamesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { ListTypedLinkFacetNamesRequest, ListTypedLinkFacetNamesResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface ListTypedLinkFacetNamesCommandInput extends ListTypedLinkFacetNamesRequest {
    }
    export interface ListTypedLinkFacetNamesCommandOutput extends ListTypedLinkFacetNamesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a paginated list of <code>TypedLink</code> facet names for a particular schema.
        *       For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, ListTypedLinkFacetNamesCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, ListTypedLinkFacetNamesCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new ListTypedLinkFacetNamesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTypedLinkFacetNamesCommandInput} for command's `input` shape.
        * @see {@link ListTypedLinkFacetNamesCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class ListTypedLinkFacetNamesCommand extends $Command<ListTypedLinkFacetNamesCommandInput, ListTypedLinkFacetNamesCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: ListTypedLinkFacetNamesCommandInput;
            constructor(input: ListTypedLinkFacetNamesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTypedLinkFacetNamesCommandInput, ListTypedLinkFacetNamesCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/LookupPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { LookupPolicyRequest, LookupPolicyResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface LookupPolicyCommandInput extends LookupPolicyRequest {
    }
    export interface LookupPolicyCommandOutput extends LookupPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all policies from the root of the <a>Directory</a> to the object
        *       specified. If there are no policies present, an empty list is returned. If policies are
        *       present, and if some objects don't have the policies attached, it returns the <code>ObjectIdentifier</code>
        *       for such objects. If policies are present, it returns <code>ObjectIdentifier</code>, <code>policyId</code>, and
        *       <code>policyType</code>. Paths that don't lead to the root from the target object are ignored. For more
        *       information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies">Policies</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, LookupPolicyCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, LookupPolicyCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new LookupPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link LookupPolicyCommandInput} for command's `input` shape.
        * @see {@link LookupPolicyCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class LookupPolicyCommand extends $Command<LookupPolicyCommandInput, LookupPolicyCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: LookupPolicyCommandInput;
            constructor(input: LookupPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<LookupPolicyCommandInput, LookupPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/PublishSchemaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { PublishSchemaRequest, PublishSchemaResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface PublishSchemaCommandInput extends PublishSchemaRequest {
    }
    export interface PublishSchemaCommandOutput extends PublishSchemaResponse, __MetadataBearer {
    }
    /**
        * <p>Publishes a development schema with a major version and a recommended minor version.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, PublishSchemaCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, PublishSchemaCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new PublishSchemaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PublishSchemaCommandInput} for command's `input` shape.
        * @see {@link PublishSchemaCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class PublishSchemaCommand extends $Command<PublishSchemaCommandInput, PublishSchemaCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: PublishSchemaCommandInput;
            constructor(input: PublishSchemaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PublishSchemaCommandInput, PublishSchemaCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/PutSchemaFromJsonCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { PutSchemaFromJsonRequest, PutSchemaFromJsonResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface PutSchemaFromJsonCommandInput extends PutSchemaFromJsonRequest {
    }
    export interface PutSchemaFromJsonCommandOutput extends PutSchemaFromJsonResponse, __MetadataBearer {
    }
    /**
        * <p>Allows a schema to be updated using JSON upload. Only available for development schemas. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_jsonformat.html#schemas_json">JSON Schema Format</a> for more information.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, PutSchemaFromJsonCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, PutSchemaFromJsonCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new PutSchemaFromJsonCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutSchemaFromJsonCommandInput} for command's `input` shape.
        * @see {@link PutSchemaFromJsonCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class PutSchemaFromJsonCommand extends $Command<PutSchemaFromJsonCommandInput, PutSchemaFromJsonCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: PutSchemaFromJsonCommandInput;
            constructor(input: PutSchemaFromJsonCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutSchemaFromJsonCommandInput, PutSchemaFromJsonCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/RemoveFacetFromObjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { RemoveFacetFromObjectRequest, RemoveFacetFromObjectResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface RemoveFacetFromObjectCommandInput extends RemoveFacetFromObjectRequest {
    }
    export interface RemoveFacetFromObjectCommandOutput extends RemoveFacetFromObjectResponse, __MetadataBearer {
    }
    /**
        * <p>Removes the specified facet from the specified object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, RemoveFacetFromObjectCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, RemoveFacetFromObjectCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new RemoveFacetFromObjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveFacetFromObjectCommandInput} for command's `input` shape.
        * @see {@link RemoveFacetFromObjectCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class RemoveFacetFromObjectCommand extends $Command<RemoveFacetFromObjectCommandInput, RemoveFacetFromObjectCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: RemoveFacetFromObjectCommandInput;
            constructor(input: RemoveFacetFromObjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveFacetFromObjectCommandInput, RemoveFacetFromObjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>An API operation for adding tags to a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, TagResourceCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, TagResourceCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>An API operation for removing tags from a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, UntagResourceCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, UntagResourceCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UpdateFacetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { UpdateFacetRequest, UpdateFacetResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface UpdateFacetCommandInput extends UpdateFacetRequest {
    }
    export interface UpdateFacetCommandOutput extends UpdateFacetResponse, __MetadataBearer {
    }
    /**
        * <p>Does the following:</p>
        *          <ol>
        *             <li>
        *                <p>Adds new <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p>
        *             </li>
        *             <li>
        *                <p>Updates existing <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p>
        *             </li>
        *             <li>
        *                <p>Deletes existing <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p>
        *             </li>
        *          </ol>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, UpdateFacetCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, UpdateFacetCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new UpdateFacetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateFacetCommandInput} for command's `input` shape.
        * @see {@link UpdateFacetCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class UpdateFacetCommand extends $Command<UpdateFacetCommandInput, UpdateFacetCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: UpdateFacetCommandInput;
            constructor(input: UpdateFacetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateFacetCommandInput, UpdateFacetCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UpdateLinkAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { UpdateLinkAttributesRequest, UpdateLinkAttributesResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface UpdateLinkAttributesCommandInput extends UpdateLinkAttributesRequest {
    }
    export interface UpdateLinkAttributesCommandOutput extends UpdateLinkAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a given typed link’s attributes. Attributes to be updated must not contribute to the typed link’s identity, as defined by its <code>IdentityAttributeOrder</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, UpdateLinkAttributesCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, UpdateLinkAttributesCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new UpdateLinkAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateLinkAttributesCommandInput} for command's `input` shape.
        * @see {@link UpdateLinkAttributesCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class UpdateLinkAttributesCommand extends $Command<UpdateLinkAttributesCommandInput, UpdateLinkAttributesCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: UpdateLinkAttributesCommandInput;
            constructor(input: UpdateLinkAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateLinkAttributesCommandInput, UpdateLinkAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UpdateObjectAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { UpdateObjectAttributesRequest, UpdateObjectAttributesResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface UpdateObjectAttributesCommandInput extends UpdateObjectAttributesRequest {
    }
    export interface UpdateObjectAttributesCommandOutput extends UpdateObjectAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a given object's attributes.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, UpdateObjectAttributesCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, UpdateObjectAttributesCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new UpdateObjectAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateObjectAttributesCommandInput} for command's `input` shape.
        * @see {@link UpdateObjectAttributesCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class UpdateObjectAttributesCommand extends $Command<UpdateObjectAttributesCommandInput, UpdateObjectAttributesCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: UpdateObjectAttributesCommandInput;
            constructor(input: UpdateObjectAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateObjectAttributesCommandInput, UpdateObjectAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UpdateSchemaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { UpdateSchemaRequest, UpdateSchemaResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface UpdateSchemaCommandInput extends UpdateSchemaRequest {
    }
    export interface UpdateSchemaCommandOutput extends UpdateSchemaResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the schema name with a new name. Only development schema names can be
        *       updated.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, UpdateSchemaCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, UpdateSchemaCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new UpdateSchemaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSchemaCommandInput} for command's `input` shape.
        * @see {@link UpdateSchemaCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class UpdateSchemaCommand extends $Command<UpdateSchemaCommandInput, UpdateSchemaCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: UpdateSchemaCommandInput;
            constructor(input: UpdateSchemaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSchemaCommandInput, UpdateSchemaCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UpdateTypedLinkFacetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { UpdateTypedLinkFacetRequest, UpdateTypedLinkFacetResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface UpdateTypedLinkFacetCommandInput extends UpdateTypedLinkFacetRequest {
    }
    export interface UpdateTypedLinkFacetCommandOutput extends UpdateTypedLinkFacetResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, UpdateTypedLinkFacetCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, UpdateTypedLinkFacetCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new UpdateTypedLinkFacetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateTypedLinkFacetCommandInput} for command's `input` shape.
        * @see {@link UpdateTypedLinkFacetCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class UpdateTypedLinkFacetCommand extends $Command<UpdateTypedLinkFacetCommandInput, UpdateTypedLinkFacetCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: UpdateTypedLinkFacetCommandInput;
            constructor(input: UpdateTypedLinkFacetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateTypedLinkFacetCommandInput, UpdateTypedLinkFacetCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UpgradeAppliedSchemaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { UpgradeAppliedSchemaRequest, UpgradeAppliedSchemaResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface UpgradeAppliedSchemaCommandInput extends UpgradeAppliedSchemaRequest {
    }
    export interface UpgradeAppliedSchemaCommandOutput extends UpgradeAppliedSchemaResponse, __MetadataBearer {
    }
    /**
        * <p>Upgrades a single directory in-place using the <code>PublishedSchemaArn</code> with schema updates found in <code>MinorVersion</code>. Backwards-compatible minor version upgrades are instantaneously available for readers on all objects in the directory. Note: This is a synchronous API call and upgrades only one schema on a given directory per call. To upgrade multiple directories from one schema, you would need to call this API on each directory.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, UpgradeAppliedSchemaCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, UpgradeAppliedSchemaCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new UpgradeAppliedSchemaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpgradeAppliedSchemaCommandInput} for command's `input` shape.
        * @see {@link UpgradeAppliedSchemaCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class UpgradeAppliedSchemaCommand extends $Command<UpgradeAppliedSchemaCommandInput, UpgradeAppliedSchemaCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: UpgradeAppliedSchemaCommandInput;
            constructor(input: UpgradeAppliedSchemaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpgradeAppliedSchemaCommandInput, UpgradeAppliedSchemaCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/commands/UpgradePublishedSchemaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudDirectoryClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/CloudDirectoryClient";
    import { UpgradePublishedSchemaRequest, UpgradePublishedSchemaResponse } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0";
    export interface UpgradePublishedSchemaCommandInput extends UpgradePublishedSchemaRequest {
    }
    export interface UpgradePublishedSchemaCommandOutput extends UpgradePublishedSchemaResponse, __MetadataBearer {
    }
    /**
        * <p>Upgrades a published schema under a new minor version revision using the current contents of <code>DevelopmentSchemaArn</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudDirectoryClient, UpgradePublishedSchemaCommand } from "@aws-sdk/client-clouddirectory"; // ES Modules import
        * // const { CloudDirectoryClient, UpgradePublishedSchemaCommand } = require("@aws-sdk/client-clouddirectory"); // CommonJS import
        * const client = new CloudDirectoryClient(config);
        * const command = new UpgradePublishedSchemaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpgradePublishedSchemaCommandInput} for command's `input` shape.
        * @see {@link UpgradePublishedSchemaCommandOutput} for command's `response` shape.
        * @see {@link CloudDirectoryClientResolvedConfig | config} for CloudDirectoryClient's `config` shape.
        *
        */
    export class UpgradePublishedSchemaCommand extends $Command<UpgradePublishedSchemaCommandInput, UpgradePublishedSchemaCommandOutput, CloudDirectoryClientResolvedConfig> {
            readonly input: UpgradePublishedSchemaCommandInput;
            constructor(input: UpgradePublishedSchemaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudDirectoryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpgradePublishedSchemaCommandInput, UpgradePublishedSchemaCommandOutput>;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { CloudDirectoryServiceException as __BaseException } from "@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/CloudDirectoryServiceException";
    /**
        * <p>Access denied or directory not found. Either you don't have permissions for this directory or the directory does not exist. Try calling <a>ListDirectories</a> and check your permissions.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>A unique identifier for an attribute.</p>
        */
    export interface AttributeKey {
            /**
                * <p>The Amazon Resource Name (ARN) of the schema that contains the facet and
                *       attribute.</p>
                */
            SchemaArn: string | undefined;
            /**
                * <p>The name of the facet that the attribute exists within.</p>
                */
            FacetName: string | undefined;
            /**
                * <p>The name of the attribute.</p>
                */
            Name: string | undefined;
    }
    export namespace AttributeKey {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttributeKey) => any;
    }
    /**
        * <p>Represents the data for a typed attribute. You can set one, and only one, of the
        *       elements. Each attribute in an item is a name-value pair. Attributes have a single
        *       value.</p>
        */
    export type TypedAttributeValue = TypedAttributeValue.BinaryValueMember | TypedAttributeValue.BooleanValueMember | TypedAttributeValue.DatetimeValueMember | TypedAttributeValue.NumberValueMember | TypedAttributeValue.StringValueMember | TypedAttributeValue.$UnknownMember;
    export namespace TypedAttributeValue {
            /**
                * <p>A string data value.</p>
                */
            interface StringValueMember {
                    StringValue: string;
                    BinaryValue?: never;
                    BooleanValue?: never;
                    NumberValue?: never;
                    DatetimeValue?: never;
                    $unknown?: never;
            }
            /**
                * <p>A binary data value.</p>
                */
            interface BinaryValueMember {
                    StringValue?: never;
                    BinaryValue: Uint8Array;
                    BooleanValue?: never;
                    NumberValue?: never;
                    DatetimeValue?: never;
                    $unknown?: never;
            }
            /**
                * <p>A Boolean data value.</p>
                */
            interface BooleanValueMember {
                    StringValue?: never;
                    BinaryValue?: never;
                    BooleanValue: boolean;
                    NumberValue?: never;
                    DatetimeValue?: never;
                    $unknown?: never;
            }
            /**
                * <p>A number data value.</p>
                */
            interface NumberValueMember {
                    StringValue?: never;
                    BinaryValue?: never;
                    BooleanValue?: never;
                    NumberValue: string;
                    DatetimeValue?: never;
                    $unknown?: never;
            }
            /**
                * <p>A date and time value.</p>
                */
            interface DatetimeValueMember {
                    StringValue?: never;
                    BinaryValue?: never;
                    BooleanValue?: never;
                    NumberValue?: never;
                    DatetimeValue: Date;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    StringValue?: never;
                    BinaryValue?: never;
                    BooleanValue?: never;
                    NumberValue?: never;
                    DatetimeValue?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    StringValue: (value: string) => T;
                    BinaryValue: (value: Uint8Array) => T;
                    BooleanValue: (value: boolean) => T;
                    NumberValue: (value: string) => T;
                    DatetimeValue: (value: Date) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: TypedAttributeValue, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TypedAttributeValue) => any;
    }
    /**
        * <p>The combination of an attribute key and an attribute value.</p>
        */
    export interface AttributeKeyAndValue {
            /**
                * <p>The key of the attribute.</p>
                */
            Key: AttributeKey | undefined;
            /**
                * <p>The value of the attribute.</p>
                */
            Value: TypedAttributeValue | undefined;
    }
    export namespace AttributeKeyAndValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttributeKeyAndValue) => any;
    }
    /**
        * <p>The reference that identifies an object.</p>
        */
    export interface ObjectReference {
            /**
                * <p>A path selector supports easy selection of an object by the parent/child links leading to it from the directory root. Use the link names from each parent/child link to construct the path. Path selectors start with a slash (/) and link names are separated by slashes. For more information about paths, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_access_objects.html">Access Objects</a>. You can identify an object in one of the following ways:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <i>$ObjectIdentifier</i> - An object identifier is an opaque string provided by Amazon Cloud Directory. When creating objects, the system will provide you with the identifier of the created object. An object’s identifier is immutable and no two objects will ever share the same object identifier. To identify an object with ObjectIdentifier, the ObjectIdentifier must be wrapped in double quotes. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <i>/some/path</i> - Identifies the object based on path</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <i>#SomeBatchReference</i> - Identifies the object in a batch call</p>
                *             </li>
                *          </ul>
                */
            Selector?: string;
    }
    export namespace ObjectReference {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ObjectReference) => any;
    }
    /**
        * <p>A facet.</p>
        */
    export interface SchemaFacet {
            /**
                * <p>The ARN of the schema that contains the facet with no minor component. See <a>arns</a> and <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_inplaceschemaupgrade.html">In-Place Schema Upgrade</a> for a description of when to provide minor versions.
                *      If this value is set, FacetName must also be set.</p>
                */
            SchemaArn?: string;
            /**
                * <p>The name of the facet. If this value is set, SchemaArn must also be set.</p>
                */
            FacetName?: string;
    }
    export namespace SchemaFacet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SchemaFacet) => any;
    }
    export interface AddFacetToObjectRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the <a>Directory</a>
                *       where the object resides. For more information, see <a>arns</a>.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>Identifiers for the facet that you are adding to the object. See <a>SchemaFacet</a> for details.</p>
                */
            SchemaFacet: SchemaFacet | undefined;
            /**
                * <p>Attributes on the facet that you are adding to the object.</p>
                */
            ObjectAttributeList?: AttributeKeyAndValue[];
            /**
                * <p>A reference to the object you are adding the specified facet to.</p>
                */
            ObjectReference: ObjectReference | undefined;
    }
    export namespace AddFacetToObjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddFacetToObjectRequest) => any;
    }
    export interface AddFacetToObjectResponse {
    }
    export namespace AddFacetToObjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddFacetToObjectResponse) => any;
    }
    /**
        * <p>Operations are only permitted on enabled directories.</p>
        */
    export class DirectoryNotEnabledException extends __BaseException {
            readonly name: "DirectoryNotEnabledException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DirectoryNotEnabledException, __BaseException>);
    }
    /**
        * <p>The <a>Facet</a> that you provided was not well formed or could not be
        *       validated with the schema.</p>
        */
    export class FacetValidationException extends __BaseException {
            readonly name: "FacetValidationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<FacetValidationException, __BaseException>);
    }
    /**
        * <p>Indicates a problem that must be resolved by Amazon Web Services. This might be a transient error in which case you can retry your request until it succeeds. Otherwise, go to the <a href="http://status.aws.amazon.com/">AWS Service Health Dashboard</a> site to see if there are any operational issues with the service.</p>
        */
    export class InternalServiceException extends __BaseException {
            readonly name: "InternalServiceException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServiceException, __BaseException>);
    }
    /**
        * <p>Indicates that the provided ARN value is not valid.</p>
        */
    export class InvalidArnException extends __BaseException {
            readonly name: "InvalidArnException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidArnException, __BaseException>);
    }
    /**
        * <p>Indicates that limits are exceeded. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/limits.html">Limits</a> for more information.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>The specified resource could not be found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>Occurs when a conflict with a previous successful write is detected. For example, if a write operation occurs on an object and then an attempt is made to read the object using “SERIALIZABLE” consistency, this exception may result. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.</p>
        */
    export class RetryableConflictException extends __BaseException {
            readonly name: "RetryableConflictException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RetryableConflictException, __BaseException>);
    }
    /**
        * <p>Indicates that your request is malformed in some manner. See the exception
        *       message.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    export interface ApplySchemaRequest {
            /**
                * <p>Published schema Amazon Resource Name (ARN) that needs to be copied. For more
                *       information, see <a>arns</a>.</p>
                */
            PublishedSchemaArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the <a>Directory</a>
                *       into which the schema is copied. For more information, see <a>arns</a>.</p>
                */
            DirectoryArn: string | undefined;
    }
    export namespace ApplySchemaRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplySchemaRequest) => any;
    }
    export interface ApplySchemaResponse {
            /**
                * <p>The applied schema ARN that is associated with the copied schema in the <a>Directory</a>. You can use this ARN to describe the schema information applied on
                *       this directory. For more information, see <a>arns</a>.</p>
                */
            AppliedSchemaArn?: string;
            /**
                * <p>The ARN that is associated with the <a>Directory</a>. For more information,
                *       see <a>arns</a>.</p>
                */
            DirectoryArn?: string;
    }
    export namespace ApplySchemaResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplySchemaResponse) => any;
    }
    /**
        * <p>Indicates that an attempt to make an attachment was invalid. For example, attaching two nodes
        *       with a link type that is not applicable to the nodes or attempting to apply a schema to a directory a second time.</p>
        */
    export class InvalidAttachmentException extends __BaseException {
            readonly name: "InvalidAttachmentException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidAttachmentException, __BaseException>);
    }
    /**
        * <p>Indicates that a schema could not be created due to a naming conflict. Please select a
        *       different name and then try again.</p>
        */
    export class SchemaAlreadyExistsException extends __BaseException {
            readonly name: "SchemaAlreadyExistsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SchemaAlreadyExistsException, __BaseException>);
    }
    export interface AttachObjectRequest {
            /**
                * <p>Amazon Resource Name (ARN) that is associated with the <a>Directory</a>
                *       where both objects reside. For more information, see <a>arns</a>.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>The parent object reference.</p>
                */
            ParentReference: ObjectReference | undefined;
            /**
                * <p>The child object reference to be attached to the object.</p>
                */
            ChildReference: ObjectReference | undefined;
            /**
                * <p>The link name with which the child object is attached to the parent.</p>
                */
            LinkName: string | undefined;
    }
    export namespace AttachObjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachObjectRequest) => any;
    }
    export interface AttachObjectResponse {
            /**
                * <p>The attached <code>ObjectIdentifier</code>, which is the child
                *         <code>ObjectIdentifier</code>.</p>
                */
            AttachedObjectIdentifier?: string;
    }
    export namespace AttachObjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachObjectResponse) => any;
    }
    /**
        * <p>Indicates that a link could not be created due to a naming conflict. Choose a different
        *       name and then try again.</p>
        */
    export class LinkNameAlreadyInUseException extends __BaseException {
            readonly name: "LinkNameAlreadyInUseException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LinkNameAlreadyInUseException, __BaseException>);
    }
    export interface AttachPolicyRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the <a>Directory</a>
                *       where both objects reside. For more information, see <a>arns</a>.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>The reference that is associated with the policy object.</p>
                */
            PolicyReference: ObjectReference | undefined;
            /**
                * <p>The reference that identifies the object to which the policy will be
                *       attached.</p>
                */
            ObjectReference: ObjectReference | undefined;
    }
    export namespace AttachPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachPolicyRequest) => any;
    }
    export interface AttachPolicyResponse {
    }
    export namespace AttachPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachPolicyResponse) => any;
    }
    /**
        * <p>Indicates that the requested operation can only operate on policy objects.</p>
        */
    export class NotPolicyException extends __BaseException {
            readonly name: "NotPolicyException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotPolicyException, __BaseException>);
    }
    export interface AttachToIndexRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the directory where the object and index
                *       exist.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>A reference to the index that you are attaching the object to.</p>
                */
            IndexReference: ObjectReference | undefined;
            /**
                * <p>A reference to the object that you are attaching to the index.</p>
                */
            TargetReference: ObjectReference | undefined;
    }
    export namespace AttachToIndexRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachToIndexRequest) => any;
    }
    export interface AttachToIndexResponse {
            /**
                * <p>The <code>ObjectIdentifier</code> of the object that was attached to the index.</p>
                */
            AttachedObjectIdentifier?: string;
    }
    export namespace AttachToIndexResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachToIndexResponse) => any;
    }
    /**
        * <p>An object has been attempted to be attached to an object that does not have the appropriate attribute value.</p>
        */
    export class IndexedAttributeMissingException extends __BaseException {
            readonly name: "IndexedAttributeMissingException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<IndexedAttributeMissingException, __BaseException>);
    }
    /**
        * <p>Indicates that the requested operation can only operate on index objects.</p>
        */
    export class NotIndexException extends __BaseException {
            readonly name: "NotIndexException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotIndexException, __BaseException>);
    }
    /**
        * <p>Identifies the attribute name and value for a typed link.</p>
        */
    export interface AttributeNameAndValue {
            /**
                * <p>The attribute name of the typed link.</p>
                */
            AttributeName: string | undefined;
            /**
                * <p>The value for the typed link.</p>
                */
            Value: TypedAttributeValue | undefined;
    }
    export namespace AttributeNameAndValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttributeNameAndValue) => any;
    }
    /**
        * <p>Identifies the schema Amazon Resource Name (ARN) and facet name for the typed
        *       link.</p>
        */
    export interface TypedLinkSchemaAndFacetName {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the schema. For more
                *       information, see <a>arns</a>.</p>
                */
            SchemaArn: string | undefined;
            /**
                * <p>The unique name of the typed link facet.</p>
                */
            TypedLinkName: string | undefined;
    }
    export namespace TypedLinkSchemaAndFacetName {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TypedLinkSchemaAndFacetName) => any;
    }
    export interface AttachTypedLinkRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the directory where you want to attach the typed
                *       link.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>Identifies the source object that the typed link will attach to.</p>
                */
            SourceObjectReference: ObjectReference | undefined;
            /**
                * <p>Identifies the target object that the typed link will attach to.</p>
                */
            TargetObjectReference: ObjectReference | undefined;
            /**
                * <p>Identifies the typed link facet that is associated with the typed link.</p>
                */
            TypedLinkFacet: TypedLinkSchemaAndFacetName | undefined;
            /**
                * <p>A set of attributes that are associated with the typed link.</p>
                */
            Attributes: AttributeNameAndValue[] | undefined;
    }
    export namespace AttachTypedLinkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachTypedLinkRequest) => any;
    }
    /**
        * <p>Contains all the information that is used to uniquely identify a typed link. The
        *       parameters discussed in this topic are used to uniquely specify the typed link being operated
        *       on. The <a>AttachTypedLink</a> API returns a typed link specifier while the <a>DetachTypedLink</a> API accepts one as input. Similarly, the <a>ListIncomingTypedLinks</a> and <a>ListOutgoingTypedLinks</a> API
        *       operations provide typed link specifiers as output. You can also construct a typed link
        *       specifier from scratch.</p>
        */
    export interface TypedLinkSpecifier {
            /**
                * <p>Identifies the typed link facet that is associated with the typed link.</p>
                */
            TypedLinkFacet: TypedLinkSchemaAndFacetName | undefined;
            /**
                * <p>Identifies the source object that the typed link will attach to.</p>
                */
            SourceObjectReference: ObjectReference | undefined;
            /**
                * <p>Identifies the target object that the typed link will attach to.</p>
                */
            TargetObjectReference: ObjectReference | undefined;
            /**
                * <p>Identifies the attribute value to update.</p>
                */
            IdentityAttributeValues: AttributeNameAndValue[] | undefined;
    }
    export namespace TypedLinkSpecifier {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TypedLinkSpecifier) => any;
    }
    export interface AttachTypedLinkResponse {
            /**
                * <p>Returns a typed link specifier as output.</p>
                */
            TypedLinkSpecifier?: TypedLinkSpecifier;
    }
    export namespace AttachTypedLinkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachTypedLinkResponse) => any;
    }
    export enum ConsistencyLevel {
            EVENTUAL = "EVENTUAL",
            SERIALIZABLE = "SERIALIZABLE"
    }
    /**
        * <p>Retrieves attributes that are associated with a typed link inside a <a>BatchRead</a> operation. For more information, see <a>GetLinkAttributes</a> and <a>BatchReadRequest$Operations</a>.</p>
        */
    export interface BatchGetLinkAttributes {
            /**
                * <p>Allows a typed link specifier to be accepted as input.</p>
                */
            TypedLinkSpecifier: TypedLinkSpecifier | undefined;
            /**
                * <p>A list of attribute names whose values will be retrieved.</p>
                */
            AttributeNames: string[] | undefined;
    }
    export namespace BatchGetLinkAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetLinkAttributes) => any;
    }
    /**
        * <p>Retrieves attributes within a facet that are associated with an object inside an <a>BatchRead</a> operation. For more information, see <a>GetObjectAttributes</a> and <a>BatchReadRequest$Operations</a>.</p>
        */
    export interface BatchGetObjectAttributes {
            /**
                * <p>Reference that identifies the object whose attributes will be retrieved.</p>
                */
            ObjectReference: ObjectReference | undefined;
            /**
                * <p>Identifier for the facet whose attributes will be retrieved. See <a>SchemaFacet</a> for details.</p>
                */
            SchemaFacet: SchemaFacet | undefined;
            /**
                * <p>List of attribute names whose values will be retrieved.</p>
                */
            AttributeNames: string[] | undefined;
    }
    export namespace BatchGetObjectAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetObjectAttributes) => any;
    }
    /**
        * <p>Retrieves metadata about an object inside a <a>BatchRead</a> operation. For more information, see <a>GetObjectInformation</a> and <a>BatchReadRequest$Operations</a>.</p>
        */
    export interface BatchGetObjectInformation {
            /**
                * <p>A reference to the object.</p>
                */
            ObjectReference: ObjectReference | undefined;
    }
    export namespace BatchGetObjectInformation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetObjectInformation) => any;
    }
    /**
        * <p>Lists indices attached to an object inside a <a>BatchRead</a> operation. For more information, see <a>ListAttachedIndices</a> and <a>BatchReadRequest$Operations</a>.</p>
        */
    export interface BatchListAttachedIndices {
            /**
                * <p>A reference to the object that has indices attached.</p>
                */
            TargetReference: ObjectReference | undefined;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to retrieve.</p>
                */
            MaxResults?: number;
    }
    export namespace BatchListAttachedIndices {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchListAttachedIndices) => any;
    }
    export enum RangeMode {
            EXCLUSIVE = "EXCLUSIVE",
            FIRST = "FIRST",
            INCLUSIVE = "INCLUSIVE",
            LAST = "LAST",
            LAST_BEFORE_MISSING_VALUES = "LAST_BEFORE_MISSING_VALUES"
    }
    /**
        * <p>A range of attribute values. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_range_filters.html">Range Filters</a>.</p>
        */
    export interface TypedAttributeValueRange {
            /**
                * <p>The inclusive or exclusive range start.</p>
                */
            StartMode: RangeMode | string | undefined;
            /**
                * <p>The value to start the range at.</p>
                */
            StartValue?: TypedAttributeValue;
            /**
                * <p>The inclusive or exclusive range end.</p>
                */
            EndMode: RangeMode | string | undefined;
            /**
                * <p>The attribute value to terminate the range at.</p>
                */
            EndValue?: TypedAttributeValue;
    }
    export namespace TypedAttributeValueRange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TypedAttributeValueRange) => any;
    }
    /**
        * <p>Identifies the range of attributes that are used by a specified filter.</p>
        */
    export interface TypedLinkAttributeRange {
            /**
                * <p>The unique name of the typed link attribute.</p>
                */
            AttributeName?: string;
            /**
                * <p>The range of attribute values that are being selected.</p>
                */
            Range: TypedAttributeValueRange | undefined;
    }
    export namespace TypedLinkAttributeRange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TypedLinkAttributeRange) => any;
    }
    /**
        * <p>Returns a paginated list of all the incoming <a>TypedLinkSpecifier</a> information for an object inside a <a>BatchRead</a> operation. For more information, see <a>ListIncomingTypedLinks</a> and <a>BatchReadRequest$Operations</a>.</p>
        */
    export interface BatchListIncomingTypedLinks {
            /**
                * <p>The reference that identifies the object whose attributes will be listed.</p>
                */
            ObjectReference: ObjectReference | undefined;
            /**
                * <p>Provides range filters for multiple attributes. When providing ranges to typed link
                *        selection, any inexact ranges must be specified at the end. Any attributes that do not have a
                *        range specified are presumed to match the entire range.</p>
                */
            FilterAttributeRanges?: TypedLinkAttributeRange[];
            /**
                * <p>Filters are interpreted in the order of the attributes on the typed link facet, not the
                *        order in which they are supplied to any API calls.</p>
                */
            FilterTypedLink?: TypedLinkSchemaAndFacetName;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to retrieve.</p>
                */
            MaxResults?: number;
    }
    export namespace BatchListIncomingTypedLinks {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchListIncomingTypedLinks) => any;
    }
    /**
        * <p>A range of attributes.</p>
        */
    export interface ObjectAttributeRange {
            /**
                * <p>The key of the attribute that the attribute range covers.</p>
                */
            AttributeKey?: AttributeKey;
            /**
                * <p>The range of attribute values being selected.</p>
                */
            Range?: TypedAttributeValueRange;
    }
    export namespace ObjectAttributeRange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ObjectAttributeRange) => any;
    }
    /**
        * <p>Lists objects attached to the specified index inside a <a>BatchRead</a> operation. For more information, see <a>ListIndex</a> and <a>BatchReadRequest$Operations</a>.</p>
        */
    export interface BatchListIndex {
            /**
                * <p>Specifies the ranges of indexed values that you want to query.</p>
                */
            RangesOnIndexedValues?: ObjectAttributeRange[];
            /**
                * <p>The reference to the index to list.</p>
                */
            IndexReference: ObjectReference | undefined;
            /**
                * <p>The maximum number of results to retrieve.</p>
                */
            MaxResults?: number;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace BatchListIndex {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchListIndex) => any;
    }
    /**
        * <p>Represents the output of a <a>ListObjectAttributes</a> operation.</p>
        */
    export interface BatchListObjectAttributes {
            /**
                * <p>Reference of the object whose attributes need to be listed.</p>
                */
            ObjectReference: ObjectReference | undefined;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to be retrieved in a single call. This is an approximate
                *       number.</p>
                */
            MaxResults?: number;
            /**
                * <p>Used to filter the list of object attributes that are associated with a certain
                *       facet.</p>
                */
            FacetFilter?: SchemaFacet;
    }
    export namespace BatchListObjectAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchListObjectAttributes) => any;
    }
    /**
        * <p>Represents the output of a <a>ListObjectChildren</a> operation.</p>
        */
    export interface BatchListObjectChildren {
            /**
                * <p>Reference of the object for which child objects are being listed.</p>
                */
            ObjectReference: ObjectReference | undefined;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>Maximum number of items to be retrieved in a single call. This is an approximate
                *        number.</p>
                */
            MaxResults?: number;
    }
    export namespace BatchListObjectChildren {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchListObjectChildren) => any;
    }
    /**
        * <p>Retrieves all available parent paths for any object type such as node, leaf node, policy node, and index node objects inside a <a>BatchRead</a> operation. For more information, see <a>ListObjectParentPaths</a> and <a>BatchReadRequest$Operations</a>.</p>
        */
    export interface BatchListObjectParentPaths {
            /**
                * <p>The reference that identifies the object whose attributes will be listed.</p>
                */
            ObjectReference: ObjectReference | undefined;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to retrieve.</p>
                */
            MaxResults?: number;
    }
    export namespace BatchListObjectParentPaths {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchListObjectParentPaths) => any;
    }
    /**
        * <p>Lists parent objects that are associated with a given object in pagination
        *       fashion.</p>
        */
    export interface BatchListObjectParents {
            /**
                * <p>The reference that identifies an object.</p>
                */
            ObjectReference: ObjectReference | undefined;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to be retrieved in a single call. This is an approximate
                *       number.</p>
                */
            MaxResults?: number;
    }
    export namespace BatchListObjectParents {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchListObjectParents) => any;
    }
    /**
        * <p>Returns policies attached to an object in pagination fashion inside a <a>BatchRead</a> operation. For more information, see <a>ListObjectPolicies</a> and <a>BatchReadRequest$Operations</a>.</p>
        */
    export interface BatchListObjectPolicies {
            /**
                * <p>The reference that identifies the object whose attributes will be listed.</p>
                */
            ObjectReference: ObjectReference | undefined;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to retrieve.</p>
                */
            MaxResults?: number;
    }
    export namespace BatchListObjectPolicies {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchListObjectPolicies) => any;
    }
    /**
        * <p>Returns a paginated list of all the outgoing <a>TypedLinkSpecifier</a> information for an object inside a <a>BatchRead</a> operation. For more information, see <a>ListOutgoingTypedLinks</a> and <a>BatchReadRequest$Operations</a>.</p>
        */
    export interface BatchListOutgoingTypedLinks {
            /**
                * <p>The reference that identifies the object whose attributes will be listed.</p>
                */
            ObjectReference: ObjectReference | undefined;
            /**
                * <p>Provides range filters for multiple attributes. When providing ranges to typed link
                *        selection, any inexact ranges must be specified at the end. Any attributes that do not have a
                *        range specified are presumed to match the entire range.</p>
                */
            FilterAttributeRanges?: TypedLinkAttributeRange[];
            /**
                * <p>Filters are interpreted in the order of the attributes defined on the typed link facet,
                *        not the order they are supplied to any API calls.</p>
                */
            FilterTypedLink?: TypedLinkSchemaAndFacetName;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to retrieve.</p>
                */
            MaxResults?: number;
    }
    export namespace BatchListOutgoingTypedLinks {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchListOutgoingTypedLinks) => any;
    }
    /**
        * <p>Returns all of the <code>ObjectIdentifiers</code> to which a given policy is attached inside a <a>BatchRead</a> operation. For more information, see <a>ListPolicyAttachments</a> and <a>BatchReadRequest$Operations</a>.</p>
        */
    export interface BatchListPolicyAttachments {
            /**
                * <p>The reference that identifies the policy object.</p>
                */
            PolicyReference: ObjectReference | undefined;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to retrieve.</p>
                */
            MaxResults?: number;
    }
    export namespace BatchListPolicyAttachments {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchListPolicyAttachments) => any;
    }
    /**
        * <p>Lists all policies from the root of the Directory to the object specified inside a <a>BatchRead</a> operation. For more information, see <a>LookupPolicy</a> and <a>BatchReadRequest$Operations</a>.</p>
        */
    export interface BatchLookupPolicy {
            /**
                * <p>Reference that identifies the object whose policies will be looked up.</p>
                */
            ObjectReference: ObjectReference | undefined;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to retrieve.</p>
                */
            MaxResults?: number;
    }
    export namespace BatchLookupPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchLookupPolicy) => any;
    }
    /**
        * <p>Represents the output of a <code>BatchRead</code> operation.</p>
        */
    export interface BatchReadOperation {
            /**
                * <p>Lists all attributes that are associated with an object.</p>
                */
            ListObjectAttributes?: BatchListObjectAttributes;
            /**
                * <p>Returns a paginated list of child objects that are associated with a given
                *       object.</p>
                */
            ListObjectChildren?: BatchListObjectChildren;
            /**
                * <p>Lists indices attached to an object.</p>
                */
            ListAttachedIndices?: BatchListAttachedIndices;
            /**
                * <p>Retrieves all available parent paths for any object type such as node, leaf node,
                *        policy node, and index node objects. For more information about objects, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directorystructure.html">Directory Structure</a>.</p>
                */
            ListObjectParentPaths?: BatchListObjectParentPaths;
            /**
                * <p>Retrieves metadata about an object.</p>
                */
            GetObjectInformation?: BatchGetObjectInformation;
            /**
                * <p>Retrieves attributes within a facet that are associated with an object.</p>
                */
            GetObjectAttributes?: BatchGetObjectAttributes;
            /**
                * <p>Lists parent objects that are associated with a given object in pagination
                *       fashion.</p>
                */
            ListObjectParents?: BatchListObjectParents;
            /**
                * <p>Returns policies attached to an object in pagination fashion.</p>
                */
            ListObjectPolicies?: BatchListObjectPolicies;
            /**
                * <p>Returns all of the <code>ObjectIdentifiers</code> to which a given policy is attached.</p>
                */
            ListPolicyAttachments?: BatchListPolicyAttachments;
            /**
                * <p>Lists all policies from the root of the <a>Directory</a> to the object
                *        specified. If there are no policies present, an empty list is returned. If policies are
                *        present, and if some objects don't have the policies attached, it returns the <code>ObjectIdentifier</code>
                *        for such objects. If policies are present, it returns <code>ObjectIdentifier</code>, <code>policyId</code>, and
                *        <code>policyType</code>. Paths that don't lead to the root from the target object are ignored. For more
                *        information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies">Policies</a>.</p>
                */
            LookupPolicy?: BatchLookupPolicy;
            /**
                * <p>Lists objects attached to the specified index.</p>
                */
            ListIndex?: BatchListIndex;
            /**
                * <p>Returns a paginated list of all the outgoing <a>TypedLinkSpecifier</a>
                *        information for an object. It also supports filtering by typed link facet and identity
                *        attributes. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
                */
            ListOutgoingTypedLinks?: BatchListOutgoingTypedLinks;
            /**
                * <p>Returns a paginated list of all the incoming <a>TypedLinkSpecifier</a>
                *        information for an object. It also supports filtering by typed link facet and identity
                *        attributes. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
                */
            ListIncomingTypedLinks?: BatchListIncomingTypedLinks;
            /**
                * <p>Retrieves attributes that are associated with a typed link.</p>
                */
            GetLinkAttributes?: BatchGetLinkAttributes;
    }
    export namespace BatchReadOperation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchReadOperation) => any;
    }
    export interface BatchReadRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the <a>Directory</a>.
                *       For more information, see <a>arns</a>.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>A list of operations that are part of the batch.</p>
                */
            Operations: BatchReadOperation[] | undefined;
            /**
                * <p>Represents the manner and timing in which the successful write or update of an object
                *       is reflected in a subsequent read operation of that same object.</p>
                */
            ConsistencyLevel?: ConsistencyLevel | string;
    }
    export namespace BatchReadRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchReadRequest) => any;
    }
    export enum BatchReadExceptionType {
            AccessDeniedException = "AccessDeniedException",
            CannotListParentOfRootException = "CannotListParentOfRootException",
            DirectoryNotEnabledException = "DirectoryNotEnabledException",
            FacetValidationException = "FacetValidationException",
            InternalServiceException = "InternalServiceException",
            InvalidArnException = "InvalidArnException",
            InvalidNextTokenException = "InvalidNextTokenException",
            LimitExceededException = "LimitExceededException",
            NotIndexException = "NotIndexException",
            NotNodeException = "NotNodeException",
            NotPolicyException = "NotPolicyException",
            ResourceNotFoundException = "ResourceNotFoundException",
            ValidationException = "ValidationException"
    }
    /**
        * <p>The batch read exception structure, which contains the exception type and
        *       message.</p>
        */
    export interface BatchReadException {
            /**
                * <p>A type of exception, such as <code>InvalidArnException</code>.</p>
                */
            Type?: BatchReadExceptionType | string;
            /**
                * <p>An exception message that is associated with the failure.</p>
                */
            Message?: string;
    }
    export namespace BatchReadException {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchReadException) => any;
    }
    /**
        * <p>Represents the output of a <a>GetLinkAttributes</a> response operation.</p>
        */
    export interface BatchGetLinkAttributesResponse {
            /**
                * <p>The attributes that are associated with the typed link.</p>
                */
            Attributes?: AttributeKeyAndValue[];
    }
    export namespace BatchGetLinkAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetLinkAttributesResponse) => any;
    }
    /**
        * <p>Represents the output of a <a>GetObjectAttributes</a> response operation.</p>
        */
    export interface BatchGetObjectAttributesResponse {
            /**
                * <p>The attribute values that are associated with an object.</p>
                */
            Attributes?: AttributeKeyAndValue[];
    }
    export namespace BatchGetObjectAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetObjectAttributesResponse) => any;
    }
    /**
        * <p>Represents the output of a <a>GetObjectInformation</a> response operation.</p>
        */
    export interface BatchGetObjectInformationResponse {
            /**
                * <p>The facets attached to the specified object.</p>
                */
            SchemaFacets?: SchemaFacet[];
            /**
                * <p>The <code>ObjectIdentifier</code> of the specified object.</p>
                */
            ObjectIdentifier?: string;
    }
    export namespace BatchGetObjectInformationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetObjectInformationResponse) => any;
    }
    /**
        * <p>Represents an index and an attached object.</p>
        */
    export interface IndexAttachment {
            /**
                * <p>The indexed attribute values.</p>
                */
            IndexedAttributes?: AttributeKeyAndValue[];
            /**
                * <p>In response to <a>ListIndex</a>, the <code>ObjectIdentifier</code> of the object attached to the index. In response to <a>ListAttachedIndices</a>, the <code>ObjectIdentifier</code> of the index attached to the object. This field will always contain the <code>ObjectIdentifier</code> of the object on the opposite side of the attachment specified in the query.</p>
                */
            ObjectIdentifier?: string;
    }
    export namespace IndexAttachment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IndexAttachment) => any;
    }
    /**
        * <p>Represents the output of a <a>ListAttachedIndices</a> response operation.</p>
        */
    export interface BatchListAttachedIndicesResponse {
            /**
                * <p>The indices attached to the specified object.</p>
                */
            IndexAttachments?: IndexAttachment[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace BatchListAttachedIndicesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchListAttachedIndicesResponse) => any;
    }
    /**
        * <p>Represents the output of a <a>ListIncomingTypedLinks</a> response operation.</p>
        */
    export interface BatchListIncomingTypedLinksResponse {
            /**
                * <p>Returns one or more typed link specifiers as output.</p>
                */
            LinkSpecifiers?: TypedLinkSpecifier[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace BatchListIncomingTypedLinksResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchListIncomingTypedLinksResponse) => any;
    }
    /**
        * <p>Represents the output of a <a>ListIndex</a> response operation.</p>
        */
    export interface BatchListIndexResponse {
            /**
                * <p>The objects and indexed values attached to the index.</p>
                */
            IndexAttachments?: IndexAttachment[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace BatchListIndexResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchListIndexResponse) => any;
    }
    /**
        * <p>Represents the output of a <a>ListObjectAttributes</a> response operation.</p>
        */
    export interface BatchListObjectAttributesResponse {
            /**
                * <p>The attributes map that is associated with the object. <code>AttributeArn</code> is the
                *       key; attribute value is the value.</p>
                */
            Attributes?: AttributeKeyAndValue[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace BatchListObjectAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchListObjectAttributesResponse) => any;
    }
    /**
        * <p>Represents the output of a <a>ListObjectChildren</a> response operation.</p>
        */
    export interface BatchListObjectChildrenResponse {
            /**
                * <p>The children structure, which is a map with the key as the <code>LinkName</code> and
                *         <code>ObjectIdentifier</code> as the value.</p>
                */
            Children?: Record<string, string>;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace BatchListObjectChildrenResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchListObjectChildrenResponse) => any;
    }
    /**
        * <p>Returns the path to the <code>ObjectIdentifiers</code> that is associated with the
        *       directory.</p>
        */
    export interface PathToObjectIdentifiers {
            /**
                * <p>The path that is used to identify the object starting from directory root.</p>
                */
            Path?: string;
            /**
                * <p>Lists <code>ObjectIdentifiers</code> starting from directory root to the object in the
                *       request.</p>
                */
            ObjectIdentifiers?: string[];
    }
    export namespace PathToObjectIdentifiers {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PathToObjectIdentifiers) => any;
    }
    /**
        * <p>Represents the output of a <a>ListObjectParentPaths</a> response operation.</p>
        */
    export interface BatchListObjectParentPathsResponse {
            /**
                * <p>Returns the path to the <code>ObjectIdentifiers</code> that are associated with the
                *        directory.</p>
                */
            PathToObjectIdentifiersList?: PathToObjectIdentifiers[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace BatchListObjectParentPathsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchListObjectParentPathsResponse) => any;
    }
    /**
        * <p>A pair of ObjectIdentifier and LinkName.</p>
        */
    export interface ObjectIdentifierAndLinkNameTuple {
            /**
                * <p>The ID that is associated with the object.</p>
                */
            ObjectIdentifier?: string;
            /**
                * <p>The name of the link between the parent and the child object.</p>
                */
            LinkName?: string;
    }
    export namespace ObjectIdentifierAndLinkNameTuple {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ObjectIdentifierAndLinkNameTuple) => any;
    }
    /**
        * <p>Represents the output of a <a>ListObjectParents</a> response operation.</p>
        */
    export interface BatchListObjectParentsResponse {
            /**
                * <p>Returns a list of parent reference and LinkName Tuples.</p>
                */
            ParentLinks?: ObjectIdentifierAndLinkNameTuple[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace BatchListObjectParentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchListObjectParentsResponse) => any;
    }
    /**
        * <p>Represents the output of a <a>ListObjectPolicies</a> response operation.</p>
        */
    export interface BatchListObjectPoliciesResponse {
            /**
                * <p>A list of policy <code>ObjectIdentifiers</code>, that are attached to the
                *        object.</p>
                */
            AttachedPolicyIds?: string[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace BatchListObjectPoliciesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchListObjectPoliciesResponse) => any;
    }
    /**
        * <p>Represents the output of a <a>ListOutgoingTypedLinks</a> response operation.</p>
        */
    export interface BatchListOutgoingTypedLinksResponse {
            /**
                * <p>Returns a typed link specifier as output.</p>
                */
            TypedLinkSpecifiers?: TypedLinkSpecifier[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace BatchListOutgoingTypedLinksResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchListOutgoingTypedLinksResponse) => any;
    }
    /**
        * <p>Represents the output of a <a>ListPolicyAttachments</a> response operation.</p>
        */
    export interface BatchListPolicyAttachmentsResponse {
            /**
                * <p>A list of <code>ObjectIdentifiers</code> to which the policy is attached.</p>
                */
            ObjectIdentifiers?: string[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace BatchListPolicyAttachmentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchListPolicyAttachmentsResponse) => any;
    }
    /**
        * <p>Contains the <code>PolicyType</code>, <code>PolicyId</code>, and the <code>ObjectIdentifier</code> to which it is
        *       attached. For more
        *       information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies">Policies</a>.</p>
        */
    export interface PolicyAttachment {
            /**
                * <p>The ID of <code>PolicyAttachment</code>.</p>
                */
            PolicyId?: string;
            /**
                * <p>The <code>ObjectIdentifier</code> that is associated with
                *       <code>PolicyAttachment</code>.</p>
                */
            ObjectIdentifier?: string;
            /**
                * <p>The type of policy that can be associated with <code>PolicyAttachment</code>.</p>
                */
            PolicyType?: string;
    }
    export namespace PolicyAttachment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PolicyAttachment) => any;
    }
    /**
        * <p>Used when a regular object exists in a <a>Directory</a> and you want to find
        *       all of the policies that are associated with that object and the parent to that
        *       object.</p>
        */
    export interface PolicyToPath {
            /**
                * <p>The path that is referenced from the root.</p>
                */
            Path?: string;
            /**
                * <p>List of policy objects.</p>
                */
            Policies?: PolicyAttachment[];
    }
    export namespace PolicyToPath {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PolicyToPath) => any;
    }
    /**
        * <p>Represents the output of a <a>LookupPolicy</a> response operation.</p>
        */
    export interface BatchLookupPolicyResponse {
            /**
                * <p>Provides list of path to policies. Policies contain <code>PolicyId</code>, <code>ObjectIdentifier</code>, and
                *        <code>PolicyType</code>. For more
                *        information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies">Policies</a>.</p>
                */
            PolicyToPathList?: PolicyToPath[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace BatchLookupPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchLookupPolicyResponse) => any;
    }
    /**
        * <p>Represents the output of a <code>BatchRead</code> success response operation.</p>
        */
    export interface BatchReadSuccessfulResponse {
            /**
                * <p>Lists all attributes that are associated with an object.</p>
                */
            ListObjectAttributes?: BatchListObjectAttributesResponse;
            /**
                * <p>Returns a paginated list of child objects that are associated with a given
                *       object.</p>
                */
            ListObjectChildren?: BatchListObjectChildrenResponse;
            /**
                * <p>Retrieves metadata about an object.</p>
                */
            GetObjectInformation?: BatchGetObjectInformationResponse;
            /**
                * <p>Retrieves attributes within a facet that are associated with an object.</p>
                */
            GetObjectAttributes?: BatchGetObjectAttributesResponse;
            /**
                * <p>Lists indices attached to an object.</p>
                */
            ListAttachedIndices?: BatchListAttachedIndicesResponse;
            /**
                * <p>Retrieves all available parent paths for any object type such as node, leaf node,
                *        policy node, and index node objects. For more information about objects, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directorystructure.html">Directory Structure</a>.</p>
                */
            ListObjectParentPaths?: BatchListObjectParentPathsResponse;
            /**
                * <p>Returns policies attached to an object in pagination fashion.</p>
                */
            ListObjectPolicies?: BatchListObjectPoliciesResponse;
            /**
                * <p>Returns all of the <code>ObjectIdentifiers</code> to which a given policy is attached.</p>
                */
            ListPolicyAttachments?: BatchListPolicyAttachmentsResponse;
            /**
                * <p>Lists all policies from the root of the <a>Directory</a> to the object
                *        specified. If there are no policies present, an empty list is returned. If policies are
                *        present, and if some objects don't have the policies attached, it returns the <code>ObjectIdentifier</code>
                *        for such objects. If policies are present, it returns <code>ObjectIdentifier</code>, <code>policyId</code>, and
                *        <code>policyType</code>. Paths that don't lead to the root from the target object are ignored. For more
                *        information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies">Policies</a>.</p>
                */
            LookupPolicy?: BatchLookupPolicyResponse;
            /**
                * <p>Lists objects attached to the specified index.</p>
                */
            ListIndex?: BatchListIndexResponse;
            /**
                * <p>Returns a paginated list of all the outgoing <a>TypedLinkSpecifier</a>
                *        information for an object. It also supports filtering by typed link facet and identity
                *        attributes. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
                */
            ListOutgoingTypedLinks?: BatchListOutgoingTypedLinksResponse;
            /**
                * <p>Returns a paginated list of all the incoming <a>TypedLinkSpecifier</a>
                *        information for an object. It also supports filtering by typed link facet and identity
                *        attributes. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
                */
            ListIncomingTypedLinks?: BatchListIncomingTypedLinksResponse;
            /**
                * <p>The list of attributes to retrieve from the typed link.</p>
                */
            GetLinkAttributes?: BatchGetLinkAttributesResponse;
            /**
                * <p>The list of parent objects to retrieve.</p>
                */
            ListObjectParents?: BatchListObjectParentsResponse;
    }
    export namespace BatchReadSuccessfulResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchReadSuccessfulResponse) => any;
    }
    /**
        * <p>Represents the output of a <code>BatchRead</code> response operation.</p>
        */
    export interface BatchReadOperationResponse {
            /**
                * <p>Identifies which operation in a batch has succeeded.</p>
                */
            SuccessfulResponse?: BatchReadSuccessfulResponse;
            /**
                * <p>Identifies which operation in a batch has failed.</p>
                */
            ExceptionResponse?: BatchReadException;
    }
    export namespace BatchReadOperationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchReadOperationResponse) => any;
    }
    export interface BatchReadResponse {
            /**
                * <p>A list of all the responses for each batch read.</p>
                */
            Responses?: BatchReadOperationResponse[];
    }
    export namespace BatchReadResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchReadResponse) => any;
    }
    export enum BatchWriteExceptionType {
            AccessDeniedException = "AccessDeniedException",
            DirectoryNotEnabledException = "DirectoryNotEnabledException",
            FacetValidationException = "FacetValidationException",
            IndexedAttributeMissingException = "IndexedAttributeMissingException",
            InternalServiceException = "InternalServiceException",
            InvalidArnException = "InvalidArnException",
            InvalidAttachmentException = "InvalidAttachmentException",
            LimitExceededException = "LimitExceededException",
            LinkNameAlreadyInUseException = "LinkNameAlreadyInUseException",
            NotIndexException = "NotIndexException",
            NotNodeException = "NotNodeException",
            NotPolicyException = "NotPolicyException",
            ObjectAlreadyDetachedException = "ObjectAlreadyDetachedException",
            ObjectNotDetachedException = "ObjectNotDetachedException",
            ResourceNotFoundException = "ResourceNotFoundException",
            StillContainsLinksException = "StillContainsLinksException",
            UnsupportedIndexTypeException = "UnsupportedIndexTypeException",
            ValidationException = "ValidationException"
    }
    /**
        * <p>A <code>BatchWrite</code> exception has occurred.</p>
        */
    export class BatchWriteException extends __BaseException {
            readonly name: "BatchWriteException";
            readonly $fault: "client";
            Index?: number;
            Type?: BatchWriteExceptionType | string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BatchWriteException, __BaseException>);
    }
    /**
        * <p>Represents the output of a batch add facet to object operation.</p>
        */
    export interface BatchAddFacetToObject {
            /**
                * <p>Represents the facet being added to the object.</p>
                */
            SchemaFacet: SchemaFacet | undefined;
            /**
                * <p>The attributes to set on the object.</p>
                */
            ObjectAttributeList: AttributeKeyAndValue[] | undefined;
            /**
                * <p>A reference to the object being mutated.</p>
                */
            ObjectReference: ObjectReference | undefined;
    }
    export namespace BatchAddFacetToObject {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchAddFacetToObject) => any;
    }
    /**
        * <p>Represents the output of an <a>AttachObject</a> operation.</p>
        */
    export interface BatchAttachObject {
            /**
                * <p>The parent object reference.</p>
                */
            ParentReference: ObjectReference | undefined;
            /**
                * <p>The child object reference that is to be attached to the object.</p>
                */
            ChildReference: ObjectReference | undefined;
            /**
                * <p>The name of the link.</p>
                */
            LinkName: string | undefined;
    }
    export namespace BatchAttachObject {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchAttachObject) => any;
    }
    /**
        * <p>Attaches a policy object to a regular object inside a <a>BatchRead</a> operation. For more information, see <a>AttachPolicy</a> and <a>BatchReadRequest$Operations</a>.</p>
        */
    export interface BatchAttachPolicy {
            /**
                * <p>The reference that is associated with the policy object.</p>
                */
            PolicyReference: ObjectReference | undefined;
            /**
                * <p>The reference that identifies the object to which the policy will be
                *        attached.</p>
                */
            ObjectReference: ObjectReference | undefined;
    }
    export namespace BatchAttachPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchAttachPolicy) => any;
    }
    /**
        * <p>Attaches the specified object to the specified index inside a <a>BatchRead</a> operation. For more information, see <a>AttachToIndex</a> and <a>BatchReadRequest$Operations</a>.</p>
        */
    export interface BatchAttachToIndex {
            /**
                * <p>A reference to the index that you are attaching the object to.</p>
                */
            IndexReference: ObjectReference | undefined;
            /**
                * <p>A reference to the object that you are attaching to the index.</p>
                */
            TargetReference: ObjectReference | undefined;
    }
    export namespace BatchAttachToIndex {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchAttachToIndex) => any;
    }
    /**
        * <p>Attaches a typed link to a specified source and target object inside a <a>BatchRead</a> operation. For more information, see <a>AttachTypedLink</a> and <a>BatchReadRequest$Operations</a>.</p>
        */
    export interface BatchAttachTypedLink {
            /**
                * <p>Identifies the source object that the typed link will attach to.</p>
                */
            SourceObjectReference: ObjectReference | undefined;
            /**
                * <p>Identifies the target object that the typed link will attach to.</p>
                */
            TargetObjectReference: ObjectReference | undefined;
            /**
                * <p>Identifies the typed link facet that is associated with the typed link.</p>
                */
            TypedLinkFacet: TypedLinkSchemaAndFacetName | undefined;
            /**
                * <p>A set of attributes that are associated with the typed link.</p>
                */
            Attributes: AttributeNameAndValue[] | undefined;
    }
    export namespace BatchAttachTypedLink {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchAttachTypedLink) => any;
    }
    /**
        * <p>Creates an index object inside of a <a>BatchRead</a> operation. For more information, see <a>CreateIndex</a> and <a>BatchReadRequest$Operations</a>.</p>
        */
    export interface BatchCreateIndex {
            /**
                * <p>Specifies the attributes that should be indexed on. Currently only a single attribute
                *        is supported.</p>
                */
            OrderedIndexedAttributeList: AttributeKey[] | undefined;
            /**
                * <p>Indicates whether the attribute that is being indexed has unique values or
                *        not.</p>
                */
            IsUnique: boolean | undefined;
            /**
                * <p>A reference to the parent object that contains the index object.</p>
                */
            ParentReference?: ObjectReference;
            /**
                * <p>The name of the link between the parent object and the index object.</p>
                */
            LinkName?: string;
            /**
                * <p>The batch reference name. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/transaction_support.html">Transaction Support</a> for more information.</p>
                */
            BatchReferenceName?: string;
    }
    export namespace BatchCreateIndex {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchCreateIndex) => any;
    }
    /**
        * <p>Represents the output of a <a>CreateObject</a> operation.</p>
        */
    export interface BatchCreateObject {
            /**
                * <p>A list of <code>FacetArns</code> that will be associated with the object. For more
                *       information, see <a>arns</a>.</p>
                */
            SchemaFacet: SchemaFacet[] | undefined;
            /**
                * <p>An attribute map, which contains an attribute ARN as the key and attribute value as
                *       the map value.</p>
                */
            ObjectAttributeList: AttributeKeyAndValue[] | undefined;
            /**
                * <p>If specified, the parent reference to which this object will be attached.</p>
                */
            ParentReference?: ObjectReference;
            /**
                * <p>The name of the link.</p>
                */
            LinkName?: string;
            /**
                * <p>The batch reference name. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/transaction_support.html">Transaction Support</a> for more information.</p>
                */
            BatchReferenceName?: string;
    }
    export namespace BatchCreateObject {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchCreateObject) => any;
    }
    /**
        * <p>Represents the output of a <a>DeleteObject</a> operation.</p>
        */
    export interface BatchDeleteObject {
            /**
                * <p>The reference that identifies the object.</p>
                */
            ObjectReference: ObjectReference | undefined;
    }
    export namespace BatchDeleteObject {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteObject) => any;
    }
    /**
        * <p>Detaches the specified object from the specified index inside a <a>BatchRead</a> operation. For more information, see <a>DetachFromIndex</a> and <a>BatchReadRequest$Operations</a>.</p>
        */
    export interface BatchDetachFromIndex {
            /**
                * <p>A reference to the index object.</p>
                */
            IndexReference: ObjectReference | undefined;
            /**
                * <p>A reference to the object being detached from the index.</p>
                */
            TargetReference: ObjectReference | undefined;
    }
    export namespace BatchDetachFromIndex {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetachFromIndex) => any;
    }
    /**
        * <p>Represents the output of a <a>DetachObject</a> operation.</p>
        */
    export interface BatchDetachObject {
            /**
                * <p>Parent reference from which the object with the specified link name is
                *       detached.</p>
                */
            ParentReference: ObjectReference | undefined;
            /**
                * <p>The name of the link.</p>
                */
            LinkName: string | undefined;
            /**
                * <p>The batch reference name. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/transaction_support.html">Transaction Support</a> for more information.</p>
                */
            BatchReferenceName?: string;
    }
    export namespace BatchDetachObject {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetachObject) => any;
    }
    /**
        * <p>Detaches the specified policy from the specified directory inside a <a>BatchWrite</a> operation. For more information, see <a>DetachPolicy</a> and <a>BatchWriteRequest$Operations</a>.</p>
        */
    export interface BatchDetachPolicy {
            /**
                * <p>Reference that identifies the policy object.</p>
                */
            PolicyReference: ObjectReference | undefined;
            /**
                * <p>Reference that identifies the object whose policy object will be detached.</p>
                */
            ObjectReference: ObjectReference | undefined;
    }
    export namespace BatchDetachPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetachPolicy) => any;
    }
    /**
        * <p>Detaches a typed link from a specified source and target object inside a <a>BatchRead</a> operation. For more information, see <a>DetachTypedLink</a> and <a>BatchReadRequest$Operations</a>.</p>
        */
    export interface BatchDetachTypedLink {
            /**
                * <p>Used to accept a typed link specifier as input.</p>
                */
            TypedLinkSpecifier: TypedLinkSpecifier | undefined;
    }
    export namespace BatchDetachTypedLink {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetachTypedLink) => any;
    }
    /**
        * <p>A batch operation to remove a facet from an object.</p>
        */
    export interface BatchRemoveFacetFromObject {
            /**
                * <p>The facet to remove from the object.</p>
                */
            SchemaFacet: SchemaFacet | undefined;
            /**
                * <p>A reference to the object whose facet will be removed.</p>
                */
            ObjectReference: ObjectReference | undefined;
    }
    export namespace BatchRemoveFacetFromObject {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchRemoveFacetFromObject) => any;
    }
    export enum UpdateActionType {
            CREATE_OR_UPDATE = "CREATE_OR_UPDATE",
            DELETE = "DELETE"
    }
    /**
        * <p>The action to take on a typed link attribute value. Updates are only supported for attributes which don’t contribute to link identity.</p>
        */
    export interface LinkAttributeAction {
            /**
                * <p>A type that can be either <code>UPDATE_OR_CREATE</code> or <code>DELETE</code>.</p>
                */
            AttributeActionType?: UpdateActionType | string;
            /**
                * <p>The value that you want to update to.</p>
                */
            AttributeUpdateValue?: TypedAttributeValue;
    }
    export namespace LinkAttributeAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LinkAttributeAction) => any;
    }
    /**
        * <p>Structure that contains attribute update information.</p>
        */
    export interface LinkAttributeUpdate {
            /**
                * <p>The key of the attribute being updated.</p>
                */
            AttributeKey?: AttributeKey;
            /**
                * <p>The action to perform as part of the attribute update.</p>
                */
            AttributeAction?: LinkAttributeAction;
    }
    export namespace LinkAttributeUpdate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LinkAttributeUpdate) => any;
    }
    /**
        * <p>Updates a given typed link’s attributes inside a <a>BatchRead</a> operation. Attributes to be updated must not contribute to the typed link’s identity, as defined by its <code>IdentityAttributeOrder</code>. For more information, see <a>UpdateLinkAttributes</a> and <a>BatchReadRequest$Operations</a>.</p>
        */
    export interface BatchUpdateLinkAttributes {
            /**
                * <p>Allows a typed link specifier to be accepted as input.</p>
                */
            TypedLinkSpecifier: TypedLinkSpecifier | undefined;
            /**
                * <p>The attributes update structure.</p>
                */
            AttributeUpdates: LinkAttributeUpdate[] | undefined;
    }
    export namespace BatchUpdateLinkAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchUpdateLinkAttributes) => any;
    }
    /**
        * <p>The action to take on the object attribute.</p>
        */
    export interface ObjectAttributeAction {
            /**
                * <p>A type that can be either <code>Update</code> or <code>Delete</code>.</p>
                */
            ObjectAttributeActionType?: UpdateActionType | string;
            /**
                * <p>The value that you want to update to.</p>
                */
            ObjectAttributeUpdateValue?: TypedAttributeValue;
    }
    export namespace ObjectAttributeAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ObjectAttributeAction) => any;
    }
    /**
        * <p>Structure that contains attribute update information.</p>
        */
    export interface ObjectAttributeUpdate {
            /**
                * <p>The key of the attribute being updated.</p>
                */
            ObjectAttributeKey?: AttributeKey;
            /**
                * <p>The action to perform as part of the attribute update.</p>
                */
            ObjectAttributeAction?: ObjectAttributeAction;
    }
    export namespace ObjectAttributeUpdate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ObjectAttributeUpdate) => any;
    }
    /**
        * <p>Represents the output of a <code>BatchUpdate</code> operation. </p>
        */
    export interface BatchUpdateObjectAttributes {
            /**
                * <p>Reference that identifies the object.</p>
                */
            ObjectReference: ObjectReference | undefined;
            /**
                * <p>Attributes update structure.</p>
                */
            AttributeUpdates: ObjectAttributeUpdate[] | undefined;
    }
    export namespace BatchUpdateObjectAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchUpdateObjectAttributes) => any;
    }
    /**
        * <p>Represents the output of a <code>BatchWrite</code> operation. </p>
        */
    export interface BatchWriteOperation {
            /**
                * <p>Creates an object.</p>
                */
            CreateObject?: BatchCreateObject;
            /**
                * <p>Attaches an object to a <a>Directory</a>.</p>
                */
            AttachObject?: BatchAttachObject;
            /**
                * <p>Detaches an object from a <a>Directory</a>.</p>
                */
            DetachObject?: BatchDetachObject;
            /**
                * <p>Updates a given object's attributes.</p>
                */
            UpdateObjectAttributes?: BatchUpdateObjectAttributes;
            /**
                * <p>Deletes an object in a <a>Directory</a>.</p>
                */
            DeleteObject?: BatchDeleteObject;
            /**
                * <p>A batch operation that adds a facet to an object.</p>
                */
            AddFacetToObject?: BatchAddFacetToObject;
            /**
                * <p>A batch operation that removes a facet from an object.</p>
                */
            RemoveFacetFromObject?: BatchRemoveFacetFromObject;
            /**
                * <p>Attaches a policy object to a regular object. An object can have a limited number of attached
                *        policies.</p>
                */
            AttachPolicy?: BatchAttachPolicy;
            /**
                * <p>Detaches a policy from a <a>Directory</a>.</p>
                */
            DetachPolicy?: BatchDetachPolicy;
            /**
                * <p>Creates an index object. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/indexing_search.htm">Indexing and search</a> for more information.</p>
                */
            CreateIndex?: BatchCreateIndex;
            /**
                * <p>Attaches the specified object to the specified index.</p>
                */
            AttachToIndex?: BatchAttachToIndex;
            /**
                * <p>Detaches the specified object from the specified index.</p>
                */
            DetachFromIndex?: BatchDetachFromIndex;
            /**
                * <p>Attaches a typed link to a specified source and target object. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
                */
            AttachTypedLink?: BatchAttachTypedLink;
            /**
                * <p>Detaches a typed link from a specified source and target object. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
                */
            DetachTypedLink?: BatchDetachTypedLink;
            /**
                * <p>Updates a given object's attributes.</p>
                */
            UpdateLinkAttributes?: BatchUpdateLinkAttributes;
    }
    export namespace BatchWriteOperation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchWriteOperation) => any;
    }
    export interface BatchWriteRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the <a>Directory</a>.
                *       For more information, see <a>arns</a>.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>A list of operations that are part of the batch.</p>
                */
            Operations: BatchWriteOperation[] | undefined;
    }
    export namespace BatchWriteRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchWriteRequest) => any;
    }
    /**
        * <p>The result of a batch add facet to object operation.</p>
        */
    export interface BatchAddFacetToObjectResponse {
    }
    export namespace BatchAddFacetToObjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchAddFacetToObjectResponse) => any;
    }
    /**
        * <p>Represents the output batch <a>AttachObject</a> response operation.</p>
        */
    export interface BatchAttachObjectResponse {
            /**
                * <p>The <code>ObjectIdentifier</code> of the object that has been attached.</p>
                */
            attachedObjectIdentifier?: string;
    }
    export namespace BatchAttachObjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchAttachObjectResponse) => any;
    }
    /**
        * <p>Represents the output of an <a>AttachPolicy</a> response
        *       operation.</p>
        */
    export interface BatchAttachPolicyResponse {
    }
    export namespace BatchAttachPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchAttachPolicyResponse) => any;
    }
    /**
        * <p>Represents the output of a <a>AttachToIndex</a> response operation.</p>
        */
    export interface BatchAttachToIndexResponse {
            /**
                * <p>The <code>ObjectIdentifier</code> of the object that was attached to the index.</p>
                */
            AttachedObjectIdentifier?: string;
    }
    export namespace BatchAttachToIndexResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchAttachToIndexResponse) => any;
    }
    /**
        * <p>Represents the output of a <a>AttachTypedLink</a> response operation.</p>
        */
    export interface BatchAttachTypedLinkResponse {
            /**
                * <p>Returns a typed link specifier as output.</p>
                */
            TypedLinkSpecifier?: TypedLinkSpecifier;
    }
    export namespace BatchAttachTypedLinkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchAttachTypedLinkResponse) => any;
    }
    /**
        * <p>Represents the output of a <a>CreateIndex</a> response operation.</p>
        */
    export interface BatchCreateIndexResponse {
            /**
                * <p>The <code>ObjectIdentifier</code> of the index created by this operation.</p>
                */
            ObjectIdentifier?: string;
    }
    export namespace BatchCreateIndexResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchCreateIndexResponse) => any;
    }
    /**
        * <p>Represents the output of a <a>CreateObject</a> response operation.</p>
        */
    export interface BatchCreateObjectResponse {
            /**
                * <p>The ID that is associated with the object.</p>
                */
            ObjectIdentifier?: string;
    }
    export namespace BatchCreateObjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchCreateObjectResponse) => any;
    }
    /**
        * <p>Represents the output of a <a>DeleteObject</a> response operation.</p>
        */
    export interface BatchDeleteObjectResponse {
    }
    export namespace BatchDeleteObjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteObjectResponse) => any;
    }
    /**
        * <p>Represents the output of a <a>DetachFromIndex</a> response operation.</p>
        */
    export interface BatchDetachFromIndexResponse {
            /**
                * <p>The <code>ObjectIdentifier</code> of the object that was detached from the index.</p>
                */
            DetachedObjectIdentifier?: string;
    }
    export namespace BatchDetachFromIndexResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetachFromIndexResponse) => any;
    }
    /**
        * <p>Represents the output of a <a>DetachObject</a> response operation.</p>
        */
    export interface BatchDetachObjectResponse {
            /**
                * <p>The <code>ObjectIdentifier</code> of the detached object.</p>
                */
            detachedObjectIdentifier?: string;
    }
    export namespace BatchDetachObjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetachObjectResponse) => any;
    }
    /**
        * <p>Represents the output of a <a>DetachPolicy</a> response operation.</p>
        */
    export interface BatchDetachPolicyResponse {
    }
    export namespace BatchDetachPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetachPolicyResponse) => any;
    }
    /**
        * <p>Represents the output of a <a>DetachTypedLink</a> response operation.</p>
        */
    export interface BatchDetachTypedLinkResponse {
    }
    export namespace BatchDetachTypedLinkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDetachTypedLinkResponse) => any;
    }
    /**
        * <p>An empty result that represents success.</p>
        */
    export interface BatchRemoveFacetFromObjectResponse {
    }
    export namespace BatchRemoveFacetFromObjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchRemoveFacetFromObjectResponse) => any;
    }
    /**
        * <p>Represents the output of a <a>UpdateLinkAttributes</a> response operation.</p>
        */
    export interface BatchUpdateLinkAttributesResponse {
    }
    export namespace BatchUpdateLinkAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchUpdateLinkAttributesResponse) => any;
    }
    /**
        * <p>Represents the output of a <code>BatchUpdate</code> response operation.</p>
        */
    export interface BatchUpdateObjectAttributesResponse {
            /**
                * <p>ID that is associated with the object.</p>
                */
            ObjectIdentifier?: string;
    }
    export namespace BatchUpdateObjectAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchUpdateObjectAttributesResponse) => any;
    }
    /**
        * <p>Represents the output of a <code>BatchWrite</code> response operation.</p>
        */
    export interface BatchWriteOperationResponse {
            /**
                * <p>Creates an object in a <a>Directory</a>.</p>
                */
            CreateObject?: BatchCreateObjectResponse;
            /**
                * <p>Attaches an object to a <a>Directory</a>.</p>
                */
            AttachObject?: BatchAttachObjectResponse;
            /**
                * <p>Detaches an object from a <a>Directory</a>.</p>
                */
            DetachObject?: BatchDetachObjectResponse;
            /**
                * <p>Updates a given object’s attributes.</p>
                */
            UpdateObjectAttributes?: BatchUpdateObjectAttributesResponse;
            /**
                * <p>Deletes an object in a <a>Directory</a>.</p>
                */
            DeleteObject?: BatchDeleteObjectResponse;
            /**
                * <p>The result of an add facet to object batch operation.</p>
                */
            AddFacetToObject?: BatchAddFacetToObjectResponse;
            /**
                * <p>The result of a batch remove facet from object operation.</p>
                */
            RemoveFacetFromObject?: BatchRemoveFacetFromObjectResponse;
            /**
                * <p>Attaches a policy object to a regular object. An object can have a limited number of attached
                *        policies.</p>
                */
            AttachPolicy?: BatchAttachPolicyResponse;
            /**
                * <p>Detaches a policy from a <a>Directory</a>.</p>
                */
            DetachPolicy?: BatchDetachPolicyResponse;
            /**
                * <p>Creates an index object. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/indexing_search.htm">Indexing and search</a> for more information.</p>
                */
            CreateIndex?: BatchCreateIndexResponse;
            /**
                * <p>Attaches the specified object to the specified index.</p>
                */
            AttachToIndex?: BatchAttachToIndexResponse;
            /**
                * <p>Detaches the specified object from the specified index.</p>
                */
            DetachFromIndex?: BatchDetachFromIndexResponse;
            /**
                * <p>Attaches a typed link to a specified source and target object. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
                */
            AttachTypedLink?: BatchAttachTypedLinkResponse;
            /**
                * <p>Detaches a typed link from a specified source and target object. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
                */
            DetachTypedLink?: BatchDetachTypedLinkResponse;
            /**
                * <p>Represents the output of a <code>BatchWrite</code> response operation.</p>
                */
            UpdateLinkAttributes?: BatchUpdateLinkAttributesResponse;
    }
    export namespace BatchWriteOperationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchWriteOperationResponse) => any;
    }
    export interface BatchWriteResponse {
            /**
                * <p>A list of all the responses for each batch write.</p>
                */
            Responses?: BatchWriteOperationResponse[];
    }
    export namespace BatchWriteResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchWriteResponse) => any;
    }
    export interface CreateDirectoryRequest {
            /**
                * <p>The name of the <a>Directory</a>. Should be unique per account, per
                *       region.</p>
                */
            Name: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the published schema that will be copied into the
                *       data <a>Directory</a>. For more information, see <a>arns</a>.</p>
                */
            SchemaArn: string | undefined;
    }
    export namespace CreateDirectoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDirectoryRequest) => any;
    }
    export interface CreateDirectoryResponse {
            /**
                * <p>The ARN that is associated with the <a>Directory</a>. For more information,
                *       see <a>arns</a>.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>The name of the <a>Directory</a>.</p>
                */
            Name: string | undefined;
            /**
                * <p>The root object node of the created directory.</p>
                */
            ObjectIdentifier: string | undefined;
            /**
                * <p>The ARN of the published schema in the <a>Directory</a>. Once a published
                *       schema is copied into the directory, it has its own ARN, which is referred to applied schema
                *       ARN. For more information, see <a>arns</a>.</p>
                */
            AppliedSchemaArn: string | undefined;
    }
    export namespace CreateDirectoryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDirectoryResponse) => any;
    }
    /**
        * <p>Indicates that a <a>Directory</a> could not be created due to a naming
        *       conflict. Choose a different name and try again.</p>
        */
    export class DirectoryAlreadyExistsException extends __BaseException {
            readonly name: "DirectoryAlreadyExistsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DirectoryAlreadyExistsException, __BaseException>);
    }
    export enum RuleType {
            BINARY_LENGTH = "BINARY_LENGTH",
            NUMBER_COMPARISON = "NUMBER_COMPARISON",
            STRING_FROM_SET = "STRING_FROM_SET",
            STRING_LENGTH = "STRING_LENGTH"
    }
    /**
        * <p>Contains an Amazon Resource Name (ARN) and parameters that are associated with the
        *       rule.</p>
        */
    export interface Rule {
            /**
                * <p>The type of attribute validation rule.</p>
                */
            Type?: RuleType | string;
            /**
                * <p>The minimum and maximum parameters that are associated with the rule.</p>
                */
            Parameters?: Record<string, string>;
    }
    export namespace Rule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Rule) => any;
    }
    export enum FacetAttributeType {
            BINARY = "BINARY",
            BOOLEAN = "BOOLEAN",
            DATETIME = "DATETIME",
            NUMBER = "NUMBER",
            STRING = "STRING",
            VARIANT = "VARIANT"
    }
    /**
        * <p>A facet attribute definition. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_attributereferences.html">Attribute References</a> for more information.</p>
        */
    export interface FacetAttributeDefinition {
            /**
                * <p>The type of the attribute.</p>
                */
            Type: FacetAttributeType | string | undefined;
            /**
                * <p>The default value of the attribute (if configured).</p>
                */
            DefaultValue?: TypedAttributeValue;
            /**
                * <p>Whether the attribute is mutable or not.</p>
                */
            IsImmutable?: boolean;
            /**
                * <p>Validation rules attached to the attribute definition.</p>
                */
            Rules?: Record<string, Rule>;
    }
    export namespace FacetAttributeDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FacetAttributeDefinition) => any;
    }
    /**
        * <p>The facet attribute reference that specifies the attribute definition that contains the
        *       attribute facet name and attribute name.</p>
        */
    export interface FacetAttributeReference {
            /**
                * <p>The target facet name that is associated with the facet reference. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_attributereferences.html">Attribute References</a> for more information.</p>
                */
            TargetFacetName: string | undefined;
            /**
                * <p>The target attribute name that is associated with the facet reference. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_attributereferences.html">Attribute References</a> for more information.</p>
                */
            TargetAttributeName: string | undefined;
    }
    export namespace FacetAttributeReference {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FacetAttributeReference) => any;
    }
    export enum RequiredAttributeBehavior {
            NOT_REQUIRED = "NOT_REQUIRED",
            REQUIRED_ALWAYS = "REQUIRED_ALWAYS"
    }
    /**
        * <p>An attribute that is associated with the <a>Facet</a>.</p>
        */
    export interface FacetAttribute {
            /**
                * <p>The name of the facet attribute.</p>
                */
            Name: string | undefined;
            /**
                * <p>A facet attribute consists of either a definition or a reference. This structure
                *       contains the attribute definition. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_attributereferences.html">Attribute References</a> for more information.</p>
                */
            AttributeDefinition?: FacetAttributeDefinition;
            /**
                * <p>An attribute reference that is associated with the attribute. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_attributereferences.html">Attribute References</a> for more information.</p>
                */
            AttributeReference?: FacetAttributeReference;
            /**
                * <p>The required behavior of the <code>FacetAttribute</code>.</p>
                */
            RequiredBehavior?: RequiredAttributeBehavior | string;
    }
    export namespace FacetAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FacetAttribute) => any;
    }
    export enum FacetStyle {
            DYNAMIC = "DYNAMIC",
            STATIC = "STATIC"
    }
    export enum ObjectType {
            INDEX = "INDEX",
            LEAF_NODE = "LEAF_NODE",
            NODE = "NODE",
            POLICY = "POLICY"
    }
    export interface CreateFacetRequest {
            /**
                * <p>The schema ARN in which the new <a>Facet</a> will be created. For more
                *       information, see <a>arns</a>.</p>
                */
            SchemaArn: string | undefined;
            /**
                * <p>The name of the <a>Facet</a>, which is unique for a given schema.</p>
                */
            Name: string | undefined;
            /**
                * <p>The attributes that are associated with the <a>Facet</a>.</p>
                */
            Attributes?: FacetAttribute[];
            /**
                * <p>Specifies whether a given object created from this facet is of type node, leaf node,
                *       policy or index.</p>
                *          <ul>
                *             <li>
                *                <p>Node: Can have multiple children but one parent.</p>
                *             </li>
                *          </ul>
                *          <ul>
                *             <li>
                *                <p>Leaf node: Cannot have children but can have multiple parents.</p>
                *             </li>
                *          </ul>
                *          <ul>
                *             <li>
                *                <p>Policy: Allows you to store a policy document and policy type. For more
                *         information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies">Policies</a>.</p>
                *             </li>
                *          </ul>
                *          <ul>
                *             <li>
                *                <p>Index: Can be created with the Index API.</p>
                *             </li>
                *          </ul>
                */
            ObjectType?: ObjectType | string;
            /**
                * <p>There are two different styles that you can define on any given facet, <code>Static</code> and <code>Dynamic</code>. For static facets, all attributes must be defined in the schema. For dynamic facets, attributes can be defined during data plane operations.</p>
                */
            FacetStyle?: FacetStyle | string;
    }
    export namespace CreateFacetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFacetRequest) => any;
    }
    export interface CreateFacetResponse {
    }
    export namespace CreateFacetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFacetResponse) => any;
    }
    /**
        * <p>A facet with the same name already exists.</p>
        */
    export class FacetAlreadyExistsException extends __BaseException {
            readonly name: "FacetAlreadyExistsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<FacetAlreadyExistsException, __BaseException>);
    }
    /**
        * <p>Occurs when any of the rule parameter keys or values are invalid.</p>
        */
    export class InvalidRuleException extends __BaseException {
            readonly name: "InvalidRuleException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRuleException, __BaseException>);
    }
    export interface CreateIndexRequest {
            /**
                * <p>The ARN of the directory where the index should be created.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>Specifies the attributes that should be indexed on. Currently only a single attribute
                *       is supported.</p>
                */
            OrderedIndexedAttributeList: AttributeKey[] | undefined;
            /**
                * <p>Indicates whether the attribute that is being indexed has unique values or
                *       not.</p>
                */
            IsUnique: boolean | undefined;
            /**
                * <p>A reference to the parent object that contains the index object.</p>
                */
            ParentReference?: ObjectReference;
            /**
                * <p>The name of the link between the parent object and the index object.</p>
                */
            LinkName?: string;
    }
    export namespace CreateIndexRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateIndexRequest) => any;
    }
    export interface CreateIndexResponse {
            /**
                * <p>The <code>ObjectIdentifier</code> of the index created by this operation.</p>
                */
            ObjectIdentifier?: string;
    }
    export namespace CreateIndexResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateIndexResponse) => any;
    }
    /**
        * <p>Indicates that the requested index type is not supported.</p>
        */
    export class UnsupportedIndexTypeException extends __BaseException {
            readonly name: "UnsupportedIndexTypeException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedIndexTypeException, __BaseException>);
    }
    export interface CreateObjectRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the <a>Directory</a>
                *       in which the object will be created. For more information, see <a>arns</a>.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>A list of schema facets to be associated with the object. Do not provide minor version components. See <a>SchemaFacet</a> for details.</p>
                */
            SchemaFacets: SchemaFacet[] | undefined;
            /**
                * <p>The attribute map whose attribute ARN contains the key and attribute value as the map
                *       value.</p>
                */
            ObjectAttributeList?: AttributeKeyAndValue[];
            /**
                * <p>If specified, the parent reference to which this object will be attached.</p>
                */
            ParentReference?: ObjectReference;
            /**
                * <p>The name of link that is used to attach this object to a parent.</p>
                */
            LinkName?: string;
    }
    export namespace CreateObjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateObjectRequest) => any;
    }
    export interface CreateObjectResponse {
            /**
                * <p>The identifier that is associated with the object.</p>
                */
            ObjectIdentifier?: string;
    }
    export namespace CreateObjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateObjectResponse) => any;
    }
    export interface CreateSchemaRequest {
            /**
                * <p>The name that is associated with the schema. This is unique to each account and in each
                *       region.</p>
                */
            Name: string | undefined;
    }
    export namespace CreateSchemaRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSchemaRequest) => any;
    }
    export interface CreateSchemaResponse {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the schema. For more
                *       information, see <a>arns</a>.</p>
                */
            SchemaArn?: string;
    }
    export namespace CreateSchemaResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSchemaResponse) => any;
    }
    /**
        * <p>A typed link attribute definition.</p>
        */
    export interface TypedLinkAttributeDefinition {
            /**
                * <p>The unique name of the typed link attribute.</p>
                */
            Name: string | undefined;
            /**
                * <p>The type of the attribute.</p>
                */
            Type: FacetAttributeType | string | undefined;
            /**
                * <p>The default value of the attribute (if configured).</p>
                */
            DefaultValue?: TypedAttributeValue;
            /**
                * <p>Whether the attribute is mutable or not.</p>
                */
            IsImmutable?: boolean;
            /**
                * <p>Validation rules that are attached to the attribute definition.</p>
                */
            Rules?: Record<string, Rule>;
            /**
                * <p>The required behavior of the <code>TypedLinkAttributeDefinition</code>.</p>
                */
            RequiredBehavior: RequiredAttributeBehavior | string | undefined;
    }
    export namespace TypedLinkAttributeDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TypedLinkAttributeDefinition) => any;
    }
    /**
        * <p>Defines the typed links structure and its attributes. To create a typed link facet, use
        *       the <a>CreateTypedLinkFacet</a> API.</p>
        */
    export interface TypedLinkFacet {
            /**
                * <p>The unique name of the typed link facet.</p>
                */
            Name: string | undefined;
            /**
                * <p>A set of key-value pairs associated with the typed link. Typed link attributes are used when you have data values that are related to the link itself, and not to one of the two objects being linked. Identity attributes also serve to distinguish the link from others of the same type between the same objects.</p>
                */
            Attributes: TypedLinkAttributeDefinition[] | undefined;
            /**
                * <p>The set of attributes that distinguish links made from this facet from each other, in the order of significance. Listing typed links can filter on the values of these attributes. See <a>ListOutgoingTypedLinks</a> and <a>ListIncomingTypedLinks</a> for details.</p>
                */
            IdentityAttributeOrder: string[] | undefined;
    }
    export namespace TypedLinkFacet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TypedLinkFacet) => any;
    }
    export interface CreateTypedLinkFacetRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the schema. For more
                *       information, see <a>arns</a>.</p>
                */
            SchemaArn: string | undefined;
            /**
                * <p>
                *             <a>Facet</a> structure that is associated with the typed link
                *       facet.</p>
                */
            Facet: TypedLinkFacet | undefined;
    }
    export namespace CreateTypedLinkFacetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTypedLinkFacetRequest) => any;
    }
    export interface CreateTypedLinkFacetResponse {
    }
    export namespace CreateTypedLinkFacetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTypedLinkFacetResponse) => any;
    }
    export interface DeleteDirectoryRequest {
            /**
                * <p>The ARN of the directory to delete.</p>
                */
            DirectoryArn: string | undefined;
    }
    export namespace DeleteDirectoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDirectoryRequest) => any;
    }
    export interface DeleteDirectoryResponse {
            /**
                * <p>The ARN of the deleted directory.</p>
                */
            DirectoryArn: string | undefined;
    }
    export namespace DeleteDirectoryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDirectoryResponse) => any;
    }
    /**
        * <p>A directory that has been deleted and to which access has been attempted. Note: The
        *       requested resource will eventually cease to exist.</p>
        */
    export class DirectoryDeletedException extends __BaseException {
            readonly name: "DirectoryDeletedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DirectoryDeletedException, __BaseException>);
    }
    /**
        * <p>An operation can only operate on a disabled directory.</p>
        */
    export class DirectoryNotDisabledException extends __BaseException {
            readonly name: "DirectoryNotDisabledException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DirectoryNotDisabledException, __BaseException>);
    }
    export interface DeleteFacetRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the <a>Facet</a>.
                *       For more information, see <a>arns</a>.</p>
                */
            SchemaArn: string | undefined;
            /**
                * <p>The name of the facet to delete.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteFacetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFacetRequest) => any;
    }
    export interface DeleteFacetResponse {
    }
    export namespace DeleteFacetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFacetResponse) => any;
    }
    /**
        * <p>Occurs when deleting a facet that contains an attribute that is a target to an
        *       attribute reference in a different facet.</p>
        */
    export class FacetInUseException extends __BaseException {
            readonly name: "FacetInUseException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<FacetInUseException, __BaseException>);
    }
    /**
        * <p>The specified <a>Facet</a> could not be found.</p>
        */
    export class FacetNotFoundException extends __BaseException {
            readonly name: "FacetNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<FacetNotFoundException, __BaseException>);
    }
    export interface DeleteObjectRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the <a>Directory</a>
                *       where the object resides. For more information, see <a>arns</a>.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>A reference that identifies the object.</p>
                */
            ObjectReference: ObjectReference | undefined;
    }
    export namespace DeleteObjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteObjectRequest) => any;
    }
    export interface DeleteObjectResponse {
    }
    export namespace DeleteObjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteObjectResponse) => any;
    }
    /**
        * <p>Indicates that the requested operation cannot be completed because the object has not
        *       been detached from the tree.</p>
        */
    export class ObjectNotDetachedException extends __BaseException {
            readonly name: "ObjectNotDetachedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ObjectNotDetachedException, __BaseException>);
    }
    export interface DeleteSchemaRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the development schema. For more information, see
                *         <a>arns</a>.</p>
                */
            SchemaArn: string | undefined;
    }
    export namespace DeleteSchemaRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSchemaRequest) => any;
    }
    export interface DeleteSchemaResponse {
            /**
                * <p>The input ARN that is returned as part of the response. For more information, see
                *         <a>arns</a>.</p>
                */
            SchemaArn?: string;
    }
    export namespace DeleteSchemaResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSchemaResponse) => any;
    }
    /**
        * <p>The object could not be deleted because links still exist. Remove the links and then
        *       try the operation again.</p>
        */
    export class StillContainsLinksException extends __BaseException {
            readonly name: "StillContainsLinksException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<StillContainsLinksException, __BaseException>);
    }
    export interface DeleteTypedLinkFacetRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the schema. For more
                *       information, see <a>arns</a>.</p>
                */
            SchemaArn: string | undefined;
            /**
                * <p>The unique name of the typed link facet.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteTypedLinkFacetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTypedLinkFacetRequest) => any;
    }
    export interface DeleteTypedLinkFacetResponse {
    }
    export namespace DeleteTypedLinkFacetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTypedLinkFacetResponse) => any;
    }
    export interface DetachFromIndexRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the directory the index and object exist
                *       in.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>A reference to the index object.</p>
                */
            IndexReference: ObjectReference | undefined;
            /**
                * <p>A reference to the object being detached from the index.</p>
                */
            TargetReference: ObjectReference | undefined;
    }
    export namespace DetachFromIndexRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetachFromIndexRequest) => any;
    }
    export interface DetachFromIndexResponse {
            /**
                * <p>The <code>ObjectIdentifier</code> of the object that was detached from the index.</p>
                */
            DetachedObjectIdentifier?: string;
    }
    export namespace DetachFromIndexResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetachFromIndexResponse) => any;
    }
    /**
        * <p>Indicates that the object is not attached to the index.</p>
        */
    export class ObjectAlreadyDetachedException extends __BaseException {
            readonly name: "ObjectAlreadyDetachedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ObjectAlreadyDetachedException, __BaseException>);
    }
    export interface DetachObjectRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the <a>Directory</a>
                *       where objects reside. For more information, see <a>arns</a>.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>The parent reference from which the object with the specified link name is
                *       detached.</p>
                */
            ParentReference: ObjectReference | undefined;
            /**
                * <p>The link name associated with the object that needs to be detached.</p>
                */
            LinkName: string | undefined;
    }
    export namespace DetachObjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetachObjectRequest) => any;
    }
    export interface DetachObjectResponse {
            /**
                * <p>The <code>ObjectIdentifier</code> that was detached from the object.</p>
                */
            DetachedObjectIdentifier?: string;
    }
    export namespace DetachObjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetachObjectResponse) => any;
    }
    /**
        * <p>Occurs when any invalid operations are performed on an object that is not a node, such
        *       as calling <code>ListObjectChildren</code> for a leaf node object.</p>
        */
    export class NotNodeException extends __BaseException {
            readonly name: "NotNodeException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotNodeException, __BaseException>);
    }
    export interface DetachPolicyRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the <a>Directory</a>
                *       where both objects reside. For more information, see <a>arns</a>.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>Reference that identifies the policy object.</p>
                */
            PolicyReference: ObjectReference | undefined;
            /**
                * <p>Reference that identifies the object whose policy object will be detached.</p>
                */
            ObjectReference: ObjectReference | undefined;
    }
    export namespace DetachPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetachPolicyRequest) => any;
    }
    export interface DetachPolicyResponse {
    }
    export namespace DetachPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetachPolicyResponse) => any;
    }
    export interface DetachTypedLinkRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the directory where you want to detach the typed
                *       link.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>Used to accept a typed link specifier as input.</p>
                */
            TypedLinkSpecifier: TypedLinkSpecifier | undefined;
    }
    export namespace DetachTypedLinkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetachTypedLinkRequest) => any;
    }
    export interface DisableDirectoryRequest {
            /**
                * <p>The ARN of the directory to disable.</p>
                */
            DirectoryArn: string | undefined;
    }
    export namespace DisableDirectoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableDirectoryRequest) => any;
    }
    export interface DisableDirectoryResponse {
            /**
                * <p>The ARN of the directory that has been disabled.</p>
                */
            DirectoryArn: string | undefined;
    }
    export namespace DisableDirectoryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableDirectoryResponse) => any;
    }
    export interface EnableDirectoryRequest {
            /**
                * <p>The ARN of the directory to enable.</p>
                */
            DirectoryArn: string | undefined;
    }
    export namespace EnableDirectoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableDirectoryRequest) => any;
    }
    export interface EnableDirectoryResponse {
            /**
                * <p>The ARN of the enabled directory.</p>
                */
            DirectoryArn: string | undefined;
    }
    export namespace EnableDirectoryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableDirectoryResponse) => any;
    }
    export interface GetAppliedSchemaVersionRequest {
            /**
                * <p>The ARN of the applied schema.</p>
                */
            SchemaArn: string | undefined;
    }
    export namespace GetAppliedSchemaVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAppliedSchemaVersionRequest) => any;
    }
    export interface GetAppliedSchemaVersionResponse {
            /**
                * <p>Current applied schema ARN, including the minor version in use if one was provided.</p>
                */
            AppliedSchemaArn?: string;
    }
    export namespace GetAppliedSchemaVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAppliedSchemaVersionResponse) => any;
    }
    export interface GetDirectoryRequest {
            /**
                * <p>The ARN of the directory.</p>
                */
            DirectoryArn: string | undefined;
    }
    export namespace GetDirectoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDirectoryRequest) => any;
    }
    export enum DirectoryState {
            DELETED = "DELETED",
            DISABLED = "DISABLED",
            ENABLED = "ENABLED"
    }
    /**
        * <p>Directory structure that includes the directory name and directory ARN.</p>
        */
    export interface Directory {
            /**
                * <p>The name of the directory.</p>
                */
            Name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the directory. For more
                *       information, see <a>arns</a>.</p>
                */
            DirectoryArn?: string;
            /**
                * <p>The state of the directory. Can be either <code>Enabled</code>, <code>Disabled</code>, or <code>Deleted</code>.</p>
                */
            State?: DirectoryState | string;
            /**
                * <p>The date and time when the directory was created.</p>
                */
            CreationDateTime?: Date;
    }
    export namespace Directory {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Directory) => any;
    }
    export interface GetDirectoryResponse {
            /**
                * <p>Metadata about the directory.</p>
                */
            Directory: Directory | undefined;
    }
    export namespace GetDirectoryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDirectoryResponse) => any;
    }
    export interface GetFacetRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the <a>Facet</a>.
                *       For more information, see <a>arns</a>.</p>
                */
            SchemaArn: string | undefined;
            /**
                * <p>The name of the facet to retrieve.</p>
                */
            Name: string | undefined;
    }
    export namespace GetFacetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFacetRequest) => any;
    }
    /**
        * <p>A structure that contains <code>Name</code>, <code>ARN</code>, <code>Attributes</code>, <code>
        *                <a>Rule</a>s</code>, and
        *       <code>ObjectTypes</code>. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_whatarefacets.html">Facets</a> for more information.</p>
        */
    export interface Facet {
            /**
                * <p>The name of the <a>Facet</a>.</p>
                */
            Name?: string;
            /**
                * <p>The object type that is associated with the facet. See <a>CreateFacetRequest$ObjectType</a> for more details.</p>
                */
            ObjectType?: ObjectType | string;
            /**
                * <p>There are two different styles that you can define on any given facet, <code>Static</code> and <code>Dynamic</code>. For static facets, all attributes must be defined in the schema. For dynamic facets, attributes can be defined during data plane operations.</p>
                */
            FacetStyle?: FacetStyle | string;
    }
    export namespace Facet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Facet) => any;
    }
    export interface GetFacetResponse {
            /**
                * <p>The <a>Facet</a> structure that is associated with the facet.</p>
                */
            Facet?: Facet;
    }
    export namespace GetFacetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFacetResponse) => any;
    }
    export interface GetLinkAttributesRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the Directory where the typed link resides. For more information, see <a>arns</a> or <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>Allows a typed link specifier to be accepted as input.</p>
                */
            TypedLinkSpecifier: TypedLinkSpecifier | undefined;
            /**
                * <p>A list of attribute names whose values will be retrieved.</p>
                */
            AttributeNames: string[] | undefined;
            /**
                * <p>The consistency level at which to retrieve the attributes on a typed link.</p>
                */
            ConsistencyLevel?: ConsistencyLevel | string;
    }
    export namespace GetLinkAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLinkAttributesRequest) => any;
    }
    export interface GetLinkAttributesResponse {
            /**
                * <p>The attributes that are associated with the typed link.</p>
                */
            Attributes?: AttributeKeyAndValue[];
    }
    export namespace GetLinkAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLinkAttributesResponse) => any;
    }
    export interface GetObjectAttributesRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the <a>Directory</a> where the object resides.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>Reference that identifies the object whose attributes will be retrieved.</p>
                */
            ObjectReference: ObjectReference | undefined;
            /**
                * <p>The consistency level at which to retrieve the attributes on an object.</p>
                */
            ConsistencyLevel?: ConsistencyLevel | string;
            /**
                * <p>Identifier for the facet whose attributes will be retrieved. See <a>SchemaFacet</a> for details.</p>
                */
            SchemaFacet: SchemaFacet | undefined;
            /**
                * <p>List of attribute names whose values will be retrieved.</p>
                */
            AttributeNames: string[] | undefined;
    }
    export namespace GetObjectAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetObjectAttributesRequest) => any;
    }
    export interface GetObjectAttributesResponse {
            /**
                * <p>The attributes that are associated with the object.</p>
                */
            Attributes?: AttributeKeyAndValue[];
    }
    export namespace GetObjectAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetObjectAttributesResponse) => any;
    }
    export interface GetObjectInformationRequest {
            /**
                * <p>The ARN of the directory being retrieved.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>A reference to the object.</p>
                */
            ObjectReference: ObjectReference | undefined;
            /**
                * <p>The consistency level at which to retrieve the object information.</p>
                */
            ConsistencyLevel?: ConsistencyLevel | string;
    }
    export namespace GetObjectInformationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetObjectInformationRequest) => any;
    }
    export interface GetObjectInformationResponse {
            /**
                * <p>The facets attached to the specified object. Although the response does not include minor version information, the most recently applied minor version of each Facet is in effect. See <a>GetAppliedSchemaVersion</a> for details.</p>
                */
            SchemaFacets?: SchemaFacet[];
            /**
                * <p>The <code>ObjectIdentifier</code> of the specified object.</p>
                */
            ObjectIdentifier?: string;
    }
    export namespace GetObjectInformationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetObjectInformationResponse) => any;
    }
    export interface GetSchemaAsJsonRequest {
            /**
                * <p>The ARN of the schema to retrieve.</p>
                */
            SchemaArn: string | undefined;
    }
    export namespace GetSchemaAsJsonRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSchemaAsJsonRequest) => any;
    }
    export interface GetSchemaAsJsonResponse {
            /**
                * <p>The name of the retrieved schema.</p>
                */
            Name?: string;
            /**
                * <p>The JSON representation of the schema document.</p>
                */
            Document?: string;
    }
    export namespace GetSchemaAsJsonResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSchemaAsJsonResponse) => any;
    }
    export interface GetTypedLinkFacetInformationRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the schema. For more
                *       information, see <a>arns</a>.</p>
                */
            SchemaArn: string | undefined;
            /**
                * <p>The unique name of the typed link facet.</p>
                */
            Name: string | undefined;
    }
    export namespace GetTypedLinkFacetInformationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTypedLinkFacetInformationRequest) => any;
    }
    export interface GetTypedLinkFacetInformationResponse {
            /**
                * <p>The order of identity attributes for the facet, from most significant to least significant. The ability to filter typed
                *       links considers the order that the attributes are defined on the typed link facet. When
                *       providing ranges to typed link selection, any inexact ranges must be specified at the end. Any
                *       attributes that do not have a range specified are presumed to match the entire range. Filters
                *       are interpreted in the order of the attributes on the typed link facet, not the order in which
                *       they are supplied to any API calls. For more information about identity attributes, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
                */
            IdentityAttributeOrder?: string[];
    }
    export namespace GetTypedLinkFacetInformationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTypedLinkFacetInformationResponse) => any;
    }
    /**
        * <p>Indicates that the <code>NextToken</code> value is not valid.</p>
        */
    export class InvalidNextTokenException extends __BaseException {
            readonly name: "InvalidNextTokenException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidNextTokenException, __BaseException>);
    }
    export interface ListAppliedSchemaArnsRequest {
            /**
                * <p>The ARN of the directory you are listing.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>The response for <code>ListAppliedSchemaArns</code> when this parameter is used will list all minor version ARNs for a major version.</p>
                */
            SchemaArn?: string;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to retrieve.</p>
                */
            MaxResults?: number;
    }
    export namespace ListAppliedSchemaArnsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAppliedSchemaArnsRequest) => any;
    }
    export interface ListAppliedSchemaArnsResponse {
            /**
                * <p>The ARNs of schemas that are applied to the directory.</p>
                */
            SchemaArns?: string[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListAppliedSchemaArnsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAppliedSchemaArnsResponse) => any;
    }
    export interface ListAttachedIndicesRequest {
            /**
                * <p>The ARN of the directory.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>A reference to the object that has indices attached.</p>
                */
            TargetReference: ObjectReference | undefined;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to retrieve.</p>
                */
            MaxResults?: number;
            /**
                * <p>The consistency level to use for this operation.</p>
                */
            ConsistencyLevel?: ConsistencyLevel | string;
    }
    export namespace ListAttachedIndicesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAttachedIndicesRequest) => any;
    }
    export interface ListAttachedIndicesResponse {
            /**
                * <p>The indices attached to the specified object.</p>
                */
            IndexAttachments?: IndexAttachment[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListAttachedIndicesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAttachedIndicesResponse) => any;
    }
    export interface ListDevelopmentSchemaArnsRequest {
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to retrieve.</p>
                */
            MaxResults?: number;
    }
    export namespace ListDevelopmentSchemaArnsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDevelopmentSchemaArnsRequest) => any;
    }
    export interface ListDevelopmentSchemaArnsResponse {
            /**
                * <p>The ARNs of retrieved development schemas.</p>
                */
            SchemaArns?: string[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListDevelopmentSchemaArnsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDevelopmentSchemaArnsResponse) => any;
    }
    export interface ListDirectoriesRequest {
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to retrieve.</p>
                */
            MaxResults?: number;
            /**
                * <p>The state of the directories in the list. Can be either Enabled, Disabled, or
                *       Deleted.</p>
                */
            state?: DirectoryState | string;
    }
    export namespace ListDirectoriesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDirectoriesRequest) => any;
    }
    export interface ListDirectoriesResponse {
            /**
                * <p>Lists all directories that are associated with your account in pagination
                *       fashion.</p>
                */
            Directories: Directory[] | undefined;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListDirectoriesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDirectoriesResponse) => any;
    }
    export interface ListFacetAttributesRequest {
            /**
                * <p>The ARN of the schema where the facet resides.</p>
                */
            SchemaArn: string | undefined;
            /**
                * <p>The name of the facet whose attributes will be retrieved.</p>
                */
            Name: string | undefined;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to retrieve.</p>
                */
            MaxResults?: number;
    }
    export namespace ListFacetAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFacetAttributesRequest) => any;
    }
    export interface ListFacetAttributesResponse {
            /**
                * <p>The attributes attached to the facet.</p>
                */
            Attributes?: FacetAttribute[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListFacetAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFacetAttributesResponse) => any;
    }
    export interface ListFacetNamesRequest {
            /**
                * <p>The Amazon Resource Name (ARN) to retrieve facet names from.</p>
                */
            SchemaArn: string | undefined;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to retrieve.</p>
                */
            MaxResults?: number;
    }
    export namespace ListFacetNamesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFacetNamesRequest) => any;
    }
    export interface ListFacetNamesResponse {
            /**
                * <p>The names of facets that exist within the schema.</p>
                */
            FacetNames?: string[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListFacetNamesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFacetNamesResponse) => any;
    }
    export interface ListIncomingTypedLinksRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the directory where you want to list the typed
                *       links.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>Reference that identifies the object whose attributes will be listed.</p>
                */
            ObjectReference: ObjectReference | undefined;
            /**
                * <p>Provides range filters for multiple attributes. When providing ranges to typed link
                *       selection, any inexact ranges must be specified at the end. Any attributes that do not have a
                *       range specified are presumed to match the entire range.</p>
                */
            FilterAttributeRanges?: TypedLinkAttributeRange[];
            /**
                * <p>Filters are interpreted in the order of the attributes on the typed link facet, not the
                *       order in which they are supplied to any API calls.</p>
                */
            FilterTypedLink?: TypedLinkSchemaAndFacetName;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to retrieve.</p>
                */
            MaxResults?: number;
            /**
                * <p>The consistency level to execute the request at.</p>
                */
            ConsistencyLevel?: ConsistencyLevel | string;
    }
    export namespace ListIncomingTypedLinksRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIncomingTypedLinksRequest) => any;
    }
    export interface ListIncomingTypedLinksResponse {
            /**
                * <p>Returns one or more typed link specifiers as output.</p>
                */
            LinkSpecifiers?: TypedLinkSpecifier[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListIncomingTypedLinksResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIncomingTypedLinksResponse) => any;
    }
    export interface ListIndexRequest {
            /**
                * <p>The ARN of the directory that the index exists in.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>Specifies the ranges of indexed values that you want to query.</p>
                */
            RangesOnIndexedValues?: ObjectAttributeRange[];
            /**
                * <p>The reference to the index to list.</p>
                */
            IndexReference: ObjectReference | undefined;
            /**
                * <p>The maximum number of objects in a single page to retrieve from the index during a request. For more information, see <a href="http://docs.aws.amazon.com/clouddirectory/latest/developerguide/limits.html">Amazon Cloud Directory Limits</a>.</p>
                */
            MaxResults?: number;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The consistency level to execute the request at.</p>
                */
            ConsistencyLevel?: ConsistencyLevel | string;
    }
    export namespace ListIndexRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIndexRequest) => any;
    }
    export interface ListIndexResponse {
            /**
                * <p>The objects and indexed values attached to the index.</p>
                */
            IndexAttachments?: IndexAttachment[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListIndexResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIndexResponse) => any;
    }
    export interface ListManagedSchemaArnsRequest {
            /**
                * <p>The response for ListManagedSchemaArns. When this parameter is used, all minor version ARNs for a major version are listed.</p>
                */
            SchemaArn?: string;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to retrieve.</p>
                */
            MaxResults?: number;
    }
    export namespace ListManagedSchemaArnsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListManagedSchemaArnsRequest) => any;
    }
    export interface ListManagedSchemaArnsResponse {
            /**
                * <p>The ARNs for all AWS managed schemas.</p>
                */
            SchemaArns?: string[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListManagedSchemaArnsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListManagedSchemaArnsResponse) => any;
    }
    export interface ListObjectAttributesRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the <a>Directory</a>
                *       where the object resides. For more information, see <a>arns</a>.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>The reference that identifies the object whose attributes will be listed.</p>
                */
            ObjectReference: ObjectReference | undefined;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to be retrieved in a single call. This is an approximate
                *       number.</p>
                */
            MaxResults?: number;
            /**
                * <p>Represents the manner and timing in which the successful write or update of an object
                *       is reflected in a subsequent read operation of that same object.</p>
                */
            ConsistencyLevel?: ConsistencyLevel | string;
            /**
                * <p>Used to filter the list of object attributes that are associated with a certain
                *       facet.</p>
                */
            FacetFilter?: SchemaFacet;
    }
    export namespace ListObjectAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListObjectAttributesRequest) => any;
    }
    export interface ListObjectAttributesResponse {
            /**
                * <p>Attributes map that is associated with the object. <code>AttributeArn</code> is the
                *       key, and attribute value is the value.</p>
                */
            Attributes?: AttributeKeyAndValue[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListObjectAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListObjectAttributesResponse) => any;
    }
    export interface ListObjectChildrenRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the <a>Directory</a>
                *       where the object resides. For more information, see <a>arns</a>.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>The reference that identifies the object for which child objects are being
                *       listed.</p>
                */
            ObjectReference: ObjectReference | undefined;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to be retrieved in a single call. This is an approximate
                *       number.</p>
                */
            MaxResults?: number;
            /**
                * <p>Represents the manner and timing in which the successful write or update of an object
                *       is reflected in a subsequent read operation of that same object.</p>
                */
            ConsistencyLevel?: ConsistencyLevel | string;
    }
    export namespace ListObjectChildrenRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListObjectChildrenRequest) => any;
    }
    export interface ListObjectChildrenResponse {
            /**
                * <p>Children structure, which is a map with key as the <code>LinkName</code> and
                *         <code>ObjectIdentifier</code> as the value.</p>
                */
            Children?: Record<string, string>;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListObjectChildrenResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListObjectChildrenResponse) => any;
    }
    export interface ListObjectParentPathsRequest {
            /**
                * <p>The ARN of the directory to which the parent path applies.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>The reference that identifies the object whose parent paths are listed.</p>
                */
            ObjectReference: ObjectReference | undefined;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to be retrieved in a single call. This is an approximate
                *       number.</p>
                */
            MaxResults?: number;
    }
    export namespace ListObjectParentPathsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListObjectParentPathsRequest) => any;
    }
    export interface ListObjectParentPathsResponse {
            /**
                * <p>Returns the path to the <code>ObjectIdentifiers</code> that are associated with the
                *       directory.</p>
                */
            PathToObjectIdentifiersList?: PathToObjectIdentifiers[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListObjectParentPathsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListObjectParentPathsResponse) => any;
    }
    /**
        * <p>Cannot list the parents of a <a>Directory</a> root.</p>
        */
    export class CannotListParentOfRootException extends __BaseException {
            readonly name: "CannotListParentOfRootException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CannotListParentOfRootException, __BaseException>);
    }
    export interface ListObjectParentsRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the <a>Directory</a>
                *       where the object resides. For more information, see <a>arns</a>.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>The reference that identifies the object for which parent objects are being
                *       listed.</p>
                */
            ObjectReference: ObjectReference | undefined;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to be retrieved in a single call. This is an approximate
                *       number.</p>
                */
            MaxResults?: number;
            /**
                * <p>Represents the manner and timing in which the successful write or update of an object
                *       is reflected in a subsequent read operation of that same object.</p>
                */
            ConsistencyLevel?: ConsistencyLevel | string;
            /**
                * <p>When set to True, returns all <a>ListObjectParentsResponse$ParentLinks</a>. There could be multiple links between a parent-child pair.</p>
                */
            IncludeAllLinksToEachParent?: boolean;
    }
    export namespace ListObjectParentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListObjectParentsRequest) => any;
    }
    export interface ListObjectParentsResponse {
            /**
                * <p>The parent structure, which is a map with key as the <code>ObjectIdentifier</code> and
                *       LinkName as the value.</p>
                */
            Parents?: Record<string, string>;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>Returns a list of parent reference and LinkName Tuples.</p>
                */
            ParentLinks?: ObjectIdentifierAndLinkNameTuple[];
    }
    export namespace ListObjectParentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListObjectParentsResponse) => any;
    }
    export interface ListObjectPoliciesRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the <a>Directory</a>
                *       where objects reside. For more information, see <a>arns</a>.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>Reference that identifies the object for which policies will be listed.</p>
                */
            ObjectReference: ObjectReference | undefined;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to be retrieved in a single call. This is an approximate
                *       number.</p>
                */
            MaxResults?: number;
            /**
                * <p>Represents the manner and timing in which the successful write or update of an object
                *       is reflected in a subsequent read operation of that same object.</p>
                */
            ConsistencyLevel?: ConsistencyLevel | string;
    }
    export namespace ListObjectPoliciesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListObjectPoliciesRequest) => any;
    }
    export interface ListObjectPoliciesResponse {
            /**
                * <p>A list of policy <code>ObjectIdentifiers</code>, that are attached to the
                *       object.</p>
                */
            AttachedPolicyIds?: string[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListObjectPoliciesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListObjectPoliciesResponse) => any;
    }
    export interface ListOutgoingTypedLinksRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the directory where you want to list the typed
                *       links.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>A reference that identifies the object whose attributes will be listed.</p>
                */
            ObjectReference: ObjectReference | undefined;
            /**
                * <p>Provides range filters for multiple attributes. When providing ranges to typed link
                *       selection, any inexact ranges must be specified at the end. Any attributes that do not have a
                *       range specified are presumed to match the entire range.</p>
                */
            FilterAttributeRanges?: TypedLinkAttributeRange[];
            /**
                * <p>Filters are interpreted in the order of the attributes defined on the typed link facet,
                *       not the order they are supplied to any API calls.</p>
                */
            FilterTypedLink?: TypedLinkSchemaAndFacetName;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to retrieve.</p>
                */
            MaxResults?: number;
            /**
                * <p>The consistency level to execute the request at.</p>
                */
            ConsistencyLevel?: ConsistencyLevel | string;
    }
    export namespace ListOutgoingTypedLinksRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOutgoingTypedLinksRequest) => any;
    }
    export interface ListOutgoingTypedLinksResponse {
            /**
                * <p>Returns a typed link specifier as output.</p>
                */
            TypedLinkSpecifiers?: TypedLinkSpecifier[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListOutgoingTypedLinksResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOutgoingTypedLinksResponse) => any;
    }
    export interface ListPolicyAttachmentsRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the <a>Directory</a>
                *       where objects reside. For more information, see <a>arns</a>.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>The reference that identifies the policy object.</p>
                */
            PolicyReference: ObjectReference | undefined;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to be retrieved in a single call. This is an approximate
                *       number.</p>
                */
            MaxResults?: number;
            /**
                * <p>Represents the manner and timing in which the successful write or update of an object
                *       is reflected in a subsequent read operation of that same object.</p>
                */
            ConsistencyLevel?: ConsistencyLevel | string;
    }
    export namespace ListPolicyAttachmentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPolicyAttachmentsRequest) => any;
    }
    export interface ListPolicyAttachmentsResponse {
            /**
                * <p>A list of <code>ObjectIdentifiers</code> to which the policy is attached.</p>
                */
            ObjectIdentifiers?: string[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListPolicyAttachmentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPolicyAttachmentsResponse) => any;
    }
    export interface ListPublishedSchemaArnsRequest {
            /**
                * <p>The response for <code>ListPublishedSchemaArns</code> when this parameter is used will list all minor version ARNs for a major version.</p>
                */
            SchemaArn?: string;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to retrieve.</p>
                */
            MaxResults?: number;
    }
    export namespace ListPublishedSchemaArnsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPublishedSchemaArnsRequest) => any;
    }
    export interface ListPublishedSchemaArnsResponse {
            /**
                * <p>The ARNs of published schemas.</p>
                */
            SchemaArns?: string[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListPublishedSchemaArnsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPublishedSchemaArnsResponse) => any;
    }
    /**
        * <p>Can occur for multiple reasons such as when you tag a resource that doesn’t exist or if you specify a higher number of tags for a resource than the allowed limit. Allowed limit is 50 tags per resource.</p>
        */
    export class InvalidTaggingRequestException extends __BaseException {
            readonly name: "InvalidTaggingRequestException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTaggingRequestException, __BaseException>);
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource. Tagging is only supported for
                *       directories.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The pagination token. This is for future use. Currently pagination is not supported for
                *       tagging.</p>
                */
            NextToken?: string;
            /**
                * <p>The <code>MaxResults</code> parameter sets the maximum number of results returned in a
                *       single page. This is for future use and is not supported currently.</p>
                */
            MaxResults?: number;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    /**
        * <p>The tag structure that contains a tag key and value.</p>
        */
    export interface Tag {
            /**
                * <p>The key that is associated with the tag.</p>
                */
            Key?: string;
            /**
                * <p>The value that is associated with the tag.</p>
                */
            Value?: string;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>A list of tag key value pairs that are associated with the response.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The token to use to retrieve the next page of results. This value is null when there are no more results to return.</p>
                */
            NextToken?: string;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface ListTypedLinkFacetAttributesRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the schema. For more
                *       information, see <a>arns</a>.</p>
                */
            SchemaArn: string | undefined;
            /**
                * <p>The unique name of the typed link facet.</p>
                */
            Name: string | undefined;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to retrieve.</p>
                */
            MaxResults?: number;
    }
    export namespace ListTypedLinkFacetAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTypedLinkFacetAttributesRequest) => any;
    }
    export interface ListTypedLinkFacetAttributesResponse {
            /**
                * <p>An ordered set of attributes associate with the typed link.</p>
                */
            Attributes?: TypedLinkAttributeDefinition[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListTypedLinkFacetAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTypedLinkFacetAttributesResponse) => any;
    }
    export interface ListTypedLinkFacetNamesRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the schema. For more
                *       information, see <a>arns</a>.</p>
                */
            SchemaArn: string | undefined;
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to retrieve.</p>
                */
            MaxResults?: number;
    }
    export namespace ListTypedLinkFacetNamesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTypedLinkFacetNamesRequest) => any;
    }
    export interface ListTypedLinkFacetNamesResponse {
            /**
                * <p>The names of typed link facets that exist within the schema.</p>
                */
            FacetNames?: string[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace ListTypedLinkFacetNamesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTypedLinkFacetNamesResponse) => any;
    }
    export interface LookupPolicyRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the <a>Directory</a>.
                *       For more information, see <a>arns</a>.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>Reference that identifies the object whose policies will be looked up.</p>
                */
            ObjectReference: ObjectReference | undefined;
            /**
                * <p>The token to request the next page of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to be retrieved in a single call. This is an approximate
                *       number.</p>
                */
            MaxResults?: number;
    }
    export namespace LookupPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LookupPolicyRequest) => any;
    }
    export interface LookupPolicyResponse {
            /**
                * <p>Provides list of path to policies. Policies contain <code>PolicyId</code>, <code>ObjectIdentifier</code>, and
                *       <code>PolicyType</code>. For more
                *       information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies">Policies</a>.</p>
                */
            PolicyToPathList?: PolicyToPath[];
            /**
                * <p>The pagination token.</p>
                */
            NextToken?: string;
    }
    export namespace LookupPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LookupPolicyResponse) => any;
    }
    export interface PublishSchemaRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the development schema. For
                *       more information, see <a>arns</a>.</p>
                */
            DevelopmentSchemaArn: string | undefined;
            /**
                * <p>The major version under which the schema will be published. Schemas have both a major and minor version associated with them.</p>
                */
            Version: string | undefined;
            /**
                * <p>The minor version under which the schema will be published. This parameter is recommended. Schemas have both a major and minor version associated with them.</p>
                */
            MinorVersion?: string;
            /**
                * <p>The new name under which the schema will be published. If this is not provided, the
                *       development schema is considered.</p>
                */
            Name?: string;
    }
    export namespace PublishSchemaRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PublishSchemaRequest) => any;
    }
    export interface PublishSchemaResponse {
            /**
                * <p>The ARN that is associated with the published schema. For more information, see <a>arns</a>.</p>
                */
            PublishedSchemaArn?: string;
    }
    export namespace PublishSchemaResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PublishSchemaResponse) => any;
    }
    /**
        * <p>Indicates that a schema is already published.</p>
        */
    export class SchemaAlreadyPublishedException extends __BaseException {
            readonly name: "SchemaAlreadyPublishedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SchemaAlreadyPublishedException, __BaseException>);
    }
    /**
        * <p>Indicates that the provided <code>SchemaDoc</code> value is not valid.</p>
        */
    export class InvalidSchemaDocException extends __BaseException {
            readonly name: "InvalidSchemaDocException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSchemaDocException, __BaseException>);
    }
    export interface PutSchemaFromJsonRequest {
            /**
                * <p>The ARN of the schema to update.</p>
                */
            SchemaArn: string | undefined;
            /**
                * <p>The replacement JSON schema.</p>
                */
            Document: string | undefined;
    }
    export namespace PutSchemaFromJsonRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutSchemaFromJsonRequest) => any;
    }
    export interface PutSchemaFromJsonResponse {
            /**
                * <p>The ARN of the schema to update.</p>
                */
            Arn?: string;
    }
    export namespace PutSchemaFromJsonResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutSchemaFromJsonResponse) => any;
    }
    export interface RemoveFacetFromObjectRequest {
            /**
                * <p>The ARN of the directory in which the object resides.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>The facet to remove. See <a>SchemaFacet</a> for details.</p>
                */
            SchemaFacet: SchemaFacet | undefined;
            /**
                * <p>A reference to the object to remove the facet from.</p>
                */
            ObjectReference: ObjectReference | undefined;
    }
    export namespace RemoveFacetFromObjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveFacetFromObjectRequest) => any;
    }
    export interface RemoveFacetFromObjectResponse {
    }
    export namespace RemoveFacetFromObjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveFacetFromObjectResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource. Tagging is only supported for
                *       directories.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>A list of tag key-value pairs.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource. Tagging is only supported for
                *       directories.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>Keys of the tag that need to be removed from the resource.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    /**
        * <p>An attempt to modify a <a>Facet</a> resulted in an invalid schema
        *       exception.</p>
        */
    export class InvalidFacetUpdateException extends __BaseException {
            readonly name: "InvalidFacetUpdateException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidFacetUpdateException, __BaseException>);
    }
    /**
        * <p>A structure that contains information used to update an attribute.</p>
        */
    export interface FacetAttributeUpdate {
            /**
                * <p>The attribute to update.</p>
                */
            Attribute?: FacetAttribute;
            /**
                * <p>The action to perform when updating the attribute.</p>
                */
            Action?: UpdateActionType | string;
    }
    export namespace FacetAttributeUpdate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FacetAttributeUpdate) => any;
    }
    export interface UpdateFacetRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the <a>Facet</a>.
                *       For more information, see <a>arns</a>.</p>
                */
            SchemaArn: string | undefined;
            /**
                * <p>The name of the facet.</p>
                */
            Name: string | undefined;
            /**
                * <p>List of attributes that need to be updated in a given schema <a>Facet</a>.
                *       Each attribute is followed by <code>AttributeAction</code>, which specifies the type of update
                *       operation to perform. </p>
                */
            AttributeUpdates?: FacetAttributeUpdate[];
            /**
                * <p>The object type that is associated with the facet. See <a>CreateFacetRequest$ObjectType</a> for more details.</p>
                */
            ObjectType?: ObjectType | string;
    }
    export namespace UpdateFacetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFacetRequest) => any;
    }
    export interface UpdateFacetResponse {
    }
    export namespace UpdateFacetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFacetResponse) => any;
    }
    export interface UpdateLinkAttributesRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the Directory where the updated typed link resides. For more information, see <a>arns</a> or <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>Allows a typed link specifier to be accepted as input.</p>
                */
            TypedLinkSpecifier: TypedLinkSpecifier | undefined;
            /**
                * <p>The attributes update structure.</p>
                */
            AttributeUpdates: LinkAttributeUpdate[] | undefined;
    }
    export namespace UpdateLinkAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLinkAttributesRequest) => any;
    }
    export interface UpdateLinkAttributesResponse {
    }
    export namespace UpdateLinkAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLinkAttributesResponse) => any;
    }
    export interface UpdateObjectAttributesRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the <a>Directory</a>
                *       where the object resides. For more information, see <a>arns</a>.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>The reference that identifies the object.</p>
                */
            ObjectReference: ObjectReference | undefined;
            /**
                * <p>The attributes update structure.</p>
                */
            AttributeUpdates: ObjectAttributeUpdate[] | undefined;
    }
    export namespace UpdateObjectAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateObjectAttributesRequest) => any;
    }
    export interface UpdateObjectAttributesResponse {
            /**
                * <p>The <code>ObjectIdentifier</code> of the updated object.</p>
                */
            ObjectIdentifier?: string;
    }
    export namespace UpdateObjectAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateObjectAttributesResponse) => any;
    }
    export interface UpdateSchemaRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the development schema. For more information, see
                *         <a>arns</a>.</p>
                */
            SchemaArn: string | undefined;
            /**
                * <p>The name of the schema.</p>
                */
            Name: string | undefined;
    }
    export namespace UpdateSchemaRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSchemaRequest) => any;
    }
    export interface UpdateSchemaResponse {
            /**
                * <p>The ARN that is associated with the updated schema. For more information, see <a>arns</a>.</p>
                */
            SchemaArn?: string;
    }
    export namespace UpdateSchemaResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSchemaResponse) => any;
    }
    /**
        * <p>A typed link facet attribute update.</p>
        */
    export interface TypedLinkFacetAttributeUpdate {
            /**
                * <p>The attribute to update.</p>
                */
            Attribute: TypedLinkAttributeDefinition | undefined;
            /**
                * <p>The action to perform when updating the attribute.</p>
                */
            Action: UpdateActionType | string | undefined;
    }
    export namespace TypedLinkFacetAttributeUpdate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TypedLinkFacetAttributeUpdate) => any;
    }
    export interface UpdateTypedLinkFacetRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that is associated with the schema. For more
                *       information, see <a>arns</a>.</p>
                */
            SchemaArn: string | undefined;
            /**
                * <p>The unique name of the typed link facet.</p>
                */
            Name: string | undefined;
            /**
                * <p>Attributes update structure.</p>
                */
            AttributeUpdates: TypedLinkFacetAttributeUpdate[] | undefined;
            /**
                * <p>The order of identity attributes for the facet, from most significant to least significant. The ability to filter typed
                *       links considers the order that the attributes are defined on the typed link facet.  When
                *       providing ranges to a typed link selection, any inexact ranges must be specified at the end.
                *       Any attributes that do not have a range specified are presumed to match the entire range.
                *       Filters are interpreted in the order of the attributes on the typed link facet, not the order
                *       in which they are supplied to any API calls. For more information about identity attributes, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
                */
            IdentityAttributeOrder: string[] | undefined;
    }
    export namespace UpdateTypedLinkFacetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTypedLinkFacetRequest) => any;
    }
    export interface UpdateTypedLinkFacetResponse {
    }
    export namespace UpdateTypedLinkFacetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTypedLinkFacetResponse) => any;
    }
    /**
        * <p>Indicates a failure occurred while performing a check for backward compatibility between the specified schema and the schema that is currently applied to the directory.</p>
        */
    export class IncompatibleSchemaException extends __BaseException {
            readonly name: "IncompatibleSchemaException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<IncompatibleSchemaException, __BaseException>);
    }
    export interface UpgradeAppliedSchemaRequest {
            /**
                * <p>The revision of the published schema to upgrade the directory to.</p>
                */
            PublishedSchemaArn: string | undefined;
            /**
                * <p>The ARN for the directory to which the upgraded schema will be applied.</p>
                */
            DirectoryArn: string | undefined;
            /**
                * <p>Used for testing whether the major version schemas are backward compatible or not. If schema compatibility fails, an exception would be thrown else the call would succeed but no changes will be saved. This parameter is optional.</p>
                */
            DryRun?: boolean;
    }
    export namespace UpgradeAppliedSchemaRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpgradeAppliedSchemaRequest) => any;
    }
    export interface UpgradeAppliedSchemaResponse {
            /**
                * <p>The ARN of the upgraded schema that is returned as part of the response.</p>
                */
            UpgradedSchemaArn?: string;
            /**
                * <p>The ARN of the directory that is returned as part of the response.</p>
                */
            DirectoryArn?: string;
    }
    export namespace UpgradeAppliedSchemaResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpgradeAppliedSchemaResponse) => any;
    }
    export interface UpgradePublishedSchemaRequest {
            /**
                * <p>The ARN of the development schema with the changes used for the upgrade.</p>
                */
            DevelopmentSchemaArn: string | undefined;
            /**
                * <p>The ARN of the published schema to be upgraded.</p>
                */
            PublishedSchemaArn: string | undefined;
            /**
                * <p>Identifies the minor version of the published schema that will be created. This parameter is NOT optional.</p>
                */
            MinorVersion: string | undefined;
            /**
                * <p>Used for testing whether the Development schema provided is backwards compatible, or not, with the publish schema provided by the user to be upgraded. If schema compatibility fails, an exception would be thrown else the call would succeed. This parameter is optional and defaults to false.</p>
                */
            DryRun?: boolean;
    }
    export namespace UpgradePublishedSchemaRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpgradePublishedSchemaRequest) => any;
    }
    export interface UpgradePublishedSchemaResponse {
            /**
                * <p>The ARN of the upgraded schema that is returned as part of the response.</p>
                */
            UpgradedSchemaArn?: string;
    }
    export namespace UpgradePublishedSchemaResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpgradePublishedSchemaResponse) => any;
    }
}

declare module '@aws-sdk/client-clouddirectory/node_modules/@aws-sdk/client-clouddirectory/dist-types/models/CloudDirectoryServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from CloudDirectory service.
        */
    export class CloudDirectoryServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

